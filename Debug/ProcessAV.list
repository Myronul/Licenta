
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082e0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008468  08008468  00009468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084a0  080084a0  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  080084a0  080084a0  000094a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084a8  080084a8  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084a8  080084a8  000094a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084ac  080084ac  000094ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080084b0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a05c  2**0
                  CONTENTS
 10 .bss          00000f0c  2000005c  2000005c  0000a05c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f68  20000f68  0000a05c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a491  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b3b  00000000  00000000  0002451d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a8  00000000  00000000  00028058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000126a  00000000  00000000  00029800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005009  00000000  00000000  0002aa6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eb33  00000000  00000000  0002fa73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6b67  00000000  00000000  0004e5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012510d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066d4  00000000  00000000  00125150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0012b824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008450 	.word	0x08008450

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08008450 	.word	0x08008450

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <convert_color_16_to_18>:

uint16_t BackGroundColor = 0xFFFF; /*Variabila globala pentru culoarea de fundal curenta*/


void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	0adb      	lsrs	r3, r3, #11
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	115b      	asrs	r3, r3, #5
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80004d6:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 80004d8:	88fb      	ldrh	r3, [r7, #6]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	f003 031f 	and.w	r3, r3, #31
 80004e0:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 80004e2:	7bfa      	ldrb	r2, [r7, #15]
 80004e4:	4613      	mov	r3, r2
 80004e6:	019b      	lsls	r3, r3, #6
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	4a16      	ldr	r2, [pc, #88]	@ (8000544 <convert_color_16_to_18+0x8c>)
 80004ec:	fb82 1203 	smull	r1, r2, r2, r3
 80004f0:	441a      	add	r2, r3
 80004f2:	1112      	asrs	r2, r2, #4
 80004f4:	17db      	asrs	r3, r3, #31
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 80004fe:	7bbb      	ldrb	r3, [r7, #14]
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 8000504:	7b7a      	ldrb	r2, [r7, #13]
 8000506:	4613      	mov	r3, r2
 8000508:	019b      	lsls	r3, r3, #6
 800050a:	1a9b      	subs	r3, r3, r2
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <convert_color_16_to_18+0x8c>)
 800050e:	fb82 1203 	smull	r1, r2, r2, r3
 8000512:	441a      	add	r2, r3
 8000514:	1112      	asrs	r2, r2, #4
 8000516:	17db      	asrs	r3, r3, #31
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	b2db      	uxtb	r3, r3
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	7bfa      	ldrb	r2, [r7, #15]
 8000524:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	7bba      	ldrb	r2, [r7, #14]
 800052c:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	3302      	adds	r3, #2
 8000532:	7b7a      	ldrb	r2, [r7, #13]
 8000534:	701a      	strb	r2, [r3, #0]

}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	84210843 	.word	0x84210843

08000548 <fill_screen1>:
}



void fill_screen1(uint16_t color)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af02      	add	r7, sp, #8
 800054e:	4603      	mov	r3, r0
 8000550:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000552:	f107 020c 	add.w	r2, r7, #12
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	4611      	mov	r1, r2
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ffac 	bl	80004b8 <convert_color_16_to_18>

	uint8_t *line = malloc(320*sizeof(pixel));
 8000560:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8000564:	f007 fe28 	bl	80081b8 <malloc>
 8000568:	4603      	mov	r3, r0
 800056a:	613b      	str	r3, [r7, #16]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 800056c:	2377      	movs	r3, #119	@ 0x77
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	f240 13df 	movw	r3, #479	@ 0x1df
 8000574:	f240 123f 	movw	r2, #319	@ 0x13f
 8000578:	2100      	movs	r1, #0
 800057a:	2000      	movs	r0, #0
 800057c:	f000 faae 	bl	8000adc <set_adress_window>

	DC_DATA();
 8000580:	2201      	movs	r2, #1
 8000582:	2108      	movs	r1, #8
 8000584:	481e      	ldr	r0, [pc, #120]	@ (8000600 <fill_screen1+0xb8>)
 8000586:	f002 fa01 	bl	800298c <HAL_GPIO_WritePin>
	CS_A();
 800058a:	2200      	movs	r2, #0
 800058c:	2110      	movs	r1, #16
 800058e:	481c      	ldr	r0, [pc, #112]	@ (8000600 <fill_screen1+0xb8>)
 8000590:	f002 f9fc 	bl	800298c <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 8000594:	2300      	movs	r3, #0
 8000596:	82fb      	strh	r3, [r7, #22]
 8000598:	e00f      	b.n	80005ba <fill_screen1+0x72>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 800059a:	8afa      	ldrh	r2, [r7, #22]
 800059c:	4613      	mov	r3, r2
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	4413      	add	r3, r2
 80005a2:	693a      	ldr	r2, [r7, #16]
 80005a4:	4413      	add	r3, r2
 80005a6:	461a      	mov	r2, r3
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	8819      	ldrh	r1, [r3, #0]
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	8011      	strh	r1, [r2, #0]
 80005b2:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 80005b4:	8afb      	ldrh	r3, [r7, #22]
 80005b6:	3301      	adds	r3, #1
 80005b8:	82fb      	strh	r3, [r7, #22]
 80005ba:	8afb      	ldrh	r3, [r7, #22]
 80005bc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80005c0:	d3eb      	bcc.n	800059a <fill_screen1+0x52>
	}

	for(uint16_t y=0; y<480; y++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	82bb      	strh	r3, [r7, #20]
 80005c6:	e00a      	b.n	80005de <fill_screen1+0x96>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80005d0:	6939      	ldr	r1, [r7, #16]
 80005d2:	480c      	ldr	r0, [pc, #48]	@ (8000604 <fill_screen1+0xbc>)
 80005d4:	f003 fead 	bl	8004332 <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 80005d8:	8abb      	ldrh	r3, [r7, #20]
 80005da:	3301      	adds	r3, #1
 80005dc:	82bb      	strh	r3, [r7, #20]
 80005de:	8abb      	ldrh	r3, [r7, #20]
 80005e0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80005e4:	d3f0      	bcc.n	80005c8 <fill_screen1+0x80>

	}

	free(line);
 80005e6:	6938      	ldr	r0, [r7, #16]
 80005e8:	f007 fdee 	bl	80081c8 <free>

	CS_D();
 80005ec:	2201      	movs	r2, #1
 80005ee:	2110      	movs	r1, #16
 80005f0:	4803      	ldr	r0, [pc, #12]	@ (8000600 <fill_screen1+0xb8>)
 80005f2:	f002 f9cb 	bl	800298c <HAL_GPIO_WritePin>

}
 80005f6:	bf00      	nop
 80005f8:	3718      	adds	r7, #24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020c00 	.word	0x40020c00
 8000604:	20000958 	.word	0x20000958

08000608 <PendSV_Handler>:
	 * citirea datelor de pe cardul SD prin SDIO)
	 * Feature: De comutat in functie de o politica de planificare,
	 * momentan se comuta circular intre 2 procese de test!
	 */

    __asm("CPSID   I");
 8000608:	b672      	cpsid	i
    __asm("PUSH    {R4-R7}");
 800060a:	b4f0      	push	{r4, r5, r6, r7}
    __asm("MOV     R4, R8");
 800060c:	4644      	mov	r4, r8
    __asm("MOV     R5, R9");
 800060e:	464d      	mov	r5, r9
    __asm("MOV     R6, R10");
 8000610:	4656      	mov	r6, sl
    __asm("MOV     R7, R11");
 8000612:	465f      	mov	r7, fp
    __asm("PUSH    {R4-R7}");
 8000614:	b4f0      	push	{r4, r5, r6, r7}
    __asm("LDR     R0, =currentProcess");
 8000616:	4808      	ldr	r0, [pc, #32]	@ (8000638 <PendSV_Handler+0x30>)
    __asm("LDR     R1, [R0]");
 8000618:	6801      	ldr	r1, [r0, #0]
    __asm("MOV     R4, SP");
 800061a:	466c      	mov	r4, sp
    __asm("STR     R4, [R1]");
 800061c:	600c      	str	r4, [r1, #0]
    __asm("LDR     R1, [R1,#4]"); /*diferentiere pentru pnext*/
 800061e:	6849      	ldr	r1, [r1, #4]
    __asm("STR     R1, [R0]");
 8000620:	6001      	str	r1, [r0, #0]
    __asm("LDR     R4, [R1]");
 8000622:	680c      	ldr	r4, [r1, #0]
    __asm("MOV     SP, R4");
 8000624:	46a5      	mov	sp, r4
    __asm("POP     {R4-R7}");
 8000626:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8000628:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 800062a:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 800062c:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 800062e:	46bb      	mov	fp, r7
    __asm("POP     {R4-R7}");
 8000630:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("CPSIE   I ");
 8000632:	b662      	cpsie	i
    __asm("BX      LR");
 8000634:	4770      	bx	lr
}
 8000636:	bf00      	nop
 8000638:	2000008c 	.word	0x2000008c

0800063c <kernel_init>:

void kernel_init()
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	/*
	 * Functie pentru initializarea kernelului.
	 * Se vor initializa in mod static procesele din sistem
	 */
	__asm("CPSID   I");
 8000640:	b672      	cpsid	i

	tcb[0].pnext = &tcb[1];
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <kernel_init+0x54>)
 8000644:	4a13      	ldr	r2, [pc, #76]	@ (8000694 <kernel_init+0x58>)
 8000646:	605a      	str	r2, [r3, #4]
	tcb[1].pnext = &tcb[0];
 8000648:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <kernel_init+0x54>)
 800064a:	4a11      	ldr	r2, [pc, #68]	@ (8000690 <kernel_init+0x54>)
 800064c:	60da      	str	r2, [r3, #12]

	tcb[0].pstack = &TCB_STACK[0][STACKSIZE-16];
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <kernel_init+0x54>)
 8000650:	4a11      	ldr	r2, [pc, #68]	@ (8000698 <kernel_init+0x5c>)
 8000652:	601a      	str	r2, [r3, #0]
	TCB_STACK[0][STACKSIZE-1] = 0x01000000;
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <kernel_init+0x60>)
 8000656:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800065a:	f8c3 23e4 	str.w	r2, [r3, #996]	@ 0x3e4
	TCB_STACK[0][STACKSIZE-2] = (int32_t)(Task0);
 800065e:	4a10      	ldr	r2, [pc, #64]	@ (80006a0 <kernel_init+0x64>)
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <kernel_init+0x60>)
 8000662:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

    tcb[1].pstack = &TCB_STACK[1][STACKSIZE-16];
 8000666:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <kernel_init+0x54>)
 8000668:	4a0e      	ldr	r2, [pc, #56]	@ (80006a4 <kernel_init+0x68>)
 800066a:	609a      	str	r2, [r3, #8]
    TCB_STACK[1][STACKSIZE-1] = 0x01000000;
 800066c:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <kernel_init+0x60>)
 800066e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000672:	f8c3 27cc 	str.w	r2, [r3, #1996]	@ 0x7cc
    TCB_STACK[1][STACKSIZE-2] = (int32_t)(Task1);
 8000676:	4a0c      	ldr	r2, [pc, #48]	@ (80006a8 <kernel_init+0x6c>)
 8000678:	4b08      	ldr	r3, [pc, #32]	@ (800069c <kernel_init+0x60>)
 800067a:	f8c3 27c8 	str.w	r2, [r3, #1992]	@ 0x7c8

    currentProcess = &tcb[0];
 800067e:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <kernel_init+0x70>)
 8000680:	4a03      	ldr	r2, [pc, #12]	@ (8000690 <kernel_init+0x54>)
 8000682:	601a      	str	r2, [r3, #0]

    __asm("CPSIE   I ");
 8000684:	b662      	cpsie	i
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	2000007c 	.word	0x2000007c
 8000694:	20000084 	.word	0x20000084
 8000698:	20000438 	.word	0x20000438
 800069c:	20000090 	.word	0x20000090
 80006a0:	080006ed 	.word	0x080006ed
 80006a4:	20000820 	.word	0x20000820
 80006a8:	08000721 	.word	0x08000721
 80006ac:	2000008c 	.word	0x2000008c

080006b0 <kernel_start>:


__attribute__((naked)) void kernel_start(void)
{
	__asm("CPSID   I");
 80006b0:	b672      	cpsid	i
	__asm("LDR     R0, =startOS");
 80006b2:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <kernel_start+0x34>)
	__asm("MOV     R1, 1");
 80006b4:	f04f 0101 	mov.w	r1, #1
	__asm("STR     R1, [R0]");
 80006b8:	6001      	str	r1, [r0, #0]
    __asm("LDR     R0, =currentProcess");
 80006ba:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <kernel_start+0x38>)
    __asm("LDR     R2, [R0]");
 80006bc:	6802      	ldr	r2, [r0, #0]
    __asm("LDR     R4, [R2]");
 80006be:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4");
 80006c0:	46a5      	mov	sp, r4
    __asm("POP     {R4-R7}");
 80006c2:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 80006c4:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 80006c6:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 80006c8:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 80006ca:	46bb      	mov	fp, r7
    __asm("POP     {R4-R7}");
 80006cc:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("POP     {R0-R3}");
 80006ce:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 80006d0:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 80006d2:	46a4      	mov	ip, r4
    __asm("ADD     SP,SP,#4");
 80006d4:	b001      	add	sp, #4
    __asm("POP     {R4}");
 80006d6:	bc10      	pop	{r4}
    __asm("MOV     LR, R4");
 80006d8:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4");
 80006da:	b001      	add	sp, #4
    __asm("CPSIE   I ");
 80006dc:	b662      	cpsie	i
    __asm("BX      LR");
 80006de:	4770      	bx	lr

}
 80006e0:	bf00      	nop
 80006e2:	0000      	.short	0x0000
 80006e4:	20000ba4 	.word	0x20000ba4
 80006e8:	2000008c 	.word	0x2000008c

080006ec <Task0>:



volatile void Task0()
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    while(1)
    {


       //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
       mutex = 1;
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <Task0+0x2c>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
       HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2110      	movs	r1, #16
 80006fa:	4808      	ldr	r0, [pc, #32]	@ (800071c <Task0+0x30>)
 80006fc:	f002 f946 	bl	800298c <HAL_GPIO_WritePin>
       fill_screen1(0x0000);
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ff21 	bl	8000548 <fill_screen1>
       mutex = 0;
 8000706:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <Task0+0x2c>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
       HAL_Delay(20);
 800070c:	2014      	movs	r0, #20
 800070e:	f001 f9ef 	bl	8001af0 <HAL_Delay>
       mutex = 1;
 8000712:	bf00      	nop
 8000714:	e7ec      	b.n	80006f0 <Task0+0x4>
 8000716:	bf00      	nop
 8000718:	20000078 	.word	0x20000078
 800071c:	40021000 	.word	0x40021000

08000720 <Task1>:

    }
}

volatile void Task1()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
    while(1)
    {

    	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
    	//flagg = 1;
    	mutex = 1;
 8000724:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <Task1+0x3c>)
 8000726:	2201      	movs	r2, #1
 8000728:	601a      	str	r2, [r3, #0]
    	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2110      	movs	r1, #16
 800072e:	480c      	ldr	r0, [pc, #48]	@ (8000760 <Task1+0x40>)
 8000730:	f002 f92c 	bl	800298c <HAL_GPIO_WritePin>
    	fill_screen1(0xF100);
 8000734:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8000738:	f7ff ff06 	bl	8000548 <fill_screen1>
    	fill_screen1(0xF1AA);
 800073c:	f24f 10aa 	movw	r0, #61866	@ 0xf1aa
 8000740:	f7ff ff02 	bl	8000548 <fill_screen1>
    	fill_screen1(0xFFFF);
 8000744:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000748:	f7ff fefe 	bl	8000548 <fill_screen1>
    	mutex = 0;
 800074c:	4b03      	ldr	r3, [pc, #12]	@ (800075c <Task1+0x3c>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
    	HAL_Delay(20);
 8000752:	2014      	movs	r0, #20
 8000754:	f001 f9cc 	bl	8001af0 <HAL_Delay>
    	mutex = 1;
 8000758:	bf00      	nop
 800075a:	e7e3      	b.n	8000724 <Task1+0x4>
 800075c:	20000078 	.word	0x20000078
 8000760:	40021000 	.word	0x40021000

08000764 <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 800076e:	2200      	movs	r2, #0
 8000770:	2108      	movs	r1, #8
 8000772:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <LCD_send_command+0x40>)
 8000774:	f002 f90a 	bl	800298c <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8000778:	2200      	movs	r2, #0
 800077a:	2110      	movs	r1, #16
 800077c:	4809      	ldr	r0, [pc, #36]	@ (80007a4 <LCD_send_command+0x40>)
 800077e:	f002 f905 	bl	800298c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 8000782:	1df9      	adds	r1, r7, #7
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	2201      	movs	r2, #1
 800078a:	4807      	ldr	r0, [pc, #28]	@ (80007a8 <LCD_send_command+0x44>)
 800078c:	f003 fdd1 	bl	8004332 <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 8000790:	2201      	movs	r2, #1
 8000792:	2110      	movs	r1, #16
 8000794:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <LCD_send_command+0x40>)
 8000796:	f002 f8f9 	bl	800298c <HAL_GPIO_WritePin>


}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40020c00 	.word	0x40020c00
 80007a8:	20000958 	.word	0x20000958

080007ac <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 80007b6:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <LCD_send_data_multi+0xdc>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 80007bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007c0:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80007d4:	6939      	ldr	r1, [r7, #16]
 80007d6:	fb01 f202 	mul.w	r2, r1, r2
 80007da:	1a9b      	subs	r3, r3, r2
 80007dc:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 80007de:	2201      	movs	r2, #1
 80007e0:	2108      	movs	r1, #8
 80007e2:	482a      	ldr	r0, [pc, #168]	@ (800088c <LCD_send_data_multi+0xe0>)
 80007e4:	f002 f8d2 	bl	800298c <HAL_GPIO_WritePin>
	CS_A();
 80007e8:	2200      	movs	r2, #0
 80007ea:	2110      	movs	r1, #16
 80007ec:	4827      	ldr	r0, [pc, #156]	@ (800088c <LCD_send_data_multi+0xe0>)
 80007ee:	f002 f8cd 	bl	800298c <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d821      	bhi.n	800083e <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 80007fa:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <LCD_send_data_multi+0xdc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b29b      	uxth	r3, r3
 8000804:	461a      	mov	r2, r3
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	4821      	ldr	r0, [pc, #132]	@ (8000890 <LCD_send_data_multi+0xe4>)
 800080a:	f003 fffd 	bl	8004808 <HAL_SPI_Transmit_DMA>
 800080e:	e02c      	b.n	800086a <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 8000810:	bf00      	nop
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <LCD_send_data_multi+0xdc>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0fa      	beq.n	8000812 <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 800081c:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <LCD_send_data_multi+0xdc>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	b29b      	uxth	r3, r3
 8000826:	461a      	mov	r2, r3
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	4819      	ldr	r0, [pc, #100]	@ (8000890 <LCD_send_data_multi+0xe4>)
 800082c:	f003 ffec 	bl	8004808 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	693b      	ldr	r3, [r7, #16]
 8000834:	4413      	add	r3, r2
 8000836:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	3b01      	subs	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d1e5      	bne.n	8000810 <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00f      	beq.n	800086a <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 800084a:	bf00      	nop
 800084c:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <LCD_send_data_multi+0xdc>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0fa      	beq.n	800084c <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <LCD_send_data_multi+0xdc>)
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	b29b      	uxth	r3, r3
 8000860:	461a      	mov	r2, r3
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	480a      	ldr	r0, [pc, #40]	@ (8000890 <LCD_send_data_multi+0xe4>)
 8000866:	f003 ffcf 	bl	8004808 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 800086a:	bf00      	nop
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <LCD_send_data_multi+0xdc>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0fa      	beq.n	800086c <LCD_send_data_multi+0xc0>
	CS_D();
 8000876:	2201      	movs	r2, #1
 8000878:	2110      	movs	r1, #16
 800087a:	4804      	ldr	r0, [pc, #16]	@ (800088c <LCD_send_data_multi+0xe0>)
 800087c:	f002 f886 	bl	800298c <HAL_GPIO_WritePin>

}
 8000880:	bf00      	nop
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000ba0 	.word	0x20000ba0
 800088c:	40020c00 	.word	0x40020c00
 8000890:	20000958 	.word	0x20000958

08000894 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 800089e:	2201      	movs	r2, #1
 80008a0:	2108      	movs	r1, #8
 80008a2:	480c      	ldr	r0, [pc, #48]	@ (80008d4 <LCD_send_data+0x40>)
 80008a4:	f002 f872 	bl	800298c <HAL_GPIO_WritePin>
	CS_A();
 80008a8:	2200      	movs	r2, #0
 80008aa:	2110      	movs	r1, #16
 80008ac:	4809      	ldr	r0, [pc, #36]	@ (80008d4 <LCD_send_data+0x40>)
 80008ae:	f002 f86d 	bl	800298c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 80008b2:	1df9      	adds	r1, r7, #7
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	2201      	movs	r2, #1
 80008ba:	4807      	ldr	r0, [pc, #28]	@ (80008d8 <LCD_send_data+0x44>)
 80008bc:	f003 fd39 	bl	8004332 <HAL_SPI_Transmit>

	CS_D();
 80008c0:	2201      	movs	r2, #1
 80008c2:	2110      	movs	r1, #16
 80008c4:	4803      	ldr	r0, [pc, #12]	@ (80008d4 <LCD_send_data+0x40>)
 80008c6:	f002 f861 	bl	800298c <HAL_GPIO_WritePin>

}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40020c00 	.word	0x40020c00
 80008d8:	20000958 	.word	0x20000958

080008dc <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 80008e0:	2200      	movs	r2, #0
 80008e2:	2140      	movs	r1, #64	@ 0x40
 80008e4:	487c      	ldr	r0, [pc, #496]	@ (8000ad8 <ILI9488_driver_init+0x1fc>)
 80008e6:	f002 f851 	bl	800298c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80008ea:	200a      	movs	r0, #10
 80008ec:	f001 f900 	bl	8001af0 <HAL_Delay>
	RST_D();
 80008f0:	2201      	movs	r2, #1
 80008f2:	2140      	movs	r1, #64	@ 0x40
 80008f4:	4878      	ldr	r0, [pc, #480]	@ (8000ad8 <ILI9488_driver_init+0x1fc>)
 80008f6:	f002 f849 	bl	800298c <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff ff32 	bl	8000764 <LCD_send_command>
	HAL_Delay(150);
 8000900:	2096      	movs	r0, #150	@ 0x96
 8000902:	f001 f8f5 	bl	8001af0 <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 8000906:	2011      	movs	r0, #17
 8000908:	f7ff ff2c 	bl	8000764 <LCD_send_command>
	HAL_Delay(255);
 800090c:	20ff      	movs	r0, #255	@ 0xff
 800090e:	f001 f8ef 	bl	8001af0 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 8000912:	20e0      	movs	r0, #224	@ 0xe0
 8000914:	f7ff ff26 	bl	8000764 <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 8000918:	2000      	movs	r0, #0
 800091a:	f7ff ffbb 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x0C);
 800091e:	200c      	movs	r0, #12
 8000920:	f7ff ffb8 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x05);
 8000924:	2005      	movs	r0, #5
 8000926:	f7ff ffb5 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x04);
 800092a:	2004      	movs	r0, #4
 800092c:	f7ff ffb2 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x0F);
 8000930:	200f      	movs	r0, #15
 8000932:	f7ff ffaf 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x06);
 8000936:	2006      	movs	r0, #6
 8000938:	f7ff ffac 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x3A);
 800093c:	203a      	movs	r0, #58	@ 0x3a
 800093e:	f7ff ffa9 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x56);
 8000942:	2056      	movs	r0, #86	@ 0x56
 8000944:	f7ff ffa6 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x4D);
 8000948:	204d      	movs	r0, #77	@ 0x4d
 800094a:	f7ff ffa3 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x03);
 800094e:	2003      	movs	r0, #3
 8000950:	f7ff ffa0 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x0A);
 8000954:	200a      	movs	r0, #10
 8000956:	f7ff ff9d 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x06);
 800095a:	2006      	movs	r0, #6
 800095c:	f7ff ff9a 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x30);
 8000960:	2030      	movs	r0, #48	@ 0x30
 8000962:	f7ff ff97 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x3E);
 8000966:	203e      	movs	r0, #62	@ 0x3e
 8000968:	f7ff ff94 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x0F);
 800096c:	200f      	movs	r0, #15
 800096e:	f7ff ff91 	bl	8000894 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 8000972:	20e1      	movs	r0, #225	@ 0xe1
 8000974:	f7ff fef6 	bl	8000764 <LCD_send_command>
	LCD_send_data(0x00);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff8b 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x13);
 800097e:	2013      	movs	r0, #19
 8000980:	f7ff ff88 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x18);
 8000984:	2018      	movs	r0, #24
 8000986:	f7ff ff85 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x01);
 800098a:	2001      	movs	r0, #1
 800098c:	f7ff ff82 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x11);
 8000990:	2011      	movs	r0, #17
 8000992:	f7ff ff7f 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x06);
 8000996:	2006      	movs	r0, #6
 8000998:	f7ff ff7c 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x38);
 800099c:	2038      	movs	r0, #56	@ 0x38
 800099e:	f7ff ff79 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x34);
 80009a2:	2034      	movs	r0, #52	@ 0x34
 80009a4:	f7ff ff76 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x4D);
 80009a8:	204d      	movs	r0, #77	@ 0x4d
 80009aa:	f7ff ff73 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x06);
 80009ae:	2006      	movs	r0, #6
 80009b0:	f7ff ff70 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x0D);
 80009b4:	200d      	movs	r0, #13
 80009b6:	f7ff ff6d 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x0B);
 80009ba:	200b      	movs	r0, #11
 80009bc:	f7ff ff6a 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x31);
 80009c0:	2031      	movs	r0, #49	@ 0x31
 80009c2:	f7ff ff67 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x37);
 80009c6:	2037      	movs	r0, #55	@ 0x37
 80009c8:	f7ff ff64 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x0F);
 80009cc:	200f      	movs	r0, #15
 80009ce:	f7ff ff61 	bl	8000894 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 80009d2:	20c0      	movs	r0, #192	@ 0xc0
 80009d4:	f7ff fec6 	bl	8000764 <LCD_send_command>
	LCD_send_data(0x18);
 80009d8:	2018      	movs	r0, #24
 80009da:	f7ff ff5b 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x16);
 80009de:	2016      	movs	r0, #22
 80009e0:	f7ff ff58 	bl	8000894 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 80009e4:	20c1      	movs	r0, #193	@ 0xc1
 80009e6:	f7ff febd 	bl	8000764 <LCD_send_command>
	LCD_send_data(0x45);
 80009ea:	2045      	movs	r0, #69	@ 0x45
 80009ec:	f7ff ff52 	bl	8000894 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 80009f0:	20c2      	movs	r0, #194	@ 0xc2
 80009f2:	f7ff feb7 	bl	8000764 <LCD_send_command>
	LCD_send_data(0x33);
 80009f6:	2033      	movs	r0, #51	@ 0x33
 80009f8:	f7ff ff4c 	bl	8000894 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 80009fc:	20c3      	movs	r0, #195	@ 0xc3
 80009fe:	f7ff feb1 	bl	8000764 <LCD_send_command>
	LCD_send_data(0x33);
 8000a02:	2033      	movs	r0, #51	@ 0x33
 8000a04:	f7ff ff46 	bl	8000894 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 8000a08:	2036      	movs	r0, #54	@ 0x36
 8000a0a:	f7ff feab 	bl	8000764 <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 8000a0e:	205c      	movs	r0, #92	@ 0x5c
 8000a10:	f7ff ff40 	bl	8000894 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 8000a14:	203a      	movs	r0, #58	@ 0x3a
 8000a16:	f7ff fea5 	bl	8000764 <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 8000a1a:	2006      	movs	r0, #6
 8000a1c:	f7ff ff3a 	bl	8000894 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fe9f 	bl	8000764 <LCD_send_command>
	LCD_send_command(0x00);
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff fe9c 	bl	8000764 <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 8000a2c:	20b0      	movs	r0, #176	@ 0xb0
 8000a2e:	f7ff fe99 	bl	8000764 <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 8000a32:	2000      	movs	r0, #0
 8000a34:	f7ff ff2e 	bl	8000894 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 8000a38:	20b1      	movs	r0, #177	@ 0xb1
 8000a3a:	f7ff fe93 	bl	8000764 <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 8000a3e:	20a0      	movs	r0, #160	@ 0xa0
 8000a40:	f7ff ff28 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 8000a44:	2011      	movs	r0, #17
 8000a46:	f7ff ff25 	bl	8000894 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 8000a4a:	20b4      	movs	r0, #180	@ 0xb4
 8000a4c:	f7ff fe8a 	bl	8000764 <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 8000a50:	2002      	movs	r0, #2
 8000a52:	f7ff ff1f 	bl	8000894 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 8000a56:	20b5      	movs	r0, #181	@ 0xb5
 8000a58:	f7ff fe84 	bl	8000764 <LCD_send_command>
	LCD_send_data(0x02);
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f7ff ff19 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x02);
 8000a62:	2002      	movs	r0, #2
 8000a64:	f7ff ff16 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x0A);
 8000a68:	200a      	movs	r0, #10
 8000a6a:	f7ff ff13 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x04);
 8000a6e:	2004      	movs	r0, #4
 8000a70:	f7ff ff10 	bl	8000894 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 8000a74:	20b6      	movs	r0, #182	@ 0xb6
 8000a76:	f7ff fe75 	bl	8000764 <LCD_send_command>
	LCD_send_data(0x02);
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f7ff ff0a 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x02);
 8000a80:	2002      	movs	r0, #2
 8000a82:	f7ff ff07 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x3B);
 8000a86:	203b      	movs	r0, #59	@ 0x3b
 8000a88:	f7ff ff04 	bl	8000894 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 8000a8c:	20e9      	movs	r0, #233	@ 0xe9
 8000a8e:	f7ff fe69 	bl	8000764 <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff fefe 	bl	8000894 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8000a98:	20f7      	movs	r0, #247	@ 0xf7
 8000a9a:	f7ff fe63 	bl	8000764 <LCD_send_command>
	LCD_send_data(0xA9);
 8000a9e:	20a9      	movs	r0, #169	@ 0xa9
 8000aa0:	f7ff fef8 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x51);
 8000aa4:	2051      	movs	r0, #81	@ 0x51
 8000aa6:	f7ff fef5 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x2C);
 8000aaa:	202c      	movs	r0, #44	@ 0x2c
 8000aac:	f7ff fef2 	bl	8000894 <LCD_send_data>
	LCD_send_data(0x82);
 8000ab0:	2082      	movs	r0, #130	@ 0x82
 8000ab2:	f7ff feef 	bl	8000894 <LCD_send_data>


	LCD_send_command(0x11);
 8000ab6:	2011      	movs	r0, #17
 8000ab8:	f7ff fe54 	bl	8000764 <LCD_send_command>
	HAL_Delay(255);
 8000abc:	20ff      	movs	r0, #255	@ 0xff
 8000abe:	f001 f817 	bl	8001af0 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 8000ac2:	2051      	movs	r0, #81	@ 0x51
 8000ac4:	f7ff fe4e 	bl	8000764 <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 8000ac8:	20ff      	movs	r0, #255	@ 0xff
 8000aca:	f7ff fee3 	bl	8000894 <LCD_send_data>
	LCD_send_command(0x29); //Display on
 8000ace:	2029      	movs	r0, #41	@ 0x29
 8000ad0:	f7ff fe48 	bl	8000764 <LCD_send_command>


}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40020c00 	.word	0x40020c00

08000adc <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4608      	mov	r0, r1
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4623      	mov	r3, r4
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	4603      	mov	r3, r0
 8000af0:	80bb      	strh	r3, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	807b      	strh	r3, [r7, #2]
 8000af6:	4613      	mov	r3, r2
 8000af8:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 8000afa:	202a      	movs	r0, #42	@ 0x2a
 8000afc:	f7ff fe32 	bl	8000764 <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 8000b00:	88fb      	ldrh	r3, [r7, #6]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	733b      	strb	r3, [r7, #12]
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 8000b10:	887b      	ldrh	r3, [r7, #2]
 8000b12:	0a1b      	lsrs	r3, r3, #8
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	73bb      	strb	r3, [r7, #14]
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2104      	movs	r1, #4
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fe40 	bl	80007ac <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 8000b2c:	202b      	movs	r0, #43	@ 0x2b
 8000b2e:	f7ff fe19 	bl	8000764 <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 8000b32:	88bb      	ldrh	r3, [r7, #4]
 8000b34:	0a1b      	lsrs	r3, r3, #8
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	733b      	strb	r3, [r7, #12]
 8000b3c:	88bb      	ldrh	r3, [r7, #4]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 8000b42:	883b      	ldrh	r3, [r7, #0]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	73bb      	strb	r3, [r7, #14]
 8000b4c:	883b      	ldrh	r3, [r7, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	2104      	movs	r1, #4
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fe27 	bl	80007ac <LCD_send_data_multi>

	if(x == 'w')
 8000b5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b62:	2b77      	cmp	r3, #119	@ 0x77
 8000b64:	d102      	bne.n	8000b6c <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 8000b66:	202c      	movs	r0, #44	@ 0x2c
 8000b68:	f7ff fdfc 	bl	8000764 <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 8000b6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b70:	2b72      	cmp	r3, #114	@ 0x72
 8000b72:	d102      	bne.n	8000b7a <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 8000b74:	202e      	movs	r0, #46	@ 0x2e
 8000b76:	f7ff fdf5 	bl	8000764 <LCD_send_command>
	}


}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd90      	pop	{r4, r7, pc}
	...

08000b84 <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	 * folosind DMA. Odata terminat transferul SPI prin DMA,
	 * aceasta functia de CallBack se va apela, setandu-ne un flag
	 * pentru a indica starea acestui transfer de date.
	 */

	if(hspi->Instance == SPI1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a05      	ldr	r2, [pc, #20]	@ (8000ba8 <HAL_SPI_TxCpltCallback+0x24>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d102      	bne.n	8000b9c <HAL_SPI_TxCpltCallback+0x18>
	{
		flagDmaSpiTx = 1;
 8000b96:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <HAL_SPI_TxCpltCallback+0x28>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
	}



}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	40013000 	.word	0x40013000
 8000bac:	20000ba0 	.word	0x20000ba0

08000bb0 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	/*
	 * Functie de CallBack pentru terminarea receptiei datelor
	 * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	 */

	if(hspi->Instance == SPI1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8000c68 <HAL_SPI_RxCpltCallback+0xb8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d102      	bne.n	8000bc8 <HAL_SPI_RxCpltCallback+0x18>
	{
		/*
		 * SPI1 folosit pentru LCD
		 */

		flagDmaSpiRx = 1;
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c6c <HAL_SPI_RxCpltCallback+0xbc>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]

	}


	if(hspi->Instance == SPI2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a28      	ldr	r2, [pc, #160]	@ (8000c70 <HAL_SPI_RxCpltCallback+0xc0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d145      	bne.n	8000c5e <HAL_SPI_RxCpltCallback+0xae>
	{
		/*
		 * Receptionare comenzi controller
		 */

		switch(dataController)
 8000bd2:	4b28      	ldr	r3, [pc, #160]	@ (8000c74 <HAL_SPI_RxCpltCallback+0xc4>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	2b0f      	cmp	r3, #15
 8000bda:	d837      	bhi.n	8000c4c <HAL_SPI_RxCpltCallback+0x9c>
 8000bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8000be4 <HAL_SPI_RxCpltCallback+0x34>)
 8000bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be2:	bf00      	nop
 8000be4:	08000c25 	.word	0x08000c25
 8000be8:	08000c2d 	.word	0x08000c2d
 8000bec:	08000c4d 	.word	0x08000c4d
 8000bf0:	08000c35 	.word	0x08000c35
 8000bf4:	08000c4d 	.word	0x08000c4d
 8000bf8:	08000c4d 	.word	0x08000c4d
 8000bfc:	08000c4d 	.word	0x08000c4d
 8000c00:	08000c3d 	.word	0x08000c3d
 8000c04:	08000c4d 	.word	0x08000c4d
 8000c08:	08000c4d 	.word	0x08000c4d
 8000c0c:	08000c4d 	.word	0x08000c4d
 8000c10:	08000c4d 	.word	0x08000c4d
 8000c14:	08000c4d 	.word	0x08000c4d
 8000c18:	08000c4d 	.word	0x08000c4d
 8000c1c:	08000c4d 	.word	0x08000c4d
 8000c20:	08000c45 	.word	0x08000c45
		{
		  	case DxRight:
		  	  currentDx = DxRight;
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <HAL_SPI_RxCpltCallback+0xc8>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
		  	  break;
 8000c2a:	e013      	b.n	8000c54 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxLeft:
		  	  currentDx = DxLeft;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_SPI_RxCpltCallback+0xc8>)
 8000c2e:	2202      	movs	r2, #2
 8000c30:	701a      	strb	r2, [r3, #0]
		  	  break;
 8000c32:	e00f      	b.n	8000c54 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxUp:
		  	  currentDx = DxUp;
 8000c34:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <HAL_SPI_RxCpltCallback+0xc8>)
 8000c36:	2204      	movs	r2, #4
 8000c38:	701a      	strb	r2, [r3, #0]
		  	  break;
 8000c3a:	e00b      	b.n	8000c54 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxDown:
		  	  currentDx = DxDown;
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <HAL_SPI_RxCpltCallback+0xc8>)
 8000c3e:	2208      	movs	r2, #8
 8000c40:	701a      	strb	r2, [r3, #0]
		  	  break;
 8000c42:	e007      	b.n	8000c54 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxStart:
		  	  currentDx = DxStart;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <HAL_SPI_RxCpltCallback+0xc8>)
 8000c46:	2210      	movs	r2, #16
 8000c48:	701a      	strb	r2, [r3, #0]
		  	  break;
 8000c4a:	e003      	b.n	8000c54 <HAL_SPI_RxCpltCallback+0xa4>
		  	default:
		  	  currentDx = 0x00;
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c78 <HAL_SPI_RxCpltCallback+0xc8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
		  	  break;
 8000c52:	bf00      	nop
		}

		/*Reinitializare intrerupere rcpt SPI2 intr Controller*/

		HAL_SPI_Receive_IT(&hspi2, &dataController, sizeof(dataController));
 8000c54:	2201      	movs	r2, #1
 8000c56:	4907      	ldr	r1, [pc, #28]	@ (8000c74 <HAL_SPI_RxCpltCallback+0xc4>)
 8000c58:	4808      	ldr	r0, [pc, #32]	@ (8000c7c <HAL_SPI_RxCpltCallback+0xcc>)
 8000c5a:	f003 fcaf 	bl	80045bc <HAL_SPI_Receive_IT>

	}

}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40013000 	.word	0x40013000
 8000c6c:	20000ba1 	.word	0x20000ba1
 8000c70:	40003800 	.word	0x40003800
 8000c74:	20000ba2 	.word	0x20000ba2
 8000c78:	20000ba3 	.word	0x20000ba3
 8000c7c:	200009b0 	.word	0x200009b0

08000c80 <HAL_TIM_PeriodElapsedCallback>:

unsigned int k = 0;
extern int mutex;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a11      	ldr	r2, [pc, #68]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d11a      	bne.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x48>
    {

    	k = (k+1)%50;
 8000c92:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000c9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000c9e:	091b      	lsrs	r3, r3, #4
 8000ca0:	2132      	movs	r1, #50	@ 0x32
 8000ca2:	fb01 f303 	mul.w	r3, r1, r3
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000caa:	6013      	str	r3, [r2, #0]

    	if(startOS == 1 && mutex==0)
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d109      	bne.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x48>
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d105      	bne.n	8000cc8 <HAL_TIM_PeriodElapsedCallback+0x48>
    	{
    		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; /*comutare de context cu ISR PendSV*/
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	4a09      	ldr	r2, [pc, #36]	@ (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	6053      	str	r3, [r2, #4]
    	}
    }
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	40000800 	.word	0x40000800
 8000cd8:	20000ba8 	.word	0x20000ba8
 8000cdc:	51eb851f 	.word	0x51eb851f
 8000ce0:	20000ba4 	.word	0x20000ba4
 8000ce4:	20000078 	.word	0x20000078
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	@ 0x30
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf2:	f000 fe8b 	bl	8001a0c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	210f      	movs	r1, #15
 8000cfa:	f06f 0001 	mvn.w	r0, #1
 8000cfe:	f000 fff6 	bl	8001cee <HAL_NVIC_SetPriority>
  //HAL_NVIC_SetPriority(TIM4_IRQn, 14, 0);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 f831 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f000 fa53 	bl	80011b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d0a:	f000 fa13 	bl	8001134 <MX_DMA_Init>
  MX_SPI1_Init();
 8000d0e:	f000 f8df 	bl	8000ed0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000d12:	f000 f9e5 	bl	80010e0 <MX_USART1_UART_Init>
  MX_DAC_Init();
 8000d16:	f000 f891 	bl	8000e3c <MX_DAC_Init>
  MX_TIM2_Init();
 8000d1a:	f000 f947 	bl	8000fac <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 8000d1e:	f000 f8b7 	bl	8000e90 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000d22:	f006 fbf7 	bl	8007514 <MX_FATFS_Init>
  MX_SPI2_Init();
 8000d26:	f000 f909 	bl	8000f3c <MX_SPI2_Init>
  MX_TIM4_Init();
 8000d2a:	f000 f98b 	bl	8001044 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 8000d2e:	f000 fad5 	bl	80012dc <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 8000d32:	f7ff fdd3 	bl	80008dc <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 8000d36:	4808      	ldr	r0, [pc, #32]	@ (8000d58 <main+0x6c>)
 8000d38:	f004 fb0e 	bl	8005358 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8000d3c:	4807      	ldr	r0, [pc, #28]	@ (8000d5c <main+0x70>)
 8000d3e:	f004 fb73 	bl	8005428 <HAL_TIM_Base_Start_IT>
  HAL_SPI_Receive_IT(&hspi2, &dataController, sizeof(dataController)); /*Initializare SPI2 intr Controller*/
 8000d42:	2201      	movs	r2, #1
 8000d44:	4906      	ldr	r1, [pc, #24]	@ (8000d60 <main+0x74>)
 8000d46:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <main+0x78>)
 8000d48:	f003 fc38 	bl	80045bc <HAL_SPI_Receive_IT>

  kernel_init();
 8000d4c:	f7ff fc76 	bl	800063c <kernel_init>
  kernel_start();
 8000d50:	f7ff fcae 	bl	80006b0 <kernel_start>

  while(1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <main+0x68>
 8000d58:	20000ac8 	.word	0x20000ac8
 8000d5c:	20000b10 	.word	0x20000b10
 8000d60:	20000ba2 	.word	0x20000ba2
 8000d64:	200009b0 	.word	0x200009b0

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b094      	sub	sp, #80	@ 0x50
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	2230      	movs	r2, #48	@ 0x30
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f007 fadc 	bl	8008334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	4b28      	ldr	r3, [pc, #160]	@ (8000e34 <SystemClock_Config+0xcc>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	4a27      	ldr	r2, [pc, #156]	@ (8000e34 <SystemClock_Config+0xcc>)
 8000d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9c:	4b25      	ldr	r3, [pc, #148]	@ (8000e34 <SystemClock_Config+0xcc>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	4b22      	ldr	r3, [pc, #136]	@ (8000e38 <SystemClock_Config+0xd0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a21      	ldr	r2, [pc, #132]	@ (8000e38 <SystemClock_Config+0xd0>)
 8000db2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <SystemClock_Config+0xd0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ddc:	23a8      	movs	r3, #168	@ 0xa8
 8000dde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de0:	2302      	movs	r3, #2
 8000de2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000de4:	2307      	movs	r3, #7
 8000de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de8:	f107 0320 	add.w	r3, r7, #32
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 fde7 	bl	80029c0 <HAL_RCC_OscConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000df8:	f000 fa6a 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfc:	230f      	movs	r3, #15
 8000dfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e00:	2302      	movs	r3, #2
 8000e02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e08:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2105      	movs	r1, #5
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 f848 	bl	8002eb0 <HAL_RCC_ClockConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e26:	f000 fa53 	bl	80012d0 <Error_Handler>
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	3750      	adds	r7, #80	@ 0x50
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40007000 	.word	0x40007000

08000e3c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e42:	463b      	mov	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <MX_DAC_Init+0x4c>)
 8000e4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e8c <MX_DAC_Init+0x50>)
 8000e4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e50:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <MX_DAC_Init+0x4c>)
 8000e52:	f000 ff82 	bl	8001d5a <HAL_DAC_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e5c:	f000 fa38 	bl	80012d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000e60:	2324      	movs	r3, #36	@ 0x24
 8000e62:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e68:	463b      	mov	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	@ (8000e88 <MX_DAC_Init+0x4c>)
 8000e70:	f000 ff95 	bl	8001d9e <HAL_DAC_ConfigChannel>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e7a:	f000 fa29 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000860 	.word	0x20000860
 8000e8c:	40007400 	.word	0x40007400

08000e90 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <MX_SDIO_SD_Init+0x38>)
 8000e96:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <MX_SDIO_SD_Init+0x3c>)
 8000e98:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <MX_SDIO_SD_Init+0x38>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <MX_SDIO_SD_Init+0x38>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <MX_SDIO_SD_Init+0x38>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <MX_SDIO_SD_Init+0x38>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000eb2:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <MX_SDIO_SD_Init+0x38>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	@ (8000ec8 <MX_SDIO_SD_Init+0x38>)
 8000eba:	2208      	movs	r2, #8
 8000ebc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	200008d4 	.word	0x200008d4
 8000ecc:	40012c00 	.word	0x40012c00

08000ed0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000ed6:	4a18      	ldr	r2, [pc, #96]	@ (8000f38 <MX_SPI1_Init+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eda:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000edc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ee0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000efc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f1c:	220a      	movs	r2, #10
 8000f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <MX_SPI1_Init+0x64>)
 8000f22:	f003 f97d 	bl	8004220 <HAL_SPI_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f2c:	f000 f9d0 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000958 	.word	0x20000958
 8000f38:	40013000 	.word	0x40013000

08000f3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f42:	4a19      	ldr	r2, [pc, #100]	@ (8000fa8 <MX_SPI2_Init+0x6c>)
 8000f44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f50:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f54:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f6e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f72:	2208      	movs	r2, #8
 8000f74:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f8a:	220a      	movs	r2, #10
 8000f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	@ (8000fa4 <MX_SPI2_Init+0x68>)
 8000f90:	f003 f946 	bl	8004220 <HAL_SPI_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000f9a:	f000 f999 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200009b0 	.word	0x200009b0
 8000fa8:	40003800 	.word	0x40003800

08000fac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <MX_TIM2_Init+0x94>)
 8000fca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <MX_TIM2_Init+0x94>)
 8000fd2:	2229      	movs	r2, #41	@ 0x29
 8000fd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <MX_TIM2_Init+0x94>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 27;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <MX_TIM2_Init+0x94>)
 8000fde:	221b      	movs	r2, #27
 8000fe0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <MX_TIM2_Init+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <MX_TIM2_Init+0x94>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fee:	4814      	ldr	r0, [pc, #80]	@ (8001040 <MX_TIM2_Init+0x94>)
 8000ff0:	f004 f963 	bl	80052ba <HAL_TIM_Base_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000ffa:	f000 f969 	bl	80012d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	4619      	mov	r1, r3
 800100a:	480d      	ldr	r0, [pc, #52]	@ (8001040 <MX_TIM2_Init+0x94>)
 800100c:	f004 fb6c 	bl	80056e8 <HAL_TIM_ConfigClockSource>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001016:	f000 f95b 	bl	80012d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800101a:	2320      	movs	r3, #32
 800101c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	@ (8001040 <MX_TIM2_Init+0x94>)
 8001028:	f004 fd94 	bl	8005b54 <HAL_TIMEx_MasterConfigSynchronization>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001032:	f000 f94d 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000ac8 	.word	0x20000ac8

08001044 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001060:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <MX_TIM4_Init+0x94>)
 8001062:	4a1e      	ldr	r2, [pc, #120]	@ (80010dc <MX_TIM4_Init+0x98>)
 8001064:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <MX_TIM4_Init+0x94>)
 8001068:	2254      	movs	r2, #84	@ 0x54
 800106a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_TIM4_Init+0x94>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <MX_TIM4_Init+0x94>)
 8001074:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001078:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107a:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_TIM4_Init+0x94>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001080:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <MX_TIM4_Init+0x94>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001086:	4814      	ldr	r0, [pc, #80]	@ (80010d8 <MX_TIM4_Init+0x94>)
 8001088:	f004 f917 	bl	80052ba <HAL_TIM_Base_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001092:	f000 f91d 	bl	80012d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	4619      	mov	r1, r3
 80010a2:	480d      	ldr	r0, [pc, #52]	@ (80010d8 <MX_TIM4_Init+0x94>)
 80010a4:	f004 fb20 	bl	80056e8 <HAL_TIM_ConfigClockSource>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80010ae:	f000 f90f 	bl	80012d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010ba:	463b      	mov	r3, r7
 80010bc:	4619      	mov	r1, r3
 80010be:	4806      	ldr	r0, [pc, #24]	@ (80010d8 <MX_TIM4_Init+0x94>)
 80010c0:	f004 fd48 	bl	8005b54 <HAL_TIMEx_MasterConfigSynchronization>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80010ca:	f000 f901 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000b10 	.word	0x20000b10
 80010dc:	40000800 	.word	0x40000800

080010e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e4:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	@ (8001130 <MX_USART1_UART_Init+0x50>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010ea:	4b10      	ldr	r3, [pc, #64]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 80010ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_USART1_UART_Init+0x4c>)
 8001118:	f004 fdac 	bl	8005c74 <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001122:	f000 f8d5 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000b58 	.word	0x20000b58
 8001130:	40011000 	.word	0x40011000

08001134 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <MX_DMA_Init+0x78>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a1a      	ldr	r2, [pc, #104]	@ (80011ac <MX_DMA_Init+0x78>)
 8001144:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <MX_DMA_Init+0x78>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_DMA_Init+0x78>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a13      	ldr	r2, [pc, #76]	@ (80011ac <MX_DMA_Init+0x78>)
 8001160:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_DMA_Init+0x78>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	2010      	movs	r0, #16
 8001178:	f000 fdb9 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800117c:	2010      	movs	r0, #16
 800117e:	f000 fdd2 	bl	8001d26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2038      	movs	r0, #56	@ 0x38
 8001188:	f000 fdb1 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800118c:	2038      	movs	r0, #56	@ 0x38
 800118e:	f000 fdca 	bl	8001d26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	203b      	movs	r0, #59	@ 0x3b
 8001198:	f000 fda9 	bl	8001cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800119c:	203b      	movs	r0, #59	@ 0x3b
 800119e:	f000 fdc2 	bl	8001d26 <HAL_NVIC_EnableIRQ>

}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	@ 0x30
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	4b3e      	ldr	r3, [pc, #248]	@ (80012c4 <MX_GPIO_Init+0x114>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a3d      	ldr	r2, [pc, #244]	@ (80012c4 <MX_GPIO_Init+0x114>)
 80011d0:	f043 0310 	orr.w	r3, r3, #16
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b3b      	ldr	r3, [pc, #236]	@ (80012c4 <MX_GPIO_Init+0x114>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <MX_GPIO_Init+0x114>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a36      	ldr	r2, [pc, #216]	@ (80012c4 <MX_GPIO_Init+0x114>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b34      	ldr	r3, [pc, #208]	@ (80012c4 <MX_GPIO_Init+0x114>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b30      	ldr	r3, [pc, #192]	@ (80012c4 <MX_GPIO_Init+0x114>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a2f      	ldr	r2, [pc, #188]	@ (80012c4 <MX_GPIO_Init+0x114>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b2d      	ldr	r3, [pc, #180]	@ (80012c4 <MX_GPIO_Init+0x114>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b29      	ldr	r3, [pc, #164]	@ (80012c4 <MX_GPIO_Init+0x114>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a28      	ldr	r2, [pc, #160]	@ (80012c4 <MX_GPIO_Init+0x114>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b26      	ldr	r3, [pc, #152]	@ (80012c4 <MX_GPIO_Init+0x114>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <MX_GPIO_Init+0x114>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a21      	ldr	r2, [pc, #132]	@ (80012c4 <MX_GPIO_Init+0x114>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <MX_GPIO_Init+0x114>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <MX_GPIO_Init+0x114>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a1a      	ldr	r2, [pc, #104]	@ (80012c4 <MX_GPIO_Init+0x114>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <MX_GPIO_Init+0x114>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2110      	movs	r1, #16
 8001272:	4815      	ldr	r0, [pc, #84]	@ (80012c8 <MX_GPIO_Init+0x118>)
 8001274:	f001 fb8a 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2158      	movs	r1, #88	@ 0x58
 800127c:	4813      	ldr	r0, [pc, #76]	@ (80012cc <MX_GPIO_Init+0x11c>)
 800127e:	f001 fb85 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001282:	2310      	movs	r3, #16
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4619      	mov	r1, r3
 8001298:	480b      	ldr	r0, [pc, #44]	@ (80012c8 <MX_GPIO_Init+0x118>)
 800129a:	f001 f9db 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 800129e:	2358      	movs	r3, #88	@ 0x58
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	@ (80012cc <MX_GPIO_Init+0x11c>)
 80012b6:	f001 f9cd 	bl	8002654 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ba:	bf00      	nop
 80012bc:	3730      	adds	r7, #48	@ 0x30
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40020c00 	.word	0x40020c00

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <Error_Handler+0x8>

080012dc <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 80012e0:	2201      	movs	r2, #1
 80012e2:	4903      	ldr	r1, [pc, #12]	@ (80012f0 <init_cardSD+0x14>)
 80012e4:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <init_cardSD+0x18>)
 80012e6:	f006 fec5 	bl	8008074 <f_mount>

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	08008468 	.word	0x08008468
 80012f4:	20000bac 	.word	0x20000bac

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001306:	4a0f      	ldr	r2, [pc, #60]	@ (8001344 <HAL_MspInit+0x4c>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800130c:	6453      	str	r3, [r2, #68]	@ 0x44
 800130e:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <HAL_MspInit+0x4c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <HAL_MspInit+0x4c>)
 8001324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	@ 0x40
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_MspInit+0x4c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	@ 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a30      	ldr	r2, [pc, #192]	@ (8001428 <HAL_DAC_MspInit+0xe0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d159      	bne.n	800141e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b2f      	ldr	r3, [pc, #188]	@ (800142c <HAL_DAC_MspInit+0xe4>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	4a2e      	ldr	r2, [pc, #184]	@ (800142c <HAL_DAC_MspInit+0xe4>)
 8001374:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001378:	6413      	str	r3, [r2, #64]	@ 0x40
 800137a:	4b2c      	ldr	r3, [pc, #176]	@ (800142c <HAL_DAC_MspInit+0xe4>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b28      	ldr	r3, [pc, #160]	@ (800142c <HAL_DAC_MspInit+0xe4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a27      	ldr	r2, [pc, #156]	@ (800142c <HAL_DAC_MspInit+0xe4>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b25      	ldr	r3, [pc, #148]	@ (800142c <HAL_DAC_MspInit+0xe4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013a2:	2310      	movs	r3, #16
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	2303      	movs	r3, #3
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	481e      	ldr	r0, [pc, #120]	@ (8001430 <HAL_DAC_MspInit+0xe8>)
 80013b6:	f001 f94d 	bl	8002654 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80013ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001434 <HAL_DAC_MspInit+0xec>)
 80013bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001438 <HAL_DAC_MspInit+0xf0>)
 80013be:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80013c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001434 <HAL_DAC_MspInit+0xec>)
 80013c2:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80013c6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <HAL_DAC_MspInit+0xec>)
 80013ca:	2240      	movs	r2, #64	@ 0x40
 80013cc:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ce:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <HAL_DAC_MspInit+0xec>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80013d4:	4b17      	ldr	r3, [pc, #92]	@ (8001434 <HAL_DAC_MspInit+0xec>)
 80013d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013da:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013dc:	4b15      	ldr	r3, [pc, #84]	@ (8001434 <HAL_DAC_MspInit+0xec>)
 80013de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013e2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013e4:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <HAL_DAC_MspInit+0xec>)
 80013e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013ea:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <HAL_DAC_MspInit+0xec>)
 80013ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013f2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <HAL_DAC_MspInit+0xec>)
 80013f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013fa:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <HAL_DAC_MspInit+0xec>)
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001402:	480c      	ldr	r0, [pc, #48]	@ (8001434 <HAL_DAC_MspInit+0xec>)
 8001404:	f000 fd24 	bl	8001e50 <HAL_DMA_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800140e:	f7ff ff5f 	bl	80012d0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a07      	ldr	r2, [pc, #28]	@ (8001434 <HAL_DAC_MspInit+0xec>)
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	4a06      	ldr	r2, [pc, #24]	@ (8001434 <HAL_DAC_MspInit+0xec>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	@ 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40007400 	.word	0x40007400
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000
 8001434:	20000874 	.word	0x20000874
 8001438:	40026088 	.word	0x40026088

0800143c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a31      	ldr	r2, [pc, #196]	@ (8001520 <HAL_SD_MspInit+0xe4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d15b      	bne.n	8001516 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b30      	ldr	r3, [pc, #192]	@ (8001524 <HAL_SD_MspInit+0xe8>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	4a2f      	ldr	r2, [pc, #188]	@ (8001524 <HAL_SD_MspInit+0xe8>)
 8001468:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800146c:	6453      	str	r3, [r2, #68]	@ 0x44
 800146e:	4b2d      	ldr	r3, [pc, #180]	@ (8001524 <HAL_SD_MspInit+0xe8>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b29      	ldr	r3, [pc, #164]	@ (8001524 <HAL_SD_MspInit+0xe8>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a28      	ldr	r2, [pc, #160]	@ (8001524 <HAL_SD_MspInit+0xe8>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <HAL_SD_MspInit+0xe8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	4b22      	ldr	r3, [pc, #136]	@ (8001524 <HAL_SD_MspInit+0xe8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a21      	ldr	r2, [pc, #132]	@ (8001524 <HAL_SD_MspInit+0xe8>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001524 <HAL_SD_MspInit+0xe8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014bc:	2301      	movs	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80014c4:	230c      	movs	r3, #12
 80014c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	4816      	ldr	r0, [pc, #88]	@ (8001528 <HAL_SD_MspInit+0xec>)
 80014d0:	f001 f8c0 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80014e6:	230c      	movs	r3, #12
 80014e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	480d      	ldr	r0, [pc, #52]	@ (8001528 <HAL_SD_MspInit+0xec>)
 80014f2:	f001 f8af 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014f6:	2304      	movs	r3, #4
 80014f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fe:	2301      	movs	r3, #1
 8001500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001506:	230c      	movs	r3, #12
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150a:	f107 0314 	add.w	r3, r7, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4806      	ldr	r0, [pc, #24]	@ (800152c <HAL_SD_MspInit+0xf0>)
 8001512:	f001 f89f 	bl	8002654 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3728      	adds	r7, #40	@ 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40012c00 	.word	0x40012c00
 8001524:	40023800 	.word	0x40023800
 8001528:	40020800 	.word	0x40020800
 800152c:	40020c00 	.word	0x40020c00

08001530 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	@ 0x30
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a74      	ldr	r2, [pc, #464]	@ (8001720 <HAL_SPI_MspInit+0x1f0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	f040 8089 	bne.w	8001666 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	4b72      	ldr	r3, [pc, #456]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 800155a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155c:	4a71      	ldr	r2, [pc, #452]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 800155e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001562:	6453      	str	r3, [r2, #68]	@ 0x44
 8001564:	4b6f      	ldr	r3, [pc, #444]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 8001566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001568:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800156c:	61bb      	str	r3, [r7, #24]
 800156e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	4b6b      	ldr	r3, [pc, #428]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 8001576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001578:	4a6a      	ldr	r2, [pc, #424]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001580:	4b68      	ldr	r3, [pc, #416]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 8001582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800158c:	23e0      	movs	r3, #224	@ 0xe0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800159c:	2305      	movs	r3, #5
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4860      	ldr	r0, [pc, #384]	@ (8001728 <HAL_SPI_MspInit+0x1f8>)
 80015a8:	f001 f854 	bl	8002654 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80015ac:	4b5f      	ldr	r3, [pc, #380]	@ (800172c <HAL_SPI_MspInit+0x1fc>)
 80015ae:	4a60      	ldr	r2, [pc, #384]	@ (8001730 <HAL_SPI_MspInit+0x200>)
 80015b0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80015b2:	4b5e      	ldr	r3, [pc, #376]	@ (800172c <HAL_SPI_MspInit+0x1fc>)
 80015b4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80015b8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ba:	4b5c      	ldr	r3, [pc, #368]	@ (800172c <HAL_SPI_MspInit+0x1fc>)
 80015bc:	2240      	movs	r2, #64	@ 0x40
 80015be:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c0:	4b5a      	ldr	r3, [pc, #360]	@ (800172c <HAL_SPI_MspInit+0x1fc>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015c6:	4b59      	ldr	r3, [pc, #356]	@ (800172c <HAL_SPI_MspInit+0x1fc>)
 80015c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015cc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ce:	4b57      	ldr	r3, [pc, #348]	@ (800172c <HAL_SPI_MspInit+0x1fc>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d4:	4b55      	ldr	r3, [pc, #340]	@ (800172c <HAL_SPI_MspInit+0x1fc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80015da:	4b54      	ldr	r3, [pc, #336]	@ (800172c <HAL_SPI_MspInit+0x1fc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015e0:	4b52      	ldr	r3, [pc, #328]	@ (800172c <HAL_SPI_MspInit+0x1fc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e6:	4b51      	ldr	r3, [pc, #324]	@ (800172c <HAL_SPI_MspInit+0x1fc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80015ec:	484f      	ldr	r0, [pc, #316]	@ (800172c <HAL_SPI_MspInit+0x1fc>)
 80015ee:	f000 fc2f 	bl	8001e50 <HAL_DMA_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80015f8:	f7ff fe6a 	bl	80012d0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4b      	ldr	r2, [pc, #300]	@ (800172c <HAL_SPI_MspInit+0x1fc>)
 8001600:	649a      	str	r2, [r3, #72]	@ 0x48
 8001602:	4a4a      	ldr	r2, [pc, #296]	@ (800172c <HAL_SPI_MspInit+0x1fc>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001608:	4b4a      	ldr	r3, [pc, #296]	@ (8001734 <HAL_SPI_MspInit+0x204>)
 800160a:	4a4b      	ldr	r2, [pc, #300]	@ (8001738 <HAL_SPI_MspInit+0x208>)
 800160c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800160e:	4b49      	ldr	r3, [pc, #292]	@ (8001734 <HAL_SPI_MspInit+0x204>)
 8001610:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001614:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001616:	4b47      	ldr	r3, [pc, #284]	@ (8001734 <HAL_SPI_MspInit+0x204>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800161c:	4b45      	ldr	r3, [pc, #276]	@ (8001734 <HAL_SPI_MspInit+0x204>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001622:	4b44      	ldr	r3, [pc, #272]	@ (8001734 <HAL_SPI_MspInit+0x204>)
 8001624:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001628:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800162a:	4b42      	ldr	r3, [pc, #264]	@ (8001734 <HAL_SPI_MspInit+0x204>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001630:	4b40      	ldr	r3, [pc, #256]	@ (8001734 <HAL_SPI_MspInit+0x204>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001636:	4b3f      	ldr	r3, [pc, #252]	@ (8001734 <HAL_SPI_MspInit+0x204>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800163c:	4b3d      	ldr	r3, [pc, #244]	@ (8001734 <HAL_SPI_MspInit+0x204>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001642:	4b3c      	ldr	r3, [pc, #240]	@ (8001734 <HAL_SPI_MspInit+0x204>)
 8001644:	2200      	movs	r2, #0
 8001646:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001648:	483a      	ldr	r0, [pc, #232]	@ (8001734 <HAL_SPI_MspInit+0x204>)
 800164a:	f000 fc01 	bl	8001e50 <HAL_DMA_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001654:	f7ff fe3c 	bl	80012d0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a36      	ldr	r2, [pc, #216]	@ (8001734 <HAL_SPI_MspInit+0x204>)
 800165c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800165e:	4a35      	ldr	r2, [pc, #212]	@ (8001734 <HAL_SPI_MspInit+0x204>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001664:	e057      	b.n	8001716 <HAL_SPI_MspInit+0x1e6>
  else if(hspi->Instance==SPI2)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a34      	ldr	r2, [pc, #208]	@ (800173c <HAL_SPI_MspInit+0x20c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d152      	bne.n	8001716 <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	4a2a      	ldr	r2, [pc, #168]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 800167a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001680:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	4b24      	ldr	r3, [pc, #144]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 8001692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001694:	4a23      	ldr	r2, [pc, #140]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6313      	str	r3, [r2, #48]	@ 0x30
 800169c:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 80016b2:	f043 0302 	orr.w	r3, r3, #2
 80016b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <HAL_SPI_MspInit+0x1f4>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016c4:	2308      	movs	r3, #8
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016d4:	2305      	movs	r3, #5
 80016d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	4619      	mov	r1, r3
 80016de:	4818      	ldr	r0, [pc, #96]	@ (8001740 <HAL_SPI_MspInit+0x210>)
 80016e0:	f000 ffb8 	bl	8002654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016f6:	2305      	movs	r3, #5
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	4810      	ldr	r0, [pc, #64]	@ (8001744 <HAL_SPI_MspInit+0x214>)
 8001702:	f000 ffa7 	bl	8002654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2024      	movs	r0, #36	@ 0x24
 800170c:	f000 faef 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001710:	2024      	movs	r0, #36	@ 0x24
 8001712:	f000 fb08 	bl	8001d26 <HAL_NVIC_EnableIRQ>
}
 8001716:	bf00      	nop
 8001718:	3730      	adds	r7, #48	@ 0x30
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40013000 	.word	0x40013000
 8001724:	40023800 	.word	0x40023800
 8001728:	40020000 	.word	0x40020000
 800172c:	20000a08 	.word	0x20000a08
 8001730:	40026458 	.word	0x40026458
 8001734:	20000a68 	.word	0x20000a68
 8001738:	40026410 	.word	0x40026410
 800173c:	40003800 	.word	0x40003800
 8001740:	40020800 	.word	0x40020800
 8001744:	40020400 	.word	0x40020400

08001748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001758:	d10e      	bne.n	8001778 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <HAL_TIM_Base_MspInit+0x70>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	4a15      	ldr	r2, [pc, #84]	@ (80017b8 <HAL_TIM_Base_MspInit+0x70>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6413      	str	r3, [r2, #64]	@ 0x40
 800176a:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <HAL_TIM_Base_MspInit+0x70>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001776:	e01a      	b.n	80017ae <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0f      	ldr	r2, [pc, #60]	@ (80017bc <HAL_TIM_Base_MspInit+0x74>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d115      	bne.n	80017ae <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <HAL_TIM_Base_MspInit+0x70>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a0b      	ldr	r2, [pc, #44]	@ (80017b8 <HAL_TIM_Base_MspInit+0x70>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_TIM_Base_MspInit+0x70>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	201e      	movs	r0, #30
 80017a4:	f000 faa3 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017a8:	201e      	movs	r0, #30
 80017aa:	f000 fabc 	bl	8001d26 <HAL_NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40000800 	.word	0x40000800

080017c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001854 <HAL_UART_MspInit+0x94>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d134      	bne.n	800184c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <HAL_UART_MspInit+0x98>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001858 <HAL_UART_MspInit+0x98>)
 80017ec:	f043 0310 	orr.w	r3, r3, #16
 80017f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f2:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_UART_MspInit+0x98>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <HAL_UART_MspInit+0x98>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	4a14      	ldr	r2, [pc, #80]	@ (8001858 <HAL_UART_MspInit+0x98>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6313      	str	r3, [r2, #48]	@ 0x30
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_UART_MspInit+0x98>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800181a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800182c:	2307      	movs	r3, #7
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	4809      	ldr	r0, [pc, #36]	@ (800185c <HAL_UART_MspInit+0x9c>)
 8001838:	f000 ff0c 	bl	8002654 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	2025      	movs	r0, #37	@ 0x25
 8001842:	f000 fa54 	bl	8001cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001846:	2025      	movs	r0, #37	@ 0x25
 8001848:	f000 fa6d 	bl	8001d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	@ 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40011000 	.word	0x40011000
 8001858:	40023800 	.word	0x40023800
 800185c:	40020000 	.word	0x40020000

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <NMI_Handler+0x4>

08001868 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <HardFault_Handler+0x4>

08001870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <MemManage_Handler+0x4>

08001878 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <UsageFault_Handler+0x4>

08001888 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a8:	f000 f902 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <DMA1_Stream5_IRQHandler+0x10>)
 80018b6:	f000 fc63 	bl	8002180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000874 	.word	0x20000874

080018c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018c8:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <TIM4_IRQHandler+0x10>)
 80018ca:	f003 fe1d 	bl	8005508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000b10 	.word	0x20000b10

080018d8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <SPI2_IRQHandler+0x10>)
 80018de:	f003 f845 	bl	800496c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200009b0 	.word	0x200009b0

080018ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <USART1_IRQHandler+0x10>)
 80018f2:	f004 fa0f 	bl	8005d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000b58 	.word	0x20000b58

08001900 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <DMA2_Stream0_IRQHandler+0x10>)
 8001906:	f000 fc3b 	bl	8002180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000a68 	.word	0x20000a68

08001914 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <DMA2_Stream3_IRQHandler+0x10>)
 800191a:	f000 fc31 	bl	8002180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000a08 	.word	0x20000a08

08001928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001930:	4a14      	ldr	r2, [pc, #80]	@ (8001984 <_sbrk+0x5c>)
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <_sbrk+0x60>)
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800193c:	4b13      	ldr	r3, [pc, #76]	@ (800198c <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <_sbrk+0x64>)
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <_sbrk+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	429a      	cmp	r2, r3
 8001956:	d207      	bcs.n	8001968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001958:	f006 fd04 	bl	8008364 <__errno>
 800195c:	4603      	mov	r3, r0
 800195e:	220c      	movs	r2, #12
 8001960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	e009      	b.n	800197c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196e:	4b07      	ldr	r3, [pc, #28]	@ (800198c <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	4a05      	ldr	r2, [pc, #20]	@ (800198c <_sbrk+0x64>)
 8001978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20020000 	.word	0x20020000
 8001988:	00000400 	.word	0x00000400
 800198c:	20000ddc 	.word	0x20000ddc
 8001990:	20000f68 	.word	0x20000f68

08001994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <SystemInit+0x20>)
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800199e:	4a05      	ldr	r2, [pc, #20]	@ (80019b4 <SystemInit+0x20>)
 80019a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019bc:	f7ff ffea 	bl	8001994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c0:	480c      	ldr	r0, [pc, #48]	@ (80019f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019c2:	490d      	ldr	r1, [pc, #52]	@ (80019f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019c4:	4a0d      	ldr	r2, [pc, #52]	@ (80019fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c8:	e002      	b.n	80019d0 <LoopCopyDataInit>

080019ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ce:	3304      	adds	r3, #4

080019d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d4:	d3f9      	bcc.n	80019ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001a04 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019dc:	e001      	b.n	80019e2 <LoopFillZerobss>

080019de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e0:	3204      	adds	r2, #4

080019e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e4:	d3fb      	bcc.n	80019de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019e6:	f006 fcc3 	bl	8008370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ea:	f7ff f97f 	bl	8000cec <main>
  bx  lr    
 80019ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80019fc:	080084b0 	.word	0x080084b0
  ldr r2, =_sbss
 8001a00:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001a04:	20000f68 	.word	0x20000f68

08001a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a10:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <HAL_Init+0x40>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <HAL_Init+0x40>)
 8001a16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <HAL_Init+0x40>)
 8001a22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a28:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a07      	ldr	r2, [pc, #28]	@ (8001a4c <HAL_Init+0x40>)
 8001a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a34:	2003      	movs	r0, #3
 8001a36:	f000 f94f 	bl	8001cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3a:	200f      	movs	r0, #15
 8001a3c:	f000 f808 	bl	8001a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a40:	f7ff fc5a 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023c00 	.word	0x40023c00

08001a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <HAL_InitTick+0x54>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_InitTick+0x58>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f967 	bl	8001d42 <HAL_SYSTICK_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00e      	b.n	8001a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d80a      	bhi.n	8001a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	2200      	movs	r2, #0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f000 f92f 	bl	8001cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a90:	4a06      	ldr	r2, [pc, #24]	@ (8001aac <HAL_InitTick+0x5c>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	@ (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008
 8001ad4:	20000de0 	.word	0x20000de0

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000de0 	.word	0x20000de0

08001af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af8:	f7ff ffee 	bl	8001ad8 <HAL_GetTick>
 8001afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d005      	beq.n	8001b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <HAL_Delay+0x44>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b16:	bf00      	nop
 8001b18:	f7ff ffde 	bl	8001ad8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d8f7      	bhi.n	8001b18 <HAL_Delay+0x28>
  {
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000008 	.word	0x20000008

08001b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6a:	4a04      	ldr	r2, [pc, #16]	@ (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	60d3      	str	r3, [r2, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b84:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <__NVIC_GetPriorityGrouping+0x18>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	f003 0307 	and.w	r3, r3, #7
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	db0b      	blt.n	8001bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	4907      	ldr	r1, [pc, #28]	@ (8001bd4 <__NVIC_EnableIRQ+0x38>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000e100 	.word	0xe000e100

08001bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	db0a      	blt.n	8001c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	490c      	ldr	r1, [pc, #48]	@ (8001c24 <__NVIC_SetPriority+0x4c>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	0112      	lsls	r2, r2, #4
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c00:	e00a      	b.n	8001c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4908      	ldr	r1, [pc, #32]	@ (8001c28 <__NVIC_SetPriority+0x50>)
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	3b04      	subs	r3, #4
 8001c10:	0112      	lsls	r2, r2, #4
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	440b      	add	r3, r1
 8001c16:	761a      	strb	r2, [r3, #24]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000e100 	.word	0xe000e100
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	@ 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f1c3 0307 	rsb	r3, r3, #7
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	bf28      	it	cs
 8001c4a:	2304      	movcs	r3, #4
 8001c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3304      	adds	r3, #4
 8001c52:	2b06      	cmp	r3, #6
 8001c54:	d902      	bls.n	8001c5c <NVIC_EncodePriority+0x30>
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3b03      	subs	r3, #3
 8001c5a:	e000      	b.n	8001c5e <NVIC_EncodePriority+0x32>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	f04f 32ff 	mov.w	r2, #4294967295
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	401a      	ands	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43d9      	mvns	r1, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	4313      	orrs	r3, r2
         );
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3724      	adds	r7, #36	@ 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ca4:	d301      	bcc.n	8001caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00f      	b.n	8001cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001caa:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <SysTick_Config+0x40>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f7ff ff8e 	bl	8001bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <SysTick_Config+0x40>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cc2:	4b04      	ldr	r3, [pc, #16]	@ (8001cd4 <SysTick_Config+0x40>)
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	e000e010 	.word	0xe000e010

08001cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7ff ff29 	bl	8001b38 <__NVIC_SetPriorityGrouping>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d00:	f7ff ff3e 	bl	8001b80 <__NVIC_GetPriorityGrouping>
 8001d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	f7ff ff8e 	bl	8001c2c <NVIC_EncodePriority>
 8001d10:	4602      	mov	r2, r0
 8001d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff5d 	bl	8001bd8 <__NVIC_SetPriority>
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff31 	bl	8001b9c <__NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ffa2 	bl	8001c94 <SysTick_Config>
 8001d50:	4603      	mov	r3, r0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e014      	b.n	8001d96 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	791b      	ldrb	r3, [r3, #4]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d105      	bne.n	8001d82 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff fae3 	bl	8001348 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2202      	movs	r2, #2
 8001d86:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b089      	sub	sp, #36	@ 0x24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	2300      	movs	r3, #0
 8001dac:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <HAL_DAC_ConfigChannel+0x1c>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e042      	b.n	8001e44 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	795b      	ldrb	r3, [r3, #5]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_DAC_ConfigChannel+0x2c>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e03c      	b.n	8001e44 <HAL_DAC_ConfigChannel+0xa6>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	22c0      	movs	r2, #192	@ 0xc0
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	400a      	ands	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001e42:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3724      	adds	r7, #36	@ 0x24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff fe3c 	bl	8001ad8 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e099      	b.n	8001fa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0201 	bic.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e8c:	e00f      	b.n	8001eae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e8e:	f7ff fe23 	bl	8001ad8 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b05      	cmp	r3, #5
 8001e9a:	d908      	bls.n	8001eae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e078      	b.n	8001fa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1e8      	bne.n	8001e8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4b38      	ldr	r3, [pc, #224]	@ (8001fa8 <HAL_DMA_Init+0x158>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d107      	bne.n	8001f18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f10:	4313      	orrs	r3, r2
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f023 0307 	bic.w	r3, r3, #7
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	d117      	bne.n	8001f72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00e      	beq.n	8001f72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fb01 	bl	800255c <DMA_CheckFifoParam>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2240      	movs	r2, #64	@ 0x40
 8001f64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e016      	b.n	8001fa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fab8 	bl	80024f0 <DMA_CalcBaseAndBitshift>
 8001f80:	4603      	mov	r3, r0
 8001f82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f88:	223f      	movs	r2, #63	@ 0x3f
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	f010803f 	.word	0xf010803f

08001fac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_DMA_Start_IT+0x26>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e040      	b.n	8002054 <HAL_DMA_Start_IT+0xa8>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d12f      	bne.n	8002046 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fa4a 	bl	8002494 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002004:	223f      	movs	r2, #63	@ 0x3f
 8002006:	409a      	lsls	r2, r3
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0216 	orr.w	r2, r2, #22
 800201a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0208 	orr.w	r2, r2, #8
 8002032:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	e005      	b.n	8002052 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800204e:	2302      	movs	r3, #2
 8002050:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002052:	7dfb      	ldrb	r3, [r7, #23]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002068:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800206a:	f7ff fd35 	bl	8001ad8 <HAL_GetTick>
 800206e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d008      	beq.n	800208e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2280      	movs	r2, #128	@ 0x80
 8002080:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e052      	b.n	8002134 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0216 	bic.w	r2, r2, #22
 800209c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d103      	bne.n	80020be <HAL_DMA_Abort+0x62>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0208 	bic.w	r2, r2, #8
 80020cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0201 	bic.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020de:	e013      	b.n	8002108 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020e0:	f7ff fcfa 	bl	8001ad8 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	d90c      	bls.n	8002108 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2220      	movs	r2, #32
 80020f2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2203      	movs	r2, #3
 80020f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e015      	b.n	8002134 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1e4      	bne.n	80020e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211a:	223f      	movs	r2, #63	@ 0x3f
 800211c:	409a      	lsls	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d004      	beq.n	800215a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2280      	movs	r2, #128	@ 0x80
 8002154:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e00c      	b.n	8002174 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2205      	movs	r2, #5
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800218c:	4b8e      	ldr	r3, [pc, #568]	@ (80023c8 <HAL_DMA_IRQHandler+0x248>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a8e      	ldr	r2, [pc, #568]	@ (80023cc <HAL_DMA_IRQHandler+0x24c>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	0a9b      	lsrs	r3, r3, #10
 8002198:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021aa:	2208      	movs	r2, #8
 80021ac:	409a      	lsls	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d01a      	beq.n	80021ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d013      	beq.n	80021ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0204 	bic.w	r2, r2, #4
 80021d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d8:	2208      	movs	r2, #8
 80021da:	409a      	lsls	r2, r3
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	f043 0201 	orr.w	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f0:	2201      	movs	r2, #1
 80021f2:	409a      	lsls	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d012      	beq.n	8002222 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220e:	2201      	movs	r2, #1
 8002210:	409a      	lsls	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221a:	f043 0202 	orr.w	r2, r3, #2
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002226:	2204      	movs	r2, #4
 8002228:	409a      	lsls	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4013      	ands	r3, r2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d012      	beq.n	8002258 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00b      	beq.n	8002258 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002244:	2204      	movs	r2, #4
 8002246:	409a      	lsls	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002250:	f043 0204 	orr.w	r2, r3, #4
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225c:	2210      	movs	r2, #16
 800225e:	409a      	lsls	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4013      	ands	r3, r2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d043      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d03c      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227a:	2210      	movs	r2, #16
 800227c:	409a      	lsls	r2, r3
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d018      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d108      	bne.n	80022b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d024      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	4798      	blx	r3
 80022ae:	e01f      	b.n	80022f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01b      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
 80022c0:	e016      	b.n	80022f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d107      	bne.n	80022e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0208 	bic.w	r2, r2, #8
 80022de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f4:	2220      	movs	r2, #32
 80022f6:	409a      	lsls	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 808f 	beq.w	8002420 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 8087 	beq.w	8002420 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002316:	2220      	movs	r2, #32
 8002318:	409a      	lsls	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b05      	cmp	r3, #5
 8002328:	d136      	bne.n	8002398 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0216 	bic.w	r2, r2, #22
 8002338:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	695a      	ldr	r2, [r3, #20]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002348:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <HAL_DMA_IRQHandler+0x1da>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0208 	bic.w	r2, r2, #8
 8002368:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236e:	223f      	movs	r2, #63	@ 0x3f
 8002370:	409a      	lsls	r2, r3
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800238a:	2b00      	cmp	r3, #0
 800238c:	d07e      	beq.n	800248c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	4798      	blx	r3
        }
        return;
 8002396:	e079      	b.n	800248c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d01d      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10d      	bne.n	80023d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d031      	beq.n	8002420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
 80023c4:	e02c      	b.n	8002420 <HAL_DMA_IRQHandler+0x2a0>
 80023c6:	bf00      	nop
 80023c8:	20000000 	.word	0x20000000
 80023cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d023      	beq.n	8002420 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	4798      	blx	r3
 80023e0:	e01e      	b.n	8002420 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10f      	bne.n	8002410 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0210 	bic.w	r2, r2, #16
 80023fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002424:	2b00      	cmp	r3, #0
 8002426:	d032      	beq.n	800248e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d022      	beq.n	800247a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2205      	movs	r2, #5
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	3301      	adds	r3, #1
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	429a      	cmp	r2, r3
 8002456:	d307      	bcc.n	8002468 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f2      	bne.n	800244c <HAL_DMA_IRQHandler+0x2cc>
 8002466:	e000      	b.n	800246a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002468:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
 800248a:	e000      	b.n	800248e <HAL_DMA_IRQHandler+0x30e>
        return;
 800248c:	bf00      	nop
    }
  }
}
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b40      	cmp	r3, #64	@ 0x40
 80024c0:	d108      	bne.n	80024d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024d2:	e007      	b.n	80024e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	60da      	str	r2, [r3, #12]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	3b10      	subs	r3, #16
 8002500:	4a14      	ldr	r2, [pc, #80]	@ (8002554 <DMA_CalcBaseAndBitshift+0x64>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800250a:	4a13      	ldr	r2, [pc, #76]	@ (8002558 <DMA_CalcBaseAndBitshift+0x68>)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4413      	add	r3, r2
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b03      	cmp	r3, #3
 800251c:	d909      	bls.n	8002532 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002526:	f023 0303 	bic.w	r3, r3, #3
 800252a:	1d1a      	adds	r2, r3, #4
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002530:	e007      	b.n	8002542 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800253a:	f023 0303 	bic.w	r3, r3, #3
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	aaaaaaab 	.word	0xaaaaaaab
 8002558:	08008484 	.word	0x08008484

0800255c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d11f      	bne.n	80025b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d856      	bhi.n	800262a <DMA_CheckFifoParam+0xce>
 800257c:	a201      	add	r2, pc, #4	@ (adr r2, 8002584 <DMA_CheckFifoParam+0x28>)
 800257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002582:	bf00      	nop
 8002584:	08002595 	.word	0x08002595
 8002588:	080025a7 	.word	0x080025a7
 800258c:	08002595 	.word	0x08002595
 8002590:	0800262b 	.word	0x0800262b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002598:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d046      	beq.n	800262e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a4:	e043      	b.n	800262e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025ae:	d140      	bne.n	8002632 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025b4:	e03d      	b.n	8002632 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025be:	d121      	bne.n	8002604 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d837      	bhi.n	8002636 <DMA_CheckFifoParam+0xda>
 80025c6:	a201      	add	r2, pc, #4	@ (adr r2, 80025cc <DMA_CheckFifoParam+0x70>)
 80025c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025cc:	080025dd 	.word	0x080025dd
 80025d0:	080025e3 	.word	0x080025e3
 80025d4:	080025dd 	.word	0x080025dd
 80025d8:	080025f5 	.word	0x080025f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
      break;
 80025e0:	e030      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d025      	beq.n	800263a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f2:	e022      	b.n	800263a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025fc:	d11f      	bne.n	800263e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002602:	e01c      	b.n	800263e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d903      	bls.n	8002612 <DMA_CheckFifoParam+0xb6>
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d003      	beq.n	8002618 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002610:	e018      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
      break;
 8002616:	e015      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00e      	beq.n	8002642 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
      break;
 8002628:	e00b      	b.n	8002642 <DMA_CheckFifoParam+0xe6>
      break;
 800262a:	bf00      	nop
 800262c:	e00a      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      break;
 800262e:	bf00      	nop
 8002630:	e008      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      break;
 8002632:	bf00      	nop
 8002634:	e006      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      break;
 8002636:	bf00      	nop
 8002638:	e004      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      break;
 800263a:	bf00      	nop
 800263c:	e002      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      break;   
 800263e:	bf00      	nop
 8002640:	e000      	b.n	8002644 <DMA_CheckFifoParam+0xe8>
      break;
 8002642:	bf00      	nop
    }
  } 
  
  return status; 
 8002644:	7bfb      	ldrb	r3, [r7, #15]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	@ 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	e16b      	b.n	8002948 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	f040 815a 	bne.w	8002942 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d005      	beq.n	80026a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d130      	bne.n	8002708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 0201 	and.w	r2, r3, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b03      	cmp	r3, #3
 8002712:	d017      	beq.n	8002744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d123      	bne.n	8002798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	08da      	lsrs	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3208      	adds	r2, #8
 8002758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	220f      	movs	r2, #15
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	69b9      	ldr	r1, [r7, #24]
 8002794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0203 	and.w	r2, r3, #3
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80b4 	beq.w	8002942 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b60      	ldr	r3, [pc, #384]	@ (8002960 <HAL_GPIO_Init+0x30c>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002960 <HAL_GPIO_Init+0x30c>)
 80027e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002960 <HAL_GPIO_Init+0x30c>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <HAL_GPIO_Init+0x310>)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3302      	adds	r3, #2
 80027fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	220f      	movs	r2, #15
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a52      	ldr	r2, [pc, #328]	@ (8002968 <HAL_GPIO_Init+0x314>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d02b      	beq.n	800287a <HAL_GPIO_Init+0x226>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a51      	ldr	r2, [pc, #324]	@ (800296c <HAL_GPIO_Init+0x318>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d025      	beq.n	8002876 <HAL_GPIO_Init+0x222>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a50      	ldr	r2, [pc, #320]	@ (8002970 <HAL_GPIO_Init+0x31c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01f      	beq.n	8002872 <HAL_GPIO_Init+0x21e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a4f      	ldr	r2, [pc, #316]	@ (8002974 <HAL_GPIO_Init+0x320>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d019      	beq.n	800286e <HAL_GPIO_Init+0x21a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4e      	ldr	r2, [pc, #312]	@ (8002978 <HAL_GPIO_Init+0x324>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_GPIO_Init+0x216>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4d      	ldr	r2, [pc, #308]	@ (800297c <HAL_GPIO_Init+0x328>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00d      	beq.n	8002866 <HAL_GPIO_Init+0x212>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4c      	ldr	r2, [pc, #304]	@ (8002980 <HAL_GPIO_Init+0x32c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <HAL_GPIO_Init+0x20e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4b      	ldr	r2, [pc, #300]	@ (8002984 <HAL_GPIO_Init+0x330>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_GPIO_Init+0x20a>
 800285a:	2307      	movs	r3, #7
 800285c:	e00e      	b.n	800287c <HAL_GPIO_Init+0x228>
 800285e:	2308      	movs	r3, #8
 8002860:	e00c      	b.n	800287c <HAL_GPIO_Init+0x228>
 8002862:	2306      	movs	r3, #6
 8002864:	e00a      	b.n	800287c <HAL_GPIO_Init+0x228>
 8002866:	2305      	movs	r3, #5
 8002868:	e008      	b.n	800287c <HAL_GPIO_Init+0x228>
 800286a:	2304      	movs	r3, #4
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x228>
 800286e:	2303      	movs	r3, #3
 8002870:	e004      	b.n	800287c <HAL_GPIO_Init+0x228>
 8002872:	2302      	movs	r3, #2
 8002874:	e002      	b.n	800287c <HAL_GPIO_Init+0x228>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_GPIO_Init+0x228>
 800287a:	2300      	movs	r3, #0
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	f002 0203 	and.w	r2, r2, #3
 8002882:	0092      	lsls	r2, r2, #2
 8002884:	4093      	lsls	r3, r2
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800288c:	4935      	ldr	r1, [pc, #212]	@ (8002964 <HAL_GPIO_Init+0x310>)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	089b      	lsrs	r3, r3, #2
 8002892:	3302      	adds	r3, #2
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800289a:	4b3b      	ldr	r3, [pc, #236]	@ (8002988 <HAL_GPIO_Init+0x334>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028be:	4a32      	ldr	r2, [pc, #200]	@ (8002988 <HAL_GPIO_Init+0x334>)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c4:	4b30      	ldr	r3, [pc, #192]	@ (8002988 <HAL_GPIO_Init+0x334>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e8:	4a27      	ldr	r2, [pc, #156]	@ (8002988 <HAL_GPIO_Init+0x334>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ee:	4b26      	ldr	r3, [pc, #152]	@ (8002988 <HAL_GPIO_Init+0x334>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002912:	4a1d      	ldr	r2, [pc, #116]	@ (8002988 <HAL_GPIO_Init+0x334>)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002918:	4b1b      	ldr	r3, [pc, #108]	@ (8002988 <HAL_GPIO_Init+0x334>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800293c:	4a12      	ldr	r2, [pc, #72]	@ (8002988 <HAL_GPIO_Init+0x334>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3301      	adds	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b0f      	cmp	r3, #15
 800294c:	f67f ae90 	bls.w	8002670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	3724      	adds	r7, #36	@ 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800
 8002964:	40013800 	.word	0x40013800
 8002968:	40020000 	.word	0x40020000
 800296c:	40020400 	.word	0x40020400
 8002970:	40020800 	.word	0x40020800
 8002974:	40020c00 	.word	0x40020c00
 8002978:	40021000 	.word	0x40021000
 800297c:	40021400 	.word	0x40021400
 8002980:	40021800 	.word	0x40021800
 8002984:	40021c00 	.word	0x40021c00
 8002988:	40013c00 	.word	0x40013c00

0800298c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
 8002998:	4613      	mov	r3, r2
 800299a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800299c:	787b      	ldrb	r3, [r7, #1]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029a8:	e003      	b.n	80029b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029aa:	887b      	ldrh	r3, [r7, #2]
 80029ac:	041a      	lsls	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	619a      	str	r2, [r3, #24]
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e267      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d075      	beq.n	8002aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029de:	4b88      	ldr	r3, [pc, #544]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d00c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ea:	4b85      	ldr	r3, [pc, #532]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d112      	bne.n	8002a1c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f6:	4b82      	ldr	r3, [pc, #520]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a02:	d10b      	bne.n	8002a1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	4b7e      	ldr	r3, [pc, #504]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d05b      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x108>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d157      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e242      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a24:	d106      	bne.n	8002a34 <HAL_RCC_OscConfig+0x74>
 8002a26:	4b76      	ldr	r3, [pc, #472]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a75      	ldr	r2, [pc, #468]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e01d      	b.n	8002a70 <HAL_RCC_OscConfig+0xb0>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x98>
 8002a3e:	4b70      	ldr	r3, [pc, #448]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6f      	ldr	r2, [pc, #444]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b6d      	ldr	r3, [pc, #436]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a6c      	ldr	r2, [pc, #432]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e00b      	b.n	8002a70 <HAL_RCC_OscConfig+0xb0>
 8002a58:	4b69      	ldr	r3, [pc, #420]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a68      	ldr	r2, [pc, #416]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b66      	ldr	r3, [pc, #408]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a65      	ldr	r2, [pc, #404]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d013      	beq.n	8002aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7ff f82e 	bl	8001ad8 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a80:	f7ff f82a 	bl	8001ad8 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	@ 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e207      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	4b5b      	ldr	r3, [pc, #364]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0xc0>
 8002a9e:	e014      	b.n	8002aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7ff f81a 	bl	8001ad8 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7ff f816 	bl	8001ad8 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	@ 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e1f3      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aba:	4b51      	ldr	r3, [pc, #324]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0xe8>
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d063      	beq.n	8002b9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ad6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00b      	beq.n	8002afa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae2:	4b47      	ldr	r3, [pc, #284]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d11c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aee:	4b44      	ldr	r3, [pc, #272]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d116      	bne.n	8002b28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afa:	4b41      	ldr	r3, [pc, #260]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_RCC_OscConfig+0x152>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e1c7      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b12:	4b3b      	ldr	r3, [pc, #236]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4937      	ldr	r1, [pc, #220]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b26:	e03a      	b.n	8002b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b30:	4b34      	ldr	r3, [pc, #208]	@ (8002c04 <HAL_RCC_OscConfig+0x244>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe ffcf 	bl	8001ad8 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3e:	f7fe ffcb 	bl	8001ad8 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e1a8      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b50:	4b2b      	ldr	r3, [pc, #172]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5c:	4b28      	ldr	r3, [pc, #160]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4925      	ldr	r1, [pc, #148]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	600b      	str	r3, [r1, #0]
 8002b70:	e015      	b.n	8002b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b72:	4b24      	ldr	r3, [pc, #144]	@ (8002c04 <HAL_RCC_OscConfig+0x244>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe ffae 	bl	8001ad8 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b80:	f7fe ffaa 	bl	8001ad8 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e187      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b92:	4b1b      	ldr	r3, [pc, #108]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d036      	beq.n	8002c18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d016      	beq.n	8002be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb2:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <HAL_RCC_OscConfig+0x248>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7fe ff8e 	bl	8001ad8 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc0:	f7fe ff8a 	bl	8001ad8 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e167      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c00 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x200>
 8002bde:	e01b      	b.n	8002c18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be0:	4b09      	ldr	r3, [pc, #36]	@ (8002c08 <HAL_RCC_OscConfig+0x248>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be6:	f7fe ff77 	bl	8001ad8 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bec:	e00e      	b.n	8002c0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bee:	f7fe ff73 	bl	8001ad8 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d907      	bls.n	8002c0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e150      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
 8002c00:	40023800 	.word	0x40023800
 8002c04:	42470000 	.word	0x42470000
 8002c08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0c:	4b88      	ldr	r3, [pc, #544]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1ea      	bne.n	8002bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 8097 	beq.w	8002d54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2a:	4b81      	ldr	r3, [pc, #516]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10f      	bne.n	8002c56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	4a7c      	ldr	r2, [pc, #496]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c46:	4b7a      	ldr	r3, [pc, #488]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c52:	2301      	movs	r3, #1
 8002c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c56:	4b77      	ldr	r3, [pc, #476]	@ (8002e34 <HAL_RCC_OscConfig+0x474>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d118      	bne.n	8002c94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c62:	4b74      	ldr	r3, [pc, #464]	@ (8002e34 <HAL_RCC_OscConfig+0x474>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a73      	ldr	r2, [pc, #460]	@ (8002e34 <HAL_RCC_OscConfig+0x474>)
 8002c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6e:	f7fe ff33 	bl	8001ad8 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c76:	f7fe ff2f 	bl	8001ad8 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e10c      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	4b6a      	ldr	r3, [pc, #424]	@ (8002e34 <HAL_RCC_OscConfig+0x474>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x2ea>
 8002c9c:	4b64      	ldr	r3, [pc, #400]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca0:	4a63      	ldr	r2, [pc, #396]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca8:	e01c      	b.n	8002ce4 <HAL_RCC_OscConfig+0x324>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	2b05      	cmp	r3, #5
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x30c>
 8002cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb6:	4a5e      	ldr	r2, [pc, #376]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	f043 0304 	orr.w	r3, r3, #4
 8002cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cbe:	4b5c      	ldr	r3, [pc, #368]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc2:	4a5b      	ldr	r2, [pc, #364]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	f043 0301 	orr.w	r3, r3, #1
 8002cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cca:	e00b      	b.n	8002ce4 <HAL_RCC_OscConfig+0x324>
 8002ccc:	4b58      	ldr	r3, [pc, #352]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd0:	4a57      	ldr	r2, [pc, #348]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	f023 0301 	bic.w	r3, r3, #1
 8002cd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd8:	4b55      	ldr	r3, [pc, #340]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cdc:	4a54      	ldr	r2, [pc, #336]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002cde:	f023 0304 	bic.w	r3, r3, #4
 8002ce2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d015      	beq.n	8002d18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cec:	f7fe fef4 	bl	8001ad8 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf2:	e00a      	b.n	8002d0a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf4:	f7fe fef0 	bl	8001ad8 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e0cb      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0a:	4b49      	ldr	r3, [pc, #292]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0ee      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x334>
 8002d16:	e014      	b.n	8002d42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d18:	f7fe fede 	bl	8001ad8 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d1e:	e00a      	b.n	8002d36 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d20:	f7fe feda 	bl	8001ad8 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e0b5      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d36:	4b3e      	ldr	r3, [pc, #248]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1ee      	bne.n	8002d20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d42:	7dfb      	ldrb	r3, [r7, #23]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d105      	bne.n	8002d54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d48:	4b39      	ldr	r3, [pc, #228]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	4a38      	ldr	r2, [pc, #224]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80a1 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d5e:	4b34      	ldr	r3, [pc, #208]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d05c      	beq.n	8002e24 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d141      	bne.n	8002df6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d72:	4b31      	ldr	r3, [pc, #196]	@ (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe feae 	bl	8001ad8 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe feaa 	bl	8001ad8 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e087      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	4b27      	ldr	r3, [pc, #156]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	019b      	lsls	r3, r3, #6
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	3b01      	subs	r3, #1
 8002db8:	041b      	lsls	r3, r3, #16
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc0:	061b      	lsls	r3, r3, #24
 8002dc2:	491b      	ldr	r1, [pc, #108]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fe fe83 	bl	8001ad8 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fe fe7f 	bl	8001ad8 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e05c      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de8:	4b11      	ldr	r3, [pc, #68]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x416>
 8002df4:	e054      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df6:	4b10      	ldr	r3, [pc, #64]	@ (8002e38 <HAL_RCC_OscConfig+0x478>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fe6c 	bl	8001ad8 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe fe68 	bl	8001ad8 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e045      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e16:	4b06      	ldr	r3, [pc, #24]	@ (8002e30 <HAL_RCC_OscConfig+0x470>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x444>
 8002e22:	e03d      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e038      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40007000 	.word	0x40007000
 8002e38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <HAL_RCC_OscConfig+0x4ec>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d028      	beq.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d121      	bne.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d11a      	bne.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d111      	bne.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	3b01      	subs	r3, #1
 8002e86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d107      	bne.n	8002e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800

08002eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0cc      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b68      	ldr	r3, [pc, #416]	@ (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d90c      	bls.n	8002eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b65      	ldr	r3, [pc, #404]	@ (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b63      	ldr	r3, [pc, #396]	@ (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0b8      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d020      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f04:	4b59      	ldr	r3, [pc, #356]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4a58      	ldr	r2, [pc, #352]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f1c:	4b53      	ldr	r3, [pc, #332]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	4a52      	ldr	r2, [pc, #328]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f28:	4b50      	ldr	r3, [pc, #320]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	494d      	ldr	r1, [pc, #308]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d044      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b47      	ldr	r3, [pc, #284]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d119      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e07f      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d003      	beq.n	8002f6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e06f      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e067      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8e:	4b37      	ldr	r3, [pc, #220]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f023 0203 	bic.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4934      	ldr	r1, [pc, #208]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa0:	f7fe fd9a 	bl	8001ad8 <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa8:	f7fe fd96 	bl	8001ad8 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e04f      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 020c 	and.w	r2, r3, #12
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1eb      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b25      	ldr	r3, [pc, #148]	@ (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d20c      	bcs.n	8002ff8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b22      	ldr	r3, [pc, #136]	@ (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	b2d2      	uxtb	r2, r2
 8002fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe6:	4b20      	ldr	r3, [pc, #128]	@ (8003068 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e032      	b.n	800305e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003004:	4b19      	ldr	r3, [pc, #100]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4916      	ldr	r1, [pc, #88]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	4313      	orrs	r3, r2
 8003014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003022:	4b12      	ldr	r3, [pc, #72]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	490e      	ldr	r1, [pc, #56]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	4313      	orrs	r3, r2
 8003034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003036:	f000 f821 	bl	800307c <HAL_RCC_GetSysClockFreq>
 800303a:	4602      	mov	r2, r0
 800303c:	4b0b      	ldr	r3, [pc, #44]	@ (800306c <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	490a      	ldr	r1, [pc, #40]	@ (8003070 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	5ccb      	ldrb	r3, [r1, r3]
 800304a:	fa22 f303 	lsr.w	r3, r2, r3
 800304e:	4a09      	ldr	r2, [pc, #36]	@ (8003074 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003052:	4b09      	ldr	r3, [pc, #36]	@ (8003078 <HAL_RCC_ClockConfig+0x1c8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fcfa 	bl	8001a50 <HAL_InitTick>

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023c00 	.word	0x40023c00
 800306c:	40023800 	.word	0x40023800
 8003070:	0800846c 	.word	0x0800846c
 8003074:	20000000 	.word	0x20000000
 8003078:	20000004 	.word	0x20000004

0800307c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003080:	b094      	sub	sp, #80	@ 0x50
 8003082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003094:	4b79      	ldr	r3, [pc, #484]	@ (800327c <HAL_RCC_GetSysClockFreq+0x200>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 030c 	and.w	r3, r3, #12
 800309c:	2b08      	cmp	r3, #8
 800309e:	d00d      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x40>
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	f200 80e1 	bhi.w	8003268 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x34>
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d003      	beq.n	80030b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80030ae:	e0db      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030b0:	4b73      	ldr	r3, [pc, #460]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x204>)
 80030b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030b4:	e0db      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030b6:	4b73      	ldr	r3, [pc, #460]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x208>)
 80030b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030ba:	e0d8      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030bc:	4b6f      	ldr	r3, [pc, #444]	@ (800327c <HAL_RCC_GetSysClockFreq+0x200>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030c6:	4b6d      	ldr	r3, [pc, #436]	@ (800327c <HAL_RCC_GetSysClockFreq+0x200>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d063      	beq.n	800319a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d2:	4b6a      	ldr	r3, [pc, #424]	@ (800327c <HAL_RCC_GetSysClockFreq+0x200>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	099b      	lsrs	r3, r3, #6
 80030d8:	2200      	movs	r2, #0
 80030da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030e6:	2300      	movs	r3, #0
 80030e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030ee:	4622      	mov	r2, r4
 80030f0:	462b      	mov	r3, r5
 80030f2:	f04f 0000 	mov.w	r0, #0
 80030f6:	f04f 0100 	mov.w	r1, #0
 80030fa:	0159      	lsls	r1, r3, #5
 80030fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003100:	0150      	lsls	r0, r2, #5
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4621      	mov	r1, r4
 8003108:	1a51      	subs	r1, r2, r1
 800310a:	6139      	str	r1, [r7, #16]
 800310c:	4629      	mov	r1, r5
 800310e:	eb63 0301 	sbc.w	r3, r3, r1
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003120:	4659      	mov	r1, fp
 8003122:	018b      	lsls	r3, r1, #6
 8003124:	4651      	mov	r1, sl
 8003126:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800312a:	4651      	mov	r1, sl
 800312c:	018a      	lsls	r2, r1, #6
 800312e:	4651      	mov	r1, sl
 8003130:	ebb2 0801 	subs.w	r8, r2, r1
 8003134:	4659      	mov	r1, fp
 8003136:	eb63 0901 	sbc.w	r9, r3, r1
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f04f 0300 	mov.w	r3, #0
 8003142:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003146:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800314a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800314e:	4690      	mov	r8, r2
 8003150:	4699      	mov	r9, r3
 8003152:	4623      	mov	r3, r4
 8003154:	eb18 0303 	adds.w	r3, r8, r3
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	462b      	mov	r3, r5
 800315c:	eb49 0303 	adc.w	r3, r9, r3
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800316e:	4629      	mov	r1, r5
 8003170:	024b      	lsls	r3, r1, #9
 8003172:	4621      	mov	r1, r4
 8003174:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003178:	4621      	mov	r1, r4
 800317a:	024a      	lsls	r2, r1, #9
 800317c:	4610      	mov	r0, r2
 800317e:	4619      	mov	r1, r3
 8003180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003182:	2200      	movs	r2, #0
 8003184:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003186:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003188:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800318c:	f7fd f81c 	bl	80001c8 <__aeabi_uldivmod>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4613      	mov	r3, r2
 8003196:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003198:	e058      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319a:	4b38      	ldr	r3, [pc, #224]	@ (800327c <HAL_RCC_GetSysClockFreq+0x200>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	099b      	lsrs	r3, r3, #6
 80031a0:	2200      	movs	r2, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	4611      	mov	r1, r2
 80031a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031aa:	623b      	str	r3, [r7, #32]
 80031ac:	2300      	movs	r3, #0
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031b4:	4642      	mov	r2, r8
 80031b6:	464b      	mov	r3, r9
 80031b8:	f04f 0000 	mov.w	r0, #0
 80031bc:	f04f 0100 	mov.w	r1, #0
 80031c0:	0159      	lsls	r1, r3, #5
 80031c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031c6:	0150      	lsls	r0, r2, #5
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4641      	mov	r1, r8
 80031ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80031d2:	4649      	mov	r1, r9
 80031d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031ec:	ebb2 040a 	subs.w	r4, r2, sl
 80031f0:	eb63 050b 	sbc.w	r5, r3, fp
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	00eb      	lsls	r3, r5, #3
 80031fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003202:	00e2      	lsls	r2, r4, #3
 8003204:	4614      	mov	r4, r2
 8003206:	461d      	mov	r5, r3
 8003208:	4643      	mov	r3, r8
 800320a:	18e3      	adds	r3, r4, r3
 800320c:	603b      	str	r3, [r7, #0]
 800320e:	464b      	mov	r3, r9
 8003210:	eb45 0303 	adc.w	r3, r5, r3
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003222:	4629      	mov	r1, r5
 8003224:	028b      	lsls	r3, r1, #10
 8003226:	4621      	mov	r1, r4
 8003228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800322c:	4621      	mov	r1, r4
 800322e:	028a      	lsls	r2, r1, #10
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003236:	2200      	movs	r2, #0
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	61fa      	str	r2, [r7, #28]
 800323c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003240:	f7fc ffc2 	bl	80001c8 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4613      	mov	r3, r2
 800324a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800324c:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <HAL_RCC_GetSysClockFreq+0x200>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	0c1b      	lsrs	r3, r3, #16
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	3301      	adds	r3, #1
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800325c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800325e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003260:	fbb2 f3f3 	udiv	r3, r2, r3
 8003264:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003266:	e002      	b.n	800326e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003268:	4b05      	ldr	r3, [pc, #20]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x204>)
 800326a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800326c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800326e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003270:	4618      	mov	r0, r3
 8003272:	3750      	adds	r7, #80	@ 0x50
 8003274:	46bd      	mov	sp, r7
 8003276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	00f42400 	.word	0x00f42400
 8003284:	007a1200 	.word	0x007a1200

08003288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800328c:	4b03      	ldr	r3, [pc, #12]	@ (800329c <HAL_RCC_GetHCLKFreq+0x14>)
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000000 	.word	0x20000000

080032a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032a4:	f7ff fff0 	bl	8003288 <HAL_RCC_GetHCLKFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	0a9b      	lsrs	r3, r3, #10
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	4903      	ldr	r1, [pc, #12]	@ (80032c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40023800 	.word	0x40023800
 80032c4:	0800847c 	.word	0x0800847c

080032c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032cc:	f7ff ffdc 	bl	8003288 <HAL_RCC_GetHCLKFreq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	0b5b      	lsrs	r3, r3, #13
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	4903      	ldr	r1, [pc, #12]	@ (80032ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80032de:	5ccb      	ldrb	r3, [r1, r3]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	40023800 	.word	0x40023800
 80032ec:	0800847c 	.word	0x0800847c

080032f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e022      	b.n	8003348 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d105      	bne.n	800331a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7fe f891 	bl	800143c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2203      	movs	r2, #3
 800331e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f814 	bl	8003350 <HAL_SD_InitCard>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e00a      	b.n	8003348 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003350:	b5b0      	push	{r4, r5, r7, lr}
 8003352:	b08e      	sub	sp, #56	@ 0x38
 8003354:	af04      	add	r7, sp, #16
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800336c:	2376      	movs	r3, #118	@ 0x76
 800336e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681d      	ldr	r5, [r3, #0]
 8003374:	466c      	mov	r4, sp
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800337e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003382:	f107 0308 	add.w	r3, r7, #8
 8003386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003388:	4628      	mov	r0, r5
 800338a:	f003 fb91 	bl	8006ab0 <SDIO_Init>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8003394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e04f      	b.n	8003440 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80033a0:	4b29      	ldr	r3, [pc, #164]	@ (8003448 <HAL_SD_InitCard+0xf8>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 fbc9 	bl	8006b42 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80033b0:	4b25      	ldr	r3, [pc, #148]	@ (8003448 <HAL_SD_InitCard+0xf8>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80033b6:	2002      	movs	r0, #2
 80033b8:	f7fe fb9a 	bl	8001af0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fe79 	bl	80040b4 <SD_PowerON>
 80033c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e02e      	b.n	8003440 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fd98 	bl	8003f18 <SD_InitCard>
 80033e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00b      	beq.n	8003408 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e01b      	b.n	8003440 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003410:	4618      	mov	r0, r3
 8003412:	f003 fc28 	bl	8006c66 <SDMMC_CmdBlockLength>
 8003416:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00f      	beq.n	800343e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a0a      	ldr	r2, [pc, #40]	@ (800344c <HAL_SD_InitCard+0xfc>)
 8003424:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3728      	adds	r7, #40	@ 0x28
 8003444:	46bd      	mov	sp, r7
 8003446:	bdb0      	pop	{r4, r5, r7, pc}
 8003448:	422580a0 	.word	0x422580a0
 800344c:	004005ff 	.word	0x004005ff

08003450 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b092      	sub	sp, #72	@ 0x48
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800345e:	f7fe fb3b 	bl	8001ad8 <HAL_GetTick>
 8003462:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d107      	bne.n	8003482 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003476:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e1c5      	b.n	800380e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b01      	cmp	r3, #1
 800348c:	f040 81b8 	bne.w	8003800 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003496:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	441a      	add	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d907      	bls.n	80034b4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e1ac      	b.n	800380e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2203      	movs	r2, #3
 80034b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2200      	movs	r2, #0
 80034c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d002      	beq.n	80034d2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80034cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ce:	025b      	lsls	r3, r3, #9
 80034d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80034d2:	f04f 33ff 	mov.w	r3, #4294967295
 80034d6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	025b      	lsls	r3, r3, #9
 80034dc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80034de:	2390      	movs	r3, #144	@ 0x90
 80034e0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80034e2:	2302      	movs	r3, #2
 80034e4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80034ea:	2301      	movs	r3, #1
 80034ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f107 0214 	add.w	r2, r7, #20
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f003 fb88 	bl	8006c0e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d90a      	bls.n	800351a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2202      	movs	r2, #2
 8003508:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003510:	4618      	mov	r0, r3
 8003512:	f003 fbec 	bl	8006cee <SDMMC_CmdReadMultiBlock>
 8003516:	6478      	str	r0, [r7, #68]	@ 0x44
 8003518:	e009      	b.n	800352e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2201      	movs	r2, #1
 800351e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003526:	4618      	mov	r0, r3
 8003528:	f003 fbbf 	bl	8006caa <SDMMC_CmdReadSingleBlock>
 800352c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800352e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003530:	2b00      	cmp	r3, #0
 8003532:	d012      	beq.n	800355a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a7e      	ldr	r2, [pc, #504]	@ (8003734 <HAL_SD_ReadBlocks+0x2e4>)
 800353a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003542:	431a      	orrs	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e159      	b.n	800380e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800355e:	e061      	b.n	8003624 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003566:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d03c      	beq.n	80035e8 <HAL_SD_ReadBlocks+0x198>
 800356e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d039      	beq.n	80035e8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003574:	2300      	movs	r3, #0
 8003576:	643b      	str	r3, [r7, #64]	@ 0x40
 8003578:	e033      	b.n	80035e2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f003 fac1 	bl	8006b06 <SDIO_ReadFIFO>
 8003584:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003588:	b2da      	uxtb	r2, r3
 800358a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800358e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003590:	3301      	adds	r3, #1
 8003592:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003596:	3b01      	subs	r3, #1
 8003598:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800359a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a6:	3301      	adds	r3, #1
 80035a8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80035aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ac:	3b01      	subs	r3, #1
 80035ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80035b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b2:	0c1b      	lsrs	r3, r3, #16
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035bc:	3301      	adds	r3, #1
 80035be:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80035c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035c2:	3b01      	subs	r3, #1
 80035c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80035c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c8:	0e1b      	lsrs	r3, r3, #24
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ce:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80035d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d2:	3301      	adds	r3, #1
 80035d4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80035d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d8:	3b01      	subs	r3, #1
 80035da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80035dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035de:	3301      	adds	r3, #1
 80035e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80035e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035e4:	2b07      	cmp	r3, #7
 80035e6:	d9c8      	bls.n	800357a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80035e8:	f7fe fa76 	bl	8001ad8 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d902      	bls.n	80035fe <HAL_SD_ReadBlocks+0x1ae>
 80035f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d112      	bne.n	8003624 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a4c      	ldr	r2, [pc, #304]	@ (8003734 <HAL_SD_ReadBlocks+0x2e4>)
 8003604:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e0f4      	b.n	800380e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800362a:	f240 332a 	movw	r3, #810	@ 0x32a
 800362e:	4013      	ands	r3, r2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d095      	beq.n	8003560 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d022      	beq.n	8003688 <HAL_SD_ReadBlocks+0x238>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d91f      	bls.n	8003688 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364c:	2b03      	cmp	r3, #3
 800364e:	d01b      	beq.n	8003688 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f003 fbb1 	bl	8006dbc <SDMMC_CmdStopTransfer>
 800365a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800365c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800365e:	2b00      	cmp	r3, #0
 8003660:	d012      	beq.n	8003688 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a33      	ldr	r2, [pc, #204]	@ (8003734 <HAL_SD_ReadBlocks+0x2e4>)
 8003668:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800366e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0c2      	b.n	800380e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <HAL_SD_ReadBlocks+0x254>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d012      	beq.n	80036ca <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a22      	ldr	r2, [pc, #136]	@ (8003734 <HAL_SD_ReadBlocks+0x2e4>)
 80036aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b0:	f043 0208 	orr.w	r2, r3, #8
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0a1      	b.n	800380e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d012      	beq.n	80036fe <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a15      	ldr	r2, [pc, #84]	@ (8003734 <HAL_SD_ReadBlocks+0x2e4>)
 80036de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e4:	f043 0202 	orr.w	r2, r3, #2
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e087      	b.n	800380e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d064      	beq.n	80037d6 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a08      	ldr	r2, [pc, #32]	@ (8003734 <HAL_SD_ReadBlocks+0x2e4>)
 8003712:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003718:	f043 0220 	orr.w	r2, r3, #32
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e06d      	b.n	800380e <HAL_SD_ReadBlocks+0x3be>
 8003732:	bf00      	nop
 8003734:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f003 f9e2 	bl	8006b06 <SDIO_ReadFIFO>
 8003742:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003746:	b2da      	uxtb	r2, r3
 8003748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800374c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374e:	3301      	adds	r3, #1
 8003750:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003754:	3b01      	subs	r3, #1
 8003756:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	0a1b      	lsrs	r3, r3, #8
 800375c:	b2da      	uxtb	r2, r3
 800375e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003760:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003764:	3301      	adds	r3, #1
 8003766:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800376a:	3b01      	subs	r3, #1
 800376c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800376e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	b2da      	uxtb	r2, r3
 8003774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003776:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800377a:	3301      	adds	r3, #1
 800377c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800377e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003780:	3b01      	subs	r3, #1
 8003782:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003786:	0e1b      	lsrs	r3, r3, #24
 8003788:	b2da      	uxtb	r2, r3
 800378a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800378e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003790:	3301      	adds	r3, #1
 8003792:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8003794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003796:	3b01      	subs	r3, #1
 8003798:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800379a:	f7fe f99d 	bl	8001ad8 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d902      	bls.n	80037b0 <HAL_SD_ReadBlocks+0x360>
 80037aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d112      	bne.n	80037d6 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a18      	ldr	r2, [pc, #96]	@ (8003818 <HAL_SD_ReadBlocks+0x3c8>)
 80037b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e01b      	b.n	800380e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_SD_ReadBlocks+0x39a>
 80037e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1a6      	bne.n	8003738 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f240 523a 	movw	r2, #1338	@ 0x53a
 80037f2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e006      	b.n	800380e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003804:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	3748      	adds	r7, #72	@ 0x48
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	004005ff 	.word	0x004005ff

0800381c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b092      	sub	sp, #72	@ 0x48
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800382a:	f7fe f955 	bl	8001ad8 <HAL_GetTick>
 800382e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d107      	bne.n	800384e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003842:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e16d      	b.n	8003b2a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b01      	cmp	r3, #1
 8003858:	f040 8160 	bne.w	8003b1c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003862:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	441a      	add	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386c:	429a      	cmp	r2, r3
 800386e:	d907      	bls.n	8003880 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003874:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e154      	b.n	8003b2a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2203      	movs	r2, #3
 8003884:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2200      	movs	r2, #0
 800388e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003894:	2b01      	cmp	r3, #1
 8003896:	d002      	beq.n	800389e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800389a:	025b      	lsls	r3, r3, #9
 800389c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800389e:	f04f 33ff 	mov.w	r3, #4294967295
 80038a2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	025b      	lsls	r3, r3, #9
 80038a8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80038aa:	2390      	movs	r3, #144	@ 0x90
 80038ac:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80038ae:	2300      	movs	r3, #0
 80038b0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80038b6:	2301      	movs	r3, #1
 80038b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f107 0218 	add.w	r2, r7, #24
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f003 f9a2 	bl	8006c0e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d90a      	bls.n	80038e6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038dc:	4618      	mov	r0, r3
 80038de:	f003 fa4a 	bl	8006d76 <SDMMC_CmdWriteMultiBlock>
 80038e2:	6478      	str	r0, [r7, #68]	@ 0x44
 80038e4:	e009      	b.n	80038fa <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2210      	movs	r2, #16
 80038ea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038f2:	4618      	mov	r0, r3
 80038f4:	f003 fa1d 	bl	8006d32 <SDMMC_CmdWriteSingleBlock>
 80038f8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80038fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d012      	beq.n	8003926 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a8b      	ldr	r2, [pc, #556]	@ (8003b34 <HAL_SD_WriteBlocks+0x318>)
 8003906:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800390c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800390e:	431a      	orrs	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e101      	b.n	8003b2a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800392a:	e065      	b.n	80039f8 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003932:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d040      	beq.n	80039bc <HAL_SD_WriteBlocks+0x1a0>
 800393a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393c:	2b00      	cmp	r3, #0
 800393e:	d03d      	beq.n	80039bc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003940:	2300      	movs	r3, #0
 8003942:	643b      	str	r3, [r7, #64]	@ 0x40
 8003944:	e037      	b.n	80039b6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800394c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394e:	3301      	adds	r3, #1
 8003950:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003954:	3b01      	subs	r3, #1
 8003956:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	021a      	lsls	r2, r3, #8
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003966:	3301      	adds	r3, #1
 8003968:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800396a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800396c:	3b01      	subs	r3, #1
 800396e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	041a      	lsls	r2, r3, #16
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800397c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397e:	3301      	adds	r3, #1
 8003980:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8003982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003984:	3b01      	subs	r3, #1
 8003986:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	061a      	lsls	r2, r3, #24
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003996:	3301      	adds	r3, #1
 8003998:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800399a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800399c:	3b01      	subs	r3, #1
 800399e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f107 0214 	add.w	r2, r7, #20
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f003 f8b8 	bl	8006b20 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80039b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b2:	3301      	adds	r3, #1
 80039b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80039b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039b8:	2b07      	cmp	r3, #7
 80039ba:	d9c4      	bls.n	8003946 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80039bc:	f7fe f88c 	bl	8001ad8 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d902      	bls.n	80039d2 <HAL_SD_WriteBlocks+0x1b6>
 80039cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d112      	bne.n	80039f8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a57      	ldr	r2, [pc, #348]	@ (8003b34 <HAL_SD_WriteBlocks+0x318>)
 80039d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039e0:	431a      	orrs	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e098      	b.n	8003b2a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039fe:	f240 331a 	movw	r3, #794	@ 0x31a
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d091      	beq.n	800392c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d022      	beq.n	8003a5c <HAL_SD_WriteBlocks+0x240>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d91f      	bls.n	8003a5c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d01b      	beq.n	8003a5c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f003 f9c7 	bl	8006dbc <SDMMC_CmdStopTransfer>
 8003a2e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d012      	beq.n	8003a5c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b34 <HAL_SD_WriteBlocks+0x318>)
 8003a3c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e066      	b.n	8003b2a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_SD_WriteBlocks+0x25c>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d012      	beq.n	8003a9e <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8003b34 <HAL_SD_WriteBlocks+0x318>)
 8003a7e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a84:	f043 0208 	orr.w	r2, r3, #8
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e045      	b.n	8003b2a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d012      	beq.n	8003ad2 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a20      	ldr	r2, [pc, #128]	@ (8003b34 <HAL_SD_WriteBlocks+0x318>)
 8003ab2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab8:	f043 0202 	orr.w	r2, r3, #2
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e02b      	b.n	8003b2a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d012      	beq.n	8003b06 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a13      	ldr	r2, [pc, #76]	@ (8003b34 <HAL_SD_WriteBlocks+0x318>)
 8003ae6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aec:	f043 0210 	orr.w	r2, r3, #16
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e011      	b.n	8003b2a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003b0e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	e006      	b.n	8003b2a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b20:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
  }
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3748      	adds	r7, #72	@ 0x48
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	004005ff 	.word	0x004005ff

08003b38 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b46:	0f9b      	lsrs	r3, r3, #30
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b52:	0e9b      	lsrs	r3, r3, #26
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b64:	0e1b      	lsrs	r3, r3, #24
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b76:	0c1b      	lsrs	r3, r3, #16
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b98:	0d1b      	lsrs	r3, r3, #20
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	f003 030f 	and.w	r3, r3, #15
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bb6:	0bdb      	lsrs	r3, r3, #15
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bc8:	0b9b      	lsrs	r3, r3, #14
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bda:	0b5b      	lsrs	r3, r3, #13
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bec:	0b1b      	lsrs	r3, r3, #12
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d163      	bne.n	8003cd0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c0c:	009a      	lsls	r2, r3, #2
 8003c0e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c12:	4013      	ands	r3, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8003c18:	0f92      	lsrs	r2, r2, #30
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c24:	0edb      	lsrs	r3, r3, #27
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c36:	0e1b      	lsrs	r3, r3, #24
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c48:	0d5b      	lsrs	r3, r3, #21
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c5a:	0c9b      	lsrs	r3, r3, #18
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c6c:	0bdb      	lsrs	r3, r3, #15
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	7e1b      	ldrb	r3, [r3, #24]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	3302      	adds	r3, #2
 8003c90:	2201      	movs	r2, #1
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003c9a:	fb03 f202 	mul.w	r2, r3, r2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	7a1b      	ldrb	r3, [r3, #8]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	2201      	movs	r2, #1
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003cbc:	0a52      	lsrs	r2, r2, #9
 8003cbe:	fb03 f202 	mul.w	r2, r3, r2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ccc:	661a      	str	r2, [r3, #96]	@ 0x60
 8003cce:	e031      	b.n	8003d34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d11d      	bne.n	8003d14 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cdc:	041b      	lsls	r3, r3, #16
 8003cde:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ce6:	0c1b      	lsrs	r3, r3, #16
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	029a      	lsls	r2, r3, #10
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d08:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	661a      	str	r2, [r3, #96]	@ 0x60
 8003d12:	e00f      	b.n	8003d34 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a58      	ldr	r2, [pc, #352]	@ (8003e7c <HAL_SD_GetCardCSD+0x344>)
 8003d1a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e09d      	b.n	8003e70 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d38:	0b9b      	lsrs	r3, r3, #14
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d4a:	09db      	lsrs	r3, r3, #7
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6c:	0fdb      	lsrs	r3, r3, #31
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d78:	0f5b      	lsrs	r3, r3, #29
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8a:	0e9b      	lsrs	r3, r3, #26
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9c:	0d9b      	lsrs	r3, r3, #22
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	f003 030f 	and.w	r3, r3, #15
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dae:	0d5b      	lsrs	r3, r3, #21
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dca:	0c1b      	lsrs	r3, r3, #16
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dde:	0bdb      	lsrs	r3, r3, #15
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df2:	0b9b      	lsrs	r3, r3, #14
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e06:	0b5b      	lsrs	r3, r3, #13
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1a:	0b1b      	lsrs	r3, r3, #12
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	0a9b      	lsrs	r3, r3, #10
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e56:	085b      	lsrs	r3, r3, #1
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	004005ff 	.word	0x004005ff

08003e80 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003ee4:	f107 030c 	add.w	r3, r7, #12
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f970 	bl	80041d0 <SD_SendStatus>
 8003ef0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	0a5b      	lsrs	r3, r3, #9
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003f0e:	693b      	ldr	r3, [r7, #16]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003f18:	b5b0      	push	{r4, r5, r7, lr}
 8003f1a:	b094      	sub	sp, #80	@ 0x50
 8003f1c:	af04      	add	r7, sp, #16
 8003f1e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003f20:	2301      	movs	r3, #1
 8003f22:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f002 fe18 	bl	8006b5e <SDIO_GetPowerState>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f34:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003f38:	e0b8      	b.n	80040ac <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d02f      	beq.n	8003fa2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f002 ffff 	bl	8006f4a <SDMMC_CmdSendCID>
 8003f4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <SD_InitCard+0x40>
    {
      return errorstate;
 8003f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f56:	e0a9      	b.n	80040ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f002 fe42 	bl	8006be8 <SDIO_GetResponse>
 8003f64:	4602      	mov	r2, r0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2104      	movs	r1, #4
 8003f70:	4618      	mov	r0, r3
 8003f72:	f002 fe39 	bl	8006be8 <SDIO_GetResponse>
 8003f76:	4602      	mov	r2, r0
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2108      	movs	r1, #8
 8003f82:	4618      	mov	r0, r3
 8003f84:	f002 fe30 	bl	8006be8 <SDIO_GetResponse>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	210c      	movs	r1, #12
 8003f94:	4618      	mov	r0, r3
 8003f96:	f002 fe27 	bl	8006be8 <SDIO_GetResponse>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d00d      	beq.n	8003fc6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f107 020e 	add.w	r2, r7, #14
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f003 f805 	bl	8006fc4 <SDMMC_CmdSetRelAdd>
 8003fba:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <SD_InitCard+0xae>
    {
      return errorstate;
 8003fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fc4:	e072      	b.n	80040ac <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d036      	beq.n	800403c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003fce:	89fb      	ldrh	r3, [r7, #14]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fde:	041b      	lsls	r3, r3, #16
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f002 ffcf 	bl	8006f86 <SDMMC_CmdSendCSD>
 8003fe8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff2:	e05b      	b.n	80040ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f002 fdf4 	bl	8006be8 <SDIO_GetResponse>
 8004000:	4602      	mov	r2, r0
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2104      	movs	r1, #4
 800400c:	4618      	mov	r0, r3
 800400e:	f002 fdeb 	bl	8006be8 <SDIO_GetResponse>
 8004012:	4602      	mov	r2, r0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2108      	movs	r1, #8
 800401e:	4618      	mov	r0, r3
 8004020:	f002 fde2 	bl	8006be8 <SDIO_GetResponse>
 8004024:	4602      	mov	r2, r0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	210c      	movs	r1, #12
 8004030:	4618      	mov	r0, r3
 8004032:	f002 fdd9 	bl	8006be8 <SDIO_GetResponse>
 8004036:	4602      	mov	r2, r0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2104      	movs	r1, #4
 8004042:	4618      	mov	r0, r3
 8004044:	f002 fdd0 	bl	8006be8 <SDIO_GetResponse>
 8004048:	4603      	mov	r3, r0
 800404a:	0d1a      	lsrs	r2, r3, #20
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004050:	f107 0310 	add.w	r3, r7, #16
 8004054:	4619      	mov	r1, r3
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff fd6e 	bl	8003b38 <HAL_SD_GetCardCSD>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004062:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004066:	e021      	b.n	80040ac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6819      	ldr	r1, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004070:	041b      	lsls	r3, r3, #16
 8004072:	2200      	movs	r2, #0
 8004074:	461c      	mov	r4, r3
 8004076:	4615      	mov	r5, r2
 8004078:	4622      	mov	r2, r4
 800407a:	462b      	mov	r3, r5
 800407c:	4608      	mov	r0, r1
 800407e:	f002 febf 	bl	8006e00 <SDMMC_CmdSelDesel>
 8004082:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <SD_InitCard+0x176>
  {
    return errorstate;
 800408a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800408c:	e00e      	b.n	80040ac <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681d      	ldr	r5, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	466c      	mov	r4, sp
 8004096:	f103 0210 	add.w	r2, r3, #16
 800409a:	ca07      	ldmia	r2, {r0, r1, r2}
 800409c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040a0:	3304      	adds	r3, #4
 80040a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040a4:	4628      	mov	r0, r5
 80040a6:	f002 fd03 	bl	8006ab0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3740      	adds	r7, #64	@ 0x40
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bdb0      	pop	{r4, r5, r7, pc}

080040b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	2300      	movs	r3, #0
 80040c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f002 feba 	bl	8006e46 <SDMMC_CmdGoIdleState>
 80040d2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <SD_PowerON+0x2a>
  {
    return errorstate;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	e072      	b.n	80041c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f002 fecd 	bl	8006e82 <SDMMC_CmdOperCond>
 80040e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00d      	beq.n	800410c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f002 fea3 	bl	8006e46 <SDMMC_CmdGoIdleState>
 8004100:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d004      	beq.n	8004112 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	e05b      	b.n	80041c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004116:	2b01      	cmp	r3, #1
 8004118:	d137      	bne.n	800418a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2100      	movs	r1, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f002 fecd 	bl	8006ec0 <SDMMC_CmdAppCommand>
 8004126:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d02d      	beq.n	800418a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800412e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004132:	e047      	b.n	80041c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f002 fec0 	bl	8006ec0 <SDMMC_CmdAppCommand>
 8004140:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <SD_PowerON+0x98>
    {
      return errorstate;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	e03b      	b.n	80041c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	491e      	ldr	r1, [pc, #120]	@ (80041cc <SD_PowerON+0x118>)
 8004152:	4618      	mov	r0, r3
 8004154:	f002 fed6 	bl	8006f04 <SDMMC_CmdAppOperCommand>
 8004158:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004160:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004164:	e02e      	b.n	80041c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2100      	movs	r1, #0
 800416c:	4618      	mov	r0, r3
 800416e:	f002 fd3b 	bl	8006be8 <SDIO_GetResponse>
 8004172:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	0fdb      	lsrs	r3, r3, #31
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <SD_PowerON+0xcc>
 800417c:	2301      	movs	r3, #1
 800417e:	e000      	b.n	8004182 <SD_PowerON+0xce>
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]

    count++;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	3301      	adds	r3, #1
 8004188:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004190:	4293      	cmp	r3, r2
 8004192:	d802      	bhi.n	800419a <SD_PowerON+0xe6>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0cc      	beq.n	8004134 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d902      	bls.n	80041aa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80041a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041a8:	e00c      	b.n	80041c4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80041ba:	e002      	b.n	80041c2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	c1100000 	.word	0xc1100000

080041d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80041e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80041e4:	e018      	b.n	8004218 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ee:	041b      	lsls	r3, r3, #16
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f002 ff07 	bl	8007006 <SDMMC_CmdSendStatus>
 80041f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	e009      	b.n	8004218 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2100      	movs	r1, #0
 800420a:	4618      	mov	r0, r3
 800420c:	f002 fcec 	bl	8006be8 <SDIO_GetResponse>
 8004210:	4602      	mov	r2, r0
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e07b      	b.n	800432a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004236:	2b00      	cmp	r3, #0
 8004238:	d108      	bne.n	800424c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004242:	d009      	beq.n	8004258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	61da      	str	r2, [r3, #28]
 800424a:	e005      	b.n	8004258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d106      	bne.n	8004278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fd f95c 	bl	8001530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800428e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042dc:	ea42 0103 	orr.w	r1, r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	0c1b      	lsrs	r3, r3, #16
 80042f6:	f003 0104 	and.w	r1, r3, #4
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	f003 0210 	and.w	r2, r3, #16
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004318:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b088      	sub	sp, #32
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	4613      	mov	r3, r2
 8004340:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004342:	f7fd fbc9 	bl	8001ad8 <HAL_GetTick>
 8004346:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	d001      	beq.n	800435c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004358:	2302      	movs	r3, #2
 800435a:	e12a      	b.n	80045b2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_SPI_Transmit+0x36>
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e122      	b.n	80045b2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <HAL_SPI_Transmit+0x48>
 8004376:	2302      	movs	r3, #2
 8004378:	e11b      	b.n	80045b2 <HAL_SPI_Transmit+0x280>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2203      	movs	r2, #3
 8004386:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	88fa      	ldrh	r2, [r7, #6]
 800439a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043c8:	d10f      	bne.n	80043ea <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f4:	2b40      	cmp	r3, #64	@ 0x40
 80043f6:	d007      	beq.n	8004408 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004406:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004410:	d152      	bne.n	80044b8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_SPI_Transmit+0xee>
 800441a:	8b7b      	ldrh	r3, [r7, #26]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d145      	bne.n	80044ac <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004424:	881a      	ldrh	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	1c9a      	adds	r2, r3, #2
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004444:	e032      	b.n	80044ac <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b02      	cmp	r3, #2
 8004452:	d112      	bne.n	800447a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004458:	881a      	ldrh	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004464:	1c9a      	adds	r2, r3, #2
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004478:	e018      	b.n	80044ac <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800447a:	f7fd fb2d 	bl	8001ad8 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d803      	bhi.n	8004492 <HAL_SPI_Transmit+0x160>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d102      	bne.n	8004498 <HAL_SPI_Transmit+0x166>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d109      	bne.n	80044ac <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e082      	b.n	80045b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1c7      	bne.n	8004446 <HAL_SPI_Transmit+0x114>
 80044b6:	e053      	b.n	8004560 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <HAL_SPI_Transmit+0x194>
 80044c0:	8b7b      	ldrh	r3, [r7, #26]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d147      	bne.n	8004556 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	330c      	adds	r3, #12
 80044d0:	7812      	ldrb	r2, [r2, #0]
 80044d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80044ec:	e033      	b.n	8004556 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d113      	bne.n	8004524 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	7812      	ldrb	r2, [r2, #0]
 8004508:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004522:	e018      	b.n	8004556 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004524:	f7fd fad8 	bl	8001ad8 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d803      	bhi.n	800453c <HAL_SPI_Transmit+0x20a>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453a:	d102      	bne.n	8004542 <HAL_SPI_Transmit+0x210>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e02d      	b.n	80045b2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1c6      	bne.n	80044ee <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004560:	69fa      	ldr	r2, [r7, #28]
 8004562:	6839      	ldr	r1, [r7, #0]
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fda1 	bl	80050ac <SPI_EndRxTxTransaction>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80045b0:	2300      	movs	r3, #0
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d001      	beq.n	80045da <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 80045d6:	2302      	movs	r3, #2
 80045d8:	e07f      	b.n	80046da <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d110      	bne.n	8004604 <HAL_SPI_Receive_IT+0x48>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ea:	d10b      	bne.n	8004604 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2204      	movs	r2, #4
 80045f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80045f4:	88fb      	ldrh	r3, [r7, #6]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 f876 	bl	80046ec <HAL_SPI_TransmitReceive_IT>
 8004600:	4603      	mov	r3, r0
 8004602:	e06a      	b.n	80046da <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_SPI_Receive_IT+0x54>
 800460a:	88fb      	ldrh	r3, [r7, #6]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e062      	b.n	80046da <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_SPI_Receive_IT+0x66>
 800461e:	2302      	movs	r3, #2
 8004620:	e05b      	b.n	80046da <HAL_SPI_Receive_IT+0x11e>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2204      	movs	r2, #4
 800462e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	88fa      	ldrh	r2, [r7, #6]
 8004642:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	88fa      	ldrh	r2, [r7, #6]
 8004648:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <HAL_SPI_Receive_IT+0x128>)
 800466e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004670:	e002      	b.n	8004678 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4a1c      	ldr	r2, [pc, #112]	@ (80046e8 <HAL_SPI_Receive_IT+0x12c>)
 8004676:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004680:	d10f      	bne.n	80046a2 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004690:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046a0:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ac:	2b40      	cmp	r3, #64	@ 0x40
 80046ae:	d007      	beq.n	80046c0 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046be:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80046d6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	08004e89 	.word	0x08004e89
 80046e8:	08004e3f 	.word	0x08004e3f

080046ec <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004700:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004708:	7dfb      	ldrb	r3, [r7, #23]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d00c      	beq.n	8004728 <HAL_SPI_TransmitReceive_IT+0x3c>
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004714:	d106      	bne.n	8004724 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d102      	bne.n	8004724 <HAL_SPI_TransmitReceive_IT+0x38>
 800471e:	7dfb      	ldrb	r3, [r7, #23]
 8004720:	2b04      	cmp	r3, #4
 8004722:	d001      	beq.n	8004728 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_BUSY;
 8004724:	2302      	movs	r3, #2
 8004726:	e061      	b.n	80047ec <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_SPI_TransmitReceive_IT+0x4e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <HAL_SPI_TransmitReceive_IT+0x4e>
 8004734:	887b      	ldrh	r3, [r7, #2]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e056      	b.n	80047ec <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_SPI_TransmitReceive_IT+0x60>
 8004748:	2302      	movs	r3, #2
 800474a:	e04f      	b.n	80047ec <HAL_SPI_TransmitReceive_IT+0x100>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b04      	cmp	r3, #4
 800475e:	d003      	beq.n	8004768 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2205      	movs	r2, #5
 8004764:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	887a      	ldrh	r2, [r7, #2]
 8004778:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	887a      	ldrh	r2, [r7, #2]
 800477e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	887a      	ldrh	r2, [r7, #2]
 800478a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	887a      	ldrh	r2, [r7, #2]
 8004790:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d006      	beq.n	80047a8 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4a16      	ldr	r2, [pc, #88]	@ (80047f8 <HAL_SPI_TransmitReceive_IT+0x10c>)
 800479e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4a16      	ldr	r2, [pc, #88]	@ (80047fc <HAL_SPI_TransmitReceive_IT+0x110>)
 80047a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80047a6:	e005      	b.n	80047b4 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a15      	ldr	r2, [pc, #84]	@ (8004800 <HAL_SPI_TransmitReceive_IT+0x114>)
 80047ac:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4a14      	ldr	r2, [pc, #80]	@ (8004804 <HAL_SPI_TransmitReceive_IT+0x118>)
 80047b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047be:	2b40      	cmp	r3, #64	@ 0x40
 80047c0:	d007      	beq.n	80047d2 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047d0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80047e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	08004d81 	.word	0x08004d81
 80047fc:	08004de1 	.word	0x08004de1
 8004800:	08004cbd 	.word	0x08004cbd
 8004804:	08004d21 	.word	0x08004d21

08004808 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	d001      	beq.n	8004826 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8004822:	2302      	movs	r3, #2
 8004824:	e097      	b.n	8004956 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <HAL_SPI_Transmit_DMA+0x2a>
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e08f      	b.n	8004956 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_SPI_Transmit_DMA+0x3c>
 8004840:	2302      	movs	r3, #2
 8004842:	e088      	b.n	8004956 <HAL_SPI_Transmit_DMA+0x14e>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2203      	movs	r2, #3
 8004850:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	88fa      	ldrh	r2, [r7, #6]
 8004864:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004892:	d10f      	bne.n	80048b4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b8:	4a29      	ldr	r2, [pc, #164]	@ (8004960 <HAL_SPI_Transmit_DMA+0x158>)
 80048ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c0:	4a28      	ldr	r2, [pc, #160]	@ (8004964 <HAL_SPI_Transmit_DMA+0x15c>)
 80048c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c8:	4a27      	ldr	r2, [pc, #156]	@ (8004968 <HAL_SPI_Transmit_DMA+0x160>)
 80048ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048d0:	2200      	movs	r2, #0
 80048d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048dc:	4619      	mov	r1, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	330c      	adds	r3, #12
 80048e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80048ec:	f7fd fb5e 	bl	8001fac <HAL_DMA_Start_IT>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fa:	f043 0210 	orr.w	r2, r3, #16
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e023      	b.n	8004956 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004918:	2b40      	cmp	r3, #64	@ 0x40
 800491a:	d007      	beq.n	800492c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800492a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0220 	orr.w	r2, r2, #32
 8004942:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0202 	orr.w	r2, r2, #2
 8004952:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	08004c39 	.word	0x08004c39
 8004964:	08004b91 	.word	0x08004b91
 8004968:	08004c55 	.word	0x08004c55

0800496c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10e      	bne.n	80049ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004994:	2b00      	cmp	r3, #0
 8004996:	d009      	beq.n	80049ac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	4798      	blx	r3
    return;
 80049aa:	e0ce      	b.n	8004b4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_SPI_IRQHandler+0x5e>
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	4798      	blx	r3
    return;
 80049c8:	e0bf      	b.n	8004b4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10a      	bne.n	80049ea <HAL_SPI_IRQHandler+0x7e>
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d105      	bne.n	80049ea <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80b0 	beq.w	8004b4a <HAL_SPI_IRQHandler+0x1de>
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 80aa 	beq.w	8004b4a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d023      	beq.n	8004a48 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d011      	beq.n	8004a30 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a10:	f043 0204 	orr.w	r2, r3, #4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	e00b      	b.n	8004a48 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a30:	2300      	movs	r3, #0
 8004a32:	613b      	str	r3, [r7, #16]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	613b      	str	r3, [r7, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	693b      	ldr	r3, [r7, #16]
        return;
 8004a46:	e080      	b.n	8004b4a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d014      	beq.n	8004a7c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a56:	f043 0201 	orr.w	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00c      	beq.n	8004aa0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8a:	f043 0208 	orr.w	r2, r3, #8
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004a92:	2300      	movs	r3, #0
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d04f      	beq.n	8004b48 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ab6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d104      	bne.n	8004ad4 <HAL_SPI_IRQHandler+0x168>
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d034      	beq.n	8004b3e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0203 	bic.w	r2, r2, #3
 8004ae2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d011      	beq.n	8004b10 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af0:	4a17      	ldr	r2, [pc, #92]	@ (8004b50 <HAL_SPI_IRQHandler+0x1e4>)
 8004af2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fd fb1f 	bl	800213c <HAL_DMA_Abort_IT>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d005      	beq.n	8004b10 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d016      	beq.n	8004b46 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004b50 <HAL_SPI_IRQHandler+0x1e4>)
 8004b1e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fd fb09 	bl	800213c <HAL_DMA_Abort_IT>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004b3c:	e003      	b.n	8004b46 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f81c 	bl	8004b7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004b44:	e000      	b.n	8004b48 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004b46:	bf00      	nop
    return;
 8004b48:	bf00      	nop
  }
}
 8004b4a:	3720      	adds	r7, #32
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	08004c95 	.word	0x08004c95

08004b54 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b9e:	f7fc ff9b 	bl	8001ad8 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bb2:	d03b      	beq.n	8004c2c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0220 	bic.w	r2, r2, #32
 8004bc2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0202 	bic.w	r2, r2, #2
 8004bd2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	2164      	movs	r1, #100	@ 0x64
 8004bd8:	6978      	ldr	r0, [r7, #20]
 8004bda:	f000 fa67 	bl	80050ac <SPI_EndRxTxTransaction>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2200      	movs	r2, #0
 8004c12:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004c24:	6978      	ldr	r0, [r7, #20]
 8004c26:	f7ff ffa9 	bl	8004b7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c2a:	e002      	b.n	8004c32 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004c2c:	6978      	ldr	r0, [r7, #20]
 8004c2e:	f7fb ffa9 	bl	8000b84 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff ff8e 	bl	8004b68 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c4c:	bf00      	nop
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0203 	bic.w	r2, r2, #3
 8004c70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c76:	f043 0210 	orr.w	r2, r3, #16
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f7ff ff78 	bl	8004b7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff ff64 	bl	8004b7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f103 020c 	add.w	r2, r3, #12
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd0:	7812      	ldrb	r2, [r2, #0]
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10f      	bne.n	8004d18 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d06:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d102      	bne.n	8004d18 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fa1e 	bl	8005154 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004d18:	bf00      	nop
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	330c      	adds	r3, #12
 8004d32:	7812      	ldrb	r2, [r2, #0]
 8004d34:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10f      	bne.n	8004d78 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d66:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f9ee 	bl	8005154 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d92:	b292      	uxth	r2, r2
 8004d94:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9a:	1c9a      	adds	r2, r3, #2
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10f      	bne.n	8004dd8 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dc6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f9be 	bl	8005154 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dec:	881a      	ldrh	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df8:	1c9a      	adds	r2, r3, #2
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10f      	bne.n	8004e36 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e24:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d102      	bne.n	8004e36 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f98f 	bl	8005154 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f103 020c 	add.w	r2, r3, #12
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e52:	7812      	ldrb	r2, [r2, #0]
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d102      	bne.n	8004e80 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f9de 	bl	800523c <SPI_CloseRx_ISR>
  }
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9a:	b292      	uxth	r2, r2
 8004e9c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	1c9a      	adds	r2, r3, #2
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d102      	bne.n	8004ec6 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f9bb 	bl	800523c <SPI_CloseRx_ISR>
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	4613      	mov	r3, r2
 8004ede:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ee0:	f7fc fdfa 	bl	8001ad8 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	4413      	add	r3, r2
 8004eee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ef0:	f7fc fdf2 	bl	8001ad8 <HAL_GetTick>
 8004ef4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ef6:	4b39      	ldr	r3, [pc, #228]	@ (8004fdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	015b      	lsls	r3, r3, #5
 8004efc:	0d1b      	lsrs	r3, r3, #20
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	fb02 f303 	mul.w	r3, r2, r3
 8004f04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f06:	e054      	b.n	8004fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0e:	d050      	beq.n	8004fb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f10:	f7fc fde2 	bl	8001ad8 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	69fa      	ldr	r2, [r7, #28]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d902      	bls.n	8004f26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d13d      	bne.n	8004fa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f3e:	d111      	bne.n	8004f64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f48:	d004      	beq.n	8004f54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f52:	d107      	bne.n	8004f64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f6c:	d10f      	bne.n	8004f8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e017      	b.n	8004fd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	bf0c      	ite	eq
 8004fc2:	2301      	moveq	r3, #1
 8004fc4:	2300      	movne	r3, #0
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d19b      	bne.n	8004f08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3720      	adds	r7, #32
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000000 	.word	0x20000000

08004fe0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ff4:	d111      	bne.n	800501a <SPI_EndRxTransaction+0x3a>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ffe:	d004      	beq.n	800500a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005008:	d107      	bne.n	800501a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005018:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005022:	d12a      	bne.n	800507a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800502c:	d012      	beq.n	8005054 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	2200      	movs	r2, #0
 8005036:	2180      	movs	r1, #128	@ 0x80
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff ff49 	bl	8004ed0 <SPI_WaitFlagStateUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d02d      	beq.n	80050a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e026      	b.n	80050a2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2200      	movs	r2, #0
 800505c:	2101      	movs	r1, #1
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff ff36 	bl	8004ed0 <SPI_WaitFlagStateUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d01a      	beq.n	80050a0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506e:	f043 0220 	orr.w	r2, r3, #32
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e013      	b.n	80050a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2200      	movs	r2, #0
 8005082:	2101      	movs	r1, #1
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f7ff ff23 	bl	8004ed0 <SPI_WaitFlagStateUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d007      	beq.n	80050a0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005094:	f043 0220 	orr.w	r2, r3, #32
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e000      	b.n	80050a2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2201      	movs	r2, #1
 80050c0:	2102      	movs	r1, #2
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f7ff ff04 	bl	8004ed0 <SPI_WaitFlagStateUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d2:	f043 0220 	orr.w	r2, r3, #32
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e032      	b.n	8005144 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80050de:	4b1b      	ldr	r3, [pc, #108]	@ (800514c <SPI_EndRxTxTransaction+0xa0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005150 <SPI_EndRxTxTransaction+0xa4>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	0d5b      	lsrs	r3, r3, #21
 80050ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050fc:	d112      	bne.n	8005124 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2200      	movs	r2, #0
 8005106:	2180      	movs	r1, #128	@ 0x80
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff fee1 	bl	8004ed0 <SPI_WaitFlagStateUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d016      	beq.n	8005142 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005118:	f043 0220 	orr.w	r2, r3, #32
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e00f      	b.n	8005144 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	3b01      	subs	r3, #1
 800512e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513a:	2b80      	cmp	r3, #128	@ 0x80
 800513c:	d0f2      	beq.n	8005124 <SPI_EndRxTxTransaction+0x78>
 800513e:	e000      	b.n	8005142 <SPI_EndRxTxTransaction+0x96>
        break;
 8005140:	bf00      	nop
  }

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20000000 	.word	0x20000000
 8005150:	165e9f81 	.word	0x165e9f81

08005154 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800515c:	4b35      	ldr	r3, [pc, #212]	@ (8005234 <SPI_CloseRxTx_ISR+0xe0>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a35      	ldr	r2, [pc, #212]	@ (8005238 <SPI_CloseRxTx_ISR+0xe4>)
 8005162:	fba2 2303 	umull	r2, r3, r2, r3
 8005166:	0a5b      	lsrs	r3, r3, #9
 8005168:	2264      	movs	r2, #100	@ 0x64
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005170:	f7fc fcb2 	bl	8001ad8 <HAL_GetTick>
 8005174:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0220 	bic.w	r2, r2, #32
 8005184:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005190:	f043 0220 	orr.w	r2, r3, #32
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005198:	e009      	b.n	80051ae <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	3b01      	subs	r3, #1
 800519e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0eb      	beq.n	8005186 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	2164      	movs	r1, #100	@ 0x64
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff ff7a 	bl	80050ac <SPI_EndRxTxTransaction>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c2:	f043 0220 	orr.w	r2, r3, #32
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d115      	bne.n	800521c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d107      	bne.n	800520c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7fb fcd3 	bl	8000bb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800520a:	e00e      	b.n	800522a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff fc9d 	bl	8004b54 <HAL_SPI_TxRxCpltCallback>
}
 800521a:	e006      	b.n	800522a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff fca9 	bl	8004b7c <HAL_SPI_ErrorCallback>
}
 800522a:	bf00      	nop
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000000 	.word	0x20000000
 8005238:	057619f1 	.word	0x057619f1

0800523c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005252:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005254:	f7fc fc40 	bl	8001ad8 <HAL_GetTick>
 8005258:	4603      	mov	r3, r0
 800525a:	461a      	mov	r2, r3
 800525c:	2164      	movs	r1, #100	@ 0x64
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7ff febe 	bl	8004fe0 <SPI_EndRxTransaction>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526e:	f043 0220 	orr.w	r2, r3, #32
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d103      	bne.n	80052ac <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7fb fc83 	bl	8000bb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80052aa:	e002      	b.n	80052b2 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f7ff fc65 	bl	8004b7c <HAL_SPI_ErrorCallback>
}
 80052b2:	bf00      	nop
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e041      	b.n	8005350 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d106      	bne.n	80052e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7fc fa31 	bl	8001748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2202      	movs	r2, #2
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3304      	adds	r3, #4
 80052f6:	4619      	mov	r1, r3
 80052f8:	4610      	mov	r0, r2
 80052fa:	f000 fae5 	bl	80058c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	d001      	beq.n	8005370 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e046      	b.n	80053fe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a23      	ldr	r2, [pc, #140]	@ (800540c <HAL_TIM_Base_Start+0xb4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d022      	beq.n	80053c8 <HAL_TIM_Base_Start+0x70>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800538a:	d01d      	beq.n	80053c8 <HAL_TIM_Base_Start+0x70>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1f      	ldr	r2, [pc, #124]	@ (8005410 <HAL_TIM_Base_Start+0xb8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d018      	beq.n	80053c8 <HAL_TIM_Base_Start+0x70>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1e      	ldr	r2, [pc, #120]	@ (8005414 <HAL_TIM_Base_Start+0xbc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d013      	beq.n	80053c8 <HAL_TIM_Base_Start+0x70>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005418 <HAL_TIM_Base_Start+0xc0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00e      	beq.n	80053c8 <HAL_TIM_Base_Start+0x70>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1b      	ldr	r2, [pc, #108]	@ (800541c <HAL_TIM_Base_Start+0xc4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d009      	beq.n	80053c8 <HAL_TIM_Base_Start+0x70>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a19      	ldr	r2, [pc, #100]	@ (8005420 <HAL_TIM_Base_Start+0xc8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d004      	beq.n	80053c8 <HAL_TIM_Base_Start+0x70>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a18      	ldr	r2, [pc, #96]	@ (8005424 <HAL_TIM_Base_Start+0xcc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d111      	bne.n	80053ec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b06      	cmp	r3, #6
 80053d8:	d010      	beq.n	80053fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 0201 	orr.w	r2, r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ea:	e007      	b.n	80053fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40010000 	.word	0x40010000
 8005410:	40000400 	.word	0x40000400
 8005414:	40000800 	.word	0x40000800
 8005418:	40000c00 	.word	0x40000c00
 800541c:	40010400 	.word	0x40010400
 8005420:	40014000 	.word	0x40014000
 8005424:	40001800 	.word	0x40001800

08005428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	d001      	beq.n	8005440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e04e      	b.n	80054de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a23      	ldr	r2, [pc, #140]	@ (80054ec <HAL_TIM_Base_Start_IT+0xc4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d022      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x80>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800546a:	d01d      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x80>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1f      	ldr	r2, [pc, #124]	@ (80054f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d018      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x80>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1e      	ldr	r2, [pc, #120]	@ (80054f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d013      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x80>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1c      	ldr	r2, [pc, #112]	@ (80054f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00e      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x80>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1b      	ldr	r2, [pc, #108]	@ (80054fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d009      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x80>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a19      	ldr	r2, [pc, #100]	@ (8005500 <HAL_TIM_Base_Start_IT+0xd8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d004      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0x80>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a18      	ldr	r2, [pc, #96]	@ (8005504 <HAL_TIM_Base_Start_IT+0xdc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d111      	bne.n	80054cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 0307 	and.w	r3, r3, #7
 80054b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b06      	cmp	r3, #6
 80054b8:	d010      	beq.n	80054dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0201 	orr.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ca:	e007      	b.n	80054dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40000800 	.word	0x40000800
 80054f8:	40000c00 	.word	0x40000c00
 80054fc:	40010400 	.word	0x40010400
 8005500:	40014000 	.word	0x40014000
 8005504:	40001800 	.word	0x40001800

08005508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d020      	beq.n	800556c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01b      	beq.n	800556c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0202 	mvn.w	r2, #2
 800553c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f999 	bl	800588a <HAL_TIM_IC_CaptureCallback>
 8005558:	e005      	b.n	8005566 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f98b 	bl	8005876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f99c 	bl	800589e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	d020      	beq.n	80055b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01b      	beq.n	80055b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0204 	mvn.w	r2, #4
 8005588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f973 	bl	800588a <HAL_TIM_IC_CaptureCallback>
 80055a4:	e005      	b.n	80055b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f965 	bl	8005876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f976 	bl	800589e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d020      	beq.n	8005604 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 0308 	and.w	r3, r3, #8
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01b      	beq.n	8005604 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0208 	mvn.w	r2, #8
 80055d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2204      	movs	r2, #4
 80055da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f94d 	bl	800588a <HAL_TIM_IC_CaptureCallback>
 80055f0:	e005      	b.n	80055fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f93f 	bl	8005876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f950 	bl	800589e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b00      	cmp	r3, #0
 800560c:	d020      	beq.n	8005650 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01b      	beq.n	8005650 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0210 	mvn.w	r2, #16
 8005620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2208      	movs	r2, #8
 8005626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f927 	bl	800588a <HAL_TIM_IC_CaptureCallback>
 800563c:	e005      	b.n	800564a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f919 	bl	8005876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f92a 	bl	800589e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00c      	beq.n	8005674 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0201 	mvn.w	r2, #1
 800566c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fb fb06 	bl	8000c80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00c      	beq.n	8005698 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005684:	2b00      	cmp	r3, #0
 8005686:	d007      	beq.n	8005698 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fae4 	bl	8005c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00c      	beq.n	80056bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f8fb 	bl	80058b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00c      	beq.n	80056e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 0320 	and.w	r3, r3, #32
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d007      	beq.n	80056e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0220 	mvn.w	r2, #32
 80056d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fab6 	bl	8005c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056e0:	bf00      	nop
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_TIM_ConfigClockSource+0x1c>
 8005700:	2302      	movs	r3, #2
 8005702:	e0b4      	b.n	800586e <HAL_TIM_ConfigClockSource+0x186>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800572a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800573c:	d03e      	beq.n	80057bc <HAL_TIM_ConfigClockSource+0xd4>
 800573e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005742:	f200 8087 	bhi.w	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800574a:	f000 8086 	beq.w	800585a <HAL_TIM_ConfigClockSource+0x172>
 800574e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005752:	d87f      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b70      	cmp	r3, #112	@ 0x70
 8005756:	d01a      	beq.n	800578e <HAL_TIM_ConfigClockSource+0xa6>
 8005758:	2b70      	cmp	r3, #112	@ 0x70
 800575a:	d87b      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 800575c:	2b60      	cmp	r3, #96	@ 0x60
 800575e:	d050      	beq.n	8005802 <HAL_TIM_ConfigClockSource+0x11a>
 8005760:	2b60      	cmp	r3, #96	@ 0x60
 8005762:	d877      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005764:	2b50      	cmp	r3, #80	@ 0x50
 8005766:	d03c      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005768:	2b50      	cmp	r3, #80	@ 0x50
 800576a:	d873      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 800576c:	2b40      	cmp	r3, #64	@ 0x40
 800576e:	d058      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x13a>
 8005770:	2b40      	cmp	r3, #64	@ 0x40
 8005772:	d86f      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005774:	2b30      	cmp	r3, #48	@ 0x30
 8005776:	d064      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 8005778:	2b30      	cmp	r3, #48	@ 0x30
 800577a:	d86b      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 800577c:	2b20      	cmp	r3, #32
 800577e:	d060      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 8005780:	2b20      	cmp	r3, #32
 8005782:	d867      	bhi.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d05c      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 8005788:	2b10      	cmp	r3, #16
 800578a:	d05a      	beq.n	8005842 <HAL_TIM_ConfigClockSource+0x15a>
 800578c:	e062      	b.n	8005854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800579e:	f000 f9b9 	bl	8005b14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80057b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	609a      	str	r2, [r3, #8]
      break;
 80057ba:	e04f      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80057cc:	f000 f9a2 	bl	8005b14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057de:	609a      	str	r2, [r3, #8]
      break;
 80057e0:	e03c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ee:	461a      	mov	r2, r3
 80057f0:	f000 f916 	bl	8005a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2150      	movs	r1, #80	@ 0x50
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 f96f 	bl	8005ade <TIM_ITRx_SetConfig>
      break;
 8005800:	e02c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800580e:	461a      	mov	r2, r3
 8005810:	f000 f935 	bl	8005a7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2160      	movs	r1, #96	@ 0x60
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f95f 	bl	8005ade <TIM_ITRx_SetConfig>
      break;
 8005820:	e01c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800582e:	461a      	mov	r2, r3
 8005830:	f000 f8f6 	bl	8005a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2140      	movs	r1, #64	@ 0x40
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f94f 	bl	8005ade <TIM_ITRx_SetConfig>
      break;
 8005840:	e00c      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4619      	mov	r1, r3
 800584c:	4610      	mov	r0, r2
 800584e:	f000 f946 	bl	8005ade <TIM_ITRx_SetConfig>
      break;
 8005852:	e003      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
      break;
 8005858:	e000      	b.n	800585c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800585a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800586c:	7bfb      	ldrb	r3, [r7, #15]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
	...

080058c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a46      	ldr	r2, [pc, #280]	@ (80059f4 <TIM_Base_SetConfig+0x12c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d013      	beq.n	8005908 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e6:	d00f      	beq.n	8005908 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a43      	ldr	r2, [pc, #268]	@ (80059f8 <TIM_Base_SetConfig+0x130>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d00b      	beq.n	8005908 <TIM_Base_SetConfig+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a42      	ldr	r2, [pc, #264]	@ (80059fc <TIM_Base_SetConfig+0x134>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d007      	beq.n	8005908 <TIM_Base_SetConfig+0x40>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a41      	ldr	r2, [pc, #260]	@ (8005a00 <TIM_Base_SetConfig+0x138>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d003      	beq.n	8005908 <TIM_Base_SetConfig+0x40>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a40      	ldr	r2, [pc, #256]	@ (8005a04 <TIM_Base_SetConfig+0x13c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d108      	bne.n	800591a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800590e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a35      	ldr	r2, [pc, #212]	@ (80059f4 <TIM_Base_SetConfig+0x12c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d02b      	beq.n	800597a <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005928:	d027      	beq.n	800597a <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a32      	ldr	r2, [pc, #200]	@ (80059f8 <TIM_Base_SetConfig+0x130>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d023      	beq.n	800597a <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a31      	ldr	r2, [pc, #196]	@ (80059fc <TIM_Base_SetConfig+0x134>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d01f      	beq.n	800597a <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a30      	ldr	r2, [pc, #192]	@ (8005a00 <TIM_Base_SetConfig+0x138>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d01b      	beq.n	800597a <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2f      	ldr	r2, [pc, #188]	@ (8005a04 <TIM_Base_SetConfig+0x13c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d017      	beq.n	800597a <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2e      	ldr	r2, [pc, #184]	@ (8005a08 <TIM_Base_SetConfig+0x140>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d013      	beq.n	800597a <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2d      	ldr	r2, [pc, #180]	@ (8005a0c <TIM_Base_SetConfig+0x144>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00f      	beq.n	800597a <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a2c      	ldr	r2, [pc, #176]	@ (8005a10 <TIM_Base_SetConfig+0x148>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00b      	beq.n	800597a <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a2b      	ldr	r2, [pc, #172]	@ (8005a14 <TIM_Base_SetConfig+0x14c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d007      	beq.n	800597a <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a2a      	ldr	r2, [pc, #168]	@ (8005a18 <TIM_Base_SetConfig+0x150>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d003      	beq.n	800597a <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a29      	ldr	r2, [pc, #164]	@ (8005a1c <TIM_Base_SetConfig+0x154>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d108      	bne.n	800598c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a10      	ldr	r2, [pc, #64]	@ (80059f4 <TIM_Base_SetConfig+0x12c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_Base_SetConfig+0xf8>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a12      	ldr	r2, [pc, #72]	@ (8005a04 <TIM_Base_SetConfig+0x13c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d103      	bne.n	80059c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d105      	bne.n	80059e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f023 0201 	bic.w	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	611a      	str	r2, [r3, #16]
  }
}
 80059e6:	bf00      	nop
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40010000 	.word	0x40010000
 80059f8:	40000400 	.word	0x40000400
 80059fc:	40000800 	.word	0x40000800
 8005a00:	40000c00 	.word	0x40000c00
 8005a04:	40010400 	.word	0x40010400
 8005a08:	40014000 	.word	0x40014000
 8005a0c:	40014400 	.word	0x40014400
 8005a10:	40014800 	.word	0x40014800
 8005a14:	40001800 	.word	0x40001800
 8005a18:	40001c00 	.word	0x40001c00
 8005a1c:	40002000 	.word	0x40002000

08005a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f023 0201 	bic.w	r2, r3, #1
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f023 030a 	bic.w	r3, r3, #10
 8005a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b087      	sub	sp, #28
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	f023 0210 	bic.w	r2, r3, #16
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005aa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	031b      	lsls	r3, r3, #12
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005aba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	621a      	str	r2, [r3, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b085      	sub	sp, #20
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f043 0307 	orr.w	r3, r3, #7
 8005b00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	609a      	str	r2, [r3, #8]
}
 8005b08:	bf00      	nop
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	021a      	lsls	r2, r3, #8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	609a      	str	r2, [r3, #8]
}
 8005b48:	bf00      	nop
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e05a      	b.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a21      	ldr	r2, [pc, #132]	@ (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d022      	beq.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb8:	d01d      	beq.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d018      	beq.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00e      	beq.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a18      	ldr	r2, [pc, #96]	@ (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d009      	beq.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a17      	ldr	r2, [pc, #92]	@ (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d004      	beq.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a15      	ldr	r2, [pc, #84]	@ (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d10c      	bne.n	8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40010000 	.word	0x40010000
 8005c34:	40000400 	.word	0x40000400
 8005c38:	40000800 	.word	0x40000800
 8005c3c:	40000c00 	.word	0x40000c00
 8005c40:	40010400 	.word	0x40010400
 8005c44:	40014000 	.word	0x40014000
 8005c48:	40001800 	.word	0x40001800

08005c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e042      	b.n	8005d0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fb fd90 	bl	80017c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2224      	movs	r2, #36	@ 0x24
 8005ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fc85 	bl	80065c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695a      	ldr	r2, [r3, #20]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b0ba      	sub	sp, #232	@ 0xe8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10f      	bne.n	8005d7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <HAL_UART_IRQHandler+0x66>
 8005d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fb69 	bl	800644a <UART_Receive_IT>
      return;
 8005d78:	e25b      	b.n	8006232 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 80de 	beq.w	8005f40 <HAL_UART_IRQHandler+0x22c>
 8005d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d106      	bne.n	8005d9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d94:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 80d1 	beq.w	8005f40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00b      	beq.n	8005dc2 <HAL_UART_IRQHandler+0xae>
 8005daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d005      	beq.n	8005dc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dba:	f043 0201 	orr.w	r2, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00b      	beq.n	8005de6 <HAL_UART_IRQHandler+0xd2>
 8005dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dde:	f043 0202 	orr.w	r2, r3, #2
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00b      	beq.n	8005e0a <HAL_UART_IRQHandler+0xf6>
 8005df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e02:	f043 0204 	orr.w	r2, r3, #4
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d011      	beq.n	8005e3a <HAL_UART_IRQHandler+0x126>
 8005e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d105      	bne.n	8005e2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d005      	beq.n	8005e3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e32:	f043 0208 	orr.w	r2, r3, #8
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 81f2 	beq.w	8006228 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <HAL_UART_IRQHandler+0x14e>
 8005e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 faf4 	bl	800644a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6c:	2b40      	cmp	r3, #64	@ 0x40
 8005e6e:	bf0c      	ite	eq
 8005e70:	2301      	moveq	r3, #1
 8005e72:	2300      	movne	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <HAL_UART_IRQHandler+0x17a>
 8005e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d04f      	beq.n	8005f2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f9fc 	bl	800628c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ea0:	d141      	bne.n	8005f26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3314      	adds	r3, #20
 8005ea8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ebc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3314      	adds	r3, #20
 8005eca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005ece:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005eda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005ee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1d9      	bne.n	8005ea2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d013      	beq.n	8005f1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efa:	4a7e      	ldr	r2, [pc, #504]	@ (80060f4 <HAL_UART_IRQHandler+0x3e0>)
 8005efc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fc f91a 	bl	800213c <HAL_DMA_Abort_IT>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d016      	beq.n	8005f3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	e00e      	b.n	8005f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f99e 	bl	8006260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f24:	e00a      	b.n	8005f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f99a 	bl	8006260 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2c:	e006      	b.n	8005f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f996 	bl	8006260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005f3a:	e175      	b.n	8006228 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	bf00      	nop
    return;
 8005f3e:	e173      	b.n	8006228 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	f040 814f 	bne.w	80061e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 8148 	beq.w	80061e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8141 	beq.w	80061e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f86:	2b40      	cmp	r3, #64	@ 0x40
 8005f88:	f040 80b6 	bne.w	80060f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8145 	beq.w	800622c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005faa:	429a      	cmp	r2, r3
 8005fac:	f080 813e 	bcs.w	800622c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fb6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fc2:	f000 8088 	beq.w	80060d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	330c      	adds	r3, #12
 8005fcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005ff2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ff6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005ffe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800600a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1d9      	bne.n	8005fc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3314      	adds	r3, #20
 8006018:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3314      	adds	r3, #20
 8006032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006036:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800603a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800603e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e1      	bne.n	8006012 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3314      	adds	r3, #20
 8006054:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800605e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006064:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3314      	adds	r3, #20
 800606e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006072:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006074:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006078:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e3      	bne.n	800604e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2220      	movs	r2, #32
 800608a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	330c      	adds	r3, #12
 800609a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060a6:	f023 0310 	bic.w	r3, r3, #16
 80060aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80060b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80060ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e3      	bne.n	8006094 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fb ffc3 	bl	800205c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2202      	movs	r2, #2
 80060da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f8c1 	bl	8006274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060f2:	e09b      	b.n	800622c <HAL_UART_IRQHandler+0x518>
 80060f4:	08006353 	.word	0x08006353
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006100:	b29b      	uxth	r3, r3
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 808e 	beq.w	8006230 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8089 	beq.w	8006230 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800612e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006130:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006134:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	330c      	adds	r3, #12
 800613e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006142:	647a      	str	r2, [r7, #68]	@ 0x44
 8006144:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006148:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e3      	bne.n	800611e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3314      	adds	r3, #20
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	623b      	str	r3, [r7, #32]
   return(result);
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	f023 0301 	bic.w	r3, r3, #1
 800616c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3314      	adds	r3, #20
 8006176:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800617a:	633a      	str	r2, [r7, #48]	@ 0x30
 800617c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e3      	bne.n	8006156 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	330c      	adds	r3, #12
 80061a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	e853 3f00 	ldrex	r3, [r3]
 80061aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0310 	bic.w	r3, r3, #16
 80061b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	330c      	adds	r3, #12
 80061bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80061c0:	61fa      	str	r2, [r7, #28]
 80061c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	69b9      	ldr	r1, [r7, #24]
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	e841 2300 	strex	r3, r2, [r1]
 80061cc:	617b      	str	r3, [r7, #20]
   return(result);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e3      	bne.n	800619c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061de:	4619      	mov	r1, r3
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f847 	bl	8006274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061e6:	e023      	b.n	8006230 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d009      	beq.n	8006208 <HAL_UART_IRQHandler+0x4f4>
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f8ba 	bl	800637a <UART_Transmit_IT>
    return;
 8006206:	e014      	b.n	8006232 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800620c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00e      	beq.n	8006232 <HAL_UART_IRQHandler+0x51e>
 8006214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d008      	beq.n	8006232 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f8fa 	bl	800641a <UART_EndTransmit_IT>
    return;
 8006226:	e004      	b.n	8006232 <HAL_UART_IRQHandler+0x51e>
    return;
 8006228:	bf00      	nop
 800622a:	e002      	b.n	8006232 <HAL_UART_IRQHandler+0x51e>
      return;
 800622c:	bf00      	nop
 800622e:	e000      	b.n	8006232 <HAL_UART_IRQHandler+0x51e>
      return;
 8006230:	bf00      	nop
  }
}
 8006232:	37e8      	adds	r7, #232	@ 0xe8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b095      	sub	sp, #84	@ 0x54
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	330c      	adds	r3, #12
 800629a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800629e:	e853 3f00 	ldrex	r3, [r3]
 80062a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	330c      	adds	r3, #12
 80062b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80062b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062bc:	e841 2300 	strex	r3, r2, [r1]
 80062c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e5      	bne.n	8006294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3314      	adds	r3, #20
 80062ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	f023 0301 	bic.w	r3, r3, #1
 80062de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3314      	adds	r3, #20
 80062e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e5      	bne.n	80062c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006300:	2b01      	cmp	r3, #1
 8006302:	d119      	bne.n	8006338 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	330c      	adds	r3, #12
 800630a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	60bb      	str	r3, [r7, #8]
   return(result);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f023 0310 	bic.w	r3, r3, #16
 800631a:	647b      	str	r3, [r7, #68]	@ 0x44
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006324:	61ba      	str	r2, [r7, #24]
 8006326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	6979      	ldr	r1, [r7, #20]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	613b      	str	r3, [r7, #16]
   return(result);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e5      	bne.n	8006304 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006346:	bf00      	nop
 8006348:	3754      	adds	r7, #84	@ 0x54
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800635e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff ff77 	bl	8006260 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006372:	bf00      	nop
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800637a:	b480      	push	{r7}
 800637c:	b085      	sub	sp, #20
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b21      	cmp	r3, #33	@ 0x21
 800638c:	d13e      	bne.n	800640c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006396:	d114      	bne.n	80063c2 <UART_Transmit_IT+0x48>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d110      	bne.n	80063c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	1c9a      	adds	r2, r3, #2
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	621a      	str	r2, [r3, #32]
 80063c0:	e008      	b.n	80063d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	1c59      	adds	r1, r3, #1
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6211      	str	r1, [r2, #32]
 80063cc:	781a      	ldrb	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29b      	uxth	r3, r3
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	4619      	mov	r1, r3
 80063e2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10f      	bne.n	8006408 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006406:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	e000      	b.n	800640e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800640c:	2302      	movs	r3, #2
  }
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006430:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7ff fefc 	bl	8006238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b08c      	sub	sp, #48	@ 0x30
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b22      	cmp	r3, #34	@ 0x22
 800645c:	f040 80ae 	bne.w	80065bc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006468:	d117      	bne.n	800649a <UART_Receive_IT+0x50>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d113      	bne.n	800649a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006472:	2300      	movs	r3, #0
 8006474:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	b29b      	uxth	r3, r3
 8006484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006488:	b29a      	uxth	r2, r3
 800648a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006492:	1c9a      	adds	r2, r3, #2
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	629a      	str	r2, [r3, #40]	@ 0x28
 8006498:	e026      	b.n	80064e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ac:	d007      	beq.n	80064be <UART_Receive_IT+0x74>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10a      	bne.n	80064cc <UART_Receive_IT+0x82>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	e008      	b.n	80064de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	3b01      	subs	r3, #1
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	4619      	mov	r1, r3
 80064f6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d15d      	bne.n	80065b8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0220 	bic.w	r2, r2, #32
 800650a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800651a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695a      	ldr	r2, [r3, #20]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0201 	bic.w	r2, r2, #1
 800652a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653e:	2b01      	cmp	r3, #1
 8006540:	d135      	bne.n	80065ae <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	330c      	adds	r3, #12
 800654e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	e853 3f00 	ldrex	r3, [r3]
 8006556:	613b      	str	r3, [r7, #16]
   return(result);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f023 0310 	bic.w	r3, r3, #16
 800655e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	330c      	adds	r3, #12
 8006566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006568:	623a      	str	r2, [r7, #32]
 800656a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656c:	69f9      	ldr	r1, [r7, #28]
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	e841 2300 	strex	r3, r2, [r1]
 8006574:	61bb      	str	r3, [r7, #24]
   return(result);
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1e5      	bne.n	8006548 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	2b10      	cmp	r3, #16
 8006588:	d10a      	bne.n	80065a0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7ff fe64 	bl	8006274 <HAL_UARTEx_RxEventCallback>
 80065ac:	e002      	b.n	80065b4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7ff fe4c 	bl	800624c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	e002      	b.n	80065be <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	e000      	b.n	80065be <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80065bc:	2302      	movs	r3, #2
  }
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3730      	adds	r7, #48	@ 0x30
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065cc:	b0c0      	sub	sp, #256	@ 0x100
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e4:	68d9      	ldr	r1, [r3, #12]
 80065e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	ea40 0301 	orr.w	r3, r0, r1
 80065f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	431a      	orrs	r2, r3
 8006600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	431a      	orrs	r2, r3
 8006608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	4313      	orrs	r3, r2
 8006610:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006620:	f021 010c 	bic.w	r1, r1, #12
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800662e:	430b      	orrs	r3, r1
 8006630:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800663e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006642:	6999      	ldr	r1, [r3, #24]
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	ea40 0301 	orr.w	r3, r0, r1
 800664e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	4b8f      	ldr	r3, [pc, #572]	@ (8006894 <UART_SetConfig+0x2cc>)
 8006658:	429a      	cmp	r2, r3
 800665a:	d005      	beq.n	8006668 <UART_SetConfig+0xa0>
 800665c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	4b8d      	ldr	r3, [pc, #564]	@ (8006898 <UART_SetConfig+0x2d0>)
 8006664:	429a      	cmp	r2, r3
 8006666:	d104      	bne.n	8006672 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006668:	f7fc fe2e 	bl	80032c8 <HAL_RCC_GetPCLK2Freq>
 800666c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006670:	e003      	b.n	800667a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006672:	f7fc fe15 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
 8006676:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006684:	f040 810c 	bne.w	80068a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800668c:	2200      	movs	r2, #0
 800668e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006692:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006696:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800669a:	4622      	mov	r2, r4
 800669c:	462b      	mov	r3, r5
 800669e:	1891      	adds	r1, r2, r2
 80066a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80066a2:	415b      	adcs	r3, r3
 80066a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80066aa:	4621      	mov	r1, r4
 80066ac:	eb12 0801 	adds.w	r8, r2, r1
 80066b0:	4629      	mov	r1, r5
 80066b2:	eb43 0901 	adc.w	r9, r3, r1
 80066b6:	f04f 0200 	mov.w	r2, #0
 80066ba:	f04f 0300 	mov.w	r3, #0
 80066be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066ca:	4690      	mov	r8, r2
 80066cc:	4699      	mov	r9, r3
 80066ce:	4623      	mov	r3, r4
 80066d0:	eb18 0303 	adds.w	r3, r8, r3
 80066d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066d8:	462b      	mov	r3, r5
 80066da:	eb49 0303 	adc.w	r3, r9, r3
 80066de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80066f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066f6:	460b      	mov	r3, r1
 80066f8:	18db      	adds	r3, r3, r3
 80066fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80066fc:	4613      	mov	r3, r2
 80066fe:	eb42 0303 	adc.w	r3, r2, r3
 8006702:	657b      	str	r3, [r7, #84]	@ 0x54
 8006704:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006708:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800670c:	f7f9 fd5c 	bl	80001c8 <__aeabi_uldivmod>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4b61      	ldr	r3, [pc, #388]	@ (800689c <UART_SetConfig+0x2d4>)
 8006716:	fba3 2302 	umull	r2, r3, r3, r2
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	011c      	lsls	r4, r3, #4
 800671e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006722:	2200      	movs	r2, #0
 8006724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006728:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800672c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006730:	4642      	mov	r2, r8
 8006732:	464b      	mov	r3, r9
 8006734:	1891      	adds	r1, r2, r2
 8006736:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006738:	415b      	adcs	r3, r3
 800673a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800673c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006740:	4641      	mov	r1, r8
 8006742:	eb12 0a01 	adds.w	sl, r2, r1
 8006746:	4649      	mov	r1, r9
 8006748:	eb43 0b01 	adc.w	fp, r3, r1
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006758:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800675c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006760:	4692      	mov	sl, r2
 8006762:	469b      	mov	fp, r3
 8006764:	4643      	mov	r3, r8
 8006766:	eb1a 0303 	adds.w	r3, sl, r3
 800676a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800676e:	464b      	mov	r3, r9
 8006770:	eb4b 0303 	adc.w	r3, fp, r3
 8006774:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006784:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006788:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800678c:	460b      	mov	r3, r1
 800678e:	18db      	adds	r3, r3, r3
 8006790:	643b      	str	r3, [r7, #64]	@ 0x40
 8006792:	4613      	mov	r3, r2
 8006794:	eb42 0303 	adc.w	r3, r2, r3
 8006798:	647b      	str	r3, [r7, #68]	@ 0x44
 800679a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800679e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80067a2:	f7f9 fd11 	bl	80001c8 <__aeabi_uldivmod>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4611      	mov	r1, r2
 80067ac:	4b3b      	ldr	r3, [pc, #236]	@ (800689c <UART_SetConfig+0x2d4>)
 80067ae:	fba3 2301 	umull	r2, r3, r3, r1
 80067b2:	095b      	lsrs	r3, r3, #5
 80067b4:	2264      	movs	r2, #100	@ 0x64
 80067b6:	fb02 f303 	mul.w	r3, r2, r3
 80067ba:	1acb      	subs	r3, r1, r3
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80067c2:	4b36      	ldr	r3, [pc, #216]	@ (800689c <UART_SetConfig+0x2d4>)
 80067c4:	fba3 2302 	umull	r2, r3, r3, r2
 80067c8:	095b      	lsrs	r3, r3, #5
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80067d0:	441c      	add	r4, r3
 80067d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80067e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80067e4:	4642      	mov	r2, r8
 80067e6:	464b      	mov	r3, r9
 80067e8:	1891      	adds	r1, r2, r2
 80067ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80067ec:	415b      	adcs	r3, r3
 80067ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80067f4:	4641      	mov	r1, r8
 80067f6:	1851      	adds	r1, r2, r1
 80067f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80067fa:	4649      	mov	r1, r9
 80067fc:	414b      	adcs	r3, r1
 80067fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	f04f 0300 	mov.w	r3, #0
 8006808:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800680c:	4659      	mov	r1, fp
 800680e:	00cb      	lsls	r3, r1, #3
 8006810:	4651      	mov	r1, sl
 8006812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006816:	4651      	mov	r1, sl
 8006818:	00ca      	lsls	r2, r1, #3
 800681a:	4610      	mov	r0, r2
 800681c:	4619      	mov	r1, r3
 800681e:	4603      	mov	r3, r0
 8006820:	4642      	mov	r2, r8
 8006822:	189b      	adds	r3, r3, r2
 8006824:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006828:	464b      	mov	r3, r9
 800682a:	460a      	mov	r2, r1
 800682c:	eb42 0303 	adc.w	r3, r2, r3
 8006830:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006840:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006844:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006848:	460b      	mov	r3, r1
 800684a:	18db      	adds	r3, r3, r3
 800684c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800684e:	4613      	mov	r3, r2
 8006850:	eb42 0303 	adc.w	r3, r2, r3
 8006854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800685a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800685e:	f7f9 fcb3 	bl	80001c8 <__aeabi_uldivmod>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4b0d      	ldr	r3, [pc, #52]	@ (800689c <UART_SetConfig+0x2d4>)
 8006868:	fba3 1302 	umull	r1, r3, r3, r2
 800686c:	095b      	lsrs	r3, r3, #5
 800686e:	2164      	movs	r1, #100	@ 0x64
 8006870:	fb01 f303 	mul.w	r3, r1, r3
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	3332      	adds	r3, #50	@ 0x32
 800687a:	4a08      	ldr	r2, [pc, #32]	@ (800689c <UART_SetConfig+0x2d4>)
 800687c:	fba2 2303 	umull	r2, r3, r2, r3
 8006880:	095b      	lsrs	r3, r3, #5
 8006882:	f003 0207 	and.w	r2, r3, #7
 8006886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4422      	add	r2, r4
 800688e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006890:	e106      	b.n	8006aa0 <UART_SetConfig+0x4d8>
 8006892:	bf00      	nop
 8006894:	40011000 	.word	0x40011000
 8006898:	40011400 	.word	0x40011400
 800689c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a4:	2200      	movs	r2, #0
 80068a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80068ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80068b2:	4642      	mov	r2, r8
 80068b4:	464b      	mov	r3, r9
 80068b6:	1891      	adds	r1, r2, r2
 80068b8:	6239      	str	r1, [r7, #32]
 80068ba:	415b      	adcs	r3, r3
 80068bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068c2:	4641      	mov	r1, r8
 80068c4:	1854      	adds	r4, r2, r1
 80068c6:	4649      	mov	r1, r9
 80068c8:	eb43 0501 	adc.w	r5, r3, r1
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	00eb      	lsls	r3, r5, #3
 80068d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068da:	00e2      	lsls	r2, r4, #3
 80068dc:	4614      	mov	r4, r2
 80068de:	461d      	mov	r5, r3
 80068e0:	4643      	mov	r3, r8
 80068e2:	18e3      	adds	r3, r4, r3
 80068e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068e8:	464b      	mov	r3, r9
 80068ea:	eb45 0303 	adc.w	r3, r5, r3
 80068ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006902:	f04f 0200 	mov.w	r2, #0
 8006906:	f04f 0300 	mov.w	r3, #0
 800690a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800690e:	4629      	mov	r1, r5
 8006910:	008b      	lsls	r3, r1, #2
 8006912:	4621      	mov	r1, r4
 8006914:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006918:	4621      	mov	r1, r4
 800691a:	008a      	lsls	r2, r1, #2
 800691c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006920:	f7f9 fc52 	bl	80001c8 <__aeabi_uldivmod>
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	4b60      	ldr	r3, [pc, #384]	@ (8006aac <UART_SetConfig+0x4e4>)
 800692a:	fba3 2302 	umull	r2, r3, r3, r2
 800692e:	095b      	lsrs	r3, r3, #5
 8006930:	011c      	lsls	r4, r3, #4
 8006932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006936:	2200      	movs	r2, #0
 8006938:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800693c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006940:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006944:	4642      	mov	r2, r8
 8006946:	464b      	mov	r3, r9
 8006948:	1891      	adds	r1, r2, r2
 800694a:	61b9      	str	r1, [r7, #24]
 800694c:	415b      	adcs	r3, r3
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006954:	4641      	mov	r1, r8
 8006956:	1851      	adds	r1, r2, r1
 8006958:	6139      	str	r1, [r7, #16]
 800695a:	4649      	mov	r1, r9
 800695c:	414b      	adcs	r3, r1
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800696c:	4659      	mov	r1, fp
 800696e:	00cb      	lsls	r3, r1, #3
 8006970:	4651      	mov	r1, sl
 8006972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006976:	4651      	mov	r1, sl
 8006978:	00ca      	lsls	r2, r1, #3
 800697a:	4610      	mov	r0, r2
 800697c:	4619      	mov	r1, r3
 800697e:	4603      	mov	r3, r0
 8006980:	4642      	mov	r2, r8
 8006982:	189b      	adds	r3, r3, r2
 8006984:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006988:	464b      	mov	r3, r9
 800698a:	460a      	mov	r2, r1
 800698c:	eb42 0303 	adc.w	r3, r2, r3
 8006990:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800699e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80069a0:	f04f 0200 	mov.w	r2, #0
 80069a4:	f04f 0300 	mov.w	r3, #0
 80069a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80069ac:	4649      	mov	r1, r9
 80069ae:	008b      	lsls	r3, r1, #2
 80069b0:	4641      	mov	r1, r8
 80069b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069b6:	4641      	mov	r1, r8
 80069b8:	008a      	lsls	r2, r1, #2
 80069ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80069be:	f7f9 fc03 	bl	80001c8 <__aeabi_uldivmod>
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4611      	mov	r1, r2
 80069c8:	4b38      	ldr	r3, [pc, #224]	@ (8006aac <UART_SetConfig+0x4e4>)
 80069ca:	fba3 2301 	umull	r2, r3, r3, r1
 80069ce:	095b      	lsrs	r3, r3, #5
 80069d0:	2264      	movs	r2, #100	@ 0x64
 80069d2:	fb02 f303 	mul.w	r3, r2, r3
 80069d6:	1acb      	subs	r3, r1, r3
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	3332      	adds	r3, #50	@ 0x32
 80069dc:	4a33      	ldr	r2, [pc, #204]	@ (8006aac <UART_SetConfig+0x4e4>)
 80069de:	fba2 2303 	umull	r2, r3, r2, r3
 80069e2:	095b      	lsrs	r3, r3, #5
 80069e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069e8:	441c      	add	r4, r3
 80069ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ee:	2200      	movs	r2, #0
 80069f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80069f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80069f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80069f8:	4642      	mov	r2, r8
 80069fa:	464b      	mov	r3, r9
 80069fc:	1891      	adds	r1, r2, r2
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	415b      	adcs	r3, r3
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a08:	4641      	mov	r1, r8
 8006a0a:	1851      	adds	r1, r2, r1
 8006a0c:	6039      	str	r1, [r7, #0]
 8006a0e:	4649      	mov	r1, r9
 8006a10:	414b      	adcs	r3, r1
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	f04f 0200 	mov.w	r2, #0
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a20:	4659      	mov	r1, fp
 8006a22:	00cb      	lsls	r3, r1, #3
 8006a24:	4651      	mov	r1, sl
 8006a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a2a:	4651      	mov	r1, sl
 8006a2c:	00ca      	lsls	r2, r1, #3
 8006a2e:	4610      	mov	r0, r2
 8006a30:	4619      	mov	r1, r3
 8006a32:	4603      	mov	r3, r0
 8006a34:	4642      	mov	r2, r8
 8006a36:	189b      	adds	r3, r3, r2
 8006a38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a3a:	464b      	mov	r3, r9
 8006a3c:	460a      	mov	r2, r1
 8006a3e:	eb42 0303 	adc.w	r3, r2, r3
 8006a42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a50:	f04f 0200 	mov.w	r2, #0
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	008b      	lsls	r3, r1, #2
 8006a60:	4641      	mov	r1, r8
 8006a62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a66:	4641      	mov	r1, r8
 8006a68:	008a      	lsls	r2, r1, #2
 8006a6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006a6e:	f7f9 fbab 	bl	80001c8 <__aeabi_uldivmod>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	4b0d      	ldr	r3, [pc, #52]	@ (8006aac <UART_SetConfig+0x4e4>)
 8006a78:	fba3 1302 	umull	r1, r3, r3, r2
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	2164      	movs	r1, #100	@ 0x64
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	3332      	adds	r3, #50	@ 0x32
 8006a8a:	4a08      	ldr	r2, [pc, #32]	@ (8006aac <UART_SetConfig+0x4e4>)
 8006a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a90:	095b      	lsrs	r3, r3, #5
 8006a92:	f003 020f 	and.w	r2, r3, #15
 8006a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4422      	add	r2, r4
 8006a9e:	609a      	str	r2, [r3, #8]
}
 8006aa0:	bf00      	nop
 8006aa2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aac:	51eb851f 	.word	0x51eb851f

08006ab0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	f107 001c 	add.w	r0, r7, #28
 8006abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006ac6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006aca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8006ace:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8006ad2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8006ad6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8006ada:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8006aea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3714      	adds	r7, #20
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	b004      	add	sp, #16
 8006b04:	4770      	bx	lr

08006b06 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2203      	movs	r2, #3
 8006b4e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0303 	and.w	r3, r3, #3
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006b84:	2300      	movs	r3, #0
 8006b86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006b98:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006b9e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006ba4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8006bb4:	f023 030f 	bic.w	r3, r3, #15
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	b2db      	uxtb	r3, r3
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	3314      	adds	r3, #20
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
}  
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b085      	sub	sp, #20
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006c34:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006c3a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006c40:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	431a      	orrs	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0

}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b088      	sub	sp, #32
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006c74:	2310      	movs	r3, #16
 8006c76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c78:	2340      	movs	r3, #64	@ 0x40
 8006c7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c86:	f107 0308 	add.w	r3, r7, #8
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff ff74 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c96:	2110      	movs	r1, #16
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f9d7 	bl	800704c <SDMMC_GetCmdResp1>
 8006c9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3720      	adds	r7, #32
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b088      	sub	sp, #32
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006cb8:	2311      	movs	r3, #17
 8006cba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cbc:	2340      	movs	r3, #64	@ 0x40
 8006cbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006cc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cca:	f107 0308 	add.w	r3, r7, #8
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff ff52 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cda:	2111      	movs	r1, #17
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f9b5 	bl	800704c <SDMMC_GetCmdResp1>
 8006ce2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ce4:	69fb      	ldr	r3, [r7, #28]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3720      	adds	r7, #32
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b088      	sub	sp, #32
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006cfc:	2312      	movs	r3, #18
 8006cfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d00:	2340      	movs	r3, #64	@ 0x40
 8006d02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d0e:	f107 0308 	add.w	r3, r7, #8
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7ff ff30 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d1e:	2112      	movs	r1, #18
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f993 	bl	800704c <SDMMC_GetCmdResp1>
 8006d26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d28:	69fb      	ldr	r3, [r7, #28]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3720      	adds	r7, #32
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b088      	sub	sp, #32
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006d40:	2318      	movs	r3, #24
 8006d42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d44:	2340      	movs	r3, #64	@ 0x40
 8006d46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d52:	f107 0308 	add.w	r3, r7, #8
 8006d56:	4619      	mov	r1, r3
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff ff0e 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d62:	2118      	movs	r1, #24
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f971 	bl	800704c <SDMMC_GetCmdResp1>
 8006d6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d6c:	69fb      	ldr	r3, [r7, #28]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b088      	sub	sp, #32
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006d84:	2319      	movs	r3, #25
 8006d86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d88:	2340      	movs	r3, #64	@ 0x40
 8006d8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d96:	f107 0308 	add.w	r3, r7, #8
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff feec 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006da6:	2119      	movs	r1, #25
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 f94f 	bl	800704c <SDMMC_GetCmdResp1>
 8006dae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006db0:	69fb      	ldr	r3, [r7, #28]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3720      	adds	r7, #32
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
	...

08006dbc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b088      	sub	sp, #32
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006dc8:	230c      	movs	r3, #12
 8006dca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dcc:	2340      	movs	r3, #64	@ 0x40
 8006dce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006dd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dda:	f107 0308 	add.w	r3, r7, #8
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff feca 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006de6:	4a05      	ldr	r2, [pc, #20]	@ (8006dfc <SDMMC_CmdStopTransfer+0x40>)
 8006de8:	210c      	movs	r1, #12
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f92e 	bl	800704c <SDMMC_GetCmdResp1>
 8006df0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006df2:	69fb      	ldr	r3, [r7, #28]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	05f5e100 	.word	0x05f5e100

08006e00 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	@ 0x28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006e10:	2307      	movs	r3, #7
 8006e12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e14:	2340      	movs	r3, #64	@ 0x40
 8006e16:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e20:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e22:	f107 0310 	add.w	r3, r7, #16
 8006e26:	4619      	mov	r1, r3
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f7ff fea6 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e32:	2107      	movs	r1, #7
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 f909 	bl	800704c <SDMMC_GetCmdResp1>
 8006e3a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3728      	adds	r7, #40	@ 0x28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b088      	sub	sp, #32
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006e56:	2300      	movs	r3, #0
 8006e58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e64:	f107 0308 	add.w	r3, r7, #8
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fe85 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fb23 	bl	80074bc <SDMMC_GetCmdError>
 8006e76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e78:	69fb      	ldr	r3, [r7, #28]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3720      	adds	r7, #32
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b088      	sub	sp, #32
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006e8a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8006e8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006e90:	2308      	movs	r3, #8
 8006e92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e94:	2340      	movs	r3, #64	@ 0x40
 8006e96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ea0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ea2:	f107 0308 	add.w	r3, r7, #8
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff fe66 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fab6 	bl	8007420 <SDMMC_GetCmdResp7>
 8006eb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3720      	adds	r7, #32
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006ece:	2337      	movs	r3, #55	@ 0x37
 8006ed0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ed2:	2340      	movs	r3, #64	@ 0x40
 8006ed4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006eda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ede:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ee0:	f107 0308 	add.w	r3, r7, #8
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7ff fe47 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ef0:	2137      	movs	r1, #55	@ 0x37
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f8aa 	bl	800704c <SDMMC_GetCmdResp1>
 8006ef8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006efa:	69fb      	ldr	r3, [r7, #28]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3720      	adds	r7, #32
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006f1a:	2329      	movs	r3, #41	@ 0x29
 8006f1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f1e:	2340      	movs	r3, #64	@ 0x40
 8006f20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f22:	2300      	movs	r3, #0
 8006f24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f2c:	f107 0308 	add.w	r3, r7, #8
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff fe21 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f9bd 	bl	80072b8 <SDMMC_GetCmdResp3>
 8006f3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f40:	69fb      	ldr	r3, [r7, #28]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3720      	adds	r7, #32
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b088      	sub	sp, #32
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006f56:	2302      	movs	r3, #2
 8006f58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006f5a:	23c0      	movs	r3, #192	@ 0xc0
 8006f5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006f66:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f68:	f107 0308 	add.w	r3, r7, #8
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff fe03 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f957 	bl	8007228 <SDMMC_GetCmdResp2>
 8006f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3720      	adds	r7, #32
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b088      	sub	sp, #32
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006f94:	2309      	movs	r3, #9
 8006f96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006f98:	23c0      	movs	r3, #192	@ 0xc0
 8006f9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fa0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fa4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fa6:	f107 0308 	add.w	r3, r7, #8
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7ff fde4 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f938 	bl	8007228 <SDMMC_GetCmdResp2>
 8006fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fba:	69fb      	ldr	r3, [r7, #28]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3720      	adds	r7, #32
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fd6:	2340      	movs	r3, #64	@ 0x40
 8006fd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fe2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fe4:	f107 0308 	add.w	r3, r7, #8
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7ff fdc5 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	2103      	movs	r1, #3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f99d 	bl	8007334 <SDMMC_GetCmdResp6>
 8006ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ffc:	69fb      	ldr	r3, [r7, #28]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b088      	sub	sp, #32
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007014:	230d      	movs	r3, #13
 8007016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007018:	2340      	movs	r3, #64	@ 0x40
 800701a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800701c:	2300      	movs	r3, #0
 800701e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007020:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007024:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007026:	f107 0308 	add.w	r3, r7, #8
 800702a:	4619      	mov	r1, r3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff fda4 	bl	8006b7a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007036:	210d      	movs	r1, #13
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f807 	bl	800704c <SDMMC_GetCmdResp1>
 800703e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007040:	69fb      	ldr	r3, [r7, #28]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	460b      	mov	r3, r1
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800705a:	4b70      	ldr	r3, [pc, #448]	@ (800721c <SDMMC_GetCmdResp1+0x1d0>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a70      	ldr	r2, [pc, #448]	@ (8007220 <SDMMC_GetCmdResp1+0x1d4>)
 8007060:	fba2 2303 	umull	r2, r3, r2, r3
 8007064:	0a5a      	lsrs	r2, r3, #9
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	fb02 f303 	mul.w	r3, r2, r3
 800706c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	1e5a      	subs	r2, r3, #1
 8007072:	61fa      	str	r2, [r7, #28]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d102      	bne.n	800707e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007078:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800707c:	e0c9      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007082:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0ef      	beq.n	800706e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1ea      	bne.n	800706e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2204      	movs	r2, #4
 80070a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070aa:	2304      	movs	r3, #4
 80070ac:	e0b1      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d004      	beq.n	80070c4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e0a6      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	22c5      	movs	r2, #197	@ 0xc5
 80070c8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f7ff fd7f 	bl	8006bce <SDIO_GetCommandResponse>
 80070d0:	4603      	mov	r3, r0
 80070d2:	461a      	mov	r2, r3
 80070d4:	7afb      	ldrb	r3, [r7, #11]
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d001      	beq.n	80070de <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070da:	2301      	movs	r3, #1
 80070dc:	e099      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80070de:	2100      	movs	r1, #0
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7ff fd81 	bl	8006be8 <SDIO_GetResponse>
 80070e6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	4b4e      	ldr	r3, [pc, #312]	@ (8007224 <SDMMC_GetCmdResp1+0x1d8>)
 80070ec:	4013      	ands	r3, r2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e08d      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	da02      	bge.n	8007102 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80070fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007100:	e087      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800710c:	2340      	movs	r3, #64	@ 0x40
 800710e:	e080      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800711a:	2380      	movs	r3, #128	@ 0x80
 800711c:	e079      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007128:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800712c:	e071      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007138:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800713c:	e069      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d002      	beq.n	800714e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007148:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800714c:	e061      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007158:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800715c:	e059      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007168:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800716c:	e051      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007178:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800717c:	e049      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007188:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800718c:	e041      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d002      	beq.n	800719e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007198:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800719c:	e039      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80071a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80071ac:	e031      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d002      	beq.n	80071be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80071b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80071bc:	e029      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80071c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80071cc:	e021      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80071d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80071dc:	e019      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80071e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80071ec:	e011      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80071f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80071fc:	e009      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f003 0308 	and.w	r3, r3, #8
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007208:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800720c:	e001      	b.n	8007212 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800720e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007212:	4618      	mov	r0, r3
 8007214:	3720      	adds	r7, #32
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20000000 	.word	0x20000000
 8007220:	10624dd3 	.word	0x10624dd3
 8007224:	fdffe008 	.word	0xfdffe008

08007228 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007230:	4b1f      	ldr	r3, [pc, #124]	@ (80072b0 <SDMMC_GetCmdResp2+0x88>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a1f      	ldr	r2, [pc, #124]	@ (80072b4 <SDMMC_GetCmdResp2+0x8c>)
 8007236:	fba2 2303 	umull	r2, r3, r2, r3
 800723a:	0a5b      	lsrs	r3, r3, #9
 800723c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007240:	fb02 f303 	mul.w	r3, r2, r3
 8007244:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	1e5a      	subs	r2, r3, #1
 800724a:	60fa      	str	r2, [r7, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d102      	bne.n	8007256 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007250:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007254:	e026      	b.n	80072a4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800725a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0ef      	beq.n	8007246 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1ea      	bne.n	8007246 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d004      	beq.n	8007286 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2204      	movs	r2, #4
 8007280:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007282:	2304      	movs	r3, #4
 8007284:	e00e      	b.n	80072a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d004      	beq.n	800729c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007298:	2301      	movs	r3, #1
 800729a:	e003      	b.n	80072a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	22c5      	movs	r2, #197	@ 0xc5
 80072a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	20000000 	.word	0x20000000
 80072b4:	10624dd3 	.word	0x10624dd3

080072b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072c0:	4b1a      	ldr	r3, [pc, #104]	@ (800732c <SDMMC_GetCmdResp3+0x74>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a1a      	ldr	r2, [pc, #104]	@ (8007330 <SDMMC_GetCmdResp3+0x78>)
 80072c6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ca:	0a5b      	lsrs	r3, r3, #9
 80072cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072d0:	fb02 f303 	mul.w	r3, r2, r3
 80072d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	1e5a      	subs	r2, r3, #1
 80072da:	60fa      	str	r2, [r7, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d102      	bne.n	80072e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80072e4:	e01b      	b.n	800731e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0ef      	beq.n	80072d6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1ea      	bne.n	80072d6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d004      	beq.n	8007316 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2204      	movs	r2, #4
 8007310:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007312:	2304      	movs	r3, #4
 8007314:	e003      	b.n	800731e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	22c5      	movs	r2, #197	@ 0xc5
 800731a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	20000000 	.word	0x20000000
 8007330:	10624dd3 	.word	0x10624dd3

08007334 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	460b      	mov	r3, r1
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007342:	4b35      	ldr	r3, [pc, #212]	@ (8007418 <SDMMC_GetCmdResp6+0xe4>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a35      	ldr	r2, [pc, #212]	@ (800741c <SDMMC_GetCmdResp6+0xe8>)
 8007348:	fba2 2303 	umull	r2, r3, r2, r3
 800734c:	0a5b      	lsrs	r3, r3, #9
 800734e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007352:	fb02 f303 	mul.w	r3, r2, r3
 8007356:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	1e5a      	subs	r2, r3, #1
 800735c:	61fa      	str	r2, [r7, #28]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d102      	bne.n	8007368 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007362:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007366:	e052      	b.n	800740e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800736c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0ef      	beq.n	8007358 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1ea      	bne.n	8007358 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007386:	f003 0304 	and.w	r3, r3, #4
 800738a:	2b00      	cmp	r3, #0
 800738c:	d004      	beq.n	8007398 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2204      	movs	r2, #4
 8007392:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007394:	2304      	movs	r3, #4
 8007396:	e03a      	b.n	800740e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d004      	beq.n	80073ae <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2201      	movs	r2, #1
 80073a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e02f      	b.n	800740e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f7ff fc0d 	bl	8006bce <SDIO_GetCommandResponse>
 80073b4:	4603      	mov	r3, r0
 80073b6:	461a      	mov	r2, r3
 80073b8:	7afb      	ldrb	r3, [r7, #11]
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d001      	beq.n	80073c2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80073be:	2301      	movs	r3, #1
 80073c0:	e025      	b.n	800740e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	22c5      	movs	r2, #197	@ 0xc5
 80073c6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80073c8:	2100      	movs	r1, #0
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f7ff fc0c 	bl	8006be8 <SDIO_GetResponse>
 80073d0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d106      	bne.n	80073ea <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	0c1b      	lsrs	r3, r3, #16
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80073e6:	2300      	movs	r3, #0
 80073e8:	e011      	b.n	800740e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d002      	beq.n	80073fa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80073f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80073f8:	e009      	b.n	800740e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007404:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007408:	e001      	b.n	800740e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800740a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800740e:	4618      	mov	r0, r3
 8007410:	3720      	adds	r7, #32
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20000000 	.word	0x20000000
 800741c:	10624dd3 	.word	0x10624dd3

08007420 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007428:	4b22      	ldr	r3, [pc, #136]	@ (80074b4 <SDMMC_GetCmdResp7+0x94>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a22      	ldr	r2, [pc, #136]	@ (80074b8 <SDMMC_GetCmdResp7+0x98>)
 800742e:	fba2 2303 	umull	r2, r3, r2, r3
 8007432:	0a5b      	lsrs	r3, r3, #9
 8007434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007438:	fb02 f303 	mul.w	r3, r2, r3
 800743c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1e5a      	subs	r2, r3, #1
 8007442:	60fa      	str	r2, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d102      	bne.n	800744e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007448:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800744c:	e02c      	b.n	80074a8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007452:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0ef      	beq.n	800743e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1ea      	bne.n	800743e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b00      	cmp	r3, #0
 8007472:	d004      	beq.n	800747e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2204      	movs	r2, #4
 8007478:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800747a:	2304      	movs	r3, #4
 800747c:	e014      	b.n	80074a8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d004      	beq.n	8007494 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007490:	2301      	movs	r3, #1
 8007492:	e009      	b.n	80074a8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2240      	movs	r2, #64	@ 0x40
 80074a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80074a6:	2300      	movs	r3, #0
  
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	20000000 	.word	0x20000000
 80074b8:	10624dd3 	.word	0x10624dd3

080074bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074c4:	4b11      	ldr	r3, [pc, #68]	@ (800750c <SDMMC_GetCmdError+0x50>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a11      	ldr	r2, [pc, #68]	@ (8007510 <SDMMC_GetCmdError+0x54>)
 80074ca:	fba2 2303 	umull	r2, r3, r2, r3
 80074ce:	0a5b      	lsrs	r3, r3, #9
 80074d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074d4:	fb02 f303 	mul.w	r3, r2, r3
 80074d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	1e5a      	subs	r2, r3, #1
 80074de:	60fa      	str	r2, [r7, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d102      	bne.n	80074ea <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80074e8:	e009      	b.n	80074fe <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0f1      	beq.n	80074da <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	22c5      	movs	r2, #197	@ 0xc5
 80074fa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	20000000 	.word	0x20000000
 8007510:	10624dd3 	.word	0x10624dd3

08007514 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007518:	4904      	ldr	r1, [pc, #16]	@ (800752c <MX_FATFS_Init+0x18>)
 800751a:	4805      	ldr	r0, [pc, #20]	@ (8007530 <MX_FATFS_Init+0x1c>)
 800751c:	f000 fe3c 	bl	8008198 <FATFS_LinkDriver>
 8007520:	4603      	mov	r3, r0
 8007522:	461a      	mov	r2, r3
 8007524:	4b03      	ldr	r3, [pc, #12]	@ (8007534 <MX_FATFS_Init+0x20>)
 8007526:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007528:	bf00      	nop
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20000de8 	.word	0x20000de8
 8007530:	0800848c 	.word	0x0800848c
 8007534:	20000de4 	.word	0x20000de4

08007538 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007542:	f000 f86b 	bl	800761c <BSP_SD_IsDetected>
 8007546:	4603      	mov	r3, r0
 8007548:	2b01      	cmp	r3, #1
 800754a:	d001      	beq.n	8007550 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e005      	b.n	800755c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007550:	4804      	ldr	r0, [pc, #16]	@ (8007564 <BSP_SD_Init+0x2c>)
 8007552:	f7fb fecd 	bl	80032f0 <HAL_SD_Init>
 8007556:	4603      	mov	r3, r0
 8007558:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800755a:	79fb      	ldrb	r3, [r7, #7]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	200008d4 	.word	0x200008d4

08007568 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af02      	add	r7, sp, #8
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	68f9      	ldr	r1, [r7, #12]
 8007584:	4806      	ldr	r0, [pc, #24]	@ (80075a0 <BSP_SD_ReadBlocks+0x38>)
 8007586:	f7fb ff63 	bl	8003450 <HAL_SD_ReadBlocks>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	200008d4 	.word	0x200008d4

080075a4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	68f9      	ldr	r1, [r7, #12]
 80075c0:	4806      	ldr	r0, [pc, #24]	@ (80075dc <BSP_SD_WriteBlocks+0x38>)
 80075c2:	f7fc f92b 	bl	800381c <HAL_SD_WriteBlocks>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	200008d4 	.word	0x200008d4

080075e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80075e4:	4805      	ldr	r0, [pc, #20]	@ (80075fc <BSP_SD_GetCardState+0x1c>)
 80075e6:	f7fc fc77 	bl	8003ed8 <HAL_SD_GetCardState>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b04      	cmp	r3, #4
 80075ee:	bf14      	ite	ne
 80075f0:	2301      	movne	r3, #1
 80075f2:	2300      	moveq	r3, #0
 80075f4:	b2db      	uxtb	r3, r3
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	200008d4 	.word	0x200008d4

08007600 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007608:	6879      	ldr	r1, [r7, #4]
 800760a:	4803      	ldr	r0, [pc, #12]	@ (8007618 <BSP_SD_GetCardInfo+0x18>)
 800760c:	f7fc fc38 	bl	8003e80 <HAL_SD_GetCardInfo>
}
 8007610:	bf00      	nop
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	200008d4 	.word	0x200008d4

0800761c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007622:	2301      	movs	r3, #1
 8007624:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	b2db      	uxtb	r3, r3
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
	...

08007638 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007642:	4b0b      	ldr	r3, [pc, #44]	@ (8007670 <SD_CheckStatus+0x38>)
 8007644:	2201      	movs	r2, #1
 8007646:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007648:	f7ff ffca 	bl	80075e0 <BSP_SD_GetCardState>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d107      	bne.n	8007662 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007652:	4b07      	ldr	r3, [pc, #28]	@ (8007670 <SD_CheckStatus+0x38>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	f023 0301 	bic.w	r3, r3, #1
 800765c:	b2da      	uxtb	r2, r3
 800765e:	4b04      	ldr	r3, [pc, #16]	@ (8007670 <SD_CheckStatus+0x38>)
 8007660:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007662:	4b03      	ldr	r3, [pc, #12]	@ (8007670 <SD_CheckStatus+0x38>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	b2db      	uxtb	r3, r3
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20000009 	.word	0x20000009

08007674 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800767e:	4b0b      	ldr	r3, [pc, #44]	@ (80076ac <SD_initialize+0x38>)
 8007680:	2201      	movs	r2, #1
 8007682:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007684:	f7ff ff58 	bl	8007538 <BSP_SD_Init>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d107      	bne.n	800769e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	4618      	mov	r0, r3
 8007692:	f7ff ffd1 	bl	8007638 <SD_CheckStatus>
 8007696:	4603      	mov	r3, r0
 8007698:	461a      	mov	r2, r3
 800769a:	4b04      	ldr	r3, [pc, #16]	@ (80076ac <SD_initialize+0x38>)
 800769c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800769e:	4b03      	ldr	r3, [pc, #12]	@ (80076ac <SD_initialize+0x38>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	b2db      	uxtb	r3, r3
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	20000009 	.word	0x20000009

080076b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff ffbb 	bl	8007638 <SD_CheckStatus>
 80076c2:	4603      	mov	r3, r0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	607a      	str	r2, [r7, #4]
 80076d6:	603b      	str	r3, [r7, #0]
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80076e0:	f04f 33ff 	mov.w	r3, #4294967295
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	68b8      	ldr	r0, [r7, #8]
 80076ea:	f7ff ff3d 	bl	8007568 <BSP_SD_ReadBlocks>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d107      	bne.n	8007704 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80076f4:	bf00      	nop
 80076f6:	f7ff ff73 	bl	80075e0 <BSP_SD_GetCardState>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1fa      	bne.n	80076f6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007704:	7dfb      	ldrb	r3, [r7, #23]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b086      	sub	sp, #24
 8007712:	af00      	add	r7, sp, #0
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	603b      	str	r3, [r7, #0]
 800771a:	4603      	mov	r3, r0
 800771c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007722:	f04f 33ff 	mov.w	r3, #4294967295
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	68b8      	ldr	r0, [r7, #8]
 800772c:	f7ff ff3a 	bl	80075a4 <BSP_SD_WriteBlocks>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d107      	bne.n	8007746 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007736:	bf00      	nop
 8007738:	f7ff ff52 	bl	80075e0 <BSP_SD_GetCardState>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1fa      	bne.n	8007738 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007746:	7dfb      	ldrb	r3, [r7, #23]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3718      	adds	r7, #24
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08c      	sub	sp, #48	@ 0x30
 8007754:	af00      	add	r7, sp, #0
 8007756:	4603      	mov	r3, r0
 8007758:	603a      	str	r2, [r7, #0]
 800775a:	71fb      	strb	r3, [r7, #7]
 800775c:	460b      	mov	r3, r1
 800775e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007766:	4b25      	ldr	r3, [pc, #148]	@ (80077fc <SD_ioctl+0xac>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <SD_ioctl+0x28>
 8007774:	2303      	movs	r3, #3
 8007776:	e03c      	b.n	80077f2 <SD_ioctl+0xa2>

  switch (cmd)
 8007778:	79bb      	ldrb	r3, [r7, #6]
 800777a:	2b03      	cmp	r3, #3
 800777c:	d834      	bhi.n	80077e8 <SD_ioctl+0x98>
 800777e:	a201      	add	r2, pc, #4	@ (adr r2, 8007784 <SD_ioctl+0x34>)
 8007780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007784:	08007795 	.word	0x08007795
 8007788:	0800779d 	.word	0x0800779d
 800778c:	080077b5 	.word	0x080077b5
 8007790:	080077cf 	.word	0x080077cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800779a:	e028      	b.n	80077ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800779c:	f107 030c 	add.w	r3, r7, #12
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff ff2d 	bl	8007600 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80077a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80077b2:	e01c      	b.n	80077ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80077b4:	f107 030c 	add.w	r3, r7, #12
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7ff ff21 	bl	8007600 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80077be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80077cc:	e00f      	b.n	80077ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80077ce:	f107 030c 	add.w	r3, r7, #12
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7ff ff14 	bl	8007600 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80077d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077da:	0a5a      	lsrs	r2, r3, #9
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80077e6:	e002      	b.n	80077ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80077e8:	2304      	movs	r3, #4
 80077ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80077ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3730      	adds	r7, #48	@ 0x30
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	20000009 	.word	0x20000009

08007800 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	4603      	mov	r3, r0
 8007808:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800780a:	79fb      	ldrb	r3, [r7, #7]
 800780c:	4a08      	ldr	r2, [pc, #32]	@ (8007830 <disk_status+0x30>)
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	79fa      	ldrb	r2, [r7, #7]
 8007818:	4905      	ldr	r1, [pc, #20]	@ (8007830 <disk_status+0x30>)
 800781a:	440a      	add	r2, r1
 800781c:	7a12      	ldrb	r2, [r2, #8]
 800781e:	4610      	mov	r0, r2
 8007820:	4798      	blx	r3
 8007822:	4603      	mov	r3, r0
 8007824:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007826:	7bfb      	ldrb	r3, [r7, #15]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	20000e14 	.word	0x20000e14

08007834 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	4603      	mov	r3, r0
 800783c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007842:	79fb      	ldrb	r3, [r7, #7]
 8007844:	4a0e      	ldr	r2, [pc, #56]	@ (8007880 <disk_initialize+0x4c>)
 8007846:	5cd3      	ldrb	r3, [r2, r3]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d114      	bne.n	8007876 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800784c:	79fb      	ldrb	r3, [r7, #7]
 800784e:	4a0c      	ldr	r2, [pc, #48]	@ (8007880 <disk_initialize+0x4c>)
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	79fa      	ldrb	r2, [r7, #7]
 800785a:	4909      	ldr	r1, [pc, #36]	@ (8007880 <disk_initialize+0x4c>)
 800785c:	440a      	add	r2, r1
 800785e:	7a12      	ldrb	r2, [r2, #8]
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
 8007864:	4603      	mov	r3, r0
 8007866:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007868:	7bfb      	ldrb	r3, [r7, #15]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d103      	bne.n	8007876 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800786e:	79fb      	ldrb	r3, [r7, #7]
 8007870:	4a03      	ldr	r2, [pc, #12]	@ (8007880 <disk_initialize+0x4c>)
 8007872:	2101      	movs	r1, #1
 8007874:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007876:	7bfb      	ldrb	r3, [r7, #15]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	20000e14 	.word	0x20000e14

08007884 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007884:	b590      	push	{r4, r7, lr}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	607a      	str	r2, [r7, #4]
 800788e:	603b      	str	r3, [r7, #0]
 8007890:	4603      	mov	r3, r0
 8007892:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	4a0a      	ldr	r2, [pc, #40]	@ (80078c0 <disk_read+0x3c>)
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	689c      	ldr	r4, [r3, #8]
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
 80078a2:	4a07      	ldr	r2, [pc, #28]	@ (80078c0 <disk_read+0x3c>)
 80078a4:	4413      	add	r3, r2
 80078a6:	7a18      	ldrb	r0, [r3, #8]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	68b9      	ldr	r1, [r7, #8]
 80078ae:	47a0      	blx	r4
 80078b0:	4603      	mov	r3, r0
 80078b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	371c      	adds	r7, #28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd90      	pop	{r4, r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000e14 	.word	0x20000e14

080078c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80078c4:	b590      	push	{r4, r7, lr}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	607a      	str	r2, [r7, #4]
 80078ce:	603b      	str	r3, [r7, #0]
 80078d0:	4603      	mov	r3, r0
 80078d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
 80078d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007900 <disk_write+0x3c>)
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	68dc      	ldr	r4, [r3, #12]
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	4a07      	ldr	r2, [pc, #28]	@ (8007900 <disk_write+0x3c>)
 80078e4:	4413      	add	r3, r2
 80078e6:	7a18      	ldrb	r0, [r3, #8]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	68b9      	ldr	r1, [r7, #8]
 80078ee:	47a0      	blx	r4
 80078f0:	4603      	mov	r3, r0
 80078f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	371c      	adds	r7, #28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd90      	pop	{r4, r7, pc}
 80078fe:	bf00      	nop
 8007900:	20000e14 	.word	0x20000e14

08007904 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3301      	adds	r3, #1
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007914:	89fb      	ldrh	r3, [r7, #14]
 8007916:	021b      	lsls	r3, r3, #8
 8007918:	b21a      	sxth	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	b21b      	sxth	r3, r3
 8007920:	4313      	orrs	r3, r2
 8007922:	b21b      	sxth	r3, r3
 8007924:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007926:	89fb      	ldrh	r3, [r7, #14]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3303      	adds	r3, #3
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	021b      	lsls	r3, r3, #8
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	3202      	adds	r2, #2
 800794c:	7812      	ldrb	r2, [r2, #0]
 800794e:	4313      	orrs	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	3201      	adds	r2, #1
 800795a:	7812      	ldrb	r2, [r2, #0]
 800795c:	4313      	orrs	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	021b      	lsls	r3, r3, #8
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	7812      	ldrb	r2, [r2, #0]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]
	return rv;
 800796c:	68fb      	ldr	r3, [r7, #12]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007984:	2300      	movs	r3, #0
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	e010      	b.n	80079ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800798a:	4a0d      	ldr	r2, [pc, #52]	@ (80079c0 <clear_lock+0x44>)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	4413      	add	r3, r2
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	429a      	cmp	r2, r3
 8007998:	d105      	bne.n	80079a6 <clear_lock+0x2a>
 800799a:	4a09      	ldr	r2, [pc, #36]	@ (80079c0 <clear_lock+0x44>)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	4413      	add	r3, r2
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3301      	adds	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d9eb      	bls.n	800798a <clear_lock+0xe>
	}
}
 80079b2:	bf00      	nop
 80079b4:	bf00      	nop
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	20000df4 	.word	0x20000df4

080079c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	78db      	ldrb	r3, [r3, #3]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d034      	beq.n	8007a42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	7858      	ldrb	r0, [r3, #1]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80079e8:	2301      	movs	r3, #1
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	f7ff ff6a 	bl	80078c4 <disk_write>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	73fb      	strb	r3, [r7, #15]
 80079fa:	e022      	b.n	8007a42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a1b      	ldr	r3, [r3, #32]
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	1ad2      	subs	r2, r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d217      	bcs.n	8007a42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	789b      	ldrb	r3, [r3, #2]
 8007a16:	613b      	str	r3, [r7, #16]
 8007a18:	e010      	b.n	8007a3c <sync_window+0x78>
					wsect += fs->fsize;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	4413      	add	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7858      	ldrb	r0, [r3, #1]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a2e:	2301      	movs	r3, #1
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	f7ff ff47 	bl	80078c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	613b      	str	r3, [r7, #16]
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d8eb      	bhi.n	8007a1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d01b      	beq.n	8007a9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff ffad 	bl	80079c4 <sync_window>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d113      	bne.n	8007a9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	7858      	ldrb	r0, [r3, #1]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007a7e:	2301      	movs	r3, #1
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	f7ff feff 	bl	8007884 <disk_read>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d004      	beq.n	8007a96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b087      	sub	sp, #28
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007aae:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d031      	beq.n	8007b20 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	617b      	str	r3, [r7, #20]
 8007ac2:	e002      	b.n	8007aca <get_ldnumber+0x24>
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	617b      	str	r3, [r7, #20]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d903      	bls.n	8007ada <get_ldnumber+0x34>
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b3a      	cmp	r3, #58	@ 0x3a
 8007ad8:	d1f4      	bne.n	8007ac4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b3a      	cmp	r3, #58	@ 0x3a
 8007ae0:	d11c      	bne.n	8007b1c <get_ldnumber+0x76>
			tp = *path;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	1c5a      	adds	r2, r3, #1
 8007aec:	60fa      	str	r2, [r7, #12]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	3b30      	subs	r3, #48	@ 0x30
 8007af2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2b09      	cmp	r3, #9
 8007af8:	d80e      	bhi.n	8007b18 <get_ldnumber+0x72>
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d10a      	bne.n	8007b18 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d107      	bne.n	8007b18 <get_ldnumber+0x72>
					vol = (int)i;
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	617b      	str	r3, [r7, #20]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	e002      	b.n	8007b22 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007b20:	693b      	ldr	r3, [r7, #16]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
	...

08007b30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	70da      	strb	r2, [r3, #3]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f04f 32ff 	mov.w	r2, #4294967295
 8007b46:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff ff7e 	bl	8007a4c <move_window>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <check_fs+0x2a>
 8007b56:	2304      	movs	r3, #4
 8007b58:	e038      	b.n	8007bcc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	3330      	adds	r3, #48	@ 0x30
 8007b5e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7ff fece 	bl	8007904 <ld_word>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d001      	beq.n	8007b78 <check_fs+0x48>
 8007b74:	2303      	movs	r3, #3
 8007b76:	e029      	b.n	8007bcc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007b7e:	2be9      	cmp	r3, #233	@ 0xe9
 8007b80:	d009      	beq.n	8007b96 <check_fs+0x66>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007b88:	2beb      	cmp	r3, #235	@ 0xeb
 8007b8a:	d11e      	bne.n	8007bca <check_fs+0x9a>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007b92:	2b90      	cmp	r3, #144	@ 0x90
 8007b94:	d119      	bne.n	8007bca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	3330      	adds	r3, #48	@ 0x30
 8007b9a:	3336      	adds	r3, #54	@ 0x36
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7ff fec9 	bl	8007934 <ld_dword>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8007bd4 <check_fs+0xa4>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d101      	bne.n	8007bb2 <check_fs+0x82>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	e00c      	b.n	8007bcc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	3330      	adds	r3, #48	@ 0x30
 8007bb6:	3352      	adds	r3, #82	@ 0x52
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7ff febb 	bl	8007934 <ld_dword>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	4a05      	ldr	r2, [pc, #20]	@ (8007bd8 <check_fs+0xa8>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d101      	bne.n	8007bca <check_fs+0x9a>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	e000      	b.n	8007bcc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007bca:	2302      	movs	r3, #2
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	00544146 	.word	0x00544146
 8007bd8:	33544146 	.word	0x33544146

08007bdc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b096      	sub	sp, #88	@ 0x58
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	4613      	mov	r3, r2
 8007be8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f7ff ff58 	bl	8007aa6 <get_ldnumber>
 8007bf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	da01      	bge.n	8007c02 <find_volume+0x26>
 8007bfe:	230b      	movs	r3, #11
 8007c00:	e22d      	b.n	800805e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c02:	4aa1      	ldr	r2, [pc, #644]	@ (8007e88 <find_volume+0x2ac>)
 8007c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <find_volume+0x3a>
 8007c12:	230c      	movs	r3, #12
 8007c14:	e223      	b.n	800805e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007c1c:	79fb      	ldrb	r3, [r7, #7]
 8007c1e:	f023 0301 	bic.w	r3, r3, #1
 8007c22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01a      	beq.n	8007c62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2e:	785b      	ldrb	r3, [r3, #1]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff fde5 	bl	8007800 <disk_status>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d10c      	bne.n	8007c62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d007      	beq.n	8007c5e <find_volume+0x82>
 8007c4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c52:	f003 0304 	and.w	r3, r3, #4
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007c5a:	230a      	movs	r3, #10
 8007c5c:	e1ff      	b.n	800805e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8007c5e:	2300      	movs	r3, #0
 8007c60:	e1fd      	b.n	800805e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c64:	2200      	movs	r2, #0
 8007c66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c72:	785b      	ldrb	r3, [r3, #1]
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff fddd 	bl	8007834 <disk_initialize>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007c80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e1e6      	b.n	800805e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d007      	beq.n	8007ca6 <find_volume+0xca>
 8007c96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007ca2:	230a      	movs	r3, #10
 8007ca4:	e1db      	b.n	800805e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007caa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007cac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007cae:	f7ff ff3f 	bl	8007b30 <check_fs>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007cb8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d149      	bne.n	8007d54 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cc4:	e01e      	b.n	8007d04 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007ccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cce:	011b      	lsls	r3, r3, #4
 8007cd0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007cd4:	4413      	add	r3, r2
 8007cd6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cda:	3304      	adds	r3, #4
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d006      	beq.n	8007cf0 <find_volume+0x114>
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce4:	3308      	adds	r3, #8
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff fe24 	bl	8007934 <ld_dword>
 8007cec:	4602      	mov	r2, r0
 8007cee:	e000      	b.n	8007cf2 <find_volume+0x116>
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	3358      	adds	r3, #88	@ 0x58
 8007cf8:	443b      	add	r3, r7
 8007cfa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007cfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d00:	3301      	adds	r3, #1
 8007d02:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d9dd      	bls.n	8007cc6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <find_volume+0x13e>
 8007d14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d16:	3b01      	subs	r3, #1
 8007d18:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	3358      	adds	r3, #88	@ 0x58
 8007d20:	443b      	add	r3, r7
 8007d22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d26:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d005      	beq.n	8007d3a <find_volume+0x15e>
 8007d2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007d30:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d32:	f7ff fefd 	bl	8007b30 <check_fs>
 8007d36:	4603      	mov	r3, r0
 8007d38:	e000      	b.n	8007d3c <find_volume+0x160>
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007d40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d905      	bls.n	8007d54 <find_volume+0x178>
 8007d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d9e2      	bls.n	8007d1a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007d54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	d101      	bne.n	8007d60 <find_volume+0x184>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e17e      	b.n	800805e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007d60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d901      	bls.n	8007d6c <find_volume+0x190>
 8007d68:	230d      	movs	r3, #13
 8007d6a:	e178      	b.n	800805e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6e:	3330      	adds	r3, #48	@ 0x30
 8007d70:	330b      	adds	r3, #11
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7ff fdc6 	bl	8007904 <ld_word>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d7e:	d001      	beq.n	8007d84 <find_volume+0x1a8>
 8007d80:	230d      	movs	r3, #13
 8007d82:	e16c      	b.n	800805e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d86:	3330      	adds	r3, #48	@ 0x30
 8007d88:	3316      	adds	r3, #22
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff fdba 	bl	8007904 <ld_word>
 8007d90:	4603      	mov	r3, r0
 8007d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d106      	bne.n	8007da8 <find_volume+0x1cc>
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9c:	3330      	adds	r3, #48	@ 0x30
 8007d9e:	3324      	adds	r3, #36	@ 0x24
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff fdc7 	bl	8007934 <ld_dword>
 8007da6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007daa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007dac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8007db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dba:	789b      	ldrb	r3, [r3, #2]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d005      	beq.n	8007dcc <find_volume+0x1f0>
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc2:	789b      	ldrb	r3, [r3, #2]
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d001      	beq.n	8007dcc <find_volume+0x1f0>
 8007dc8:	230d      	movs	r3, #13
 8007dca:	e148      	b.n	800805e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dce:	789b      	ldrb	r3, [r3, #2]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dd4:	fb02 f303 	mul.w	r3, r2, r3
 8007dd8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007de0:	461a      	mov	r2, r3
 8007de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de8:	895b      	ldrh	r3, [r3, #10]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d008      	beq.n	8007e00 <find_volume+0x224>
 8007dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df0:	895b      	ldrh	r3, [r3, #10]
 8007df2:	461a      	mov	r2, r3
 8007df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df6:	895b      	ldrh	r3, [r3, #10]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <find_volume+0x228>
 8007e00:	230d      	movs	r3, #13
 8007e02:	e12c      	b.n	800805e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e06:	3330      	adds	r3, #48	@ 0x30
 8007e08:	3311      	adds	r3, #17
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7ff fd7a 	bl	8007904 <ld_word>
 8007e10:	4603      	mov	r3, r0
 8007e12:	461a      	mov	r2, r3
 8007e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e16:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1a:	891b      	ldrh	r3, [r3, #8]
 8007e1c:	f003 030f 	and.w	r3, r3, #15
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <find_volume+0x24e>
 8007e26:	230d      	movs	r3, #13
 8007e28:	e119      	b.n	800805e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2c:	3330      	adds	r3, #48	@ 0x30
 8007e2e:	3313      	adds	r3, #19
 8007e30:	4618      	mov	r0, r3
 8007e32:	f7ff fd67 	bl	8007904 <ld_word>
 8007e36:	4603      	mov	r3, r0
 8007e38:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007e3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d106      	bne.n	8007e4e <find_volume+0x272>
 8007e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e42:	3330      	adds	r3, #48	@ 0x30
 8007e44:	3320      	adds	r3, #32
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff fd74 	bl	8007934 <ld_dword>
 8007e4c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e50:	3330      	adds	r3, #48	@ 0x30
 8007e52:	330e      	adds	r3, #14
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff fd55 	bl	8007904 <ld_word>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007e5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d101      	bne.n	8007e68 <find_volume+0x28c>
 8007e64:	230d      	movs	r3, #13
 8007e66:	e0fa      	b.n	800805e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007e68:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e6c:	4413      	add	r3, r2
 8007e6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e70:	8912      	ldrh	r2, [r2, #8]
 8007e72:	0912      	lsrs	r2, r2, #4
 8007e74:	b292      	uxth	r2, r2
 8007e76:	4413      	add	r3, r2
 8007e78:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007e7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d204      	bcs.n	8007e8c <find_volume+0x2b0>
 8007e82:	230d      	movs	r3, #13
 8007e84:	e0eb      	b.n	800805e <find_volume+0x482>
 8007e86:	bf00      	nop
 8007e88:	20000dec 	.word	0x20000dec
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007e8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e94:	8952      	ldrh	r2, [r2, #10]
 8007e96:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e9a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <find_volume+0x2ca>
 8007ea2:	230d      	movs	r3, #13
 8007ea4:	e0db      	b.n	800805e <find_volume+0x482>
		fmt = FS_FAT32;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eae:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d802      	bhi.n	8007ebc <find_volume+0x2e0>
 8007eb6:	2302      	movs	r3, #2
 8007eb8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d802      	bhi.n	8007ecc <find_volume+0x2f0>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ece:	1c9a      	adds	r2, r3, #2
 8007ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ed8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007eda:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ede:	441a      	add	r2, r3
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007ee4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee8:	441a      	add	r2, r3
 8007eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eec:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8007eee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d11e      	bne.n	8007f34 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef8:	3330      	adds	r3, #48	@ 0x30
 8007efa:	332a      	adds	r3, #42	@ 0x2a
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff fd01 	bl	8007904 <ld_word>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <find_volume+0x330>
 8007f08:	230d      	movs	r3, #13
 8007f0a:	e0a8      	b.n	800805e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0e:	891b      	ldrh	r3, [r3, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <find_volume+0x33c>
 8007f14:	230d      	movs	r3, #13
 8007f16:	e0a2      	b.n	800805e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f1a:	3330      	adds	r3, #48	@ 0x30
 8007f1c:	332c      	adds	r3, #44	@ 0x2c
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7ff fd08 	bl	8007934 <ld_dword>
 8007f24:	4602      	mov	r2, r0
 8007f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f28:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f32:	e01f      	b.n	8007f74 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f36:	891b      	ldrh	r3, [r3, #8]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <find_volume+0x364>
 8007f3c:	230d      	movs	r3, #13
 8007f3e:	e08e      	b.n	800805e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f42:	6a1a      	ldr	r2, [r3, #32]
 8007f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f46:	441a      	add	r2, r3
 8007f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007f4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d103      	bne.n	8007f5c <find_volume+0x380>
 8007f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	e00a      	b.n	8007f72 <find_volume+0x396>
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5e:	695a      	ldr	r2, [r3, #20]
 8007f60:	4613      	mov	r3, r2
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	4413      	add	r3, r2
 8007f66:	085a      	lsrs	r2, r3, #1
 8007f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007f72:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f76:	699a      	ldr	r2, [r3, #24]
 8007f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f7a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007f7e:	0a5b      	lsrs	r3, r3, #9
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d201      	bcs.n	8007f88 <find_volume+0x3ac>
 8007f84:	230d      	movs	r3, #13
 8007f86:	e06a      	b.n	800805e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8e:	611a      	str	r2, [r3, #16]
 8007f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f96:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f9a:	2280      	movs	r2, #128	@ 0x80
 8007f9c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007f9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007fa2:	2b03      	cmp	r3, #3
 8007fa4:	d149      	bne.n	800803a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa8:	3330      	adds	r3, #48	@ 0x30
 8007faa:	3330      	adds	r3, #48	@ 0x30
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff fca9 	bl	8007904 <ld_word>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d140      	bne.n	800803a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007fb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fba:	3301      	adds	r3, #1
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007fc0:	f7ff fd44 	bl	8007a4c <move_window>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d137      	bne.n	800803a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fcc:	2200      	movs	r2, #0
 8007fce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd2:	3330      	adds	r3, #48	@ 0x30
 8007fd4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff fc93 	bl	8007904 <ld_word>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d127      	bne.n	800803a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fec:	3330      	adds	r3, #48	@ 0x30
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7ff fca0 	bl	8007934 <ld_dword>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8008068 <find_volume+0x48c>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d11e      	bne.n	800803a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffe:	3330      	adds	r3, #48	@ 0x30
 8008000:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008004:	4618      	mov	r0, r3
 8008006:	f7ff fc95 	bl	8007934 <ld_dword>
 800800a:	4603      	mov	r3, r0
 800800c:	4a17      	ldr	r2, [pc, #92]	@ (800806c <find_volume+0x490>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d113      	bne.n	800803a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008014:	3330      	adds	r3, #48	@ 0x30
 8008016:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800801a:	4618      	mov	r0, r3
 800801c:	f7ff fc8a 	bl	8007934 <ld_dword>
 8008020:	4602      	mov	r2, r0
 8008022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008024:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008028:	3330      	adds	r3, #48	@ 0x30
 800802a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800802e:	4618      	mov	r0, r3
 8008030:	f7ff fc80 	bl	8007934 <ld_dword>
 8008034:	4602      	mov	r2, r0
 8008036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008038:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800803c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008040:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008042:	4b0b      	ldr	r3, [pc, #44]	@ (8008070 <find_volume+0x494>)
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	3301      	adds	r3, #1
 8008048:	b29a      	uxth	r2, r3
 800804a:	4b09      	ldr	r3, [pc, #36]	@ (8008070 <find_volume+0x494>)
 800804c:	801a      	strh	r2, [r3, #0]
 800804e:	4b08      	ldr	r3, [pc, #32]	@ (8008070 <find_volume+0x494>)
 8008050:	881a      	ldrh	r2, [r3, #0]
 8008052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008054:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008056:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008058:	f7ff fc90 	bl	800797c <clear_lock>
#endif
	return FR_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3758      	adds	r7, #88	@ 0x58
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	41615252 	.word	0x41615252
 800806c:	61417272 	.word	0x61417272
 8008070:	20000df0 	.word	0x20000df0

08008074 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	4613      	mov	r3, r2
 8008080:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008086:	f107 0310 	add.w	r3, r7, #16
 800808a:	4618      	mov	r0, r3
 800808c:	f7ff fd0b 	bl	8007aa6 <get_ldnumber>
 8008090:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	2b00      	cmp	r3, #0
 8008096:	da01      	bge.n	800809c <f_mount+0x28>
 8008098:	230b      	movs	r3, #11
 800809a:	e02b      	b.n	80080f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800809c:	4a17      	ldr	r2, [pc, #92]	@ (80080fc <f_mount+0x88>)
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d005      	beq.n	80080b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80080ac:	69b8      	ldr	r0, [r7, #24]
 80080ae:	f7ff fc65 	bl	800797c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	2200      	movs	r2, #0
 80080b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d002      	beq.n	80080c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	490d      	ldr	r1, [pc, #52]	@ (80080fc <f_mount+0x88>)
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <f_mount+0x66>
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d001      	beq.n	80080de <f_mount+0x6a>
 80080da:	2300      	movs	r3, #0
 80080dc:	e00a      	b.n	80080f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80080de:	f107 010c 	add.w	r1, r7, #12
 80080e2:	f107 0308 	add.w	r3, r7, #8
 80080e6:	2200      	movs	r2, #0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff fd77 	bl	8007bdc <find_volume>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3720      	adds	r7, #32
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20000dec 	.word	0x20000dec

08008100 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	4613      	mov	r3, r2
 800810c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800810e:	2301      	movs	r3, #1
 8008110:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008116:	4b1f      	ldr	r3, [pc, #124]	@ (8008194 <FATFS_LinkDriverEx+0x94>)
 8008118:	7a5b      	ldrb	r3, [r3, #9]
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b00      	cmp	r3, #0
 800811e:	d131      	bne.n	8008184 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008120:	4b1c      	ldr	r3, [pc, #112]	@ (8008194 <FATFS_LinkDriverEx+0x94>)
 8008122:	7a5b      	ldrb	r3, [r3, #9]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	461a      	mov	r2, r3
 8008128:	4b1a      	ldr	r3, [pc, #104]	@ (8008194 <FATFS_LinkDriverEx+0x94>)
 800812a:	2100      	movs	r1, #0
 800812c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800812e:	4b19      	ldr	r3, [pc, #100]	@ (8008194 <FATFS_LinkDriverEx+0x94>)
 8008130:	7a5b      	ldrb	r3, [r3, #9]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	4a17      	ldr	r2, [pc, #92]	@ (8008194 <FATFS_LinkDriverEx+0x94>)
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800813e:	4b15      	ldr	r3, [pc, #84]	@ (8008194 <FATFS_LinkDriverEx+0x94>)
 8008140:	7a5b      	ldrb	r3, [r3, #9]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	461a      	mov	r2, r3
 8008146:	4b13      	ldr	r3, [pc, #76]	@ (8008194 <FATFS_LinkDriverEx+0x94>)
 8008148:	4413      	add	r3, r2
 800814a:	79fa      	ldrb	r2, [r7, #7]
 800814c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800814e:	4b11      	ldr	r3, [pc, #68]	@ (8008194 <FATFS_LinkDriverEx+0x94>)
 8008150:	7a5b      	ldrb	r3, [r3, #9]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	1c5a      	adds	r2, r3, #1
 8008156:	b2d1      	uxtb	r1, r2
 8008158:	4a0e      	ldr	r2, [pc, #56]	@ (8008194 <FATFS_LinkDriverEx+0x94>)
 800815a:	7251      	strb	r1, [r2, #9]
 800815c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800815e:	7dbb      	ldrb	r3, [r7, #22]
 8008160:	3330      	adds	r3, #48	@ 0x30
 8008162:	b2da      	uxtb	r2, r3
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	3301      	adds	r3, #1
 800816c:	223a      	movs	r2, #58	@ 0x3a
 800816e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	3302      	adds	r3, #2
 8008174:	222f      	movs	r2, #47	@ 0x2f
 8008176:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	3303      	adds	r3, #3
 800817c:	2200      	movs	r2, #0
 800817e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008180:	2300      	movs	r3, #0
 8008182:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008184:	7dfb      	ldrb	r3, [r7, #23]
}
 8008186:	4618      	mov	r0, r3
 8008188:	371c      	adds	r7, #28
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	20000e14 	.word	0x20000e14

08008198 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80081a2:	2200      	movs	r2, #0
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff ffaa 	bl	8008100 <FATFS_LinkDriverEx>
 80081ac:	4603      	mov	r3, r0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <malloc>:
 80081b8:	4b02      	ldr	r3, [pc, #8]	@ (80081c4 <malloc+0xc>)
 80081ba:	4601      	mov	r1, r0
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	f000 b82d 	b.w	800821c <_malloc_r>
 80081c2:	bf00      	nop
 80081c4:	2000000c 	.word	0x2000000c

080081c8 <free>:
 80081c8:	4b02      	ldr	r3, [pc, #8]	@ (80081d4 <free+0xc>)
 80081ca:	4601      	mov	r1, r0
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	f000 b8f5 	b.w	80083bc <_free_r>
 80081d2:	bf00      	nop
 80081d4:	2000000c 	.word	0x2000000c

080081d8 <sbrk_aligned>:
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	4e0f      	ldr	r6, [pc, #60]	@ (8008218 <sbrk_aligned+0x40>)
 80081dc:	460c      	mov	r4, r1
 80081de:	6831      	ldr	r1, [r6, #0]
 80081e0:	4605      	mov	r5, r0
 80081e2:	b911      	cbnz	r1, 80081ea <sbrk_aligned+0x12>
 80081e4:	f000 f8ae 	bl	8008344 <_sbrk_r>
 80081e8:	6030      	str	r0, [r6, #0]
 80081ea:	4621      	mov	r1, r4
 80081ec:	4628      	mov	r0, r5
 80081ee:	f000 f8a9 	bl	8008344 <_sbrk_r>
 80081f2:	1c43      	adds	r3, r0, #1
 80081f4:	d103      	bne.n	80081fe <sbrk_aligned+0x26>
 80081f6:	f04f 34ff 	mov.w	r4, #4294967295
 80081fa:	4620      	mov	r0, r4
 80081fc:	bd70      	pop	{r4, r5, r6, pc}
 80081fe:	1cc4      	adds	r4, r0, #3
 8008200:	f024 0403 	bic.w	r4, r4, #3
 8008204:	42a0      	cmp	r0, r4
 8008206:	d0f8      	beq.n	80081fa <sbrk_aligned+0x22>
 8008208:	1a21      	subs	r1, r4, r0
 800820a:	4628      	mov	r0, r5
 800820c:	f000 f89a 	bl	8008344 <_sbrk_r>
 8008210:	3001      	adds	r0, #1
 8008212:	d1f2      	bne.n	80081fa <sbrk_aligned+0x22>
 8008214:	e7ef      	b.n	80081f6 <sbrk_aligned+0x1e>
 8008216:	bf00      	nop
 8008218:	20000e20 	.word	0x20000e20

0800821c <_malloc_r>:
 800821c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008220:	1ccd      	adds	r5, r1, #3
 8008222:	f025 0503 	bic.w	r5, r5, #3
 8008226:	3508      	adds	r5, #8
 8008228:	2d0c      	cmp	r5, #12
 800822a:	bf38      	it	cc
 800822c:	250c      	movcc	r5, #12
 800822e:	2d00      	cmp	r5, #0
 8008230:	4606      	mov	r6, r0
 8008232:	db01      	blt.n	8008238 <_malloc_r+0x1c>
 8008234:	42a9      	cmp	r1, r5
 8008236:	d904      	bls.n	8008242 <_malloc_r+0x26>
 8008238:	230c      	movs	r3, #12
 800823a:	6033      	str	r3, [r6, #0]
 800823c:	2000      	movs	r0, #0
 800823e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008242:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008318 <_malloc_r+0xfc>
 8008246:	f000 f869 	bl	800831c <__malloc_lock>
 800824a:	f8d8 3000 	ldr.w	r3, [r8]
 800824e:	461c      	mov	r4, r3
 8008250:	bb44      	cbnz	r4, 80082a4 <_malloc_r+0x88>
 8008252:	4629      	mov	r1, r5
 8008254:	4630      	mov	r0, r6
 8008256:	f7ff ffbf 	bl	80081d8 <sbrk_aligned>
 800825a:	1c43      	adds	r3, r0, #1
 800825c:	4604      	mov	r4, r0
 800825e:	d158      	bne.n	8008312 <_malloc_r+0xf6>
 8008260:	f8d8 4000 	ldr.w	r4, [r8]
 8008264:	4627      	mov	r7, r4
 8008266:	2f00      	cmp	r7, #0
 8008268:	d143      	bne.n	80082f2 <_malloc_r+0xd6>
 800826a:	2c00      	cmp	r4, #0
 800826c:	d04b      	beq.n	8008306 <_malloc_r+0xea>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	4639      	mov	r1, r7
 8008272:	4630      	mov	r0, r6
 8008274:	eb04 0903 	add.w	r9, r4, r3
 8008278:	f000 f864 	bl	8008344 <_sbrk_r>
 800827c:	4581      	cmp	r9, r0
 800827e:	d142      	bne.n	8008306 <_malloc_r+0xea>
 8008280:	6821      	ldr	r1, [r4, #0]
 8008282:	1a6d      	subs	r5, r5, r1
 8008284:	4629      	mov	r1, r5
 8008286:	4630      	mov	r0, r6
 8008288:	f7ff ffa6 	bl	80081d8 <sbrk_aligned>
 800828c:	3001      	adds	r0, #1
 800828e:	d03a      	beq.n	8008306 <_malloc_r+0xea>
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	442b      	add	r3, r5
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	f8d8 3000 	ldr.w	r3, [r8]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	bb62      	cbnz	r2, 80082f8 <_malloc_r+0xdc>
 800829e:	f8c8 7000 	str.w	r7, [r8]
 80082a2:	e00f      	b.n	80082c4 <_malloc_r+0xa8>
 80082a4:	6822      	ldr	r2, [r4, #0]
 80082a6:	1b52      	subs	r2, r2, r5
 80082a8:	d420      	bmi.n	80082ec <_malloc_r+0xd0>
 80082aa:	2a0b      	cmp	r2, #11
 80082ac:	d917      	bls.n	80082de <_malloc_r+0xc2>
 80082ae:	1961      	adds	r1, r4, r5
 80082b0:	42a3      	cmp	r3, r4
 80082b2:	6025      	str	r5, [r4, #0]
 80082b4:	bf18      	it	ne
 80082b6:	6059      	strne	r1, [r3, #4]
 80082b8:	6863      	ldr	r3, [r4, #4]
 80082ba:	bf08      	it	eq
 80082bc:	f8c8 1000 	streq.w	r1, [r8]
 80082c0:	5162      	str	r2, [r4, r5]
 80082c2:	604b      	str	r3, [r1, #4]
 80082c4:	4630      	mov	r0, r6
 80082c6:	f000 f82f 	bl	8008328 <__malloc_unlock>
 80082ca:	f104 000b 	add.w	r0, r4, #11
 80082ce:	1d23      	adds	r3, r4, #4
 80082d0:	f020 0007 	bic.w	r0, r0, #7
 80082d4:	1ac2      	subs	r2, r0, r3
 80082d6:	bf1c      	itt	ne
 80082d8:	1a1b      	subne	r3, r3, r0
 80082da:	50a3      	strne	r3, [r4, r2]
 80082dc:	e7af      	b.n	800823e <_malloc_r+0x22>
 80082de:	6862      	ldr	r2, [r4, #4]
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	bf0c      	ite	eq
 80082e4:	f8c8 2000 	streq.w	r2, [r8]
 80082e8:	605a      	strne	r2, [r3, #4]
 80082ea:	e7eb      	b.n	80082c4 <_malloc_r+0xa8>
 80082ec:	4623      	mov	r3, r4
 80082ee:	6864      	ldr	r4, [r4, #4]
 80082f0:	e7ae      	b.n	8008250 <_malloc_r+0x34>
 80082f2:	463c      	mov	r4, r7
 80082f4:	687f      	ldr	r7, [r7, #4]
 80082f6:	e7b6      	b.n	8008266 <_malloc_r+0x4a>
 80082f8:	461a      	mov	r2, r3
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	d1fb      	bne.n	80082f8 <_malloc_r+0xdc>
 8008300:	2300      	movs	r3, #0
 8008302:	6053      	str	r3, [r2, #4]
 8008304:	e7de      	b.n	80082c4 <_malloc_r+0xa8>
 8008306:	230c      	movs	r3, #12
 8008308:	6033      	str	r3, [r6, #0]
 800830a:	4630      	mov	r0, r6
 800830c:	f000 f80c 	bl	8008328 <__malloc_unlock>
 8008310:	e794      	b.n	800823c <_malloc_r+0x20>
 8008312:	6005      	str	r5, [r0, #0]
 8008314:	e7d6      	b.n	80082c4 <_malloc_r+0xa8>
 8008316:	bf00      	nop
 8008318:	20000e24 	.word	0x20000e24

0800831c <__malloc_lock>:
 800831c:	4801      	ldr	r0, [pc, #4]	@ (8008324 <__malloc_lock+0x8>)
 800831e:	f000 b84b 	b.w	80083b8 <__retarget_lock_acquire_recursive>
 8008322:	bf00      	nop
 8008324:	20000f64 	.word	0x20000f64

08008328 <__malloc_unlock>:
 8008328:	4801      	ldr	r0, [pc, #4]	@ (8008330 <__malloc_unlock+0x8>)
 800832a:	f000 b846 	b.w	80083ba <__retarget_lock_release_recursive>
 800832e:	bf00      	nop
 8008330:	20000f64 	.word	0x20000f64

08008334 <memset>:
 8008334:	4402      	add	r2, r0
 8008336:	4603      	mov	r3, r0
 8008338:	4293      	cmp	r3, r2
 800833a:	d100      	bne.n	800833e <memset+0xa>
 800833c:	4770      	bx	lr
 800833e:	f803 1b01 	strb.w	r1, [r3], #1
 8008342:	e7f9      	b.n	8008338 <memset+0x4>

08008344 <_sbrk_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4d06      	ldr	r5, [pc, #24]	@ (8008360 <_sbrk_r+0x1c>)
 8008348:	2300      	movs	r3, #0
 800834a:	4604      	mov	r4, r0
 800834c:	4608      	mov	r0, r1
 800834e:	602b      	str	r3, [r5, #0]
 8008350:	f7f9 faea 	bl	8001928 <_sbrk>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_sbrk_r+0x1a>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b103      	cbz	r3, 800835e <_sbrk_r+0x1a>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	20000f60 	.word	0x20000f60

08008364 <__errno>:
 8008364:	4b01      	ldr	r3, [pc, #4]	@ (800836c <__errno+0x8>)
 8008366:	6818      	ldr	r0, [r3, #0]
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	2000000c 	.word	0x2000000c

08008370 <__libc_init_array>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	4d0d      	ldr	r5, [pc, #52]	@ (80083a8 <__libc_init_array+0x38>)
 8008374:	4c0d      	ldr	r4, [pc, #52]	@ (80083ac <__libc_init_array+0x3c>)
 8008376:	1b64      	subs	r4, r4, r5
 8008378:	10a4      	asrs	r4, r4, #2
 800837a:	2600      	movs	r6, #0
 800837c:	42a6      	cmp	r6, r4
 800837e:	d109      	bne.n	8008394 <__libc_init_array+0x24>
 8008380:	4d0b      	ldr	r5, [pc, #44]	@ (80083b0 <__libc_init_array+0x40>)
 8008382:	4c0c      	ldr	r4, [pc, #48]	@ (80083b4 <__libc_init_array+0x44>)
 8008384:	f000 f864 	bl	8008450 <_init>
 8008388:	1b64      	subs	r4, r4, r5
 800838a:	10a4      	asrs	r4, r4, #2
 800838c:	2600      	movs	r6, #0
 800838e:	42a6      	cmp	r6, r4
 8008390:	d105      	bne.n	800839e <__libc_init_array+0x2e>
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	f855 3b04 	ldr.w	r3, [r5], #4
 8008398:	4798      	blx	r3
 800839a:	3601      	adds	r6, #1
 800839c:	e7ee      	b.n	800837c <__libc_init_array+0xc>
 800839e:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a2:	4798      	blx	r3
 80083a4:	3601      	adds	r6, #1
 80083a6:	e7f2      	b.n	800838e <__libc_init_array+0x1e>
 80083a8:	080084a8 	.word	0x080084a8
 80083ac:	080084a8 	.word	0x080084a8
 80083b0:	080084a8 	.word	0x080084a8
 80083b4:	080084ac 	.word	0x080084ac

080083b8 <__retarget_lock_acquire_recursive>:
 80083b8:	4770      	bx	lr

080083ba <__retarget_lock_release_recursive>:
 80083ba:	4770      	bx	lr

080083bc <_free_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4605      	mov	r5, r0
 80083c0:	2900      	cmp	r1, #0
 80083c2:	d041      	beq.n	8008448 <_free_r+0x8c>
 80083c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083c8:	1f0c      	subs	r4, r1, #4
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bfb8      	it	lt
 80083ce:	18e4      	addlt	r4, r4, r3
 80083d0:	f7ff ffa4 	bl	800831c <__malloc_lock>
 80083d4:	4a1d      	ldr	r2, [pc, #116]	@ (800844c <_free_r+0x90>)
 80083d6:	6813      	ldr	r3, [r2, #0]
 80083d8:	b933      	cbnz	r3, 80083e8 <_free_r+0x2c>
 80083da:	6063      	str	r3, [r4, #4]
 80083dc:	6014      	str	r4, [r2, #0]
 80083de:	4628      	mov	r0, r5
 80083e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083e4:	f7ff bfa0 	b.w	8008328 <__malloc_unlock>
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	d908      	bls.n	80083fe <_free_r+0x42>
 80083ec:	6820      	ldr	r0, [r4, #0]
 80083ee:	1821      	adds	r1, r4, r0
 80083f0:	428b      	cmp	r3, r1
 80083f2:	bf01      	itttt	eq
 80083f4:	6819      	ldreq	r1, [r3, #0]
 80083f6:	685b      	ldreq	r3, [r3, #4]
 80083f8:	1809      	addeq	r1, r1, r0
 80083fa:	6021      	streq	r1, [r4, #0]
 80083fc:	e7ed      	b.n	80083da <_free_r+0x1e>
 80083fe:	461a      	mov	r2, r3
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	b10b      	cbz	r3, 8008408 <_free_r+0x4c>
 8008404:	42a3      	cmp	r3, r4
 8008406:	d9fa      	bls.n	80083fe <_free_r+0x42>
 8008408:	6811      	ldr	r1, [r2, #0]
 800840a:	1850      	adds	r0, r2, r1
 800840c:	42a0      	cmp	r0, r4
 800840e:	d10b      	bne.n	8008428 <_free_r+0x6c>
 8008410:	6820      	ldr	r0, [r4, #0]
 8008412:	4401      	add	r1, r0
 8008414:	1850      	adds	r0, r2, r1
 8008416:	4283      	cmp	r3, r0
 8008418:	6011      	str	r1, [r2, #0]
 800841a:	d1e0      	bne.n	80083de <_free_r+0x22>
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	6053      	str	r3, [r2, #4]
 8008422:	4408      	add	r0, r1
 8008424:	6010      	str	r0, [r2, #0]
 8008426:	e7da      	b.n	80083de <_free_r+0x22>
 8008428:	d902      	bls.n	8008430 <_free_r+0x74>
 800842a:	230c      	movs	r3, #12
 800842c:	602b      	str	r3, [r5, #0]
 800842e:	e7d6      	b.n	80083de <_free_r+0x22>
 8008430:	6820      	ldr	r0, [r4, #0]
 8008432:	1821      	adds	r1, r4, r0
 8008434:	428b      	cmp	r3, r1
 8008436:	bf04      	itt	eq
 8008438:	6819      	ldreq	r1, [r3, #0]
 800843a:	685b      	ldreq	r3, [r3, #4]
 800843c:	6063      	str	r3, [r4, #4]
 800843e:	bf04      	itt	eq
 8008440:	1809      	addeq	r1, r1, r0
 8008442:	6021      	streq	r1, [r4, #0]
 8008444:	6054      	str	r4, [r2, #4]
 8008446:	e7ca      	b.n	80083de <_free_r+0x22>
 8008448:	bd38      	pop	{r3, r4, r5, pc}
 800844a:	bf00      	nop
 800844c:	20000e24 	.word	0x20000e24

08008450 <_init>:
 8008450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008452:	bf00      	nop
 8008454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008456:	bc08      	pop	{r3}
 8008458:	469e      	mov	lr, r3
 800845a:	4770      	bx	lr

0800845c <_fini>:
 800845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845e:	bf00      	nop
 8008460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008462:	bc08      	pop	{r3}
 8008464:	469e      	mov	lr, r3
 8008466:	4770      	bx	lr
