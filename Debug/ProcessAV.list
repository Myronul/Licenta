
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad14  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e9c  0800ae9c  0800ae9c  0000be9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd38  0800bd38  0000d068  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd38  0800bd38  0000cd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd40  0800bd40  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd40  0800bd40  0000cd40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd44  0800bd44  0000cd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800bd48  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d068  2**0
                  CONTENTS
 10 .bss          0000068c  20000068  20000068  0000d068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006f4  200006f4  0000d068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000198e5  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c9b  00000000  00000000  0002697d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  0002a618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001215  00000000  00000000  0002bd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025729  00000000  00000000  0002cfa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ec2a  00000000  00000000  000526ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6c54  00000000  00000000  000712f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00147f4c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000662c  00000000  00000000  00147f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0014e5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ae84 	.word	0x0800ae84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800ae84 	.word	0x0800ae84

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <play_audio_file>:

static uint32_t *buffer; /*Buffer pentru redare audio folosit static in fisier*/


void play_audio_file(char *path)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af02      	add	r7, sp, #8
 80004be:	6078      	str	r0, [r7, #4]
	 * se va iesi din while(1), resetand fisierul la 0 si oprind fluxul DMA
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 80004c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004c4:	f00a fb46 	bl	800ab54 <malloc>
 80004c8:	4603      	mov	r3, r0
 80004ca:	461a      	mov	r2, r3
 80004cc:	4b20      	ldr	r3, [pc, #128]	@ (8000550 <play_audio_file+0x98>)
 80004ce:	601a      	str	r2, [r3, #0]

	if(buffer == NULL)
 80004d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <play_audio_file+0x98>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d036      	beq.n	8000546 <play_audio_file+0x8e>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	read_audio_file(path, buffer); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 80004d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <play_audio_file+0x98>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4619      	mov	r1, r3
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f001 fb5e 	bl	8001ba0 <read_audio_file>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 80004e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <play_audio_file+0x98>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	2300      	movs	r3, #0
 80004ea:	9300      	str	r3, [sp, #0]
 80004ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80004f0:	2100      	movs	r1, #0
 80004f2:	4818      	ldr	r0, [pc, #96]	@ (8000554 <play_audio_file+0x9c>)
 80004f4:	f002 f944 	bl	8002780 <HAL_DAC_Start_DMA>

	while(1)
	{
		read_audio_file(path, buffer+1024);
 80004f8:	4b15      	ldr	r3, [pc, #84]	@ (8000550 <play_audio_file+0x98>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000500:	4619      	mov	r1, r3
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f001 fb4c 	bl	8001ba0 <read_audio_file>
		while(flagDmaDAC == 0);
 8000508:	bf00      	nop
 800050a:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <play_audio_file+0xa0>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	f083 0301 	eor.w	r3, r3, #1
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1f7      	bne.n	800050a <play_audio_file+0x52>
		flagDmaDAC = 0;
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <play_audio_file+0xa0>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
		read_audio_file(path, buffer);
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <play_audio_file+0x98>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4619      	mov	r1, r3
 8000526:	6878      	ldr	r0, [r7, #4]
 8000528:	f001 fb3a 	bl	8001ba0 <read_audio_file>
		while(flagDmaDAC == 0);
 800052c:	bf00      	nop
 800052e:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <play_audio_file+0xa0>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1f7      	bne.n	800052e <play_audio_file+0x76>
		flagDmaDAC = 0;
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <play_audio_file+0xa0>)
 8000540:	2200      	movs	r2, #0
 8000542:	701a      	strb	r2, [r3, #0]
		read_audio_file(path, buffer+1024);
 8000544:	e7d8      	b.n	80004f8 <play_audio_file+0x40>
		return;
 8000546:	bf00      	nop

	}

	free(buffer);

}
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000084 	.word	0x20000084
 8000554:	20000088 	.word	0x20000088
 8000558:	2000032a 	.word	0x2000032a

0800055c <convert_color_16_to_18>:

#include "graphics.h"


void convert_color_16_to_18(uint16_t color, uint8_t *pixel)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	6039      	str	r1, [r7, #0]
 8000566:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8000568:	88fb      	ldrh	r3, [r7, #6]
 800056a:	0adb      	lsrs	r3, r3, #11
 800056c:	b29b      	uxth	r3, r3
 800056e:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	115b      	asrs	r3, r3, #5
 8000574:	b2db      	uxtb	r3, r3
 8000576:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800057a:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	f003 031f 	and.w	r3, r3, #31
 8000584:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 8000586:	7bfa      	ldrb	r2, [r7, #15]
 8000588:	4613      	mov	r3, r2
 800058a:	019b      	lsls	r3, r3, #6
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <convert_color_16_to_18+0x8c>)
 8000590:	fb82 1203 	smull	r1, r2, r2, r3
 8000594:	441a      	add	r2, r3
 8000596:	1112      	asrs	r2, r2, #4
 8000598:	17db      	asrs	r3, r3, #31
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	b2db      	uxtb	r3, r3
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 80005a2:	7bbb      	ldrb	r3, [r7, #14]
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 80005a8:	7b7a      	ldrb	r2, [r7, #13]
 80005aa:	4613      	mov	r3, r2
 80005ac:	019b      	lsls	r3, r3, #6
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	4a0d      	ldr	r2, [pc, #52]	@ (80005e8 <convert_color_16_to_18+0x8c>)
 80005b2:	fb82 1203 	smull	r1, r2, r2, r3
 80005b6:	441a      	add	r2, r3
 80005b8:	1112      	asrs	r2, r2, #4
 80005ba:	17db      	asrs	r3, r3, #31
 80005bc:	1ad3      	subs	r3, r2, r3
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	7bfa      	ldrb	r2, [r7, #15]
 80005c8:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	7bba      	ldrb	r2, [r7, #14]
 80005d0:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	3302      	adds	r3, #2
 80005d6:	7b7a      	ldrb	r2, [r7, #13]
 80005d8:	701a      	strb	r2, [r3, #0]

}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	84210843 	.word	0x84210843

080005ec <write_color>:


void write_color(uint16_t color)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 80005f6:	f107 020c 	add.w	r2, r7, #12
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	4611      	mov	r1, r2
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ffac 	bl	800055c <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000604:	f107 010c 	add.w	r1, r7, #12
 8000608:	f04f 33ff 	mov.w	r3, #4294967295
 800060c:	2203      	movs	r2, #3
 800060e:	4803      	ldr	r0, [pc, #12]	@ (800061c <write_color+0x30>)
 8000610:	f004 fce1 	bl	8004fd6 <HAL_SPI_Transmit>


}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000180 	.word	0x20000180

08000620 <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b085      	sub	sp, #20
 8000624:	af02      	add	r7, sp, #8
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
 800062a:	460b      	mov	r3, r1
 800062c:	80bb      	strh	r3, [r7, #4]
 800062e:	4613      	mov	r3, r2
 8000630:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 8000632:	88bb      	ldrh	r3, [r7, #4]
 8000634:	88fa      	ldrh	r2, [r7, #6]
 8000636:	88b9      	ldrh	r1, [r7, #4]
 8000638:	88f8      	ldrh	r0, [r7, #6]
 800063a:	2477      	movs	r4, #119	@ 0x77
 800063c:	9400      	str	r4, [sp, #0]
 800063e:	f000 fc65 	bl	8000f0c <set_adress_window>

	DC_DATA();
 8000642:	2201      	movs	r2, #1
 8000644:	2108      	movs	r1, #8
 8000646:	480a      	ldr	r0, [pc, #40]	@ (8000670 <draw_pixel+0x50>)
 8000648:	f002 fff2 	bl	8003630 <HAL_GPIO_WritePin>
	CS_A();
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	4807      	ldr	r0, [pc, #28]	@ (8000670 <draw_pixel+0x50>)
 8000652:	f002 ffed 	bl	8003630 <HAL_GPIO_WritePin>

	write_color(color);
 8000656:	887b      	ldrh	r3, [r7, #2]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffc7 	bl	80005ec <write_color>

	CS_D();
 800065e:	2201      	movs	r2, #1
 8000660:	2110      	movs	r1, #16
 8000662:	4803      	ldr	r0, [pc, #12]	@ (8000670 <draw_pixel+0x50>)
 8000664:	f002 ffe4 	bl	8003630 <HAL_GPIO_WritePin>

}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	40020c00 	.word	0x40020c00

08000674 <fill_screen1>:




void fill_screen1(uint16_t color)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
	 * Input: Culoare pe 16 biti
	 * Output: Void
	 */
	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 800067e:	88fb      	ldrh	r3, [r7, #6]
 8000680:	0adb      	lsrs	r3, r3, #11
 8000682:	b29b      	uxth	r3, r3
 8000684:	74fb      	strb	r3, [r7, #19]
	g = (color & 0x07E0) >> 5;
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	115b      	asrs	r3, r3, #5
 800068a:	b2db      	uxtb	r3, r3
 800068c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000690:	74bb      	strb	r3, [r7, #18]
	b = color & 0x001F;
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	f003 031f 	and.w	r3, r3, #31
 800069a:	747b      	strb	r3, [r7, #17]

	r = (255*r)/31;
 800069c:	7cfa      	ldrb	r2, [r7, #19]
 800069e:	4613      	mov	r3, r2
 80006a0:	021b      	lsls	r3, r3, #8
 80006a2:	1a9b      	subs	r3, r3, r2
 80006a4:	4a3a      	ldr	r2, [pc, #232]	@ (8000790 <fill_screen1+0x11c>)
 80006a6:	fb82 1203 	smull	r1, r2, r2, r3
 80006aa:	441a      	add	r2, r3
 80006ac:	1112      	asrs	r2, r2, #4
 80006ae:	17db      	asrs	r3, r3, #31
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	74fb      	strb	r3, [r7, #19]
	g = (255*g)/63;
 80006b4:	7cba      	ldrb	r2, [r7, #18]
 80006b6:	4613      	mov	r3, r2
 80006b8:	021b      	lsls	r3, r3, #8
 80006ba:	1a9b      	subs	r3, r3, r2
 80006bc:	4a35      	ldr	r2, [pc, #212]	@ (8000794 <fill_screen1+0x120>)
 80006be:	fb82 1203 	smull	r1, r2, r2, r3
 80006c2:	441a      	add	r2, r3
 80006c4:	1152      	asrs	r2, r2, #5
 80006c6:	17db      	asrs	r3, r3, #31
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	74bb      	strb	r3, [r7, #18]
	b = (255*b)/31;
 80006cc:	7c7a      	ldrb	r2, [r7, #17]
 80006ce:	4613      	mov	r3, r2
 80006d0:	021b      	lsls	r3, r3, #8
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000790 <fill_screen1+0x11c>)
 80006d6:	fb82 1203 	smull	r1, r2, r2, r3
 80006da:	441a      	add	r2, r3
 80006dc:	1112      	asrs	r2, r2, #4
 80006de:	17db      	asrs	r3, r3, #31
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	747b      	strb	r3, [r7, #17]

	uint8_t pixel[] = {r,g,b};
 80006e4:	7cfb      	ldrb	r3, [r7, #19]
 80006e6:	723b      	strb	r3, [r7, #8]
 80006e8:	7cbb      	ldrb	r3, [r7, #18]
 80006ea:	727b      	strb	r3, [r7, #9]
 80006ec:	7c7b      	ldrb	r3, [r7, #17]
 80006ee:	72bb      	strb	r3, [r7, #10]
	uint8_t *line = malloc(320*sizeof(pixel));
 80006f0:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 80006f4:	f00a fa2e 	bl	800ab54 <malloc>
 80006f8:	4603      	mov	r3, r0
 80006fa:	60fb      	str	r3, [r7, #12]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 80006fc:	2377      	movs	r3, #119	@ 0x77
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	f240 13df 	movw	r3, #479	@ 0x1df
 8000704:	f240 123f 	movw	r2, #319	@ 0x13f
 8000708:	2100      	movs	r1, #0
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fbfe 	bl	8000f0c <set_adress_window>

	DC_DATA();
 8000710:	2201      	movs	r2, #1
 8000712:	2108      	movs	r1, #8
 8000714:	4820      	ldr	r0, [pc, #128]	@ (8000798 <fill_screen1+0x124>)
 8000716:	f002 ff8b 	bl	8003630 <HAL_GPIO_WritePin>
	CS_A();
 800071a:	2200      	movs	r2, #0
 800071c:	2110      	movs	r1, #16
 800071e:	481e      	ldr	r0, [pc, #120]	@ (8000798 <fill_screen1+0x124>)
 8000720:	f002 ff86 	bl	8003630 <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 8000724:	2300      	movs	r3, #0
 8000726:	82fb      	strh	r3, [r7, #22]
 8000728:	e00f      	b.n	800074a <fill_screen1+0xd6>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 800072a:	8afa      	ldrh	r2, [r7, #22]
 800072c:	4613      	mov	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4413      	add	r3, r2
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	4413      	add	r3, r2
 8000736:	461a      	mov	r2, r3
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	8819      	ldrh	r1, [r3, #0]
 800073e:	789b      	ldrb	r3, [r3, #2]
 8000740:	8011      	strh	r1, [r2, #0]
 8000742:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 8000744:	8afb      	ldrh	r3, [r7, #22]
 8000746:	3301      	adds	r3, #1
 8000748:	82fb      	strh	r3, [r7, #22]
 800074a:	8afb      	ldrh	r3, [r7, #22]
 800074c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000750:	d3eb      	bcc.n	800072a <fill_screen1+0xb6>
	}

	for(uint16_t y=0; y<480; y++)
 8000752:	2300      	movs	r3, #0
 8000754:	82bb      	strh	r3, [r7, #20]
 8000756:	e00a      	b.n	800076e <fill_screen1+0xfa>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000760:	68f9      	ldr	r1, [r7, #12]
 8000762:	480e      	ldr	r0, [pc, #56]	@ (800079c <fill_screen1+0x128>)
 8000764:	f004 fc37 	bl	8004fd6 <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 8000768:	8abb      	ldrh	r3, [r7, #20]
 800076a:	3301      	adds	r3, #1
 800076c:	82bb      	strh	r3, [r7, #20]
 800076e:	8abb      	ldrh	r3, [r7, #20]
 8000770:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000774:	d3f0      	bcc.n	8000758 <fill_screen1+0xe4>

	}

	free(line);
 8000776:	68f8      	ldr	r0, [r7, #12]
 8000778:	f00a f9f4 	bl	800ab64 <free>

	CS_D();
 800077c:	2201      	movs	r2, #1
 800077e:	2110      	movs	r1, #16
 8000780:	4805      	ldr	r0, [pc, #20]	@ (8000798 <fill_screen1+0x124>)
 8000782:	f002 ff55 	bl	8003630 <HAL_GPIO_WritePin>

}
 8000786:	bf00      	nop
 8000788:	3718      	adds	r7, #24
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	84210843 	.word	0x84210843
 8000794:	82082083 	.word	0x82082083
 8000798:	40020c00 	.word	0x40020c00
 800079c:	20000180 	.word	0x20000180

080007a0 <fill_screen2>:


void fill_screen2(uint16_t color)
{
 80007a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007a4:	b08f      	sub	sp, #60	@ 0x3c
 80007a6:	af02      	add	r7, sp, #8
 80007a8:	4603      	mov	r3, r0
 80007aa:	80fb      	strh	r3, [r7, #6]
 80007ac:	466b      	mov	r3, sp
 80007ae:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 80007b0:	2377      	movs	r3, #119	@ 0x77
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	f240 13df 	movw	r3, #479	@ 0x1df
 80007b8:	f240 123f 	movw	r2, #319	@ 0x13f
 80007bc:	2100      	movs	r1, #0
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 fba4 	bl	8000f0c <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 80007c4:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 80007ca:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 80007ce:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80007d0:	88fb      	ldrh	r3, [r7, #6]
 80007d2:	0adb      	lsrs	r3, r3, #11
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 80007d8:	88fb      	ldrh	r3, [r7, #6]
 80007da:	115b      	asrs	r3, r3, #5
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80007e2:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 80007e4:	88fb      	ldrh	r3, [r7, #6]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f003 031f 	and.w	r3, r3, #31
 80007ec:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 80007ee:	7ffa      	ldrb	r2, [r7, #31]
 80007f0:	4613      	mov	r3, r2
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	1a9b      	subs	r3, r3, r2
 80007f6:	4a4f      	ldr	r2, [pc, #316]	@ (8000934 <fill_screen2+0x194>)
 80007f8:	fb82 1203 	smull	r1, r2, r2, r3
 80007fc:	441a      	add	r2, r3
 80007fe:	1112      	asrs	r2, r2, #4
 8000800:	17db      	asrs	r3, r3, #31
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 8000806:	7fba      	ldrb	r2, [r7, #30]
 8000808:	4613      	mov	r3, r2
 800080a:	021b      	lsls	r3, r3, #8
 800080c:	1a9b      	subs	r3, r3, r2
 800080e:	4a4a      	ldr	r2, [pc, #296]	@ (8000938 <fill_screen2+0x198>)
 8000810:	fb82 1203 	smull	r1, r2, r2, r3
 8000814:	441a      	add	r2, r3
 8000816:	1152      	asrs	r2, r2, #5
 8000818:	17db      	asrs	r3, r3, #31
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 800081e:	7f7a      	ldrb	r2, [r7, #29]
 8000820:	4613      	mov	r3, r2
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	1a9b      	subs	r3, r3, r2
 8000826:	4a43      	ldr	r2, [pc, #268]	@ (8000934 <fill_screen2+0x194>)
 8000828:	fb82 1203 	smull	r1, r2, r2, r3
 800082c:	441a      	add	r2, r3
 800082e:	1112      	asrs	r2, r2, #4
 8000830:	17db      	asrs	r3, r3, #31
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 8000836:	2201      	movs	r2, #1
 8000838:	2108      	movs	r1, #8
 800083a:	4840      	ldr	r0, [pc, #256]	@ (800093c <fill_screen2+0x19c>)
 800083c:	f002 fef8 	bl	8003630 <HAL_GPIO_WritePin>
	CS_A();
 8000840:	2200      	movs	r2, #0
 8000842:	2110      	movs	r1, #16
 8000844:	483d      	ldr	r0, [pc, #244]	@ (800093c <fill_screen2+0x19c>)
 8000846:	f002 fef3 	bl	8003630 <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 800084a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800084c:	460b      	mov	r3, r1
 800084e:	3b01      	subs	r3, #1
 8000850:	61bb      	str	r3, [r7, #24]
 8000852:	2300      	movs	r3, #0
 8000854:	4688      	mov	r8, r1
 8000856:	4699      	mov	r9, r3
 8000858:	f04f 0200 	mov.w	r2, #0
 800085c:	f04f 0300 	mov.w	r3, #0
 8000860:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000864:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000868:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800086c:	2300      	movs	r3, #0
 800086e:	460c      	mov	r4, r1
 8000870:	461d      	mov	r5, r3
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	f04f 0300 	mov.w	r3, #0
 800087a:	00eb      	lsls	r3, r5, #3
 800087c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000880:	00e2      	lsls	r2, r4, #3
 8000882:	1dcb      	adds	r3, r1, #7
 8000884:	08db      	lsrs	r3, r3, #3
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	ebad 0d03 	sub.w	sp, sp, r3
 800088c:	ab02      	add	r3, sp, #8
 800088e:	3300      	adds	r3, #0
 8000890:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 8000892:	2300      	movs	r3, #0
 8000894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000896:	e011      	b.n	80008bc <fill_screen2+0x11c>
	{
		frame[j] = r;
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800089c:	4413      	add	r3, r2
 800089e:	7ffa      	ldrb	r2, [r7, #31]
 80008a0:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 80008a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008a4:	3301      	adds	r3, #1
 80008a6:	697a      	ldr	r2, [r7, #20]
 80008a8:	7fb9      	ldrb	r1, [r7, #30]
 80008aa:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 80008ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ae:	3302      	adds	r3, #2
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	7f79      	ldrb	r1, [r7, #29]
 80008b4:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 80008b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008b8:	3303      	adds	r3, #3
 80008ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80008be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d3e9      	bcc.n	8000898 <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 80008c4:	6a3a      	ldr	r2, [r7, #32]
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 80008d8:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <fill_screen2+0x1a0>)
 80008da:	2201      	movs	r2, #1
 80008dc:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008e2:	e012      	b.n	800090a <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 80008e4:	bf00      	nop
 80008e6:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <fill_screen2+0x1a0>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d0fa      	beq.n	80008e6 <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 80008f0:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <fill_screen2+0x1a0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 80008f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	461a      	mov	r2, r3
 80008fc:	6979      	ldr	r1, [r7, #20]
 80008fe:	4811      	ldr	r0, [pc, #68]	@ (8000944 <fill_screen2+0x1a4>)
 8000900:	f004 ff70 	bl	80057e4 <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 8000904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000906:	3301      	adds	r3, #1
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
 800090a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	429a      	cmp	r2, r3
 8000910:	d3e8      	bcc.n	80008e4 <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 8000912:	bf00      	nop
 8000914:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <fill_screen2+0x1a0>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0fa      	beq.n	8000914 <fill_screen2+0x174>
	CS_D();
 800091e:	2201      	movs	r2, #1
 8000920:	2110      	movs	r1, #16
 8000922:	4806      	ldr	r0, [pc, #24]	@ (800093c <fill_screen2+0x19c>)
 8000924:	f002 fe84 	bl	8003630 <HAL_GPIO_WritePin>
 8000928:	46b5      	mov	sp, r6
}
 800092a:	bf00      	nop
 800092c:	3734      	adds	r7, #52	@ 0x34
 800092e:	46bd      	mov	sp, r7
 8000930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000934:	84210843 	.word	0x84210843
 8000938:	82082083 	.word	0x82082083
 800093c:	40020c00 	.word	0x40020c00
 8000940:	20000328 	.word	0x20000328
 8000944:	20000180 	.word	0x20000180

08000948 <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b089      	sub	sp, #36	@ 0x24
 800094c:	af02      	add	r7, sp, #8
 800094e:	4604      	mov	r4, r0
 8000950:	4608      	mov	r0, r1
 8000952:	4611      	mov	r1, r2
 8000954:	461a      	mov	r2, r3
 8000956:	4623      	mov	r3, r4
 8000958:	80fb      	strh	r3, [r7, #6]
 800095a:	4603      	mov	r3, r0
 800095c:	80bb      	strh	r3, [r7, #4]
 800095e:	460b      	mov	r3, r1
 8000960:	70fb      	strb	r3, [r7, #3]
 8000962:	4613      	mov	r3, r2
 8000964:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 8000966:	4b3a      	ldr	r3, [pc, #232]	@ (8000a50 <print_character+0x108>)
 8000968:	889a      	ldrh	r2, [r3, #4]
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	4413      	add	r3, r2
 800096e:	b29b      	uxth	r3, r3
 8000970:	3b01      	subs	r3, #1
 8000972:	b29c      	uxth	r4, r3
 8000974:	4b36      	ldr	r3, [pc, #216]	@ (8000a50 <print_character+0x108>)
 8000976:	88da      	ldrh	r2, [r3, #6]
 8000978:	88bb      	ldrh	r3, [r7, #4]
 800097a:	4413      	add	r3, r2
 800097c:	b29b      	uxth	r3, r3
 800097e:	3b01      	subs	r3, #1
 8000980:	b29b      	uxth	r3, r3
 8000982:	88b9      	ldrh	r1, [r7, #4]
 8000984:	88f8      	ldrh	r0, [r7, #6]
 8000986:	2277      	movs	r2, #119	@ 0x77
 8000988:	9200      	str	r2, [sp, #0]
 800098a:	4622      	mov	r2, r4
 800098c:	f000 fabe 	bl	8000f0c <set_adress_window>

	uint16_t mask = 0x8000;
 8000990:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000994:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 800099a:	f107 020c 	add.w	r2, r7, #12
 800099e:	883b      	ldrh	r3, [r7, #0]
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fdda 	bl	800055c <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 80009a8:	f107 0208 	add.w	r2, r7, #8
 80009ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fdd3 	bl	800055c <convert_color_16_to_18>


	DC_DATA();
 80009b6:	2201      	movs	r2, #1
 80009b8:	2108      	movs	r1, #8
 80009ba:	4826      	ldr	r0, [pc, #152]	@ (8000a54 <print_character+0x10c>)
 80009bc:	f002 fe38 	bl	8003630 <HAL_GPIO_WritePin>
	CS_A();
 80009c0:	2200      	movs	r2, #0
 80009c2:	2110      	movs	r1, #16
 80009c4:	4823      	ldr	r0, [pc, #140]	@ (8000a54 <print_character+0x10c>)
 80009c6:	f002 fe33 	bl	8003630 <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 80009ca:	2300      	movs	r3, #0
 80009cc:	75fb      	strb	r3, [r7, #23]
 80009ce:	e030      	b.n	8000a32 <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 80009d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a50 <print_character+0x108>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	3b20      	subs	r3, #32
 80009d8:	491d      	ldr	r1, [pc, #116]	@ (8000a50 <print_character+0x108>)
 80009da:	88c9      	ldrh	r1, [r1, #6]
 80009dc:	fb03 f101 	mul.w	r1, r3, r1
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	440b      	add	r3, r1
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 80009ec:	2300      	movs	r3, #0
 80009ee:	75bb      	strb	r3, [r7, #22]
 80009f0:	e016      	b.n	8000a20 <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 80009f2:	8a7a      	ldrh	r2, [r7, #18]
 80009f4:	7dbb      	ldrb	r3, [r7, #22]
 80009f6:	409a      	lsls	r2, r3
 80009f8:	8abb      	ldrh	r3, [r7, #20]
 80009fa:	4013      	ands	r3, r2
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d006      	beq.n	8000a0e <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2103      	movs	r1, #3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 f904 	bl	8000c14 <LCD_send_data_multi>
 8000a0c:	e005      	b.n	8000a1a <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	2103      	movs	r1, #3
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 f8fd 	bl	8000c14 <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 8000a1a:	7dbb      	ldrb	r3, [r7, #22]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	75bb      	strb	r3, [r7, #22]
 8000a20:	7dbb      	ldrb	r3, [r7, #22]
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <print_character+0x108>)
 8000a26:	889b      	ldrh	r3, [r3, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d3e2      	bcc.n	80009f2 <print_character+0xaa>
	for(i=0; i<font.height; i++)
 8000a2c:	7dfb      	ldrb	r3, [r7, #23]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	75fb      	strb	r3, [r7, #23]
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <print_character+0x108>)
 8000a38:	88db      	ldrh	r3, [r3, #6]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d3c8      	bcc.n	80009d0 <print_character+0x88>
			}
		}
	}

	CS_D();
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2110      	movs	r1, #16
 8000a42:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <print_character+0x10c>)
 8000a44:	f002 fdf4 	bl	8003630 <HAL_GPIO_WritePin>

}
 8000a48:	bf00      	nop
 8000a4a:	371c      	adds	r7, #28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	20000000 	.word	0x20000000
 8000a54:	40020c00 	.word	0x40020c00

08000a58 <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint8_t n, uint16_t fontColor, uint16_t backColor)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b089      	sub	sp, #36	@ 0x24
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	60ba      	str	r2, [r7, #8]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4603      	mov	r3, r0
 8000a64:	81fb      	strh	r3, [r7, #14]
 8000a66:	460b      	mov	r3, r1
 8000a68:	81bb      	strh	r3, [r7, #12]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	71fb      	strb	r3, [r7, #7]

	char *temp = string;
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	617b      	str	r3, [r7, #20]

	while(string<(temp+n))
 8000a72:	e027      	b.n	8000ac4 <print_string+0x6c>
	{
		if(x + font.width > 320)
 8000a74:	89fb      	ldrh	r3, [r7, #14]
 8000a76:	4a19      	ldr	r2, [pc, #100]	@ (8000adc <print_string+0x84>)
 8000a78:	8892      	ldrh	r2, [r2, #4]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a80:	dd07      	ble.n	8000a92 <print_string+0x3a>
		{
			x = font.width;
 8000a82:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <print_string+0x84>)
 8000a84:	889b      	ldrh	r3, [r3, #4]
 8000a86:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <print_string+0x84>)
 8000a8a:	88da      	ldrh	r2, [r3, #6]
 8000a8c:	89bb      	ldrh	r3, [r7, #12]
 8000a8e:	4413      	add	r3, r2
 8000a90:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 8000a92:	89bb      	ldrh	r3, [r7, #12]
 8000a94:	4a11      	ldr	r2, [pc, #68]	@ (8000adc <print_string+0x84>)
 8000a96:	88d2      	ldrh	r2, [r2, #6]
 8000a98:	4413      	add	r3, r2
 8000a9a:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a9e:	dc18      	bgt.n	8000ad2 <print_string+0x7a>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000aa6:	89b9      	ldrh	r1, [r7, #12]
 8000aa8:	89f8      	ldrh	r0, [r7, #14]
 8000aaa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	4623      	mov	r3, r4
 8000ab0:	f7ff ff4a 	bl	8000948 <print_character>
		string++;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <print_string+0x84>)
 8000abc:	889a      	ldrh	r2, [r3, #4]
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	81fb      	strh	r3, [r7, #14]
	while(string<(temp+n))
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	4413      	add	r3, r2
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d3d1      	bcc.n	8000a74 <print_string+0x1c>
 8000ad0:	e000      	b.n	8000ad4 <print_string+0x7c>
			return;
 8000ad2:	bf00      	nop
	}

}
 8000ad4:	371c      	adds	r7, #28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd90      	pop	{r4, r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000000 	.word	0x20000000

08000ae0 <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b087      	sub	sp, #28
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	4608      	mov	r0, r1
 8000aea:	4611      	mov	r1, r2
 8000aec:	461a      	mov	r2, r3
 8000aee:	4623      	mov	r3, r4
 8000af0:	80fb      	strh	r3, [r7, #6]
 8000af2:	4603      	mov	r3, r0
 8000af4:	80bb      	strh	r3, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	807b      	strh	r3, [r7, #2]
 8000afa:	4613      	mov	r3, r2
 8000afc:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8000afe:	88fa      	ldrh	r2, [r7, #6]
 8000b00:	887b      	ldrh	r3, [r7, #2]
 8000b02:	4413      	add	r3, r2
 8000b04:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	88bb      	ldrh	r3, [r7, #4]
 8000b0e:	88b9      	ldrh	r1, [r7, #4]
 8000b10:	88f8      	ldrh	r0, [r7, #6]
 8000b12:	2477      	movs	r4, #119	@ 0x77
 8000b14:	9400      	str	r4, [sp, #0]
 8000b16:	f000 f9f9 	bl	8000f0c <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000b1a:	f107 0208 	add.w	r2, r7, #8
 8000b1e:	883b      	ldrh	r3, [r7, #0]
 8000b20:	4611      	mov	r1, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fd1a 	bl	800055c <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	81fb      	strh	r3, [r7, #14]
 8000b2c:	e008      	b.n	8000b40 <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	2103      	movs	r1, #3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f86d 	bl	8000c14 <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 8000b3a:	89fb      	ldrh	r3, [r7, #14]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	81fb      	strh	r3, [r7, #14]
 8000b40:	89fa      	ldrh	r2, [r7, #14]
 8000b42:	8879      	ldrh	r1, [r7, #2]
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	1acb      	subs	r3, r1, r3
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dbf0      	blt.n	8000b2e <draw_horizontal_line+0x4e>
	}


}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd90      	pop	{r4, r7, pc}

08000b56 <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000b56:	b590      	push	{r4, r7, lr}
 8000b58:	b087      	sub	sp, #28
 8000b5a:	af02      	add	r7, sp, #8
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	4608      	mov	r0, r1
 8000b60:	4611      	mov	r1, r2
 8000b62:	461a      	mov	r2, r3
 8000b64:	4623      	mov	r3, r4
 8000b66:	80fb      	strh	r3, [r7, #6]
 8000b68:	4603      	mov	r3, r0
 8000b6a:	80bb      	strh	r3, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
 8000b70:	4613      	mov	r3, r2
 8000b72:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 8000b74:	88ba      	ldrh	r2, [r7, #4]
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	4413      	add	r3, r2
 8000b7a:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8000b7c:	887b      	ldrh	r3, [r7, #2]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	88fa      	ldrh	r2, [r7, #6]
 8000b84:	88b9      	ldrh	r1, [r7, #4]
 8000b86:	88f8      	ldrh	r0, [r7, #6]
 8000b88:	2477      	movs	r4, #119	@ 0x77
 8000b8a:	9400      	str	r4, [sp, #0]
 8000b8c:	f000 f9be 	bl	8000f0c <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000b90:	f107 0208 	add.w	r2, r7, #8
 8000b94:	883b      	ldrh	r3, [r7, #0]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fcdf 	bl	800055c <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	81fb      	strh	r3, [r7, #14]
 8000ba2:	e008      	b.n	8000bb6 <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000ba4:	f107 0308 	add.w	r3, r7, #8
 8000ba8:	2103      	movs	r1, #3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f832 	bl	8000c14 <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8000bb0:	89fb      	ldrh	r3, [r7, #14]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	81fb      	strh	r3, [r7, #14]
 8000bb6:	89fa      	ldrh	r2, [r7, #14]
 8000bb8:	8879      	ldrh	r1, [r7, #2]
 8000bba:	88bb      	ldrh	r3, [r7, #4]
 8000bbc:	1acb      	subs	r3, r1, r3
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	dbf0      	blt.n	8000ba4 <draw_vertical_line+0x4e>
	}


}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd90      	pop	{r4, r7, pc}

08000bcc <LCD_send_command>:
#include "lcd.h"


void LCD_send_command(uint8_t cmd)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2108      	movs	r1, #8
 8000bda:	480c      	ldr	r0, [pc, #48]	@ (8000c0c <LCD_send_command+0x40>)
 8000bdc:	f002 fd28 	bl	8003630 <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8000be0:	2200      	movs	r2, #0
 8000be2:	2110      	movs	r1, #16
 8000be4:	4809      	ldr	r0, [pc, #36]	@ (8000c0c <LCD_send_command+0x40>)
 8000be6:	f002 fd23 	bl	8003630 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 8000bea:	1df9      	adds	r1, r7, #7
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4807      	ldr	r0, [pc, #28]	@ (8000c10 <LCD_send_command+0x44>)
 8000bf4:	f004 f9ef 	bl	8004fd6 <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2110      	movs	r1, #16
 8000bfc:	4803      	ldr	r0, [pc, #12]	@ (8000c0c <LCD_send_command+0x40>)
 8000bfe:	f002 fd17 	bl	8003630 <HAL_GPIO_WritePin>


}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40020c00 	.word	0x40020c00
 8000c10:	20000180 	.word	0x20000180

08000c14 <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
	 * Output: Void
	 */

	//flagDmaSpiTx = 1;

	unsigned int valMaxFrame = 1024; //numarul maxim de octeti pe frame
 8000c1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c22:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2c:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c36:	6939      	ldr	r1, [r7, #16]
 8000c38:	fb01 f202 	mul.w	r2, r1, r2
 8000c3c:	1a9b      	subs	r3, r3, r2
 8000c3e:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 8000c40:	2201      	movs	r2, #1
 8000c42:	2108      	movs	r1, #8
 8000c44:	481d      	ldr	r0, [pc, #116]	@ (8000cbc <LCD_send_data_multi+0xa8>)
 8000c46:	f002 fcf3 	bl	8003630 <HAL_GPIO_WritePin>
	CS_A();
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2110      	movs	r1, #16
 8000c4e:	481b      	ldr	r0, [pc, #108]	@ (8000cbc <LCD_send_data_multi+0xa8>)
 8000c50:	f002 fcee 	bl	8003630 <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d817      	bhi.n	8000c8c <LCD_send_data_multi+0x78>
	{
		//flagDmaSpiTx = 0;
		//HAL_SPI_Transmit_DMA(&hspi1, data, size);
		HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	4816      	ldr	r0, [pc, #88]	@ (8000cc0 <LCD_send_data_multi+0xac>)
 8000c68:	f004 f9b5 	bl	8004fd6 <HAL_SPI_Transmit>
 8000c6c:	e01c      	b.n	8000ca8 <LCD_send_data_multi+0x94>
		while(nrFrames != 0)
		{
			//while(flagDmaSpiTx == 0);
			//flagDmaSpiTx = 0;
			//HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
			HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <LCD_send_data_multi+0xac>)
 8000c7a:	f004 f9ac 	bl	8004fd6 <HAL_SPI_Transmit>
			data = data+valMaxFrame;
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4413      	add	r3, r2
 8000c84:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1ed      	bne.n	8000c6e <LCD_send_data_multi+0x5a>
		}

		if(remainder != 0)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d007      	beq.n	8000ca8 <LCD_send_data_multi+0x94>
		{
			//while(flagDmaSpiTx == 0);
			//flagDmaSpiTx = 0;
			//HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
			HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	4807      	ldr	r0, [pc, #28]	@ (8000cc0 <LCD_send_data_multi+0xac>)
 8000ca4:	f004 f997 	bl	8004fd6 <HAL_SPI_Transmit>

		}
	}

	//while(flagDmaSpiTx == 0);
	CS_D();
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2110      	movs	r1, #16
 8000cac:	4803      	ldr	r0, [pc, #12]	@ (8000cbc <LCD_send_data_multi+0xa8>)
 8000cae:	f002 fcbf 	bl	8003630 <HAL_GPIO_WritePin>

}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40020c00 	.word	0x40020c00
 8000cc0:	20000180 	.word	0x20000180

08000cc4 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <LCD_send_data+0x40>)
 8000cd4:	f002 fcac 	bl	8003630 <HAL_GPIO_WritePin>
	CS_A();
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2110      	movs	r1, #16
 8000cdc:	4809      	ldr	r0, [pc, #36]	@ (8000d04 <LCD_send_data+0x40>)
 8000cde:	f002 fca7 	bl	8003630 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8000ce2:	1df9      	adds	r1, r7, #7
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4807      	ldr	r0, [pc, #28]	@ (8000d08 <LCD_send_data+0x44>)
 8000cec:	f004 f973 	bl	8004fd6 <HAL_SPI_Transmit>

	CS_D();
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	4803      	ldr	r0, [pc, #12]	@ (8000d04 <LCD_send_data+0x40>)
 8000cf6:	f002 fc9b 	bl	8003630 <HAL_GPIO_WritePin>

}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40020c00 	.word	0x40020c00
 8000d08:	20000180 	.word	0x20000180

08000d0c <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 8000d10:	2200      	movs	r2, #0
 8000d12:	2140      	movs	r1, #64	@ 0x40
 8000d14:	487c      	ldr	r0, [pc, #496]	@ (8000f08 <ILI9488_driver_init+0x1fc>)
 8000d16:	f002 fc8b 	bl	8003630 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d1a:	200a      	movs	r0, #10
 8000d1c:	f001 fbd8 	bl	80024d0 <HAL_Delay>
	RST_D();
 8000d20:	2201      	movs	r2, #1
 8000d22:	2140      	movs	r1, #64	@ 0x40
 8000d24:	4878      	ldr	r0, [pc, #480]	@ (8000f08 <ILI9488_driver_init+0x1fc>)
 8000d26:	f002 fc83 	bl	8003630 <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff ff4e 	bl	8000bcc <LCD_send_command>
	HAL_Delay(150);
 8000d30:	2096      	movs	r0, #150	@ 0x96
 8000d32:	f001 fbcd 	bl	80024d0 <HAL_Delay>
	LCD_send_command(ILI9488_SLPOUT); //scoatem sistemul din sleep
 8000d36:	2011      	movs	r0, #17
 8000d38:	f7ff ff48 	bl	8000bcc <LCD_send_command>
	HAL_Delay(255);
 8000d3c:	20ff      	movs	r0, #255	@ 0xff
 8000d3e:	f001 fbc7 	bl	80024d0 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 8000d42:	20e0      	movs	r0, #224	@ 0xe0
 8000d44:	f7ff ff42 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f7ff ffbb 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x0C);
 8000d4e:	200c      	movs	r0, #12
 8000d50:	f7ff ffb8 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x05);
 8000d54:	2005      	movs	r0, #5
 8000d56:	f7ff ffb5 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x04);
 8000d5a:	2004      	movs	r0, #4
 8000d5c:	f7ff ffb2 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x0F);
 8000d60:	200f      	movs	r0, #15
 8000d62:	f7ff ffaf 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x06);
 8000d66:	2006      	movs	r0, #6
 8000d68:	f7ff ffac 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x3A);
 8000d6c:	203a      	movs	r0, #58	@ 0x3a
 8000d6e:	f7ff ffa9 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x56);
 8000d72:	2056      	movs	r0, #86	@ 0x56
 8000d74:	f7ff ffa6 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x4D);
 8000d78:	204d      	movs	r0, #77	@ 0x4d
 8000d7a:	f7ff ffa3 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x03);
 8000d7e:	2003      	movs	r0, #3
 8000d80:	f7ff ffa0 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x0A);
 8000d84:	200a      	movs	r0, #10
 8000d86:	f7ff ff9d 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x06);
 8000d8a:	2006      	movs	r0, #6
 8000d8c:	f7ff ff9a 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x30);
 8000d90:	2030      	movs	r0, #48	@ 0x30
 8000d92:	f7ff ff97 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x3E);
 8000d96:	203e      	movs	r0, #62	@ 0x3e
 8000d98:	f7ff ff94 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x0F);
 8000d9c:	200f      	movs	r0, #15
 8000d9e:	f7ff ff91 	bl	8000cc4 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 8000da2:	20e1      	movs	r0, #225	@ 0xe1
 8000da4:	f7ff ff12 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0x00);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff ff8b 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x13);
 8000dae:	2013      	movs	r0, #19
 8000db0:	f7ff ff88 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x18);
 8000db4:	2018      	movs	r0, #24
 8000db6:	f7ff ff85 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x01);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ff82 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x11);
 8000dc0:	2011      	movs	r0, #17
 8000dc2:	f7ff ff7f 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x06);
 8000dc6:	2006      	movs	r0, #6
 8000dc8:	f7ff ff7c 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x38);
 8000dcc:	2038      	movs	r0, #56	@ 0x38
 8000dce:	f7ff ff79 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x34);
 8000dd2:	2034      	movs	r0, #52	@ 0x34
 8000dd4:	f7ff ff76 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x4D);
 8000dd8:	204d      	movs	r0, #77	@ 0x4d
 8000dda:	f7ff ff73 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x06);
 8000dde:	2006      	movs	r0, #6
 8000de0:	f7ff ff70 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x0D);
 8000de4:	200d      	movs	r0, #13
 8000de6:	f7ff ff6d 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x0B);
 8000dea:	200b      	movs	r0, #11
 8000dec:	f7ff ff6a 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x31);
 8000df0:	2031      	movs	r0, #49	@ 0x31
 8000df2:	f7ff ff67 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x37);
 8000df6:	2037      	movs	r0, #55	@ 0x37
 8000df8:	f7ff ff64 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x0F);
 8000dfc:	200f      	movs	r0, #15
 8000dfe:	f7ff ff61 	bl	8000cc4 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 8000e02:	20c0      	movs	r0, #192	@ 0xc0
 8000e04:	f7ff fee2 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0x18);
 8000e08:	2018      	movs	r0, #24
 8000e0a:	f7ff ff5b 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x16);
 8000e0e:	2016      	movs	r0, #22
 8000e10:	f7ff ff58 	bl	8000cc4 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 8000e14:	20c1      	movs	r0, #193	@ 0xc1
 8000e16:	f7ff fed9 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0x45);
 8000e1a:	2045      	movs	r0, #69	@ 0x45
 8000e1c:	f7ff ff52 	bl	8000cc4 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 8000e20:	20c2      	movs	r0, #194	@ 0xc2
 8000e22:	f7ff fed3 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0x33);
 8000e26:	2033      	movs	r0, #51	@ 0x33
 8000e28:	f7ff ff4c 	bl	8000cc4 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 8000e2c:	20c3      	movs	r0, #195	@ 0xc3
 8000e2e:	f7ff fecd 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0x33);
 8000e32:	2033      	movs	r0, #51	@ 0x33
 8000e34:	f7ff ff46 	bl	8000cc4 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 8000e38:	2036      	movs	r0, #54	@ 0x36
 8000e3a:	f7ff fec7 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 8000e3e:	205c      	movs	r0, #92	@ 0x5c
 8000e40:	f7ff ff40 	bl	8000cc4 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 8000e44:	203a      	movs	r0, #58	@ 0x3a
 8000e46:	f7ff fec1 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 8000e4a:	2006      	movs	r0, #6
 8000e4c:	f7ff ff3a 	bl	8000cc4 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff febb 	bl	8000bcc <LCD_send_command>
	LCD_send_command(0x00);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff feb8 	bl	8000bcc <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 8000e5c:	20b0      	movs	r0, #176	@ 0xb0
 8000e5e:	f7ff feb5 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff ff2e 	bl	8000cc4 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 8000e68:	20b1      	movs	r0, #177	@ 0xb1
 8000e6a:	f7ff feaf 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 8000e6e:	20a0      	movs	r0, #160	@ 0xa0
 8000e70:	f7ff ff28 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 8000e74:	2011      	movs	r0, #17
 8000e76:	f7ff ff25 	bl	8000cc4 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 8000e7a:	20b4      	movs	r0, #180	@ 0xb4
 8000e7c:	f7ff fea6 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 8000e80:	2002      	movs	r0, #2
 8000e82:	f7ff ff1f 	bl	8000cc4 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 8000e86:	20b5      	movs	r0, #181	@ 0xb5
 8000e88:	f7ff fea0 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0x02);
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f7ff ff19 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x02);
 8000e92:	2002      	movs	r0, #2
 8000e94:	f7ff ff16 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x0A);
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f7ff ff13 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x04);
 8000e9e:	2004      	movs	r0, #4
 8000ea0:	f7ff ff10 	bl	8000cc4 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 8000ea4:	20b6      	movs	r0, #182	@ 0xb6
 8000ea6:	f7ff fe91 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0x02);
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f7ff ff0a 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x02);
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f7ff ff07 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x3B);
 8000eb6:	203b      	movs	r0, #59	@ 0x3b
 8000eb8:	f7ff ff04 	bl	8000cc4 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 8000ebc:	20e9      	movs	r0, #233	@ 0xe9
 8000ebe:	f7ff fe85 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff fefe 	bl	8000cc4 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8000ec8:	20f7      	movs	r0, #247	@ 0xf7
 8000eca:	f7ff fe7f 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0xA9);
 8000ece:	20a9      	movs	r0, #169	@ 0xa9
 8000ed0:	f7ff fef8 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x51);
 8000ed4:	2051      	movs	r0, #81	@ 0x51
 8000ed6:	f7ff fef5 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x2C);
 8000eda:	202c      	movs	r0, #44	@ 0x2c
 8000edc:	f7ff fef2 	bl	8000cc4 <LCD_send_data>
	LCD_send_data(0x82);
 8000ee0:	2082      	movs	r0, #130	@ 0x82
 8000ee2:	f7ff feef 	bl	8000cc4 <LCD_send_data>


	LCD_send_command(ILI9488_SLPOUT);
 8000ee6:	2011      	movs	r0, #17
 8000ee8:	f7ff fe70 	bl	8000bcc <LCD_send_command>
	HAL_Delay(255);
 8000eec:	20ff      	movs	r0, #255	@ 0xff
 8000eee:	f001 faef 	bl	80024d0 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 8000ef2:	2051      	movs	r0, #81	@ 0x51
 8000ef4:	f7ff fe6a 	bl	8000bcc <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 8000ef8:	20ff      	movs	r0, #255	@ 0xff
 8000efa:	f7ff fee3 	bl	8000cc4 <LCD_send_data>
	LCD_send_command(ILI9488_DISPON);
 8000efe:	2029      	movs	r0, #41	@ 0x29
 8000f00:	f7ff fe64 	bl	8000bcc <LCD_send_command>


}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40020c00 	.word	0x40020c00

08000f0c <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4604      	mov	r4, r0
 8000f14:	4608      	mov	r0, r1
 8000f16:	4611      	mov	r1, r2
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	80fb      	strh	r3, [r7, #6]
 8000f1e:	4603      	mov	r3, r0
 8000f20:	80bb      	strh	r3, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	807b      	strh	r3, [r7, #2]
 8000f26:	4613      	mov	r3, r2
 8000f28:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 8000f2a:	202a      	movs	r0, #42	@ 0x2a
 8000f2c:	f7ff fe4e 	bl	8000bcc <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	0a1b      	lsrs	r3, r3, #8
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	733b      	strb	r3, [r7, #12]
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 8000f40:	887b      	ldrh	r3, [r7, #2]
 8000f42:	0a1b      	lsrs	r3, r3, #8
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	73bb      	strb	r3, [r7, #14]
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2104      	movs	r1, #4
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fe5c 	bl	8000c14 <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 8000f5c:	202b      	movs	r0, #43	@ 0x2b
 8000f5e:	f7ff fe35 	bl	8000bcc <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	733b      	strb	r3, [r7, #12]
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 8000f72:	883b      	ldrh	r3, [r7, #0]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	73bb      	strb	r3, [r7, #14]
 8000f7c:	883b      	ldrh	r3, [r7, #0]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	2104      	movs	r1, #4
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fe43 	bl	8000c14 <LCD_send_data_multi>

	if(x == 'w')
 8000f8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f92:	2b77      	cmp	r3, #119	@ 0x77
 8000f94:	d102      	bne.n	8000f9c <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 8000f96:	202c      	movs	r0, #44	@ 0x2c
 8000f98:	f7ff fe18 	bl	8000bcc <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 8000f9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000fa0:	2b72      	cmp	r3, #114	@ 0x72
 8000fa2:	d102      	bne.n	8000faa <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 8000fa4:	202e      	movs	r0, #46	@ 0x2e
 8000fa6:	f7ff fe11 	bl	8000bcc <LCD_send_command>
	}


}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
	...

08000fb4 <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b087      	sub	sp, #28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4623      	mov	r3, r4
 8000fc4:	80fb      	strh	r3, [r7, #6]
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80bb      	strh	r3, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	807b      	strh	r3, [r7, #2]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 8000fd2:	4b7b      	ldr	r3, [pc, #492]	@ (80011c0 <read_pixel_frame+0x20c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b79      	ldr	r3, [pc, #484]	@ (80011c0 <read_pixel_frame+0x20c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fe0:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 8000fe2:	4b77      	ldr	r3, [pc, #476]	@ (80011c0 <read_pixel_frame+0x20c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b75      	ldr	r3, [pc, #468]	@ (80011c0 <read_pixel_frame+0x20c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8000ff0:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 8000ff2:	4b73      	ldr	r3, [pc, #460]	@ (80011c0 <read_pixel_frame+0x20c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b71      	ldr	r3, [pc, #452]	@ (80011c0 <read_pixel_frame+0x20c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f042 0210 	orr.w	r2, r2, #16
 8001000:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8001002:	4b6f      	ldr	r3, [pc, #444]	@ (80011c0 <read_pixel_frame+0x20c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b6d      	ldr	r3, [pc, #436]	@ (80011c0 <read_pixel_frame+0x20c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001010:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 8001012:	4b6c      	ldr	r3, [pc, #432]	@ (80011c4 <read_pixel_frame+0x210>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 800101c:	887a      	ldrh	r2, [r7, #2]
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	bfb8      	it	lt
 8001026:	425b      	neglt	r3, r3
 8001028:	b29a      	uxth	r2, r3
 800102a:	8839      	ldrh	r1, [r7, #0]
 800102c:	88bb      	ldrh	r3, [r7, #4]
 800102e:	1acb      	subs	r3, r1, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	bfb8      	it	lt
 8001034:	425b      	neglt	r3, r3
 8001036:	b29b      	uxth	r3, r3
 8001038:	fb12 f303 	smulbb	r3, r2, r3
 800103c:	b29b      	uxth	r3, r3
 800103e:	461a      	mov	r2, r3
 8001040:	0052      	lsls	r2, r2, #1
 8001042:	4413      	add	r3, r2
 8001044:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 8001046:	2300      	movs	r3, #0
 8001048:	753b      	strb	r3, [r7, #20]

    free(data);
 800104a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800104c:	f009 fd8a 	bl	800ab64 <free>
    data = malloc(byteNr);
 8001050:	8afb      	ldrh	r3, [r7, #22]
 8001052:	4618      	mov	r0, r3
 8001054:	f009 fd7e 	bl	800ab54 <malloc>
 8001058:	4603      	mov	r3, r0
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	3b01      	subs	r3, #1
 8001060:	807b      	strh	r3, [r7, #2]
    y--;
 8001062:	883b      	ldrh	r3, [r7, #0]
 8001064:	3b01      	subs	r3, #1
 8001066:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	b29b      	uxth	r3, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	743b      	strb	r3, [r7, #16]
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	747b      	strb	r3, [r7, #17]
 8001078:	887b      	ldrh	r3, [r7, #2]
 800107a:	0a1b      	lsrs	r3, r3, #8
 800107c:	b29b      	uxth	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	74bb      	strb	r3, [r7, #18]
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 8001088:	88bb      	ldrh	r3, [r7, #4]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b29b      	uxth	r3, r3
 800108e:	b2db      	uxtb	r3, r3
 8001090:	733b      	strb	r3, [r7, #12]
 8001092:	88bb      	ldrh	r3, [r7, #4]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	737b      	strb	r3, [r7, #13]
 8001098:	883b      	ldrh	r3, [r7, #0]
 800109a:	0a1b      	lsrs	r3, r3, #8
 800109c:	b29b      	uxth	r3, r3
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	73bb      	strb	r3, [r7, #14]
 80010a2:	883b      	ldrh	r3, [r7, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	73fb      	strb	r3, [r7, #15]

    CS_A();
 80010a8:	2200      	movs	r2, #0
 80010aa:	2110      	movs	r1, #16
 80010ac:	4846      	ldr	r0, [pc, #280]	@ (80011c8 <read_pixel_frame+0x214>)
 80010ae:	f002 fabf 	bl	8003630 <HAL_GPIO_WritePin>

    DC_COMMAND();
 80010b2:	2200      	movs	r2, #0
 80010b4:	2108      	movs	r1, #8
 80010b6:	4844      	ldr	r0, [pc, #272]	@ (80011c8 <read_pixel_frame+0x214>)
 80010b8:	f002 faba 	bl	8003630 <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 80010bc:	232a      	movs	r3, #42	@ 0x2a
 80010be:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 80010c0:	f107 010b 	add.w	r1, r7, #11
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	2201      	movs	r2, #1
 80010ca:	483d      	ldr	r0, [pc, #244]	@ (80011c0 <read_pixel_frame+0x20c>)
 80010cc:	f003 ff83 	bl	8004fd6 <HAL_SPI_Transmit>
    DC_DATA();
 80010d0:	2201      	movs	r2, #1
 80010d2:	2108      	movs	r1, #8
 80010d4:	483c      	ldr	r0, [pc, #240]	@ (80011c8 <read_pixel_frame+0x214>)
 80010d6:	f002 faab 	bl	8003630 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 80010da:	f107 0110 	add.w	r1, r7, #16
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	2204      	movs	r2, #4
 80010e4:	4836      	ldr	r0, [pc, #216]	@ (80011c0 <read_pixel_frame+0x20c>)
 80010e6:	f003 ff76 	bl	8004fd6 <HAL_SPI_Transmit>

    DC_COMMAND();
 80010ea:	2200      	movs	r2, #0
 80010ec:	2108      	movs	r1, #8
 80010ee:	4836      	ldr	r0, [pc, #216]	@ (80011c8 <read_pixel_frame+0x214>)
 80010f0:	f002 fa9e 	bl	8003630 <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 80010f4:	232b      	movs	r3, #43	@ 0x2b
 80010f6:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 80010f8:	f107 010a 	add.w	r1, r7, #10
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	2201      	movs	r2, #1
 8001102:	482f      	ldr	r0, [pc, #188]	@ (80011c0 <read_pixel_frame+0x20c>)
 8001104:	f003 ff67 	bl	8004fd6 <HAL_SPI_Transmit>
    DC_DATA();
 8001108:	2201      	movs	r2, #1
 800110a:	2108      	movs	r1, #8
 800110c:	482e      	ldr	r0, [pc, #184]	@ (80011c8 <read_pixel_frame+0x214>)
 800110e:	f002 fa8f 	bl	8003630 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 8001112:	f107 010c 	add.w	r1, r7, #12
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	2204      	movs	r2, #4
 800111c:	4828      	ldr	r0, [pc, #160]	@ (80011c0 <read_pixel_frame+0x20c>)
 800111e:	f003 ff5a 	bl	8004fd6 <HAL_SPI_Transmit>

    DC_COMMAND();
 8001122:	2200      	movs	r2, #0
 8001124:	2108      	movs	r1, #8
 8001126:	4828      	ldr	r0, [pc, #160]	@ (80011c8 <read_pixel_frame+0x214>)
 8001128:	f002 fa82 	bl	8003630 <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 800112c:	232e      	movs	r3, #46	@ 0x2e
 800112e:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 8001130:	f107 0109 	add.w	r1, r7, #9
 8001134:	f04f 33ff 	mov.w	r3, #4294967295
 8001138:	2201      	movs	r2, #1
 800113a:	4821      	ldr	r0, [pc, #132]	@ (80011c0 <read_pixel_frame+0x20c>)
 800113c:	f003 ff4b 	bl	8004fd6 <HAL_SPI_Transmit>
    DC_DATA();
 8001140:	2201      	movs	r2, #1
 8001142:	2108      	movs	r1, #8
 8001144:	4820      	ldr	r0, [pc, #128]	@ (80011c8 <read_pixel_frame+0x214>)
 8001146:	f002 fa73 	bl	8003630 <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 800114a:	f107 0114 	add.w	r1, r7, #20
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	2201      	movs	r2, #1
 8001154:	481a      	ldr	r0, [pc, #104]	@ (80011c0 <read_pixel_frame+0x20c>)
 8001156:	f004 f882 	bl	800525e <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 800115a:	8afb      	ldrh	r3, [r7, #22]
 800115c:	461a      	mov	r2, r3
 800115e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001160:	4817      	ldr	r0, [pc, #92]	@ (80011c0 <read_pixel_frame+0x20c>)
 8001162:	f004 fbf1 	bl	8005948 <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 8001166:	bf00      	nop
 8001168:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <read_pixel_frame+0x210>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0fa      	beq.n	8001168 <read_pixel_frame+0x1b4>
    CS_D();
 8001172:	2201      	movs	r2, #1
 8001174:	2110      	movs	r1, #16
 8001176:	4814      	ldr	r0, [pc, #80]	@ (80011c8 <read_pixel_frame+0x214>)
 8001178:	f002 fa5a 	bl	8003630 <HAL_GPIO_WritePin>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 800117c:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <read_pixel_frame+0x20c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <read_pixel_frame+0x20c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800118a:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <read_pixel_frame+0x20c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <read_pixel_frame+0x20c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 800119a:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <read_pixel_frame+0x20c>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <read_pixel_frame+0x20c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <read_pixel_frame+0x20c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <read_pixel_frame+0x20c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80011b6:	601a      	str	r2, [r3, #0]

}
 80011b8:	bf00      	nop
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd90      	pop	{r4, r7, pc}
 80011c0:	20000180 	.word	0x20000180
 80011c4:	20000329 	.word	0x20000329
 80011c8:	40020c00 	.word	0x40020c00

080011cc <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


  void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
  {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	   * folosind DMA. Odata terminat transferul SPI prin DMA,
	   * aceasta functia de CallBack se va apela, setandu-ne un flag
	   * pentru a indica starea acestui transfer de date.
	   */

	  flagDmaSpiTx = 1;
 80011d4:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <HAL_SPI_TxCpltCallback+0x1c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]

  }
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000328 	.word	0x20000328

080011ec <HAL_SPI_RxCpltCallback>:


  void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
  {
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	  /*
	   * Functie de CallBack pentru terminarea receptiei datelor
	   * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	   */

	  flagDmaSpiRx = 1;
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <HAL_SPI_RxCpltCallback+0x1c>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]

  }
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000329 	.word	0x20000329

0800120c <HAL_DAC_ConvHalfCpltCallbackCh1>:


  void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
  {
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
      /*
       * Functie de CallBack pentru finalizare 1/2 din transfer DMA pe DAC
       */

	  flagDmaDAC = 1;
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]

  }
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	2000032a 	.word	0x2000032a

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8001232:	b082      	sub	sp, #8
 8001234:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001236:	f001 f8d9 	bl	80023ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123a:	f000 fa19 	bl	8001670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123e:	f000 fbb5 	bl	80019ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001242:	f000 fb75 	bl	8001930 <MX_DMA_Init>
  MX_SPI1_Init();
 8001246:	f000 fac7 	bl	80017d8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800124a:	f000 fb47 	bl	80018dc <MX_USART1_UART_Init>
  MX_DAC_Init();
 800124e:	f000 fa79 	bl	8001744 <MX_DAC_Init>
  MX_TIM2_Init();
 8001252:	f000 faf7 	bl	8001844 <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 8001256:	f000 fa9f 	bl	8001798 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800125a:	f006 ff75 	bl	8008148 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 800125e:	f000 fc09 	bl	8001a74 <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 8001262:	f7ff fd53 	bl	8000d0c <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 8001266:	4896      	ldr	r0, [pc, #600]	@ (80014c0 <main+0x294>)
 8001268:	f005 f82c 	bl	80062c4 <HAL_TIM_Base_Start>


  fill_screen1(0xF100);
 800126c:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001270:	f7ff fa00 	bl	8000674 <fill_screen1>
  HAL_Delay(1000);
 8001274:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001278:	f001 f92a 	bl	80024d0 <HAL_Delay>
  fill_screen2(0xF00F);
 800127c:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 8001280:	f7ff fa8e 	bl	80007a0 <fill_screen2>
  HAL_Delay(1000);
 8001284:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001288:	f001 f922 	bl	80024d0 <HAL_Delay>
  fill_screen2(0xFFFF);
 800128c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001290:	f7ff fa86 	bl	80007a0 <fill_screen2>
  HAL_Delay(1000);
 8001294:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001298:	f001 f91a 	bl	80024d0 <HAL_Delay>
  fill_screen2(0x3F51);
 800129c:	f643 7051 	movw	r0, #16209	@ 0x3f51
 80012a0:	f7ff fa7e 	bl	80007a0 <fill_screen2>
  HAL_Delay(1000);
 80012a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012a8:	f001 f912 	bl	80024d0 <HAL_Delay>

  //Test_SD_Card();
  unsigned int startTick = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80012b2:	f102 0218 	add.w	r2, r2, #24
 80012b6:	6013      	str	r3, [r2, #0]
  unsigned int endTick = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80012be:	f102 0214 	add.w	r2, r2, #20
 80012c2:	6013      	str	r3, [r2, #0]
  unsigned int getTime = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80012ca:	f102 0210 	add.w	r2, r2, #16
 80012ce:	6013      	str	r3, [r2, #0]

  play_audio_file("audio/mine.txt"); //doremi mine songita song22
 80012d0:	487c      	ldr	r0, [pc, #496]	@ (80014c4 <main+0x298>)
 80012d2:	f7ff f8f1 	bl	80004b8 <play_audio_file>

  char *fileData = NULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80012dc:	f102 020c 	add.w	r2, r2, #12
 80012e0:	6013      	str	r3, [r2, #0]
  read_file("audio/text.txt", fileData);
 80012e2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012e6:	f103 030c 	add.w	r3, r3, #12
 80012ea:	6819      	ldr	r1, [r3, #0]
 80012ec:	4876      	ldr	r0, [pc, #472]	@ (80014c8 <main+0x29c>)
 80012ee:	f000 fbcf 	bl	8001a90 <read_file>
  HAL_Delay(1000);
 80012f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012f6:	f001 f8eb 	bl	80024d0 <HAL_Delay>

  uint32_t sampleData[1024]; /*23 de ms pentru redare DMA dintre care 7 ms pentru citire din fisier*/
  	  	  	  	  	  	  	 /*Vor ramane aproximativ 16 ms pentru prelucrarea frame-ului (pentru 1024 de esantioane)*/

  startTick = HAL_GetTick();
 80012fa:	f001 f8dd 	bl	80024b8 <HAL_GetTick>
 80012fe:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001302:	f103 0318 	add.w	r3, r3, #24
 8001306:	6018      	str	r0, [r3, #0]
  read_audio_file("audio/random.txt", sampleData);
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	3b18      	subs	r3, #24
 800130e:	4619      	mov	r1, r3
 8001310:	486e      	ldr	r0, [pc, #440]	@ (80014cc <main+0x2a0>)
 8001312:	f000 fc45 	bl	8001ba0 <read_audio_file>
  endTick = HAL_GetTick();
 8001316:	f001 f8cf 	bl	80024b8 <HAL_GetTick>
 800131a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800131e:	f103 0314 	add.w	r3, r3, #20
 8001322:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001324:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001328:	f103 0314 	add.w	r3, r3, #20
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001332:	f103 0318 	add.w	r3, r3, #24
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800133e:	f102 0210 	add.w	r2, r2, #16
 8001342:	6013      	str	r3, [r2, #0]

  HAL_Delay(100);
 8001344:	2064      	movs	r0, #100	@ 0x64
 8001346:	f001 f8c3 	bl	80024d0 <HAL_Delay>

  startTick = HAL_GetTick();
 800134a:	f001 f8b5 	bl	80024b8 <HAL_GetTick>
 800134e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001352:	f103 0318 	add.w	r3, r3, #24
 8001356:	6018      	str	r0, [r3, #0]
  read_audio_file("audio/random.txt", sampleData);
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	3b18      	subs	r3, #24
 800135e:	4619      	mov	r1, r3
 8001360:	485a      	ldr	r0, [pc, #360]	@ (80014cc <main+0x2a0>)
 8001362:	f000 fc1d 	bl	8001ba0 <read_audio_file>
  endTick = HAL_GetTick();
 8001366:	f001 f8a7 	bl	80024b8 <HAL_GetTick>
 800136a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800136e:	f103 0314 	add.w	r3, r3, #20
 8001372:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001374:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001378:	f103 0314 	add.w	r3, r3, #20
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001382:	f103 0318 	add.w	r3, r3, #24
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800138e:	f102 0210 	add.w	r2, r2, #16
 8001392:	6013      	str	r3, [r2, #0]

  HAL_Delay(100);
 8001394:	2064      	movs	r0, #100	@ 0x64
 8001396:	f001 f89b 	bl	80024d0 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 800139a:	f107 0320 	add.w	r3, r7, #32
 800139e:	3b18      	subs	r3, #24
 80013a0:	4619      	mov	r1, r3
 80013a2:	4849      	ldr	r0, [pc, #292]	@ (80014c8 <main+0x29c>)
 80013a4:	f000 fbfc 	bl	8001ba0 <read_audio_file>
  HAL_Delay(100);
 80013a8:	2064      	movs	r0, #100	@ 0x64
 80013aa:	f001 f891 	bl	80024d0 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	3b18      	subs	r3, #24
 80013b4:	4619      	mov	r1, r3
 80013b6:	4844      	ldr	r0, [pc, #272]	@ (80014c8 <main+0x29c>)
 80013b8:	f000 fbf2 	bl	8001ba0 <read_audio_file>
  HAL_Delay(100);
 80013bc:	2064      	movs	r0, #100	@ 0x64
 80013be:	f001 f887 	bl	80024d0 <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	3b18      	subs	r3, #24
 80013c8:	4619      	mov	r1, r3
 80013ca:	483f      	ldr	r0, [pc, #252]	@ (80014c8 <main+0x29c>)
 80013cc:	f000 fbe8 	bl	8001ba0 <read_audio_file>
  HAL_Delay(100);
 80013d0:	2064      	movs	r0, #100	@ 0x64
 80013d2:	f001 f87d 	bl	80024d0 <HAL_Delay>

  for(uint8_t i=0;i<100;i++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80013dc:	f102 021f 	add.w	r2, r2, #31
 80013e0:	7013      	strb	r3, [r2, #0]
 80013e2:	e0a4      	b.n	800152e <main+0x302>
  {
	  for(uint8_t j=0; j<100;j++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80013ea:	f102 021e 	add.w	r2, r2, #30
 80013ee:	7013      	strb	r3, [r2, #0]
 80013f0:	e08a      	b.n	8001508 <main+0x2dc>
	  {

		  if(i==j)
 80013f2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80013f6:	f103 031f 	add.w	r3, r3, #31
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001400:	f103 031e 	add.w	r3, r3, #30
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d111      	bne.n	800142e <main+0x202>
		  {
			  draw_pixel(i,j,0xF100);
 800140a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800140e:	f103 031f 	add.w	r3, r3, #31
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b29b      	uxth	r3, r3
 8001416:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800141a:	f102 021e 	add.w	r2, r2, #30
 800141e:	7812      	ldrb	r2, [r2, #0]
 8001420:	b291      	uxth	r1, r2
 8001422:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f8fa 	bl	8000620 <draw_pixel>
			  continue;
 800142c:	e061      	b.n	80014f2 <main+0x2c6>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 800142e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001432:	f103 031f 	add.w	r3, r3, #31
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b50      	cmp	r3, #80	@ 0x50
 800143a:	d106      	bne.n	800144a <main+0x21e>
 800143c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001440:	f103 031e 	add.w	r3, r3, #30
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b14      	cmp	r3, #20
 8001448:	d029      	beq.n	800149e <main+0x272>
 800144a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800144e:	f103 031f 	add.w	r3, r3, #31
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b50      	cmp	r3, #80	@ 0x50
 8001456:	d106      	bne.n	8001466 <main+0x23a>
 8001458:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800145c:	f103 031e 	add.w	r3, r3, #30
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b13      	cmp	r3, #19
 8001464:	d01b      	beq.n	800149e <main+0x272>
 8001466:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800146a:	f103 031f 	add.w	r3, r3, #31
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b51      	cmp	r3, #81	@ 0x51
 8001472:	d106      	bne.n	8001482 <main+0x256>
 8001474:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001478:	f103 031e 	add.w	r3, r3, #30
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b14      	cmp	r3, #20
 8001480:	d00d      	beq.n	800149e <main+0x272>
 8001482:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001486:	f103 031f 	add.w	r3, r3, #31
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b51      	cmp	r3, #81	@ 0x51
 800148e:	d11f      	bne.n	80014d0 <main+0x2a4>
 8001490:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001494:	f103 031e 	add.w	r3, r3, #30
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b13      	cmp	r3, #19
 800149c:	d118      	bne.n	80014d0 <main+0x2a4>
		  {
			  draw_pixel(i,j,0x001F);
 800149e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80014a2:	f103 031f 	add.w	r3, r3, #31
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80014ae:	f102 021e 	add.w	r2, r2, #30
 80014b2:	7812      	ldrb	r2, [r2, #0]
 80014b4:	b291      	uxth	r1, r2
 80014b6:	221f      	movs	r2, #31
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f8b1 	bl	8000620 <draw_pixel>
			  continue;
 80014be:	e018      	b.n	80014f2 <main+0x2c6>
 80014c0:	20000298 	.word	0x20000298
 80014c4:	0800ae9c 	.word	0x0800ae9c
 80014c8:	0800aeac 	.word	0x0800aeac
 80014cc:	0800aebc 	.word	0x0800aebc
		  }


		  draw_pixel(i,j,0xFFFF);
 80014d0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80014d4:	f103 031f 	add.w	r3, r3, #31
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80014e0:	f102 021e 	add.w	r2, r2, #30
 80014e4:	7812      	ldrb	r2, [r2, #0]
 80014e6:	b291      	uxth	r1, r2
 80014e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f897 	bl	8000620 <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 80014f2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80014f6:	f103 031e 	add.w	r3, r3, #30
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	3301      	adds	r3, #1
 80014fe:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001502:	f102 021e 	add.w	r2, r2, #30
 8001506:	7013      	strb	r3, [r2, #0]
 8001508:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800150c:	f103 031e 	add.w	r3, r3, #30
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b63      	cmp	r3, #99	@ 0x63
 8001514:	f67f af6d 	bls.w	80013f2 <main+0x1c6>
  for(uint8_t i=0;i<100;i++)
 8001518:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800151c:	f103 031f 	add.w	r3, r3, #31
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001528:	f102 021f 	add.w	r2, r2, #31
 800152c:	7013      	strb	r3, [r2, #0]
 800152e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001532:	f103 031f 	add.w	r3, r3, #31
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b63      	cmp	r3, #99	@ 0x63
 800153a:	f67f af53 	bls.w	80013e4 <main+0x1b8>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 800153e:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001542:	f7ff f92d 	bl	80007a0 <fill_screen2>
  HAL_Delay(1000);
 8001546:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800154a:	f000 ffc1 	bl	80024d0 <HAL_Delay>
  fill_screen2(0xF150);
 800154e:	f24f 1050 	movw	r0, #61776	@ 0xf150
 8001552:	f7ff f925 	bl	80007a0 <fill_screen2>
  HAL_Delay(1000);
 8001556:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800155a:	f000 ffb9 	bl	80024d0 <HAL_Delay>
  fill_screen2(0xF111);
 800155e:	f24f 1011 	movw	r0, #61713	@ 0xf111
 8001562:	f7ff f91d 	bl	80007a0 <fill_screen2>
  HAL_Delay(1000);
 8001566:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800156a:	f000 ffb1 	bl	80024d0 <HAL_Delay>
  fill_screen2(0xF10F);
 800156e:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 8001572:	f7ff f915 	bl	80007a0 <fill_screen2>
  HAL_Delay(1000);
 8001576:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800157a:	f000 ffa9 	bl	80024d0 <HAL_Delay>
  fill_screen2(0xFFFF);
 800157e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001582:	f7ff f90d 	bl	80007a0 <fill_screen2>
  HAL_Delay(1000);
 8001586:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800158a:	f000 ffa1 	bl	80024d0 <HAL_Delay>
  fill_screen2(0xFFFF);
 800158e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001592:	f7ff f905 	bl	80007a0 <fill_screen2>

  print_string(36, 200, "Licenta 2025", 12, 0x1F00, 0x001F);
 8001596:	231f      	movs	r3, #31
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	230c      	movs	r3, #12
 80015a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001660 <main+0x434>)
 80015a4:	21c8      	movs	r1, #200	@ 0xc8
 80015a6:	2024      	movs	r0, #36	@ 0x24
 80015a8:	f7ff fa56 	bl	8000a58 <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	461a      	mov	r2, r3
 80015b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001664 <main+0x438>)
 80015b4:	f842 3c1c 	str.w	r3, [r2, #-28]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 80015b8:	f107 0320 	add.w	r3, r7, #32
 80015bc:	3b1c      	subs	r3, #28
 80015be:	2204      	movs	r2, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4829      	ldr	r0, [pc, #164]	@ (8001668 <main+0x43c>)
 80015c4:	f004 f90e 	bl	80057e4 <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 80015c8:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80015cc:	2250      	movs	r2, #80	@ 0x50
 80015ce:	2114      	movs	r1, #20
 80015d0:	2014      	movs	r0, #20
 80015d2:	f7ff fa85 	bl	8000ae0 <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 80015d6:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80015da:	2250      	movs	r2, #80	@ 0x50
 80015dc:	2114      	movs	r1, #20
 80015de:	2014      	movs	r0, #20
 80015e0:	f7ff fab9 	bl	8000b56 <draw_vertical_line>

  flagDmaSpiTx = 0;
 80015e4:	4b21      	ldr	r3, [pc, #132]	@ (800166c <main+0x440>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 80015ea:	221f      	movs	r2, #31
 80015ec:	2100      	movs	r1, #0
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff f816 	bl	8000620 <draw_pixel>
  draw_pixel(1,0,0xF800);
 80015f4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80015f8:	2100      	movs	r1, #0
 80015fa:	2001      	movs	r0, #1
 80015fc:	f7ff f810 	bl	8000620 <draw_pixel>
  draw_pixel(0,1,0x001F);
 8001600:	221f      	movs	r2, #31
 8001602:	2101      	movs	r1, #1
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff f80b 	bl	8000620 <draw_pixel>
  draw_pixel(1,1,0xF800);
 800160a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800160e:	2101      	movs	r1, #1
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff f805 	bl	8000620 <draw_pixel>

  HAL_Delay(50);
 8001616:	2032      	movs	r0, #50	@ 0x32
 8001618:	f000 ff5a 	bl	80024d0 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 800161c:	2001      	movs	r0, #1
 800161e:	f009 fa99 	bl	800ab54 <malloc>
 8001622:	4603      	mov	r3, r0
 8001624:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001628:	f102 0208 	add.w	r2, r2, #8
 800162c:	6013      	str	r3, [r2, #0]
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 800162e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001632:	f103 0308 	add.w	r3, r3, #8
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2302      	movs	r3, #2
 800163c:	2202      	movs	r2, #2
 800163e:	2100      	movs	r1, #0
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff fcb7 	bl	8000fb4 <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 8001646:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800164a:	f103 0308 	add.w	r3, r3, #8
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	f009 fa88 	bl	800ab64 <free>

  HAL_Delay(3000);
 8001654:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001658:	f000 ff3a 	bl	80024d0 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <main+0x430>
 8001660:	0800aed0 	.word	0x0800aed0
 8001664:	04030201 	.word	0x04030201
 8001668:	20000180 	.word	0x20000180
 800166c:	20000328 	.word	0x20000328

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b094      	sub	sp, #80	@ 0x50
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 0320 	add.w	r3, r7, #32
 800167a:	2230      	movs	r2, #48	@ 0x30
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f009 fb5c 	bl	800ad3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	4b28      	ldr	r3, [pc, #160]	@ (800173c <SystemClock_Config+0xcc>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	4a27      	ldr	r2, [pc, #156]	@ (800173c <SystemClock_Config+0xcc>)
 800169e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a4:	4b25      	ldr	r3, [pc, #148]	@ (800173c <SystemClock_Config+0xcc>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	4b22      	ldr	r3, [pc, #136]	@ (8001740 <SystemClock_Config+0xd0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a21      	ldr	r2, [pc, #132]	@ (8001740 <SystemClock_Config+0xd0>)
 80016ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001740 <SystemClock_Config+0xd0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016cc:	2301      	movs	r3, #1
 80016ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d6:	2302      	movs	r3, #2
 80016d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016e0:	2304      	movs	r3, #4
 80016e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016e4:	23a8      	movs	r3, #168	@ 0xa8
 80016e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e8:	2302      	movs	r3, #2
 80016ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016ec:	2307      	movs	r3, #7
 80016ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 ffb5 	bl	8003664 <HAL_RCC_OscConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001700:	f000 f9b2 	bl	8001a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001704:	230f      	movs	r3, #15
 8001706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001708:	2302      	movs	r3, #2
 800170a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001710:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800171a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	2105      	movs	r1, #5
 8001722:	4618      	mov	r0, r3
 8001724:	f002 fa16 	bl	8003b54 <HAL_RCC_ClockConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800172e:	f000 f99b 	bl	8001a68 <Error_Handler>
  }
}
 8001732:	bf00      	nop
 8001734:	3750      	adds	r7, #80	@ 0x50
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40007000 	.word	0x40007000

08001744 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800174a:	463b      	mov	r3, r7
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001752:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <MX_DAC_Init+0x4c>)
 8001754:	4a0f      	ldr	r2, [pc, #60]	@ (8001794 <MX_DAC_Init+0x50>)
 8001756:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001758:	480d      	ldr	r0, [pc, #52]	@ (8001790 <MX_DAC_Init+0x4c>)
 800175a:	f000 ffee 	bl	800273a <HAL_DAC_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001764:	f000 f980 	bl	8001a68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001768:	2324      	movs	r3, #36	@ 0x24
 800176a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001770:	463b      	mov	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	4619      	mov	r1, r3
 8001776:	4806      	ldr	r0, [pc, #24]	@ (8001790 <MX_DAC_Init+0x4c>)
 8001778:	f001 f8d8 	bl	800292c <HAL_DAC_ConfigChannel>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001782:	f000 f971 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000088 	.word	0x20000088
 8001794:	40007400 	.word	0x40007400

08001798 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <MX_SDIO_SD_Init+0x38>)
 800179e:	4a0d      	ldr	r2, [pc, #52]	@ (80017d4 <MX_SDIO_SD_Init+0x3c>)
 80017a0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <MX_SDIO_SD_Init+0x38>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80017a8:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <MX_SDIO_SD_Init+0x38>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80017ae:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <MX_SDIO_SD_Init+0x38>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <MX_SDIO_SD_Init+0x38>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80017ba:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <MX_SDIO_SD_Init+0x38>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <MX_SDIO_SD_Init+0x38>)
 80017c2:	2208      	movs	r2, #8
 80017c4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	200000fc 	.word	0x200000fc
 80017d4:	40012c00 	.word	0x40012c00

080017d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017dc:	4b17      	ldr	r3, [pc, #92]	@ (800183c <MX_SPI1_Init+0x64>)
 80017de:	4a18      	ldr	r2, [pc, #96]	@ (8001840 <MX_SPI1_Init+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017e2:	4b16      	ldr	r3, [pc, #88]	@ (800183c <MX_SPI1_Init+0x64>)
 80017e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ea:	4b14      	ldr	r3, [pc, #80]	@ (800183c <MX_SPI1_Init+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017f0:	4b12      	ldr	r3, [pc, #72]	@ (800183c <MX_SPI1_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <MX_SPI1_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	@ (800183c <MX_SPI1_Init+0x64>)
 80017fe:	2200      	movs	r2, #0
 8001800:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001802:	4b0e      	ldr	r3, [pc, #56]	@ (800183c <MX_SPI1_Init+0x64>)
 8001804:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001808:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <MX_SPI1_Init+0x64>)
 800180c:	2200      	movs	r2, #0
 800180e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001810:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <MX_SPI1_Init+0x64>)
 8001812:	2200      	movs	r2, #0
 8001814:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001816:	4b09      	ldr	r3, [pc, #36]	@ (800183c <MX_SPI1_Init+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800181c:	4b07      	ldr	r3, [pc, #28]	@ (800183c <MX_SPI1_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <MX_SPI1_Init+0x64>)
 8001824:	220a      	movs	r2, #10
 8001826:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001828:	4804      	ldr	r0, [pc, #16]	@ (800183c <MX_SPI1_Init+0x64>)
 800182a:	f003 fb4b 	bl	8004ec4 <HAL_SPI_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001834:	f000 f918 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000180 	.word	0x20000180
 8001840:	40013000 	.word	0x40013000

08001844 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001858:	463b      	mov	r3, r7
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001860:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <MX_TIM2_Init+0x94>)
 8001862:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001866:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001868:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <MX_TIM2_Init+0x94>)
 800186a:	2253      	movs	r2, #83	@ 0x53
 800186c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186e:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <MX_TIM2_Init+0x94>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23;
 8001874:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <MX_TIM2_Init+0x94>)
 8001876:	2217      	movs	r2, #23
 8001878:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187a:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <MX_TIM2_Init+0x94>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <MX_TIM2_Init+0x94>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001886:	4814      	ldr	r0, [pc, #80]	@ (80018d8 <MX_TIM2_Init+0x94>)
 8001888:	f004 fccc 	bl	8006224 <HAL_TIM_Base_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001892:	f000 f8e9 	bl	8001a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800189a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800189c:	f107 0308 	add.w	r3, r7, #8
 80018a0:	4619      	mov	r1, r3
 80018a2:	480d      	ldr	r0, [pc, #52]	@ (80018d8 <MX_TIM2_Init+0x94>)
 80018a4:	f004 fd76 	bl	8006394 <HAL_TIM_ConfigClockSource>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80018ae:	f000 f8db 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018b2:	2320      	movs	r3, #32
 80018b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ba:	463b      	mov	r3, r7
 80018bc:	4619      	mov	r1, r3
 80018be:	4806      	ldr	r0, [pc, #24]	@ (80018d8 <MX_TIM2_Init+0x94>)
 80018c0:	f004 ff76 	bl	80067b0 <HAL_TIMEx_MasterConfigSynchronization>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80018ca:	f000 f8cd 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000298 	.word	0x20000298

080018dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	@ (800192c <MX_USART1_UART_Init+0x50>)
 80018e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 8001914:	f004 ffc8 	bl	80068a8 <HAL_UART_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800191e:	f000 f8a3 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200002e0 	.word	0x200002e0
 800192c:	40011000 	.word	0x40011000

08001930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <MX_DMA_Init+0x78>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a1a      	ldr	r2, [pc, #104]	@ (80019a8 <MX_DMA_Init+0x78>)
 8001940:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <MX_DMA_Init+0x78>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	603b      	str	r3, [r7, #0]
 8001956:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <MX_DMA_Init+0x78>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a13      	ldr	r2, [pc, #76]	@ (80019a8 <MX_DMA_Init+0x78>)
 800195c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <MX_DMA_Init+0x78>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	2010      	movs	r0, #16
 8001974:	f000 feab 	bl	80026ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001978:	2010      	movs	r0, #16
 800197a:	f000 fec4 	bl	8002706 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	2038      	movs	r0, #56	@ 0x38
 8001984:	f000 fea3 	bl	80026ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001988:	2038      	movs	r0, #56	@ 0x38
 800198a:	f000 febc 	bl	8002706 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	203b      	movs	r0, #59	@ 0x3b
 8001994:	f000 fe9b 	bl	80026ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001998:	203b      	movs	r0, #59	@ 0x3b
 800199a:	f000 feb4 	bl	8002706 <HAL_NVIC_EnableIRQ>

}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <MX_GPIO_Init+0xb4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a25      	ldr	r2, [pc, #148]	@ (8001a60 <MX_GPIO_Init+0xb4>)
 80019cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b23      	ldr	r3, [pc, #140]	@ (8001a60 <MX_GPIO_Init+0xb4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a60 <MX_GPIO_Init+0xb4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a60 <MX_GPIO_Init+0xb4>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001a60 <MX_GPIO_Init+0xb4>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <MX_GPIO_Init+0xb4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a17      	ldr	r2, [pc, #92]	@ (8001a60 <MX_GPIO_Init+0xb4>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <MX_GPIO_Init+0xb4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <MX_GPIO_Init+0xb4>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	4a10      	ldr	r2, [pc, #64]	@ (8001a60 <MX_GPIO_Init+0xb4>)
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a26:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <MX_GPIO_Init+0xb4>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2158      	movs	r1, #88	@ 0x58
 8001a36:	480b      	ldr	r0, [pc, #44]	@ (8001a64 <MX_GPIO_Init+0xb8>)
 8001a38:	f001 fdfa 	bl	8003630 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8001a3c:	2358      	movs	r3, #88	@ 0x58
 8001a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	4804      	ldr	r0, [pc, #16]	@ (8001a64 <MX_GPIO_Init+0xb8>)
 8001a54:	f001 fc50 	bl	80032f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	@ 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020c00 	.word	0x40020c00

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <Error_Handler+0x8>

08001a74 <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	/*
	 * Functie pentru initializarea cardului SD. Se va monta
	 * sistemul de fisiere prin variabila fs declarata static
	 */

	f_mount(&fs, "", 1);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4903      	ldr	r1, [pc, #12]	@ (8001a88 <init_cardSD+0x14>)
 8001a7c:	4803      	ldr	r0, [pc, #12]	@ (8001a8c <init_cardSD+0x18>)
 8001a7e:	f008 fa1d 	bl	8009ebc <f_mount>

}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	0800aee0 	.word	0x0800aee0
 8001a8c:	2000032c 	.word	0x2000032c

08001a90 <read_file>:



void read_file(char *filePathName, char*fileData)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001a9c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001aa0:	6018      	str	r0, [r3, #0]
 8001aa2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001aa6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001aaa:	6019      	str	r1, [r3, #0]

	FRESULT res;  //stocarea starii cardului SD (util pentru depanare)
	FIL file;  //stocarea informatiilor despre fisierul deschis
	UINT byteRead;  //contor pentru numarul total de octeti cititi efectivi

	fileData = (char*)malloc(128*sizeof(char));
 8001aac:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001ab0:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 8001ab4:	2080      	movs	r0, #128	@ 0x80
 8001ab6:	f009 f84d 	bl	800ab54 <malloc>
 8001aba:	4603      	mov	r3, r0
 8001abc:	6023      	str	r3, [r4, #0]

	res = f_open(&file, filePathName, FA_READ);
 8001abe:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001ac2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001ac6:	f107 000c 	add.w	r0, r7, #12
 8001aca:	2201      	movs	r2, #1
 8001acc:	6819      	ldr	r1, [r3, #0]
 8001ace:	f008 fa3b 	bl	8009f48 <f_open>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

	if(res != FR_OK)
 8001ad8:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d131      	bne.n	8001b44 <read_file+0xb4>
	{
		return;
	}

	f_read(&file, fileData, (sizeof(fileData)*128)-1, &byteRead);
 8001ae0:	f107 0308 	add.w	r3, r7, #8
 8001ae4:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001ae8:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001aec:	f107 000c 	add.w	r0, r7, #12
 8001af0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001af4:	6809      	ldr	r1, [r1, #0]
 8001af6:	f008 fbe1 	bl	800a2bc <f_read>
	fileData[byteRead] = '\0';
 8001afa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001afe:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001b08:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]

	fileData = (char*)realloc(fileData, byteRead);
 8001b14:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001b18:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001b22:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 8001b26:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001b2a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001b2e:	4611      	mov	r1, r2
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	f009 f8cd 	bl	800acd0 <realloc>
 8001b36:	6020      	str	r0, [r4, #0]

	f_close(&file);
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f008 fd7a 	bl	800a636 <f_close>
 8001b42:	e000      	b.n	8001b46 <read_file+0xb6>
		return;
 8001b44:	bf00      	nop


}
 8001b46:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd90      	pop	{r4, r7, pc}

08001b4e <string_to_int>:

*/


static uint16_t string_to_int(char *string)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b085      	sub	sp, #20
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]

	while((*string) != '\n')
 8001b5a:	e015      	b.n	8001b88 <string_to_int+0x3a>
	{
		if(((*string) >= '0') && ((*string)<='9'))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b62:	d90e      	bls.n	8001b82 <string_to_int+0x34>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b39      	cmp	r3, #57	@ 0x39
 8001b6a:	d80a      	bhi.n	8001b82 <string_to_int+0x34>
		{
			number = number * 10 + ((*string) - '0');
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	461a      	mov	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3b30      	subs	r3, #48	@ 0x30
 8001b80:	60fb      	str	r3, [r7, #12]
		}

		string++;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	3301      	adds	r3, #1
 8001b86:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b0a      	cmp	r3, #10
 8001b8e:	d1e5      	bne.n	8001b5c <string_to_int+0xe>
	}

	return number;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	b29b      	uxth	r3, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <read_audio_file>:



void read_audio_file(char *filePathName, uint32_t *buffer)
{
 8001ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ba4:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001bae:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8001bb2:	6018      	str	r0, [r3, #0]
 8001bb4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001bb8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001bbc:	6019      	str	r1, [r3, #0]
 8001bbe:	466b      	mov	r3, sp
 8001bc0:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8001bc2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001bc6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8001bca:	f107 0018 	add.w	r0, r7, #24
 8001bce:	2201      	movs	r2, #1
 8001bd0:	6819      	ldr	r1, [r3, #0]
 8001bd2:	f008 f9b9 	bl	8009f48 <f_open>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 8001bdc:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <read_audio_file+0x48>
	{
		return;
 8001be4:	46b5      	mov	sp, r6
 8001be6:	e0f2      	b.n	8001dce <read_audio_file+0x22e>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8001be8:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd8 <read_audio_file+0x238>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	f107 0318 	add.w	r3, r7, #24
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f008 fd49 	bl	800a68a <f_lseek>


	if(flagNewAudioFile == 1)
 8001bf8:	4b78      	ldr	r3, [pc, #480]	@ (8001ddc <read_audio_file+0x23c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d017      	beq.n	8001c30 <read_audio_file+0x90>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		*/

		flagNewAudioFile = 0;
 8001c00:	4b76      	ldr	r3, [pc, #472]	@ (8001ddc <read_audio_file+0x23c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8001c06:	4b76      	ldr	r3, [pc, #472]	@ (8001de0 <read_audio_file+0x240>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	801a      	strh	r2, [r3, #0]

		currentPosition = 0;
 8001c0c:	4b72      	ldr	r3, [pc, #456]	@ (8001dd8 <read_audio_file+0x238>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul la inceputul fisierului*/
 8001c12:	4b71      	ldr	r3, [pc, #452]	@ (8001dd8 <read_audio_file+0x238>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	f107 0318 	add.w	r3, r7, #24
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f008 fd34 	bl	800a68a <f_lseek>

		fileSize = f_size(&file); /*Aflam dimensiune in octeti a fisierului*/
 8001c22:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001c26:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	4a6d      	ldr	r2, [pc, #436]	@ (8001de4 <read_audio_file+0x244>)
 8001c2e:	6013      	str	r3, [r2, #0]
	}

	const int n = 5120; /*1024 *5 caractere de prelucrat*/
 8001c30:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c34:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	unsigned int nrFrames = fileSize / n;
 8001c38:	4b6a      	ldr	r3, [pc, #424]	@ (8001de4 <read_audio_file+0x244>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8001c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c44:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

	if(fileSize%n != 0)
 8001c48:	4b66      	ldr	r3, [pc, #408]	@ (8001de4 <read_audio_file+0x244>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8001c50:	fbb3 f1f2 	udiv	r1, r3, r2
 8001c54:	fb01 f202 	mul.w	r2, r1, r2
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d004      	beq.n	8001c68 <read_audio_file+0xc8>
	{
		nrFrames++;
 8001c5e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001c62:	3301      	adds	r3, #1
 8001c64:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	}

	uint8_t index = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
	char tempBuffer[n];
 8001c6e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8001c72:	3b01      	subs	r3, #1
 8001c74:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8001c78:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4698      	mov	r8, r3
 8001c80:	4691      	mov	r9, r2
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c96:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	461c      	mov	r4, r3
 8001c9e:	4615      	mov	r5, r2
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	00eb      	lsls	r3, r5, #3
 8001caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cae:	00e2      	lsls	r2, r4, #3
 8001cb0:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8001cb4:	3307      	adds	r3, #7
 8001cb6:	08db      	lsrs	r3, r3, #3
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	ebad 0d03 	sub.w	sp, sp, r3
 8001cbe:	466b      	mov	r3, sp
 8001cc0:	3300      	adds	r3, #0
 8001cc2:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
	char nrCharBuffer[5];

	f_read(&file, tempBuffer, (sizeof(char)*n)-1, &byteRead);
 8001cc6:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8001cca:	1e5a      	subs	r2, r3, #1
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	f107 0018 	add.w	r0, r7, #24
 8001cd4:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8001cd8:	f008 faf0 	bl	800a2bc <f_read>
	tempBuffer[byteRead] = '\n';
 8001cdc:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001ce0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8001cea:	210a      	movs	r1, #10
 8001cec:	54d1      	strb	r1, [r2, r3]


	for(uint16_t i=0; i< byteRead; i++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8a7 3258 	strh.w	r3, [r7, #600]	@ 0x258
 8001cf4:	e040      	b.n	8001d78 <read_audio_file+0x1d8>
		/*
		 * Vom parcurge tempBuffer si vom transforma caracterele citite
		 * in numere zecimale de interes
		 */

		if(tempBuffer[i] != '\n')
 8001cf6:	f8b7 3258 	ldrh.w	r3, [r7, #600]	@ 0x258
 8001cfa:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	2b0a      	cmp	r3, #10
 8001d02:	d011      	beq.n	8001d28 <read_audio_file+0x188>
		{
			nrCharBuffer[index] = tempBuffer[i];
 8001d04:	f8b7 2258 	ldrh.w	r2, [r7, #600]	@ 0x258
 8001d08:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 8001d0c:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8001d10:	5c89      	ldrb	r1, [r1, r2]
 8001d12:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8001d16:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8001d1a:	54d1      	strb	r1, [r2, r3]
			index++;
 8001d1c:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 8001d20:	3301      	adds	r3, #1
 8001d22:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
 8001d26:	e022      	b.n	8001d6e <read_audio_file+0x1ce>
		else
		{
			/*Vom avea in nrCharBuffer esantionul in char si il vom
			 * converti la int*/

			nrCharBuffer[index] = '\n';
 8001d28:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 8001d2c:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8001d30:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8001d34:	210a      	movs	r1, #10
 8001d36:	54d1      	strb	r1, [r2, r3]
			*buffer = string_to_int(nrCharBuffer);
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff06 	bl	8001b4e <string_to_int>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001d4a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	601a      	str	r2, [r3, #0]
			buffer++;
 8001d52:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001d56:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001d5a:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8001d5e:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	3204      	adds	r2, #4
 8001d66:	601a      	str	r2, [r3, #0]

			index = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
	for(uint16_t i=0; i< byteRead; i++)
 8001d6e:	f8b7 3258 	ldrh.w	r3, [r7, #600]	@ 0x258
 8001d72:	3301      	adds	r3, #1
 8001d74:	f8a7 3258 	strh.w	r3, [r7, #600]	@ 0x258
 8001d78:	f8b7 2258 	ldrh.w	r2, [r7, #600]	@ 0x258
 8001d7c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001d80:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d3b5      	bcc.n	8001cf6 <read_audio_file+0x156>


	}


	if(currentFrame == nrFrames)
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <read_audio_file+0x240>)
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d102      	bne.n	8001d9e <read_audio_file+0x1fe>
	{
		flagNewAudioFile = 0;
 8001d98:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <read_audio_file+0x23c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
	}

	currentFrame++;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <read_audio_file+0x240>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	3301      	adds	r3, #1
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <read_audio_file+0x240>)
 8001da8:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 8001daa:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001dae:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4a08      	ldr	r2, [pc, #32]	@ (8001dd8 <read_audio_file+0x238>)
 8001db6:	6013      	str	r3, [r2, #0]
	currentPosition++;
 8001db8:	4b07      	ldr	r3, [pc, #28]	@ (8001dd8 <read_audio_file+0x238>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	4a06      	ldr	r2, [pc, #24]	@ (8001dd8 <read_audio_file+0x238>)
 8001dc0:	6013      	str	r3, [r2, #0]

	f_close(&file);
 8001dc2:	f107 0318 	add.w	r3, r7, #24
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f008 fc35 	bl	800a636 <f_close>
 8001dcc:	46b5      	mov	sp, r6


}
 8001dce:	f507 7719 	add.w	r7, r7, #612	@ 0x264
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dd8:	2000055c 	.word	0x2000055c
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	20000560 	.word	0x20000560
 8001de4:	20000564 	.word	0x20000564

08001de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	4b10      	ldr	r3, [pc, #64]	@ (8001e34 <HAL_MspInit+0x4c>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	4a0f      	ldr	r2, [pc, #60]	@ (8001e34 <HAL_MspInit+0x4c>)
 8001df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <HAL_MspInit+0x4c>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <HAL_MspInit+0x4c>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	4a08      	ldr	r2, [pc, #32]	@ (8001e34 <HAL_MspInit+0x4c>)
 8001e14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1a:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_MspInit+0x4c>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800

08001e38 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	@ 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a30      	ldr	r2, [pc, #192]	@ (8001f18 <HAL_DAC_MspInit+0xe0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d159      	bne.n	8001f0e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f1c <HAL_DAC_MspInit+0xe4>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	4a2e      	ldr	r2, [pc, #184]	@ (8001f1c <HAL_DAC_MspInit+0xe4>)
 8001e64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001f1c <HAL_DAC_MspInit+0xe4>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b28      	ldr	r3, [pc, #160]	@ (8001f1c <HAL_DAC_MspInit+0xe4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a27      	ldr	r2, [pc, #156]	@ (8001f1c <HAL_DAC_MspInit+0xe4>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	4b25      	ldr	r3, [pc, #148]	@ (8001f1c <HAL_DAC_MspInit+0xe4>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e92:	2310      	movs	r3, #16
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e96:	2303      	movs	r3, #3
 8001e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	481e      	ldr	r0, [pc, #120]	@ (8001f20 <HAL_DAC_MspInit+0xe8>)
 8001ea6:	f001 fa27 	bl	80032f8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f24 <HAL_DAC_MspInit+0xec>)
 8001eac:	4a1e      	ldr	r2, [pc, #120]	@ (8001f28 <HAL_DAC_MspInit+0xf0>)
 8001eae:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f24 <HAL_DAC_MspInit+0xec>)
 8001eb2:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001eb6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f24 <HAL_DAC_MspInit+0xec>)
 8001eba:	2240      	movs	r2, #64	@ 0x40
 8001ebc:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ebe:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <HAL_DAC_MspInit+0xec>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001ec4:	4b17      	ldr	r3, [pc, #92]	@ (8001f24 <HAL_DAC_MspInit+0xec>)
 8001ec6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eca:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ecc:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <HAL_DAC_MspInit+0xec>)
 8001ece:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ed2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ed4:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <HAL_DAC_MspInit+0xec>)
 8001ed6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eda:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001edc:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <HAL_DAC_MspInit+0xec>)
 8001ede:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ee2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <HAL_DAC_MspInit+0xec>)
 8001ee6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001eea:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eec:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <HAL_DAC_MspInit+0xec>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001ef2:	480c      	ldr	r0, [pc, #48]	@ (8001f24 <HAL_DAC_MspInit+0xec>)
 8001ef4:	f000 fdfe 	bl	8002af4 <HAL_DMA_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001efe:	f7ff fdb3 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a07      	ldr	r2, [pc, #28]	@ (8001f24 <HAL_DAC_MspInit+0xec>)
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	4a06      	ldr	r2, [pc, #24]	@ (8001f24 <HAL_DAC_MspInit+0xec>)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001f0e:	bf00      	nop
 8001f10:	3728      	adds	r7, #40	@ 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40007400 	.word	0x40007400
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	2000009c 	.word	0x2000009c
 8001f28:	40026088 	.word	0x40026088

08001f2c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	@ 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a31      	ldr	r2, [pc, #196]	@ (8002010 <HAL_SD_MspInit+0xe4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d15b      	bne.n	8002006 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b30      	ldr	r3, [pc, #192]	@ (8002014 <HAL_SD_MspInit+0xe8>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	4a2f      	ldr	r2, [pc, #188]	@ (8002014 <HAL_SD_MspInit+0xe8>)
 8001f58:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <HAL_SD_MspInit+0xe8>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b29      	ldr	r3, [pc, #164]	@ (8002014 <HAL_SD_MspInit+0xe8>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	4a28      	ldr	r2, [pc, #160]	@ (8002014 <HAL_SD_MspInit+0xe8>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7a:	4b26      	ldr	r3, [pc, #152]	@ (8002014 <HAL_SD_MspInit+0xe8>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <HAL_SD_MspInit+0xe8>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a21      	ldr	r2, [pc, #132]	@ (8002014 <HAL_SD_MspInit+0xe8>)
 8001f90:	f043 0308 	orr.w	r3, r3, #8
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b1f      	ldr	r3, [pc, #124]	@ (8002014 <HAL_SD_MspInit+0xe8>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fa2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001fb4:	230c      	movs	r3, #12
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4816      	ldr	r0, [pc, #88]	@ (8002018 <HAL_SD_MspInit+0xec>)
 8001fc0:	f001 f99a 	bl	80032f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001fd6:	230c      	movs	r3, #12
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480d      	ldr	r0, [pc, #52]	@ (8002018 <HAL_SD_MspInit+0xec>)
 8001fe2:	f001 f989 	bl	80032f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ff6:	230c      	movs	r3, #12
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	4806      	ldr	r0, [pc, #24]	@ (800201c <HAL_SD_MspInit+0xf0>)
 8002002:	f001 f979 	bl	80032f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	@ 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40012c00 	.word	0x40012c00
 8002014:	40023800 	.word	0x40023800
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00

08002020 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	@ 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a47      	ldr	r2, [pc, #284]	@ (800215c <HAL_SPI_MspInit+0x13c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	f040 8088 	bne.w	8002154 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	4b45      	ldr	r3, [pc, #276]	@ (8002160 <HAL_SPI_MspInit+0x140>)
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	4a44      	ldr	r2, [pc, #272]	@ (8002160 <HAL_SPI_MspInit+0x140>)
 800204e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002052:	6453      	str	r3, [r2, #68]	@ 0x44
 8002054:	4b42      	ldr	r3, [pc, #264]	@ (8002160 <HAL_SPI_MspInit+0x140>)
 8002056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002058:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002060:	2300      	movs	r3, #0
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	4b3e      	ldr	r3, [pc, #248]	@ (8002160 <HAL_SPI_MspInit+0x140>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002068:	4a3d      	ldr	r2, [pc, #244]	@ (8002160 <HAL_SPI_MspInit+0x140>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002070:	4b3b      	ldr	r3, [pc, #236]	@ (8002160 <HAL_SPI_MspInit+0x140>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800207c:	23e0      	movs	r3, #224	@ 0xe0
 800207e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800208c:	2305      	movs	r3, #5
 800208e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4619      	mov	r1, r3
 8002096:	4833      	ldr	r0, [pc, #204]	@ (8002164 <HAL_SPI_MspInit+0x144>)
 8002098:	f001 f92e 	bl	80032f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800209c:	4b32      	ldr	r3, [pc, #200]	@ (8002168 <HAL_SPI_MspInit+0x148>)
 800209e:	4a33      	ldr	r2, [pc, #204]	@ (800216c <HAL_SPI_MspInit+0x14c>)
 80020a0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80020a2:	4b31      	ldr	r3, [pc, #196]	@ (8002168 <HAL_SPI_MspInit+0x148>)
 80020a4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80020a8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002168 <HAL_SPI_MspInit+0x148>)
 80020ac:	2240      	movs	r2, #64	@ 0x40
 80020ae:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002168 <HAL_SPI_MspInit+0x148>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002168 <HAL_SPI_MspInit+0x148>)
 80020b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020bc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020be:	4b2a      	ldr	r3, [pc, #168]	@ (8002168 <HAL_SPI_MspInit+0x148>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c4:	4b28      	ldr	r3, [pc, #160]	@ (8002168 <HAL_SPI_MspInit+0x148>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80020ca:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <HAL_SPI_MspInit+0x148>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020d0:	4b25      	ldr	r3, [pc, #148]	@ (8002168 <HAL_SPI_MspInit+0x148>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020d6:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <HAL_SPI_MspInit+0x148>)
 80020d8:	2200      	movs	r2, #0
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80020dc:	4822      	ldr	r0, [pc, #136]	@ (8002168 <HAL_SPI_MspInit+0x148>)
 80020de:	f000 fd09 	bl	8002af4 <HAL_DMA_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80020e8:	f7ff fcbe 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002168 <HAL_SPI_MspInit+0x148>)
 80020f0:	649a      	str	r2, [r3, #72]	@ 0x48
 80020f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002168 <HAL_SPI_MspInit+0x148>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80020f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <HAL_SPI_MspInit+0x150>)
 80020fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002174 <HAL_SPI_MspInit+0x154>)
 80020fc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80020fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002170 <HAL_SPI_MspInit+0x150>)
 8002100:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002104:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002106:	4b1a      	ldr	r3, [pc, #104]	@ (8002170 <HAL_SPI_MspInit+0x150>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800210c:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <HAL_SPI_MspInit+0x150>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002112:	4b17      	ldr	r3, [pc, #92]	@ (8002170 <HAL_SPI_MspInit+0x150>)
 8002114:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002118:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <HAL_SPI_MspInit+0x150>)
 800211c:	2200      	movs	r2, #0
 800211e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002120:	4b13      	ldr	r3, [pc, #76]	@ (8002170 <HAL_SPI_MspInit+0x150>)
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002126:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <HAL_SPI_MspInit+0x150>)
 8002128:	2200      	movs	r2, #0
 800212a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800212c:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <HAL_SPI_MspInit+0x150>)
 800212e:	2200      	movs	r2, #0
 8002130:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002132:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <HAL_SPI_MspInit+0x150>)
 8002134:	2200      	movs	r2, #0
 8002136:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002138:	480d      	ldr	r0, [pc, #52]	@ (8002170 <HAL_SPI_MspInit+0x150>)
 800213a:	f000 fcdb 	bl	8002af4 <HAL_DMA_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8002144:	f7ff fc90 	bl	8001a68 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a09      	ldr	r2, [pc, #36]	@ (8002170 <HAL_SPI_MspInit+0x150>)
 800214c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800214e:	4a08      	ldr	r2, [pc, #32]	@ (8002170 <HAL_SPI_MspInit+0x150>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002154:	bf00      	nop
 8002156:	3728      	adds	r7, #40	@ 0x28
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40013000 	.word	0x40013000
 8002160:	40023800 	.word	0x40023800
 8002164:	40020000 	.word	0x40020000
 8002168:	200001d8 	.word	0x200001d8
 800216c:	40026458 	.word	0x40026458
 8002170:	20000238 	.word	0x20000238
 8002174:	40026410 	.word	0x40026410

08002178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002188:	d10d      	bne.n	80021a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	4a08      	ldr	r2, [pc, #32]	@ (80021b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6413      	str	r3, [r2, #64]	@ 0x40
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_TIM_Base_MspInit+0x3c>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800

080021b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	@ 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a1d      	ldr	r2, [pc, #116]	@ (800224c <HAL_UART_MspInit+0x94>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d134      	bne.n	8002244 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	4b1c      	ldr	r3, [pc, #112]	@ (8002250 <HAL_UART_MspInit+0x98>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002250 <HAL_UART_MspInit+0x98>)
 80021e4:	f043 0310 	orr.w	r3, r3, #16
 80021e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ea:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <HAL_UART_MspInit+0x98>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <HAL_UART_MspInit+0x98>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4a14      	ldr	r2, [pc, #80]	@ (8002250 <HAL_UART_MspInit+0x98>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	@ 0x30
 8002206:	4b12      	ldr	r3, [pc, #72]	@ (8002250 <HAL_UART_MspInit+0x98>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002212:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002224:	2307      	movs	r3, #7
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4619      	mov	r1, r3
 800222e:	4809      	ldr	r0, [pc, #36]	@ (8002254 <HAL_UART_MspInit+0x9c>)
 8002230:	f001 f862 	bl	80032f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	2025      	movs	r0, #37	@ 0x25
 800223a:	f000 fa48 	bl	80026ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800223e:	2025      	movs	r0, #37	@ 0x25
 8002240:	f000 fa61 	bl	8002706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002244:	bf00      	nop
 8002246:	3728      	adds	r7, #40	@ 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40011000 	.word	0x40011000
 8002250:	40023800 	.word	0x40023800
 8002254:	40020000 	.word	0x40020000

08002258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <NMI_Handler+0x4>

08002260 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <HardFault_Handler+0x4>

08002268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <MemManage_Handler+0x4>

08002270 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <BusFault_Handler+0x4>

08002278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <UsageFault_Handler+0x4>

08002280 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ae:	f000 f8ef 	bl	8002490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80022bc:	4802      	ldr	r0, [pc, #8]	@ (80022c8 <DMA1_Stream5_IRQHandler+0x10>)
 80022be:	f000 fdb1 	bl	8002e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000009c 	.word	0x2000009c

080022cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022d0:	4802      	ldr	r0, [pc, #8]	@ (80022dc <USART1_IRQHandler+0x10>)
 80022d2:	f004 fb39 	bl	8006948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200002e0 	.word	0x200002e0

080022e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80022e4:	4802      	ldr	r0, [pc, #8]	@ (80022f0 <DMA2_Stream0_IRQHandler+0x10>)
 80022e6:	f000 fd9d 	bl	8002e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000238 	.word	0x20000238

080022f4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <DMA2_Stream3_IRQHandler+0x10>)
 80022fa:	f000 fd93 	bl	8002e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200001d8 	.word	0x200001d8

08002308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002310:	4a14      	ldr	r2, [pc, #80]	@ (8002364 <_sbrk+0x5c>)
 8002312:	4b15      	ldr	r3, [pc, #84]	@ (8002368 <_sbrk+0x60>)
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800231c:	4b13      	ldr	r3, [pc, #76]	@ (800236c <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002324:	4b11      	ldr	r3, [pc, #68]	@ (800236c <_sbrk+0x64>)
 8002326:	4a12      	ldr	r2, [pc, #72]	@ (8002370 <_sbrk+0x68>)
 8002328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232a:	4b10      	ldr	r3, [pc, #64]	@ (800236c <_sbrk+0x64>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	429a      	cmp	r2, r3
 8002336:	d207      	bcs.n	8002348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002338:	f008 fd18 	bl	800ad6c <__errno>
 800233c:	4603      	mov	r3, r0
 800233e:	220c      	movs	r2, #12
 8002340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	e009      	b.n	800235c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002348:	4b08      	ldr	r3, [pc, #32]	@ (800236c <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800234e:	4b07      	ldr	r3, [pc, #28]	@ (800236c <_sbrk+0x64>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	4a05      	ldr	r2, [pc, #20]	@ (800236c <_sbrk+0x64>)
 8002358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235a:	68fb      	ldr	r3, [r7, #12]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20020000 	.word	0x20020000
 8002368:	00000400 	.word	0x00000400
 800236c:	20000568 	.word	0x20000568
 8002370:	200006f8 	.word	0x200006f8

08002374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <SystemInit+0x20>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237e:	4a05      	ldr	r2, [pc, #20]	@ (8002394 <SystemInit+0x20>)
 8002380:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002384:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800239c:	f7ff ffea 	bl	8002374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023a0:	480c      	ldr	r0, [pc, #48]	@ (80023d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023a2:	490d      	ldr	r1, [pc, #52]	@ (80023d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023a4:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a8:	e002      	b.n	80023b0 <LoopCopyDataInit>

080023aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ae:	3304      	adds	r3, #4

080023b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b4:	d3f9      	bcc.n	80023aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b6:	4a0a      	ldr	r2, [pc, #40]	@ (80023e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023b8:	4c0a      	ldr	r4, [pc, #40]	@ (80023e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023bc:	e001      	b.n	80023c2 <LoopFillZerobss>

080023be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c0:	3204      	adds	r2, #4

080023c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c4:	d3fb      	bcc.n	80023be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023c6:	f008 fcd7 	bl	800ad78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ca:	f7fe ff2f 	bl	800122c <main>
  bx  lr    
 80023ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80023dc:	0800bd48 	.word	0x0800bd48
  ldr r2, =_sbss
 80023e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80023e4:	200006f4 	.word	0x200006f4

080023e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC_IRQHandler>
	...

080023ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023f0:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <HAL_Init+0x40>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0d      	ldr	r2, [pc, #52]	@ (800242c <HAL_Init+0x40>)
 80023f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023fc:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <HAL_Init+0x40>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0a      	ldr	r2, [pc, #40]	@ (800242c <HAL_Init+0x40>)
 8002402:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002406:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002408:	4b08      	ldr	r3, [pc, #32]	@ (800242c <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a07      	ldr	r2, [pc, #28]	@ (800242c <HAL_Init+0x40>)
 800240e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002412:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002414:	2003      	movs	r0, #3
 8002416:	f000 f94f 	bl	80026b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800241a:	200f      	movs	r0, #15
 800241c:	f000 f808 	bl	8002430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002420:	f7ff fce2 	bl	8001de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023c00 	.word	0x40023c00

08002430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002438:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <HAL_InitTick+0x54>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_InitTick+0x58>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002446:	fbb3 f3f1 	udiv	r3, r3, r1
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f967 	bl	8002722 <HAL_SYSTICK_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e00e      	b.n	800247c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d80a      	bhi.n	800247a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002464:	2200      	movs	r2, #0
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f000 f92f 	bl	80026ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002470:	4a06      	ldr	r2, [pc, #24]	@ (800248c <HAL_InitTick+0x5c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	2000000c 	.word	0x2000000c
 8002488:	20000014 	.word	0x20000014
 800248c:	20000010 	.word	0x20000010

08002490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002494:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <HAL_IncTick+0x20>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_IncTick+0x24>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	4a04      	ldr	r2, [pc, #16]	@ (80024b4 <HAL_IncTick+0x24>)
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000014 	.word	0x20000014
 80024b4:	2000056c 	.word	0x2000056c

080024b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b03      	ldr	r3, [pc, #12]	@ (80024cc <HAL_GetTick+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	2000056c 	.word	0x2000056c

080024d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff ffee 	bl	80024b8 <HAL_GetTick>
 80024dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d005      	beq.n	80024f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <HAL_Delay+0x44>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024f6:	bf00      	nop
 80024f8:	f7ff ffde 	bl	80024b8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	429a      	cmp	r2, r3
 8002506:	d8f7      	bhi.n	80024f8 <HAL_Delay+0x28>
  {
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000014 	.word	0x20000014

08002518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002528:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002540:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254a:	4a04      	ldr	r2, [pc, #16]	@ (800255c <__NVIC_SetPriorityGrouping+0x44>)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	60d3      	str	r3, [r2, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002564:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <__NVIC_GetPriorityGrouping+0x18>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	f003 0307 	and.w	r3, r3, #7
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	2b00      	cmp	r3, #0
 800258c:	db0b      	blt.n	80025a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4907      	ldr	r1, [pc, #28]	@ (80025b4 <__NVIC_EnableIRQ+0x38>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2001      	movs	r0, #1
 800259e:	fa00 f202 	lsl.w	r2, r0, r2
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000e100 	.word	0xe000e100

080025b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	6039      	str	r1, [r7, #0]
 80025c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	db0a      	blt.n	80025e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	490c      	ldr	r1, [pc, #48]	@ (8002604 <__NVIC_SetPriority+0x4c>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	0112      	lsls	r2, r2, #4
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	440b      	add	r3, r1
 80025dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e0:	e00a      	b.n	80025f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4908      	ldr	r1, [pc, #32]	@ (8002608 <__NVIC_SetPriority+0x50>)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	3b04      	subs	r3, #4
 80025f0:	0112      	lsls	r2, r2, #4
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	440b      	add	r3, r1
 80025f6:	761a      	strb	r2, [r3, #24]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000e100 	.word	0xe000e100
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260c:	b480      	push	{r7}
 800260e:	b089      	sub	sp, #36	@ 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f1c3 0307 	rsb	r3, r3, #7
 8002626:	2b04      	cmp	r3, #4
 8002628:	bf28      	it	cs
 800262a:	2304      	movcs	r3, #4
 800262c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3304      	adds	r3, #4
 8002632:	2b06      	cmp	r3, #6
 8002634:	d902      	bls.n	800263c <NVIC_EncodePriority+0x30>
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3b03      	subs	r3, #3
 800263a:	e000      	b.n	800263e <NVIC_EncodePriority+0x32>
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	f04f 32ff 	mov.w	r2, #4294967295
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43da      	mvns	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	401a      	ands	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002654:	f04f 31ff 	mov.w	r1, #4294967295
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43d9      	mvns	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	4313      	orrs	r3, r2
         );
}
 8002666:	4618      	mov	r0, r3
 8002668:	3724      	adds	r7, #36	@ 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002684:	d301      	bcc.n	800268a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002686:	2301      	movs	r3, #1
 8002688:	e00f      	b.n	80026aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268a:	4a0a      	ldr	r2, [pc, #40]	@ (80026b4 <SysTick_Config+0x40>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002692:	210f      	movs	r1, #15
 8002694:	f04f 30ff 	mov.w	r0, #4294967295
 8002698:	f7ff ff8e 	bl	80025b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800269c:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <SysTick_Config+0x40>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a2:	4b04      	ldr	r3, [pc, #16]	@ (80026b4 <SysTick_Config+0x40>)
 80026a4:	2207      	movs	r2, #7
 80026a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	e000e010 	.word	0xe000e010

080026b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff29 	bl	8002518 <__NVIC_SetPriorityGrouping>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e0:	f7ff ff3e 	bl	8002560 <__NVIC_GetPriorityGrouping>
 80026e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	6978      	ldr	r0, [r7, #20]
 80026ec:	f7ff ff8e 	bl	800260c <NVIC_EncodePriority>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff5d 	bl	80025b8 <__NVIC_SetPriority>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff31 	bl	800257c <__NVIC_EnableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffa2 	bl	8002674 <SysTick_Config>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e014      	b.n	8002776 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	791b      	ldrb	r3, [r3, #4]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d105      	bne.n	8002762 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff fb6b 	bl	8001e38 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2202      	movs	r2, #2
 8002766:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0a2      	b.n	80028e2 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	795b      	ldrb	r3, [r3, #5]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_DAC_Start_DMA+0x28>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e09c      	b.n	80028e2 <HAL_DAC_Start_DMA+0x162>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2202      	movs	r2, #2
 80027b2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d129      	bne.n	800280e <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	4a4b      	ldr	r2, [pc, #300]	@ (80028ec <HAL_DAC_Start_DMA+0x16c>)
 80027c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	4a4a      	ldr	r2, [pc, #296]	@ (80028f0 <HAL_DAC_Start_DMA+0x170>)
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	4a49      	ldr	r2, [pc, #292]	@ (80028f4 <HAL_DAC_Start_DMA+0x174>)
 80027d0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80027e0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_DAC_Start_DMA+0x70>
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d005      	beq.n	80027fa <HAL_DAC_Start_DMA+0x7a>
 80027ee:	e009      	b.n	8002804 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3308      	adds	r3, #8
 80027f6:	613b      	str	r3, [r7, #16]
        break;
 80027f8:	e033      	b.n	8002862 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	330c      	adds	r3, #12
 8002800:	613b      	str	r3, [r7, #16]
        break;
 8002802:	e02e      	b.n	8002862 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	3310      	adds	r3, #16
 800280a:	613b      	str	r3, [r7, #16]
        break;
 800280c:	e029      	b.n	8002862 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4a39      	ldr	r2, [pc, #228]	@ (80028f8 <HAL_DAC_Start_DMA+0x178>)
 8002814:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4a38      	ldr	r2, [pc, #224]	@ (80028fc <HAL_DAC_Start_DMA+0x17c>)
 800281c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4a37      	ldr	r2, [pc, #220]	@ (8002900 <HAL_DAC_Start_DMA+0x180>)
 8002824:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002834:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_DAC_Start_DMA+0xc4>
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	2b04      	cmp	r3, #4
 8002840:	d005      	beq.n	800284e <HAL_DAC_Start_DMA+0xce>
 8002842:	e009      	b.n	8002858 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	3314      	adds	r3, #20
 800284a:	613b      	str	r3, [r7, #16]
        break;
 800284c:	e009      	b.n	8002862 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3318      	adds	r3, #24
 8002854:	613b      	str	r3, [r7, #16]
        break;
 8002856:	e004      	b.n	8002862 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	331c      	adds	r3, #28
 800285e:	613b      	str	r3, [r7, #16]
        break;
 8002860:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d111      	bne.n	800288c <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002876:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6898      	ldr	r0, [r3, #8]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	f000 f9e5 	bl	8002c50 <HAL_DMA_Start_IT>
 8002886:	4603      	mov	r3, r0
 8002888:	75fb      	strb	r3, [r7, #23]
 800288a:	e010      	b.n	80028ae <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800289a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	68d8      	ldr	r0, [r3, #12]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	f000 f9d3 	bl	8002c50 <HAL_DMA_Start_IT>
 80028aa:	4603      	mov	r3, r0
 80028ac:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10c      	bne.n	80028d4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6819      	ldr	r1, [r3, #0]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2201      	movs	r2, #1
 80028c8:	409a      	lsls	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e005      	b.n	80028e0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f043 0204 	orr.w	r2, r3, #4
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	080029df 	.word	0x080029df
 80028f0:	08002a01 	.word	0x08002a01
 80028f4:	08002a1d 	.word	0x08002a1d
 80028f8:	08002a87 	.word	0x08002a87
 80028fc:	08002aa9 	.word	0x08002aa9
 8002900:	08002ac5 	.word	0x08002ac5

08002904 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	@ 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_DAC_ConfigChannel+0x1c>
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e042      	b.n	80029d2 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	795b      	ldrb	r3, [r3, #5]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_DAC_ConfigChannel+0x2c>
 8002954:	2302      	movs	r3, #2
 8002956:	e03c      	b.n	80029d2 <HAL_DAC_ConfigChannel+0xa6>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2202      	movs	r2, #2
 8002962:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6819      	ldr	r1, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	22c0      	movs	r2, #192	@ 0xc0
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43da      	mvns	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	400a      	ands	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80029d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3724      	adds	r7, #36	@ 0x24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ea:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f7ff ff89 	bl	8002904 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	711a      	strb	r2, [r3, #4]
}
 80029f8:	bf00      	nop
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7fe fbfc 	bl	800120c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f043 0204 	orr.w	r2, r3, #4
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f7ff ff6e 	bl	8002918 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	711a      	strb	r2, [r3, #4]
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a92:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f7ff ffd8 	bl	8002a4a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	711a      	strb	r2, [r3, #4]
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff ffd1 	bl	8002a5e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002abc:	bf00      	nop
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f043 0204 	orr.w	r2, r3, #4
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f7ff ffc7 	bl	8002a72 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	711a      	strb	r2, [r3, #4]
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b00:	f7ff fcda 	bl	80024b8 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e099      	b.n	8002c44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b30:	e00f      	b.n	8002b52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b32:	f7ff fcc1 	bl	80024b8 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	d908      	bls.n	8002b52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e078      	b.n	8002c44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e8      	bne.n	8002b32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	4b38      	ldr	r3, [pc, #224]	@ (8002c4c <HAL_DMA_Init+0x158>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d107      	bne.n	8002bbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f023 0307 	bic.w	r3, r3, #7
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d117      	bne.n	8002c16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00e      	beq.n	8002c16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fb01 	bl	8003200 <DMA_CheckFifoParam>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2240      	movs	r2, #64	@ 0x40
 8002c08:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c12:	2301      	movs	r3, #1
 8002c14:	e016      	b.n	8002c44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fab8 	bl	8003194 <DMA_CalcBaseAndBitshift>
 8002c24:	4603      	mov	r3, r0
 8002c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2c:	223f      	movs	r2, #63	@ 0x3f
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	f010803f 	.word	0xf010803f

08002c50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_DMA_Start_IT+0x26>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e040      	b.n	8002cf8 <HAL_DMA_Start_IT+0xa8>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d12f      	bne.n	8002cea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fa4a 	bl	8003138 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	223f      	movs	r2, #63	@ 0x3f
 8002caa:	409a      	lsls	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0216 	orr.w	r2, r2, #22
 8002cbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d007      	beq.n	8002cd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0208 	orr.w	r2, r2, #8
 8002cd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e005      	b.n	8002cf6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d0e:	f7ff fbd3 	bl	80024b8 <HAL_GetTick>
 8002d12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d008      	beq.n	8002d32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2280      	movs	r2, #128	@ 0x80
 8002d24:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e052      	b.n	8002dd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0216 	bic.w	r2, r2, #22
 8002d40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695a      	ldr	r2, [r3, #20]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d103      	bne.n	8002d62 <HAL_DMA_Abort+0x62>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0208 	bic.w	r2, r2, #8
 8002d70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d82:	e013      	b.n	8002dac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d84:	f7ff fb98 	bl	80024b8 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d90c      	bls.n	8002dac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e015      	b.n	8002dd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1e4      	bne.n	8002d84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbe:	223f      	movs	r2, #63	@ 0x3f
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d004      	beq.n	8002dfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2280      	movs	r2, #128	@ 0x80
 8002df8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00c      	b.n	8002e18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2205      	movs	r2, #5
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0201 	bic.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e30:	4b8e      	ldr	r3, [pc, #568]	@ (800306c <HAL_DMA_IRQHandler+0x248>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a8e      	ldr	r2, [pc, #568]	@ (8003070 <HAL_DMA_IRQHandler+0x24c>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	0a9b      	lsrs	r3, r3, #10
 8002e3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4e:	2208      	movs	r2, #8
 8002e50:	409a      	lsls	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01a      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d013      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0204 	bic.w	r2, r2, #4
 8002e76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e88:	f043 0201 	orr.w	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e94:	2201      	movs	r2, #1
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d012      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ebe:	f043 0202 	orr.w	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eca:	2204      	movs	r2, #4
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d012      	beq.n	8002efc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	2204      	movs	r2, #4
 8002eea:	409a      	lsls	r2, r3
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef4:	f043 0204 	orr.w	r2, r3, #4
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f00:	2210      	movs	r2, #16
 8002f02:	409a      	lsls	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d043      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d03c      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1e:	2210      	movs	r2, #16
 8002f20:	409a      	lsls	r2, r3
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d018      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d108      	bne.n	8002f54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d024      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	4798      	blx	r3
 8002f52:	e01f      	b.n	8002f94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01b      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	4798      	blx	r3
 8002f64:	e016      	b.n	8002f94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d107      	bne.n	8002f84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0208 	bic.w	r2, r2, #8
 8002f82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f98:	2220      	movs	r2, #32
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 808f 	beq.w	80030c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8087 	beq.w	80030c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fba:	2220      	movs	r2, #32
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d136      	bne.n	800303c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0216 	bic.w	r2, r2, #22
 8002fdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <HAL_DMA_IRQHandler+0x1da>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0208 	bic.w	r2, r2, #8
 800300c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003012:	223f      	movs	r2, #63	@ 0x3f
 8003014:	409a      	lsls	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800302e:	2b00      	cmp	r3, #0
 8003030:	d07e      	beq.n	8003130 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
        }
        return;
 800303a:	e079      	b.n	8003130 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01d      	beq.n	8003086 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10d      	bne.n	8003074 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305c:	2b00      	cmp	r3, #0
 800305e:	d031      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
 8003068:	e02c      	b.n	80030c4 <HAL_DMA_IRQHandler+0x2a0>
 800306a:	bf00      	nop
 800306c:	2000000c 	.word	0x2000000c
 8003070:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003078:	2b00      	cmp	r3, #0
 800307a:	d023      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
 8003084:	e01e      	b.n	80030c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10f      	bne.n	80030b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0210 	bic.w	r2, r2, #16
 80030a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d032      	beq.n	8003132 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d022      	beq.n	800311e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2205      	movs	r2, #5
 80030dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0201 	bic.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	3301      	adds	r3, #1
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d307      	bcc.n	800310c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f2      	bne.n	80030f0 <HAL_DMA_IRQHandler+0x2cc>
 800310a:	e000      	b.n	800310e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800310c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	4798      	blx	r3
 800312e:	e000      	b.n	8003132 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003130:	bf00      	nop
    }
  }
}
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003154:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b40      	cmp	r3, #64	@ 0x40
 8003164:	d108      	bne.n	8003178 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003176:	e007      	b.n	8003188 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	60da      	str	r2, [r3, #12]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	3b10      	subs	r3, #16
 80031a4:	4a14      	ldr	r2, [pc, #80]	@ (80031f8 <DMA_CalcBaseAndBitshift+0x64>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031ae:	4a13      	ldr	r2, [pc, #76]	@ (80031fc <DMA_CalcBaseAndBitshift+0x68>)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d909      	bls.n	80031d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031ca:	f023 0303 	bic.w	r3, r3, #3
 80031ce:	1d1a      	adds	r2, r3, #4
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80031d4:	e007      	b.n	80031e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80031de:	f023 0303 	bic.w	r3, r3, #3
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	aaaaaaab 	.word	0xaaaaaaab
 80031fc:	0800bc9c 	.word	0x0800bc9c

08003200 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11f      	bne.n	800325a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d856      	bhi.n	80032ce <DMA_CheckFifoParam+0xce>
 8003220:	a201      	add	r2, pc, #4	@ (adr r2, 8003228 <DMA_CheckFifoParam+0x28>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	08003239 	.word	0x08003239
 800322c:	0800324b 	.word	0x0800324b
 8003230:	08003239 	.word	0x08003239
 8003234:	080032cf 	.word	0x080032cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d046      	beq.n	80032d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003248:	e043      	b.n	80032d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003252:	d140      	bne.n	80032d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003258:	e03d      	b.n	80032d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003262:	d121      	bne.n	80032a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d837      	bhi.n	80032da <DMA_CheckFifoParam+0xda>
 800326a:	a201      	add	r2, pc, #4	@ (adr r2, 8003270 <DMA_CheckFifoParam+0x70>)
 800326c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003270:	08003281 	.word	0x08003281
 8003274:	08003287 	.word	0x08003287
 8003278:	08003281 	.word	0x08003281
 800327c:	08003299 	.word	0x08003299
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      break;
 8003284:	e030      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d025      	beq.n	80032de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003296:	e022      	b.n	80032de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032a0:	d11f      	bne.n	80032e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032a6:	e01c      	b.n	80032e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d903      	bls.n	80032b6 <DMA_CheckFifoParam+0xb6>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d003      	beq.n	80032bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032b4:	e018      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ba:	e015      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00e      	beq.n	80032e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
      break;
 80032cc:	e00b      	b.n	80032e6 <DMA_CheckFifoParam+0xe6>
      break;
 80032ce:	bf00      	nop
 80032d0:	e00a      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032d2:	bf00      	nop
 80032d4:	e008      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032d6:	bf00      	nop
 80032d8:	e006      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032da:	bf00      	nop
 80032dc:	e004      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032de:	bf00      	nop
 80032e0:	e002      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80032e2:	bf00      	nop
 80032e4:	e000      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032e6:	bf00      	nop
    }
  } 
  
  return status; 
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop

080032f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	@ 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	e16b      	b.n	80035ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003314:	2201      	movs	r2, #1
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	429a      	cmp	r2, r3
 800332e:	f040 815a 	bne.w	80035e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b01      	cmp	r3, #1
 800333c:	d005      	beq.n	800334a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003346:	2b02      	cmp	r3, #2
 8003348:	d130      	bne.n	80033ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003380:	2201      	movs	r2, #1
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 0201 	and.w	r2, r3, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d017      	beq.n	80033e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d123      	bne.n	800343c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	08da      	lsrs	r2, r3, #3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3208      	adds	r2, #8
 80033fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	220f      	movs	r2, #15
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	08da      	lsrs	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3208      	adds	r2, #8
 8003436:	69b9      	ldr	r1, [r7, #24]
 8003438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0203 	and.w	r2, r3, #3
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80b4 	beq.w	80035e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	4b60      	ldr	r3, [pc, #384]	@ (8003604 <HAL_GPIO_Init+0x30c>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	4a5f      	ldr	r2, [pc, #380]	@ (8003604 <HAL_GPIO_Init+0x30c>)
 8003488:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800348c:	6453      	str	r3, [r2, #68]	@ 0x44
 800348e:	4b5d      	ldr	r3, [pc, #372]	@ (8003604 <HAL_GPIO_Init+0x30c>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800349a:	4a5b      	ldr	r2, [pc, #364]	@ (8003608 <HAL_GPIO_Init+0x310>)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	3302      	adds	r3, #2
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	220f      	movs	r2, #15
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a52      	ldr	r2, [pc, #328]	@ (800360c <HAL_GPIO_Init+0x314>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d02b      	beq.n	800351e <HAL_GPIO_Init+0x226>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a51      	ldr	r2, [pc, #324]	@ (8003610 <HAL_GPIO_Init+0x318>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d025      	beq.n	800351a <HAL_GPIO_Init+0x222>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a50      	ldr	r2, [pc, #320]	@ (8003614 <HAL_GPIO_Init+0x31c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d01f      	beq.n	8003516 <HAL_GPIO_Init+0x21e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4f      	ldr	r2, [pc, #316]	@ (8003618 <HAL_GPIO_Init+0x320>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d019      	beq.n	8003512 <HAL_GPIO_Init+0x21a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4e      	ldr	r2, [pc, #312]	@ (800361c <HAL_GPIO_Init+0x324>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <HAL_GPIO_Init+0x216>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4d      	ldr	r2, [pc, #308]	@ (8003620 <HAL_GPIO_Init+0x328>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00d      	beq.n	800350a <HAL_GPIO_Init+0x212>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4c      	ldr	r2, [pc, #304]	@ (8003624 <HAL_GPIO_Init+0x32c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d007      	beq.n	8003506 <HAL_GPIO_Init+0x20e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003628 <HAL_GPIO_Init+0x330>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_GPIO_Init+0x20a>
 80034fe:	2307      	movs	r3, #7
 8003500:	e00e      	b.n	8003520 <HAL_GPIO_Init+0x228>
 8003502:	2308      	movs	r3, #8
 8003504:	e00c      	b.n	8003520 <HAL_GPIO_Init+0x228>
 8003506:	2306      	movs	r3, #6
 8003508:	e00a      	b.n	8003520 <HAL_GPIO_Init+0x228>
 800350a:	2305      	movs	r3, #5
 800350c:	e008      	b.n	8003520 <HAL_GPIO_Init+0x228>
 800350e:	2304      	movs	r3, #4
 8003510:	e006      	b.n	8003520 <HAL_GPIO_Init+0x228>
 8003512:	2303      	movs	r3, #3
 8003514:	e004      	b.n	8003520 <HAL_GPIO_Init+0x228>
 8003516:	2302      	movs	r3, #2
 8003518:	e002      	b.n	8003520 <HAL_GPIO_Init+0x228>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_GPIO_Init+0x228>
 800351e:	2300      	movs	r3, #0
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	f002 0203 	and.w	r2, r2, #3
 8003526:	0092      	lsls	r2, r2, #2
 8003528:	4093      	lsls	r3, r2
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003530:	4935      	ldr	r1, [pc, #212]	@ (8003608 <HAL_GPIO_Init+0x310>)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	089b      	lsrs	r3, r3, #2
 8003536:	3302      	adds	r3, #2
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800353e:	4b3b      	ldr	r3, [pc, #236]	@ (800362c <HAL_GPIO_Init+0x334>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003562:	4a32      	ldr	r2, [pc, #200]	@ (800362c <HAL_GPIO_Init+0x334>)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003568:	4b30      	ldr	r3, [pc, #192]	@ (800362c <HAL_GPIO_Init+0x334>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800358c:	4a27      	ldr	r2, [pc, #156]	@ (800362c <HAL_GPIO_Init+0x334>)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003592:	4b26      	ldr	r3, [pc, #152]	@ (800362c <HAL_GPIO_Init+0x334>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	43db      	mvns	r3, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035b6:	4a1d      	ldr	r2, [pc, #116]	@ (800362c <HAL_GPIO_Init+0x334>)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035bc:	4b1b      	ldr	r3, [pc, #108]	@ (800362c <HAL_GPIO_Init+0x334>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e0:	4a12      	ldr	r2, [pc, #72]	@ (800362c <HAL_GPIO_Init+0x334>)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3301      	adds	r3, #1
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	2b0f      	cmp	r3, #15
 80035f0:	f67f ae90 	bls.w	8003314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	3724      	adds	r7, #36	@ 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800
 8003608:	40013800 	.word	0x40013800
 800360c:	40020000 	.word	0x40020000
 8003610:	40020400 	.word	0x40020400
 8003614:	40020800 	.word	0x40020800
 8003618:	40020c00 	.word	0x40020c00
 800361c:	40021000 	.word	0x40021000
 8003620:	40021400 	.word	0x40021400
 8003624:	40021800 	.word	0x40021800
 8003628:	40021c00 	.word	0x40021c00
 800362c:	40013c00 	.word	0x40013c00

08003630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	807b      	strh	r3, [r7, #2]
 800363c:	4613      	mov	r3, r2
 800363e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003640:	787b      	ldrb	r3, [r7, #1]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003646:	887a      	ldrh	r2, [r7, #2]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800364c:	e003      	b.n	8003656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800364e:	887b      	ldrh	r3, [r7, #2]
 8003650:	041a      	lsls	r2, r3, #16
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	619a      	str	r2, [r3, #24]
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e267      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d075      	beq.n	800376e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003682:	4b88      	ldr	r3, [pc, #544]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b04      	cmp	r3, #4
 800368c:	d00c      	beq.n	80036a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800368e:	4b85      	ldr	r3, [pc, #532]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003696:	2b08      	cmp	r3, #8
 8003698:	d112      	bne.n	80036c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369a:	4b82      	ldr	r3, [pc, #520]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036a6:	d10b      	bne.n	80036c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a8:	4b7e      	ldr	r3, [pc, #504]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d05b      	beq.n	800376c <HAL_RCC_OscConfig+0x108>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d157      	bne.n	800376c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e242      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c8:	d106      	bne.n	80036d8 <HAL_RCC_OscConfig+0x74>
 80036ca:	4b76      	ldr	r3, [pc, #472]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a75      	ldr	r2, [pc, #468]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e01d      	b.n	8003714 <HAL_RCC_OscConfig+0xb0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0x98>
 80036e2:	4b70      	ldr	r3, [pc, #448]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a6f      	ldr	r2, [pc, #444]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	4b6d      	ldr	r3, [pc, #436]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a6c      	ldr	r2, [pc, #432]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	e00b      	b.n	8003714 <HAL_RCC_OscConfig+0xb0>
 80036fc:	4b69      	ldr	r3, [pc, #420]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a68      	ldr	r2, [pc, #416]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b66      	ldr	r3, [pc, #408]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a65      	ldr	r2, [pc, #404]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 800370e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d013      	beq.n	8003744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe fecc 	bl	80024b8 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003724:	f7fe fec8 	bl	80024b8 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	@ 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e207      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b5b      	ldr	r3, [pc, #364]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0xc0>
 8003742:	e014      	b.n	800376e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe feb8 	bl	80024b8 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800374c:	f7fe feb4 	bl	80024b8 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	@ 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e1f3      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375e:	4b51      	ldr	r3, [pc, #324]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0xe8>
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d063      	beq.n	8003842 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800377a:	4b4a      	ldr	r3, [pc, #296]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003786:	4b47      	ldr	r3, [pc, #284]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800378e:	2b08      	cmp	r3, #8
 8003790:	d11c      	bne.n	80037cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003792:	4b44      	ldr	r3, [pc, #272]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d116      	bne.n	80037cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379e:	4b41      	ldr	r3, [pc, #260]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_RCC_OscConfig+0x152>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e1c7      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b6:	4b3b      	ldr	r3, [pc, #236]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4937      	ldr	r1, [pc, #220]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ca:	e03a      	b.n	8003842 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d020      	beq.n	8003816 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d4:	4b34      	ldr	r3, [pc, #208]	@ (80038a8 <HAL_RCC_OscConfig+0x244>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fe fe6d 	bl	80024b8 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e2:	f7fe fe69 	bl	80024b8 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e1a8      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f4:	4b2b      	ldr	r3, [pc, #172]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003800:	4b28      	ldr	r3, [pc, #160]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4925      	ldr	r1, [pc, #148]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003810:	4313      	orrs	r3, r2
 8003812:	600b      	str	r3, [r1, #0]
 8003814:	e015      	b.n	8003842 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003816:	4b24      	ldr	r3, [pc, #144]	@ (80038a8 <HAL_RCC_OscConfig+0x244>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381c:	f7fe fe4c 	bl	80024b8 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003824:	f7fe fe48 	bl	80024b8 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e187      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003836:	4b1b      	ldr	r3, [pc, #108]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d036      	beq.n	80038bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d016      	beq.n	8003884 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003856:	4b15      	ldr	r3, [pc, #84]	@ (80038ac <HAL_RCC_OscConfig+0x248>)
 8003858:	2201      	movs	r2, #1
 800385a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fe fe2c 	bl	80024b8 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003864:	f7fe fe28 	bl	80024b8 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e167      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003876:	4b0b      	ldr	r3, [pc, #44]	@ (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0x200>
 8003882:	e01b      	b.n	80038bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003884:	4b09      	ldr	r3, [pc, #36]	@ (80038ac <HAL_RCC_OscConfig+0x248>)
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388a:	f7fe fe15 	bl	80024b8 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003890:	e00e      	b.n	80038b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003892:	f7fe fe11 	bl	80024b8 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d907      	bls.n	80038b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e150      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
 80038a4:	40023800 	.word	0x40023800
 80038a8:	42470000 	.word	0x42470000
 80038ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b0:	4b88      	ldr	r3, [pc, #544]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1ea      	bne.n	8003892 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8097 	beq.w	80039f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ce:	4b81      	ldr	r3, [pc, #516]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10f      	bne.n	80038fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	4b7d      	ldr	r3, [pc, #500]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80038ea:	4b7a      	ldr	r3, [pc, #488]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fa:	4b77      	ldr	r3, [pc, #476]	@ (8003ad8 <HAL_RCC_OscConfig+0x474>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d118      	bne.n	8003938 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003906:	4b74      	ldr	r3, [pc, #464]	@ (8003ad8 <HAL_RCC_OscConfig+0x474>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a73      	ldr	r2, [pc, #460]	@ (8003ad8 <HAL_RCC_OscConfig+0x474>)
 800390c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003912:	f7fe fdd1 	bl	80024b8 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391a:	f7fe fdcd 	bl	80024b8 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e10c      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad8 <HAL_RCC_OscConfig+0x474>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d106      	bne.n	800394e <HAL_RCC_OscConfig+0x2ea>
 8003940:	4b64      	ldr	r3, [pc, #400]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003944:	4a63      	ldr	r2, [pc, #396]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6713      	str	r3, [r2, #112]	@ 0x70
 800394c:	e01c      	b.n	8003988 <HAL_RCC_OscConfig+0x324>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b05      	cmp	r3, #5
 8003954:	d10c      	bne.n	8003970 <HAL_RCC_OscConfig+0x30c>
 8003956:	4b5f      	ldr	r3, [pc, #380]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 800395c:	f043 0304 	orr.w	r3, r3, #4
 8003960:	6713      	str	r3, [r2, #112]	@ 0x70
 8003962:	4b5c      	ldr	r3, [pc, #368]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003966:	4a5b      	ldr	r2, [pc, #364]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6713      	str	r3, [r2, #112]	@ 0x70
 800396e:	e00b      	b.n	8003988 <HAL_RCC_OscConfig+0x324>
 8003970:	4b58      	ldr	r3, [pc, #352]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003974:	4a57      	ldr	r2, [pc, #348]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	6713      	str	r3, [r2, #112]	@ 0x70
 800397c:	4b55      	ldr	r3, [pc, #340]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003980:	4a54      	ldr	r2, [pc, #336]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003982:	f023 0304 	bic.w	r3, r3, #4
 8003986:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d015      	beq.n	80039bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003990:	f7fe fd92 	bl	80024b8 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003996:	e00a      	b.n	80039ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003998:	f7fe fd8e 	bl	80024b8 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e0cb      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ae:	4b49      	ldr	r3, [pc, #292]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0ee      	beq.n	8003998 <HAL_RCC_OscConfig+0x334>
 80039ba:	e014      	b.n	80039e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039bc:	f7fe fd7c 	bl	80024b8 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c2:	e00a      	b.n	80039da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f7fe fd78 	bl	80024b8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e0b5      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039da:	4b3e      	ldr	r3, [pc, #248]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1ee      	bne.n	80039c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d105      	bne.n	80039f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ec:	4b39      	ldr	r3, [pc, #228]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f0:	4a38      	ldr	r2, [pc, #224]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80a1 	beq.w	8003b44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a02:	4b34      	ldr	r3, [pc, #208]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d05c      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d141      	bne.n	8003a9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a16:	4b31      	ldr	r3, [pc, #196]	@ (8003adc <HAL_RCC_OscConfig+0x478>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fe fd4c 	bl	80024b8 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a24:	f7fe fd48 	bl	80024b8 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e087      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a36:	4b27      	ldr	r3, [pc, #156]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69da      	ldr	r2, [r3, #28]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a50:	019b      	lsls	r3, r3, #6
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	041b      	lsls	r3, r3, #16
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	491b      	ldr	r1, [pc, #108]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003adc <HAL_RCC_OscConfig+0x478>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a72:	f7fe fd21 	bl	80024b8 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7a:	f7fe fd1d 	bl	80024b8 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e05c      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8c:	4b11      	ldr	r3, [pc, #68]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x416>
 8003a98:	e054      	b.n	8003b44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9a:	4b10      	ldr	r3, [pc, #64]	@ (8003adc <HAL_RCC_OscConfig+0x478>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fd0a 	bl	80024b8 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fe fd06 	bl	80024b8 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e045      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aba:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x444>
 8003ac6:	e03d      	b.n	8003b44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e038      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b50 <HAL_RCC_OscConfig+0x4ec>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d028      	beq.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d121      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d11a      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b10:	4013      	ands	r3, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d111      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b26:	085b      	lsrs	r3, r3, #1
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800

08003b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0cc      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b68:	4b68      	ldr	r3, [pc, #416]	@ (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d90c      	bls.n	8003b90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b76:	4b65      	ldr	r3, [pc, #404]	@ (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b63      	ldr	r3, [pc, #396]	@ (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0b8      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba8:	4b59      	ldr	r3, [pc, #356]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4a58      	ldr	r2, [pc, #352]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc0:	4b53      	ldr	r3, [pc, #332]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4a52      	ldr	r2, [pc, #328]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003bca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bcc:	4b50      	ldr	r3, [pc, #320]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	494d      	ldr	r1, [pc, #308]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d044      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	4b47      	ldr	r3, [pc, #284]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d119      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e07f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d003      	beq.n	8003c12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c12:	4b3f      	ldr	r3, [pc, #252]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e06f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c22:	4b3b      	ldr	r3, [pc, #236]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e067      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c32:	4b37      	ldr	r3, [pc, #220]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f023 0203 	bic.w	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4934      	ldr	r1, [pc, #208]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c44:	f7fe fc38 	bl	80024b8 <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4c:	f7fe fc34 	bl	80024b8 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e04f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	4b2b      	ldr	r3, [pc, #172]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 020c 	and.w	r2, r3, #12
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d1eb      	bne.n	8003c4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c74:	4b25      	ldr	r3, [pc, #148]	@ (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d20c      	bcs.n	8003c9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b22      	ldr	r3, [pc, #136]	@ (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b20      	ldr	r3, [pc, #128]	@ (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e032      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca8:	4b19      	ldr	r3, [pc, #100]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4916      	ldr	r1, [pc, #88]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cc6:	4b12      	ldr	r3, [pc, #72]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	490e      	ldr	r1, [pc, #56]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cda:	f000 f821 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	490a      	ldr	r1, [pc, #40]	@ (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	5ccb      	ldrb	r3, [r1, r3]
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	4a09      	ldr	r2, [pc, #36]	@ (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003cf6:	4b09      	ldr	r3, [pc, #36]	@ (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe fb98 	bl	8002430 <HAL_InitTick>

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023c00 	.word	0x40023c00
 8003d10:	40023800 	.word	0x40023800
 8003d14:	0800bc84 	.word	0x0800bc84
 8003d18:	2000000c 	.word	0x2000000c
 8003d1c:	20000010 	.word	0x20000010

08003d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d24:	b094      	sub	sp, #80	@ 0x50
 8003d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d38:	4b79      	ldr	r3, [pc, #484]	@ (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d00d      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0x40>
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	f200 80e1 	bhi.w	8003f0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0x34>
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d52:	e0db      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d54:	4b73      	ldr	r3, [pc, #460]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d58:	e0db      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d5a:	4b73      	ldr	r3, [pc, #460]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d5e:	e0d8      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d60:	4b6f      	ldr	r3, [pc, #444]	@ (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d6a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d063      	beq.n	8003e3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d76:	4b6a      	ldr	r3, [pc, #424]	@ (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	099b      	lsrs	r3, r3, #6
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d92:	4622      	mov	r2, r4
 8003d94:	462b      	mov	r3, r5
 8003d96:	f04f 0000 	mov.w	r0, #0
 8003d9a:	f04f 0100 	mov.w	r1, #0
 8003d9e:	0159      	lsls	r1, r3, #5
 8003da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da4:	0150      	lsls	r0, r2, #5
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4621      	mov	r1, r4
 8003dac:	1a51      	subs	r1, r2, r1
 8003dae:	6139      	str	r1, [r7, #16]
 8003db0:	4629      	mov	r1, r5
 8003db2:	eb63 0301 	sbc.w	r3, r3, r1
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dc4:	4659      	mov	r1, fp
 8003dc6:	018b      	lsls	r3, r1, #6
 8003dc8:	4651      	mov	r1, sl
 8003dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dce:	4651      	mov	r1, sl
 8003dd0:	018a      	lsls	r2, r1, #6
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	ebb2 0801 	subs.w	r8, r2, r1
 8003dd8:	4659      	mov	r1, fp
 8003dda:	eb63 0901 	sbc.w	r9, r3, r1
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003df2:	4690      	mov	r8, r2
 8003df4:	4699      	mov	r9, r3
 8003df6:	4623      	mov	r3, r4
 8003df8:	eb18 0303 	adds.w	r3, r8, r3
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	462b      	mov	r3, r5
 8003e00:	eb49 0303 	adc.w	r3, r9, r3
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e12:	4629      	mov	r1, r5
 8003e14:	024b      	lsls	r3, r1, #9
 8003e16:	4621      	mov	r1, r4
 8003e18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	024a      	lsls	r2, r1, #9
 8003e20:	4610      	mov	r0, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e26:	2200      	movs	r2, #0
 8003e28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e30:	f7fc f9ca 	bl	80001c8 <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4613      	mov	r3, r2
 8003e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e3c:	e058      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3e:	4b38      	ldr	r3, [pc, #224]	@ (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	2200      	movs	r2, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	4611      	mov	r1, r2
 8003e4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e4e:	623b      	str	r3, [r7, #32]
 8003e50:	2300      	movs	r3, #0
 8003e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e58:	4642      	mov	r2, r8
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	f04f 0000 	mov.w	r0, #0
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	0159      	lsls	r1, r3, #5
 8003e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e6a:	0150      	lsls	r0, r2, #5
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4641      	mov	r1, r8
 8003e72:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e76:	4649      	mov	r1, r9
 8003e78:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e90:	ebb2 040a 	subs.w	r4, r2, sl
 8003e94:	eb63 050b 	sbc.w	r5, r3, fp
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	00eb      	lsls	r3, r5, #3
 8003ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ea6:	00e2      	lsls	r2, r4, #3
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	461d      	mov	r5, r3
 8003eac:	4643      	mov	r3, r8
 8003eae:	18e3      	adds	r3, r4, r3
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	eb45 0303 	adc.w	r3, r5, r3
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	028b      	lsls	r3, r1, #10
 8003eca:	4621      	mov	r1, r4
 8003ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	028a      	lsls	r2, r1, #10
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003eda:	2200      	movs	r2, #0
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	61fa      	str	r2, [r7, #28]
 8003ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee4:	f7fc f970 	bl	80001c8 <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4613      	mov	r3, r2
 8003eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	3301      	adds	r3, #1
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f0a:	e002      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f0c:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3750      	adds	r7, #80	@ 0x50
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	00f42400 	.word	0x00f42400
 8003f28:	007a1200 	.word	0x007a1200

08003f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f30:	4b03      	ldr	r3, [pc, #12]	@ (8003f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	2000000c 	.word	0x2000000c

08003f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f48:	f7ff fff0 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b05      	ldr	r3, [pc, #20]	@ (8003f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	0a9b      	lsrs	r3, r3, #10
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4903      	ldr	r1, [pc, #12]	@ (8003f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	0800bc94 	.word	0x0800bc94

08003f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f70:	f7ff ffdc 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b05      	ldr	r3, [pc, #20]	@ (8003f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	0b5b      	lsrs	r3, r3, #13
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	4903      	ldr	r1, [pc, #12]	@ (8003f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	0800bc94 	.word	0x0800bc94

08003f94 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e022      	b.n	8003fec <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d105      	bne.n	8003fbe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7fd ffb7 	bl	8001f2c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f814 	bl	8003ff4 <HAL_SD_InitCard>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e00a      	b.n	8003fec <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003ff4:	b5b0      	push	{r4, r5, r7, lr}
 8003ff6:	b08e      	sub	sp, #56	@ 0x38
 8003ff8:	af04      	add	r7, sp, #16
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004004:	2300      	movs	r3, #0
 8004006:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800400c:	2300      	movs	r3, #0
 800400e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004010:	2376      	movs	r3, #118	@ 0x76
 8004012:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681d      	ldr	r5, [r3, #0]
 8004018:	466c      	mov	r4, sp
 800401a:	f107 0314 	add.w	r3, r7, #20
 800401e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004022:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004026:	f107 0308 	add.w	r3, r7, #8
 800402a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800402c:	4628      	mov	r0, r5
 800402e:	f003 fb59 	bl	80076e4 <SDIO_Init>
 8004032:	4603      	mov	r3, r0
 8004034:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e04f      	b.n	80040e4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004044:	4b29      	ldr	r3, [pc, #164]	@ (80040ec <HAL_SD_InitCard+0xf8>)
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f003 fb91 	bl	8007776 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004054:	4b25      	ldr	r3, [pc, #148]	@ (80040ec <HAL_SD_InitCard+0xf8>)
 8004056:	2201      	movs	r2, #1
 8004058:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800405a:	2002      	movs	r0, #2
 800405c:	f7fe fa38 	bl	80024d0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fe79 	bl	8004d58 <SD_PowerON>
 8004066:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e02e      	b.n	80040e4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fd98 	bl	8004bbc <SD_InitCard>
 800408c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00b      	beq.n	80040ac <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e01b      	b.n	80040e4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80040b4:	4618      	mov	r0, r3
 80040b6:	f003 fbf0 	bl	800789a <SDMMC_CmdBlockLength>
 80040ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00f      	beq.n	80040e2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a0a      	ldr	r2, [pc, #40]	@ (80040f0 <HAL_SD_InitCard+0xfc>)
 80040c8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3728      	adds	r7, #40	@ 0x28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bdb0      	pop	{r4, r5, r7, pc}
 80040ec:	422580a0 	.word	0x422580a0
 80040f0:	004005ff 	.word	0x004005ff

080040f4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b092      	sub	sp, #72	@ 0x48
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004102:	f7fe f9d9 	bl	80024b8 <HAL_GetTick>
 8004106:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d107      	bne.n	8004126 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e1c5      	b.n	80044b2 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b01      	cmp	r3, #1
 8004130:	f040 81b8 	bne.w	80044a4 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800413a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	441a      	add	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004144:	429a      	cmp	r2, r3
 8004146:	d907      	bls.n	8004158 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e1ac      	b.n	80044b2 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2203      	movs	r2, #3
 800415c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2200      	movs	r2, #0
 8004166:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416c:	2b01      	cmp	r3, #1
 800416e:	d002      	beq.n	8004176 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004172:	025b      	lsls	r3, r3, #9
 8004174:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004176:	f04f 33ff 	mov.w	r3, #4294967295
 800417a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	025b      	lsls	r3, r3, #9
 8004180:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004182:	2390      	movs	r3, #144	@ 0x90
 8004184:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004186:	2302      	movs	r3, #2
 8004188:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800418a:	2300      	movs	r3, #0
 800418c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800418e:	2301      	movs	r3, #1
 8004190:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f107 0214 	add.w	r2, r7, #20
 800419a:	4611      	mov	r1, r2
 800419c:	4618      	mov	r0, r3
 800419e:	f003 fb50 	bl	8007842 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d90a      	bls.n	80041be <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2202      	movs	r2, #2
 80041ac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041b4:	4618      	mov	r0, r3
 80041b6:	f003 fbb4 	bl	8007922 <SDMMC_CmdReadMultiBlock>
 80041ba:	6478      	str	r0, [r7, #68]	@ 0x44
 80041bc:	e009      	b.n	80041d2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041ca:	4618      	mov	r0, r3
 80041cc:	f003 fb87 	bl	80078de <SDMMC_CmdReadSingleBlock>
 80041d0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80041d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d012      	beq.n	80041fe <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a7e      	ldr	r2, [pc, #504]	@ (80043d8 <HAL_SD_ReadBlocks+0x2e4>)
 80041de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041e6:	431a      	orrs	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e159      	b.n	80044b2 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8004202:	e061      	b.n	80042c8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d03c      	beq.n	800428c <HAL_SD_ReadBlocks+0x198>
 8004212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d039      	beq.n	800428c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004218:	2300      	movs	r3, #0
 800421a:	643b      	str	r3, [r7, #64]	@ 0x40
 800421c:	e033      	b.n	8004286 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f003 fa89 	bl	800773a <SDIO_ReadFIFO>
 8004228:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800422a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422c:	b2da      	uxtb	r2, r3
 800422e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004230:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004234:	3301      	adds	r3, #1
 8004236:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800423a:	3b01      	subs	r3, #1
 800423c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800423e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	b2da      	uxtb	r2, r3
 8004244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004246:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800424a:	3301      	adds	r3, #1
 800424c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800424e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004250:	3b01      	subs	r3, #1
 8004252:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004256:	0c1b      	lsrs	r3, r3, #16
 8004258:	b2da      	uxtb	r2, r3
 800425a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800425e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004260:	3301      	adds	r3, #1
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004266:	3b01      	subs	r3, #1
 8004268:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800426a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800426c:	0e1b      	lsrs	r3, r3, #24
 800426e:	b2da      	uxtb	r2, r3
 8004270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004272:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004276:	3301      	adds	r3, #1
 8004278:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800427a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800427c:	3b01      	subs	r3, #1
 800427e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8004280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004282:	3301      	adds	r3, #1
 8004284:	643b      	str	r3, [r7, #64]	@ 0x40
 8004286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004288:	2b07      	cmp	r3, #7
 800428a:	d9c8      	bls.n	800421e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800428c:	f7fe f914 	bl	80024b8 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004298:	429a      	cmp	r2, r3
 800429a:	d902      	bls.n	80042a2 <HAL_SD_ReadBlocks+0x1ae>
 800429c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d112      	bne.n	80042c8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a4c      	ldr	r2, [pc, #304]	@ (80043d8 <HAL_SD_ReadBlocks+0x2e4>)
 80042a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ae:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e0f4      	b.n	80044b2 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ce:	f240 332a 	movw	r3, #810	@ 0x32a
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d095      	beq.n	8004204 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d022      	beq.n	800432c <HAL_SD_ReadBlocks+0x238>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d91f      	bls.n	800432c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d01b      	beq.n	800432c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f003 fb79 	bl	80079f0 <SDMMC_CmdStopTransfer>
 80042fe:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004302:	2b00      	cmp	r3, #0
 8004304:	d012      	beq.n	800432c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a33      	ldr	r2, [pc, #204]	@ (80043d8 <HAL_SD_ReadBlocks+0x2e4>)
 800430c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004314:	431a      	orrs	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0c2      	b.n	80044b2 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_SD_ReadBlocks+0x254>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004344:	2b00      	cmp	r3, #0
 8004346:	d012      	beq.n	800436e <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a22      	ldr	r2, [pc, #136]	@ (80043d8 <HAL_SD_ReadBlocks+0x2e4>)
 800434e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004354:	f043 0208 	orr.w	r2, r3, #8
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e0a1      	b.n	80044b2 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d012      	beq.n	80043a2 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a15      	ldr	r2, [pc, #84]	@ (80043d8 <HAL_SD_ReadBlocks+0x2e4>)
 8004382:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004388:	f043 0202 	orr.w	r2, r3, #2
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e087      	b.n	80044b2 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d064      	beq.n	800447a <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a08      	ldr	r2, [pc, #32]	@ (80043d8 <HAL_SD_ReadBlocks+0x2e4>)
 80043b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	f043 0220 	orr.w	r2, r3, #32
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e06d      	b.n	80044b2 <HAL_SD_ReadBlocks+0x3be>
 80043d6:	bf00      	nop
 80043d8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f003 f9aa 	bl	800773a <SDIO_ReadFIFO>
 80043e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80043e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80043f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f2:	3301      	adds	r3, #1
 80043f4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80043f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f8:	3b01      	subs	r3, #1
 80043fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80043fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	b2da      	uxtb	r2, r3
 8004402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004404:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004408:	3301      	adds	r3, #1
 800440a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800440c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800440e:	3b01      	subs	r3, #1
 8004410:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	b2da      	uxtb	r2, r3
 8004418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800441a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800441c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800441e:	3301      	adds	r3, #1
 8004420:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004424:	3b01      	subs	r3, #1
 8004426:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442a:	0e1b      	lsrs	r3, r3, #24
 800442c:	b2da      	uxtb	r2, r3
 800442e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004430:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004434:	3301      	adds	r3, #1
 8004436:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800443a:	3b01      	subs	r3, #1
 800443c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800443e:	f7fe f83b 	bl	80024b8 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800444a:	429a      	cmp	r2, r3
 800444c:	d902      	bls.n	8004454 <HAL_SD_ReadBlocks+0x360>
 800444e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004450:	2b00      	cmp	r3, #0
 8004452:	d112      	bne.n	800447a <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a18      	ldr	r2, [pc, #96]	@ (80044bc <HAL_SD_ReadBlocks+0x3c8>)
 800445a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004460:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e01b      	b.n	80044b2 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_SD_ReadBlocks+0x39a>
 8004488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1a6      	bne.n	80043dc <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004496:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e006      	b.n	80044b2 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
  }
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3748      	adds	r7, #72	@ 0x48
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	004005ff 	.word	0x004005ff

080044c0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b092      	sub	sp, #72	@ 0x48
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80044ce:	f7fd fff3 	bl	80024b8 <HAL_GetTick>
 80044d2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e16d      	b.n	80047ce <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	f040 8160 	bne.w	80047c0 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004506:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	441a      	add	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004510:	429a      	cmp	r2, r3
 8004512:	d907      	bls.n	8004524 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004518:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e154      	b.n	80047ce <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2203      	movs	r2, #3
 8004528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2200      	movs	r2, #0
 8004532:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004538:	2b01      	cmp	r3, #1
 800453a:	d002      	beq.n	8004542 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800453c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453e:	025b      	lsls	r3, r3, #9
 8004540:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004542:	f04f 33ff 	mov.w	r3, #4294967295
 8004546:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	025b      	lsls	r3, r3, #9
 800454c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800454e:	2390      	movs	r3, #144	@ 0x90
 8004550:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004556:	2300      	movs	r3, #0
 8004558:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800455a:	2301      	movs	r3, #1
 800455c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f107 0218 	add.w	r2, r7, #24
 8004566:	4611      	mov	r1, r2
 8004568:	4618      	mov	r0, r3
 800456a:	f003 f96a 	bl	8007842 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d90a      	bls.n	800458a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004580:	4618      	mov	r0, r3
 8004582:	f003 fa12 	bl	80079aa <SDMMC_CmdWriteMultiBlock>
 8004586:	6478      	str	r0, [r7, #68]	@ 0x44
 8004588:	e009      	b.n	800459e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2210      	movs	r2, #16
 800458e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004596:	4618      	mov	r0, r3
 8004598:	f003 f9e5 	bl	8007966 <SDMMC_CmdWriteSingleBlock>
 800459c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800459e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d012      	beq.n	80045ca <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a8b      	ldr	r2, [pc, #556]	@ (80047d8 <HAL_SD_WriteBlocks+0x318>)
 80045aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045b2:	431a      	orrs	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e101      	b.n	80047ce <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80045ce:	e065      	b.n	800469c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d040      	beq.n	8004660 <HAL_SD_WriteBlocks+0x1a0>
 80045de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d03d      	beq.n	8004660 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80045e4:	2300      	movs	r3, #0
 80045e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80045e8:	e037      	b.n	800465a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80045ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80045f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f2:	3301      	adds	r3, #1
 80045f4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80045f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045f8:	3b01      	subs	r3, #1
 80045fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80045fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	021a      	lsls	r2, r3, #8
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460a:	3301      	adds	r3, #1
 800460c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800460e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004610:	3b01      	subs	r3, #1
 8004612:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	041a      	lsls	r2, r3, #16
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004622:	3301      	adds	r3, #1
 8004624:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004628:	3b01      	subs	r3, #1
 800462a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800462c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	061a      	lsls	r2, r3, #24
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463a:	3301      	adds	r3, #1
 800463c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800463e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004640:	3b01      	subs	r3, #1
 8004642:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f107 0214 	add.w	r2, r7, #20
 800464c:	4611      	mov	r1, r2
 800464e:	4618      	mov	r0, r3
 8004650:	f003 f880 	bl	8007754 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004656:	3301      	adds	r3, #1
 8004658:	643b      	str	r3, [r7, #64]	@ 0x40
 800465a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800465c:	2b07      	cmp	r3, #7
 800465e:	d9c4      	bls.n	80045ea <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004660:	f7fd ff2a 	bl	80024b8 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800466c:	429a      	cmp	r2, r3
 800466e:	d902      	bls.n	8004676 <HAL_SD_WriteBlocks+0x1b6>
 8004670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004672:	2b00      	cmp	r3, #0
 8004674:	d112      	bne.n	800469c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a57      	ldr	r2, [pc, #348]	@ (80047d8 <HAL_SD_WriteBlocks+0x318>)
 800467c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004684:	431a      	orrs	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e098      	b.n	80047ce <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046a2:	f240 331a 	movw	r3, #794	@ 0x31a
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d091      	beq.n	80045d0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d022      	beq.n	8004700 <HAL_SD_WriteBlocks+0x240>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d91f      	bls.n	8004700 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d01b      	beq.n	8004700 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f003 f98f 	bl	80079f0 <SDMMC_CmdStopTransfer>
 80046d2:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80046d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d012      	beq.n	8004700 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a3e      	ldr	r2, [pc, #248]	@ (80047d8 <HAL_SD_WriteBlocks+0x318>)
 80046e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046e8:	431a      	orrs	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e066      	b.n	80047ce <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_SD_WriteBlocks+0x25c>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004718:	2b00      	cmp	r3, #0
 800471a:	d012      	beq.n	8004742 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a2d      	ldr	r2, [pc, #180]	@ (80047d8 <HAL_SD_WriteBlocks+0x318>)
 8004722:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004728:	f043 0208 	orr.w	r2, r3, #8
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e045      	b.n	80047ce <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d012      	beq.n	8004776 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a20      	ldr	r2, [pc, #128]	@ (80047d8 <HAL_SD_WriteBlocks+0x318>)
 8004756:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800475c:	f043 0202 	orr.w	r2, r3, #2
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e02b      	b.n	80047ce <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b00      	cmp	r3, #0
 8004782:	d012      	beq.n	80047aa <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a13      	ldr	r2, [pc, #76]	@ (80047d8 <HAL_SD_WriteBlocks+0x318>)
 800478a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004790:	f043 0210 	orr.w	r2, r3, #16
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e011      	b.n	80047ce <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f240 523a 	movw	r2, #1338	@ 0x53a
 80047b2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e006      	b.n	80047ce <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3748      	adds	r7, #72	@ 0x48
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	004005ff 	.word	0x004005ff

080047dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ea:	0f9b      	lsrs	r3, r3, #30
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047f6:	0e9b      	lsrs	r3, r3, #26
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004808:	0e1b      	lsrs	r3, r3, #24
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	b2da      	uxtb	r2, r3
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800481a:	0c1b      	lsrs	r3, r3, #16
 800481c:	b2da      	uxtb	r2, r3
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004826:	0a1b      	lsrs	r3, r3, #8
 8004828:	b2da      	uxtb	r2, r3
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004832:	b2da      	uxtb	r2, r3
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800483c:	0d1b      	lsrs	r3, r3, #20
 800483e:	b29a      	uxth	r2, r3
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	b2da      	uxtb	r2, r3
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800485a:	0bdb      	lsrs	r3, r3, #15
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	b2da      	uxtb	r2, r3
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800486c:	0b9b      	lsrs	r3, r3, #14
 800486e:	b2db      	uxtb	r3, r3
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	b2da      	uxtb	r2, r3
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800487e:	0b5b      	lsrs	r3, r3, #13
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	b2da      	uxtb	r2, r3
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004890:	0b1b      	lsrs	r3, r3, #12
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	b2da      	uxtb	r2, r3
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2200      	movs	r2, #0
 80048a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d163      	bne.n	8004974 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048b0:	009a      	lsls	r2, r3, #2
 80048b2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048b6:	4013      	ands	r3, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80048bc:	0f92      	lsrs	r2, r2, #30
 80048be:	431a      	orrs	r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048c8:	0edb      	lsrs	r3, r3, #27
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048da:	0e1b      	lsrs	r3, r3, #24
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ec:	0d5b      	lsrs	r3, r3, #21
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048fe:	0c9b      	lsrs	r3, r3, #18
 8004900:	b2db      	uxtb	r3, r3
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	b2da      	uxtb	r2, r3
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004910:	0bdb      	lsrs	r3, r3, #15
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	b2da      	uxtb	r2, r3
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	7e1b      	ldrb	r3, [r3, #24]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	3302      	adds	r3, #2
 8004934:	2201      	movs	r2, #1
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800493e:	fb03 f202 	mul.w	r2, r3, r2
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	7a1b      	ldrb	r3, [r3, #8]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	2201      	movs	r2, #1
 8004952:	409a      	lsls	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004960:	0a52      	lsrs	r2, r2, #9
 8004962:	fb03 f202 	mul.w	r2, r3, r2
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004970:	661a      	str	r2, [r3, #96]	@ 0x60
 8004972:	e031      	b.n	80049d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004978:	2b01      	cmp	r3, #1
 800497a:	d11d      	bne.n	80049b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004980:	041b      	lsls	r3, r3, #16
 8004982:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800498a:	0c1b      	lsrs	r3, r3, #16
 800498c:	431a      	orrs	r2, r3
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	3301      	adds	r3, #1
 8004998:	029a      	lsls	r2, r3, #10
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ac:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80049b6:	e00f      	b.n	80049d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a58      	ldr	r2, [pc, #352]	@ (8004b20 <HAL_SD_GetCardCSD+0x344>)
 80049be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e09d      	b.n	8004b14 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049dc:	0b9b      	lsrs	r3, r3, #14
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049ee:	09db      	lsrs	r3, r3, #7
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a10:	0fdb      	lsrs	r3, r3, #31
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1c:	0f5b      	lsrs	r3, r3, #29
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2e:	0e9b      	lsrs	r3, r3, #26
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a40:	0d9b      	lsrs	r3, r3, #22
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a52:	0d5b      	lsrs	r3, r3, #21
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6e:	0c1b      	lsrs	r3, r3, #16
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a82:	0bdb      	lsrs	r3, r3, #15
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a96:	0b9b      	lsrs	r3, r3, #14
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aaa:	0b5b      	lsrs	r3, r3, #13
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004abe:	0b1b      	lsrs	r3, r3, #12
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad2:	0a9b      	lsrs	r3, r3, #10
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae6:	0a1b      	lsrs	r3, r3, #8
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afa:	085b      	lsrs	r3, r3, #1
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr
 8004b20:	004005ff 	.word	0x004005ff

08004b24 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004b88:	f107 030c 	add.w	r3, r7, #12
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f970 	bl	8004e74 <SD_SendStatus>
 8004b94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	0a5b      	lsrs	r3, r3, #9
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004bb2:	693b      	ldr	r3, [r7, #16]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004bbc:	b5b0      	push	{r4, r5, r7, lr}
 8004bbe:	b094      	sub	sp, #80	@ 0x50
 8004bc0:	af04      	add	r7, sp, #16
 8004bc2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f002 fde0 	bl	8007792 <SDIO_GetPowerState>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004bd8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004bdc:	e0b8      	b.n	8004d50 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d02f      	beq.n	8004c46 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f002 ffc7 	bl	8007b7e <SDMMC_CmdSendCID>
 8004bf0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <SD_InitCard+0x40>
    {
      return errorstate;
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bfa:	e0a9      	b.n	8004d50 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f002 fe0a 	bl	800781c <SDIO_GetResponse>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2104      	movs	r1, #4
 8004c14:	4618      	mov	r0, r3
 8004c16:	f002 fe01 	bl	800781c <SDIO_GetResponse>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2108      	movs	r1, #8
 8004c26:	4618      	mov	r0, r3
 8004c28:	f002 fdf8 	bl	800781c <SDIO_GetResponse>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	210c      	movs	r1, #12
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f002 fdef 	bl	800781c <SDIO_GetResponse>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d00d      	beq.n	8004c6a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f107 020e 	add.w	r2, r7, #14
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f002 ffcd 	bl	8007bf8 <SDMMC_CmdSetRelAdd>
 8004c5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <SD_InitCard+0xae>
    {
      return errorstate;
 8004c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c68:	e072      	b.n	8004d50 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d036      	beq.n	8004ce0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004c72:	89fb      	ldrh	r3, [r7, #14]
 8004c74:	461a      	mov	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c82:	041b      	lsls	r3, r3, #16
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f002 ff97 	bl	8007bba <SDMMC_CmdSendCSD>
 8004c8c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c96:	e05b      	b.n	8004d50 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f002 fdbc 	bl	800781c <SDIO_GetResponse>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2104      	movs	r1, #4
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f002 fdb3 	bl	800781c <SDIO_GetResponse>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2108      	movs	r1, #8
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f002 fdaa 	bl	800781c <SDIO_GetResponse>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	210c      	movs	r1, #12
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f002 fda1 	bl	800781c <SDIO_GetResponse>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2104      	movs	r1, #4
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f002 fd98 	bl	800781c <SDIO_GetResponse>
 8004cec:	4603      	mov	r3, r0
 8004cee:	0d1a      	lsrs	r2, r3, #20
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004cf4:	f107 0310 	add.w	r3, r7, #16
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff fd6e 	bl	80047dc <HAL_SD_GetCardCSD>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d06:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004d0a:	e021      	b.n	8004d50 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6819      	ldr	r1, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d14:	041b      	lsls	r3, r3, #16
 8004d16:	2200      	movs	r2, #0
 8004d18:	461c      	mov	r4, r3
 8004d1a:	4615      	mov	r5, r2
 8004d1c:	4622      	mov	r2, r4
 8004d1e:	462b      	mov	r3, r5
 8004d20:	4608      	mov	r0, r1
 8004d22:	f002 fe87 	bl	8007a34 <SDMMC_CmdSelDesel>
 8004d26:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <SD_InitCard+0x176>
  {
    return errorstate;
 8004d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d30:	e00e      	b.n	8004d50 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681d      	ldr	r5, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	466c      	mov	r4, sp
 8004d3a:	f103 0210 	add.w	r2, r3, #16
 8004d3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d44:	3304      	adds	r3, #4
 8004d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d48:	4628      	mov	r0, r5
 8004d4a:	f002 fccb 	bl	80076e4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3740      	adds	r7, #64	@ 0x40
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bdb0      	pop	{r4, r5, r7, pc}

08004d58 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f002 fe82 	bl	8007a7a <SDMMC_CmdGoIdleState>
 8004d76:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	e072      	b.n	8004e68 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f002 fe95 	bl	8007ab6 <SDMMC_CmdOperCond>
 8004d8c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00d      	beq.n	8004db0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f002 fe6b 	bl	8007a7a <SDMMC_CmdGoIdleState>
 8004da4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d004      	beq.n	8004db6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	e05b      	b.n	8004e68 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d137      	bne.n	8004e2e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f002 fe95 	bl	8007af4 <SDMMC_CmdAppCommand>
 8004dca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d02d      	beq.n	8004e2e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dd2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004dd6:	e047      	b.n	8004e68 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2100      	movs	r1, #0
 8004dde:	4618      	mov	r0, r3
 8004de0:	f002 fe88 	bl	8007af4 <SDMMC_CmdAppCommand>
 8004de4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <SD_PowerON+0x98>
    {
      return errorstate;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	e03b      	b.n	8004e68 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	491e      	ldr	r1, [pc, #120]	@ (8004e70 <SD_PowerON+0x118>)
 8004df6:	4618      	mov	r0, r3
 8004df8:	f002 fe9e 	bl	8007b38 <SDMMC_CmdAppOperCommand>
 8004dfc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e04:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004e08:	e02e      	b.n	8004e68 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4618      	mov	r0, r3
 8004e12:	f002 fd03 	bl	800781c <SDIO_GetResponse>
 8004e16:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	0fdb      	lsrs	r3, r3, #31
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <SD_PowerON+0xcc>
 8004e20:	2301      	movs	r3, #1
 8004e22:	e000      	b.n	8004e26 <SD_PowerON+0xce>
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]

    count++;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d802      	bhi.n	8004e3e <SD_PowerON+0xe6>
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0cc      	beq.n	8004dd8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d902      	bls.n	8004e4e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004e48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e4c:	e00c      	b.n	8004e68 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	645a      	str	r2, [r3, #68]	@ 0x44
 8004e5e:	e002      	b.n	8004e66 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	c1100000 	.word	0xc1100000

08004e74 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004e84:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e88:	e018      	b.n	8004ebc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e92:	041b      	lsls	r3, r3, #16
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f002 fecf 	bl	8007c3a <SDMMC_CmdSendStatus>
 8004e9c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	e009      	b.n	8004ebc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2100      	movs	r1, #0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f002 fcb4 	bl	800781c <SDIO_GetResponse>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e07b      	b.n	8004fce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ee6:	d009      	beq.n	8004efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	61da      	str	r2, [r3, #28]
 8004eee:	e005      	b.n	8004efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fd f882 	bl	8002020 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f80:	ea42 0103 	orr.w	r1, r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	f003 0104 	and.w	r1, r3, #4
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa2:	f003 0210 	and.w	r2, r3, #16
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b088      	sub	sp, #32
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	603b      	str	r3, [r7, #0]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fe6:	f7fd fa67 	bl	80024b8 <HAL_GetTick>
 8004fea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d001      	beq.n	8005000 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e12a      	b.n	8005256 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <HAL_SPI_Transmit+0x36>
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e122      	b.n	8005256 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_SPI_Transmit+0x48>
 800501a:	2302      	movs	r3, #2
 800501c:	e11b      	b.n	8005256 <HAL_SPI_Transmit+0x280>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2203      	movs	r2, #3
 800502a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	88fa      	ldrh	r2, [r7, #6]
 800503e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800506c:	d10f      	bne.n	800508e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800507c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800508c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005098:	2b40      	cmp	r3, #64	@ 0x40
 800509a:	d007      	beq.n	80050ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050b4:	d152      	bne.n	800515c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <HAL_SPI_Transmit+0xee>
 80050be:	8b7b      	ldrh	r3, [r7, #26]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d145      	bne.n	8005150 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c8:	881a      	ldrh	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d4:	1c9a      	adds	r2, r3, #2
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050e8:	e032      	b.n	8005150 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d112      	bne.n	800511e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fc:	881a      	ldrh	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005108:	1c9a      	adds	r2, r3, #2
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800511c:	e018      	b.n	8005150 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800511e:	f7fd f9cb 	bl	80024b8 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d803      	bhi.n	8005136 <HAL_SPI_Transmit+0x160>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d102      	bne.n	800513c <HAL_SPI_Transmit+0x166>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d109      	bne.n	8005150 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e082      	b.n	8005256 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1c7      	bne.n	80050ea <HAL_SPI_Transmit+0x114>
 800515a:	e053      	b.n	8005204 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <HAL_SPI_Transmit+0x194>
 8005164:	8b7b      	ldrh	r3, [r7, #26]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d147      	bne.n	80051fa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	7812      	ldrb	r2, [r2, #0]
 8005176:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005190:	e033      	b.n	80051fa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b02      	cmp	r3, #2
 800519e:	d113      	bne.n	80051c8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	330c      	adds	r3, #12
 80051aa:	7812      	ldrb	r2, [r2, #0]
 80051ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80051c6:	e018      	b.n	80051fa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051c8:	f7fd f976 	bl	80024b8 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d803      	bhi.n	80051e0 <HAL_SPI_Transmit+0x20a>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051de:	d102      	bne.n	80051e6 <HAL_SPI_Transmit+0x210>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e02d      	b.n	8005256 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1c6      	bne.n	8005192 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	6839      	ldr	r1, [r7, #0]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 ffb7 	bl	800617c <SPI_EndRxTxTransaction>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2220      	movs	r2, #32
 8005218:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524c:	2b00      	cmp	r3, #0
 800524e:	d001      	beq.n	8005254 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005254:	2300      	movs	r3, #0
  }
}
 8005256:	4618      	mov	r0, r3
 8005258:	3720      	adds	r7, #32
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b088      	sub	sp, #32
 8005262:	af02      	add	r7, sp, #8
 8005264:	60f8      	str	r0, [r7, #12]
 8005266:	60b9      	str	r1, [r7, #8]
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	4613      	mov	r3, r2
 800526c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b01      	cmp	r3, #1
 8005278:	d001      	beq.n	800527e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800527a:	2302      	movs	r3, #2
 800527c:	e104      	b.n	8005488 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005286:	d112      	bne.n	80052ae <HAL_SPI_Receive+0x50>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10e      	bne.n	80052ae <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2204      	movs	r2, #4
 8005294:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005298:	88fa      	ldrh	r2, [r7, #6]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	4613      	mov	r3, r2
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f8f3 	bl	8005490 <HAL_SPI_TransmitReceive>
 80052aa:	4603      	mov	r3, r0
 80052ac:	e0ec      	b.n	8005488 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052ae:	f7fd f903 	bl	80024b8 <HAL_GetTick>
 80052b2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_SPI_Receive+0x62>
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0e1      	b.n	8005488 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_SPI_Receive+0x74>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e0da      	b.n	8005488 <HAL_SPI_Receive+0x22a>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2204      	movs	r2, #4
 80052de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	88fa      	ldrh	r2, [r7, #6]
 80052f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	88fa      	ldrh	r2, [r7, #6]
 80052f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005320:	d10f      	bne.n	8005342 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005330:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005340:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534c:	2b40      	cmp	r3, #64	@ 0x40
 800534e:	d007      	beq.n	8005360 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800535e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d170      	bne.n	800544a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005368:	e035      	b.n	80053d6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b01      	cmp	r3, #1
 8005376:	d115      	bne.n	80053a4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f103 020c 	add.w	r2, r3, #12
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005384:	7812      	ldrb	r2, [r2, #0]
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005398:	b29b      	uxth	r3, r3
 800539a:	3b01      	subs	r3, #1
 800539c:	b29a      	uxth	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053a2:	e018      	b.n	80053d6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053a4:	f7fd f888 	bl	80024b8 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d803      	bhi.n	80053bc <HAL_SPI_Receive+0x15e>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ba:	d102      	bne.n	80053c2 <HAL_SPI_Receive+0x164>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e058      	b.n	8005488 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1c4      	bne.n	800536a <HAL_SPI_Receive+0x10c>
 80053e0:	e038      	b.n	8005454 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d113      	bne.n	8005418 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fa:	b292      	uxth	r2, r2
 80053fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005402:	1c9a      	adds	r2, r3, #2
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005416:	e018      	b.n	800544a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005418:	f7fd f84e 	bl	80024b8 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d803      	bhi.n	8005430 <HAL_SPI_Receive+0x1d2>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542e:	d102      	bne.n	8005436 <HAL_SPI_Receive+0x1d8>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d109      	bne.n	800544a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e01e      	b.n	8005488 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1c6      	bne.n	80053e2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 fe29 	bl	80060b0 <SPI_EndRxTransaction>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005486:	2300      	movs	r3, #0
  }
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	@ 0x28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800549e:	2301      	movs	r3, #1
 80054a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054a2:	f7fd f809 	bl	80024b8 <HAL_GetTick>
 80054a6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054ae:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80054b6:	887b      	ldrh	r3, [r7, #2]
 80054b8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054ba:	7ffb      	ldrb	r3, [r7, #31]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d00c      	beq.n	80054da <HAL_SPI_TransmitReceive+0x4a>
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054c6:	d106      	bne.n	80054d6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <HAL_SPI_TransmitReceive+0x46>
 80054d0:	7ffb      	ldrb	r3, [r7, #31]
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d001      	beq.n	80054da <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
 80054d8:	e17f      	b.n	80057da <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_SPI_TransmitReceive+0x5c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_SPI_TransmitReceive+0x5c>
 80054e6:	887b      	ldrh	r3, [r7, #2]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e174      	b.n	80057da <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_SPI_TransmitReceive+0x6e>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e16d      	b.n	80057da <HAL_SPI_TransmitReceive+0x34a>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b04      	cmp	r3, #4
 8005510:	d003      	beq.n	800551a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2205      	movs	r2, #5
 8005516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	887a      	ldrh	r2, [r7, #2]
 800552a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	887a      	ldrh	r2, [r7, #2]
 8005530:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	887a      	ldrh	r2, [r7, #2]
 800553c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	887a      	ldrh	r2, [r7, #2]
 8005542:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555a:	2b40      	cmp	r3, #64	@ 0x40
 800555c:	d007      	beq.n	800556e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800556c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005576:	d17e      	bne.n	8005676 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <HAL_SPI_TransmitReceive+0xf6>
 8005580:	8afb      	ldrh	r3, [r7, #22]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d16c      	bne.n	8005660 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558a:	881a      	ldrh	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005596:	1c9a      	adds	r2, r3, #2
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	3b01      	subs	r3, #1
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055aa:	e059      	b.n	8005660 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d11b      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x162>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d016      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x162>
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d113      	bne.n	80055f2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ce:	881a      	ldrh	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055da:	1c9a      	adds	r2, r3, #2
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d119      	bne.n	8005634 <HAL_SPI_TransmitReceive+0x1a4>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d014      	beq.n	8005634 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005614:	b292      	uxth	r2, r2
 8005616:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561c:	1c9a      	adds	r2, r3, #2
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005630:	2301      	movs	r3, #1
 8005632:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005634:	f7fc ff40 	bl	80024b8 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005640:	429a      	cmp	r2, r3
 8005642:	d80d      	bhi.n	8005660 <HAL_SPI_TransmitReceive+0x1d0>
 8005644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	d009      	beq.n	8005660 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e0bc      	b.n	80057da <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1a0      	bne.n	80055ac <HAL_SPI_TransmitReceive+0x11c>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d19b      	bne.n	80055ac <HAL_SPI_TransmitReceive+0x11c>
 8005674:	e082      	b.n	800577c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_SPI_TransmitReceive+0x1f4>
 800567e:	8afb      	ldrh	r3, [r7, #22]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d171      	bne.n	8005768 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	330c      	adds	r3, #12
 800568e:	7812      	ldrb	r2, [r2, #0]
 8005690:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056aa:	e05d      	b.n	8005768 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d11c      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x264>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d017      	beq.n	80056f4 <HAL_SPI_TransmitReceive+0x264>
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d114      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	330c      	adds	r3, #12
 80056d4:	7812      	ldrb	r2, [r2, #0]
 80056d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d119      	bne.n	8005736 <HAL_SPI_TransmitReceive+0x2a6>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d014      	beq.n	8005736 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005728:	b29b      	uxth	r3, r3
 800572a:	3b01      	subs	r3, #1
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005732:	2301      	movs	r3, #1
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005736:	f7fc febf 	bl	80024b8 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005742:	429a      	cmp	r2, r3
 8005744:	d803      	bhi.n	800574e <HAL_SPI_TransmitReceive+0x2be>
 8005746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574c:	d102      	bne.n	8005754 <HAL_SPI_TransmitReceive+0x2c4>
 800574e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005750:	2b00      	cmp	r3, #0
 8005752:	d109      	bne.n	8005768 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e038      	b.n	80057da <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d19c      	bne.n	80056ac <HAL_SPI_TransmitReceive+0x21c>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d197      	bne.n	80056ac <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800577c:	6a3a      	ldr	r2, [r7, #32]
 800577e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fcfb 	bl	800617c <SPI_EndRxTxTransaction>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d008      	beq.n	800579e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e01d      	b.n	80057da <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80057d8:	2300      	movs	r3, #0
  }
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3728      	adds	r7, #40	@ 0x28
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	4613      	mov	r3, r2
 80057f0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d001      	beq.n	8005802 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80057fe:	2302      	movs	r3, #2
 8005800:	e097      	b.n	8005932 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <HAL_SPI_Transmit_DMA+0x2a>
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e08f      	b.n	8005932 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_SPI_Transmit_DMA+0x3c>
 800581c:	2302      	movs	r3, #2
 800581e:	e088      	b.n	8005932 <HAL_SPI_Transmit_DMA+0x14e>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2203      	movs	r2, #3
 800582c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	88fa      	ldrh	r2, [r7, #6]
 8005840:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	88fa      	ldrh	r2, [r7, #6]
 8005846:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800586e:	d10f      	bne.n	8005890 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800587e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800588e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005894:	4a29      	ldr	r2, [pc, #164]	@ (800593c <HAL_SPI_Transmit_DMA+0x158>)
 8005896:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800589c:	4a28      	ldr	r2, [pc, #160]	@ (8005940 <HAL_SPI_Transmit_DMA+0x15c>)
 800589e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058a4:	4a27      	ldr	r2, [pc, #156]	@ (8005944 <HAL_SPI_Transmit_DMA+0x160>)
 80058a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ac:	2200      	movs	r2, #0
 80058ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b8:	4619      	mov	r1, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	330c      	adds	r3, #12
 80058c0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058c6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80058c8:	f7fd f9c2 	bl	8002c50 <HAL_DMA_Start_IT>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00b      	beq.n	80058ea <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d6:	f043 0210 	orr.w	r2, r3, #16
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e023      	b.n	8005932 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f4:	2b40      	cmp	r3, #64	@ 0x40
 80058f6:	d007      	beq.n	8005908 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005906:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0220 	orr.w	r2, r2, #32
 800591e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0202 	orr.w	r2, r2, #2
 800592e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	08005f0d 	.word	0x08005f0d
 8005940:	08005d2d 	.word	0x08005d2d
 8005944:	08005f61 	.word	0x08005f61

08005948 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	4613      	mov	r3, r2
 8005954:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b01      	cmp	r3, #1
 8005960:	d001      	beq.n	8005966 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8005962:	2302      	movs	r3, #2
 8005964:	e0a9      	b.n	8005aba <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d110      	bne.n	8005990 <HAL_SPI_Receive_DMA+0x48>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005976:	d10b      	bne.n	8005990 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2204      	movs	r2, #4
 800597c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005980:	88fb      	ldrh	r3, [r7, #6]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 f8a2 	bl	8005ad0 <HAL_SPI_TransmitReceive_DMA>
 800598c:	4603      	mov	r3, r0
 800598e:	e094      	b.n	8005aba <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <HAL_SPI_Receive_DMA+0x54>
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e08c      	b.n	8005aba <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_SPI_Receive_DMA+0x66>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e085      	b.n	8005aba <HAL_SPI_Receive_DMA+0x172>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2204      	movs	r2, #4
 80059ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	88fa      	ldrh	r2, [r7, #6]
 80059ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	88fa      	ldrh	r2, [r7, #6]
 80059d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059f6:	d10f      	bne.n	8005a18 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a1c:	4a29      	ldr	r2, [pc, #164]	@ (8005ac4 <HAL_SPI_Receive_DMA+0x17c>)
 8005a1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a24:	4a28      	ldr	r2, [pc, #160]	@ (8005ac8 <HAL_SPI_Receive_DMA+0x180>)
 8005a26:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a2c:	4a27      	ldr	r2, [pc, #156]	@ (8005acc <HAL_SPI_Receive_DMA+0x184>)
 8005a2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a34:	2200      	movs	r2, #0
 8005a36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	4619      	mov	r1, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a48:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a4e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005a50:	f7fd f8fe 	bl	8002c50 <HAL_DMA_Start_IT>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00b      	beq.n	8005a72 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5e:	f043 0210 	orr.w	r2, r3, #16
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e023      	b.n	8005aba <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7c:	2b40      	cmp	r3, #64	@ 0x40
 8005a7e:	d007      	beq.n	8005a90 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a8e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0220 	orr.w	r2, r2, #32
 8005aa6:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0201 	orr.w	r2, r2, #1
 8005ab6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	08005f29 	.word	0x08005f29
 8005ac8:	08005dd5 	.word	0x08005dd5
 8005acc:	08005f61 	.word	0x08005f61

08005ad0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ae4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d00c      	beq.n	8005b0c <HAL_SPI_TransmitReceive_DMA+0x3c>
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005af8:	d106      	bne.n	8005b08 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <HAL_SPI_TransmitReceive_DMA+0x38>
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d001      	beq.n	8005b0c <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e0cf      	b.n	8005cac <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d005      	beq.n	8005b1e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8005b18:	887b      	ldrh	r3, [r7, #2]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e0c4      	b.n	8005cac <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_SPI_TransmitReceive_DMA+0x60>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e0bd      	b.n	8005cac <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d003      	beq.n	8005b4c <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2205      	movs	r2, #5
 8005b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	887a      	ldrh	r2, [r7, #2]
 8005b5c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	887a      	ldrh	r2, [r7, #2]
 8005b62:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	887a      	ldrh	r2, [r7, #2]
 8005b6e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	887a      	ldrh	r2, [r7, #2]
 8005b74:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d108      	bne.n	8005ba0 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b92:	4a48      	ldr	r2, [pc, #288]	@ (8005cb4 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8005b94:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b9a:	4a47      	ldr	r2, [pc, #284]	@ (8005cb8 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8005b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b9e:	e007      	b.n	8005bb0 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ba4:	4a45      	ldr	r2, [pc, #276]	@ (8005cbc <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8005ba6:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bac:	4a44      	ldr	r2, [pc, #272]	@ (8005cc0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005bae:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bb4:	4a43      	ldr	r2, [pc, #268]	@ (8005cc4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005bb6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	330c      	adds	r3, #12
 8005bca:	4619      	mov	r1, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bd6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005bd8:	f7fd f83a 	bl	8002c50 <HAL_DMA_Start_IT>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00b      	beq.n	8005bfa <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be6:	f043 0210 	orr.w	r2, r3, #16
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e058      	b.n	8005cac <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0201 	orr.w	r2, r2, #1
 8005c08:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c0e:	2200      	movs	r2, #0
 8005c10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c16:	2200      	movs	r2, #0
 8005c18:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c1e:	2200      	movs	r2, #0
 8005c20:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c26:	2200      	movs	r2, #0
 8005c28:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c32:	4619      	mov	r1, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	330c      	adds	r3, #12
 8005c3a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c40:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005c42:	f7fd f805 	bl	8002c50 <HAL_DMA_Start_IT>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00b      	beq.n	8005c64 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c50:	f043 0210 	orr.w	r2, r3, #16
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e023      	b.n	8005cac <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6e:	2b40      	cmp	r3, #64	@ 0x40
 8005c70:	d007      	beq.n	8005c82 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c80:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0220 	orr.w	r2, r2, #32
 8005c98:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0202 	orr.w	r2, r2, #2
 8005ca8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3718      	adds	r7, #24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	08005f29 	.word	0x08005f29
 8005cb8:	08005dd5 	.word	0x08005dd5
 8005cbc:	08005f45 	.word	0x08005f45
 8005cc0:	08005e7d 	.word	0x08005e7d
 8005cc4:	08005f61 	.word	0x08005f61

08005cc8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d3a:	f7fc fbbd 	bl	80024b8 <HAL_GetTick>
 8005d3e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d4e:	d03b      	beq.n	8005dc8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0220 	bic.w	r2, r2, #32
 8005d5e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0202 	bic.w	r2, r2, #2
 8005d6e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	2164      	movs	r1, #100	@ 0x64
 8005d74:	6978      	ldr	r0, [r7, #20]
 8005d76:	f000 fa01 	bl	800617c <SPI_EndRxTxTransaction>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d84:	f043 0220 	orr.w	r2, r3, #32
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2200      	movs	r2, #0
 8005dae:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005dc0:	6978      	ldr	r0, [r7, #20]
 8005dc2:	f7ff ffa9 	bl	8005d18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005dc6:	e002      	b.n	8005dce <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005dc8:	6978      	ldr	r0, [r7, #20]
 8005dca:	f7fb f9ff 	bl	80011cc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005de2:	f7fc fb69 	bl	80024b8 <HAL_GetTick>
 8005de6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005df6:	d03b      	beq.n	8005e70 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0220 	bic.w	r2, r2, #32
 8005e06:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10d      	bne.n	8005e2c <SPI_DMAReceiveCplt+0x58>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e18:	d108      	bne.n	8005e2c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0203 	bic.w	r2, r2, #3
 8005e28:	605a      	str	r2, [r3, #4]
 8005e2a:	e007      	b.n	8005e3c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	2164      	movs	r1, #100	@ 0x64
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 f935 	bl	80060b0 <SPI_EndRxTransaction>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7ff ff55 	bl	8005d18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005e6e:	e002      	b.n	8005e76 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f7fb f9bb 	bl	80011ec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e88:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e8a:	f7fc fb15 	bl	80024b8 <HAL_GetTick>
 8005e8e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e9e:	d02f      	beq.n	8005f00 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0220 	bic.w	r2, r2, #32
 8005eae:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	2164      	movs	r1, #100	@ 0x64
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 f961 	bl	800617c <SPI_EndRxTxTransaction>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ec4:	f043 0220 	orr.w	r2, r3, #32
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0203 	bic.w	r2, r2, #3
 8005eda:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7ff ff0d 	bl	8005d18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005efe:	e002      	b.n	8005f06 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7ff fee1 	bl	8005cc8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f7ff fede 	bl	8005cdc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f34:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7ff feda 	bl	8005cf0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f3c:	bf00      	nop
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff fed6 	bl	8005d04 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0203 	bic.w	r2, r2, #3
 8005f7c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f82:	f043 0210 	orr.w	r2, r3, #16
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f7ff fec0 	bl	8005d18 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005f98:	bf00      	nop
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fb0:	f7fc fa82 	bl	80024b8 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb8:	1a9b      	subs	r3, r3, r2
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fc0:	f7fc fa7a 	bl	80024b8 <HAL_GetTick>
 8005fc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fc6:	4b39      	ldr	r3, [pc, #228]	@ (80060ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	015b      	lsls	r3, r3, #5
 8005fcc:	0d1b      	lsrs	r3, r3, #20
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	fb02 f303 	mul.w	r3, r2, r3
 8005fd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fd6:	e054      	b.n	8006082 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fde:	d050      	beq.n	8006082 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fe0:	f7fc fa6a 	bl	80024b8 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	69fa      	ldr	r2, [r7, #28]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d902      	bls.n	8005ff6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d13d      	bne.n	8006072 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006004:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800600e:	d111      	bne.n	8006034 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006018:	d004      	beq.n	8006024 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006022:	d107      	bne.n	8006034 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006032:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800603c:	d10f      	bne.n	800605e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800605c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e017      	b.n	80060a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	3b01      	subs	r3, #1
 8006080:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4013      	ands	r3, r2
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	429a      	cmp	r2, r3
 8006090:	bf0c      	ite	eq
 8006092:	2301      	moveq	r3, #1
 8006094:	2300      	movne	r3, #0
 8006096:	b2db      	uxtb	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	429a      	cmp	r2, r3
 800609e:	d19b      	bne.n	8005fd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	2000000c 	.word	0x2000000c

080060b0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060c4:	d111      	bne.n	80060ea <SPI_EndRxTransaction+0x3a>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ce:	d004      	beq.n	80060da <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060d8:	d107      	bne.n	80060ea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060e8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060f2:	d12a      	bne.n	800614a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060fc:	d012      	beq.n	8006124 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2200      	movs	r2, #0
 8006106:	2180      	movs	r1, #128	@ 0x80
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f7ff ff49 	bl	8005fa0 <SPI_WaitFlagStateUntilTimeout>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d02d      	beq.n	8006170 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006118:	f043 0220 	orr.w	r2, r3, #32
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e026      	b.n	8006172 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2200      	movs	r2, #0
 800612c:	2101      	movs	r1, #1
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f7ff ff36 	bl	8005fa0 <SPI_WaitFlagStateUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01a      	beq.n	8006170 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800613e:	f043 0220 	orr.w	r2, r3, #32
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e013      	b.n	8006172 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2200      	movs	r2, #0
 8006152:	2101      	movs	r1, #1
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f7ff ff23 	bl	8005fa0 <SPI_WaitFlagStateUntilTimeout>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006164:	f043 0220 	orr.w	r2, r3, #32
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e000      	b.n	8006172 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2201      	movs	r2, #1
 8006190:	2102      	movs	r1, #2
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f7ff ff04 	bl	8005fa0 <SPI_WaitFlagStateUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a2:	f043 0220 	orr.w	r2, r3, #32
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e032      	b.n	8006214 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80061ae:	4b1b      	ldr	r3, [pc, #108]	@ (800621c <SPI_EndRxTxTransaction+0xa0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006220 <SPI_EndRxTxTransaction+0xa4>)
 80061b4:	fba2 2303 	umull	r2, r3, r2, r3
 80061b8:	0d5b      	lsrs	r3, r3, #21
 80061ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061cc:	d112      	bne.n	80061f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	9300      	str	r3, [sp, #0]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2200      	movs	r2, #0
 80061d6:	2180      	movs	r1, #128	@ 0x80
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f7ff fee1 	bl	8005fa0 <SPI_WaitFlagStateUntilTimeout>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d016      	beq.n	8006212 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e8:	f043 0220 	orr.w	r2, r3, #32
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e00f      	b.n	8006214 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800620a:	2b80      	cmp	r3, #128	@ 0x80
 800620c:	d0f2      	beq.n	80061f4 <SPI_EndRxTxTransaction+0x78>
 800620e:	e000      	b.n	8006212 <SPI_EndRxTxTransaction+0x96>
        break;
 8006210:	bf00      	nop
  }

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	2000000c 	.word	0x2000000c
 8006220:	165e9f81 	.word	0x165e9f81

08006224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e041      	b.n	80062ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fb ff94 	bl	8002178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3304      	adds	r3, #4
 8006260:	4619      	mov	r1, r3
 8006262:	4610      	mov	r0, r2
 8006264:	f000 f95e 	bl	8006524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d001      	beq.n	80062dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e046      	b.n	800636a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a23      	ldr	r2, [pc, #140]	@ (8006378 <HAL_TIM_Base_Start+0xb4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d022      	beq.n	8006334 <HAL_TIM_Base_Start+0x70>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f6:	d01d      	beq.n	8006334 <HAL_TIM_Base_Start+0x70>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1f      	ldr	r2, [pc, #124]	@ (800637c <HAL_TIM_Base_Start+0xb8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d018      	beq.n	8006334 <HAL_TIM_Base_Start+0x70>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a1e      	ldr	r2, [pc, #120]	@ (8006380 <HAL_TIM_Base_Start+0xbc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d013      	beq.n	8006334 <HAL_TIM_Base_Start+0x70>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a1c      	ldr	r2, [pc, #112]	@ (8006384 <HAL_TIM_Base_Start+0xc0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00e      	beq.n	8006334 <HAL_TIM_Base_Start+0x70>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a1b      	ldr	r2, [pc, #108]	@ (8006388 <HAL_TIM_Base_Start+0xc4>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d009      	beq.n	8006334 <HAL_TIM_Base_Start+0x70>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a19      	ldr	r2, [pc, #100]	@ (800638c <HAL_TIM_Base_Start+0xc8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d004      	beq.n	8006334 <HAL_TIM_Base_Start+0x70>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a18      	ldr	r2, [pc, #96]	@ (8006390 <HAL_TIM_Base_Start+0xcc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d111      	bne.n	8006358 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 0307 	and.w	r3, r3, #7
 800633e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b06      	cmp	r3, #6
 8006344:	d010      	beq.n	8006368 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0201 	orr.w	r2, r2, #1
 8006354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006356:	e007      	b.n	8006368 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40010000 	.word	0x40010000
 800637c:	40000400 	.word	0x40000400
 8006380:	40000800 	.word	0x40000800
 8006384:	40000c00 	.word	0x40000c00
 8006388:	40010400 	.word	0x40010400
 800638c:	40014000 	.word	0x40014000
 8006390:	40001800 	.word	0x40001800

08006394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_TIM_ConfigClockSource+0x1c>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e0b4      	b.n	800651a <HAL_TIM_ConfigClockSource+0x186>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063e8:	d03e      	beq.n	8006468 <HAL_TIM_ConfigClockSource+0xd4>
 80063ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ee:	f200 8087 	bhi.w	8006500 <HAL_TIM_ConfigClockSource+0x16c>
 80063f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063f6:	f000 8086 	beq.w	8006506 <HAL_TIM_ConfigClockSource+0x172>
 80063fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063fe:	d87f      	bhi.n	8006500 <HAL_TIM_ConfigClockSource+0x16c>
 8006400:	2b70      	cmp	r3, #112	@ 0x70
 8006402:	d01a      	beq.n	800643a <HAL_TIM_ConfigClockSource+0xa6>
 8006404:	2b70      	cmp	r3, #112	@ 0x70
 8006406:	d87b      	bhi.n	8006500 <HAL_TIM_ConfigClockSource+0x16c>
 8006408:	2b60      	cmp	r3, #96	@ 0x60
 800640a:	d050      	beq.n	80064ae <HAL_TIM_ConfigClockSource+0x11a>
 800640c:	2b60      	cmp	r3, #96	@ 0x60
 800640e:	d877      	bhi.n	8006500 <HAL_TIM_ConfigClockSource+0x16c>
 8006410:	2b50      	cmp	r3, #80	@ 0x50
 8006412:	d03c      	beq.n	800648e <HAL_TIM_ConfigClockSource+0xfa>
 8006414:	2b50      	cmp	r3, #80	@ 0x50
 8006416:	d873      	bhi.n	8006500 <HAL_TIM_ConfigClockSource+0x16c>
 8006418:	2b40      	cmp	r3, #64	@ 0x40
 800641a:	d058      	beq.n	80064ce <HAL_TIM_ConfigClockSource+0x13a>
 800641c:	2b40      	cmp	r3, #64	@ 0x40
 800641e:	d86f      	bhi.n	8006500 <HAL_TIM_ConfigClockSource+0x16c>
 8006420:	2b30      	cmp	r3, #48	@ 0x30
 8006422:	d064      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0x15a>
 8006424:	2b30      	cmp	r3, #48	@ 0x30
 8006426:	d86b      	bhi.n	8006500 <HAL_TIM_ConfigClockSource+0x16c>
 8006428:	2b20      	cmp	r3, #32
 800642a:	d060      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0x15a>
 800642c:	2b20      	cmp	r3, #32
 800642e:	d867      	bhi.n	8006500 <HAL_TIM_ConfigClockSource+0x16c>
 8006430:	2b00      	cmp	r3, #0
 8006432:	d05c      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0x15a>
 8006434:	2b10      	cmp	r3, #16
 8006436:	d05a      	beq.n	80064ee <HAL_TIM_ConfigClockSource+0x15a>
 8006438:	e062      	b.n	8006500 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800644a:	f000 f991 	bl	8006770 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800645c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	609a      	str	r2, [r3, #8]
      break;
 8006466:	e04f      	b.n	8006508 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006478:	f000 f97a 	bl	8006770 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800648a:	609a      	str	r2, [r3, #8]
      break;
 800648c:	e03c      	b.n	8006508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800649a:	461a      	mov	r2, r3
 800649c:	f000 f8ee 	bl	800667c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2150      	movs	r1, #80	@ 0x50
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 f947 	bl	800673a <TIM_ITRx_SetConfig>
      break;
 80064ac:	e02c      	b.n	8006508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ba:	461a      	mov	r2, r3
 80064bc:	f000 f90d 	bl	80066da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2160      	movs	r1, #96	@ 0x60
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f937 	bl	800673a <TIM_ITRx_SetConfig>
      break;
 80064cc:	e01c      	b.n	8006508 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064da:	461a      	mov	r2, r3
 80064dc:	f000 f8ce 	bl	800667c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2140      	movs	r1, #64	@ 0x40
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 f927 	bl	800673a <TIM_ITRx_SetConfig>
      break;
 80064ec:	e00c      	b.n	8006508 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4619      	mov	r1, r3
 80064f8:	4610      	mov	r0, r2
 80064fa:	f000 f91e 	bl	800673a <TIM_ITRx_SetConfig>
      break;
 80064fe:	e003      	b.n	8006508 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	73fb      	strb	r3, [r7, #15]
      break;
 8006504:	e000      	b.n	8006508 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006506:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006518:	7bfb      	ldrb	r3, [r7, #15]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
	...

08006524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a46      	ldr	r2, [pc, #280]	@ (8006650 <TIM_Base_SetConfig+0x12c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d013      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006542:	d00f      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a43      	ldr	r2, [pc, #268]	@ (8006654 <TIM_Base_SetConfig+0x130>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00b      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a42      	ldr	r2, [pc, #264]	@ (8006658 <TIM_Base_SetConfig+0x134>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d007      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a41      	ldr	r2, [pc, #260]	@ (800665c <TIM_Base_SetConfig+0x138>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <TIM_Base_SetConfig+0x40>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a40      	ldr	r2, [pc, #256]	@ (8006660 <TIM_Base_SetConfig+0x13c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d108      	bne.n	8006576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a35      	ldr	r2, [pc, #212]	@ (8006650 <TIM_Base_SetConfig+0x12c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d02b      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006584:	d027      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a32      	ldr	r2, [pc, #200]	@ (8006654 <TIM_Base_SetConfig+0x130>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d023      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a31      	ldr	r2, [pc, #196]	@ (8006658 <TIM_Base_SetConfig+0x134>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01f      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a30      	ldr	r2, [pc, #192]	@ (800665c <TIM_Base_SetConfig+0x138>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d01b      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2f      	ldr	r2, [pc, #188]	@ (8006660 <TIM_Base_SetConfig+0x13c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d017      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a2e      	ldr	r2, [pc, #184]	@ (8006664 <TIM_Base_SetConfig+0x140>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a2d      	ldr	r2, [pc, #180]	@ (8006668 <TIM_Base_SetConfig+0x144>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d00f      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a2c      	ldr	r2, [pc, #176]	@ (800666c <TIM_Base_SetConfig+0x148>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00b      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006670 <TIM_Base_SetConfig+0x14c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d007      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006674 <TIM_Base_SetConfig+0x150>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d003      	beq.n	80065d6 <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a29      	ldr	r2, [pc, #164]	@ (8006678 <TIM_Base_SetConfig+0x154>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d108      	bne.n	80065e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a10      	ldr	r2, [pc, #64]	@ (8006650 <TIM_Base_SetConfig+0x12c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d003      	beq.n	800661c <TIM_Base_SetConfig+0xf8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a12      	ldr	r2, [pc, #72]	@ (8006660 <TIM_Base_SetConfig+0x13c>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d103      	bne.n	8006624 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	691a      	ldr	r2, [r3, #16]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b01      	cmp	r3, #1
 8006634:	d105      	bne.n	8006642 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f023 0201 	bic.w	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	611a      	str	r2, [r3, #16]
  }
}
 8006642:	bf00      	nop
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	40010000 	.word	0x40010000
 8006654:	40000400 	.word	0x40000400
 8006658:	40000800 	.word	0x40000800
 800665c:	40000c00 	.word	0x40000c00
 8006660:	40010400 	.word	0x40010400
 8006664:	40014000 	.word	0x40014000
 8006668:	40014400 	.word	0x40014400
 800666c:	40014800 	.word	0x40014800
 8006670:	40001800 	.word	0x40001800
 8006674:	40001c00 	.word	0x40001c00
 8006678:	40002000 	.word	0x40002000

0800667c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6a1b      	ldr	r3, [r3, #32]
 800668c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f023 0201 	bic.w	r2, r3, #1
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f023 030a 	bic.w	r3, r3, #10
 80066b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	621a      	str	r2, [r3, #32]
}
 80066ce:	bf00      	nop
 80066d0:	371c      	adds	r7, #28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066da:	b480      	push	{r7}
 80066dc:	b087      	sub	sp, #28
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	f023 0210 	bic.w	r2, r3, #16
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	031b      	lsls	r3, r3, #12
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006716:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	621a      	str	r2, [r3, #32]
}
 800672e:	bf00      	nop
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800673a:	b480      	push	{r7}
 800673c:	b085      	sub	sp, #20
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	f043 0307 	orr.w	r3, r3, #7
 800675c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	609a      	str	r2, [r3, #8]
}
 8006764:	bf00      	nop
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800678a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	021a      	lsls	r2, r3, #8
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	431a      	orrs	r2, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	4313      	orrs	r3, r2
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	609a      	str	r2, [r3, #8]
}
 80067a4:	bf00      	nop
 80067a6:	371c      	adds	r7, #28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d101      	bne.n	80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067c4:	2302      	movs	r3, #2
 80067c6:	e05a      	b.n	800687e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2202      	movs	r2, #2
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a21      	ldr	r2, [pc, #132]	@ (800688c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d022      	beq.n	8006852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006814:	d01d      	beq.n	8006852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a1d      	ldr	r2, [pc, #116]	@ (8006890 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d018      	beq.n	8006852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a1b      	ldr	r2, [pc, #108]	@ (8006894 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d013      	beq.n	8006852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a1a      	ldr	r2, [pc, #104]	@ (8006898 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00e      	beq.n	8006852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a18      	ldr	r2, [pc, #96]	@ (800689c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d009      	beq.n	8006852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a17      	ldr	r2, [pc, #92]	@ (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d004      	beq.n	8006852 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a15      	ldr	r2, [pc, #84]	@ (80068a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d10c      	bne.n	800686c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	4313      	orrs	r3, r2
 8006862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40010000 	.word	0x40010000
 8006890:	40000400 	.word	0x40000400
 8006894:	40000800 	.word	0x40000800
 8006898:	40000c00 	.word	0x40000c00
 800689c:	40010400 	.word	0x40010400
 80068a0:	40014000 	.word	0x40014000
 80068a4:	40001800 	.word	0x40001800

080068a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e042      	b.n	8006940 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d106      	bne.n	80068d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7fb fc72 	bl	80021b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2224      	movs	r2, #36	@ 0x24
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fc85 	bl	80071fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	695a      	ldr	r2, [r3, #20]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2220      	movs	r2, #32
 8006934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b0ba      	sub	sp, #232	@ 0xe8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800696e:	2300      	movs	r3, #0
 8006970:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006974:	2300      	movs	r3, #0
 8006976:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800697a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10f      	bne.n	80069ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800698e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <HAL_UART_IRQHandler+0x66>
 800699a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fb69 	bl	800707e <UART_Receive_IT>
      return;
 80069ac:	e25b      	b.n	8006e66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 80de 	beq.w	8006b74 <HAL_UART_IRQHandler+0x22c>
 80069b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d106      	bne.n	80069d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 80d1 	beq.w	8006b74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80069d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00b      	beq.n	80069f6 <HAL_UART_IRQHandler+0xae>
 80069de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d005      	beq.n	80069f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ee:	f043 0201 	orr.w	r2, r3, #1
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069fa:	f003 0304 	and.w	r3, r3, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00b      	beq.n	8006a1a <HAL_UART_IRQHandler+0xd2>
 8006a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d005      	beq.n	8006a1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a12:	f043 0202 	orr.w	r2, r3, #2
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00b      	beq.n	8006a3e <HAL_UART_IRQHandler+0xf6>
 8006a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d005      	beq.n	8006a3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a36:	f043 0204 	orr.w	r2, r3, #4
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a42:	f003 0308 	and.w	r3, r3, #8
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d011      	beq.n	8006a6e <HAL_UART_IRQHandler+0x126>
 8006a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a4e:	f003 0320 	and.w	r3, r3, #32
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d105      	bne.n	8006a62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d005      	beq.n	8006a6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a66:	f043 0208 	orr.w	r2, r3, #8
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 81f2 	beq.w	8006e5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d008      	beq.n	8006a96 <HAL_UART_IRQHandler+0x14e>
 8006a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a88:	f003 0320 	and.w	r3, r3, #32
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 faf4 	bl	800707e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa0:	2b40      	cmp	r3, #64	@ 0x40
 8006aa2:	bf0c      	ite	eq
 8006aa4:	2301      	moveq	r3, #1
 8006aa6:	2300      	movne	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab2:	f003 0308 	and.w	r3, r3, #8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d103      	bne.n	8006ac2 <HAL_UART_IRQHandler+0x17a>
 8006aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d04f      	beq.n	8006b62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f9fc 	bl	8006ec0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad2:	2b40      	cmp	r3, #64	@ 0x40
 8006ad4:	d141      	bne.n	8006b5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3314      	adds	r3, #20
 8006adc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3314      	adds	r3, #20
 8006afe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1d9      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d013      	beq.n	8006b52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2e:	4a7e      	ldr	r2, [pc, #504]	@ (8006d28 <HAL_UART_IRQHandler+0x3e0>)
 8006b30:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fc f952 	bl	8002de0 <HAL_DMA_Abort_IT>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d016      	beq.n	8006b70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b50:	e00e      	b.n	8006b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f99e 	bl	8006e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b58:	e00a      	b.n	8006b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f99a 	bl	8006e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b60:	e006      	b.n	8006b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f996 	bl	8006e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006b6e:	e175      	b.n	8006e5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b70:	bf00      	nop
    return;
 8006b72:	e173      	b.n	8006e5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	f040 814f 	bne.w	8006e1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b82:	f003 0310 	and.w	r3, r3, #16
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 8148 	beq.w	8006e1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 8141 	beq.w	8006e1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	60bb      	str	r3, [r7, #8]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	60bb      	str	r3, [r7, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	60bb      	str	r3, [r7, #8]
 8006bae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bba:	2b40      	cmp	r3, #64	@ 0x40
 8006bbc:	f040 80b6 	bne.w	8006d2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8145 	beq.w	8006e60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bde:	429a      	cmp	r2, r3
 8006be0:	f080 813e 	bcs.w	8006e60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bf6:	f000 8088 	beq.w	8006d0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	330c      	adds	r3, #12
 8006c00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c08:	e853 3f00 	ldrex	r3, [r3]
 8006c0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	330c      	adds	r3, #12
 8006c22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006c26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1d9      	bne.n	8006bfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3314      	adds	r3, #20
 8006c4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c58:	f023 0301 	bic.w	r3, r3, #1
 8006c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3314      	adds	r3, #20
 8006c66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006c72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006c7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1e1      	bne.n	8006c46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3314      	adds	r3, #20
 8006c88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3314      	adds	r3, #20
 8006ca2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ca6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ca8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006cac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e3      	bne.n	8006c82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	330c      	adds	r3, #12
 8006cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006cd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cda:	f023 0310 	bic.w	r3, r3, #16
 8006cde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006cec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006cee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cf2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e3      	bne.n	8006cc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fb fffb 	bl	8002d00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f8c1 	bl	8006ea8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d26:	e09b      	b.n	8006e60 <HAL_UART_IRQHandler+0x518>
 8006d28:	08006f87 	.word	0x08006f87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 808e 	beq.w	8006e64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 8089 	beq.w	8006e64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	330c      	adds	r3, #12
 8006d58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5c:	e853 3f00 	ldrex	r3, [r3]
 8006d60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	330c      	adds	r3, #12
 8006d72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006d76:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e3      	bne.n	8006d52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3314      	adds	r3, #20
 8006d90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	623b      	str	r3, [r7, #32]
   return(result);
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	f023 0301 	bic.w	r3, r3, #1
 8006da0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3314      	adds	r3, #20
 8006daa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006dae:	633a      	str	r2, [r7, #48]	@ 0x30
 8006db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e3      	bne.n	8006d8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	330c      	adds	r3, #12
 8006dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 0310 	bic.w	r3, r3, #16
 8006de6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	330c      	adds	r3, #12
 8006df0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006df4:	61fa      	str	r2, [r7, #28]
 8006df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	69b9      	ldr	r1, [r7, #24]
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	617b      	str	r3, [r7, #20]
   return(result);
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e3      	bne.n	8006dd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f847 	bl	8006ea8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e1a:	e023      	b.n	8006e64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d009      	beq.n	8006e3c <HAL_UART_IRQHandler+0x4f4>
 8006e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f8ba 	bl	8006fae <UART_Transmit_IT>
    return;
 8006e3a:	e014      	b.n	8006e66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00e      	beq.n	8006e66 <HAL_UART_IRQHandler+0x51e>
 8006e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d008      	beq.n	8006e66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f8fa 	bl	800704e <UART_EndTransmit_IT>
    return;
 8006e5a:	e004      	b.n	8006e66 <HAL_UART_IRQHandler+0x51e>
    return;
 8006e5c:	bf00      	nop
 8006e5e:	e002      	b.n	8006e66 <HAL_UART_IRQHandler+0x51e>
      return;
 8006e60:	bf00      	nop
 8006e62:	e000      	b.n	8006e66 <HAL_UART_IRQHandler+0x51e>
      return;
 8006e64:	bf00      	nop
  }
}
 8006e66:	37e8      	adds	r7, #232	@ 0xe8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b095      	sub	sp, #84	@ 0x54
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	330c      	adds	r3, #12
 8006ece:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	330c      	adds	r3, #12
 8006ee6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ee8:	643a      	str	r2, [r7, #64]	@ 0x40
 8006eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006eee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e5      	bne.n	8006ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3314      	adds	r3, #20
 8006f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f023 0301 	bic.w	r3, r3, #1
 8006f12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3314      	adds	r3, #20
 8006f1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e5      	bne.n	8006efc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d119      	bne.n	8006f6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	330c      	adds	r3, #12
 8006f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f023 0310 	bic.w	r3, r3, #16
 8006f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	330c      	adds	r3, #12
 8006f56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f58:	61ba      	str	r2, [r7, #24]
 8006f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	6979      	ldr	r1, [r7, #20]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	613b      	str	r3, [r7, #16]
   return(result);
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e5      	bne.n	8006f38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f7a:	bf00      	nop
 8006f7c:	3754      	adds	r7, #84	@ 0x54
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f7ff ff77 	bl	8006e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa6:	bf00      	nop
 8006fa8:	3710      	adds	r7, #16
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b21      	cmp	r3, #33	@ 0x21
 8006fc0:	d13e      	bne.n	8007040 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fca:	d114      	bne.n	8006ff6 <UART_Transmit_IT+0x48>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d110      	bne.n	8006ff6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a1b      	ldr	r3, [r3, #32]
 8006fd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fe8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	1c9a      	adds	r2, r3, #2
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	621a      	str	r2, [r3, #32]
 8006ff4:	e008      	b.n	8007008 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	1c59      	adds	r1, r3, #1
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6211      	str	r1, [r2, #32]
 8007000:	781a      	ldrb	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800700c:	b29b      	uxth	r3, r3
 800700e:	3b01      	subs	r3, #1
 8007010:	b29b      	uxth	r3, r3
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	4619      	mov	r1, r3
 8007016:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10f      	bne.n	800703c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800702a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68da      	ldr	r2, [r3, #12]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800703a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	e000      	b.n	8007042 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007040:	2302      	movs	r3, #2
  }
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007064:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff fefc 	bl	8006e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b08c      	sub	sp, #48	@ 0x30
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b22      	cmp	r3, #34	@ 0x22
 8007090:	f040 80ae 	bne.w	80071f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800709c:	d117      	bne.n	80070ce <UART_Receive_IT+0x50>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d113      	bne.n	80070ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070bc:	b29a      	uxth	r2, r3
 80070be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c6:	1c9a      	adds	r2, r3, #2
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80070cc:	e026      	b.n	800711c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80070d4:	2300      	movs	r3, #0
 80070d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070e0:	d007      	beq.n	80070f2 <UART_Receive_IT+0x74>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10a      	bne.n	8007100 <UART_Receive_IT+0x82>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d106      	bne.n	8007100 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	e008      	b.n	8007112 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	b2db      	uxtb	r3, r3
 8007108:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800710c:	b2da      	uxtb	r2, r3
 800710e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007110:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007120:	b29b      	uxth	r3, r3
 8007122:	3b01      	subs	r3, #1
 8007124:	b29b      	uxth	r3, r3
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4619      	mov	r1, r3
 800712a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800712c:	2b00      	cmp	r3, #0
 800712e:	d15d      	bne.n	80071ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0220 	bic.w	r2, r2, #32
 800713e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800714e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695a      	ldr	r2, [r3, #20]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0201 	bic.w	r2, r2, #1
 800715e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2220      	movs	r2, #32
 8007164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007172:	2b01      	cmp	r3, #1
 8007174:	d135      	bne.n	80071e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	330c      	adds	r3, #12
 8007182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	613b      	str	r3, [r7, #16]
   return(result);
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f023 0310 	bic.w	r3, r3, #16
 8007192:	627b      	str	r3, [r7, #36]	@ 0x24
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	330c      	adds	r3, #12
 800719a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800719c:	623a      	str	r2, [r7, #32]
 800719e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	69f9      	ldr	r1, [r7, #28]
 80071a2:	6a3a      	ldr	r2, [r7, #32]
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e5      	bne.n	800717c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0310 	and.w	r3, r3, #16
 80071ba:	2b10      	cmp	r3, #16
 80071bc:	d10a      	bne.n	80071d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80071be:	2300      	movs	r3, #0
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7ff fe64 	bl	8006ea8 <HAL_UARTEx_RxEventCallback>
 80071e0:	e002      	b.n	80071e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7ff fe4c 	bl	8006e80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e002      	b.n	80071f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	e000      	b.n	80071f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80071f0:	2302      	movs	r3, #2
  }
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3730      	adds	r7, #48	@ 0x30
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007200:	b0c0      	sub	sp, #256	@ 0x100
 8007202:	af00      	add	r7, sp, #0
 8007204:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007218:	68d9      	ldr	r1, [r3, #12]
 800721a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	ea40 0301 	orr.w	r3, r0, r1
 8007224:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	431a      	orrs	r2, r3
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	431a      	orrs	r2, r3
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	4313      	orrs	r3, r2
 8007244:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007254:	f021 010c 	bic.w	r1, r1, #12
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007262:	430b      	orrs	r3, r1
 8007264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007276:	6999      	ldr	r1, [r3, #24]
 8007278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	ea40 0301 	orr.w	r3, r0, r1
 8007282:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	4b8f      	ldr	r3, [pc, #572]	@ (80074c8 <UART_SetConfig+0x2cc>)
 800728c:	429a      	cmp	r2, r3
 800728e:	d005      	beq.n	800729c <UART_SetConfig+0xa0>
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4b8d      	ldr	r3, [pc, #564]	@ (80074cc <UART_SetConfig+0x2d0>)
 8007298:	429a      	cmp	r2, r3
 800729a:	d104      	bne.n	80072a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800729c:	f7fc fe66 	bl	8003f6c <HAL_RCC_GetPCLK2Freq>
 80072a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072a4:	e003      	b.n	80072ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072a6:	f7fc fe4d 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 80072aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072b8:	f040 810c 	bne.w	80074d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80072ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80072ce:	4622      	mov	r2, r4
 80072d0:	462b      	mov	r3, r5
 80072d2:	1891      	adds	r1, r2, r2
 80072d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80072d6:	415b      	adcs	r3, r3
 80072d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072de:	4621      	mov	r1, r4
 80072e0:	eb12 0801 	adds.w	r8, r2, r1
 80072e4:	4629      	mov	r1, r5
 80072e6:	eb43 0901 	adc.w	r9, r3, r1
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	f04f 0300 	mov.w	r3, #0
 80072f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072fe:	4690      	mov	r8, r2
 8007300:	4699      	mov	r9, r3
 8007302:	4623      	mov	r3, r4
 8007304:	eb18 0303 	adds.w	r3, r8, r3
 8007308:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800730c:	462b      	mov	r3, r5
 800730e:	eb49 0303 	adc.w	r3, r9, r3
 8007312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007322:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007326:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800732a:	460b      	mov	r3, r1
 800732c:	18db      	adds	r3, r3, r3
 800732e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007330:	4613      	mov	r3, r2
 8007332:	eb42 0303 	adc.w	r3, r2, r3
 8007336:	657b      	str	r3, [r7, #84]	@ 0x54
 8007338:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800733c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007340:	f7f8 ff42 	bl	80001c8 <__aeabi_uldivmod>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4b61      	ldr	r3, [pc, #388]	@ (80074d0 <UART_SetConfig+0x2d4>)
 800734a:	fba3 2302 	umull	r2, r3, r3, r2
 800734e:	095b      	lsrs	r3, r3, #5
 8007350:	011c      	lsls	r4, r3, #4
 8007352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007356:	2200      	movs	r2, #0
 8007358:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800735c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007360:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007364:	4642      	mov	r2, r8
 8007366:	464b      	mov	r3, r9
 8007368:	1891      	adds	r1, r2, r2
 800736a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800736c:	415b      	adcs	r3, r3
 800736e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007370:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007374:	4641      	mov	r1, r8
 8007376:	eb12 0a01 	adds.w	sl, r2, r1
 800737a:	4649      	mov	r1, r9
 800737c:	eb43 0b01 	adc.w	fp, r3, r1
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800738c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007394:	4692      	mov	sl, r2
 8007396:	469b      	mov	fp, r3
 8007398:	4643      	mov	r3, r8
 800739a:	eb1a 0303 	adds.w	r3, sl, r3
 800739e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073a2:	464b      	mov	r3, r9
 80073a4:	eb4b 0303 	adc.w	r3, fp, r3
 80073a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80073bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80073c0:	460b      	mov	r3, r1
 80073c2:	18db      	adds	r3, r3, r3
 80073c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80073c6:	4613      	mov	r3, r2
 80073c8:	eb42 0303 	adc.w	r3, r2, r3
 80073cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80073d6:	f7f8 fef7 	bl	80001c8 <__aeabi_uldivmod>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4611      	mov	r1, r2
 80073e0:	4b3b      	ldr	r3, [pc, #236]	@ (80074d0 <UART_SetConfig+0x2d4>)
 80073e2:	fba3 2301 	umull	r2, r3, r3, r1
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	2264      	movs	r2, #100	@ 0x64
 80073ea:	fb02 f303 	mul.w	r3, r2, r3
 80073ee:	1acb      	subs	r3, r1, r3
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80073f6:	4b36      	ldr	r3, [pc, #216]	@ (80074d0 <UART_SetConfig+0x2d4>)
 80073f8:	fba3 2302 	umull	r2, r3, r3, r2
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007404:	441c      	add	r4, r3
 8007406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800740a:	2200      	movs	r2, #0
 800740c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007410:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007414:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007418:	4642      	mov	r2, r8
 800741a:	464b      	mov	r3, r9
 800741c:	1891      	adds	r1, r2, r2
 800741e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007420:	415b      	adcs	r3, r3
 8007422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007424:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007428:	4641      	mov	r1, r8
 800742a:	1851      	adds	r1, r2, r1
 800742c:	6339      	str	r1, [r7, #48]	@ 0x30
 800742e:	4649      	mov	r1, r9
 8007430:	414b      	adcs	r3, r1
 8007432:	637b      	str	r3, [r7, #52]	@ 0x34
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	f04f 0300 	mov.w	r3, #0
 800743c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007440:	4659      	mov	r1, fp
 8007442:	00cb      	lsls	r3, r1, #3
 8007444:	4651      	mov	r1, sl
 8007446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800744a:	4651      	mov	r1, sl
 800744c:	00ca      	lsls	r2, r1, #3
 800744e:	4610      	mov	r0, r2
 8007450:	4619      	mov	r1, r3
 8007452:	4603      	mov	r3, r0
 8007454:	4642      	mov	r2, r8
 8007456:	189b      	adds	r3, r3, r2
 8007458:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800745c:	464b      	mov	r3, r9
 800745e:	460a      	mov	r2, r1
 8007460:	eb42 0303 	adc.w	r3, r2, r3
 8007464:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007474:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007478:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800747c:	460b      	mov	r3, r1
 800747e:	18db      	adds	r3, r3, r3
 8007480:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007482:	4613      	mov	r3, r2
 8007484:	eb42 0303 	adc.w	r3, r2, r3
 8007488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800748a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800748e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007492:	f7f8 fe99 	bl	80001c8 <__aeabi_uldivmod>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4b0d      	ldr	r3, [pc, #52]	@ (80074d0 <UART_SetConfig+0x2d4>)
 800749c:	fba3 1302 	umull	r1, r3, r3, r2
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	2164      	movs	r1, #100	@ 0x64
 80074a4:	fb01 f303 	mul.w	r3, r1, r3
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	3332      	adds	r3, #50	@ 0x32
 80074ae:	4a08      	ldr	r2, [pc, #32]	@ (80074d0 <UART_SetConfig+0x2d4>)
 80074b0:	fba2 2303 	umull	r2, r3, r2, r3
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	f003 0207 	and.w	r2, r3, #7
 80074ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4422      	add	r2, r4
 80074c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074c4:	e106      	b.n	80076d4 <UART_SetConfig+0x4d8>
 80074c6:	bf00      	nop
 80074c8:	40011000 	.word	0x40011000
 80074cc:	40011400 	.word	0x40011400
 80074d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074d8:	2200      	movs	r2, #0
 80074da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80074e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80074e6:	4642      	mov	r2, r8
 80074e8:	464b      	mov	r3, r9
 80074ea:	1891      	adds	r1, r2, r2
 80074ec:	6239      	str	r1, [r7, #32]
 80074ee:	415b      	adcs	r3, r3
 80074f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80074f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074f6:	4641      	mov	r1, r8
 80074f8:	1854      	adds	r4, r2, r1
 80074fa:	4649      	mov	r1, r9
 80074fc:	eb43 0501 	adc.w	r5, r3, r1
 8007500:	f04f 0200 	mov.w	r2, #0
 8007504:	f04f 0300 	mov.w	r3, #0
 8007508:	00eb      	lsls	r3, r5, #3
 800750a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800750e:	00e2      	lsls	r2, r4, #3
 8007510:	4614      	mov	r4, r2
 8007512:	461d      	mov	r5, r3
 8007514:	4643      	mov	r3, r8
 8007516:	18e3      	adds	r3, r4, r3
 8007518:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800751c:	464b      	mov	r3, r9
 800751e:	eb45 0303 	adc.w	r3, r5, r3
 8007522:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007532:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	f04f 0300 	mov.w	r3, #0
 800753e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007542:	4629      	mov	r1, r5
 8007544:	008b      	lsls	r3, r1, #2
 8007546:	4621      	mov	r1, r4
 8007548:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800754c:	4621      	mov	r1, r4
 800754e:	008a      	lsls	r2, r1, #2
 8007550:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007554:	f7f8 fe38 	bl	80001c8 <__aeabi_uldivmod>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	4b60      	ldr	r3, [pc, #384]	@ (80076e0 <UART_SetConfig+0x4e4>)
 800755e:	fba3 2302 	umull	r2, r3, r3, r2
 8007562:	095b      	lsrs	r3, r3, #5
 8007564:	011c      	lsls	r4, r3, #4
 8007566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800756a:	2200      	movs	r2, #0
 800756c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007570:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007574:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007578:	4642      	mov	r2, r8
 800757a:	464b      	mov	r3, r9
 800757c:	1891      	adds	r1, r2, r2
 800757e:	61b9      	str	r1, [r7, #24]
 8007580:	415b      	adcs	r3, r3
 8007582:	61fb      	str	r3, [r7, #28]
 8007584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007588:	4641      	mov	r1, r8
 800758a:	1851      	adds	r1, r2, r1
 800758c:	6139      	str	r1, [r7, #16]
 800758e:	4649      	mov	r1, r9
 8007590:	414b      	adcs	r3, r1
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	f04f 0300 	mov.w	r3, #0
 800759c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075a0:	4659      	mov	r1, fp
 80075a2:	00cb      	lsls	r3, r1, #3
 80075a4:	4651      	mov	r1, sl
 80075a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075aa:	4651      	mov	r1, sl
 80075ac:	00ca      	lsls	r2, r1, #3
 80075ae:	4610      	mov	r0, r2
 80075b0:	4619      	mov	r1, r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	4642      	mov	r2, r8
 80075b6:	189b      	adds	r3, r3, r2
 80075b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075bc:	464b      	mov	r3, r9
 80075be:	460a      	mov	r2, r1
 80075c0:	eb42 0303 	adc.w	r3, r2, r3
 80075c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	f04f 0300 	mov.w	r3, #0
 80075dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80075e0:	4649      	mov	r1, r9
 80075e2:	008b      	lsls	r3, r1, #2
 80075e4:	4641      	mov	r1, r8
 80075e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075ea:	4641      	mov	r1, r8
 80075ec:	008a      	lsls	r2, r1, #2
 80075ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80075f2:	f7f8 fde9 	bl	80001c8 <__aeabi_uldivmod>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	4611      	mov	r1, r2
 80075fc:	4b38      	ldr	r3, [pc, #224]	@ (80076e0 <UART_SetConfig+0x4e4>)
 80075fe:	fba3 2301 	umull	r2, r3, r3, r1
 8007602:	095b      	lsrs	r3, r3, #5
 8007604:	2264      	movs	r2, #100	@ 0x64
 8007606:	fb02 f303 	mul.w	r3, r2, r3
 800760a:	1acb      	subs	r3, r1, r3
 800760c:	011b      	lsls	r3, r3, #4
 800760e:	3332      	adds	r3, #50	@ 0x32
 8007610:	4a33      	ldr	r2, [pc, #204]	@ (80076e0 <UART_SetConfig+0x4e4>)
 8007612:	fba2 2303 	umull	r2, r3, r2, r3
 8007616:	095b      	lsrs	r3, r3, #5
 8007618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800761c:	441c      	add	r4, r3
 800761e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007622:	2200      	movs	r2, #0
 8007624:	673b      	str	r3, [r7, #112]	@ 0x70
 8007626:	677a      	str	r2, [r7, #116]	@ 0x74
 8007628:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800762c:	4642      	mov	r2, r8
 800762e:	464b      	mov	r3, r9
 8007630:	1891      	adds	r1, r2, r2
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	415b      	adcs	r3, r3
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800763c:	4641      	mov	r1, r8
 800763e:	1851      	adds	r1, r2, r1
 8007640:	6039      	str	r1, [r7, #0]
 8007642:	4649      	mov	r1, r9
 8007644:	414b      	adcs	r3, r1
 8007646:	607b      	str	r3, [r7, #4]
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	f04f 0300 	mov.w	r3, #0
 8007650:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007654:	4659      	mov	r1, fp
 8007656:	00cb      	lsls	r3, r1, #3
 8007658:	4651      	mov	r1, sl
 800765a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800765e:	4651      	mov	r1, sl
 8007660:	00ca      	lsls	r2, r1, #3
 8007662:	4610      	mov	r0, r2
 8007664:	4619      	mov	r1, r3
 8007666:	4603      	mov	r3, r0
 8007668:	4642      	mov	r2, r8
 800766a:	189b      	adds	r3, r3, r2
 800766c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800766e:	464b      	mov	r3, r9
 8007670:	460a      	mov	r2, r1
 8007672:	eb42 0303 	adc.w	r3, r2, r3
 8007676:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	663b      	str	r3, [r7, #96]	@ 0x60
 8007682:	667a      	str	r2, [r7, #100]	@ 0x64
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007690:	4649      	mov	r1, r9
 8007692:	008b      	lsls	r3, r1, #2
 8007694:	4641      	mov	r1, r8
 8007696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800769a:	4641      	mov	r1, r8
 800769c:	008a      	lsls	r2, r1, #2
 800769e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80076a2:	f7f8 fd91 	bl	80001c8 <__aeabi_uldivmod>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4b0d      	ldr	r3, [pc, #52]	@ (80076e0 <UART_SetConfig+0x4e4>)
 80076ac:	fba3 1302 	umull	r1, r3, r3, r2
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	2164      	movs	r1, #100	@ 0x64
 80076b4:	fb01 f303 	mul.w	r3, r1, r3
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	011b      	lsls	r3, r3, #4
 80076bc:	3332      	adds	r3, #50	@ 0x32
 80076be:	4a08      	ldr	r2, [pc, #32]	@ (80076e0 <UART_SetConfig+0x4e4>)
 80076c0:	fba2 2303 	umull	r2, r3, r2, r3
 80076c4:	095b      	lsrs	r3, r3, #5
 80076c6:	f003 020f 	and.w	r2, r3, #15
 80076ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4422      	add	r2, r4
 80076d2:	609a      	str	r2, [r3, #8]
}
 80076d4:	bf00      	nop
 80076d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80076da:	46bd      	mov	sp, r7
 80076dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076e0:	51eb851f 	.word	0x51eb851f

080076e4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80076e4:	b084      	sub	sp, #16
 80076e6:	b480      	push	{r7}
 80076e8:	b085      	sub	sp, #20
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	f107 001c 	add.w	r0, r7, #28
 80076f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80076fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80076fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80076fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8007702:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8007706:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800770a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800770c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800770e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800771e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	431a      	orrs	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	b004      	add	sp, #16
 8007738:	4770      	bx	lr

0800773a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2203      	movs	r2, #3
 8007782:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0303 	and.w	r3, r3, #3
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr

080077ae <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b085      	sub	sp, #20
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077cc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80077d2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80077d8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	4313      	orrs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80077e8:	f023 030f 	bic.w	r3, r3, #15
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	431a      	orrs	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007802:	b480      	push	{r7}
 8007804:	b083      	sub	sp, #12
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	b2db      	uxtb	r3, r3
}
 8007810:	4618      	mov	r0, r3
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3314      	adds	r3, #20
 800782a:	461a      	mov	r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	4413      	add	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
}  
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007842:	b480      	push	{r7}
 8007844:	b085      	sub	sp, #20
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007868:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800786e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007874:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007880:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	431a      	orrs	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800788c:	2300      	movs	r3, #0

}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b088      	sub	sp, #32
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80078a8:	2310      	movs	r3, #16
 80078aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078ac:	2340      	movs	r3, #64	@ 0x40
 80078ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078b0:	2300      	movs	r3, #0
 80078b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078ba:	f107 0308 	add.w	r3, r7, #8
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff ff74 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80078c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078ca:	2110      	movs	r1, #16
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f9d7 	bl	8007c80 <SDMMC_GetCmdResp1>
 80078d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078d4:	69fb      	ldr	r3, [r7, #28]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3720      	adds	r7, #32
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b088      	sub	sp, #32
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80078ec:	2311      	movs	r3, #17
 80078ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80078f0:	2340      	movs	r3, #64	@ 0x40
 80078f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80078f4:	2300      	movs	r3, #0
 80078f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80078f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80078fe:	f107 0308 	add.w	r3, r7, #8
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff ff52 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800790a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800790e:	2111      	movs	r1, #17
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f9b5 	bl	8007c80 <SDMMC_GetCmdResp1>
 8007916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007918:	69fb      	ldr	r3, [r7, #28]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3720      	adds	r7, #32
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b088      	sub	sp, #32
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007930:	2312      	movs	r3, #18
 8007932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007934:	2340      	movs	r3, #64	@ 0x40
 8007936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007938:	2300      	movs	r3, #0
 800793a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800793c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007940:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007942:	f107 0308 	add.w	r3, r7, #8
 8007946:	4619      	mov	r1, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff ff30 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800794e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007952:	2112      	movs	r1, #18
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f993 	bl	8007c80 <SDMMC_GetCmdResp1>
 800795a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800795c:	69fb      	ldr	r3, [r7, #28]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3720      	adds	r7, #32
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b088      	sub	sp, #32
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007974:	2318      	movs	r3, #24
 8007976:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007978:	2340      	movs	r3, #64	@ 0x40
 800797a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800797c:	2300      	movs	r3, #0
 800797e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007984:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007986:	f107 0308 	add.w	r3, r7, #8
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7ff ff0e 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007996:	2118      	movs	r1, #24
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f971 	bl	8007c80 <SDMMC_GetCmdResp1>
 800799e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079a0:	69fb      	ldr	r3, [r7, #28]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3720      	adds	r7, #32
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b088      	sub	sp, #32
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80079b8:	2319      	movs	r3, #25
 80079ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80079bc:	2340      	movs	r3, #64	@ 0x40
 80079be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80079c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80079ca:	f107 0308 	add.w	r3, r7, #8
 80079ce:	4619      	mov	r1, r3
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff feec 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80079d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079da:	2119      	movs	r1, #25
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f94f 	bl	8007c80 <SDMMC_GetCmdResp1>
 80079e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079e4:	69fb      	ldr	r3, [r7, #28]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3720      	adds	r7, #32
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b088      	sub	sp, #32
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80079f8:	2300      	movs	r3, #0
 80079fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80079fc:	230c      	movs	r3, #12
 80079fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a00:	2340      	movs	r3, #64	@ 0x40
 8007a02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a0e:	f107 0308 	add.w	r3, r7, #8
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff feca 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007a1a:	4a05      	ldr	r2, [pc, #20]	@ (8007a30 <SDMMC_CmdStopTransfer+0x40>)
 8007a1c:	210c      	movs	r1, #12
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 f92e 	bl	8007c80 <SDMMC_GetCmdResp1>
 8007a24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a26:	69fb      	ldr	r3, [r7, #28]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3720      	adds	r7, #32
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	05f5e100 	.word	0x05f5e100

08007a34 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08a      	sub	sp, #40	@ 0x28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007a44:	2307      	movs	r3, #7
 8007a46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007a48:	2340      	movs	r3, #64	@ 0x40
 8007a4a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a54:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a56:	f107 0310 	add.w	r3, r7, #16
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f7ff fea6 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a66:	2107      	movs	r1, #7
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 f909 	bl	8007c80 <SDMMC_GetCmdResp1>
 8007a6e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8007a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3728      	adds	r7, #40	@ 0x28
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b088      	sub	sp, #32
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007a98:	f107 0308 	add.w	r3, r7, #8
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff fe85 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fb23 	bl	80080f0 <SDMMC_GetCmdError>
 8007aaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007aac:	69fb      	ldr	r3, [r7, #28]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3720      	adds	r7, #32
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b088      	sub	sp, #32
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007abe:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007ac2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007ac4:	2308      	movs	r3, #8
 8007ac6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ac8:	2340      	movs	r3, #64	@ 0x40
 8007aca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007acc:	2300      	movs	r3, #0
 8007ace:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ad4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ad6:	f107 0308 	add.w	r3, r7, #8
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff fe66 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fab6 	bl	8008054 <SDMMC_GetCmdResp7>
 8007ae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007aea:	69fb      	ldr	r3, [r7, #28]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3720      	adds	r7, #32
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007b02:	2337      	movs	r3, #55	@ 0x37
 8007b04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b06:	2340      	movs	r3, #64	@ 0x40
 8007b08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b14:	f107 0308 	add.w	r3, r7, #8
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff fe47 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b24:	2137      	movs	r1, #55	@ 0x37
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f8aa 	bl	8007c80 <SDMMC_GetCmdResp1>
 8007b2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b2e:	69fb      	ldr	r3, [r7, #28]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3720      	adds	r7, #32
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007b4e:	2329      	movs	r3, #41	@ 0x29
 8007b50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b52:	2340      	movs	r3, #64	@ 0x40
 8007b54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b56:	2300      	movs	r3, #0
 8007b58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b60:	f107 0308 	add.w	r3, r7, #8
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7ff fe21 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f9bd 	bl	8007eec <SDMMC_GetCmdResp3>
 8007b72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b74:	69fb      	ldr	r3, [r7, #28]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3720      	adds	r7, #32
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b088      	sub	sp, #32
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007b8e:	23c0      	movs	r3, #192	@ 0xc0
 8007b90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b92:	2300      	movs	r3, #0
 8007b94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b9c:	f107 0308 	add.w	r3, r7, #8
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7ff fe03 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f957 	bl	8007e5c <SDMMC_GetCmdResp2>
 8007bae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bb0:	69fb      	ldr	r3, [r7, #28]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3720      	adds	r7, #32
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b088      	sub	sp, #32
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007bc8:	2309      	movs	r3, #9
 8007bca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007bcc:	23c0      	movs	r3, #192	@ 0xc0
 8007bce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bd8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bda:	f107 0308 	add.w	r3, r7, #8
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fde4 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f938 	bl	8007e5c <SDMMC_GetCmdResp2>
 8007bec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bee:	69fb      	ldr	r3, [r7, #28]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3720      	adds	r7, #32
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007c06:	2303      	movs	r3, #3
 8007c08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c0a:	2340      	movs	r3, #64	@ 0x40
 8007c0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c18:	f107 0308 	add.w	r3, r7, #8
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff fdc5 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	2103      	movs	r1, #3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f99d 	bl	8007f68 <SDMMC_GetCmdResp6>
 8007c2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c30:	69fb      	ldr	r3, [r7, #28]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3720      	adds	r7, #32
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b088      	sub	sp, #32
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
 8007c42:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007c48:	230d      	movs	r3, #13
 8007c4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c4c:	2340      	movs	r3, #64	@ 0x40
 8007c4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c50:	2300      	movs	r3, #0
 8007c52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c5a:	f107 0308 	add.w	r3, r7, #8
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff fda4 	bl	80077ae <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c6a:	210d      	movs	r1, #13
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f807 	bl	8007c80 <SDMMC_GetCmdResp1>
 8007c72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c74:	69fb      	ldr	r3, [r7, #28]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3720      	adds	r7, #32
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007c8e:	4b70      	ldr	r3, [pc, #448]	@ (8007e50 <SDMMC_GetCmdResp1+0x1d0>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a70      	ldr	r2, [pc, #448]	@ (8007e54 <SDMMC_GetCmdResp1+0x1d4>)
 8007c94:	fba2 2303 	umull	r2, r3, r2, r3
 8007c98:	0a5a      	lsrs	r2, r3, #9
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	fb02 f303 	mul.w	r3, r2, r3
 8007ca0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	1e5a      	subs	r2, r3, #1
 8007ca6:	61fa      	str	r2, [r7, #28]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d102      	bne.n	8007cb2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007cac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007cb0:	e0c9      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cb6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0ef      	beq.n	8007ca2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1ea      	bne.n	8007ca2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cd0:	f003 0304 	and.w	r3, r3, #4
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d004      	beq.n	8007ce2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2204      	movs	r2, #4
 8007cdc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cde:	2304      	movs	r3, #4
 8007ce0:	e0b1      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d004      	beq.n	8007cf8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e0a6      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	22c5      	movs	r2, #197	@ 0xc5
 8007cfc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7ff fd7f 	bl	8007802 <SDIO_GetCommandResponse>
 8007d04:	4603      	mov	r3, r0
 8007d06:	461a      	mov	r2, r3
 8007d08:	7afb      	ldrb	r3, [r7, #11]
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d001      	beq.n	8007d12 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e099      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007d12:	2100      	movs	r1, #0
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f7ff fd81 	bl	800781c <SDIO_GetResponse>
 8007d1a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8007e58 <SDMMC_GetCmdResp1+0x1d8>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007d26:	2300      	movs	r3, #0
 8007d28:	e08d      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	da02      	bge.n	8007d36 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007d30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d34:	e087      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007d40:	2340      	movs	r3, #64	@ 0x40
 8007d42:	e080      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007d4e:	2380      	movs	r3, #128	@ 0x80
 8007d50:	e079      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007d5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d60:	e071      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d002      	beq.n	8007d72 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007d6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d70:	e069      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d002      	beq.n	8007d82 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007d7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d80:	e061      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007d8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d90:	e059      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007d9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007da0:	e051      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007dac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007db0:	e049      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007dbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007dc0:	e041      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007dcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dd0:	e039      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007ddc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007de0:	e031      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d002      	beq.n	8007df2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007dec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8007df0:	e029      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007dfc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007e00:	e021      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007e0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007e10:	e019      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007e1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007e20:	e011      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007e2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007e30:	e009      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f003 0308 	and.w	r3, r3, #8
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d002      	beq.n	8007e42 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007e3c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8007e40:	e001      	b.n	8007e46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3720      	adds	r7, #32
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	2000000c 	.word	0x2000000c
 8007e54:	10624dd3 	.word	0x10624dd3
 8007e58:	fdffe008 	.word	0xfdffe008

08007e5c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e64:	4b1f      	ldr	r3, [pc, #124]	@ (8007ee4 <SDMMC_GetCmdResp2+0x88>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a1f      	ldr	r2, [pc, #124]	@ (8007ee8 <SDMMC_GetCmdResp2+0x8c>)
 8007e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6e:	0a5b      	lsrs	r3, r3, #9
 8007e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e74:	fb02 f303 	mul.w	r3, r2, r3
 8007e78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	1e5a      	subs	r2, r3, #1
 8007e7e:	60fa      	str	r2, [r7, #12]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d102      	bne.n	8007e8a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007e88:	e026      	b.n	8007ed8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0ef      	beq.n	8007e7a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1ea      	bne.n	8007e7a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2204      	movs	r2, #4
 8007eb4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007eb6:	2304      	movs	r3, #4
 8007eb8:	e00e      	b.n	8007ed8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ebe:	f003 0301 	and.w	r3, r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d004      	beq.n	8007ed0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e003      	b.n	8007ed8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	22c5      	movs	r2, #197	@ 0xc5
 8007ed4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	2000000c 	.word	0x2000000c
 8007ee8:	10624dd3 	.word	0x10624dd3

08007eec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8007f60 <SDMMC_GetCmdResp3+0x74>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8007f64 <SDMMC_GetCmdResp3+0x78>)
 8007efa:	fba2 2303 	umull	r2, r3, r2, r3
 8007efe:	0a5b      	lsrs	r3, r3, #9
 8007f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f04:	fb02 f303 	mul.w	r3, r2, r3
 8007f08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	1e5a      	subs	r2, r3, #1
 8007f0e:	60fa      	str	r2, [r7, #12]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d102      	bne.n	8007f1a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f18:	e01b      	b.n	8007f52 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f1e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0ef      	beq.n	8007f0a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1ea      	bne.n	8007f0a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d004      	beq.n	8007f4a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2204      	movs	r2, #4
 8007f44:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f46:	2304      	movs	r3, #4
 8007f48:	e003      	b.n	8007f52 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	22c5      	movs	r2, #197	@ 0xc5
 8007f4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	2000000c 	.word	0x2000000c
 8007f64:	10624dd3 	.word	0x10624dd3

08007f68 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	460b      	mov	r3, r1
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f76:	4b35      	ldr	r3, [pc, #212]	@ (800804c <SDMMC_GetCmdResp6+0xe4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a35      	ldr	r2, [pc, #212]	@ (8008050 <SDMMC_GetCmdResp6+0xe8>)
 8007f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f80:	0a5b      	lsrs	r3, r3, #9
 8007f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f86:	fb02 f303 	mul.w	r3, r2, r3
 8007f8a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	1e5a      	subs	r2, r3, #1
 8007f90:	61fa      	str	r2, [r7, #28]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d102      	bne.n	8007f9c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f96:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f9a:	e052      	b.n	8008042 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0ef      	beq.n	8007f8c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1ea      	bne.n	8007f8c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2204      	movs	r2, #4
 8007fc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fc8:	2304      	movs	r3, #4
 8007fca:	e03a      	b.n	8008042 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d004      	beq.n	8007fe2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e02f      	b.n	8008042 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f7ff fc0d 	bl	8007802 <SDIO_GetCommandResponse>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	461a      	mov	r2, r3
 8007fec:	7afb      	ldrb	r3, [r7, #11]
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d001      	beq.n	8007ff6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e025      	b.n	8008042 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	22c5      	movs	r2, #197	@ 0xc5
 8007ffa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f7ff fc0c 	bl	800781c <SDIO_GetResponse>
 8008004:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d106      	bne.n	800801e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	0c1b      	lsrs	r3, r3, #16
 8008014:	b29a      	uxth	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800801a:	2300      	movs	r3, #0
 800801c:	e011      	b.n	8008042 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008028:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800802c:	e009      	b.n	8008042 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008038:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800803c:	e001      	b.n	8008042 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800803e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008042:	4618      	mov	r0, r3
 8008044:	3720      	adds	r7, #32
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	2000000c 	.word	0x2000000c
 8008050:	10624dd3 	.word	0x10624dd3

08008054 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800805c:	4b22      	ldr	r3, [pc, #136]	@ (80080e8 <SDMMC_GetCmdResp7+0x94>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a22      	ldr	r2, [pc, #136]	@ (80080ec <SDMMC_GetCmdResp7+0x98>)
 8008062:	fba2 2303 	umull	r2, r3, r2, r3
 8008066:	0a5b      	lsrs	r3, r3, #9
 8008068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800806c:	fb02 f303 	mul.w	r3, r2, r3
 8008070:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	1e5a      	subs	r2, r3, #1
 8008076:	60fa      	str	r2, [r7, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d102      	bne.n	8008082 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800807c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008080:	e02c      	b.n	80080dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008086:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0ef      	beq.n	8008072 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1ea      	bne.n	8008072 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080a0:	f003 0304 	and.w	r3, r3, #4
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d004      	beq.n	80080b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2204      	movs	r2, #4
 80080ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080ae:	2304      	movs	r3, #4
 80080b0:	e014      	b.n	80080dc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d004      	beq.n	80080c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e009      	b.n	80080dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2240      	movs	r2, #64	@ 0x40
 80080d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80080da:	2300      	movs	r3, #0
  
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	2000000c 	.word	0x2000000c
 80080ec:	10624dd3 	.word	0x10624dd3

080080f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080f8:	4b11      	ldr	r3, [pc, #68]	@ (8008140 <SDMMC_GetCmdError+0x50>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a11      	ldr	r2, [pc, #68]	@ (8008144 <SDMMC_GetCmdError+0x54>)
 80080fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008102:	0a5b      	lsrs	r3, r3, #9
 8008104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008108:	fb02 f303 	mul.w	r3, r2, r3
 800810c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	1e5a      	subs	r2, r3, #1
 8008112:	60fa      	str	r2, [r7, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d102      	bne.n	800811e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008118:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800811c:	e009      	b.n	8008132 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0f1      	beq.n	800810e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	22c5      	movs	r2, #197	@ 0xc5
 800812e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	2000000c 	.word	0x2000000c
 8008144:	10624dd3 	.word	0x10624dd3

08008148 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800814c:	4904      	ldr	r1, [pc, #16]	@ (8008160 <MX_FATFS_Init+0x18>)
 800814e:	4805      	ldr	r0, [pc, #20]	@ (8008164 <MX_FATFS_Init+0x1c>)
 8008150:	f002 fcf0 	bl	800ab34 <FATFS_LinkDriver>
 8008154:	4603      	mov	r3, r0
 8008156:	461a      	mov	r2, r3
 8008158:	4b03      	ldr	r3, [pc, #12]	@ (8008168 <MX_FATFS_Init+0x20>)
 800815a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800815c:	bf00      	nop
 800815e:	bd80      	pop	{r7, pc}
 8008160:	20000574 	.word	0x20000574
 8008164:	0800bca4 	.word	0x0800bca4
 8008168:	20000570 	.word	0x20000570

0800816c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008170:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008172:	4618      	mov	r0, r3
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008186:	f000 f86b 	bl	8008260 <BSP_SD_IsDetected>
 800818a:	4603      	mov	r3, r0
 800818c:	2b01      	cmp	r3, #1
 800818e:	d001      	beq.n	8008194 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e005      	b.n	80081a0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008194:	4804      	ldr	r0, [pc, #16]	@ (80081a8 <BSP_SD_Init+0x2c>)
 8008196:	f7fb fefd 	bl	8003f94 <HAL_SD_Init>
 800819a:	4603      	mov	r3, r0
 800819c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800819e:	79fb      	ldrb	r3, [r7, #7]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	200000fc 	.word	0x200000fc

080081ac <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af02      	add	r7, sp, #8
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	68f9      	ldr	r1, [r7, #12]
 80081c8:	4806      	ldr	r0, [pc, #24]	@ (80081e4 <BSP_SD_ReadBlocks+0x38>)
 80081ca:	f7fb ff93 	bl	80040f4 <HAL_SD_ReadBlocks>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3718      	adds	r7, #24
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	200000fc 	.word	0x200000fc

080081e8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b088      	sub	sp, #32
 80081ec:	af02      	add	r7, sp, #8
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
 80081f4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	68f9      	ldr	r1, [r7, #12]
 8008204:	4806      	ldr	r0, [pc, #24]	@ (8008220 <BSP_SD_WriteBlocks+0x38>)
 8008206:	f7fc f95b 	bl	80044c0 <HAL_SD_WriteBlocks>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008214:	7dfb      	ldrb	r3, [r7, #23]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	200000fc 	.word	0x200000fc

08008224 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008228:	4805      	ldr	r0, [pc, #20]	@ (8008240 <BSP_SD_GetCardState+0x1c>)
 800822a:	f7fc fca7 	bl	8004b7c <HAL_SD_GetCardState>
 800822e:	4603      	mov	r3, r0
 8008230:	2b04      	cmp	r3, #4
 8008232:	bf14      	ite	ne
 8008234:	2301      	movne	r3, #1
 8008236:	2300      	moveq	r3, #0
 8008238:	b2db      	uxtb	r3, r3
}
 800823a:	4618      	mov	r0, r3
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	200000fc 	.word	0x200000fc

08008244 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	4803      	ldr	r0, [pc, #12]	@ (800825c <BSP_SD_GetCardInfo+0x18>)
 8008250:	f7fc fc68 	bl	8004b24 <HAL_SD_GetCardInfo>
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	200000fc 	.word	0x200000fc

08008260 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008266:	2301      	movs	r3, #1
 8008268:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	b2db      	uxtb	r3, r3
}
 800826e:	4618      	mov	r0, r3
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
	...

0800827c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	4603      	mov	r3, r0
 8008284:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008286:	4b0b      	ldr	r3, [pc, #44]	@ (80082b4 <SD_CheckStatus+0x38>)
 8008288:	2201      	movs	r2, #1
 800828a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800828c:	f7ff ffca 	bl	8008224 <BSP_SD_GetCardState>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d107      	bne.n	80082a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008296:	4b07      	ldr	r3, [pc, #28]	@ (80082b4 <SD_CheckStatus+0x38>)
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	b2db      	uxtb	r3, r3
 800829c:	f023 0301 	bic.w	r3, r3, #1
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	4b04      	ldr	r3, [pc, #16]	@ (80082b4 <SD_CheckStatus+0x38>)
 80082a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80082a6:	4b03      	ldr	r3, [pc, #12]	@ (80082b4 <SD_CheckStatus+0x38>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b2db      	uxtb	r3, r3
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20000015 	.word	0x20000015

080082b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80082c2:	4b0b      	ldr	r3, [pc, #44]	@ (80082f0 <SD_initialize+0x38>)
 80082c4:	2201      	movs	r2, #1
 80082c6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80082c8:	f7ff ff58 	bl	800817c <BSP_SD_Init>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d107      	bne.n	80082e2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff ffd1 	bl	800827c <SD_CheckStatus>
 80082da:	4603      	mov	r3, r0
 80082dc:	461a      	mov	r2, r3
 80082de:	4b04      	ldr	r3, [pc, #16]	@ (80082f0 <SD_initialize+0x38>)
 80082e0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80082e2:	4b03      	ldr	r3, [pc, #12]	@ (80082f0 <SD_initialize+0x38>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	b2db      	uxtb	r3, r3
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	20000015 	.word	0x20000015

080082f4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	4603      	mov	r3, r0
 80082fc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	4618      	mov	r0, r3
 8008302:	f7ff ffbb 	bl	800827c <SD_CheckStatus>
 8008306:	4603      	mov	r3, r0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	60b9      	str	r1, [r7, #8]
 8008318:	607a      	str	r2, [r7, #4]
 800831a:	603b      	str	r3, [r7, #0]
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008324:	f04f 33ff 	mov.w	r3, #4294967295
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	68b8      	ldr	r0, [r7, #8]
 800832e:	f7ff ff3d 	bl	80081ac <BSP_SD_ReadBlocks>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d107      	bne.n	8008348 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008338:	bf00      	nop
 800833a:	f7ff ff73 	bl	8008224 <BSP_SD_GetCardState>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1fa      	bne.n	800833a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008344:	2300      	movs	r3, #0
 8008346:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8008348:	7dfb      	ldrb	r3, [r7, #23]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b086      	sub	sp, #24
 8008356:	af00      	add	r7, sp, #0
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	603b      	str	r3, [r7, #0]
 800835e:	4603      	mov	r3, r0
 8008360:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008366:	f04f 33ff 	mov.w	r3, #4294967295
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	68b8      	ldr	r0, [r7, #8]
 8008370:	f7ff ff3a 	bl	80081e8 <BSP_SD_WriteBlocks>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d107      	bne.n	800838a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800837a:	bf00      	nop
 800837c:	f7ff ff52 	bl	8008224 <BSP_SD_GetCardState>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1fa      	bne.n	800837c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800838a:	7dfb      	ldrb	r3, [r7, #23]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08c      	sub	sp, #48	@ 0x30
 8008398:	af00      	add	r7, sp, #0
 800839a:	4603      	mov	r3, r0
 800839c:	603a      	str	r2, [r7, #0]
 800839e:	71fb      	strb	r3, [r7, #7]
 80083a0:	460b      	mov	r3, r1
 80083a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80083aa:	4b25      	ldr	r3, [pc, #148]	@ (8008440 <SD_ioctl+0xac>)
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <SD_ioctl+0x28>
 80083b8:	2303      	movs	r3, #3
 80083ba:	e03c      	b.n	8008436 <SD_ioctl+0xa2>

  switch (cmd)
 80083bc:	79bb      	ldrb	r3, [r7, #6]
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d834      	bhi.n	800842c <SD_ioctl+0x98>
 80083c2:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <SD_ioctl+0x34>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	080083d9 	.word	0x080083d9
 80083cc:	080083e1 	.word	0x080083e1
 80083d0:	080083f9 	.word	0x080083f9
 80083d4:	08008413 	.word	0x08008413
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80083de:	e028      	b.n	8008432 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80083e0:	f107 030c 	add.w	r3, r7, #12
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff ff2d 	bl	8008244 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80083ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80083f6:	e01c      	b.n	8008432 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80083f8:	f107 030c 	add.w	r3, r7, #12
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7ff ff21 	bl	8008244 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008404:	b29a      	uxth	r2, r3
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008410:	e00f      	b.n	8008432 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008412:	f107 030c 	add.w	r3, r7, #12
 8008416:	4618      	mov	r0, r3
 8008418:	f7ff ff14 	bl	8008244 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800841c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841e:	0a5a      	lsrs	r2, r3, #9
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800842a:	e002      	b.n	8008432 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800842c:	2304      	movs	r3, #4
 800842e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8008432:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008436:	4618      	mov	r0, r3
 8008438:	3730      	adds	r7, #48	@ 0x30
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	20000015 	.word	0x20000015

08008444 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800844e:	79fb      	ldrb	r3, [r7, #7]
 8008450:	4a08      	ldr	r2, [pc, #32]	@ (8008474 <disk_status+0x30>)
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	79fa      	ldrb	r2, [r7, #7]
 800845c:	4905      	ldr	r1, [pc, #20]	@ (8008474 <disk_status+0x30>)
 800845e:	440a      	add	r2, r1
 8008460:	7a12      	ldrb	r2, [r2, #8]
 8008462:	4610      	mov	r0, r2
 8008464:	4798      	blx	r3
 8008466:	4603      	mov	r3, r0
 8008468:	73fb      	strb	r3, [r7, #15]
  return stat;
 800846a:	7bfb      	ldrb	r3, [r7, #15]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	200005a0 	.word	0x200005a0

08008478 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	4a0e      	ldr	r2, [pc, #56]	@ (80084c4 <disk_initialize+0x4c>)
 800848a:	5cd3      	ldrb	r3, [r2, r3]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d114      	bne.n	80084ba <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	4a0c      	ldr	r2, [pc, #48]	@ (80084c4 <disk_initialize+0x4c>)
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	79fa      	ldrb	r2, [r7, #7]
 800849e:	4909      	ldr	r1, [pc, #36]	@ (80084c4 <disk_initialize+0x4c>)
 80084a0:	440a      	add	r2, r1
 80084a2:	7a12      	ldrb	r2, [r2, #8]
 80084a4:	4610      	mov	r0, r2
 80084a6:	4798      	blx	r3
 80084a8:	4603      	mov	r3, r0
 80084aa:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d103      	bne.n	80084ba <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	4a03      	ldr	r2, [pc, #12]	@ (80084c4 <disk_initialize+0x4c>)
 80084b6:	2101      	movs	r1, #1
 80084b8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80084ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	200005a0 	.word	0x200005a0

080084c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80084c8:	b590      	push	{r4, r7, lr}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60b9      	str	r1, [r7, #8]
 80084d0:	607a      	str	r2, [r7, #4]
 80084d2:	603b      	str	r3, [r7, #0]
 80084d4:	4603      	mov	r3, r0
 80084d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	4a0a      	ldr	r2, [pc, #40]	@ (8008504 <disk_read+0x3c>)
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	689c      	ldr	r4, [r3, #8]
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	4a07      	ldr	r2, [pc, #28]	@ (8008504 <disk_read+0x3c>)
 80084e8:	4413      	add	r3, r2
 80084ea:	7a18      	ldrb	r0, [r3, #8]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	68b9      	ldr	r1, [r7, #8]
 80084f2:	47a0      	blx	r4
 80084f4:	4603      	mov	r3, r0
 80084f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	371c      	adds	r7, #28
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd90      	pop	{r4, r7, pc}
 8008502:	bf00      	nop
 8008504:	200005a0 	.word	0x200005a0

08008508 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008508:	b590      	push	{r4, r7, lr}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	607a      	str	r2, [r7, #4]
 8008512:	603b      	str	r3, [r7, #0]
 8008514:	4603      	mov	r3, r0
 8008516:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	4a0a      	ldr	r2, [pc, #40]	@ (8008544 <disk_write+0x3c>)
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	68dc      	ldr	r4, [r3, #12]
 8008524:	7bfb      	ldrb	r3, [r7, #15]
 8008526:	4a07      	ldr	r2, [pc, #28]	@ (8008544 <disk_write+0x3c>)
 8008528:	4413      	add	r3, r2
 800852a:	7a18      	ldrb	r0, [r3, #8]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	47a0      	blx	r4
 8008534:	4603      	mov	r3, r0
 8008536:	75fb      	strb	r3, [r7, #23]
  return res;
 8008538:	7dfb      	ldrb	r3, [r7, #23]
}
 800853a:	4618      	mov	r0, r3
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	bd90      	pop	{r4, r7, pc}
 8008542:	bf00      	nop
 8008544:	200005a0 	.word	0x200005a0

08008548 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	603a      	str	r2, [r7, #0]
 8008552:	71fb      	strb	r3, [r7, #7]
 8008554:	460b      	mov	r3, r1
 8008556:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008558:	79fb      	ldrb	r3, [r7, #7]
 800855a:	4a09      	ldr	r2, [pc, #36]	@ (8008580 <disk_ioctl+0x38>)
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	79fa      	ldrb	r2, [r7, #7]
 8008566:	4906      	ldr	r1, [pc, #24]	@ (8008580 <disk_ioctl+0x38>)
 8008568:	440a      	add	r2, r1
 800856a:	7a10      	ldrb	r0, [r2, #8]
 800856c:	79b9      	ldrb	r1, [r7, #6]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	4798      	blx	r3
 8008572:	4603      	mov	r3, r0
 8008574:	73fb      	strb	r3, [r7, #15]
  return res;
 8008576:	7bfb      	ldrb	r3, [r7, #15]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	200005a0 	.word	0x200005a0

08008584 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3301      	adds	r3, #1
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008594:	89fb      	ldrh	r3, [r7, #14]
 8008596:	021b      	lsls	r3, r3, #8
 8008598:	b21a      	sxth	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	b21b      	sxth	r3, r3
 80085a0:	4313      	orrs	r3, r2
 80085a2:	b21b      	sxth	r3, r3
 80085a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80085a6:	89fb      	ldrh	r3, [r7, #14]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	3303      	adds	r3, #3
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	021b      	lsls	r3, r3, #8
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	3202      	adds	r2, #2
 80085cc:	7812      	ldrb	r2, [r2, #0]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	021b      	lsls	r3, r3, #8
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	3201      	adds	r2, #1
 80085da:	7812      	ldrb	r2, [r2, #0]
 80085dc:	4313      	orrs	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	021b      	lsls	r3, r3, #8
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	7812      	ldrb	r2, [r2, #0]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80085ec:	68fb      	ldr	r3, [r7, #12]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	460b      	mov	r3, r1
 8008604:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	887a      	ldrh	r2, [r7, #2]
 800860e:	b2d2      	uxtb	r2, r2
 8008610:	701a      	strb	r2, [r3, #0]
 8008612:	887b      	ldrh	r3, [r7, #2]
 8008614:	0a1b      	lsrs	r3, r3, #8
 8008616:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	607a      	str	r2, [r7, #4]
 800861e:	887a      	ldrh	r2, [r7, #2]
 8008620:	b2d2      	uxtb	r2, r2
 8008622:	701a      	strb	r2, [r3, #0]
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	607a      	str	r2, [r7, #4]
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	b2d2      	uxtb	r2, r2
 8008644:	701a      	strb	r2, [r3, #0]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	0a1b      	lsrs	r3, r3, #8
 800864a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	607a      	str	r2, [r7, #4]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	b2d2      	uxtb	r2, r2
 8008656:	701a      	strb	r2, [r3, #0]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	0a1b      	lsrs	r3, r3, #8
 800865c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	607a      	str	r2, [r7, #4]
 8008664:	683a      	ldr	r2, [r7, #0]
 8008666:	b2d2      	uxtb	r2, r2
 8008668:	701a      	strb	r2, [r3, #0]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	0a1b      	lsrs	r3, r3, #8
 800866e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	607a      	str	r2, [r7, #4]
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	b2d2      	uxtb	r2, r2
 800867a:	701a      	strb	r2, [r3, #0]
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00d      	beq.n	80086be <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	1c53      	adds	r3, r2, #1
 80086a6:	613b      	str	r3, [r7, #16]
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	1c59      	adds	r1, r3, #1
 80086ac:	6179      	str	r1, [r7, #20]
 80086ae:	7812      	ldrb	r2, [r2, #0]
 80086b0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	607b      	str	r3, [r7, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1f1      	bne.n	80086a2 <mem_cpy+0x1a>
	}
}
 80086be:	bf00      	nop
 80086c0:	371c      	adds	r7, #28
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80086ca:	b480      	push	{r7}
 80086cc:	b087      	sub	sp, #28
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	60f8      	str	r0, [r7, #12]
 80086d2:	60b9      	str	r1, [r7, #8]
 80086d4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	1c5a      	adds	r2, r3, #1
 80086de:	617a      	str	r2, [r7, #20]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	b2d2      	uxtb	r2, r2
 80086e4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	607b      	str	r3, [r7, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1f3      	bne.n	80086da <mem_set+0x10>
}
 80086f2:	bf00      	nop
 80086f4:	bf00      	nop
 80086f6:	371c      	adds	r7, #28
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008700:	b480      	push	{r7}
 8008702:	b089      	sub	sp, #36	@ 0x24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	61fb      	str	r3, [r7, #28]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	61fa      	str	r2, [r7, #28]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	4619      	mov	r1, r3
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	61ba      	str	r2, [r7, #24]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	1acb      	subs	r3, r1, r3
 800872c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3b01      	subs	r3, #1
 8008732:	607b      	str	r3, [r7, #4]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d002      	beq.n	8008740 <mem_cmp+0x40>
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d0eb      	beq.n	8008718 <mem_cmp+0x18>

	return r;
 8008740:	697b      	ldr	r3, [r7, #20]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3724      	adds	r7, #36	@ 0x24
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008758:	e002      	b.n	8008760 <chk_chr+0x12>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3301      	adds	r3, #1
 800875e:	607b      	str	r3, [r7, #4]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d005      	beq.n	8008774 <chk_chr+0x26>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	461a      	mov	r2, r3
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	4293      	cmp	r3, r2
 8008772:	d1f2      	bne.n	800875a <chk_chr+0xc>
	return *str;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	781b      	ldrb	r3, [r3, #0]
}
 8008778:	4618      	mov	r0, r3
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800878e:	2300      	movs	r3, #0
 8008790:	60bb      	str	r3, [r7, #8]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	e029      	b.n	80087ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008798:	4a27      	ldr	r2, [pc, #156]	@ (8008838 <chk_lock+0xb4>)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	011b      	lsls	r3, r3, #4
 800879e:	4413      	add	r3, r2
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d01d      	beq.n	80087e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80087a6:	4a24      	ldr	r2, [pc, #144]	@ (8008838 <chk_lock+0xb4>)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	011b      	lsls	r3, r3, #4
 80087ac:	4413      	add	r3, r2
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d116      	bne.n	80087e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80087b8:	4a1f      	ldr	r2, [pc, #124]	@ (8008838 <chk_lock+0xb4>)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	011b      	lsls	r3, r3, #4
 80087be:	4413      	add	r3, r2
 80087c0:	3304      	adds	r3, #4
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d10c      	bne.n	80087e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80087cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008838 <chk_lock+0xb4>)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	011b      	lsls	r3, r3, #4
 80087d2:	4413      	add	r3, r2
 80087d4:	3308      	adds	r3, #8
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80087dc:	429a      	cmp	r2, r3
 80087de:	d102      	bne.n	80087e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80087e0:	e007      	b.n	80087f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80087e2:	2301      	movs	r3, #1
 80087e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3301      	adds	r3, #1
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d9d2      	bls.n	8008798 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d109      	bne.n	800880c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d102      	bne.n	8008804 <chk_lock+0x80>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b02      	cmp	r3, #2
 8008802:	d101      	bne.n	8008808 <chk_lock+0x84>
 8008804:	2300      	movs	r3, #0
 8008806:	e010      	b.n	800882a <chk_lock+0xa6>
 8008808:	2312      	movs	r3, #18
 800880a:	e00e      	b.n	800882a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d108      	bne.n	8008824 <chk_lock+0xa0>
 8008812:	4a09      	ldr	r2, [pc, #36]	@ (8008838 <chk_lock+0xb4>)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	011b      	lsls	r3, r3, #4
 8008818:	4413      	add	r3, r2
 800881a:	330c      	adds	r3, #12
 800881c:	881b      	ldrh	r3, [r3, #0]
 800881e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008822:	d101      	bne.n	8008828 <chk_lock+0xa4>
 8008824:	2310      	movs	r3, #16
 8008826:	e000      	b.n	800882a <chk_lock+0xa6>
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	20000580 	.word	0x20000580

0800883c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008842:	2300      	movs	r3, #0
 8008844:	607b      	str	r3, [r7, #4]
 8008846:	e002      	b.n	800884e <enq_lock+0x12>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3301      	adds	r3, #1
 800884c:	607b      	str	r3, [r7, #4]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d806      	bhi.n	8008862 <enq_lock+0x26>
 8008854:	4a09      	ldr	r2, [pc, #36]	@ (800887c <enq_lock+0x40>)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	011b      	lsls	r3, r3, #4
 800885a:	4413      	add	r3, r2
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f2      	bne.n	8008848 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2b02      	cmp	r3, #2
 8008866:	bf14      	ite	ne
 8008868:	2301      	movne	r3, #1
 800886a:	2300      	moveq	r3, #0
 800886c:	b2db      	uxtb	r3, r3
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	20000580 	.word	0x20000580

08008880 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800888a:	2300      	movs	r3, #0
 800888c:	60fb      	str	r3, [r7, #12]
 800888e:	e01f      	b.n	80088d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008890:	4a41      	ldr	r2, [pc, #260]	@ (8008998 <inc_lock+0x118>)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	011b      	lsls	r3, r3, #4
 8008896:	4413      	add	r3, r2
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d113      	bne.n	80088ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80088a2:	4a3d      	ldr	r2, [pc, #244]	@ (8008998 <inc_lock+0x118>)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	011b      	lsls	r3, r3, #4
 80088a8:	4413      	add	r3, r2
 80088aa:	3304      	adds	r3, #4
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d109      	bne.n	80088ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80088b6:	4a38      	ldr	r2, [pc, #224]	@ (8008998 <inc_lock+0x118>)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	011b      	lsls	r3, r3, #4
 80088bc:	4413      	add	r3, r2
 80088be:	3308      	adds	r3, #8
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d006      	beq.n	80088d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	3301      	adds	r3, #1
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d9dc      	bls.n	8008890 <inc_lock+0x10>
 80088d6:	e000      	b.n	80088da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80088d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d132      	bne.n	8008946 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80088e0:	2300      	movs	r3, #0
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	e002      	b.n	80088ec <inc_lock+0x6c>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3301      	adds	r3, #1
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d806      	bhi.n	8008900 <inc_lock+0x80>
 80088f2:	4a29      	ldr	r2, [pc, #164]	@ (8008998 <inc_lock+0x118>)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	011b      	lsls	r3, r3, #4
 80088f8:	4413      	add	r3, r2
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1f2      	bne.n	80088e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d101      	bne.n	800890a <inc_lock+0x8a>
 8008906:	2300      	movs	r3, #0
 8008908:	e040      	b.n	800898c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4922      	ldr	r1, [pc, #136]	@ (8008998 <inc_lock+0x118>)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	011b      	lsls	r3, r3, #4
 8008914:	440b      	add	r3, r1
 8008916:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	491e      	ldr	r1, [pc, #120]	@ (8008998 <inc_lock+0x118>)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	011b      	lsls	r3, r3, #4
 8008922:	440b      	add	r3, r1
 8008924:	3304      	adds	r3, #4
 8008926:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	695a      	ldr	r2, [r3, #20]
 800892c:	491a      	ldr	r1, [pc, #104]	@ (8008998 <inc_lock+0x118>)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	011b      	lsls	r3, r3, #4
 8008932:	440b      	add	r3, r1
 8008934:	3308      	adds	r3, #8
 8008936:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008938:	4a17      	ldr	r2, [pc, #92]	@ (8008998 <inc_lock+0x118>)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	011b      	lsls	r3, r3, #4
 800893e:	4413      	add	r3, r2
 8008940:	330c      	adds	r3, #12
 8008942:	2200      	movs	r2, #0
 8008944:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d009      	beq.n	8008960 <inc_lock+0xe0>
 800894c:	4a12      	ldr	r2, [pc, #72]	@ (8008998 <inc_lock+0x118>)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	011b      	lsls	r3, r3, #4
 8008952:	4413      	add	r3, r2
 8008954:	330c      	adds	r3, #12
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <inc_lock+0xe0>
 800895c:	2300      	movs	r3, #0
 800895e:	e015      	b.n	800898c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d108      	bne.n	8008978 <inc_lock+0xf8>
 8008966:	4a0c      	ldr	r2, [pc, #48]	@ (8008998 <inc_lock+0x118>)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	4413      	add	r3, r2
 800896e:	330c      	adds	r3, #12
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	3301      	adds	r3, #1
 8008974:	b29a      	uxth	r2, r3
 8008976:	e001      	b.n	800897c <inc_lock+0xfc>
 8008978:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800897c:	4906      	ldr	r1, [pc, #24]	@ (8008998 <inc_lock+0x118>)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	011b      	lsls	r3, r3, #4
 8008982:	440b      	add	r3, r1
 8008984:	330c      	adds	r3, #12
 8008986:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3301      	adds	r3, #1
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	20000580 	.word	0x20000580

0800899c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	607b      	str	r3, [r7, #4]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d825      	bhi.n	80089fc <dec_lock+0x60>
		n = Files[i].ctr;
 80089b0:	4a17      	ldr	r2, [pc, #92]	@ (8008a10 <dec_lock+0x74>)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	011b      	lsls	r3, r3, #4
 80089b6:	4413      	add	r3, r2
 80089b8:	330c      	adds	r3, #12
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80089be:	89fb      	ldrh	r3, [r7, #14]
 80089c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089c4:	d101      	bne.n	80089ca <dec_lock+0x2e>
 80089c6:	2300      	movs	r3, #0
 80089c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80089ca:	89fb      	ldrh	r3, [r7, #14]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <dec_lock+0x3a>
 80089d0:	89fb      	ldrh	r3, [r7, #14]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80089d6:	4a0e      	ldr	r2, [pc, #56]	@ (8008a10 <dec_lock+0x74>)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	011b      	lsls	r3, r3, #4
 80089dc:	4413      	add	r3, r2
 80089de:	330c      	adds	r3, #12
 80089e0:	89fa      	ldrh	r2, [r7, #14]
 80089e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80089e4:	89fb      	ldrh	r3, [r7, #14]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d105      	bne.n	80089f6 <dec_lock+0x5a>
 80089ea:	4a09      	ldr	r2, [pc, #36]	@ (8008a10 <dec_lock+0x74>)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	011b      	lsls	r3, r3, #4
 80089f0:	4413      	add	r3, r2
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	737b      	strb	r3, [r7, #13]
 80089fa:	e001      	b.n	8008a00 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80089fc:	2302      	movs	r3, #2
 80089fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008a00:	7b7b      	ldrb	r3, [r7, #13]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	20000580 	.word	0x20000580

08008a14 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	e010      	b.n	8008a44 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008a22:	4a0d      	ldr	r2, [pc, #52]	@ (8008a58 <clear_lock+0x44>)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	011b      	lsls	r3, r3, #4
 8008a28:	4413      	add	r3, r2
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d105      	bne.n	8008a3e <clear_lock+0x2a>
 8008a32:	4a09      	ldr	r2, [pc, #36]	@ (8008a58 <clear_lock+0x44>)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	011b      	lsls	r3, r3, #4
 8008a38:	4413      	add	r3, r2
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	3301      	adds	r3, #1
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d9eb      	bls.n	8008a22 <clear_lock+0xe>
	}
}
 8008a4a:	bf00      	nop
 8008a4c:	bf00      	nop
 8008a4e:	3714      	adds	r7, #20
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr
 8008a58:	20000580 	.word	0x20000580

08008a5c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	78db      	ldrb	r3, [r3, #3]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d034      	beq.n	8008ada <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a74:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	7858      	ldrb	r0, [r3, #1]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008a80:	2301      	movs	r3, #1
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	f7ff fd40 	bl	8008508 <disk_write>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d002      	beq.n	8008a94 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	73fb      	strb	r3, [r7, #15]
 8008a92:	e022      	b.n	8008ada <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	1ad2      	subs	r2, r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d217      	bcs.n	8008ada <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	789b      	ldrb	r3, [r3, #2]
 8008aae:	613b      	str	r3, [r7, #16]
 8008ab0:	e010      	b.n	8008ad4 <sync_window+0x78>
					wsect += fs->fsize;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4413      	add	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	7858      	ldrb	r0, [r3, #1]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	f7ff fd1d 	bl	8008508 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	613b      	str	r3, [r7, #16]
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d8eb      	bhi.n	8008ab2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af6:	683a      	ldr	r2, [r7, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d01b      	beq.n	8008b34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f7ff ffad 	bl	8008a5c <sync_window>
 8008b02:	4603      	mov	r3, r0
 8008b04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d113      	bne.n	8008b34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	7858      	ldrb	r0, [r3, #1]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008b16:	2301      	movs	r3, #1
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	f7ff fcd5 	bl	80084c8 <disk_read>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d004      	beq.n	8008b2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008b24:	f04f 33ff 	mov.w	r3, #4294967295
 8008b28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff ff87 	bl	8008a5c <sync_window>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d158      	bne.n	8008c0a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d148      	bne.n	8008bf2 <sync_fs+0xb2>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	791b      	ldrb	r3, [r3, #4]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d144      	bne.n	8008bf2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3330      	adds	r3, #48	@ 0x30
 8008b6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b70:	2100      	movs	r1, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff fda9 	bl	80086ca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	3330      	adds	r3, #48	@ 0x30
 8008b7c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008b80:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7ff fd38 	bl	80085fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	3330      	adds	r3, #48	@ 0x30
 8008b8e:	4921      	ldr	r1, [pc, #132]	@ (8008c14 <sync_fs+0xd4>)
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff fd4d 	bl	8008630 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	3330      	adds	r3, #48	@ 0x30
 8008b9a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008b9e:	491e      	ldr	r1, [pc, #120]	@ (8008c18 <sync_fs+0xd8>)
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f7ff fd45 	bl	8008630 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3330      	adds	r3, #48	@ 0x30
 8008baa:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	f7ff fd3b 	bl	8008630 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3330      	adds	r3, #48	@ 0x30
 8008bbe:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4610      	mov	r0, r2
 8008bca:	f7ff fd31 	bl	8008630 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	1c5a      	adds	r2, r3, #1
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	7858      	ldrb	r0, [r3, #1]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008be6:	2301      	movs	r3, #1
 8008be8:	f7ff fc8e 	bl	8008508 <disk_write>
			fs->fsi_flag = 0;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	785b      	ldrb	r3, [r3, #1]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7ff fca4 	bl	8008548 <disk_ioctl>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <sync_fs+0xca>
 8008c06:	2301      	movs	r3, #1
 8008c08:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	41615252 	.word	0x41615252
 8008c18:	61417272 	.word	0x61417272

08008c1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	3b02      	subs	r3, #2
 8008c2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	3b02      	subs	r3, #2
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d301      	bcc.n	8008c3c <clust2sect+0x20>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	e008      	b.n	8008c4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	895b      	ldrh	r3, [r3, #10]
 8008c40:	461a      	mov	r2, r3
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	fb03 f202 	mul.w	r2, r3, r2
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c4c:	4413      	add	r3, r2
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b086      	sub	sp, #24
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d904      	bls.n	8008c7a <get_fat+0x20>
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	695b      	ldr	r3, [r3, #20]
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d302      	bcc.n	8008c80 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	617b      	str	r3, [r7, #20]
 8008c7e:	e08e      	b.n	8008d9e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008c80:	f04f 33ff 	mov.w	r3, #4294967295
 8008c84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d061      	beq.n	8008d52 <get_fat+0xf8>
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	dc7b      	bgt.n	8008d8a <get_fat+0x130>
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d002      	beq.n	8008c9c <get_fat+0x42>
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d041      	beq.n	8008d1e <get_fat+0xc4>
 8008c9a:	e076      	b.n	8008d8a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	085b      	lsrs	r3, r3, #1
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	6a1a      	ldr	r2, [r3, #32]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	0a5b      	lsrs	r3, r3, #9
 8008cb2:	4413      	add	r3, r2
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6938      	ldr	r0, [r7, #16]
 8008cb8:	f7ff ff14 	bl	8008ae4 <move_window>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d166      	bne.n	8008d90 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	1c5a      	adds	r2, r3, #1
 8008cc6:	60fa      	str	r2, [r7, #12]
 8008cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ccc:	693a      	ldr	r2, [r7, #16]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008cd4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	6a1a      	ldr	r2, [r3, #32]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	0a5b      	lsrs	r3, r3, #9
 8008cde:	4413      	add	r3, r2
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6938      	ldr	r0, [r7, #16]
 8008ce4:	f7ff fefe 	bl	8008ae4 <move_window>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d152      	bne.n	8008d94 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008cfc:	021b      	lsls	r3, r3, #8
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <get_fat+0xba>
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	091b      	lsrs	r3, r3, #4
 8008d12:	e002      	b.n	8008d1a <get_fat+0xc0>
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d1a:	617b      	str	r3, [r7, #20]
			break;
 8008d1c:	e03f      	b.n	8008d9e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	6a1a      	ldr	r2, [r3, #32]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	0a1b      	lsrs	r3, r3, #8
 8008d26:	4413      	add	r3, r2
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6938      	ldr	r0, [r7, #16]
 8008d2c:	f7ff feda 	bl	8008ae4 <move_window>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d130      	bne.n	8008d98 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008d44:	4413      	add	r3, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff fc1c 	bl	8008584 <ld_word>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	617b      	str	r3, [r7, #20]
			break;
 8008d50:	e025      	b.n	8008d9e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	6a1a      	ldr	r2, [r3, #32]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	09db      	lsrs	r3, r3, #7
 8008d5a:	4413      	add	r3, r2
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6938      	ldr	r0, [r7, #16]
 8008d60:	f7ff fec0 	bl	8008ae4 <move_window>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d118      	bne.n	8008d9c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008d78:	4413      	add	r3, r2
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff fc1a 	bl	80085b4 <ld_dword>
 8008d80:	4603      	mov	r3, r0
 8008d82:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008d86:	617b      	str	r3, [r7, #20]
			break;
 8008d88:	e009      	b.n	8008d9e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	617b      	str	r3, [r7, #20]
 8008d8e:	e006      	b.n	8008d9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d90:	bf00      	nop
 8008d92:	e004      	b.n	8008d9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008d94:	bf00      	nop
 8008d96:	e002      	b.n	8008d9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008d98:	bf00      	nop
 8008d9a:	e000      	b.n	8008d9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d9c:	bf00      	nop
		}
	}

	return val;
 8008d9e:	697b      	ldr	r3, [r7, #20]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3718      	adds	r7, #24
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008da8:	b590      	push	{r4, r7, lr}
 8008daa:	b089      	sub	sp, #36	@ 0x24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008db4:	2302      	movs	r3, #2
 8008db6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	f240 80d9 	bls.w	8008f72 <put_fat+0x1ca>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	695b      	ldr	r3, [r3, #20]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	f080 80d3 	bcs.w	8008f72 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	2b03      	cmp	r3, #3
 8008dd2:	f000 8096 	beq.w	8008f02 <put_fat+0x15a>
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	f300 80cb 	bgt.w	8008f72 <put_fat+0x1ca>
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d002      	beq.n	8008de6 <put_fat+0x3e>
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d06e      	beq.n	8008ec2 <put_fat+0x11a>
 8008de4:	e0c5      	b.n	8008f72 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	61bb      	str	r3, [r7, #24]
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	085b      	lsrs	r3, r3, #1
 8008dee:	69ba      	ldr	r2, [r7, #24]
 8008df0:	4413      	add	r3, r2
 8008df2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a1a      	ldr	r2, [r3, #32]
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	0a5b      	lsrs	r3, r3, #9
 8008dfc:	4413      	add	r3, r2
 8008dfe:	4619      	mov	r1, r3
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f7ff fe6f 	bl	8008ae4 <move_window>
 8008e06:	4603      	mov	r3, r0
 8008e08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e0a:	7ffb      	ldrb	r3, [r7, #31]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f040 80a9 	bne.w	8008f64 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	1c59      	adds	r1, r3, #1
 8008e1c:	61b9      	str	r1, [r7, #24]
 8008e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e22:	4413      	add	r3, r2
 8008e24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00d      	beq.n	8008e4c <put_fat+0xa4>
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	b25b      	sxtb	r3, r3
 8008e36:	f003 030f 	and.w	r3, r3, #15
 8008e3a:	b25a      	sxtb	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	011b      	lsls	r3, r3, #4
 8008e42:	b25b      	sxtb	r3, r3
 8008e44:	4313      	orrs	r3, r2
 8008e46:	b25b      	sxtb	r3, r3
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	e001      	b.n	8008e50 <put_fat+0xa8>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2201      	movs	r2, #1
 8008e58:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a1a      	ldr	r2, [r3, #32]
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	0a5b      	lsrs	r3, r3, #9
 8008e62:	4413      	add	r3, r2
 8008e64:	4619      	mov	r1, r3
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f7ff fe3c 	bl	8008ae4 <move_window>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e70:	7ffb      	ldrb	r3, [r7, #31]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d178      	bne.n	8008f68 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e82:	4413      	add	r3, r2
 8008e84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <put_fat+0xf0>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	091b      	lsrs	r3, r3, #4
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	e00e      	b.n	8008eb6 <put_fat+0x10e>
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	b25b      	sxtb	r3, r3
 8008e9e:	f023 030f 	bic.w	r3, r3, #15
 8008ea2:	b25a      	sxtb	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	0a1b      	lsrs	r3, r3, #8
 8008ea8:	b25b      	sxtb	r3, r3
 8008eaa:	f003 030f 	and.w	r3, r3, #15
 8008eae:	b25b      	sxtb	r3, r3
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	b25b      	sxtb	r3, r3
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	70da      	strb	r2, [r3, #3]
			break;
 8008ec0:	e057      	b.n	8008f72 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6a1a      	ldr	r2, [r3, #32]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	0a1b      	lsrs	r3, r3, #8
 8008eca:	4413      	add	r3, r2
 8008ecc:	4619      	mov	r1, r3
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7ff fe08 	bl	8008ae4 <move_window>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008ed8:	7ffb      	ldrb	r3, [r7, #31]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d146      	bne.n	8008f6c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	005b      	lsls	r3, r3, #1
 8008ee8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008eec:	4413      	add	r3, r2
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	b292      	uxth	r2, r2
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7ff fb80 	bl	80085fa <st_word>
			fs->wflag = 1;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2201      	movs	r2, #1
 8008efe:	70da      	strb	r2, [r3, #3]
			break;
 8008f00:	e037      	b.n	8008f72 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6a1a      	ldr	r2, [r3, #32]
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	09db      	lsrs	r3, r3, #7
 8008f0a:	4413      	add	r3, r2
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f7ff fde8 	bl	8008ae4 <move_window>
 8008f14:	4603      	mov	r3, r0
 8008f16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008f18:	7ffb      	ldrb	r3, [r7, #31]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d128      	bne.n	8008f70 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008f32:	4413      	add	r3, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7ff fb3d 	bl	80085b4 <ld_dword>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008f40:	4323      	orrs	r3, r4
 8008f42:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008f52:	4413      	add	r3, r2
 8008f54:	6879      	ldr	r1, [r7, #4]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7ff fb6a 	bl	8008630 <st_dword>
			fs->wflag = 1;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	70da      	strb	r2, [r3, #3]
			break;
 8008f62:	e006      	b.n	8008f72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008f64:	bf00      	nop
 8008f66:	e004      	b.n	8008f72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008f68:	bf00      	nop
 8008f6a:	e002      	b.n	8008f72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008f6c:	bf00      	nop
 8008f6e:	e000      	b.n	8008f72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008f70:	bf00      	nop
		}
	}
	return res;
 8008f72:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3724      	adds	r7, #36	@ 0x24
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd90      	pop	{r4, r7, pc}

08008f7c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d904      	bls.n	8008fa2 <remove_chain+0x26>
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d301      	bcc.n	8008fa6 <remove_chain+0x2a>
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	e04b      	b.n	800903e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00c      	beq.n	8008fc6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008fac:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	69b8      	ldr	r0, [r7, #24]
 8008fb4:	f7ff fef8 	bl	8008da8 <put_fat>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008fbc:	7ffb      	ldrb	r3, [r7, #31]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <remove_chain+0x4a>
 8008fc2:	7ffb      	ldrb	r3, [r7, #31]
 8008fc4:	e03b      	b.n	800903e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008fc6:	68b9      	ldr	r1, [r7, #8]
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f7ff fe46 	bl	8008c5a <get_fat>
 8008fce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d031      	beq.n	800903a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d101      	bne.n	8008fe0 <remove_chain+0x64>
 8008fdc:	2302      	movs	r3, #2
 8008fde:	e02e      	b.n	800903e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe6:	d101      	bne.n	8008fec <remove_chain+0x70>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e028      	b.n	800903e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008fec:	2200      	movs	r2, #0
 8008fee:	68b9      	ldr	r1, [r7, #8]
 8008ff0:	69b8      	ldr	r0, [r7, #24]
 8008ff2:	f7ff fed9 	bl	8008da8 <put_fat>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008ffa:	7ffb      	ldrb	r3, [r7, #31]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <remove_chain+0x88>
 8009000:	7ffb      	ldrb	r3, [r7, #31]
 8009002:	e01c      	b.n	800903e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	691a      	ldr	r2, [r3, #16]
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	3b02      	subs	r3, #2
 800900e:	429a      	cmp	r2, r3
 8009010:	d20b      	bcs.n	800902a <remove_chain+0xae>
			fs->free_clst++;
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	791b      	ldrb	r3, [r3, #4]
 8009020:	f043 0301 	orr.w	r3, r3, #1
 8009024:	b2da      	uxtb	r2, r3
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	429a      	cmp	r2, r3
 8009036:	d3c6      	bcc.n	8008fc6 <remove_chain+0x4a>
 8009038:	e000      	b.n	800903c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800903a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3720      	adds	r7, #32
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b088      	sub	sp, #32
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10d      	bne.n	8009078 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d004      	beq.n	8009072 <create_chain+0x2c>
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	69ba      	ldr	r2, [r7, #24]
 800906e:	429a      	cmp	r2, r3
 8009070:	d31b      	bcc.n	80090aa <create_chain+0x64>
 8009072:	2301      	movs	r3, #1
 8009074:	61bb      	str	r3, [r7, #24]
 8009076:	e018      	b.n	80090aa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff fded 	bl	8008c5a <get_fat>
 8009080:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d801      	bhi.n	800908c <create_chain+0x46>
 8009088:	2301      	movs	r3, #1
 800908a:	e070      	b.n	800916e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009092:	d101      	bne.n	8009098 <create_chain+0x52>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	e06a      	b.n	800916e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d201      	bcs.n	80090a6 <create_chain+0x60>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	e063      	b.n	800916e <create_chain+0x128>
		scl = clst;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	3301      	adds	r3, #1
 80090b2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	69fa      	ldr	r2, [r7, #28]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d307      	bcc.n	80090ce <create_chain+0x88>
				ncl = 2;
 80090be:	2302      	movs	r3, #2
 80090c0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80090c2:	69fa      	ldr	r2, [r7, #28]
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d901      	bls.n	80090ce <create_chain+0x88>
 80090ca:	2300      	movs	r3, #0
 80090cc:	e04f      	b.n	800916e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80090ce:	69f9      	ldr	r1, [r7, #28]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff fdc2 	bl	8008c5a <get_fat>
 80090d6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00e      	beq.n	80090fc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d003      	beq.n	80090ec <create_chain+0xa6>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ea:	d101      	bne.n	80090f0 <create_chain+0xaa>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	e03e      	b.n	800916e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80090f0:	69fa      	ldr	r2, [r7, #28]
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d1da      	bne.n	80090ae <create_chain+0x68>
 80090f8:	2300      	movs	r3, #0
 80090fa:	e038      	b.n	800916e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80090fc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80090fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009102:	69f9      	ldr	r1, [r7, #28]
 8009104:	6938      	ldr	r0, [r7, #16]
 8009106:	f7ff fe4f 	bl	8008da8 <put_fat>
 800910a:	4603      	mov	r3, r0
 800910c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d109      	bne.n	8009128 <create_chain+0xe2>
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d006      	beq.n	8009128 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800911a:	69fa      	ldr	r2, [r7, #28]
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	6938      	ldr	r0, [r7, #16]
 8009120:	f7ff fe42 	bl	8008da8 <put_fat>
 8009124:	4603      	mov	r3, r0
 8009126:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d116      	bne.n	800915c <create_chain+0x116>
		fs->last_clst = ncl;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	69fa      	ldr	r2, [r7, #28]
 8009132:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	691a      	ldr	r2, [r3, #16]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	3b02      	subs	r3, #2
 800913e:	429a      	cmp	r2, r3
 8009140:	d804      	bhi.n	800914c <create_chain+0x106>
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	1e5a      	subs	r2, r3, #1
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	791b      	ldrb	r3, [r3, #4]
 8009150:	f043 0301 	orr.w	r3, r3, #1
 8009154:	b2da      	uxtb	r2, r3
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	711a      	strb	r2, [r3, #4]
 800915a:	e007      	b.n	800916c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800915c:	7dfb      	ldrb	r3, [r7, #23]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d102      	bne.n	8009168 <create_chain+0x122>
 8009162:	f04f 33ff 	mov.w	r3, #4294967295
 8009166:	e000      	b.n	800916a <create_chain+0x124>
 8009168:	2301      	movs	r3, #1
 800916a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800916c:	69fb      	ldr	r3, [r7, #28]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3720      	adds	r7, #32
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009176:	b480      	push	{r7}
 8009178:	b087      	sub	sp, #28
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918a:	3304      	adds	r3, #4
 800918c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	0a5b      	lsrs	r3, r3, #9
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	8952      	ldrh	r2, [r2, #10]
 8009196:	fbb3 f3f2 	udiv	r3, r3, r2
 800919a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	1d1a      	adds	r2, r3, #4
 80091a0:	613a      	str	r2, [r7, #16]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d101      	bne.n	80091b0 <clmt_clust+0x3a>
 80091ac:	2300      	movs	r3, #0
 80091ae:	e010      	b.n	80091d2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d307      	bcc.n	80091c8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	3304      	adds	r3, #4
 80091c4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80091c6:	e7e9      	b.n	800919c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80091c8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	4413      	add	r3, r2
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	371c      	adds	r7, #28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b086      	sub	sp, #24
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091f4:	d204      	bcs.n	8009200 <dir_sdi+0x22>
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	f003 031f 	and.w	r3, r3, #31
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009200:	2302      	movs	r3, #2
 8009202:	e063      	b.n	80092cc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d106      	bne.n	8009224 <dir_sdi+0x46>
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	2b02      	cmp	r3, #2
 800921c:	d902      	bls.n	8009224 <dir_sdi+0x46>
		clst = fs->dirbase;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009222:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10c      	bne.n	8009244 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	095b      	lsrs	r3, r3, #5
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	8912      	ldrh	r2, [r2, #8]
 8009232:	4293      	cmp	r3, r2
 8009234:	d301      	bcc.n	800923a <dir_sdi+0x5c>
 8009236:	2302      	movs	r3, #2
 8009238:	e048      	b.n	80092cc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	61da      	str	r2, [r3, #28]
 8009242:	e029      	b.n	8009298 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	895b      	ldrh	r3, [r3, #10]
 8009248:	025b      	lsls	r3, r3, #9
 800924a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800924c:	e019      	b.n	8009282 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6979      	ldr	r1, [r7, #20]
 8009252:	4618      	mov	r0, r3
 8009254:	f7ff fd01 	bl	8008c5a <get_fat>
 8009258:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009260:	d101      	bne.n	8009266 <dir_sdi+0x88>
 8009262:	2301      	movs	r3, #1
 8009264:	e032      	b.n	80092cc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d904      	bls.n	8009276 <dir_sdi+0x98>
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	429a      	cmp	r2, r3
 8009274:	d301      	bcc.n	800927a <dir_sdi+0x9c>
 8009276:	2302      	movs	r3, #2
 8009278:	e028      	b.n	80092cc <dir_sdi+0xee>
			ofs -= csz;
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	429a      	cmp	r2, r3
 8009288:	d2e1      	bcs.n	800924e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800928a:	6979      	ldr	r1, [r7, #20]
 800928c:	6938      	ldr	r0, [r7, #16]
 800928e:	f7ff fcc5 	bl	8008c1c <clust2sect>
 8009292:	4602      	mov	r2, r0
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d101      	bne.n	80092aa <dir_sdi+0xcc>
 80092a6:	2302      	movs	r3, #2
 80092a8:	e010      	b.n	80092cc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	69da      	ldr	r2, [r3, #28]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	0a5b      	lsrs	r3, r3, #9
 80092b2:	441a      	add	r2, r3
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092c4:	441a      	add	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3718      	adds	r7, #24
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	3320      	adds	r3, #32
 80092ea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d003      	beq.n	80092fc <dir_next+0x28>
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092fa:	d301      	bcc.n	8009300 <dir_next+0x2c>
 80092fc:	2304      	movs	r3, #4
 80092fe:	e0aa      	b.n	8009456 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009306:	2b00      	cmp	r3, #0
 8009308:	f040 8098 	bne.w	800943c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	69db      	ldr	r3, [r3, #28]
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10b      	bne.n	8009336 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	095b      	lsrs	r3, r3, #5
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	8912      	ldrh	r2, [r2, #8]
 8009326:	4293      	cmp	r3, r2
 8009328:	f0c0 8088 	bcc.w	800943c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	61da      	str	r2, [r3, #28]
 8009332:	2304      	movs	r3, #4
 8009334:	e08f      	b.n	8009456 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	0a5b      	lsrs	r3, r3, #9
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	8952      	ldrh	r2, [r2, #10]
 800933e:	3a01      	subs	r2, #1
 8009340:	4013      	ands	r3, r2
 8009342:	2b00      	cmp	r3, #0
 8009344:	d17a      	bne.n	800943c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	4619      	mov	r1, r3
 800934e:	4610      	mov	r0, r2
 8009350:	f7ff fc83 	bl	8008c5a <get_fat>
 8009354:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d801      	bhi.n	8009360 <dir_next+0x8c>
 800935c:	2302      	movs	r3, #2
 800935e:	e07a      	b.n	8009456 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009366:	d101      	bne.n	800936c <dir_next+0x98>
 8009368:	2301      	movs	r3, #1
 800936a:	e074      	b.n	8009456 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	429a      	cmp	r2, r3
 8009374:	d358      	bcc.n	8009428 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d104      	bne.n	8009386 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	61da      	str	r2, [r3, #28]
 8009382:	2304      	movs	r3, #4
 8009384:	e067      	b.n	8009456 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	4619      	mov	r1, r3
 800938e:	4610      	mov	r0, r2
 8009390:	f7ff fe59 	bl	8009046 <create_chain>
 8009394:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <dir_next+0xcc>
 800939c:	2307      	movs	r3, #7
 800939e:	e05a      	b.n	8009456 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d101      	bne.n	80093aa <dir_next+0xd6>
 80093a6:	2302      	movs	r3, #2
 80093a8:	e055      	b.n	8009456 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b0:	d101      	bne.n	80093b6 <dir_next+0xe2>
 80093b2:	2301      	movs	r3, #1
 80093b4:	e04f      	b.n	8009456 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f7ff fb50 	bl	8008a5c <sync_window>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <dir_next+0xf2>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e047      	b.n	8009456 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3330      	adds	r3, #48	@ 0x30
 80093ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80093ce:	2100      	movs	r1, #0
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7ff f97a 	bl	80086ca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80093d6:	2300      	movs	r3, #0
 80093d8:	613b      	str	r3, [r7, #16]
 80093da:	6979      	ldr	r1, [r7, #20]
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f7ff fc1d 	bl	8008c1c <clust2sect>
 80093e2:	4602      	mov	r2, r0
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80093e8:	e012      	b.n	8009410 <dir_next+0x13c>
						fs->wflag = 1;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2201      	movs	r2, #1
 80093ee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f7ff fb33 	bl	8008a5c <sync_window>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <dir_next+0x12c>
 80093fc:	2301      	movs	r3, #1
 80093fe:	e02a      	b.n	8009456 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	3301      	adds	r3, #1
 8009404:	613b      	str	r3, [r7, #16]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	895b      	ldrh	r3, [r3, #10]
 8009414:	461a      	mov	r2, r3
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	4293      	cmp	r3, r2
 800941a:	d3e6      	bcc.n	80093ea <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	1ad2      	subs	r2, r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800942e:	6979      	ldr	r1, [r7, #20]
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f7ff fbf3 	bl	8008c1c <clust2sect>
 8009436:	4602      	mov	r2, r0
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800944e:	441a      	add	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3718      	adds	r7, #24
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b086      	sub	sp, #24
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800946e:	2100      	movs	r1, #0
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff feb4 	bl	80091de <dir_sdi>
 8009476:	4603      	mov	r3, r0
 8009478:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800947a:	7dfb      	ldrb	r3, [r7, #23]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d12b      	bne.n	80094d8 <dir_alloc+0x7a>
		n = 0;
 8009480:	2300      	movs	r3, #0
 8009482:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	69db      	ldr	r3, [r3, #28]
 8009488:	4619      	mov	r1, r3
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f7ff fb2a 	bl	8008ae4 <move_window>
 8009490:	4603      	mov	r3, r0
 8009492:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009494:	7dfb      	ldrb	r3, [r7, #23]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d11d      	bne.n	80094d6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a1b      	ldr	r3, [r3, #32]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	2be5      	cmp	r3, #229	@ 0xe5
 80094a2:	d004      	beq.n	80094ae <dir_alloc+0x50>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d107      	bne.n	80094be <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	3301      	adds	r3, #1
 80094b2:	613b      	str	r3, [r7, #16]
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d102      	bne.n	80094c2 <dir_alloc+0x64>
 80094bc:	e00c      	b.n	80094d8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80094be:	2300      	movs	r3, #0
 80094c0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80094c2:	2101      	movs	r1, #1
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7ff ff05 	bl	80092d4 <dir_next>
 80094ca:	4603      	mov	r3, r0
 80094cc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d0d7      	beq.n	8009484 <dir_alloc+0x26>
 80094d4:	e000      	b.n	80094d8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80094d6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
 80094da:	2b04      	cmp	r3, #4
 80094dc:	d101      	bne.n	80094e2 <dir_alloc+0x84>
 80094de:	2307      	movs	r3, #7
 80094e0:	75fb      	strb	r3, [r7, #23]
	return res;
 80094e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	331a      	adds	r3, #26
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7ff f842 	bl	8008584 <ld_word>
 8009500:	4603      	mov	r3, r0
 8009502:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	2b03      	cmp	r3, #3
 800950a:	d109      	bne.n	8009520 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	3314      	adds	r3, #20
 8009510:	4618      	mov	r0, r3
 8009512:	f7ff f837 	bl	8008584 <ld_word>
 8009516:	4603      	mov	r3, r0
 8009518:	041b      	lsls	r3, r3, #16
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	4313      	orrs	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009520:	68fb      	ldr	r3, [r7, #12]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b084      	sub	sp, #16
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	60b9      	str	r1, [r7, #8]
 8009534:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	331a      	adds	r3, #26
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	b292      	uxth	r2, r2
 800953e:	4611      	mov	r1, r2
 8009540:	4618      	mov	r0, r3
 8009542:	f7ff f85a 	bl	80085fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b03      	cmp	r3, #3
 800954c:	d109      	bne.n	8009562 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	f103 0214 	add.w	r2, r3, #20
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	0c1b      	lsrs	r3, r3, #16
 8009558:	b29b      	uxth	r3, r3
 800955a:	4619      	mov	r1, r3
 800955c:	4610      	mov	r0, r2
 800955e:	f7ff f84c 	bl	80085fa <st_word>
	}
}
 8009562:	bf00      	nop
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b086      	sub	sp, #24
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009578:	2100      	movs	r1, #0
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7ff fe2f 	bl	80091de <dir_sdi>
 8009580:	4603      	mov	r3, r0
 8009582:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <dir_find+0x24>
 800958a:	7dfb      	ldrb	r3, [r7, #23]
 800958c:	e03e      	b.n	800960c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	69db      	ldr	r3, [r3, #28]
 8009592:	4619      	mov	r1, r3
 8009594:	6938      	ldr	r0, [r7, #16]
 8009596:	f7ff faa5 	bl	8008ae4 <move_window>
 800959a:	4603      	mov	r3, r0
 800959c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d12f      	bne.n	8009604 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d102      	bne.n	80095b8 <dir_find+0x4e>
 80095b2:	2304      	movs	r3, #4
 80095b4:	75fb      	strb	r3, [r7, #23]
 80095b6:	e028      	b.n	800960a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a1b      	ldr	r3, [r3, #32]
 80095bc:	330b      	adds	r3, #11
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	330b      	adds	r3, #11
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	f003 0308 	and.w	r3, r3, #8
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10a      	bne.n	80095f0 <dir_find+0x86>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a18      	ldr	r0, [r3, #32]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	3324      	adds	r3, #36	@ 0x24
 80095e2:	220b      	movs	r2, #11
 80095e4:	4619      	mov	r1, r3
 80095e6:	f7ff f88b 	bl	8008700 <mem_cmp>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00b      	beq.n	8009608 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80095f0:	2100      	movs	r1, #0
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7ff fe6e 	bl	80092d4 <dir_next>
 80095f8:	4603      	mov	r3, r0
 80095fa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d0c5      	beq.n	800958e <dir_find+0x24>
 8009602:	e002      	b.n	800960a <dir_find+0xa0>
		if (res != FR_OK) break;
 8009604:	bf00      	nop
 8009606:	e000      	b.n	800960a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009608:	bf00      	nop

	return res;
 800960a:	7dfb      	ldrb	r3, [r7, #23]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009622:	2101      	movs	r1, #1
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f7ff ff1a 	bl	800945e <dir_alloc>
 800962a:	4603      	mov	r3, r0
 800962c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d11c      	bne.n	800966e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	69db      	ldr	r3, [r3, #28]
 8009638:	4619      	mov	r1, r3
 800963a:	68b8      	ldr	r0, [r7, #8]
 800963c:	f7ff fa52 	bl	8008ae4 <move_window>
 8009640:	4603      	mov	r3, r0
 8009642:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d111      	bne.n	800966e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	2220      	movs	r2, #32
 8009650:	2100      	movs	r1, #0
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff f839 	bl	80086ca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a18      	ldr	r0, [r3, #32]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	3324      	adds	r3, #36	@ 0x24
 8009660:	220b      	movs	r2, #11
 8009662:	4619      	mov	r1, r3
 8009664:	f7ff f810 	bl	8008688 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	2201      	movs	r2, #1
 800966c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	60fb      	str	r3, [r7, #12]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3324      	adds	r3, #36	@ 0x24
 800968c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800968e:	220b      	movs	r2, #11
 8009690:	2120      	movs	r1, #32
 8009692:	68b8      	ldr	r0, [r7, #8]
 8009694:	f7ff f819 	bl	80086ca <mem_set>
	si = i = 0; ni = 8;
 8009698:	2300      	movs	r3, #0
 800969a:	613b      	str	r3, [r7, #16]
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	61fb      	str	r3, [r7, #28]
 80096a0:	2308      	movs	r3, #8
 80096a2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	1c5a      	adds	r2, r3, #1
 80096a8:	61fa      	str	r2, [r7, #28]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	4413      	add	r3, r2
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80096b2:	7efb      	ldrb	r3, [r7, #27]
 80096b4:	2b20      	cmp	r3, #32
 80096b6:	d94e      	bls.n	8009756 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80096b8:	7efb      	ldrb	r3, [r7, #27]
 80096ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80096bc:	d006      	beq.n	80096cc <create_name+0x54>
 80096be:	7efb      	ldrb	r3, [r7, #27]
 80096c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80096c2:	d110      	bne.n	80096e6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80096c4:	e002      	b.n	80096cc <create_name+0x54>
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	3301      	adds	r3, #1
 80096ca:	61fb      	str	r3, [r7, #28]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	4413      	add	r3, r2
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80096d6:	d0f6      	beq.n	80096c6 <create_name+0x4e>
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	69fb      	ldr	r3, [r7, #28]
 80096dc:	4413      	add	r3, r2
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80096e2:	d0f0      	beq.n	80096c6 <create_name+0x4e>
			break;
 80096e4:	e038      	b.n	8009758 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80096e6:	7efb      	ldrb	r3, [r7, #27]
 80096e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80096ea:	d003      	beq.n	80096f4 <create_name+0x7c>
 80096ec:	693a      	ldr	r2, [r7, #16]
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d30c      	bcc.n	800970e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	2b0b      	cmp	r3, #11
 80096f8:	d002      	beq.n	8009700 <create_name+0x88>
 80096fa:	7efb      	ldrb	r3, [r7, #27]
 80096fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80096fe:	d001      	beq.n	8009704 <create_name+0x8c>
 8009700:	2306      	movs	r3, #6
 8009702:	e044      	b.n	800978e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009704:	2308      	movs	r3, #8
 8009706:	613b      	str	r3, [r7, #16]
 8009708:	230b      	movs	r3, #11
 800970a:	617b      	str	r3, [r7, #20]
			continue;
 800970c:	e022      	b.n	8009754 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800970e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009712:	2b00      	cmp	r3, #0
 8009714:	da04      	bge.n	8009720 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009716:	7efb      	ldrb	r3, [r7, #27]
 8009718:	3b80      	subs	r3, #128	@ 0x80
 800971a:	4a1f      	ldr	r2, [pc, #124]	@ (8009798 <create_name+0x120>)
 800971c:	5cd3      	ldrb	r3, [r2, r3]
 800971e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009720:	7efb      	ldrb	r3, [r7, #27]
 8009722:	4619      	mov	r1, r3
 8009724:	481d      	ldr	r0, [pc, #116]	@ (800979c <create_name+0x124>)
 8009726:	f7ff f812 	bl	800874e <chk_chr>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <create_name+0xbc>
 8009730:	2306      	movs	r3, #6
 8009732:	e02c      	b.n	800978e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009734:	7efb      	ldrb	r3, [r7, #27]
 8009736:	2b60      	cmp	r3, #96	@ 0x60
 8009738:	d905      	bls.n	8009746 <create_name+0xce>
 800973a:	7efb      	ldrb	r3, [r7, #27]
 800973c:	2b7a      	cmp	r3, #122	@ 0x7a
 800973e:	d802      	bhi.n	8009746 <create_name+0xce>
 8009740:	7efb      	ldrb	r3, [r7, #27]
 8009742:	3b20      	subs	r3, #32
 8009744:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	1c5a      	adds	r2, r3, #1
 800974a:	613a      	str	r2, [r7, #16]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	4413      	add	r3, r2
 8009750:	7efa      	ldrb	r2, [r7, #27]
 8009752:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009754:	e7a6      	b.n	80096a4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009756:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	441a      	add	r2, r3
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <create_name+0xf4>
 8009768:	2306      	movs	r3, #6
 800976a:	e010      	b.n	800978e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	2be5      	cmp	r3, #229	@ 0xe5
 8009772:	d102      	bne.n	800977a <create_name+0x102>
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2205      	movs	r2, #5
 8009778:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800977a:	7efb      	ldrb	r3, [r7, #27]
 800977c:	2b20      	cmp	r3, #32
 800977e:	d801      	bhi.n	8009784 <create_name+0x10c>
 8009780:	2204      	movs	r2, #4
 8009782:	e000      	b.n	8009786 <create_name+0x10e>
 8009784:	2200      	movs	r2, #0
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	330b      	adds	r3, #11
 800978a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800978c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800978e:	4618      	mov	r0, r3
 8009790:	3720      	adds	r7, #32
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	0800bcb8 	.word	0x0800bcb8
 800979c:	0800aee4 	.word	0x0800aee4

080097a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80097b4:	e002      	b.n	80097bc <follow_path+0x1c>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	3301      	adds	r3, #1
 80097ba:	603b      	str	r3, [r7, #0]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80097c2:	d0f8      	beq.n	80097b6 <follow_path+0x16>
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80097ca:	d0f4      	beq.n	80097b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	2200      	movs	r2, #0
 80097d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	2b1f      	cmp	r3, #31
 80097d8:	d80a      	bhi.n	80097f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2280      	movs	r2, #128	@ 0x80
 80097de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80097e2:	2100      	movs	r1, #0
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7ff fcfa 	bl	80091de <dir_sdi>
 80097ea:	4603      	mov	r3, r0
 80097ec:	75fb      	strb	r3, [r7, #23]
 80097ee:	e043      	b.n	8009878 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80097f0:	463b      	mov	r3, r7
 80097f2:	4619      	mov	r1, r3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7ff ff3f 	bl	8009678 <create_name>
 80097fa:	4603      	mov	r3, r0
 80097fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d134      	bne.n	800986e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff feb0 	bl	800956a <dir_find>
 800980a:	4603      	mov	r3, r0
 800980c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009814:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00a      	beq.n	8009832 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800981c:	7dfb      	ldrb	r3, [r7, #23]
 800981e:	2b04      	cmp	r3, #4
 8009820:	d127      	bne.n	8009872 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009822:	7afb      	ldrb	r3, [r7, #11]
 8009824:	f003 0304 	and.w	r3, r3, #4
 8009828:	2b00      	cmp	r3, #0
 800982a:	d122      	bne.n	8009872 <follow_path+0xd2>
 800982c:	2305      	movs	r3, #5
 800982e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009830:	e01f      	b.n	8009872 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009832:	7afb      	ldrb	r3, [r7, #11]
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	2b00      	cmp	r3, #0
 800983a:	d11c      	bne.n	8009876 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	799b      	ldrb	r3, [r3, #6]
 8009840:	f003 0310 	and.w	r3, r3, #16
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009848:	2305      	movs	r3, #5
 800984a:	75fb      	strb	r3, [r7, #23]
 800984c:	e014      	b.n	8009878 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800985c:	4413      	add	r3, r2
 800985e:	4619      	mov	r1, r3
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f7ff fe43 	bl	80094ec <ld_clust>
 8009866:	4602      	mov	r2, r0
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800986c:	e7c0      	b.n	80097f0 <follow_path+0x50>
			if (res != FR_OK) break;
 800986e:	bf00      	nop
 8009870:	e002      	b.n	8009878 <follow_path+0xd8>
				break;
 8009872:	bf00      	nop
 8009874:	e000      	b.n	8009878 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009876:	bf00      	nop
			}
		}
	}

	return res;
 8009878:	7dfb      	ldrb	r3, [r7, #23]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009882:	b480      	push	{r7}
 8009884:	b087      	sub	sp, #28
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800988a:	f04f 33ff 	mov.w	r3, #4294967295
 800988e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d031      	beq.n	80098fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	617b      	str	r3, [r7, #20]
 800989e:	e002      	b.n	80098a6 <get_ldnumber+0x24>
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	3301      	adds	r3, #1
 80098a4:	617b      	str	r3, [r7, #20]
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	2b20      	cmp	r3, #32
 80098ac:	d903      	bls.n	80098b6 <get_ldnumber+0x34>
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	2b3a      	cmp	r3, #58	@ 0x3a
 80098b4:	d1f4      	bne.n	80098a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b3a      	cmp	r3, #58	@ 0x3a
 80098bc:	d11c      	bne.n	80098f8 <get_ldnumber+0x76>
			tp = *path;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	60fa      	str	r2, [r7, #12]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	3b30      	subs	r3, #48	@ 0x30
 80098ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2b09      	cmp	r3, #9
 80098d4:	d80e      	bhi.n	80098f4 <get_ldnumber+0x72>
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d10a      	bne.n	80098f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d107      	bne.n	80098f4 <get_ldnumber+0x72>
					vol = (int)i;
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	3301      	adds	r3, #1
 80098ec:	617b      	str	r3, [r7, #20]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	697a      	ldr	r2, [r7, #20]
 80098f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	e002      	b.n	80098fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80098f8:	2300      	movs	r3, #0
 80098fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80098fc:	693b      	ldr	r3, [r7, #16]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	371c      	adds	r7, #28
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
	...

0800990c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	70da      	strb	r2, [r3, #3]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f04f 32ff 	mov.w	r2, #4294967295
 8009922:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7ff f8dc 	bl	8008ae4 <move_window>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <check_fs+0x2a>
 8009932:	2304      	movs	r3, #4
 8009934:	e038      	b.n	80099a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	3330      	adds	r3, #48	@ 0x30
 800993a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe fe20 	bl	8008584 <ld_word>
 8009944:	4603      	mov	r3, r0
 8009946:	461a      	mov	r2, r3
 8009948:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800994c:	429a      	cmp	r2, r3
 800994e:	d001      	beq.n	8009954 <check_fs+0x48>
 8009950:	2303      	movs	r3, #3
 8009952:	e029      	b.n	80099a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800995a:	2be9      	cmp	r3, #233	@ 0xe9
 800995c:	d009      	beq.n	8009972 <check_fs+0x66>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009964:	2beb      	cmp	r3, #235	@ 0xeb
 8009966:	d11e      	bne.n	80099a6 <check_fs+0x9a>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800996e:	2b90      	cmp	r3, #144	@ 0x90
 8009970:	d119      	bne.n	80099a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	3330      	adds	r3, #48	@ 0x30
 8009976:	3336      	adds	r3, #54	@ 0x36
 8009978:	4618      	mov	r0, r3
 800997a:	f7fe fe1b 	bl	80085b4 <ld_dword>
 800997e:	4603      	mov	r3, r0
 8009980:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009984:	4a0a      	ldr	r2, [pc, #40]	@ (80099b0 <check_fs+0xa4>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d101      	bne.n	800998e <check_fs+0x82>
 800998a:	2300      	movs	r3, #0
 800998c:	e00c      	b.n	80099a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	3330      	adds	r3, #48	@ 0x30
 8009992:	3352      	adds	r3, #82	@ 0x52
 8009994:	4618      	mov	r0, r3
 8009996:	f7fe fe0d 	bl	80085b4 <ld_dword>
 800999a:	4603      	mov	r3, r0
 800999c:	4a05      	ldr	r2, [pc, #20]	@ (80099b4 <check_fs+0xa8>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d101      	bne.n	80099a6 <check_fs+0x9a>
 80099a2:	2300      	movs	r3, #0
 80099a4:	e000      	b.n	80099a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80099a6:	2302      	movs	r3, #2
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	00544146 	.word	0x00544146
 80099b4:	33544146 	.word	0x33544146

080099b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b096      	sub	sp, #88	@ 0x58
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	4613      	mov	r3, r2
 80099c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2200      	movs	r2, #0
 80099ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f7ff ff58 	bl	8009882 <get_ldnumber>
 80099d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80099d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	da01      	bge.n	80099de <find_volume+0x26>
 80099da:	230b      	movs	r3, #11
 80099dc:	e22d      	b.n	8009e3a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80099de:	4aa1      	ldr	r2, [pc, #644]	@ (8009c64 <find_volume+0x2ac>)
 80099e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099e6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80099e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <find_volume+0x3a>
 80099ee:	230c      	movs	r3, #12
 80099f0:	e223      	b.n	8009e3a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80099f8:	79fb      	ldrb	r3, [r7, #7]
 80099fa:	f023 0301 	bic.w	r3, r3, #1
 80099fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d01a      	beq.n	8009a3e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0a:	785b      	ldrb	r3, [r3, #1]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe fd19 	bl	8008444 <disk_status>
 8009a12:	4603      	mov	r3, r0
 8009a14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009a18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10c      	bne.n	8009a3e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009a24:	79fb      	ldrb	r3, [r7, #7]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d007      	beq.n	8009a3a <find_volume+0x82>
 8009a2a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a2e:	f003 0304 	and.w	r3, r3, #4
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009a36:	230a      	movs	r3, #10
 8009a38:	e1ff      	b.n	8009e3a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	e1fd      	b.n	8009e3a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a40:	2200      	movs	r2, #0
 8009a42:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4e:	785b      	ldrb	r3, [r3, #1]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f7fe fd11 	bl	8008478 <disk_initialize>
 8009a56:	4603      	mov	r3, r0
 8009a58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009a5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e1e6      	b.n	8009e3a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009a6c:	79fb      	ldrb	r3, [r7, #7]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d007      	beq.n	8009a82 <find_volume+0xca>
 8009a72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009a76:	f003 0304 	and.w	r3, r3, #4
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009a7e:	230a      	movs	r3, #10
 8009a80:	e1db      	b.n	8009e3a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009a86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a88:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009a8a:	f7ff ff3f 	bl	800990c <check_fs>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009a94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d149      	bne.n	8009b30 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009aa0:	e01e      	b.n	8009ae0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009aa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009aaa:	011b      	lsls	r3, r3, #4
 8009aac:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009ab0:	4413      	add	r3, r2
 8009ab2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d006      	beq.n	8009acc <find_volume+0x114>
 8009abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7fe fd76 	bl	80085b4 <ld_dword>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	e000      	b.n	8009ace <find_volume+0x116>
 8009acc:	2200      	movs	r2, #0
 8009ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	3358      	adds	r3, #88	@ 0x58
 8009ad4:	443b      	add	r3, r7
 8009ad6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009adc:	3301      	adds	r3, #1
 8009ade:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ae2:	2b03      	cmp	r3, #3
 8009ae4:	d9dd      	bls.n	8009aa2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d002      	beq.n	8009af6 <find_volume+0x13e>
 8009af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009af2:	3b01      	subs	r3, #1
 8009af4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	3358      	adds	r3, #88	@ 0x58
 8009afc:	443b      	add	r3, r7
 8009afe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009b02:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d005      	beq.n	8009b16 <find_volume+0x15e>
 8009b0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009b0c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009b0e:	f7ff fefd 	bl	800990c <check_fs>
 8009b12:	4603      	mov	r3, r0
 8009b14:	e000      	b.n	8009b18 <find_volume+0x160>
 8009b16:	2303      	movs	r3, #3
 8009b18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009b1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d905      	bls.n	8009b30 <find_volume+0x178>
 8009b24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b26:	3301      	adds	r3, #1
 8009b28:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b2c:	2b03      	cmp	r3, #3
 8009b2e:	d9e2      	bls.n	8009af6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009b30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009b34:	2b04      	cmp	r3, #4
 8009b36:	d101      	bne.n	8009b3c <find_volume+0x184>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e17e      	b.n	8009e3a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009b3c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d901      	bls.n	8009b48 <find_volume+0x190>
 8009b44:	230d      	movs	r3, #13
 8009b46:	e178      	b.n	8009e3a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b4a:	3330      	adds	r3, #48	@ 0x30
 8009b4c:	330b      	adds	r3, #11
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fe fd18 	bl	8008584 <ld_word>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b5a:	d001      	beq.n	8009b60 <find_volume+0x1a8>
 8009b5c:	230d      	movs	r3, #13
 8009b5e:	e16c      	b.n	8009e3a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b62:	3330      	adds	r3, #48	@ 0x30
 8009b64:	3316      	adds	r3, #22
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fd0c 	bl	8008584 <ld_word>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d106      	bne.n	8009b84 <find_volume+0x1cc>
 8009b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b78:	3330      	adds	r3, #48	@ 0x30
 8009b7a:	3324      	adds	r3, #36	@ 0x24
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fe fd19 	bl	80085b4 <ld_dword>
 8009b82:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b88:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b8c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b92:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b96:	789b      	ldrb	r3, [r3, #2]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d005      	beq.n	8009ba8 <find_volume+0x1f0>
 8009b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9e:	789b      	ldrb	r3, [r3, #2]
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d001      	beq.n	8009ba8 <find_volume+0x1f0>
 8009ba4:	230d      	movs	r3, #13
 8009ba6:	e148      	b.n	8009e3a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009baa:	789b      	ldrb	r3, [r3, #2]
 8009bac:	461a      	mov	r2, r3
 8009bae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bb0:	fb02 f303 	mul.w	r3, r2, r3
 8009bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc4:	895b      	ldrh	r3, [r3, #10]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d008      	beq.n	8009bdc <find_volume+0x224>
 8009bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bcc:	895b      	ldrh	r3, [r3, #10]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd2:	895b      	ldrh	r3, [r3, #10]
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <find_volume+0x228>
 8009bdc:	230d      	movs	r3, #13
 8009bde:	e12c      	b.n	8009e3a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be2:	3330      	adds	r3, #48	@ 0x30
 8009be4:	3311      	adds	r3, #17
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fe fccc 	bl	8008584 <ld_word>
 8009bec:	4603      	mov	r3, r0
 8009bee:	461a      	mov	r2, r3
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bf6:	891b      	ldrh	r3, [r3, #8]
 8009bf8:	f003 030f 	and.w	r3, r3, #15
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <find_volume+0x24e>
 8009c02:	230d      	movs	r3, #13
 8009c04:	e119      	b.n	8009e3a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c08:	3330      	adds	r3, #48	@ 0x30
 8009c0a:	3313      	adds	r3, #19
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f7fe fcb9 	bl	8008584 <ld_word>
 8009c12:	4603      	mov	r3, r0
 8009c14:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d106      	bne.n	8009c2a <find_volume+0x272>
 8009c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1e:	3330      	adds	r3, #48	@ 0x30
 8009c20:	3320      	adds	r3, #32
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fe fcc6 	bl	80085b4 <ld_dword>
 8009c28:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2c:	3330      	adds	r3, #48	@ 0x30
 8009c2e:	330e      	adds	r3, #14
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7fe fca7 	bl	8008584 <ld_word>
 8009c36:	4603      	mov	r3, r0
 8009c38:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009c3a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <find_volume+0x28c>
 8009c40:	230d      	movs	r3, #13
 8009c42:	e0fa      	b.n	8009e3a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009c44:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c48:	4413      	add	r3, r2
 8009c4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c4c:	8912      	ldrh	r2, [r2, #8]
 8009c4e:	0912      	lsrs	r2, r2, #4
 8009c50:	b292      	uxth	r2, r2
 8009c52:	4413      	add	r3, r2
 8009c54:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009c56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d204      	bcs.n	8009c68 <find_volume+0x2b0>
 8009c5e:	230d      	movs	r3, #13
 8009c60:	e0eb      	b.n	8009e3a <find_volume+0x482>
 8009c62:	bf00      	nop
 8009c64:	20000578 	.word	0x20000578
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009c68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c70:	8952      	ldrh	r2, [r2, #10]
 8009c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c76:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d101      	bne.n	8009c82 <find_volume+0x2ca>
 8009c7e:	230d      	movs	r3, #13
 8009c80:	e0db      	b.n	8009e3a <find_volume+0x482>
		fmt = FS_FAT32;
 8009c82:	2303      	movs	r3, #3
 8009c84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d802      	bhi.n	8009c98 <find_volume+0x2e0>
 8009c92:	2302      	movs	r3, #2
 8009c94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d802      	bhi.n	8009ca8 <find_volume+0x2f0>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009caa:	1c9a      	adds	r2, r3, #2
 8009cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cae:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009cb4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009cb6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009cb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cba:	441a      	add	r2, r3
 8009cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cbe:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009cc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc4:	441a      	add	r2, r3
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc8:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8009cca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	d11e      	bne.n	8009d10 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd4:	3330      	adds	r3, #48	@ 0x30
 8009cd6:	332a      	adds	r3, #42	@ 0x2a
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fe fc53 	bl	8008584 <ld_word>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d001      	beq.n	8009ce8 <find_volume+0x330>
 8009ce4:	230d      	movs	r3, #13
 8009ce6:	e0a8      	b.n	8009e3a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cea:	891b      	ldrh	r3, [r3, #8]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <find_volume+0x33c>
 8009cf0:	230d      	movs	r3, #13
 8009cf2:	e0a2      	b.n	8009e3a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf6:	3330      	adds	r3, #48	@ 0x30
 8009cf8:	332c      	adds	r3, #44	@ 0x2c
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fe fc5a 	bl	80085b4 <ld_dword>
 8009d00:	4602      	mov	r2, r0
 8009d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d04:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d0e:	e01f      	b.n	8009d50 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d12:	891b      	ldrh	r3, [r3, #8]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d101      	bne.n	8009d1c <find_volume+0x364>
 8009d18:	230d      	movs	r3, #13
 8009d1a:	e08e      	b.n	8009e3a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1e:	6a1a      	ldr	r2, [r3, #32]
 8009d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d22:	441a      	add	r2, r3
 8009d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d26:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009d28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d103      	bne.n	8009d38 <find_volume+0x380>
 8009d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	005b      	lsls	r3, r3, #1
 8009d36:	e00a      	b.n	8009d4e <find_volume+0x396>
 8009d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3a:	695a      	ldr	r2, [r3, #20]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	005b      	lsls	r3, r3, #1
 8009d40:	4413      	add	r3, r2
 8009d42:	085a      	lsrs	r2, r3, #1
 8009d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d46:	695b      	ldr	r3, [r3, #20]
 8009d48:	f003 0301 	and.w	r3, r3, #1
 8009d4c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009d4e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d52:	699a      	ldr	r2, [r3, #24]
 8009d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d56:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8009d5a:	0a5b      	lsrs	r3, r3, #9
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d201      	bcs.n	8009d64 <find_volume+0x3ac>
 8009d60:	230d      	movs	r3, #13
 8009d62:	e06a      	b.n	8009e3a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d66:	f04f 32ff 	mov.w	r2, #4294967295
 8009d6a:	611a      	str	r2, [r3, #16]
 8009d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6e:	691a      	ldr	r2, [r3, #16]
 8009d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d72:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d76:	2280      	movs	r2, #128	@ 0x80
 8009d78:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009d7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	d149      	bne.n	8009e16 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d84:	3330      	adds	r3, #48	@ 0x30
 8009d86:	3330      	adds	r3, #48	@ 0x30
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7fe fbfb 	bl	8008584 <ld_word>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d140      	bne.n	8009e16 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d96:	3301      	adds	r3, #1
 8009d98:	4619      	mov	r1, r3
 8009d9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009d9c:	f7fe fea2 	bl	8008ae4 <move_window>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d137      	bne.n	8009e16 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009da8:	2200      	movs	r2, #0
 8009daa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dae:	3330      	adds	r3, #48	@ 0x30
 8009db0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fe fbe5 	bl	8008584 <ld_word>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d127      	bne.n	8009e16 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dc8:	3330      	adds	r3, #48	@ 0x30
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe fbf2 	bl	80085b4 <ld_dword>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8009e44 <find_volume+0x48c>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d11e      	bne.n	8009e16 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dda:	3330      	adds	r3, #48	@ 0x30
 8009ddc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7fe fbe7 	bl	80085b4 <ld_dword>
 8009de6:	4603      	mov	r3, r0
 8009de8:	4a17      	ldr	r2, [pc, #92]	@ (8009e48 <find_volume+0x490>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d113      	bne.n	8009e16 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df0:	3330      	adds	r3, #48	@ 0x30
 8009df2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fe fbdc 	bl	80085b4 <ld_dword>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e00:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e04:	3330      	adds	r3, #48	@ 0x30
 8009e06:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe fbd2 	bl	80085b4 <ld_dword>
 8009e10:	4602      	mov	r2, r0
 8009e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e14:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e18:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009e1c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8009e4c <find_volume+0x494>)
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	3301      	adds	r3, #1
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	4b09      	ldr	r3, [pc, #36]	@ (8009e4c <find_volume+0x494>)
 8009e28:	801a      	strh	r2, [r3, #0]
 8009e2a:	4b08      	ldr	r3, [pc, #32]	@ (8009e4c <find_volume+0x494>)
 8009e2c:	881a      	ldrh	r2, [r3, #0]
 8009e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e30:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009e32:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009e34:	f7fe fdee 	bl	8008a14 <clear_lock>
#endif
	return FR_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3758      	adds	r7, #88	@ 0x58
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	41615252 	.word	0x41615252
 8009e48:	61417272 	.word	0x61417272
 8009e4c:	2000057c 	.word	0x2000057c

08009e50 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009e5a:	2309      	movs	r3, #9
 8009e5c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d01c      	beq.n	8009e9e <validate+0x4e>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d018      	beq.n	8009e9e <validate+0x4e>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d013      	beq.n	8009e9e <validate+0x4e>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	889a      	ldrh	r2, [r3, #4]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	88db      	ldrh	r3, [r3, #6]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d10c      	bne.n	8009e9e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fe fada 	bl	8008444 <disk_status>
 8009e90:	4603      	mov	r3, r0
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <validate+0x4e>
			res = FR_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d102      	bne.n	8009eaa <validate+0x5a>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	e000      	b.n	8009eac <validate+0x5c>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	6013      	str	r3, [r2, #0]
	return res;
 8009eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
	...

08009ebc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b088      	sub	sp, #32
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009ece:	f107 0310 	add.w	r3, r7, #16
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7ff fcd5 	bl	8009882 <get_ldnumber>
 8009ed8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	da01      	bge.n	8009ee4 <f_mount+0x28>
 8009ee0:	230b      	movs	r3, #11
 8009ee2:	e02b      	b.n	8009f3c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009ee4:	4a17      	ldr	r2, [pc, #92]	@ (8009f44 <f_mount+0x88>)
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009eec:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d005      	beq.n	8009f00 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009ef4:	69b8      	ldr	r0, [r7, #24]
 8009ef6:	f7fe fd8d 	bl	8008a14 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	2200      	movs	r2, #0
 8009efe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	490d      	ldr	r1, [pc, #52]	@ (8009f44 <f_mount+0x88>)
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <f_mount+0x66>
 8009f1c:	79fb      	ldrb	r3, [r7, #7]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d001      	beq.n	8009f26 <f_mount+0x6a>
 8009f22:	2300      	movs	r3, #0
 8009f24:	e00a      	b.n	8009f3c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009f26:	f107 010c 	add.w	r1, r7, #12
 8009f2a:	f107 0308 	add.w	r3, r7, #8
 8009f2e:	2200      	movs	r2, #0
 8009f30:	4618      	mov	r0, r3
 8009f32:	f7ff fd41 	bl	80099b8 <find_volume>
 8009f36:	4603      	mov	r3, r0
 8009f38:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3720      	adds	r7, #32
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	20000578 	.word	0x20000578

08009f48 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b098      	sub	sp, #96	@ 0x60
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	4613      	mov	r3, r2
 8009f54:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <f_open+0x18>
 8009f5c:	2309      	movs	r3, #9
 8009f5e:	e1a9      	b.n	800a2b4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009f60:	79fb      	ldrb	r3, [r7, #7]
 8009f62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f66:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009f68:	79fa      	ldrb	r2, [r7, #7]
 8009f6a:	f107 0110 	add.w	r1, r7, #16
 8009f6e:	f107 0308 	add.w	r3, r7, #8
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7ff fd20 	bl	80099b8 <find_volume>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009f7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	f040 818d 	bne.w	800a2a2 <f_open+0x35a>
		dj.obj.fs = fs;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	f107 0314 	add.w	r3, r7, #20
 8009f92:	4611      	mov	r1, r2
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7ff fc03 	bl	80097a0 <follow_path>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009fa0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d118      	bne.n	8009fda <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009fa8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009fac:	b25b      	sxtb	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	da03      	bge.n	8009fba <f_open+0x72>
				res = FR_INVALID_NAME;
 8009fb2:	2306      	movs	r3, #6
 8009fb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009fb8:	e00f      	b.n	8009fda <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009fba:	79fb      	ldrb	r3, [r7, #7]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	bf8c      	ite	hi
 8009fc0:	2301      	movhi	r3, #1
 8009fc2:	2300      	movls	r3, #0
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f107 0314 	add.w	r3, r7, #20
 8009fcc:	4611      	mov	r1, r2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fe fbd8 	bl	8008784 <chk_lock>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009fda:	79fb      	ldrb	r3, [r7, #7]
 8009fdc:	f003 031c 	and.w	r3, r3, #28
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d07f      	beq.n	800a0e4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8009fe4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d017      	beq.n	800a01c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009fec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	d10e      	bne.n	800a012 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009ff4:	f7fe fc22 	bl	800883c <enq_lock>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d006      	beq.n	800a00c <f_open+0xc4>
 8009ffe:	f107 0314 	add.w	r3, r7, #20
 800a002:	4618      	mov	r0, r3
 800a004:	f7ff fb06 	bl	8009614 <dir_register>
 800a008:	4603      	mov	r3, r0
 800a00a:	e000      	b.n	800a00e <f_open+0xc6>
 800a00c:	2312      	movs	r3, #18
 800a00e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a012:	79fb      	ldrb	r3, [r7, #7]
 800a014:	f043 0308 	orr.w	r3, r3, #8
 800a018:	71fb      	strb	r3, [r7, #7]
 800a01a:	e010      	b.n	800a03e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a01c:	7ebb      	ldrb	r3, [r7, #26]
 800a01e:	f003 0311 	and.w	r3, r3, #17
 800a022:	2b00      	cmp	r3, #0
 800a024:	d003      	beq.n	800a02e <f_open+0xe6>
					res = FR_DENIED;
 800a026:	2307      	movs	r3, #7
 800a028:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a02c:	e007      	b.n	800a03e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a02e:	79fb      	ldrb	r3, [r7, #7]
 800a030:	f003 0304 	and.w	r3, r3, #4
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <f_open+0xf6>
 800a038:	2308      	movs	r3, #8
 800a03a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a03e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a042:	2b00      	cmp	r3, #0
 800a044:	d168      	bne.n	800a118 <f_open+0x1d0>
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	f003 0308 	and.w	r3, r3, #8
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d063      	beq.n	800a118 <f_open+0x1d0>
				dw = GET_FATTIME();
 800a050:	f7fe f88c 	bl	800816c <get_fattime>
 800a054:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a058:	330e      	adds	r3, #14
 800a05a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fe fae7 	bl	8008630 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a064:	3316      	adds	r3, #22
 800a066:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fe fae1 	bl	8008630 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a06e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a070:	330b      	adds	r3, #11
 800a072:	2220      	movs	r2, #32
 800a074:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a07a:	4611      	mov	r1, r2
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7ff fa35 	bl	80094ec <ld_clust>
 800a082:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a088:	2200      	movs	r2, #0
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7ff fa4d 	bl	800952a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a092:	331c      	adds	r3, #28
 800a094:	2100      	movs	r1, #0
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe faca 	bl	8008630 <st_dword>
					fs->wflag = 1;
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a0a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d037      	beq.n	800a118 <f_open+0x1d0>
						dw = fs->winsect;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ac:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a0ae:	f107 0314 	add.w	r3, r7, #20
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7fe ff60 	bl	8008f7c <remove_chain>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a0c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d126      	bne.n	800a118 <f_open+0x1d0>
							res = move_window(fs, dw);
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe fd08 	bl	8008ae4 <move_window>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a0de:	3a01      	subs	r2, #1
 800a0e0:	60da      	str	r2, [r3, #12]
 800a0e2:	e019      	b.n	800a118 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a0e4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d115      	bne.n	800a118 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a0ec:	7ebb      	ldrb	r3, [r7, #26]
 800a0ee:	f003 0310 	and.w	r3, r3, #16
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <f_open+0x1b6>
					res = FR_NO_FILE;
 800a0f6:	2304      	movs	r3, #4
 800a0f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a0fc:	e00c      	b.n	800a118 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	f003 0302 	and.w	r3, r3, #2
 800a104:	2b00      	cmp	r3, #0
 800a106:	d007      	beq.n	800a118 <f_open+0x1d0>
 800a108:	7ebb      	ldrb	r3, [r7, #26]
 800a10a:	f003 0301 	and.w	r3, r3, #1
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d002      	beq.n	800a118 <f_open+0x1d0>
						res = FR_DENIED;
 800a112:	2307      	movs	r3, #7
 800a114:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a118:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d126      	bne.n	800a16e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a120:	79fb      	ldrb	r3, [r7, #7]
 800a122:	f003 0308 	and.w	r3, r3, #8
 800a126:	2b00      	cmp	r3, #0
 800a128:	d003      	beq.n	800a132 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a12a:	79fb      	ldrb	r3, [r7, #7]
 800a12c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a130:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a13a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a140:	79fb      	ldrb	r3, [r7, #7]
 800a142:	2b01      	cmp	r3, #1
 800a144:	bf8c      	ite	hi
 800a146:	2301      	movhi	r3, #1
 800a148:	2300      	movls	r3, #0
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	461a      	mov	r2, r3
 800a14e:	f107 0314 	add.w	r3, r7, #20
 800a152:	4611      	mov	r1, r2
 800a154:	4618      	mov	r0, r3
 800a156:	f7fe fb93 	bl	8008880 <inc_lock>
 800a15a:	4602      	mov	r2, r0
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d102      	bne.n	800a16e <f_open+0x226>
 800a168:	2302      	movs	r3, #2
 800a16a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a16e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a172:	2b00      	cmp	r3, #0
 800a174:	f040 8095 	bne.w	800a2a2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a17c:	4611      	mov	r1, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f7ff f9b4 	bl	80094ec <ld_clust>
 800a184:	4602      	mov	r2, r0
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a18a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a18c:	331c      	adds	r3, #28
 800a18e:	4618      	mov	r0, r3
 800a190:	f7fe fa10 	bl	80085b4 <ld_dword>
 800a194:	4602      	mov	r2, r0
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	88da      	ldrh	r2, [r3, #6]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	79fa      	ldrb	r2, [r7, #7]
 800a1b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	3330      	adds	r3, #48	@ 0x30
 800a1ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7fe fa7a 	bl	80086ca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	f003 0320 	and.w	r3, r3, #32
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d060      	beq.n	800a2a2 <f_open+0x35a>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d05c      	beq.n	800a2a2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	68da      	ldr	r2, [r3, #12]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	895b      	ldrh	r3, [r3, #10]
 800a1f4:	025b      	lsls	r3, r3, #9
 800a1f6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	657b      	str	r3, [r7, #84]	@ 0x54
 800a204:	e016      	b.n	800a234 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fe fd25 	bl	8008c5a <get_fat>
 800a210:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a212:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a214:	2b01      	cmp	r3, #1
 800a216:	d802      	bhi.n	800a21e <f_open+0x2d6>
 800a218:	2302      	movs	r3, #2
 800a21a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a21e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a224:	d102      	bne.n	800a22c <f_open+0x2e4>
 800a226:	2301      	movs	r3, #1
 800a228:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a22c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a22e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	657b      	str	r3, [r7, #84]	@ 0x54
 800a234:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d103      	bne.n	800a244 <f_open+0x2fc>
 800a23c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a23e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a240:	429a      	cmp	r2, r3
 800a242:	d8e0      	bhi.n	800a206 <f_open+0x2be>
				}
				fp->clust = clst;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a248:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a24a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d127      	bne.n	800a2a2 <f_open+0x35a>
 800a252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d022      	beq.n	800a2a2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a260:	4618      	mov	r0, r3
 800a262:	f7fe fcdb 	bl	8008c1c <clust2sect>
 800a266:	6478      	str	r0, [r7, #68]	@ 0x44
 800a268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d103      	bne.n	800a276 <f_open+0x32e>
						res = FR_INT_ERR;
 800a26e:	2302      	movs	r3, #2
 800a270:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a274:	e015      	b.n	800a2a2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a278:	0a5a      	lsrs	r2, r3, #9
 800a27a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a27c:	441a      	add	r2, r3
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	7858      	ldrb	r0, [r3, #1]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6a1a      	ldr	r2, [r3, #32]
 800a290:	2301      	movs	r3, #1
 800a292:	f7fe f919 	bl	80084c8 <disk_read>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <f_open+0x35a>
 800a29c:	2301      	movs	r3, #1
 800a29e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a2a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <f_open+0x368>
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a2b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3760      	adds	r7, #96	@ 0x60
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08e      	sub	sp, #56	@ 0x38
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
 800a2c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f107 0214 	add.w	r2, r7, #20
 800a2da:	4611      	mov	r1, r2
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7ff fdb7 	bl	8009e50 <validate>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a2e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d107      	bne.n	800a300 <f_read+0x44>
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	7d5b      	ldrb	r3, [r3, #21]
 800a2f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a2f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d002      	beq.n	800a306 <f_read+0x4a>
 800a300:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a304:	e115      	b.n	800a532 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	7d1b      	ldrb	r3, [r3, #20]
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d101      	bne.n	800a316 <f_read+0x5a>
 800a312:	2307      	movs	r3, #7
 800a314:	e10d      	b.n	800a532 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	429a      	cmp	r2, r3
 800a328:	f240 80fe 	bls.w	800a528 <f_read+0x26c>
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a330:	e0fa      	b.n	800a528 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	699b      	ldr	r3, [r3, #24]
 800a336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f040 80c6 	bne.w	800a4cc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	699b      	ldr	r3, [r3, #24]
 800a344:	0a5b      	lsrs	r3, r3, #9
 800a346:	697a      	ldr	r2, [r7, #20]
 800a348:	8952      	ldrh	r2, [r2, #10]
 800a34a:	3a01      	subs	r2, #1
 800a34c:	4013      	ands	r3, r2
 800a34e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d12f      	bne.n	800a3b6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d103      	bne.n	800a366 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	633b      	str	r3, [r7, #48]	@ 0x30
 800a364:	e013      	b.n	800a38e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d007      	beq.n	800a37e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	699b      	ldr	r3, [r3, #24]
 800a372:	4619      	mov	r1, r3
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f7fe fefe 	bl	8009176 <clmt_clust>
 800a37a:	6338      	str	r0, [r7, #48]	@ 0x30
 800a37c:	e007      	b.n	800a38e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	69db      	ldr	r3, [r3, #28]
 800a384:	4619      	mov	r1, r3
 800a386:	4610      	mov	r0, r2
 800a388:	f7fe fc67 	bl	8008c5a <get_fat>
 800a38c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a390:	2b01      	cmp	r3, #1
 800a392:	d804      	bhi.n	800a39e <f_read+0xe2>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2202      	movs	r2, #2
 800a398:	755a      	strb	r2, [r3, #21]
 800a39a:	2302      	movs	r3, #2
 800a39c:	e0c9      	b.n	800a532 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a4:	d104      	bne.n	800a3b0 <f_read+0xf4>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	755a      	strb	r2, [r3, #21]
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e0c0      	b.n	800a532 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a3b4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	69db      	ldr	r3, [r3, #28]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4610      	mov	r0, r2
 800a3c0:	f7fe fc2c 	bl	8008c1c <clust2sect>
 800a3c4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d104      	bne.n	800a3d6 <f_read+0x11a>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	755a      	strb	r2, [r3, #21]
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	e0ad      	b.n	800a532 <f_read+0x276>
			sect += csect;
 800a3d6:	69ba      	ldr	r2, [r7, #24]
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	4413      	add	r3, r2
 800a3dc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	0a5b      	lsrs	r3, r3, #9
 800a3e2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d039      	beq.n	800a45e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a3ea:	69fa      	ldr	r2, [r7, #28]
 800a3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ee:	4413      	add	r3, r2
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	8952      	ldrh	r2, [r2, #10]
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d905      	bls.n	800a404 <f_read+0x148>
					cc = fs->csize - csect;
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	895b      	ldrh	r3, [r3, #10]
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	7858      	ldrb	r0, [r3, #1]
 800a408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a40e:	f7fe f85b 	bl	80084c8 <disk_read>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d004      	beq.n	800a422 <f_read+0x166>
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2201      	movs	r2, #1
 800a41c:	755a      	strb	r2, [r3, #21]
 800a41e:	2301      	movs	r3, #1
 800a420:	e087      	b.n	800a532 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	7d1b      	ldrb	r3, [r3, #20]
 800a426:	b25b      	sxtb	r3, r3
 800a428:	2b00      	cmp	r3, #0
 800a42a:	da14      	bge.n	800a456 <f_read+0x19a>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6a1a      	ldr	r2, [r3, #32]
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a436:	429a      	cmp	r2, r3
 800a438:	d90d      	bls.n	800a456 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6a1a      	ldr	r2, [r3, #32]
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	025b      	lsls	r3, r3, #9
 800a444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a446:	18d0      	adds	r0, r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	3330      	adds	r3, #48	@ 0x30
 800a44c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a450:	4619      	mov	r1, r3
 800a452:	f7fe f919 	bl	8008688 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a458:	025b      	lsls	r3, r3, #9
 800a45a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a45c:	e050      	b.n	800a500 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	69ba      	ldr	r2, [r7, #24]
 800a464:	429a      	cmp	r2, r3
 800a466:	d02e      	beq.n	800a4c6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	7d1b      	ldrb	r3, [r3, #20]
 800a46c:	b25b      	sxtb	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	da18      	bge.n	800a4a4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	7858      	ldrb	r0, [r3, #1]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6a1a      	ldr	r2, [r3, #32]
 800a480:	2301      	movs	r3, #1
 800a482:	f7fe f841 	bl	8008508 <disk_write>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d004      	beq.n	800a496 <f_read+0x1da>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	755a      	strb	r2, [r3, #21]
 800a492:	2301      	movs	r3, #1
 800a494:	e04d      	b.n	800a532 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	7d1b      	ldrb	r3, [r3, #20]
 800a49a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a49e:	b2da      	uxtb	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	7858      	ldrb	r0, [r3, #1]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	69ba      	ldr	r2, [r7, #24]
 800a4b2:	f7fe f809 	bl	80084c8 <disk_read>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d004      	beq.n	800a4c6 <f_read+0x20a>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	755a      	strb	r2, [r3, #21]
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e035      	b.n	800a532 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	69ba      	ldr	r2, [r7, #24]
 800a4ca:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4d4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a4d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a4da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d901      	bls.n	800a4e6 <f_read+0x22a>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	699b      	ldr	r3, [r3, #24]
 800a4f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4f4:	4413      	add	r3, r2
 800a4f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a4fc:	f7fe f8c4 	bl	8008688 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a504:	4413      	add	r3, r2
 800a506:	627b      	str	r3, [r7, #36]	@ 0x24
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	699a      	ldr	r2, [r3, #24]
 800a50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a50e:	441a      	add	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	619a      	str	r2, [r3, #24]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a51a:	441a      	add	r2, r3
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	601a      	str	r2, [r3, #0]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f47f af01 	bne.w	800a332 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3738      	adds	r7, #56	@ 0x38
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b086      	sub	sp, #24
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f107 0208 	add.w	r2, r7, #8
 800a548:	4611      	mov	r1, r2
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7ff fc80 	bl	8009e50 <validate>
 800a550:	4603      	mov	r3, r0
 800a552:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a554:	7dfb      	ldrb	r3, [r7, #23]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d168      	bne.n	800a62c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	7d1b      	ldrb	r3, [r3, #20]
 800a55e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a562:	2b00      	cmp	r3, #0
 800a564:	d062      	beq.n	800a62c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	7d1b      	ldrb	r3, [r3, #20]
 800a56a:	b25b      	sxtb	r3, r3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	da15      	bge.n	800a59c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	7858      	ldrb	r0, [r3, #1]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a1a      	ldr	r2, [r3, #32]
 800a57e:	2301      	movs	r3, #1
 800a580:	f7fd ffc2 	bl	8008508 <disk_write>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <f_sync+0x54>
 800a58a:	2301      	movs	r3, #1
 800a58c:	e04f      	b.n	800a62e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	7d1b      	ldrb	r3, [r3, #20]
 800a592:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a596:	b2da      	uxtb	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a59c:	f7fd fde6 	bl	800816c <get_fattime>
 800a5a0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	f7fe fa9a 	bl	8008ae4 <move_window>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a5b4:	7dfb      	ldrb	r3, [r7, #23]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d138      	bne.n	800a62c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5be:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	330b      	adds	r3, #11
 800a5c4:	781a      	ldrb	r2, [r3, #0]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	330b      	adds	r3, #11
 800a5ca:	f042 0220 	orr.w	r2, r2, #32
 800a5ce:	b2d2      	uxtb	r2, r2
 800a5d0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6818      	ldr	r0, [r3, #0]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	68f9      	ldr	r1, [r7, #12]
 800a5de:	f7fe ffa4 	bl	800952a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f103 021c 	add.w	r2, r3, #28
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	f7fe f81e 	bl	8008630 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	3316      	adds	r3, #22
 800a5f8:	6939      	ldr	r1, [r7, #16]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fe f818 	bl	8008630 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	3312      	adds	r3, #18
 800a604:	2100      	movs	r1, #0
 800a606:	4618      	mov	r0, r3
 800a608:	f7fd fff7 	bl	80085fa <st_word>
					fs->wflag = 1;
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	2201      	movs	r2, #1
 800a610:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	4618      	mov	r0, r3
 800a616:	f7fe fa93 	bl	8008b40 <sync_fs>
 800a61a:	4603      	mov	r3, r0
 800a61c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	7d1b      	ldrb	r3, [r3, #20]
 800a622:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a626:	b2da      	uxtb	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a62c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3718      	adds	r7, #24
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b084      	sub	sp, #16
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7ff ff7b 	bl	800a53a <f_sync>
 800a644:	4603      	mov	r3, r0
 800a646:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a648:	7bfb      	ldrb	r3, [r7, #15]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d118      	bne.n	800a680 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f107 0208 	add.w	r2, r7, #8
 800a654:	4611      	mov	r1, r2
 800a656:	4618      	mov	r0, r3
 800a658:	f7ff fbfa 	bl	8009e50 <validate>
 800a65c:	4603      	mov	r3, r0
 800a65e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a660:	7bfb      	ldrb	r3, [r7, #15]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d10c      	bne.n	800a680 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fe f996 	bl	800899c <dec_lock>
 800a670:	4603      	mov	r3, r0
 800a672:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d102      	bne.n	800a680 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a680:	7bfb      	ldrb	r3, [r7, #15]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b090      	sub	sp, #64	@ 0x40
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f107 0208 	add.w	r2, r7, #8
 800a69a:	4611      	mov	r1, r2
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7ff fbd7 	bl	8009e50 <validate>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a6a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d103      	bne.n	800a6b8 <f_lseek+0x2e>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	7d5b      	ldrb	r3, [r3, #21]
 800a6b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a6b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d002      	beq.n	800a6c6 <f_lseek+0x3c>
 800a6c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a6c4:	e1e6      	b.n	800aa94 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f000 80d1 	beq.w	800a872 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d6:	d15a      	bne.n	800a78e <f_lseek+0x104>
			tbl = fp->cltbl;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6dc:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e0:	1d1a      	adds	r2, r3, #4
 800a6e2:	627a      	str	r2, [r7, #36]	@ 0x24
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	617b      	str	r3, [r7, #20]
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d03a      	beq.n	800a76e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fa:	613b      	str	r3, [r7, #16]
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a702:	3302      	adds	r3, #2
 800a704:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800a706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a708:	60fb      	str	r3, [r7, #12]
 800a70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a70c:	3301      	adds	r3, #1
 800a70e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a714:	4618      	mov	r0, r3
 800a716:	f7fe faa0 	bl	8008c5a <get_fat>
 800a71a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d804      	bhi.n	800a72c <f_lseek+0xa2>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2202      	movs	r2, #2
 800a726:	755a      	strb	r2, [r3, #21]
 800a728:	2302      	movs	r3, #2
 800a72a:	e1b3      	b.n	800aa94 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a732:	d104      	bne.n	800a73e <f_lseek+0xb4>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	755a      	strb	r2, [r3, #21]
 800a73a:	2301      	movs	r3, #1
 800a73c:	e1aa      	b.n	800aa94 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	3301      	adds	r3, #1
 800a742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a744:	429a      	cmp	r2, r3
 800a746:	d0de      	beq.n	800a706 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a748:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d809      	bhi.n	800a764 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a752:	1d1a      	adds	r2, r3, #4
 800a754:	627a      	str	r2, [r7, #36]	@ 0x24
 800a756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75c:	1d1a      	adds	r2, r3, #4
 800a75e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	695b      	ldr	r3, [r3, #20]
 800a768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d3c4      	bcc.n	800a6f8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a772:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a774:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d803      	bhi.n	800a786 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
 800a784:	e184      	b.n	800aa90 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a786:	2311      	movs	r3, #17
 800a788:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a78c:	e180      	b.n	800aa90 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	429a      	cmp	r2, r3
 800a796:	d902      	bls.n	800a79e <f_lseek+0x114>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	683a      	ldr	r2, [r7, #0]
 800a7a2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f000 8172 	beq.w	800aa90 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7fe fcdf 	bl	8009176 <clmt_clust>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a7be:	68ba      	ldr	r2, [r7, #8]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	69db      	ldr	r3, [r3, #28]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	4610      	mov	r0, r2
 800a7c8:	f7fe fa28 	bl	8008c1c <clust2sect>
 800a7cc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d104      	bne.n	800a7de <f_lseek+0x154>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	755a      	strb	r2, [r3, #21]
 800a7da:	2302      	movs	r3, #2
 800a7dc:	e15a      	b.n	800aa94 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	0a5b      	lsrs	r3, r3, #9
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	8952      	ldrh	r2, [r2, #10]
 800a7e8:	3a01      	subs	r2, #1
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	69ba      	ldr	r2, [r7, #24]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f000 8148 	beq.w	800aa90 <f_lseek+0x406>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a1b      	ldr	r3, [r3, #32]
 800a804:	69ba      	ldr	r2, [r7, #24]
 800a806:	429a      	cmp	r2, r3
 800a808:	f000 8142 	beq.w	800aa90 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	7d1b      	ldrb	r3, [r3, #20]
 800a810:	b25b      	sxtb	r3, r3
 800a812:	2b00      	cmp	r3, #0
 800a814:	da18      	bge.n	800a848 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	7858      	ldrb	r0, [r3, #1]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a1a      	ldr	r2, [r3, #32]
 800a824:	2301      	movs	r3, #1
 800a826:	f7fd fe6f 	bl	8008508 <disk_write>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d004      	beq.n	800a83a <f_lseek+0x1b0>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	755a      	strb	r2, [r3, #21]
 800a836:	2301      	movs	r3, #1
 800a838:	e12c      	b.n	800aa94 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	7d1b      	ldrb	r3, [r3, #20]
 800a83e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a842:	b2da      	uxtb	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	7858      	ldrb	r0, [r3, #1]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a852:	2301      	movs	r3, #1
 800a854:	69ba      	ldr	r2, [r7, #24]
 800a856:	f7fd fe37 	bl	80084c8 <disk_read>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d004      	beq.n	800a86a <f_lseek+0x1e0>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	755a      	strb	r2, [r3, #21]
 800a866:	2301      	movs	r3, #1
 800a868:	e114      	b.n	800aa94 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	69ba      	ldr	r2, [r7, #24]
 800a86e:	621a      	str	r2, [r3, #32]
 800a870:	e10e      	b.n	800aa90 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d908      	bls.n	800a88e <f_lseek+0x204>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	7d1b      	ldrb	r3, [r3, #20]
 800a880:	f003 0302 	and.w	r3, r3, #2
 800a884:	2b00      	cmp	r3, #0
 800a886:	d102      	bne.n	800a88e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a894:	2300      	movs	r3, #0
 800a896:	637b      	str	r3, [r7, #52]	@ 0x34
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a89c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 80a7 	beq.w	800a9f4 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	895b      	ldrh	r3, [r3, #10]
 800a8aa:	025b      	lsls	r3, r3, #9
 800a8ac:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d01b      	beq.n	800a8ec <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	1e5a      	subs	r2, r3, #1
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	fbb2 f2f3 	udiv	r2, r2, r3
 800a8be:	6a3b      	ldr	r3, [r7, #32]
 800a8c0:	1e59      	subs	r1, r3, #1
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d30f      	bcc.n	800a8ec <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a8cc:	6a3b      	ldr	r3, [r7, #32]
 800a8ce:	1e5a      	subs	r2, r3, #1
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	425b      	negs	r3, r3
 800a8d4:	401a      	ands	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8ea:	e022      	b.n	800a932 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d119      	bne.n	800a92c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fe fba2 	bl	8009046 <create_chain>
 800a902:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a906:	2b01      	cmp	r3, #1
 800a908:	d104      	bne.n	800a914 <f_lseek+0x28a>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2202      	movs	r2, #2
 800a90e:	755a      	strb	r2, [r3, #21]
 800a910:	2302      	movs	r3, #2
 800a912:	e0bf      	b.n	800aa94 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91a:	d104      	bne.n	800a926 <f_lseek+0x29c>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	755a      	strb	r2, [r3, #21]
 800a922:	2301      	movs	r3, #1
 800a924:	e0b6      	b.n	800aa94 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a92a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a930:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a934:	2b00      	cmp	r3, #0
 800a936:	d05d      	beq.n	800a9f4 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800a938:	e03a      	b.n	800a9b0 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	603b      	str	r3, [r7, #0]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	699a      	ldr	r2, [r3, #24]
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	441a      	add	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	7d1b      	ldrb	r3, [r3, #20]
 800a952:	f003 0302 	and.w	r3, r3, #2
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00b      	beq.n	800a972 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fe fb71 	bl	8009046 <create_chain>
 800a964:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d108      	bne.n	800a97e <f_lseek+0x2f4>
							ofs = 0; break;
 800a96c:	2300      	movs	r3, #0
 800a96e:	603b      	str	r3, [r7, #0]
 800a970:	e022      	b.n	800a9b8 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a976:	4618      	mov	r0, r3
 800a978:	f7fe f96f 	bl	8008c5a <get_fat>
 800a97c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a984:	d104      	bne.n	800a990 <f_lseek+0x306>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2201      	movs	r2, #1
 800a98a:	755a      	strb	r2, [r3, #21]
 800a98c:	2301      	movs	r3, #1
 800a98e:	e081      	b.n	800aa94 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a992:	2b01      	cmp	r3, #1
 800a994:	d904      	bls.n	800a9a0 <f_lseek+0x316>
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d304      	bcc.n	800a9aa <f_lseek+0x320>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	755a      	strb	r2, [r3, #21]
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	e074      	b.n	800aa94 <f_lseek+0x40a>
					fp->clust = clst;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9ae:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a9b0:	683a      	ldr	r2, [r7, #0]
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d8c0      	bhi.n	800a93a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	699a      	ldr	r2, [r3, #24]
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	441a      	add	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d012      	beq.n	800a9f4 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fe f922 	bl	8008c1c <clust2sect>
 800a9d8:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a9da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d104      	bne.n	800a9ea <f_lseek+0x360>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	755a      	strb	r2, [r3, #21]
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	e054      	b.n	800aa94 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	0a5b      	lsrs	r3, r3, #9
 800a9ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9f0:	4413      	add	r3, r2
 800a9f2:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	699a      	ldr	r2, [r3, #24]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d90a      	bls.n	800aa16 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	699a      	ldr	r2, [r3, #24]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	7d1b      	ldrb	r3, [r3, #20]
 800aa0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d036      	beq.n	800aa90 <f_lseek+0x406>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d031      	beq.n	800aa90 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	7d1b      	ldrb	r3, [r3, #20]
 800aa30:	b25b      	sxtb	r3, r3
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	da18      	bge.n	800aa68 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	7858      	ldrb	r0, [r3, #1]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a1a      	ldr	r2, [r3, #32]
 800aa44:	2301      	movs	r3, #1
 800aa46:	f7fd fd5f 	bl	8008508 <disk_write>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d004      	beq.n	800aa5a <f_lseek+0x3d0>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	755a      	strb	r2, [r3, #21]
 800aa56:	2301      	movs	r3, #1
 800aa58:	e01c      	b.n	800aa94 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	7d1b      	ldrb	r3, [r3, #20]
 800aa5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	7858      	ldrb	r0, [r3, #1]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa72:	2301      	movs	r3, #1
 800aa74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa76:	f7fd fd27 	bl	80084c8 <disk_read>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d004      	beq.n	800aa8a <f_lseek+0x400>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	755a      	strb	r2, [r3, #21]
 800aa86:	2301      	movs	r3, #1
 800aa88:	e004      	b.n	800aa94 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa8e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800aa90:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3740      	adds	r7, #64	@ 0x40
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aab2:	4b1f      	ldr	r3, [pc, #124]	@ (800ab30 <FATFS_LinkDriverEx+0x94>)
 800aab4:	7a5b      	ldrb	r3, [r3, #9]
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d131      	bne.n	800ab20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aabc:	4b1c      	ldr	r3, [pc, #112]	@ (800ab30 <FATFS_LinkDriverEx+0x94>)
 800aabe:	7a5b      	ldrb	r3, [r3, #9]
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	461a      	mov	r2, r3
 800aac4:	4b1a      	ldr	r3, [pc, #104]	@ (800ab30 <FATFS_LinkDriverEx+0x94>)
 800aac6:	2100      	movs	r1, #0
 800aac8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800aaca:	4b19      	ldr	r3, [pc, #100]	@ (800ab30 <FATFS_LinkDriverEx+0x94>)
 800aacc:	7a5b      	ldrb	r3, [r3, #9]
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	4a17      	ldr	r2, [pc, #92]	@ (800ab30 <FATFS_LinkDriverEx+0x94>)
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	4413      	add	r3, r2
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800aada:	4b15      	ldr	r3, [pc, #84]	@ (800ab30 <FATFS_LinkDriverEx+0x94>)
 800aadc:	7a5b      	ldrb	r3, [r3, #9]
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	461a      	mov	r2, r3
 800aae2:	4b13      	ldr	r3, [pc, #76]	@ (800ab30 <FATFS_LinkDriverEx+0x94>)
 800aae4:	4413      	add	r3, r2
 800aae6:	79fa      	ldrb	r2, [r7, #7]
 800aae8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800aaea:	4b11      	ldr	r3, [pc, #68]	@ (800ab30 <FATFS_LinkDriverEx+0x94>)
 800aaec:	7a5b      	ldrb	r3, [r3, #9]
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	1c5a      	adds	r2, r3, #1
 800aaf2:	b2d1      	uxtb	r1, r2
 800aaf4:	4a0e      	ldr	r2, [pc, #56]	@ (800ab30 <FATFS_LinkDriverEx+0x94>)
 800aaf6:	7251      	strb	r1, [r2, #9]
 800aaf8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800aafa:	7dbb      	ldrb	r3, [r7, #22]
 800aafc:	3330      	adds	r3, #48	@ 0x30
 800aafe:	b2da      	uxtb	r2, r3
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	3301      	adds	r3, #1
 800ab08:	223a      	movs	r2, #58	@ 0x3a
 800ab0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	3302      	adds	r3, #2
 800ab10:	222f      	movs	r2, #47	@ 0x2f
 800ab12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	3303      	adds	r3, #3
 800ab18:	2200      	movs	r2, #0
 800ab1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ab20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	371c      	adds	r7, #28
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	200005a0 	.word	0x200005a0

0800ab34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ab3e:	2200      	movs	r2, #0
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f7ff ffaa 	bl	800aa9c <FATFS_LinkDriverEx>
 800ab48:	4603      	mov	r3, r0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <malloc>:
 800ab54:	4b02      	ldr	r3, [pc, #8]	@ (800ab60 <malloc+0xc>)
 800ab56:	4601      	mov	r1, r0
 800ab58:	6818      	ldr	r0, [r3, #0]
 800ab5a:	f000 b82d 	b.w	800abb8 <_malloc_r>
 800ab5e:	bf00      	nop
 800ab60:	20000018 	.word	0x20000018

0800ab64 <free>:
 800ab64:	4b02      	ldr	r3, [pc, #8]	@ (800ab70 <free+0xc>)
 800ab66:	4601      	mov	r1, r0
 800ab68:	6818      	ldr	r0, [r3, #0]
 800ab6a:	f000 b939 	b.w	800ade0 <_free_r>
 800ab6e:	bf00      	nop
 800ab70:	20000018 	.word	0x20000018

0800ab74 <sbrk_aligned>:
 800ab74:	b570      	push	{r4, r5, r6, lr}
 800ab76:	4e0f      	ldr	r6, [pc, #60]	@ (800abb4 <sbrk_aligned+0x40>)
 800ab78:	460c      	mov	r4, r1
 800ab7a:	6831      	ldr	r1, [r6, #0]
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	b911      	cbnz	r1, 800ab86 <sbrk_aligned+0x12>
 800ab80:	f000 f8e4 	bl	800ad4c <_sbrk_r>
 800ab84:	6030      	str	r0, [r6, #0]
 800ab86:	4621      	mov	r1, r4
 800ab88:	4628      	mov	r0, r5
 800ab8a:	f000 f8df 	bl	800ad4c <_sbrk_r>
 800ab8e:	1c43      	adds	r3, r0, #1
 800ab90:	d103      	bne.n	800ab9a <sbrk_aligned+0x26>
 800ab92:	f04f 34ff 	mov.w	r4, #4294967295
 800ab96:	4620      	mov	r0, r4
 800ab98:	bd70      	pop	{r4, r5, r6, pc}
 800ab9a:	1cc4      	adds	r4, r0, #3
 800ab9c:	f024 0403 	bic.w	r4, r4, #3
 800aba0:	42a0      	cmp	r0, r4
 800aba2:	d0f8      	beq.n	800ab96 <sbrk_aligned+0x22>
 800aba4:	1a21      	subs	r1, r4, r0
 800aba6:	4628      	mov	r0, r5
 800aba8:	f000 f8d0 	bl	800ad4c <_sbrk_r>
 800abac:	3001      	adds	r0, #1
 800abae:	d1f2      	bne.n	800ab96 <sbrk_aligned+0x22>
 800abb0:	e7ef      	b.n	800ab92 <sbrk_aligned+0x1e>
 800abb2:	bf00      	nop
 800abb4:	200005ac 	.word	0x200005ac

0800abb8 <_malloc_r>:
 800abb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abbc:	1ccd      	adds	r5, r1, #3
 800abbe:	f025 0503 	bic.w	r5, r5, #3
 800abc2:	3508      	adds	r5, #8
 800abc4:	2d0c      	cmp	r5, #12
 800abc6:	bf38      	it	cc
 800abc8:	250c      	movcc	r5, #12
 800abca:	2d00      	cmp	r5, #0
 800abcc:	4606      	mov	r6, r0
 800abce:	db01      	blt.n	800abd4 <_malloc_r+0x1c>
 800abd0:	42a9      	cmp	r1, r5
 800abd2:	d904      	bls.n	800abde <_malloc_r+0x26>
 800abd4:	230c      	movs	r3, #12
 800abd6:	6033      	str	r3, [r6, #0]
 800abd8:	2000      	movs	r0, #0
 800abda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800acb4 <_malloc_r+0xfc>
 800abe2:	f000 f869 	bl	800acb8 <__malloc_lock>
 800abe6:	f8d8 3000 	ldr.w	r3, [r8]
 800abea:	461c      	mov	r4, r3
 800abec:	bb44      	cbnz	r4, 800ac40 <_malloc_r+0x88>
 800abee:	4629      	mov	r1, r5
 800abf0:	4630      	mov	r0, r6
 800abf2:	f7ff ffbf 	bl	800ab74 <sbrk_aligned>
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	4604      	mov	r4, r0
 800abfa:	d158      	bne.n	800acae <_malloc_r+0xf6>
 800abfc:	f8d8 4000 	ldr.w	r4, [r8]
 800ac00:	4627      	mov	r7, r4
 800ac02:	2f00      	cmp	r7, #0
 800ac04:	d143      	bne.n	800ac8e <_malloc_r+0xd6>
 800ac06:	2c00      	cmp	r4, #0
 800ac08:	d04b      	beq.n	800aca2 <_malloc_r+0xea>
 800ac0a:	6823      	ldr	r3, [r4, #0]
 800ac0c:	4639      	mov	r1, r7
 800ac0e:	4630      	mov	r0, r6
 800ac10:	eb04 0903 	add.w	r9, r4, r3
 800ac14:	f000 f89a 	bl	800ad4c <_sbrk_r>
 800ac18:	4581      	cmp	r9, r0
 800ac1a:	d142      	bne.n	800aca2 <_malloc_r+0xea>
 800ac1c:	6821      	ldr	r1, [r4, #0]
 800ac1e:	1a6d      	subs	r5, r5, r1
 800ac20:	4629      	mov	r1, r5
 800ac22:	4630      	mov	r0, r6
 800ac24:	f7ff ffa6 	bl	800ab74 <sbrk_aligned>
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d03a      	beq.n	800aca2 <_malloc_r+0xea>
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	442b      	add	r3, r5
 800ac30:	6023      	str	r3, [r4, #0]
 800ac32:	f8d8 3000 	ldr.w	r3, [r8]
 800ac36:	685a      	ldr	r2, [r3, #4]
 800ac38:	bb62      	cbnz	r2, 800ac94 <_malloc_r+0xdc>
 800ac3a:	f8c8 7000 	str.w	r7, [r8]
 800ac3e:	e00f      	b.n	800ac60 <_malloc_r+0xa8>
 800ac40:	6822      	ldr	r2, [r4, #0]
 800ac42:	1b52      	subs	r2, r2, r5
 800ac44:	d420      	bmi.n	800ac88 <_malloc_r+0xd0>
 800ac46:	2a0b      	cmp	r2, #11
 800ac48:	d917      	bls.n	800ac7a <_malloc_r+0xc2>
 800ac4a:	1961      	adds	r1, r4, r5
 800ac4c:	42a3      	cmp	r3, r4
 800ac4e:	6025      	str	r5, [r4, #0]
 800ac50:	bf18      	it	ne
 800ac52:	6059      	strne	r1, [r3, #4]
 800ac54:	6863      	ldr	r3, [r4, #4]
 800ac56:	bf08      	it	eq
 800ac58:	f8c8 1000 	streq.w	r1, [r8]
 800ac5c:	5162      	str	r2, [r4, r5]
 800ac5e:	604b      	str	r3, [r1, #4]
 800ac60:	4630      	mov	r0, r6
 800ac62:	f000 f82f 	bl	800acc4 <__malloc_unlock>
 800ac66:	f104 000b 	add.w	r0, r4, #11
 800ac6a:	1d23      	adds	r3, r4, #4
 800ac6c:	f020 0007 	bic.w	r0, r0, #7
 800ac70:	1ac2      	subs	r2, r0, r3
 800ac72:	bf1c      	itt	ne
 800ac74:	1a1b      	subne	r3, r3, r0
 800ac76:	50a3      	strne	r3, [r4, r2]
 800ac78:	e7af      	b.n	800abda <_malloc_r+0x22>
 800ac7a:	6862      	ldr	r2, [r4, #4]
 800ac7c:	42a3      	cmp	r3, r4
 800ac7e:	bf0c      	ite	eq
 800ac80:	f8c8 2000 	streq.w	r2, [r8]
 800ac84:	605a      	strne	r2, [r3, #4]
 800ac86:	e7eb      	b.n	800ac60 <_malloc_r+0xa8>
 800ac88:	4623      	mov	r3, r4
 800ac8a:	6864      	ldr	r4, [r4, #4]
 800ac8c:	e7ae      	b.n	800abec <_malloc_r+0x34>
 800ac8e:	463c      	mov	r4, r7
 800ac90:	687f      	ldr	r7, [r7, #4]
 800ac92:	e7b6      	b.n	800ac02 <_malloc_r+0x4a>
 800ac94:	461a      	mov	r2, r3
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	42a3      	cmp	r3, r4
 800ac9a:	d1fb      	bne.n	800ac94 <_malloc_r+0xdc>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	6053      	str	r3, [r2, #4]
 800aca0:	e7de      	b.n	800ac60 <_malloc_r+0xa8>
 800aca2:	230c      	movs	r3, #12
 800aca4:	6033      	str	r3, [r6, #0]
 800aca6:	4630      	mov	r0, r6
 800aca8:	f000 f80c 	bl	800acc4 <__malloc_unlock>
 800acac:	e794      	b.n	800abd8 <_malloc_r+0x20>
 800acae:	6005      	str	r5, [r0, #0]
 800acb0:	e7d6      	b.n	800ac60 <_malloc_r+0xa8>
 800acb2:	bf00      	nop
 800acb4:	200005b0 	.word	0x200005b0

0800acb8 <__malloc_lock>:
 800acb8:	4801      	ldr	r0, [pc, #4]	@ (800acc0 <__malloc_lock+0x8>)
 800acba:	f000 b881 	b.w	800adc0 <__retarget_lock_acquire_recursive>
 800acbe:	bf00      	nop
 800acc0:	200006f0 	.word	0x200006f0

0800acc4 <__malloc_unlock>:
 800acc4:	4801      	ldr	r0, [pc, #4]	@ (800accc <__malloc_unlock+0x8>)
 800acc6:	f000 b87c 	b.w	800adc2 <__retarget_lock_release_recursive>
 800acca:	bf00      	nop
 800accc:	200006f0 	.word	0x200006f0

0800acd0 <realloc>:
 800acd0:	4b02      	ldr	r3, [pc, #8]	@ (800acdc <realloc+0xc>)
 800acd2:	460a      	mov	r2, r1
 800acd4:	4601      	mov	r1, r0
 800acd6:	6818      	ldr	r0, [r3, #0]
 800acd8:	f000 b802 	b.w	800ace0 <_realloc_r>
 800acdc:	20000018 	.word	0x20000018

0800ace0 <_realloc_r>:
 800ace0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace4:	4680      	mov	r8, r0
 800ace6:	4615      	mov	r5, r2
 800ace8:	460c      	mov	r4, r1
 800acea:	b921      	cbnz	r1, 800acf6 <_realloc_r+0x16>
 800acec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acf0:	4611      	mov	r1, r2
 800acf2:	f7ff bf61 	b.w	800abb8 <_malloc_r>
 800acf6:	b92a      	cbnz	r2, 800ad04 <_realloc_r+0x24>
 800acf8:	f000 f872 	bl	800ade0 <_free_r>
 800acfc:	2400      	movs	r4, #0
 800acfe:	4620      	mov	r0, r4
 800ad00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad04:	f000 f8b6 	bl	800ae74 <_malloc_usable_size_r>
 800ad08:	4285      	cmp	r5, r0
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	d802      	bhi.n	800ad14 <_realloc_r+0x34>
 800ad0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad12:	d8f4      	bhi.n	800acfe <_realloc_r+0x1e>
 800ad14:	4629      	mov	r1, r5
 800ad16:	4640      	mov	r0, r8
 800ad18:	f7ff ff4e 	bl	800abb8 <_malloc_r>
 800ad1c:	4607      	mov	r7, r0
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	d0ec      	beq.n	800acfc <_realloc_r+0x1c>
 800ad22:	42b5      	cmp	r5, r6
 800ad24:	462a      	mov	r2, r5
 800ad26:	4621      	mov	r1, r4
 800ad28:	bf28      	it	cs
 800ad2a:	4632      	movcs	r2, r6
 800ad2c:	f000 f84a 	bl	800adc4 <memcpy>
 800ad30:	4621      	mov	r1, r4
 800ad32:	4640      	mov	r0, r8
 800ad34:	f000 f854 	bl	800ade0 <_free_r>
 800ad38:	463c      	mov	r4, r7
 800ad3a:	e7e0      	b.n	800acfe <_realloc_r+0x1e>

0800ad3c <memset>:
 800ad3c:	4402      	add	r2, r0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d100      	bne.n	800ad46 <memset+0xa>
 800ad44:	4770      	bx	lr
 800ad46:	f803 1b01 	strb.w	r1, [r3], #1
 800ad4a:	e7f9      	b.n	800ad40 <memset+0x4>

0800ad4c <_sbrk_r>:
 800ad4c:	b538      	push	{r3, r4, r5, lr}
 800ad4e:	4d06      	ldr	r5, [pc, #24]	@ (800ad68 <_sbrk_r+0x1c>)
 800ad50:	2300      	movs	r3, #0
 800ad52:	4604      	mov	r4, r0
 800ad54:	4608      	mov	r0, r1
 800ad56:	602b      	str	r3, [r5, #0]
 800ad58:	f7f7 fad6 	bl	8002308 <_sbrk>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d102      	bne.n	800ad66 <_sbrk_r+0x1a>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <_sbrk_r+0x1a>
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
 800ad68:	200006ec 	.word	0x200006ec

0800ad6c <__errno>:
 800ad6c:	4b01      	ldr	r3, [pc, #4]	@ (800ad74 <__errno+0x8>)
 800ad6e:	6818      	ldr	r0, [r3, #0]
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	20000018 	.word	0x20000018

0800ad78 <__libc_init_array>:
 800ad78:	b570      	push	{r4, r5, r6, lr}
 800ad7a:	4d0d      	ldr	r5, [pc, #52]	@ (800adb0 <__libc_init_array+0x38>)
 800ad7c:	4c0d      	ldr	r4, [pc, #52]	@ (800adb4 <__libc_init_array+0x3c>)
 800ad7e:	1b64      	subs	r4, r4, r5
 800ad80:	10a4      	asrs	r4, r4, #2
 800ad82:	2600      	movs	r6, #0
 800ad84:	42a6      	cmp	r6, r4
 800ad86:	d109      	bne.n	800ad9c <__libc_init_array+0x24>
 800ad88:	4d0b      	ldr	r5, [pc, #44]	@ (800adb8 <__libc_init_array+0x40>)
 800ad8a:	4c0c      	ldr	r4, [pc, #48]	@ (800adbc <__libc_init_array+0x44>)
 800ad8c:	f000 f87a 	bl	800ae84 <_init>
 800ad90:	1b64      	subs	r4, r4, r5
 800ad92:	10a4      	asrs	r4, r4, #2
 800ad94:	2600      	movs	r6, #0
 800ad96:	42a6      	cmp	r6, r4
 800ad98:	d105      	bne.n	800ada6 <__libc_init_array+0x2e>
 800ad9a:	bd70      	pop	{r4, r5, r6, pc}
 800ad9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ada0:	4798      	blx	r3
 800ada2:	3601      	adds	r6, #1
 800ada4:	e7ee      	b.n	800ad84 <__libc_init_array+0xc>
 800ada6:	f855 3b04 	ldr.w	r3, [r5], #4
 800adaa:	4798      	blx	r3
 800adac:	3601      	adds	r6, #1
 800adae:	e7f2      	b.n	800ad96 <__libc_init_array+0x1e>
 800adb0:	0800bd40 	.word	0x0800bd40
 800adb4:	0800bd40 	.word	0x0800bd40
 800adb8:	0800bd40 	.word	0x0800bd40
 800adbc:	0800bd44 	.word	0x0800bd44

0800adc0 <__retarget_lock_acquire_recursive>:
 800adc0:	4770      	bx	lr

0800adc2 <__retarget_lock_release_recursive>:
 800adc2:	4770      	bx	lr

0800adc4 <memcpy>:
 800adc4:	440a      	add	r2, r1
 800adc6:	4291      	cmp	r1, r2
 800adc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800adcc:	d100      	bne.n	800add0 <memcpy+0xc>
 800adce:	4770      	bx	lr
 800add0:	b510      	push	{r4, lr}
 800add2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800add6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adda:	4291      	cmp	r1, r2
 800addc:	d1f9      	bne.n	800add2 <memcpy+0xe>
 800adde:	bd10      	pop	{r4, pc}

0800ade0 <_free_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4605      	mov	r5, r0
 800ade4:	2900      	cmp	r1, #0
 800ade6:	d041      	beq.n	800ae6c <_free_r+0x8c>
 800ade8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adec:	1f0c      	subs	r4, r1, #4
 800adee:	2b00      	cmp	r3, #0
 800adf0:	bfb8      	it	lt
 800adf2:	18e4      	addlt	r4, r4, r3
 800adf4:	f7ff ff60 	bl	800acb8 <__malloc_lock>
 800adf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae70 <_free_r+0x90>)
 800adfa:	6813      	ldr	r3, [r2, #0]
 800adfc:	b933      	cbnz	r3, 800ae0c <_free_r+0x2c>
 800adfe:	6063      	str	r3, [r4, #4]
 800ae00:	6014      	str	r4, [r2, #0]
 800ae02:	4628      	mov	r0, r5
 800ae04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae08:	f7ff bf5c 	b.w	800acc4 <__malloc_unlock>
 800ae0c:	42a3      	cmp	r3, r4
 800ae0e:	d908      	bls.n	800ae22 <_free_r+0x42>
 800ae10:	6820      	ldr	r0, [r4, #0]
 800ae12:	1821      	adds	r1, r4, r0
 800ae14:	428b      	cmp	r3, r1
 800ae16:	bf01      	itttt	eq
 800ae18:	6819      	ldreq	r1, [r3, #0]
 800ae1a:	685b      	ldreq	r3, [r3, #4]
 800ae1c:	1809      	addeq	r1, r1, r0
 800ae1e:	6021      	streq	r1, [r4, #0]
 800ae20:	e7ed      	b.n	800adfe <_free_r+0x1e>
 800ae22:	461a      	mov	r2, r3
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	b10b      	cbz	r3, 800ae2c <_free_r+0x4c>
 800ae28:	42a3      	cmp	r3, r4
 800ae2a:	d9fa      	bls.n	800ae22 <_free_r+0x42>
 800ae2c:	6811      	ldr	r1, [r2, #0]
 800ae2e:	1850      	adds	r0, r2, r1
 800ae30:	42a0      	cmp	r0, r4
 800ae32:	d10b      	bne.n	800ae4c <_free_r+0x6c>
 800ae34:	6820      	ldr	r0, [r4, #0]
 800ae36:	4401      	add	r1, r0
 800ae38:	1850      	adds	r0, r2, r1
 800ae3a:	4283      	cmp	r3, r0
 800ae3c:	6011      	str	r1, [r2, #0]
 800ae3e:	d1e0      	bne.n	800ae02 <_free_r+0x22>
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	6053      	str	r3, [r2, #4]
 800ae46:	4408      	add	r0, r1
 800ae48:	6010      	str	r0, [r2, #0]
 800ae4a:	e7da      	b.n	800ae02 <_free_r+0x22>
 800ae4c:	d902      	bls.n	800ae54 <_free_r+0x74>
 800ae4e:	230c      	movs	r3, #12
 800ae50:	602b      	str	r3, [r5, #0]
 800ae52:	e7d6      	b.n	800ae02 <_free_r+0x22>
 800ae54:	6820      	ldr	r0, [r4, #0]
 800ae56:	1821      	adds	r1, r4, r0
 800ae58:	428b      	cmp	r3, r1
 800ae5a:	bf04      	itt	eq
 800ae5c:	6819      	ldreq	r1, [r3, #0]
 800ae5e:	685b      	ldreq	r3, [r3, #4]
 800ae60:	6063      	str	r3, [r4, #4]
 800ae62:	bf04      	itt	eq
 800ae64:	1809      	addeq	r1, r1, r0
 800ae66:	6021      	streq	r1, [r4, #0]
 800ae68:	6054      	str	r4, [r2, #4]
 800ae6a:	e7ca      	b.n	800ae02 <_free_r+0x22>
 800ae6c:	bd38      	pop	{r3, r4, r5, pc}
 800ae6e:	bf00      	nop
 800ae70:	200005b0 	.word	0x200005b0

0800ae74 <_malloc_usable_size_r>:
 800ae74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae78:	1f18      	subs	r0, r3, #4
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	bfbc      	itt	lt
 800ae7e:	580b      	ldrlt	r3, [r1, r0]
 800ae80:	18c0      	addlt	r0, r0, r3
 800ae82:	4770      	bx	lr

0800ae84 <_init>:
 800ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae86:	bf00      	nop
 800ae88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae8a:	bc08      	pop	{r3}
 800ae8c:	469e      	mov	lr, r3
 800ae8e:	4770      	bx	lr

0800ae90 <_fini>:
 800ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae92:	bf00      	nop
 800ae94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae96:	bc08      	pop	{r3}
 800ae98:	469e      	mov	lr, r3
 800ae9a:	4770      	bx	lr
