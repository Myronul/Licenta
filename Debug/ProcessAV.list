
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9c0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f6c  0800cb48  0800cb48  0000db48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dab4  0800dab4  0000f068  2**0
                  CONTENTS
  4 .ARM          00000008  0800dab4  0800dab4  0000eab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dabc  0800dabc  0000f068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dabc  0800dabc  0000eabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dac0  0800dac0  0000eac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800dac4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f068  2**0
                  CONTENTS
 10 .bss          000006b8  20000068  20000068  0000f068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000720  20000720  0000f068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a745  00000000  00000000  0000f098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d86  00000000  00000000  000297dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f0  00000000  00000000  0002d568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000128c  00000000  00000000  0002ed58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b5f  00000000  00000000  0002ffe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa36  00000000  00000000  00055b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6bdc  00000000  00000000  00075579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014c155  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068a0  00000000  00000000  0014c198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00152a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800cb30 	.word	0x0800cb30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800cb30 	.word	0x0800cb30

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <play_audio_file>:
static bool flagBuffer = 0; /*Flag pentru a indica bufferul curent de redare*/



void play_audio_file(char *path)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
	 * se va iesi din while(1), resetand fisierul la 0 si oprind fluxul DMA
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 80004d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004d4:	f00c f984 	bl	800c7e0 <malloc>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	4b32      	ldr	r3, [pc, #200]	@ (80005a8 <play_audio_file+0xe0>)
 80004de:	601a      	str	r2, [r3, #0]

	bool flagAudioDone = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	73fb      	strb	r3, [r7, #15]

	if(buffer == NULL)
 80004e4:	4b30      	ldr	r3, [pc, #192]	@ (80005a8 <play_audio_file+0xe0>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d058      	beq.n	800059e <play_audio_file+0xd6>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	read_audio_file(path, buffer, &flagAudioDone); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 80004ec:	4b2e      	ldr	r3, [pc, #184]	@ (80005a8 <play_audio_file+0xe0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f107 020f 	add.w	r2, r7, #15
 80004f4:	4619      	mov	r1, r3
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f002 f880 	bl	80025fc <read_audio_file>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 80004fc:	4b2a      	ldr	r3, [pc, #168]	@ (80005a8 <play_audio_file+0xe0>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	2300      	movs	r3, #0
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000508:	2100      	movs	r1, #0
 800050a:	4828      	ldr	r0, [pc, #160]	@ (80005ac <play_audio_file+0xe4>)
 800050c:	f003 fb9c 	bl	8003c48 <HAL_DAC_Start_DMA>

	while(!flagAudioDone)
 8000510:	e029      	b.n	8000566 <play_audio_file+0x9e>
	{
		read_audio_file(path, buffer+1024, &flagAudioDone);
 8000512:	4b25      	ldr	r3, [pc, #148]	@ (80005a8 <play_audio_file+0xe0>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800051a:	f107 020f 	add.w	r2, r7, #15
 800051e:	4619      	mov	r1, r3
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f002 f86b 	bl	80025fc <read_audio_file>
		while(flagDmaDAC == 0);
 8000526:	bf00      	nop
 8000528:	4b21      	ldr	r3, [pc, #132]	@ (80005b0 <play_audio_file+0xe8>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	f083 0301 	eor.w	r3, r3, #1
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2b00      	cmp	r3, #0
 8000536:	d1f7      	bne.n	8000528 <play_audio_file+0x60>
		flagDmaDAC = 0;
 8000538:	4b1d      	ldr	r3, [pc, #116]	@ (80005b0 <play_audio_file+0xe8>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
		read_audio_file(path, buffer, &flagAudioDone);
 800053e:	4b1a      	ldr	r3, [pc, #104]	@ (80005a8 <play_audio_file+0xe0>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f107 020f 	add.w	r2, r7, #15
 8000546:	4619      	mov	r1, r3
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f002 f857 	bl	80025fc <read_audio_file>
		while(flagDmaDAC == 0);
 800054e:	bf00      	nop
 8000550:	4b17      	ldr	r3, [pc, #92]	@ (80005b0 <play_audio_file+0xe8>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	b2db      	uxtb	r3, r3
 8000556:	f083 0301 	eor.w	r3, r3, #1
 800055a:	b2db      	uxtb	r3, r3
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1f7      	bne.n	8000550 <play_audio_file+0x88>
		flagDmaDAC = 0;
 8000560:	4b13      	ldr	r3, [pc, #76]	@ (80005b0 <play_audio_file+0xe8>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
	while(!flagAudioDone)
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	f083 0301 	eor.w	r3, r3, #1
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	d1cf      	bne.n	8000512 <play_audio_file+0x4a>

	}

	while(flagDmaDAC == 0);
 8000572:	bf00      	nop
 8000574:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <play_audio_file+0xe8>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f083 0301 	eor.w	r3, r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	d1f7      	bne.n	8000574 <play_audio_file+0xac>
	flagDmaDAC = 0;
 8000584:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <play_audio_file+0xe8>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800058a:	2100      	movs	r1, #0
 800058c:	4807      	ldr	r0, [pc, #28]	@ (80005ac <play_audio_file+0xe4>)
 800058e:	f003 fc1d 	bl	8003dcc <HAL_DAC_Stop_DMA>

	free(buffer);
 8000592:	4b05      	ldr	r3, [pc, #20]	@ (80005a8 <play_audio_file+0xe0>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4618      	mov	r0, r3
 8000598:	f00c f92a 	bl	800c7f0 <free>
 800059c:	e000      	b.n	80005a0 <play_audio_file+0xd8>
		return;
 800059e:	bf00      	nop

}
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000084 	.word	0x20000084
 80005ac:	20000088 	.word	0x20000088
 80005b0:	2000032a 	.word	0x2000032a

080005b4 <convert_color_16_to_18>:

extern SPI_HandleTypeDef hspi1;
volatile extern uint8_t flagDmaSpiTx;

void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	0adb      	lsrs	r3, r3, #11
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	115b      	asrs	r3, r3, #5
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80005d2:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f003 031f 	and.w	r3, r3, #31
 80005dc:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 80005de:	7bfa      	ldrb	r2, [r7, #15]
 80005e0:	4613      	mov	r3, r2
 80005e2:	019b      	lsls	r3, r3, #6
 80005e4:	1a9b      	subs	r3, r3, r2
 80005e6:	4a16      	ldr	r2, [pc, #88]	@ (8000640 <convert_color_16_to_18+0x8c>)
 80005e8:	fb82 1203 	smull	r1, r2, r2, r3
 80005ec:	441a      	add	r2, r3
 80005ee:	1112      	asrs	r2, r2, #4
 80005f0:	17db      	asrs	r3, r3, #31
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 8000600:	7b7a      	ldrb	r2, [r7, #13]
 8000602:	4613      	mov	r3, r2
 8000604:	019b      	lsls	r3, r3, #6
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	4a0d      	ldr	r2, [pc, #52]	@ (8000640 <convert_color_16_to_18+0x8c>)
 800060a:	fb82 1203 	smull	r1, r2, r2, r3
 800060e:	441a      	add	r2, r3
 8000610:	1112      	asrs	r2, r2, #4
 8000612:	17db      	asrs	r3, r3, #31
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	7bfa      	ldrb	r2, [r7, #15]
 8000620:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	7bba      	ldrb	r2, [r7, #14]
 8000628:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	3302      	adds	r3, #2
 800062e:	7b7a      	ldrb	r2, [r7, #13]
 8000630:	701a      	strb	r2, [r3, #0]

}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	84210843 	.word	0x84210843

08000644 <write_color>:


void write_color(uint16_t color)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 800064e:	f107 020c 	add.w	r2, r7, #12
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ffac 	bl	80005b4 <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 800065c:	f107 010c 	add.w	r1, r7, #12
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	2203      	movs	r2, #3
 8000666:	4803      	ldr	r0, [pc, #12]	@ (8000674 <write_color+0x30>)
 8000668:	f005 ff65 	bl	8006536 <HAL_SPI_Transmit>


}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000180 	.word	0x20000180

08000678 <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b085      	sub	sp, #20
 800067c:	af02      	add	r7, sp, #8
 800067e:	4603      	mov	r3, r0
 8000680:	80fb      	strh	r3, [r7, #6]
 8000682:	460b      	mov	r3, r1
 8000684:	80bb      	strh	r3, [r7, #4]
 8000686:	4613      	mov	r3, r2
 8000688:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 800068a:	88bb      	ldrh	r3, [r7, #4]
 800068c:	88fa      	ldrh	r2, [r7, #6]
 800068e:	88b9      	ldrh	r1, [r7, #4]
 8000690:	88f8      	ldrh	r0, [r7, #6]
 8000692:	2477      	movs	r4, #119	@ 0x77
 8000694:	9400      	str	r4, [sp, #0]
 8000696:	f001 f907 	bl	80018a8 <set_adress_window>

	DC_DATA();
 800069a:	2201      	movs	r2, #1
 800069c:	2108      	movs	r1, #8
 800069e:	480a      	ldr	r0, [pc, #40]	@ (80006c8 <draw_pixel+0x50>)
 80006a0:	f004 fa76 	bl	8004b90 <HAL_GPIO_WritePin>
	CS_A();
 80006a4:	2200      	movs	r2, #0
 80006a6:	2110      	movs	r1, #16
 80006a8:	4807      	ldr	r0, [pc, #28]	@ (80006c8 <draw_pixel+0x50>)
 80006aa:	f004 fa71 	bl	8004b90 <HAL_GPIO_WritePin>

	write_color(color);
 80006ae:	887b      	ldrh	r3, [r7, #2]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffc7 	bl	8000644 <write_color>

	CS_D();
 80006b6:	2201      	movs	r2, #1
 80006b8:	2110      	movs	r1, #16
 80006ba:	4803      	ldr	r0, [pc, #12]	@ (80006c8 <draw_pixel+0x50>)
 80006bc:	f004 fa68 	bl	8004b90 <HAL_GPIO_WritePin>

}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd90      	pop	{r4, r7, pc}
 80006c8:	40020c00 	.word	0x40020c00

080006cc <draw_pixel_data>:


static inline void draw_pixel_data(uint16_t x, uint16_t y, uint8_t *data)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af02      	add	r7, sp, #8
 80006d2:	4603      	mov	r3, r0
 80006d4:	603a      	str	r2, [r7, #0]
 80006d6:	80fb      	strh	r3, [r7, #6]
 80006d8:	460b      	mov	r3, r1
 80006da:	80bb      	strh	r3, [r7, #4]
	set_adress_window(x,y,x,y, 'w');
 80006dc:	88bb      	ldrh	r3, [r7, #4]
 80006de:	88fa      	ldrh	r2, [r7, #6]
 80006e0:	88b9      	ldrh	r1, [r7, #4]
 80006e2:	88f8      	ldrh	r0, [r7, #6]
 80006e4:	2477      	movs	r4, #119	@ 0x77
 80006e6:	9400      	str	r4, [sp, #0]
 80006e8:	f001 f8de 	bl	80018a8 <set_adress_window>

	DC_DATA();
 80006ec:	2201      	movs	r2, #1
 80006ee:	2108      	movs	r1, #8
 80006f0:	480b      	ldr	r0, [pc, #44]	@ (8000720 <draw_pixel_data+0x54>)
 80006f2:	f004 fa4d 	bl	8004b90 <HAL_GPIO_WritePin>
	CS_A();
 80006f6:	2200      	movs	r2, #0
 80006f8:	2110      	movs	r1, #16
 80006fa:	4809      	ldr	r0, [pc, #36]	@ (8000720 <draw_pixel_data+0x54>)
 80006fc:	f004 fa48 	bl	8004b90 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	2203      	movs	r2, #3
 8000706:	6839      	ldr	r1, [r7, #0]
 8000708:	4806      	ldr	r0, [pc, #24]	@ (8000724 <draw_pixel_data+0x58>)
 800070a:	f005 ff14 	bl	8006536 <HAL_SPI_Transmit>

	CS_D();
 800070e:	2201      	movs	r2, #1
 8000710:	2110      	movs	r1, #16
 8000712:	4803      	ldr	r0, [pc, #12]	@ (8000720 <draw_pixel_data+0x54>)
 8000714:	f004 fa3c 	bl	8004b90 <HAL_GPIO_WritePin>

}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	40020c00 	.word	0x40020c00
 8000724:	20000180 	.word	0x20000180

08000728 <fill_screen1>:



void fill_screen1(uint16_t color)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af02      	add	r7, sp, #8
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000732:	f107 020c 	add.w	r2, r7, #12
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	4611      	mov	r1, r2
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff3a 	bl	80005b4 <convert_color_16_to_18>

	uint8_t *line = malloc(320*sizeof(pixel));
 8000740:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8000744:	f00c f84c 	bl	800c7e0 <malloc>
 8000748:	4603      	mov	r3, r0
 800074a:	613b      	str	r3, [r7, #16]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 800074c:	2377      	movs	r3, #119	@ 0x77
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	f240 13df 	movw	r3, #479	@ 0x1df
 8000754:	f240 123f 	movw	r2, #319	@ 0x13f
 8000758:	2100      	movs	r1, #0
 800075a:	2000      	movs	r0, #0
 800075c:	f001 f8a4 	bl	80018a8 <set_adress_window>

	DC_DATA();
 8000760:	2201      	movs	r2, #1
 8000762:	2108      	movs	r1, #8
 8000764:	481e      	ldr	r0, [pc, #120]	@ (80007e0 <fill_screen1+0xb8>)
 8000766:	f004 fa13 	bl	8004b90 <HAL_GPIO_WritePin>
	CS_A();
 800076a:	2200      	movs	r2, #0
 800076c:	2110      	movs	r1, #16
 800076e:	481c      	ldr	r0, [pc, #112]	@ (80007e0 <fill_screen1+0xb8>)
 8000770:	f004 fa0e 	bl	8004b90 <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 8000774:	2300      	movs	r3, #0
 8000776:	82fb      	strh	r3, [r7, #22]
 8000778:	e00f      	b.n	800079a <fill_screen1+0x72>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 800077a:	8afa      	ldrh	r2, [r7, #22]
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	4413      	add	r3, r2
 8000786:	461a      	mov	r2, r3
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	8819      	ldrh	r1, [r3, #0]
 800078e:	789b      	ldrb	r3, [r3, #2]
 8000790:	8011      	strh	r1, [r2, #0]
 8000792:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 8000794:	8afb      	ldrh	r3, [r7, #22]
 8000796:	3301      	adds	r3, #1
 8000798:	82fb      	strh	r3, [r7, #22]
 800079a:	8afb      	ldrh	r3, [r7, #22]
 800079c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80007a0:	d3eb      	bcc.n	800077a <fill_screen1+0x52>
	}

	for(uint16_t y=0; y<480; y++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	82bb      	strh	r3, [r7, #20]
 80007a6:	e00a      	b.n	80007be <fill_screen1+0x96>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80007b0:	6939      	ldr	r1, [r7, #16]
 80007b2:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <fill_screen1+0xbc>)
 80007b4:	f005 febf 	bl	8006536 <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 80007b8:	8abb      	ldrh	r3, [r7, #20]
 80007ba:	3301      	adds	r3, #1
 80007bc:	82bb      	strh	r3, [r7, #20]
 80007be:	8abb      	ldrh	r3, [r7, #20]
 80007c0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80007c4:	d3f0      	bcc.n	80007a8 <fill_screen1+0x80>

	}

	free(line);
 80007c6:	6938      	ldr	r0, [r7, #16]
 80007c8:	f00c f812 	bl	800c7f0 <free>

	CS_D();
 80007cc:	2201      	movs	r2, #1
 80007ce:	2110      	movs	r1, #16
 80007d0:	4803      	ldr	r0, [pc, #12]	@ (80007e0 <fill_screen1+0xb8>)
 80007d2:	f004 f9dd 	bl	8004b90 <HAL_GPIO_WritePin>

}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40020c00 	.word	0x40020c00
 80007e4:	20000180 	.word	0x20000180

080007e8 <fill_screen2>:


void fill_screen2(uint16_t color)
{
 80007e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007ec:	b08f      	sub	sp, #60	@ 0x3c
 80007ee:	af02      	add	r7, sp, #8
 80007f0:	4603      	mov	r3, r0
 80007f2:	80fb      	strh	r3, [r7, #6]
 80007f4:	466b      	mov	r3, sp
 80007f6:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 80007f8:	2377      	movs	r3, #119	@ 0x77
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	f240 13df 	movw	r3, #479	@ 0x1df
 8000800:	f240 123f 	movw	r2, #319	@ 0x13f
 8000804:	2100      	movs	r1, #0
 8000806:	2000      	movs	r0, #0
 8000808:	f001 f84e 	bl	80018a8 <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 800080c:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 8000812:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8000816:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	0adb      	lsrs	r3, r3, #11
 800081c:	b29b      	uxth	r3, r3
 800081e:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	115b      	asrs	r3, r3, #5
 8000824:	b2db      	uxtb	r3, r3
 8000826:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800082a:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	f003 031f 	and.w	r3, r3, #31
 8000834:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 8000836:	7ffa      	ldrb	r2, [r7, #31]
 8000838:	4613      	mov	r3, r2
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	1a9b      	subs	r3, r3, r2
 800083e:	4a4f      	ldr	r2, [pc, #316]	@ (800097c <fill_screen2+0x194>)
 8000840:	fb82 1203 	smull	r1, r2, r2, r3
 8000844:	441a      	add	r2, r3
 8000846:	1112      	asrs	r2, r2, #4
 8000848:	17db      	asrs	r3, r3, #31
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 800084e:	7fba      	ldrb	r2, [r7, #30]
 8000850:	4613      	mov	r3, r2
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	1a9b      	subs	r3, r3, r2
 8000856:	4a4a      	ldr	r2, [pc, #296]	@ (8000980 <fill_screen2+0x198>)
 8000858:	fb82 1203 	smull	r1, r2, r2, r3
 800085c:	441a      	add	r2, r3
 800085e:	1152      	asrs	r2, r2, #5
 8000860:	17db      	asrs	r3, r3, #31
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 8000866:	7f7a      	ldrb	r2, [r7, #29]
 8000868:	4613      	mov	r3, r2
 800086a:	021b      	lsls	r3, r3, #8
 800086c:	1a9b      	subs	r3, r3, r2
 800086e:	4a43      	ldr	r2, [pc, #268]	@ (800097c <fill_screen2+0x194>)
 8000870:	fb82 1203 	smull	r1, r2, r2, r3
 8000874:	441a      	add	r2, r3
 8000876:	1112      	asrs	r2, r2, #4
 8000878:	17db      	asrs	r3, r3, #31
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 800087e:	2201      	movs	r2, #1
 8000880:	2108      	movs	r1, #8
 8000882:	4840      	ldr	r0, [pc, #256]	@ (8000984 <fill_screen2+0x19c>)
 8000884:	f004 f984 	bl	8004b90 <HAL_GPIO_WritePin>
	CS_A();
 8000888:	2200      	movs	r2, #0
 800088a:	2110      	movs	r1, #16
 800088c:	483d      	ldr	r0, [pc, #244]	@ (8000984 <fill_screen2+0x19c>)
 800088e:	f004 f97f 	bl	8004b90 <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 8000892:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000894:	460b      	mov	r3, r1
 8000896:	3b01      	subs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	2300      	movs	r3, #0
 800089c:	4688      	mov	r8, r1
 800089e:	4699      	mov	r9, r3
 80008a0:	f04f 0200 	mov.w	r2, #0
 80008a4:	f04f 0300 	mov.w	r3, #0
 80008a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008b4:	2300      	movs	r3, #0
 80008b6:	460c      	mov	r4, r1
 80008b8:	461d      	mov	r5, r3
 80008ba:	f04f 0200 	mov.w	r2, #0
 80008be:	f04f 0300 	mov.w	r3, #0
 80008c2:	00eb      	lsls	r3, r5, #3
 80008c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008c8:	00e2      	lsls	r2, r4, #3
 80008ca:	1dcb      	adds	r3, r1, #7
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	ebad 0d03 	sub.w	sp, sp, r3
 80008d4:	ab02      	add	r3, sp, #8
 80008d6:	3300      	adds	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008de:	e011      	b.n	8000904 <fill_screen2+0x11c>
	{
		frame[j] = r;
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008e4:	4413      	add	r3, r2
 80008e6:	7ffa      	ldrb	r2, [r7, #31]
 80008e8:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 80008ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008ec:	3301      	adds	r3, #1
 80008ee:	697a      	ldr	r2, [r7, #20]
 80008f0:	7fb9      	ldrb	r1, [r7, #30]
 80008f2:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 80008f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008f6:	3302      	adds	r3, #2
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	7f79      	ldrb	r1, [r7, #29]
 80008fc:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 80008fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000900:	3303      	adds	r3, #3
 8000902:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000904:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000908:	429a      	cmp	r2, r3
 800090a:	d3e9      	bcc.n	80008e0 <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 800090c:	6a3a      	ldr	r2, [r7, #32]
 800090e:	4613      	mov	r3, r2
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	4413      	add	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 8000920:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <fill_screen2+0x1a0>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800092a:	e012      	b.n	8000952 <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 800092c:	bf00      	nop
 800092e:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <fill_screen2+0x1a0>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d0fa      	beq.n	800092e <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 8000938:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <fill_screen2+0x1a0>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 800093e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000940:	b29b      	uxth	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	6979      	ldr	r1, [r7, #20]
 8000946:	4811      	ldr	r0, [pc, #68]	@ (800098c <fill_screen2+0x1a4>)
 8000948:	f006 f9fc 	bl	8006d44 <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 800094c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800094e:	3301      	adds	r3, #1
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	429a      	cmp	r2, r3
 8000958:	d3e8      	bcc.n	800092c <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 800095a:	bf00      	nop
 800095c:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <fill_screen2+0x1a0>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0fa      	beq.n	800095c <fill_screen2+0x174>
	CS_D();
 8000966:	2201      	movs	r2, #1
 8000968:	2110      	movs	r1, #16
 800096a:	4806      	ldr	r0, [pc, #24]	@ (8000984 <fill_screen2+0x19c>)
 800096c:	f004 f910 	bl	8004b90 <HAL_GPIO_WritePin>
 8000970:	46b5      	mov	sp, r6
}
 8000972:	bf00      	nop
 8000974:	3734      	adds	r7, #52	@ 0x34
 8000976:	46bd      	mov	sp, r7
 8000978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800097c:	84210843 	.word	0x84210843
 8000980:	82082083 	.word	0x82082083
 8000984:	40020c00 	.word	0x40020c00
 8000988:	20000328 	.word	0x20000328
 800098c:	20000180 	.word	0x20000180

08000990 <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b089      	sub	sp, #36	@ 0x24
 8000994:	af02      	add	r7, sp, #8
 8000996:	4604      	mov	r4, r0
 8000998:	4608      	mov	r0, r1
 800099a:	4611      	mov	r1, r2
 800099c:	461a      	mov	r2, r3
 800099e:	4623      	mov	r3, r4
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	4603      	mov	r3, r0
 80009a4:	80bb      	strh	r3, [r7, #4]
 80009a6:	460b      	mov	r3, r1
 80009a8:	70fb      	strb	r3, [r7, #3]
 80009aa:	4613      	mov	r3, r2
 80009ac:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 80009ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000a98 <print_character+0x108>)
 80009b0:	889a      	ldrh	r2, [r3, #4]
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	4413      	add	r3, r2
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	3b01      	subs	r3, #1
 80009ba:	b29c      	uxth	r4, r3
 80009bc:	4b36      	ldr	r3, [pc, #216]	@ (8000a98 <print_character+0x108>)
 80009be:	88da      	ldrh	r2, [r3, #6]
 80009c0:	88bb      	ldrh	r3, [r7, #4]
 80009c2:	4413      	add	r3, r2
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	3b01      	subs	r3, #1
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	88b9      	ldrh	r1, [r7, #4]
 80009cc:	88f8      	ldrh	r0, [r7, #6]
 80009ce:	2277      	movs	r2, #119	@ 0x77
 80009d0:	9200      	str	r2, [sp, #0]
 80009d2:	4622      	mov	r2, r4
 80009d4:	f000 ff68 	bl	80018a8 <set_adress_window>

	uint16_t mask = 0x8000;
 80009d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009dc:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 80009e2:	f107 020c 	add.w	r2, r7, #12
 80009e6:	883b      	ldrh	r3, [r7, #0]
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fde2 	bl	80005b4 <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 80009f0:	f107 0208 	add.w	r2, r7, #8
 80009f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fddb 	bl	80005b4 <convert_color_16_to_18>


	DC_DATA();
 80009fe:	2201      	movs	r2, #1
 8000a00:	2108      	movs	r1, #8
 8000a02:	4826      	ldr	r0, [pc, #152]	@ (8000a9c <print_character+0x10c>)
 8000a04:	f004 f8c4 	bl	8004b90 <HAL_GPIO_WritePin>
	CS_A();
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	4823      	ldr	r0, [pc, #140]	@ (8000a9c <print_character+0x10c>)
 8000a0e:	f004 f8bf 	bl	8004b90 <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	75fb      	strb	r3, [r7, #23]
 8000a16:	e030      	b.n	8000a7a <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <print_character+0x108>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	78fb      	ldrb	r3, [r7, #3]
 8000a1e:	3b20      	subs	r3, #32
 8000a20:	491d      	ldr	r1, [pc, #116]	@ (8000a98 <print_character+0x108>)
 8000a22:	88c9      	ldrh	r1, [r1, #6]
 8000a24:	fb03 f101 	mul.w	r1, r3, r1
 8000a28:	7dfb      	ldrb	r3, [r7, #23]
 8000a2a:	440b      	add	r3, r1
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	75bb      	strb	r3, [r7, #22]
 8000a38:	e016      	b.n	8000a68 <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 8000a3a:	8a7a      	ldrh	r2, [r7, #18]
 8000a3c:	7dbb      	ldrb	r3, [r7, #22]
 8000a3e:	409a      	lsls	r2, r3
 8000a40:	8abb      	ldrh	r3, [r7, #20]
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d006      	beq.n	8000a56 <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fd92 	bl	8001578 <LCD_send_data_multi>
 8000a54:	e005      	b.n	8000a62 <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	2103      	movs	r1, #3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fd8b 	bl	8001578 <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 8000a62:	7dbb      	ldrb	r3, [r7, #22]
 8000a64:	3301      	adds	r3, #1
 8000a66:	75bb      	strb	r3, [r7, #22]
 8000a68:	7dbb      	ldrb	r3, [r7, #22]
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <print_character+0x108>)
 8000a6e:	889b      	ldrh	r3, [r3, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3e2      	bcc.n	8000a3a <print_character+0xaa>
	for(i=0; i<font.height; i++)
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	3301      	adds	r3, #1
 8000a78:	75fb      	strb	r3, [r7, #23]
 8000a7a:	7dfb      	ldrb	r3, [r7, #23]
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <print_character+0x108>)
 8000a80:	88db      	ldrh	r3, [r3, #6]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d3c8      	bcc.n	8000a18 <print_character+0x88>
			}
		}
	}

	CS_D();
 8000a86:	2201      	movs	r2, #1
 8000a88:	2110      	movs	r1, #16
 8000a8a:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <print_character+0x10c>)
 8000a8c:	f004 f880 	bl	8004b90 <HAL_GPIO_WritePin>

}
 8000a90:	bf00      	nop
 8000a92:	371c      	adds	r7, #28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint8_t n, uint16_t fontColor, uint16_t backColor)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b089      	sub	sp, #36	@ 0x24
 8000aa4:	af02      	add	r7, sp, #8
 8000aa6:	60ba      	str	r2, [r7, #8]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4603      	mov	r3, r0
 8000aac:	81fb      	strh	r3, [r7, #14]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	81bb      	strh	r3, [r7, #12]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	71fb      	strb	r3, [r7, #7]

	char *temp = string;
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	617b      	str	r3, [r7, #20]

	while(string<(temp+n))
 8000aba:	e027      	b.n	8000b0c <print_string+0x6c>
	{
		if(x + font.width > 320)
 8000abc:	89fb      	ldrh	r3, [r7, #14]
 8000abe:	4a19      	ldr	r2, [pc, #100]	@ (8000b24 <print_string+0x84>)
 8000ac0:	8892      	ldrh	r2, [r2, #4]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ac8:	dd07      	ble.n	8000ada <print_string+0x3a>
		{
			x = font.width;
 8000aca:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <print_string+0x84>)
 8000acc:	889b      	ldrh	r3, [r3, #4]
 8000ace:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <print_string+0x84>)
 8000ad2:	88da      	ldrh	r2, [r3, #6]
 8000ad4:	89bb      	ldrh	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 8000ada:	89bb      	ldrh	r3, [r7, #12]
 8000adc:	4a11      	ldr	r2, [pc, #68]	@ (8000b24 <print_string+0x84>)
 8000ade:	88d2      	ldrh	r2, [r2, #6]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000ae6:	dc18      	bgt.n	8000b1a <print_string+0x7a>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000aee:	89b9      	ldrh	r1, [r7, #12]
 8000af0:	89f8      	ldrh	r0, [r7, #14]
 8000af2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	4623      	mov	r3, r4
 8000af8:	f7ff ff4a 	bl	8000990 <print_character>
		string++;
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	3301      	adds	r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <print_string+0x84>)
 8000b04:	889a      	ldrh	r2, [r3, #4]
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	4413      	add	r3, r2
 8000b0a:	81fb      	strh	r3, [r7, #14]
	while(string<(temp+n))
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	697a      	ldr	r2, [r7, #20]
 8000b10:	4413      	add	r3, r2
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d3d1      	bcc.n	8000abc <print_string+0x1c>
 8000b18:	e000      	b.n	8000b1c <print_string+0x7c>
			return;
 8000b1a:	bf00      	nop
	}

}
 8000b1c:	371c      	adds	r7, #28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000000 	.word	0x20000000

08000b28 <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	4604      	mov	r4, r0
 8000b30:	4608      	mov	r0, r1
 8000b32:	4611      	mov	r1, r2
 8000b34:	461a      	mov	r2, r3
 8000b36:	4623      	mov	r3, r4
 8000b38:	80fb      	strh	r3, [r7, #6]
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80bb      	strh	r3, [r7, #4]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	807b      	strh	r3, [r7, #2]
 8000b42:	4613      	mov	r3, r2
 8000b44:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8000b46:	88fa      	ldrh	r2, [r7, #6]
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	88bb      	ldrh	r3, [r7, #4]
 8000b56:	88b9      	ldrh	r1, [r7, #4]
 8000b58:	88f8      	ldrh	r0, [r7, #6]
 8000b5a:	2477      	movs	r4, #119	@ 0x77
 8000b5c:	9400      	str	r4, [sp, #0]
 8000b5e:	f000 fea3 	bl	80018a8 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000b62:	f107 0208 	add.w	r2, r7, #8
 8000b66:	883b      	ldrh	r3, [r7, #0]
 8000b68:	4611      	mov	r1, r2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fd22 	bl	80005b4 <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 8000b70:	2300      	movs	r3, #0
 8000b72:	81fb      	strh	r3, [r7, #14]
 8000b74:	e008      	b.n	8000b88 <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 fcfb 	bl	8001578 <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	3301      	adds	r3, #1
 8000b86:	81fb      	strh	r3, [r7, #14]
 8000b88:	89fa      	ldrh	r2, [r7, #14]
 8000b8a:	8879      	ldrh	r1, [r7, #2]
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	1acb      	subs	r3, r1, r3
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf0      	blt.n	8000b76 <draw_horizontal_line+0x4e>
	}


}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd90      	pop	{r4, r7, pc}

08000b9e <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000b9e:	b590      	push	{r4, r7, lr}
 8000ba0:	b087      	sub	sp, #28
 8000ba2:	af02      	add	r7, sp, #8
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	4608      	mov	r0, r1
 8000ba8:	4611      	mov	r1, r2
 8000baa:	461a      	mov	r2, r3
 8000bac:	4623      	mov	r3, r4
 8000bae:	80fb      	strh	r3, [r7, #6]
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	80bb      	strh	r3, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	807b      	strh	r3, [r7, #2]
 8000bb8:	4613      	mov	r3, r2
 8000bba:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 8000bbc:	88ba      	ldrh	r2, [r7, #4]
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	88fa      	ldrh	r2, [r7, #6]
 8000bcc:	88b9      	ldrh	r1, [r7, #4]
 8000bce:	88f8      	ldrh	r0, [r7, #6]
 8000bd0:	2477      	movs	r4, #119	@ 0x77
 8000bd2:	9400      	str	r4, [sp, #0]
 8000bd4:	f000 fe68 	bl	80018a8 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000bd8:	f107 0208 	add.w	r2, r7, #8
 8000bdc:	883b      	ldrh	r3, [r7, #0]
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fce7 	bl	80005b4 <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	81fb      	strh	r3, [r7, #14]
 8000bea:	e008      	b.n	8000bfe <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fcc0 	bl	8001578 <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8000bf8:	89fb      	ldrh	r3, [r7, #14]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	81fb      	strh	r3, [r7, #14]
 8000bfe:	89fa      	ldrh	r2, [r7, #14]
 8000c00:	8879      	ldrh	r1, [r7, #2]
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	1acb      	subs	r3, r1, r3
 8000c06:	429a      	cmp	r2, r3
 8000c08:	dbf0      	blt.n	8000bec <draw_vertical_line+0x4e>
	}


}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd90      	pop	{r4, r7, pc}

08000c14 <draw_rectangle>:


void draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b089      	sub	sp, #36	@ 0x24
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	4608      	mov	r0, r1
 8000c1e:	4611      	mov	r1, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	4623      	mov	r3, r4
 8000c24:	80fb      	strh	r3, [r7, #6]
 8000c26:	4603      	mov	r3, r0
 8000c28:	80bb      	strh	r3, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	807b      	strh	r3, [r7, #2]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */


	uint8_t pixel[3];
	uint16_t pixelNr = x1*y1;
 8000c32:	887a      	ldrh	r2, [r7, #2]
 8000c34:	883b      	ldrh	r3, [r7, #0]
 8000c36:	fb12 f303 	smulbb	r3, r2, r3
 8000c3a:	82bb      	strh	r3, [r7, #20]
	convert_color_16_to_18(color, pixel);
 8000c3c:	f107 020c 	add.w	r2, r7, #12
 8000c40:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fcb5 	bl	80005b4 <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*pixelNr);
 8000c4a:	8aba      	ldrh	r2, [r7, #20]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f00b fdc4 	bl	800c7e0 <malloc>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	613b      	str	r3, [r7, #16]

	for(uint16_t i=0; i<pixelNr; i++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	82fb      	strh	r3, [r7, #22]
 8000c60:	e00f      	b.n	8000c82 <draw_rectangle+0x6e>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000c62:	8afa      	ldrh	r2, [r7, #22]
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	8819      	ldrh	r1, [r3, #0]
 8000c76:	789b      	ldrb	r3, [r3, #2]
 8000c78:	8011      	strh	r1, [r2, #0]
 8000c7a:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<pixelNr; i++)
 8000c7c:	8afb      	ldrh	r3, [r7, #22]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	82fb      	strh	r3, [r7, #22]
 8000c82:	8afa      	ldrh	r2, [r7, #22]
 8000c84:	8abb      	ldrh	r3, [r7, #20]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d3eb      	bcc.n	8000c62 <draw_rectangle+0x4e>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 8000c8a:	88fa      	ldrh	r2, [r7, #6]
 8000c8c:	887b      	ldrh	r3, [r7, #2]
 8000c8e:	4413      	add	r3, r2
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	3b01      	subs	r3, #1
 8000c94:	b29c      	uxth	r4, r3
 8000c96:	88ba      	ldrh	r2, [r7, #4]
 8000c98:	883b      	ldrh	r3, [r7, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	88b9      	ldrh	r1, [r7, #4]
 8000ca4:	88f8      	ldrh	r0, [r7, #6]
 8000ca6:	2277      	movs	r2, #119	@ 0x77
 8000ca8:	9200      	str	r2, [sp, #0]
 8000caa:	4622      	mov	r2, r4
 8000cac:	f000 fdfc 	bl	80018a8 <set_adress_window>
	LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000cb0:	8aba      	ldrh	r2, [r7, #20]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	4413      	add	r3, r2
 8000cb8:	4619      	mov	r1, r3
 8000cba:	6938      	ldr	r0, [r7, #16]
 8000cbc:	f000 fc5c 	bl	8001578 <LCD_send_data_multi>

	free(data);
 8000cc0:	6938      	ldr	r0, [r7, #16]
 8000cc2:	f00b fd95 	bl	800c7f0 <free>

}
 8000cc6:	bf00      	nop
 8000cc8:	371c      	adds	r7, #28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd90      	pop	{r4, r7, pc}
	...

08000cd0 <draw_entity>:


void draw_entity(ENTITY *entity, char *filePathName)
{
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b089      	sub	sp, #36	@ 0x24
 8000cd4:	af02      	add	r7, sp, #8
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
	 * Feature: De dat ca parametru numele unui fisier ce contine datele imaginii
	 * de afisat si nu culoarea, parametrul color e doar de test
	 */

	uint8_t *data;
	bool flagImgDone = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]

	if((entity->id != 0) || (filePathName==NULL))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <draw_entity+0x1c>
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d163      	bne.n	8000db4 <draw_entity+0xe4>
	{
		/*Avem imagine monocolor sub 32x32 -> imagine nu se afla pe cardul SD!*/

		uint16_t pixelNr = (entity->x1)*(entity->y1);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	fb12 f303 	smulbb	r3, r2, r3
 8000d00:	82bb      	strh	r3, [r7, #20]

		uint8_t pixel[3];
		convert_color_16_to_18(entity->color, pixel);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	895b      	ldrh	r3, [r3, #10]
 8000d06:	f107 020c 	add.w	r2, r7, #12
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fc51 	bl	80005b4 <convert_color_16_to_18>

		data = malloc(sizeof(pixel)*pixelNr);
 8000d12:	8aba      	ldrh	r2, [r7, #20]
 8000d14:	4613      	mov	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f00b fd60 	bl	800c7e0 <malloc>
 8000d20:	4603      	mov	r3, r0
 8000d22:	613b      	str	r3, [r7, #16]

		for(uint16_t i=0;i<pixelNr;i++ )
 8000d24:	2300      	movs	r3, #0
 8000d26:	82fb      	strh	r3, [r7, #22]
 8000d28:	e00f      	b.n	8000d4a <draw_entity+0x7a>
		{
			memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000d2a:	8afa      	ldrh	r2, [r7, #22]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4413      	add	r3, r2
 8000d36:	461a      	mov	r2, r3
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	789b      	ldrb	r3, [r3, #2]
 8000d40:	8011      	strh	r1, [r2, #0]
 8000d42:	7093      	strb	r3, [r2, #2]
		for(uint16_t i=0;i<pixelNr;i++ )
 8000d44:	8afb      	ldrh	r3, [r7, #22]
 8000d46:	3301      	adds	r3, #1
 8000d48:	82fb      	strh	r3, [r7, #22]
 8000d4a:	8afa      	ldrh	r2, [r7, #22]
 8000d4c:	8abb      	ldrh	r3, [r7, #20]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d3eb      	bcc.n	8000d2a <draw_entity+0x5a>
		}

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d58:	b298      	uxth	r0, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d60:	b299      	uxth	r1, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	4413      	add	r3, r2
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	3b01      	subs	r3, #1
 8000d78:	b29c      	uxth	r4, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	4413      	add	r3, r2
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	2277      	movs	r2, #119	@ 0x77
 8000d94:	9200      	str	r2, [sp, #0]
 8000d96:	4622      	mov	r2, r4
 8000d98:	f000 fd86 	bl	80018a8 <set_adress_window>
		LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000d9c:	8aba      	ldrh	r2, [r7, #20]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	4619      	mov	r1, r3
 8000da6:	6938      	ldr	r0, [r7, #16]
 8000da8:	f000 fbe6 	bl	8001578 <LCD_send_data_multi>

		free(data);
 8000dac:	6938      	ldr	r0, [r7, #16]
 8000dae:	f00b fd1f 	bl	800c7f0 <free>
	{
 8000db2:	e084      	b.n	8000ebe <draw_entity+0x1ee>

	else
	{
		/*Imagine stocata in bufferul *data din cardul SD*/

		uint16_t byteNr = 0; /*index*/
 8000db4:	2300      	movs	r3, #0
 8000db6:	817b      	strh	r3, [r7, #10]

		read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8000db8:	f107 030f 	add.w	r3, r7, #15
 8000dbc:	f107 020a 	add.w	r2, r7, #10
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	6838      	ldr	r0, [r7, #0]
 8000dc4:	f001 fd52 	bl	800286c <read_image_file>

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dce:	b298      	uxth	r0, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dd6:	b299      	uxth	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	4413      	add	r3, r2
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	3b01      	subs	r3, #1
 8000dee:	b29c      	uxth	r4, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4413      	add	r3, r2
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	3b01      	subs	r3, #1
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	2277      	movs	r2, #119	@ 0x77
 8000e0a:	9200      	str	r2, [sp, #0]
 8000e0c:	4622      	mov	r2, r4
 8000e0e:	f000 fd4b 	bl	80018a8 <set_adress_window>

		DC_DATA();
 8000e12:	2201      	movs	r2, #1
 8000e14:	2108      	movs	r1, #8
 8000e16:	482b      	ldr	r0, [pc, #172]	@ (8000ec4 <draw_entity+0x1f4>)
 8000e18:	f003 feba 	bl	8004b90 <HAL_GPIO_WritePin>
		CS_A();
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2110      	movs	r1, #16
 8000e20:	4828      	ldr	r0, [pc, #160]	@ (8000ec4 <draw_entity+0x1f4>)
 8000e22:	f003 feb5 	bl	8004b90 <HAL_GPIO_WritePin>

		if(byteNr < 3072)
 8000e26:	897b      	ldrh	r3, [r7, #10]
 8000e28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000e2c:	d20c      	bcs.n	8000e48 <draw_entity+0x178>
		{
			/*
			 * Pentru cazul unui singur frame de transmis
			 */

			LCD_send_data_multi(entity->data, byteNr);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	897a      	ldrh	r2, [r7, #10]
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 fb9e 	bl	8001578 <LCD_send_data_multi>
			free(entity->data);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f00b fcd5 	bl	800c7f0 <free>
 8000e46:	e03a      	b.n	8000ebe <draw_entity+0x1ee>
		else
		{
			/*
			 * Pentru cazul mai multor frameuri
			 */
			flagDmaSpiTx = 0;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <draw_entity+0x1f8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]

			//LCD_send_data_multi(entity->data, byteNr);
			HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	897a      	ldrh	r2, [r7, #10]
 8000e54:	4619      	mov	r1, r3
 8000e56:	481d      	ldr	r0, [pc, #116]	@ (8000ecc <draw_entity+0x1fc>)
 8000e58:	f005 ff74 	bl	8006d44 <HAL_SPI_Transmit_DMA>

			do
			{
				if(flagImgDone == 1)
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d11c      	bne.n	8000e9c <draw_entity+0x1cc>
				{
					break;
				}

				read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8000e62:	f107 030f 	add.w	r3, r7, #15
 8000e66:	f107 020a 	add.w	r2, r7, #10
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	6838      	ldr	r0, [r7, #0]
 8000e6e:	f001 fcfd 	bl	800286c <read_image_file>

				while(flagDmaSpiTx == 0);
 8000e72:	bf00      	nop
 8000e74:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <draw_entity+0x1f8>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0fa      	beq.n	8000e74 <draw_entity+0x1a4>
				flagDmaSpiTx = 0;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <draw_entity+0x1f8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	897a      	ldrh	r2, [r7, #10]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480f      	ldr	r0, [pc, #60]	@ (8000ecc <draw_entity+0x1fc>)
 8000e8e:	f005 ff59 	bl	8006d44 <HAL_SPI_Transmit_DMA>

			}while(byteNr >= 3072);
 8000e92:	897b      	ldrh	r3, [r7, #10]
 8000e94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000e98:	d2e0      	bcs.n	8000e5c <draw_entity+0x18c>
 8000e9a:	e000      	b.n	8000e9e <draw_entity+0x1ce>
					break;
 8000e9c:	bf00      	nop

		}

		while(flagDmaSpiTx == 0);
 8000e9e:	bf00      	nop
 8000ea0:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <draw_entity+0x1f8>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0fa      	beq.n	8000ea0 <draw_entity+0x1d0>
		free(entity->data);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f00b fc9e 	bl	800c7f0 <free>
		CS_D();
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <draw_entity+0x1f4>)
 8000eba:	f003 fe69 	bl	8004b90 <HAL_GPIO_WritePin>

	}


}
 8000ebe:	371c      	adds	r7, #28
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd90      	pop	{r4, r7, pc}
 8000ec4:	40020c00 	.word	0x40020c00
 8000ec8:	20000328 	.word	0x20000328
 8000ecc:	20000180 	.word	0x20000180

08000ed0 <translation_entity>:



void translation_entity(ENTITY *const restrict entity, int16_t x, int16_t y, bool TurnOnStep)
{
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b08c      	sub	sp, #48	@ 0x30
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	4608      	mov	r0, r1
 8000eda:	4611      	mov	r1, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	4603      	mov	r3, r0
 8000ee0:	817b      	strh	r3, [r7, #10]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	813b      	strh	r3, [r7, #8]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	71fb      	strb	r3, [r7, #7]
	 * de afisat
	 * Momentan de rezumam la un exemplu simplu pentru a demonstra functionalitatea
	 */


	if(x<0 || x>LCD_Width || y<0 || y> LCD_Length)
 8000eea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f2c0 80e6 	blt.w	80010c0 <translation_entity+0x1f0>
 8000ef4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ef8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000efc:	f300 80e0 	bgt.w	80010c0 <translation_entity+0x1f0>
 8000f00:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f2c0 80db 	blt.w	80010c0 <translation_entity+0x1f0>
 8000f0a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f0e:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000f12:	f300 80d5 	bgt.w	80010c0 <translation_entity+0x1f0>

		return;
	}


	ENTITY temp = *entity;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f107 0414 	add.w	r4, r7, #20
 8000f1c:	461d      	mov	r5, r3
 8000f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f22:	682b      	ldr	r3, [r5, #0]
 8000f24:	6023      	str	r3, [r4, #0]

	entity->x0 = x;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	897a      	ldrh	r2, [r7, #10]
 8000f2a:	805a      	strh	r2, [r3, #2]
	entity->y0 = y;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	893a      	ldrh	r2, [r7, #8]
 8000f30:	809a      	strh	r2, [r3, #4]


	if((temp.y0 == y) && (TurnOnStep==1))
 8000f32:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f36:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d157      	bne.n	8000fee <translation_entity+0x11e>
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d054      	beq.n	8000fee <translation_entity+0x11e>
	{
		/*Pentru cazul unui Step cuprins in cadrul anterior pe axa x*/

		if((x < (temp.x0+temp.x1)) && (x > (temp.x0)))
 8000f44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f52:	440b      	add	r3, r1
 8000f54:	429a      	cmp	r2, r3
 8000f56:	da1d      	bge.n	8000f94 <translation_entity+0xc4>
 8000f58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f5c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dd17      	ble.n	8000f94 <translation_entity+0xc4>
		{
			/*Pentru cazul deplasarii pe +x*/
			draw_entity(entity, NULL);
 8000f64:	2100      	movs	r1, #0
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f7ff feb2 	bl	8000cd0 <draw_entity>
			draw_rectangle(temp.x0, temp.y0, x-temp.x0, temp.y1, 0xFFFF); /*Culoare background*/
 8000f6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f70:	b298      	uxth	r0, r3
 8000f72:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f76:	b299      	uxth	r1, r3
 8000f78:	897a      	ldrh	r2, [r7, #10]
 8000f7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8000f8e:	9400      	str	r4, [sp, #0]
 8000f90:	f7ff fe40 	bl	8000c14 <draw_rectangle>
		}

		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000f94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f98:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	f280 8091 	bge.w	80010c4 <translation_entity+0x1f4>
 8000fa2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fa6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8000faa:	4413      	add	r3, r2
 8000fac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	f340 8087 	ble.w	80010c4 <translation_entity+0x1f4>
		{
			/*Pentru cazul deplasarii pe -x*/
			draw_entity(entity, NULL);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f7ff fe89 	bl	8000cd0 <draw_entity>
			draw_rectangle(temp.x0+temp.x1-(temp.x0-x), temp.y0, temp.x0-x, temp.y1, 0xFFFF); /*Culoare background*/
 8000fbe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	897b      	ldrh	r3, [r7, #10]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b298      	uxth	r0, r3
 8000fca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fce:	b299      	uxth	r1, r3
 8000fd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	897b      	ldrh	r3, [r7, #10]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8000fe6:	9400      	str	r4, [sp, #0]
 8000fe8:	f7ff fe14 	bl	8000c14 <draw_rectangle>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000fec:	e06a      	b.n	80010c4 <translation_entity+0x1f4>

	}

	else

		if((temp.x0==x) && (TurnOnStep==1))
 8000fee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ff2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d157      	bne.n	80010aa <translation_entity+0x1da>
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d054      	beq.n	80010aa <translation_entity+0x1da>
		{
			if((y < (temp.y0+temp.y1)) && (y > (temp.y0)))
 8001000:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001004:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001008:	4619      	mov	r1, r3
 800100a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800100e:	440b      	add	r3, r1
 8001010:	429a      	cmp	r2, r3
 8001012:	da1e      	bge.n	8001052 <translation_entity+0x182>
 8001014:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001018:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800101c:	429a      	cmp	r2, r3
 800101e:	dd18      	ble.n	8001052 <translation_entity+0x182>
			{
				/*Pentru cazul deplasarii pe +y*/
				draw_entity(entity, NULL);
 8001020:	2100      	movs	r1, #0
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f7ff fe54 	bl	8000cd0 <draw_entity>
				draw_rectangle(temp.x0, temp.y0, temp.x1, y-temp.y0, 0xFFFF);
 8001028:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800102c:	b298      	uxth	r0, r3
 800102e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001032:	b299      	uxth	r1, r3
 8001034:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001038:	b29c      	uxth	r4, r3
 800103a:	893a      	ldrh	r2, [r7, #8]
 800103c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001040:	b29b      	uxth	r3, r3
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	b29b      	uxth	r3, r3
 8001046:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800104a:	9200      	str	r2, [sp, #0]
 800104c:	4622      	mov	r2, r4
 800104e:	f7ff fde1 	bl	8000c14 <draw_rectangle>
			}

			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001052:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001056:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800105a:	429a      	cmp	r2, r3
 800105c:	da34      	bge.n	80010c8 <translation_entity+0x1f8>
 800105e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001062:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001066:	4413      	add	r3, r2
 8001068:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800106c:	4293      	cmp	r3, r2
 800106e:	dd2b      	ble.n	80010c8 <translation_entity+0x1f8>
			{
				/*Pentru cazul deplasarii pe -y*/
				draw_entity(entity, NULL);
 8001070:	2100      	movs	r1, #0
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f7ff fe2c 	bl	8000cd0 <draw_entity>
				draw_rectangle(temp.x0, temp.y0+temp.y1-(temp.y0-y), temp.x1, temp.y0-y, 0xFFFF);
 8001078:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800107c:	b298      	uxth	r0, r3
 800107e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001082:	b29a      	uxth	r2, r3
 8001084:	893b      	ldrh	r3, [r7, #8]
 8001086:	4413      	add	r3, r2
 8001088:	b299      	uxth	r1, r3
 800108a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800108e:	b29c      	uxth	r4, r3
 8001090:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001094:	b29a      	uxth	r2, r3
 8001096:	893b      	ldrh	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010a0:	9200      	str	r2, [sp, #0]
 80010a2:	4622      	mov	r2, r4
 80010a4:	f7ff fdb6 	bl	8000c14 <draw_rectangle>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 80010a8:	e00e      	b.n	80010c8 <translation_entity+0x1f8>

		else
		{
			/*Pentru orice alt caz (deplasare pe diagonala sau aleatoriu)*/

			draw_entity(entity, NULL);
 80010aa:	2100      	movs	r1, #0
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f7ff fe0f 	bl	8000cd0 <draw_entity>
			draw_entity(&temp, NULL);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fe09 	bl	8000cd0 <draw_entity>
 80010be:	e004      	b.n	80010ca <translation_entity+0x1fa>
		return;
 80010c0:	bf00      	nop
 80010c2:	e002      	b.n	80010ca <translation_entity+0x1fa>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 80010c4:	bf00      	nop
 80010c6:	e000      	b.n	80010ca <translation_entity+0x1fa>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 80010c8:	bf00      	nop
		}


}
 80010ca:	3728      	adds	r7, #40	@ 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bdb0      	pop	{r4, r5, r7, pc}

080010d0 <scaling_entity>:
	}
}


void scaling_entity(ENTITY *entity, const float factor, char *filePathName, char *fileName)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b093      	sub	sp, #76	@ 0x4c
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80010dc:	6079      	str	r1, [r7, #4]
 80010de:	603a      	str	r2, [r7, #0]
	 * de scalat
	 */

	FRESULT res;
	char *scalFilePath;
	char *tempFile = "graphic/scalare/temp.bin";
 80010e0:	4baa      	ldr	r3, [pc, #680]	@ (800138c <scaling_entity+0x2bc>)
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	scalFilePath = assign_filePath("graphic/scalare/");
 80010e4:	48aa      	ldr	r0, [pc, #680]	@ (8001390 <scaling_entity+0x2c0>)
 80010e6:	f001 fa64 	bl	80025b2 <assign_filePath>
 80010ea:	62b8      	str	r0, [r7, #40]	@ 0x28
	scalFilePath = realloc(scalFilePath, strlen(scalFilePath)+ strlen(fileName) +1 );
 80010ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80010ee:	f7ff f86b 	bl	80001c8 <strlen>
 80010f2:	4604      	mov	r4, r0
 80010f4:	6838      	ldr	r0, [r7, #0]
 80010f6:	f7ff f867 	bl	80001c8 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4423      	add	r3, r4
 80010fe:	3301      	adds	r3, #1
 8001100:	4619      	mov	r1, r3
 8001102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001104:	f00b fc2a 	bl	800c95c <realloc>
 8001108:	62b8      	str	r0, [r7, #40]	@ 0x28
	strcat(scalFilePath, fileName);
 800110a:	6839      	ldr	r1, [r7, #0]
 800110c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800110e:	f00b fc63 	bl	800c9d8 <strcat>

	uint16_t x = 0; /*nr d elinii de prelucrat din M1 ai sa avem 32x32 pixeli de prelucrat in M2*/
 8001112:	2300      	movs	r3, #0
 8001114:	827b      	strh	r3, [r7, #18]
	bool flagTerm = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	747b      	strb	r3, [r7, #17]

	int i = 0; /*indexi de referinta in M2*/
 800111a:	2300      	movs	r3, #0
 800111c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int j = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	63bb      	str	r3, [r7, #56]	@ 0x38
	int ik = 0; /*indexi de referinta in M1*/
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
	int jk = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]

	bool flagPixel = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37


	uint8_t *data = malloc(sizeof(uint8_t)*3072);
 8001130:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8001134:	f00b fb54 	bl	800c7e0 <malloc>
 8001138:	4603      	mov	r3, r0
 800113a:	61fb      	str	r3, [r7, #28]
	int16_t x1 = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	837b      	strh	r3, [r7, #26]
	int16_t y1 = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	833b      	strh	r3, [r7, #24]
	int16_t index = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	82fb      	strh	r3, [r7, #22]

	x1 = (int16_t)((entity->x1)*factor);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001156:	edd7 7a02 	vldr	s15, [r7, #8]
 800115a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001162:	ee17 3a90 	vmov	r3, s15
 8001166:	837b      	strh	r3, [r7, #26]
	y1 = (int16_t)((entity->y1)*factor);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001176:	edd7 7a02 	vldr	s15, [r7, #8]
 800117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001182:	ee17 3a90 	vmov	r3, s15
 8001186:	833b      	strh	r3, [r7, #24]



	while(!flagTerm)
 8001188:	e0d1      	b.n	800132e <scaling_entity+0x25e>
	{
		read_image_file_scaling(filePathName, entity, factor, &x, &flagTerm);
 800118a:	f107 0311 	add.w	r3, r7, #17
 800118e:	f107 0212 	add.w	r2, r7, #18
 8001192:	ed97 0a02 	vldr	s0, [r7, #8]
 8001196:	68f9      	ldr	r1, [r7, #12]
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f001 fdd7 	bl	8002d4c <read_image_file_scaling>

		i = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
		j = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	63bb      	str	r3, [r7, #56]	@ 0x38

		ik = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
		jk = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]

		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80011b2:	e07d      	b.n	80012b0 <scaling_entity+0x1e0>
		{
			/*
			 * Parcurgem frameul asociat matricei scalate M2
			 */

			if((k%(x1*3)==0) && (k!=0))
 80011b4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	441a      	add	r2, r3
 80011be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011c0:	fb93 f1f2 	sdiv	r1, r3, r2
 80011c4:	fb01 f202 	mul.w	r2, r1, r2
 80011c8:	1a9b      	subs	r3, r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d107      	bne.n	80011de <scaling_entity+0x10e>
 80011ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d004      	beq.n	80011de <scaling_entity+0x10e>
			{
				/*
				 * new line
				 */

				i++;
 80011d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011d6:	3301      	adds	r3, #1
 80011d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
				j = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			if(k%3 == 0)
 80011de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80011e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001394 <scaling_entity+0x2c4>)
 80011e2:	fb83 3201 	smull	r3, r2, r3, r1
 80011e6:	17cb      	asrs	r3, r1, #31
 80011e8:	1ad2      	subs	r2, r2, r3
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	1aca      	subs	r2, r1, r3
 80011f2:	2a00      	cmp	r2, #0
 80011f4:	d102      	bne.n	80011fc <scaling_entity+0x12c>
			{
				flagPixel = 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			}

			if(flagPixel == 1)
 80011fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001200:	2b00      	cmp	r3, #0
 8001202:	d052      	beq.n	80012aa <scaling_entity+0x1da>
			{
				ik = (int)i/factor;
 8001204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800120e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121a:	ee17 3a90 	vmov	r3, s15
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
				jk = (int)j/factor;
 8001220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800122a:	ed97 7a02 	vldr	s14, [r7, #8]
 800122e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001236:	ee17 3a90 	vmov	r3, s15
 800123a:	623b      	str	r3, [r7, #32]

				index = ik*(entity->x1)*3 + jk*3; /*index normat la M1*/
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001242:	461a      	mov	r2, r3
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	fb03 f202 	mul.w	r2, r3, r2
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	4413      	add	r3, r2
 800124e:	b29b      	uxth	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	0052      	lsls	r2, r2, #1
 8001254:	4413      	add	r3, r2
 8001256:	b29b      	uxth	r3, r3
 8001258:	82fb      	strh	r3, [r7, #22]

				data[k] = entity->data[index];
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001262:	441a      	add	r2, r3
 8001264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001266:	69f9      	ldr	r1, [r7, #28]
 8001268:	440b      	add	r3, r1
 800126a:	7812      	ldrb	r2, [r2, #0]
 800126c:	701a      	strb	r2, [r3, #0]
				data[k+1] = entity->data[index + 1];
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001276:	3301      	adds	r3, #1
 8001278:	441a      	add	r2, r3
 800127a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800127c:	3301      	adds	r3, #1
 800127e:	69f9      	ldr	r1, [r7, #28]
 8001280:	440b      	add	r3, r1
 8001282:	7812      	ldrb	r2, [r2, #0]
 8001284:	701a      	strb	r2, [r3, #0]
				data[k+2] = entity->data[index + 2];
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800128e:	3302      	adds	r3, #2
 8001290:	441a      	add	r2, r3
 8001292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001294:	3302      	adds	r3, #2
 8001296:	69f9      	ldr	r1, [r7, #28]
 8001298:	440b      	add	r3, r1
 800129a:	7812      	ldrb	r2, [r2, #0]
 800129c:	701a      	strb	r2, [r3, #0]

				j++;
 800129e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012a0:	3301      	adds	r3, #1
 80012a2:	63bb      	str	r3, [r7, #56]	@ 0x38
				flagPixel = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 80012aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ac:	3301      	adds	r3, #1
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80012b0:	8a7b      	ldrh	r3, [r7, #18]
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80012be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80012d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012de:	ee17 2a90 	vmov	r2, s15
 80012e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012e4:	4293      	cmp	r3, r2
 80012e6:	f6ff af65 	blt.w	80011b4 <scaling_entity+0xe4>
		/*
		 * Scriem in fisier datele obitnute din frame-ul curent in fisiserul aferent.
		 * Fisiserul va fi salvat in folderul de scalare
		 */

		write_image_file(tempFile, data, (int)(x1*factor)*x*3, x1, y1, flagTerm);
 80012ea:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	ee17 2a90 	vmov	r2, s15
 8001306:	8a7b      	ldrh	r3, [r7, #18]
 8001308:	fb03 f202 	mul.w	r2, r3, r2
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	4619      	mov	r1, r3
 8001314:	7c7b      	ldrb	r3, [r7, #17]
 8001316:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	4613      	mov	r3, r2
 8001324:	460a      	mov	r2, r1
 8001326:	69f9      	ldr	r1, [r7, #28]
 8001328:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800132a:	f001 ff0d 	bl	8003148 <write_image_file>
	while(!flagTerm)
 800132e:	7c7b      	ldrb	r3, [r7, #17]
 8001330:	f083 0301 	eor.w	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	f47f af27 	bne.w	800118a <scaling_entity+0xba>
	 * renumind fisiserul tempFile in care ne-am scris datele din temp.bin in
	 * numele aferent acestuia stocat in scalFilePath
	 */


	res = f_unlink(scalFilePath);
 800133c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800133e:	f00b f84e 	bl	800c3de <f_unlink>
 8001342:	4603      	mov	r3, r0
 8001344:	757b      	strb	r3, [r7, #21]

	if((res != FR_OK) && (res != FR_NO_FILE))
 8001346:	7d7b      	ldrb	r3, [r7, #21]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <scaling_entity+0x282>
 800134c:	7d7b      	ldrb	r3, [r7, #21]
 800134e:	2b04      	cmp	r3, #4
 8001350:	d115      	bne.n	800137e <scaling_entity+0x2ae>
	{
		return;
	}

	res = f_rename(tempFile, scalFilePath);
 8001352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001354:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001356:	f00b f8ed 	bl	800c534 <f_rename>
 800135a:	4603      	mov	r3, r0
 800135c:	757b      	strb	r3, [r7, #21]

	if(res != FR_OK)
 800135e:	7d7b      	ldrb	r3, [r7, #21]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10e      	bne.n	8001382 <scaling_entity+0x2b2>
	 * Atribuim noile valori entitatii prelucrate
	 */

	//free(entity->filePathName);

	entity->x1=x1;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	8b7a      	ldrh	r2, [r7, #26]
 8001368:	80da      	strh	r2, [r3, #6]
	entity->y1=y1;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8b3a      	ldrh	r2, [r7, #24]
 800136e:	811a      	strh	r2, [r3, #8]
	entity->filePathName = scalFilePath;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001374:	611a      	str	r2, [r3, #16]

	free(data);
 8001376:	69f8      	ldr	r0, [r7, #28]
 8001378:	f00b fa3a 	bl	800c7f0 <free>
 800137c:	e002      	b.n	8001384 <scaling_entity+0x2b4>
		return;
 800137e:	bf00      	nop
 8001380:	e000      	b.n	8001384 <scaling_entity+0x2b4>
		return;
 8001382:	bf00      	nop
	//free(entity->data);

}
 8001384:	3744      	adds	r7, #68	@ 0x44
 8001386:	46bd      	mov	sp, r7
 8001388:	bd90      	pop	{r4, r7, pc}
 800138a:	bf00      	nop
 800138c:	0800cb48 	.word	0x0800cb48
 8001390:	0800cb64 	.word	0x0800cb64
 8001394:	55555556 	.word	0x55555556

08001398 <rotate_entity>:


void rotate_entity(ENTITY *entity, int theta)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	 * Output: Void
	 */

	/*Aflam initial coordonatele pivotului de referinta*/

	const int16_t pivotX = entity->x0 + (int16_t)(entity->x1/2);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013b0:	0fd9      	lsrs	r1, r3, #31
 80013b2:	440b      	add	r3, r1
 80013b4:	105b      	asrs	r3, r3, #1
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	b29b      	uxth	r3, r3
 80013be:	82fb      	strh	r3, [r7, #22]
	const int16_t pivotY = entity->y0 + (int16_t)(entity->y1/2);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013ce:	0fd9      	lsrs	r1, r3, #31
 80013d0:	440b      	add	r3, r1
 80013d2:	105b      	asrs	r3, r3, #1
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4413      	add	r3, r2
 80013da:	b29b      	uxth	r3, r3
 80013dc:	82bb      	strh	r3, [r7, #20]

	int16_t i = (int16_t)(-(entity->y1/2));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013e4:	0fda      	lsrs	r2, r3, #31
 80013e6:	4413      	add	r3, r2
 80013e8:	105b      	asrs	r3, r3, #1
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	425b      	negs	r3, r3
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	83fb      	strh	r3, [r7, #30]
	int16_t j = (int16_t)(-(entity->x1/2));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013fa:	0fda      	lsrs	r2, r3, #31
 80013fc:	4413      	add	r3, r2
 80013fe:	105b      	asrs	r3, r3, #1
 8001400:	b21b      	sxth	r3, r3
 8001402:	b29b      	uxth	r3, r3
 8001404:	425b      	negs	r3, r3
 8001406:	b29b      	uxth	r3, r3
 8001408:	83bb      	strh	r3, [r7, #28]

	int16_t rotPosX = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	827b      	strh	r3, [r7, #18]
	int16_t rotPosY = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	823b      	strh	r3, [r7, #16]

	bool flagImgDone = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
	bool flagPixel = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	76fb      	strb	r3, [r7, #27]
	uint16_t byteNr = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	81bb      	strh	r3, [r7, #12]

	uint8_t pixel[3];


	while(!flagImgDone)
 800141e:	e075      	b.n	800150c <rotate_entity+0x174>
	{
		read_image_file(entity->filePathName, entity, &byteNr, &flagImgDone);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6918      	ldr	r0, [r3, #16]
 8001424:	f107 030f 	add.w	r3, r7, #15
 8001428:	f107 020c 	add.w	r2, r7, #12
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	f001 fa1d 	bl	800286c <read_image_file>


		for(int16_t k = 0; k<byteNr; k++)
 8001432:	2300      	movs	r3, #0
 8001434:	833b      	strh	r3, [r7, #24]
 8001436:	e064      	b.n	8001502 <rotate_entity+0x16a>
		{
			if(j == (entity->x1/2))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800143e:	0fda      	lsrs	r2, r3, #31
 8001440:	4413      	add	r3, r2
 8001442:	105b      	asrs	r3, r3, #1
 8001444:	b21b      	sxth	r3, r3
 8001446:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800144a:	429a      	cmp	r2, r3
 800144c:	d110      	bne.n	8001470 <rotate_entity+0xd8>
			{
				i++;
 800144e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001452:	b29b      	uxth	r3, r3
 8001454:	3301      	adds	r3, #1
 8001456:	b29b      	uxth	r3, r3
 8001458:	83fb      	strh	r3, [r7, #30]
				j = (int16_t)(-(entity->x1/2));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001460:	0fda      	lsrs	r2, r3, #31
 8001462:	4413      	add	r3, r2
 8001464:	105b      	asrs	r3, r3, #1
 8001466:	b21b      	sxth	r3, r3
 8001468:	b29b      	uxth	r3, r3
 800146a:	425b      	negs	r3, r3
 800146c:	b29b      	uxth	r3, r3
 800146e:	83bb      	strh	r3, [r7, #28]

			}

			if(k%3 == 0)
 8001470:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001474:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <rotate_entity+0x194>)
 8001476:	fb83 3102 	smull	r3, r1, r3, r2
 800147a:	17d3      	asrs	r3, r2, #31
 800147c:	1ac9      	subs	r1, r1, r3
 800147e:	460b      	mov	r3, r1
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	440b      	add	r3, r1
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	b21b      	sxth	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <rotate_entity+0xf8>
			{
				flagPixel = 1;
 800148c:	2301      	movs	r3, #1
 800148e:	76fb      	strb	r3, [r7, #27]
			}

			if(flagPixel == 1)
 8001490:	7efb      	ldrb	r3, [r7, #27]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d02f      	beq.n	80014f6 <rotate_entity+0x15e>
			{
				pixel[0] = entity->data[k];
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800149e:	4413      	add	r3, r2
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	723b      	strb	r3, [r7, #8]
				pixel[1] = entity->data[k+1];
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014ac:	3301      	adds	r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	727b      	strb	r3, [r7, #9]
				pixel[2] = entity->data[k+2];
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014bc:	3302      	adds	r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	72bb      	strb	r3, [r7, #10]

				/*Test pentru 90 de grade*/

				rotPosX = -i + pivotX;
 80014c4:	8afa      	ldrh	r2, [r7, #22]
 80014c6:	8bfb      	ldrh	r3, [r7, #30]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	827b      	strh	r3, [r7, #18]
				rotPosY =  j + pivotY;
 80014ce:	8bba      	ldrh	r2, [r7, #28]
 80014d0:	8abb      	ldrh	r3, [r7, #20]
 80014d2:	4413      	add	r3, r2
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	823b      	strh	r3, [r7, #16]

				draw_pixel_data(rotPosX, rotPosY, pixel);
 80014d8:	8a7b      	ldrh	r3, [r7, #18]
 80014da:	8a39      	ldrh	r1, [r7, #16]
 80014dc:	f107 0208 	add.w	r2, r7, #8
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f8f3 	bl	80006cc <draw_pixel_data>

				j++;
 80014e6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3301      	adds	r3, #1
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	83bb      	strh	r3, [r7, #28]
				flagPixel = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	76fb      	strb	r3, [r7, #27]
		for(int16_t k = 0; k<byteNr; k++)
 80014f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	b29b      	uxth	r3, r3
 8001500:	833b      	strh	r3, [r7, #24]
 8001502:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001506:	89ba      	ldrh	r2, [r7, #12]
 8001508:	4293      	cmp	r3, r2
 800150a:	db95      	blt.n	8001438 <rotate_entity+0xa0>
	while(!flagImgDone)
 800150c:	7bfb      	ldrb	r3, [r7, #15]
 800150e:	f083 0301 	eor.w	r3, r3, #1
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d183      	bne.n	8001420 <rotate_entity+0x88>

		}
	}


	free(entity->data);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4618      	mov	r0, r3
 800151e:	f00b f967 	bl	800c7f0 <free>

}
 8001522:	bf00      	nop
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	55555556 	.word	0x55555556

08001530 <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 800153a:	2200      	movs	r2, #0
 800153c:	2108      	movs	r1, #8
 800153e:	480c      	ldr	r0, [pc, #48]	@ (8001570 <LCD_send_command+0x40>)
 8001540:	f003 fb26 	bl	8004b90 <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8001544:	2200      	movs	r2, #0
 8001546:	2110      	movs	r1, #16
 8001548:	4809      	ldr	r0, [pc, #36]	@ (8001570 <LCD_send_command+0x40>)
 800154a:	f003 fb21 	bl	8004b90 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 800154e:	1df9      	adds	r1, r7, #7
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	2201      	movs	r2, #1
 8001556:	4807      	ldr	r0, [pc, #28]	@ (8001574 <LCD_send_command+0x44>)
 8001558:	f004 ffed 	bl	8006536 <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 800155c:	2201      	movs	r2, #1
 800155e:	2110      	movs	r1, #16
 8001560:	4803      	ldr	r0, [pc, #12]	@ (8001570 <LCD_send_command+0x40>)
 8001562:	f003 fb15 	bl	8004b90 <HAL_GPIO_WritePin>


}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40020c00 	.word	0x40020c00
 8001574:	20000180 	.word	0x20000180

08001578 <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 8001582:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <LCD_send_data_multi+0xdc>)
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 8001588:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800158c:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	fbb3 f2f2 	udiv	r2, r3, r2
 80015a0:	6939      	ldr	r1, [r7, #16]
 80015a2:	fb01 f202 	mul.w	r2, r1, r2
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 80015aa:	2201      	movs	r2, #1
 80015ac:	2108      	movs	r1, #8
 80015ae:	482a      	ldr	r0, [pc, #168]	@ (8001658 <LCD_send_data_multi+0xe0>)
 80015b0:	f003 faee 	bl	8004b90 <HAL_GPIO_WritePin>
	CS_A();
 80015b4:	2200      	movs	r2, #0
 80015b6:	2110      	movs	r1, #16
 80015b8:	4827      	ldr	r0, [pc, #156]	@ (8001658 <LCD_send_data_multi+0xe0>)
 80015ba:	f003 fae9 	bl	8004b90 <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d821      	bhi.n	800160a <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 80015c6:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <LCD_send_data_multi+0xdc>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	4821      	ldr	r0, [pc, #132]	@ (800165c <LCD_send_data_multi+0xe4>)
 80015d6:	f005 fbb5 	bl	8006d44 <HAL_SPI_Transmit_DMA>
 80015da:	e02c      	b.n	8001636 <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 80015dc:	bf00      	nop
 80015de:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <LCD_send_data_multi+0xdc>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0fa      	beq.n	80015de <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <LCD_send_data_multi+0xdc>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4819      	ldr	r0, [pc, #100]	@ (800165c <LCD_send_data_multi+0xe4>)
 80015f8:	f005 fba4 	bl	8006d44 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4413      	add	r3, r2
 8001602:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3b01      	subs	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1e5      	bne.n	80015dc <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00f      	beq.n	8001636 <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 8001616:	bf00      	nop
 8001618:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <LCD_send_data_multi+0xdc>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0fa      	beq.n	8001618 <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 8001622:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <LCD_send_data_multi+0xdc>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	b29b      	uxth	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	480a      	ldr	r0, [pc, #40]	@ (800165c <LCD_send_data_multi+0xe4>)
 8001632:	f005 fb87 	bl	8006d44 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 8001636:	bf00      	nop
 8001638:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <LCD_send_data_multi+0xdc>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0fa      	beq.n	8001638 <LCD_send_data_multi+0xc0>
	CS_D();
 8001642:	2201      	movs	r2, #1
 8001644:	2110      	movs	r1, #16
 8001646:	4804      	ldr	r0, [pc, #16]	@ (8001658 <LCD_send_data_multi+0xe0>)
 8001648:	f003 faa2 	bl	8004b90 <HAL_GPIO_WritePin>

}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000328 	.word	0x20000328
 8001658:	40020c00 	.word	0x40020c00
 800165c:	20000180 	.word	0x20000180

08001660 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 800166a:	2201      	movs	r2, #1
 800166c:	2108      	movs	r1, #8
 800166e:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <LCD_send_data+0x40>)
 8001670:	f003 fa8e 	bl	8004b90 <HAL_GPIO_WritePin>
	CS_A();
 8001674:	2200      	movs	r2, #0
 8001676:	2110      	movs	r1, #16
 8001678:	4809      	ldr	r0, [pc, #36]	@ (80016a0 <LCD_send_data+0x40>)
 800167a:	f003 fa89 	bl	8004b90 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 800167e:	1df9      	adds	r1, r7, #7
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	2201      	movs	r2, #1
 8001686:	4807      	ldr	r0, [pc, #28]	@ (80016a4 <LCD_send_data+0x44>)
 8001688:	f004 ff55 	bl	8006536 <HAL_SPI_Transmit>

	CS_D();
 800168c:	2201      	movs	r2, #1
 800168e:	2110      	movs	r1, #16
 8001690:	4803      	ldr	r0, [pc, #12]	@ (80016a0 <LCD_send_data+0x40>)
 8001692:	f003 fa7d 	bl	8004b90 <HAL_GPIO_WritePin>

}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	20000180 	.word	0x20000180

080016a8 <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 80016ac:	2200      	movs	r2, #0
 80016ae:	2140      	movs	r1, #64	@ 0x40
 80016b0:	487c      	ldr	r0, [pc, #496]	@ (80018a4 <ILI9488_driver_init+0x1fc>)
 80016b2:	f003 fa6d 	bl	8004b90 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80016b6:	200a      	movs	r0, #10
 80016b8:	f002 f96e 	bl	8003998 <HAL_Delay>
	RST_D();
 80016bc:	2201      	movs	r2, #1
 80016be:	2140      	movs	r1, #64	@ 0x40
 80016c0:	4878      	ldr	r0, [pc, #480]	@ (80018a4 <ILI9488_driver_init+0x1fc>)
 80016c2:	f003 fa65 	bl	8004b90 <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 80016c6:	2001      	movs	r0, #1
 80016c8:	f7ff ff32 	bl	8001530 <LCD_send_command>
	HAL_Delay(150);
 80016cc:	2096      	movs	r0, #150	@ 0x96
 80016ce:	f002 f963 	bl	8003998 <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 80016d2:	2011      	movs	r0, #17
 80016d4:	f7ff ff2c 	bl	8001530 <LCD_send_command>
	HAL_Delay(255);
 80016d8:	20ff      	movs	r0, #255	@ 0xff
 80016da:	f002 f95d 	bl	8003998 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 80016de:	20e0      	movs	r0, #224	@ 0xe0
 80016e0:	f7ff ff26 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff ffbb 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0C);
 80016ea:	200c      	movs	r0, #12
 80016ec:	f7ff ffb8 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x05);
 80016f0:	2005      	movs	r0, #5
 80016f2:	f7ff ffb5 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x04);
 80016f6:	2004      	movs	r0, #4
 80016f8:	f7ff ffb2 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0F);
 80016fc:	200f      	movs	r0, #15
 80016fe:	f7ff ffaf 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x06);
 8001702:	2006      	movs	r0, #6
 8001704:	f7ff ffac 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x3A);
 8001708:	203a      	movs	r0, #58	@ 0x3a
 800170a:	f7ff ffa9 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x56);
 800170e:	2056      	movs	r0, #86	@ 0x56
 8001710:	f7ff ffa6 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x4D);
 8001714:	204d      	movs	r0, #77	@ 0x4d
 8001716:	f7ff ffa3 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x03);
 800171a:	2003      	movs	r0, #3
 800171c:	f7ff ffa0 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0A);
 8001720:	200a      	movs	r0, #10
 8001722:	f7ff ff9d 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x06);
 8001726:	2006      	movs	r0, #6
 8001728:	f7ff ff9a 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x30);
 800172c:	2030      	movs	r0, #48	@ 0x30
 800172e:	f7ff ff97 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x3E);
 8001732:	203e      	movs	r0, #62	@ 0x3e
 8001734:	f7ff ff94 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0F);
 8001738:	200f      	movs	r0, #15
 800173a:	f7ff ff91 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 800173e:	20e1      	movs	r0, #225	@ 0xe1
 8001740:	f7ff fef6 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x00);
 8001744:	2000      	movs	r0, #0
 8001746:	f7ff ff8b 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x13);
 800174a:	2013      	movs	r0, #19
 800174c:	f7ff ff88 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x18);
 8001750:	2018      	movs	r0, #24
 8001752:	f7ff ff85 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x01);
 8001756:	2001      	movs	r0, #1
 8001758:	f7ff ff82 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x11);
 800175c:	2011      	movs	r0, #17
 800175e:	f7ff ff7f 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x06);
 8001762:	2006      	movs	r0, #6
 8001764:	f7ff ff7c 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x38);
 8001768:	2038      	movs	r0, #56	@ 0x38
 800176a:	f7ff ff79 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x34);
 800176e:	2034      	movs	r0, #52	@ 0x34
 8001770:	f7ff ff76 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x4D);
 8001774:	204d      	movs	r0, #77	@ 0x4d
 8001776:	f7ff ff73 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x06);
 800177a:	2006      	movs	r0, #6
 800177c:	f7ff ff70 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0D);
 8001780:	200d      	movs	r0, #13
 8001782:	f7ff ff6d 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0B);
 8001786:	200b      	movs	r0, #11
 8001788:	f7ff ff6a 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x31);
 800178c:	2031      	movs	r0, #49	@ 0x31
 800178e:	f7ff ff67 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x37);
 8001792:	2037      	movs	r0, #55	@ 0x37
 8001794:	f7ff ff64 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0F);
 8001798:	200f      	movs	r0, #15
 800179a:	f7ff ff61 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 800179e:	20c0      	movs	r0, #192	@ 0xc0
 80017a0:	f7ff fec6 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x18);
 80017a4:	2018      	movs	r0, #24
 80017a6:	f7ff ff5b 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x16);
 80017aa:	2016      	movs	r0, #22
 80017ac:	f7ff ff58 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 80017b0:	20c1      	movs	r0, #193	@ 0xc1
 80017b2:	f7ff febd 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x45);
 80017b6:	2045      	movs	r0, #69	@ 0x45
 80017b8:	f7ff ff52 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 80017bc:	20c2      	movs	r0, #194	@ 0xc2
 80017be:	f7ff feb7 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x33);
 80017c2:	2033      	movs	r0, #51	@ 0x33
 80017c4:	f7ff ff4c 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 80017c8:	20c3      	movs	r0, #195	@ 0xc3
 80017ca:	f7ff feb1 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x33);
 80017ce:	2033      	movs	r0, #51	@ 0x33
 80017d0:	f7ff ff46 	bl	8001660 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 80017d4:	2036      	movs	r0, #54	@ 0x36
 80017d6:	f7ff feab 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 80017da:	205c      	movs	r0, #92	@ 0x5c
 80017dc:	f7ff ff40 	bl	8001660 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 80017e0:	203a      	movs	r0, #58	@ 0x3a
 80017e2:	f7ff fea5 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 80017e6:	2006      	movs	r0, #6
 80017e8:	f7ff ff3a 	bl	8001660 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff fe9f 	bl	8001530 <LCD_send_command>
	LCD_send_command(0x00);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fe9c 	bl	8001530 <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 80017f8:	20b0      	movs	r0, #176	@ 0xb0
 80017fa:	f7ff fe99 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff ff2e 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 8001804:	20b1      	movs	r0, #177	@ 0xb1
 8001806:	f7ff fe93 	bl	8001530 <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 800180a:	20a0      	movs	r0, #160	@ 0xa0
 800180c:	f7ff ff28 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 8001810:	2011      	movs	r0, #17
 8001812:	f7ff ff25 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 8001816:	20b4      	movs	r0, #180	@ 0xb4
 8001818:	f7ff fe8a 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 800181c:	2002      	movs	r0, #2
 800181e:	f7ff ff1f 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 8001822:	20b5      	movs	r0, #181	@ 0xb5
 8001824:	f7ff fe84 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x02);
 8001828:	2002      	movs	r0, #2
 800182a:	f7ff ff19 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x02);
 800182e:	2002      	movs	r0, #2
 8001830:	f7ff ff16 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x0A);
 8001834:	200a      	movs	r0, #10
 8001836:	f7ff ff13 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x04);
 800183a:	2004      	movs	r0, #4
 800183c:	f7ff ff10 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 8001840:	20b6      	movs	r0, #182	@ 0xb6
 8001842:	f7ff fe75 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x02);
 8001846:	2002      	movs	r0, #2
 8001848:	f7ff ff0a 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x02);
 800184c:	2002      	movs	r0, #2
 800184e:	f7ff ff07 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x3B);
 8001852:	203b      	movs	r0, #59	@ 0x3b
 8001854:	f7ff ff04 	bl	8001660 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 8001858:	20e9      	movs	r0, #233	@ 0xe9
 800185a:	f7ff fe69 	bl	8001530 <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 800185e:	2000      	movs	r0, #0
 8001860:	f7ff fefe 	bl	8001660 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8001864:	20f7      	movs	r0, #247	@ 0xf7
 8001866:	f7ff fe63 	bl	8001530 <LCD_send_command>
	LCD_send_data(0xA9);
 800186a:	20a9      	movs	r0, #169	@ 0xa9
 800186c:	f7ff fef8 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x51);
 8001870:	2051      	movs	r0, #81	@ 0x51
 8001872:	f7ff fef5 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x2C);
 8001876:	202c      	movs	r0, #44	@ 0x2c
 8001878:	f7ff fef2 	bl	8001660 <LCD_send_data>
	LCD_send_data(0x82);
 800187c:	2082      	movs	r0, #130	@ 0x82
 800187e:	f7ff feef 	bl	8001660 <LCD_send_data>


	LCD_send_command(0x11);
 8001882:	2011      	movs	r0, #17
 8001884:	f7ff fe54 	bl	8001530 <LCD_send_command>
	HAL_Delay(255);
 8001888:	20ff      	movs	r0, #255	@ 0xff
 800188a:	f002 f885 	bl	8003998 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 800188e:	2051      	movs	r0, #81	@ 0x51
 8001890:	f7ff fe4e 	bl	8001530 <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 8001894:	20ff      	movs	r0, #255	@ 0xff
 8001896:	f7ff fee3 	bl	8001660 <LCD_send_data>
	LCD_send_command(0x29); //Display on
 800189a:	2029      	movs	r0, #41	@ 0x29
 800189c:	f7ff fe48 	bl	8001530 <LCD_send_command>


}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40020c00 	.word	0x40020c00

080018a8 <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4604      	mov	r4, r0
 80018b0:	4608      	mov	r0, r1
 80018b2:	4611      	mov	r1, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	4623      	mov	r3, r4
 80018b8:	80fb      	strh	r3, [r7, #6]
 80018ba:	4603      	mov	r3, r0
 80018bc:	80bb      	strh	r3, [r7, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	807b      	strh	r3, [r7, #2]
 80018c2:	4613      	mov	r3, r2
 80018c4:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 80018c6:	202a      	movs	r0, #42	@ 0x2a
 80018c8:	f7ff fe32 	bl	8001530 <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 80018cc:	88fb      	ldrh	r3, [r7, #6]
 80018ce:	0a1b      	lsrs	r3, r3, #8
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	733b      	strb	r3, [r7, #12]
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 80018dc:	887b      	ldrh	r3, [r7, #2]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	73bb      	strb	r3, [r7, #14]
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2104      	movs	r1, #4
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fe40 	bl	8001578 <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 80018f8:	202b      	movs	r0, #43	@ 0x2b
 80018fa:	f7ff fe19 	bl	8001530 <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 80018fe:	88bb      	ldrh	r3, [r7, #4]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	b29b      	uxth	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	733b      	strb	r3, [r7, #12]
 8001908:	88bb      	ldrh	r3, [r7, #4]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 800190e:	883b      	ldrh	r3, [r7, #0]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	b29b      	uxth	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	73bb      	strb	r3, [r7, #14]
 8001918:	883b      	ldrh	r3, [r7, #0]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	2104      	movs	r1, #4
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fe27 	bl	8001578 <LCD_send_data_multi>

	if(x == 'w')
 800192a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800192e:	2b77      	cmp	r3, #119	@ 0x77
 8001930:	d102      	bne.n	8001938 <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 8001932:	202c      	movs	r0, #44	@ 0x2c
 8001934:	f7ff fdfc 	bl	8001530 <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 8001938:	f897 3020 	ldrb.w	r3, [r7, #32]
 800193c:	2b72      	cmp	r3, #114	@ 0x72
 800193e:	d102      	bne.n	8001946 <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 8001940:	202e      	movs	r0, #46	@ 0x2e
 8001942:	f7ff fdf5 	bl	8001530 <LCD_send_command>
	}


}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bd90      	pop	{r4, r7, pc}
	...

08001950 <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b087      	sub	sp, #28
 8001954:	af00      	add	r7, sp, #0
 8001956:	4604      	mov	r4, r0
 8001958:	4608      	mov	r0, r1
 800195a:	4611      	mov	r1, r2
 800195c:	461a      	mov	r2, r3
 800195e:	4623      	mov	r3, r4
 8001960:	80fb      	strh	r3, [r7, #6]
 8001962:	4603      	mov	r3, r0
 8001964:	80bb      	strh	r3, [r7, #4]
 8001966:	460b      	mov	r3, r1
 8001968:	807b      	strh	r3, [r7, #2]
 800196a:	4613      	mov	r3, r2
 800196c:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 800196e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b64 <read_pixel_frame+0x214>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b7b      	ldr	r3, [pc, #492]	@ (8001b64 <read_pixel_frame+0x214>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800197c:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 800197e:	4b79      	ldr	r3, [pc, #484]	@ (8001b64 <read_pixel_frame+0x214>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b77      	ldr	r3, [pc, #476]	@ (8001b64 <read_pixel_frame+0x214>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 800198c:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 800198e:	4b75      	ldr	r3, [pc, #468]	@ (8001b64 <read_pixel_frame+0x214>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b73      	ldr	r3, [pc, #460]	@ (8001b64 <read_pixel_frame+0x214>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 0210 	orr.w	r2, r2, #16
 800199c:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 800199e:	4b71      	ldr	r3, [pc, #452]	@ (8001b64 <read_pixel_frame+0x214>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b6f      	ldr	r3, [pc, #444]	@ (8001b64 <read_pixel_frame+0x214>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019ac:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 80019ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001b68 <read_pixel_frame+0x218>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 80019b8:	887a      	ldrh	r2, [r7, #2]
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bfb8      	it	lt
 80019c2:	425b      	neglt	r3, r3
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	8839      	ldrh	r1, [r7, #0]
 80019c8:	88bb      	ldrh	r3, [r7, #4]
 80019ca:	1acb      	subs	r3, r1, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bfb8      	it	lt
 80019d0:	425b      	neglt	r3, r3
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	fb12 f303 	smulbb	r3, r2, r3
 80019d8:	b29b      	uxth	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	0052      	lsls	r2, r2, #1
 80019de:	4413      	add	r3, r2
 80019e0:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 80019e2:	2300      	movs	r3, #0
 80019e4:	753b      	strb	r3, [r7, #20]

    free(data);
 80019e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019e8:	f00a ff02 	bl	800c7f0 <free>
    data = malloc(byteNr);
 80019ec:	8afb      	ldrh	r3, [r7, #22]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f00a fef6 	bl	800c7e0 <malloc>
 80019f4:	4603      	mov	r3, r0
 80019f6:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	807b      	strh	r3, [r7, #2]
    y--;
 80019fe:	883b      	ldrh	r3, [r7, #0]
 8001a00:	3b01      	subs	r3, #1
 8001a02:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	743b      	strb	r3, [r7, #16]
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	747b      	strb	r3, [r7, #17]
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	74bb      	strb	r3, [r7, #18]
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 8001a24:	88bb      	ldrh	r3, [r7, #4]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	733b      	strb	r3, [r7, #12]
 8001a2e:	88bb      	ldrh	r3, [r7, #4]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	737b      	strb	r3, [r7, #13]
 8001a34:	883b      	ldrh	r3, [r7, #0]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	73bb      	strb	r3, [r7, #14]
 8001a3e:	883b      	ldrh	r3, [r7, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	73fb      	strb	r3, [r7, #15]

    CS_A();
 8001a44:	2200      	movs	r2, #0
 8001a46:	2110      	movs	r1, #16
 8001a48:	4848      	ldr	r0, [pc, #288]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001a4a:	f003 f8a1 	bl	8004b90 <HAL_GPIO_WritePin>

    DC_COMMAND();
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2108      	movs	r1, #8
 8001a52:	4846      	ldr	r0, [pc, #280]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001a54:	f003 f89c 	bl	8004b90 <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 8001a58:	232a      	movs	r3, #42	@ 0x2a
 8001a5a:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 8001a5c:	f107 010b 	add.w	r1, r7, #11
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	2201      	movs	r2, #1
 8001a66:	483f      	ldr	r0, [pc, #252]	@ (8001b64 <read_pixel_frame+0x214>)
 8001a68:	f004 fd65 	bl	8006536 <HAL_SPI_Transmit>
    DC_DATA();
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2108      	movs	r1, #8
 8001a70:	483e      	ldr	r0, [pc, #248]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001a72:	f003 f88d 	bl	8004b90 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 8001a76:	f107 0110 	add.w	r1, r7, #16
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	2204      	movs	r2, #4
 8001a80:	4838      	ldr	r0, [pc, #224]	@ (8001b64 <read_pixel_frame+0x214>)
 8001a82:	f004 fd58 	bl	8006536 <HAL_SPI_Transmit>

    DC_COMMAND();
 8001a86:	2200      	movs	r2, #0
 8001a88:	2108      	movs	r1, #8
 8001a8a:	4838      	ldr	r0, [pc, #224]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001a8c:	f003 f880 	bl	8004b90 <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 8001a90:	232b      	movs	r3, #43	@ 0x2b
 8001a92:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 8001a94:	f107 010a 	add.w	r1, r7, #10
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	4831      	ldr	r0, [pc, #196]	@ (8001b64 <read_pixel_frame+0x214>)
 8001aa0:	f004 fd49 	bl	8006536 <HAL_SPI_Transmit>
    DC_DATA();
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2108      	movs	r1, #8
 8001aa8:	4830      	ldr	r0, [pc, #192]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001aaa:	f003 f871 	bl	8004b90 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 8001aae:	f107 010c 	add.w	r1, r7, #12
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	482a      	ldr	r0, [pc, #168]	@ (8001b64 <read_pixel_frame+0x214>)
 8001aba:	f004 fd3c 	bl	8006536 <HAL_SPI_Transmit>

    DC_COMMAND();
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2108      	movs	r1, #8
 8001ac2:	482a      	ldr	r0, [pc, #168]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001ac4:	f003 f864 	bl	8004b90 <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 8001ac8:	232e      	movs	r3, #46	@ 0x2e
 8001aca:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 8001acc:	f107 0109 	add.w	r1, r7, #9
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4823      	ldr	r0, [pc, #140]	@ (8001b64 <read_pixel_frame+0x214>)
 8001ad8:	f004 fd2d 	bl	8006536 <HAL_SPI_Transmit>
    DC_DATA();
 8001adc:	2201      	movs	r2, #1
 8001ade:	2108      	movs	r1, #8
 8001ae0:	4822      	ldr	r0, [pc, #136]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001ae2:	f003 f855 	bl	8004b90 <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 8001ae6:	f107 0114 	add.w	r1, r7, #20
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	2201      	movs	r2, #1
 8001af0:	481c      	ldr	r0, [pc, #112]	@ (8001b64 <read_pixel_frame+0x214>)
 8001af2:	f004 fe64 	bl	80067be <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 8001af6:	8afb      	ldrh	r3, [r7, #22]
 8001af8:	461a      	mov	r2, r3
 8001afa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001afc:	4819      	ldr	r0, [pc, #100]	@ (8001b64 <read_pixel_frame+0x214>)
 8001afe:	f005 f9d3 	bl	8006ea8 <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 8001b02:	bf00      	nop
 8001b04:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <read_pixel_frame+0x218>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0fa      	beq.n	8001b04 <read_pixel_frame+0x1b4>
    CS_D();
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2110      	movs	r1, #16
 8001b12:	4816      	ldr	r0, [pc, #88]	@ (8001b6c <read_pixel_frame+0x21c>)
 8001b14:	f003 f83c 	bl	8004b90 <HAL_GPIO_WritePin>

    free(data);
 8001b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b1a:	f00a fe69 	bl	800c7f0 <free>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001b2c:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8001b3c:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <read_pixel_frame+0x214>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b58:	601a      	str	r2, [r3, #0]

}
 8001b5a:	bf00      	nop
 8001b5c:	371c      	adds	r7, #28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd90      	pop	{r4, r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000180 	.word	0x20000180
 8001b68:	20000329 	.word	0x20000329
 8001b6c:	40020c00 	.word	0x40020c00

08001b70 <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	 * folosind DMA. Odata terminat transferul SPI prin DMA,
	 * aceasta functia de CallBack se va apela, setandu-ne un flag
	 * pentru a indica starea acestui transfer de date.
	 */

	if(hspi->Instance == SPI1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a05      	ldr	r2, [pc, #20]	@ (8001b94 <HAL_SPI_TxCpltCallback+0x24>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d102      	bne.n	8001b88 <HAL_SPI_TxCpltCallback+0x18>
	{
		flagDmaSpiTx = 1;
 8001b82:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <HAL_SPI_TxCpltCallback+0x28>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
	}



}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40013000 	.word	0x40013000
 8001b98:	20000328 	.word	0x20000328

08001b9c <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	/*
	 * Functie de CallBack pentru terminarea receptiei datelor
	 * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	 */

	if(hspi->Instance == SPI1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a28      	ldr	r2, [pc, #160]	@ (8001c4c <HAL_SPI_RxCpltCallback+0xb0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d102      	bne.n	8001bb4 <HAL_SPI_RxCpltCallback+0x18>
	{
		/*
		 * SPI1 folosit pentru LCD
		 */

		flagDmaSpiRx = 1;
 8001bae:	4b28      	ldr	r3, [pc, #160]	@ (8001c50 <HAL_SPI_RxCpltCallback+0xb4>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]

	}


	if(hspi->Instance == SPI2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a26      	ldr	r2, [pc, #152]	@ (8001c54 <HAL_SPI_RxCpltCallback+0xb8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d140      	bne.n	8001c40 <HAL_SPI_RxCpltCallback+0xa4>
	{
		/*
		 * Receptionare comenzi controller
		 */

		switch(dataController)
 8001bbe:	4b26      	ldr	r3, [pc, #152]	@ (8001c58 <HAL_SPI_RxCpltCallback+0xbc>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	2b0f      	cmp	r3, #15
 8001bc8:	d836      	bhi.n	8001c38 <HAL_SPI_RxCpltCallback+0x9c>
 8001bca:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd0 <HAL_SPI_RxCpltCallback+0x34>)
 8001bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd0:	08001c11 	.word	0x08001c11
 8001bd4:	08001c19 	.word	0x08001c19
 8001bd8:	08001c39 	.word	0x08001c39
 8001bdc:	08001c21 	.word	0x08001c21
 8001be0:	08001c39 	.word	0x08001c39
 8001be4:	08001c39 	.word	0x08001c39
 8001be8:	08001c39 	.word	0x08001c39
 8001bec:	08001c29 	.word	0x08001c29
 8001bf0:	08001c39 	.word	0x08001c39
 8001bf4:	08001c39 	.word	0x08001c39
 8001bf8:	08001c39 	.word	0x08001c39
 8001bfc:	08001c39 	.word	0x08001c39
 8001c00:	08001c39 	.word	0x08001c39
 8001c04:	08001c39 	.word	0x08001c39
 8001c08:	08001c39 	.word	0x08001c39
 8001c0c:	08001c31 	.word	0x08001c31
		{
		  	case DxRight:
		  	  currentDx = DxRight;
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_SPI_RxCpltCallback+0xc0>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
		  	  break;
 8001c16:	e013      	b.n	8001c40 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxLeft:
		  	  currentDx = DxLeft;
 8001c18:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <HAL_SPI_RxCpltCallback+0xc0>)
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	701a      	strb	r2, [r3, #0]
		  	  break;
 8001c1e:	e00f      	b.n	8001c40 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxUp:
		  	  currentDx = DxUp;
 8001c20:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <HAL_SPI_RxCpltCallback+0xc0>)
 8001c22:	2204      	movs	r2, #4
 8001c24:	701a      	strb	r2, [r3, #0]
		  	  break;
 8001c26:	e00b      	b.n	8001c40 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxDown:
		  	  currentDx = DxDown;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <HAL_SPI_RxCpltCallback+0xc0>)
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	701a      	strb	r2, [r3, #0]
		  	  break;
 8001c2e:	e007      	b.n	8001c40 <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxStart:
		  	  currentDx = DxStart;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <HAL_SPI_RxCpltCallback+0xc0>)
 8001c32:	2210      	movs	r2, #16
 8001c34:	701a      	strb	r2, [r3, #0]
		  	  break;
 8001c36:	e003      	b.n	8001c40 <HAL_SPI_RxCpltCallback+0xa4>
		  	default:
		  	  currentDx = 0x00;
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_SPI_RxCpltCallback+0xc0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
		  	  break;
 8001c3e:	bf00      	nop
		}

	}

}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40013000 	.word	0x40013000
 8001c50:	20000329 	.word	0x20000329
 8001c54:	40003800 	.word	0x40003800
 8001c58:	2000032b 	.word	0x2000032b
 8001c5c:	2000032c 	.word	0x2000032c

08001c60 <HAL_DAC_ConvHalfCpltCallbackCh1>:


void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
    /*
     * Functie de CallBack pentru finalizare 1/2 din transfer DMA pe DAC
     */

	flagDmaDAC = 1;
 8001c68:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]

}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	2000032a 	.word	0x2000032a

08001c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b092      	sub	sp, #72	@ 0x48
 8001c84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c86:	f001 fe15 	bl	80038b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c8a:	f000 fa59 	bl	8002140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c8e:	f000 fbf5 	bl	800247c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c92:	f000 fbb5 	bl	8002400 <MX_DMA_Init>
  MX_SPI1_Init();
 8001c96:	f000 fb07 	bl	80022a8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001c9a:	f000 fb87 	bl	80023ac <MX_USART1_UART_Init>
  MX_DAC_Init();
 8001c9e:	f000 fab9 	bl	8002214 <MX_DAC_Init>
  MX_TIM2_Init();
 8001ca2:	f000 fb37 	bl	8002314 <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 8001ca6:	f000 fadf 	bl	8002268 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001caa:	f007 fcfd 	bl	80096a8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 8001cae:	f000 fc49 	bl	8002544 <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 8001cb2:	f7ff fcf9 	bl	80016a8 <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 8001cb6:	48c3      	ldr	r0, [pc, #780]	@ (8001fc4 <main+0x344>)
 8001cb8:	f005 fdb4 	bl	8007824 <HAL_TIM_Base_Start>


  /*Test pentru tastatura*/

  fill_screen1(0x0000);
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f7fe fd33 	bl	8000728 <fill_screen1>

  play_audio_file("audio/BeBack.txt");
 8001cc2:	48c1      	ldr	r0, [pc, #772]	@ (8001fc8 <main+0x348>)
 8001cc4:	f7fe fc00 	bl	80004c8 <play_audio_file>
  HAL_Delay(1000);
 8001cc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ccc:	f001 fe64 	bl	8003998 <HAL_Delay>
  play_audio_file("audio/Bambina.txt"); //doremi mine songita song22
 8001cd0:	48be      	ldr	r0, [pc, #760]	@ (8001fcc <main+0x34c>)
 8001cd2:	f7fe fbf9 	bl	80004c8 <play_audio_file>


  fill_screen1(0xF100);
 8001cd6:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001cda:	f7fe fd25 	bl	8000728 <fill_screen1>
  HAL_Delay(1000);
 8001cde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ce2:	f001 fe59 	bl	8003998 <HAL_Delay>
  fill_screen2(0xF00F);
 8001ce6:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 8001cea:	f7fe fd7d 	bl	80007e8 <fill_screen2>
  HAL_Delay(1000);
 8001cee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001cf2:	f001 fe51 	bl	8003998 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001cf6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001cfa:	f7fe fd75 	bl	80007e8 <fill_screen2>
  HAL_Delay(1000);
 8001cfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d02:	f001 fe49 	bl	8003998 <HAL_Delay>

  unsigned int startTick = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int endTick = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned int getTime = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	633b      	str	r3, [r7, #48]	@ 0x30
  ENTITY entity;


  /*Test SCALARE*/

  fill_screen2(0xFFFF);
 8001d12:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d16:	f7fe fd67 	bl	80007e8 <fill_screen2>

  entity.x0 = 100;
 8001d1a:	2364      	movs	r3, #100	@ 0x64
 8001d1c:	837b      	strh	r3, [r7, #26]
  entity.y0 = 100;
 8001d1e:	2364      	movs	r3, #100	@ 0x64
 8001d20:	83bb      	strh	r3, [r7, #28]
  entity.id = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	763b      	strb	r3, [r7, #24]
  draw_entity(&entity, "graphic/multi2.bin");
 8001d26:	f107 0318 	add.w	r3, r7, #24
 8001d2a:	49a9      	ldr	r1, [pc, #676]	@ (8001fd0 <main+0x350>)
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe ffcf 	bl	8000cd0 <draw_entity>
  HAL_Delay(1000);
 8001d32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d36:	f001 fe2f 	bl	8003998 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001d3a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d3e:	f7fe fd53 	bl	80007e8 <fill_screen2>
  scaling_entity(&entity, 38, "graphic/multi2.bin", "multi2.bin");
 8001d42:	f107 0318 	add.w	r3, r7, #24
 8001d46:	4aa3      	ldr	r2, [pc, #652]	@ (8001fd4 <main+0x354>)
 8001d48:	49a1      	ldr	r1, [pc, #644]	@ (8001fd0 <main+0x350>)
 8001d4a:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8001fd8 <main+0x358>
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f9be 	bl	80010d0 <scaling_entity>
  draw_entity(&entity, entity.filePathName);
 8001d54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d56:	f107 0318 	add.w	r3, r7, #24
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe ffb7 	bl	8000cd0 <draw_entity>

  //--------------------------------------------

  HAL_Delay(1000);
 8001d62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d66:	f001 fe17 	bl	8003998 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001d6a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d6e:	f7fe fd3b 	bl	80007e8 <fill_screen2>

  rotate_entity(&entity, 90);
 8001d72:	f107 0318 	add.w	r3, r7, #24
 8001d76:	215a      	movs	r1, #90	@ 0x5a
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fb0d 	bl	8001398 <rotate_entity>

  HAL_Delay(1000);
 8001d7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d82:	f001 fe09 	bl	8003998 <HAL_Delay>

  //---------------------------------------------

  HAL_Delay(1000);
 8001d86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d8a:	f001 fe05 	bl	8003998 <HAL_Delay>

  fill_screen2(0xFFFF);
 8001d8e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d92:	f7fe fd29 	bl	80007e8 <fill_screen2>
  draw_entity(&entity, entity.filePathName);
 8001d96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe ff96 	bl	8000cd0 <draw_entity>
  HAL_Delay(1000);
 8001da4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001da8:	f001 fdf6 	bl	8003998 <HAL_Delay>
  fill_screen2(0xFFFF);
 8001dac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001db0:	f7fe fd1a 	bl	80007e8 <fill_screen2>
  scaling_entity(&entity, 0.5, entity.filePathName, "multi2.bin");
 8001db4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001db6:	f107 0318 	add.w	r3, r7, #24
 8001dba:	4a86      	ldr	r2, [pc, #536]	@ (8001fd4 <main+0x354>)
 8001dbc:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff f985 	bl	80010d0 <scaling_entity>
  draw_entity(&entity, entity.filePathName);
 8001dc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe ff7e 	bl	8000cd0 <draw_entity>
  HAL_Delay(1000);
 8001dd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dd8:	f001 fdde 	bl	8003998 <HAL_Delay>

  //free(dataRec1);

  //Test image print from SD card
  ENTITY ent;
  ent.x0 = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	80fb      	strh	r3, [r7, #6]
  ent.y0 = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	813b      	strh	r3, [r7, #8]
  ent.id = 0x00;
 8001de4:	2300      	movs	r3, #0
 8001de6:	713b      	strb	r3, [r7, #4]
  draw_entity(&ent, "graphic/img5.bin");
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	497c      	ldr	r1, [pc, #496]	@ (8001fdc <main+0x35c>)
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe ff6f 	bl	8000cd0 <draw_entity>
  HAL_Delay(2000);
 8001df2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001df6:	f001 fdcf 	bl	8003998 <HAL_Delay>
  draw_entity(&ent, "graphic/img6.bin");
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	4978      	ldr	r1, [pc, #480]	@ (8001fe0 <main+0x360>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe ff66 	bl	8000cd0 <draw_entity>
  HAL_Delay(2000);
 8001e04:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e08:	f001 fdc6 	bl	8003998 <HAL_Delay>
  draw_entity(&ent, "graphic/img8.bin");
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	4975      	ldr	r1, [pc, #468]	@ (8001fe4 <main+0x364>)
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe ff5d 	bl	8000cd0 <draw_entity>
  HAL_Delay(2000);
 8001e16:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e1a:	f001 fdbd 	bl	8003998 <HAL_Delay>
  draw_entity(&ent, "graphic/img9.bin");
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	4971      	ldr	r1, [pc, #452]	@ (8001fe8 <main+0x368>)
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe ff54 	bl	8000cd0 <draw_entity>
  HAL_Delay(2000);
 8001e28:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e2c:	f001 fdb4 	bl	8003998 <HAL_Delay>
  startTick = HAL_GetTick();
 8001e30:	f001 fda6 	bl	8003980 <HAL_GetTick>
 8001e34:	63b8      	str	r0, [r7, #56]	@ 0x38
  draw_entity(&ent, "graphic/img92.bin");
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	496c      	ldr	r1, [pc, #432]	@ (8001fec <main+0x36c>)
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe ff48 	bl	8000cd0 <draw_entity>
  endTick = HAL_GetTick();
 8001e40:	f001 fd9e 	bl	8003980 <HAL_GetTick>
 8001e44:	6378      	str	r0, [r7, #52]	@ 0x34
  getTime = endTick - startTick;
 8001e46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	633b      	str	r3, [r7, #48]	@ 0x30

  fill_screen2(0x0000);
 8001e4e:	2000      	movs	r0, #0
 8001e50:	f7fe fcca 	bl	80007e8 <fill_screen2>
  draw_entity(&ent, "graphic/pixel1.bin");
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	4966      	ldr	r1, [pc, #408]	@ (8001ff0 <main+0x370>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe ff39 	bl	8000cd0 <draw_entity>
  HAL_Delay(3000);
 8001e5e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001e62:	f001 fd99 	bl	8003998 <HAL_Delay>

  //Test translation

  //ENTITY entity;

  entity.x0 = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	837b      	strh	r3, [r7, #26]
  entity.y0 = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	83bb      	strh	r3, [r7, #28]
  entity.x1 = 64;
 8001e6e:	2340      	movs	r3, #64	@ 0x40
 8001e70:	83fb      	strh	r3, [r7, #30]
  entity.y1 = 64;
 8001e72:	2340      	movs	r3, #64	@ 0x40
 8001e74:	843b      	strh	r3, [r7, #32]
  entity.color = 0xF100;
 8001e76:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001e7a:	847b      	strh	r3, [r7, #34]	@ 0x22

  //draw_entity(&entity,NULL);

  //translation_test(&entity, 1, 0);

  HAL_Delay(500);
 8001e7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e80:	f001 fd8a 	bl	8003998 <HAL_Delay>
  translation_entity(&entity, entity.x0+100, entity.y0+100, 1);//, 0xF100);
 8001e84:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	3364      	adds	r3, #100	@ 0x64
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	b219      	sxth	r1, r3
 8001e90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3364      	adds	r3, #100	@ 0x64
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	b21a      	sxth	r2, r3
 8001e9c:	f107 0018 	add.w	r0, r7, #24
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f7ff f815 	bl	8000ed0 <translation_entity>
  HAL_Delay(2000);
 8001ea6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001eaa:	f001 fd75 	bl	8003998 <HAL_Delay>
  translation_entity(&entity, entity.x0+32, entity.y0+32, 1);//, 0xF100);
 8001eae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3320      	adds	r3, #32
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	b219      	sxth	r1, r3
 8001eba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3320      	adds	r3, #32
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b21a      	sxth	r2, r3
 8001ec6:	f107 0018 	add.w	r0, r7, #24
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f7ff f800 	bl	8000ed0 <translation_entity>
  HAL_Delay(500);
 8001ed0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ed4:	f001 fd60 	bl	8003998 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0+32, 1);//, 0xF100);
 8001ed8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	330c      	adds	r3, #12
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	b219      	sxth	r1, r3
 8001ee4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3320      	adds	r3, #32
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	f107 0018 	add.w	r0, r7, #24
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f7fe ffeb 	bl	8000ed0 <translation_entity>
  HAL_Delay(500);
 8001efa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001efe:	f001 fd4b 	bl	8003998 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0, 1);//, 0xF100);
 8001f02:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	330c      	adds	r3, #12
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	b219      	sxth	r1, r3
 8001f0e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001f12:	f107 0018 	add.w	r0, r7, #24
 8001f16:	2301      	movs	r3, #1
 8001f18:	f7fe ffda 	bl	8000ed0 <translation_entity>
  HAL_Delay(500);
 8001f1c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f20:	f001 fd3a 	bl	8003998 <HAL_Delay>


  //Test_SD_Card();

  play_audio_file("audio/mine.txt"); //doremi mine songita song22
 8001f24:	4833      	ldr	r0, [pc, #204]	@ (8001ff4 <main+0x374>)
 8001f26:	f7fe facf 	bl	80004c8 <play_audio_file>

  fill_screen2(0xF100);
 8001f2a:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001f2e:	f7fe fc5b 	bl	80007e8 <fill_screen2>
  //startTick = HAL_GetTick();
  //read_audio_file("audio/random.txt", sampleData);
  //endTick = HAL_GetTick();
  //getTime = endTick - startTick;

  HAL_Delay(100);
 8001f32:	2064      	movs	r0, #100	@ 0x64
 8001f34:	f001 fd30 	bl	8003998 <HAL_Delay>


  for(uint8_t i=0;i<100;i++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001f3e:	e074      	b.n	800202a <main+0x3aa>
  {
	  for(uint8_t j=0; j<100;j++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001f46:	e067      	b.n	8002018 <main+0x398>
	  {

		  if(i==j)
 8001f48:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001f4c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d10b      	bne.n	8001f6c <main+0x2ec>
		  {
			  draw_pixel(i,j,0xF100);
 8001f54:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8001f5e:	b291      	uxth	r1, r2
 8001f60:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fb87 	bl	8000678 <draw_pixel>
			  continue;
 8001f6a:	e050      	b.n	800200e <main+0x38e>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 8001f6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001f70:	2b50      	cmp	r3, #80	@ 0x50
 8001f72:	d103      	bne.n	8001f7c <main+0x2fc>
 8001f74:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001f78:	2b14      	cmp	r3, #20
 8001f7a:	d017      	beq.n	8001fac <main+0x32c>
 8001f7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001f80:	2b50      	cmp	r3, #80	@ 0x50
 8001f82:	d103      	bne.n	8001f8c <main+0x30c>
 8001f84:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001f88:	2b13      	cmp	r3, #19
 8001f8a:	d00f      	beq.n	8001fac <main+0x32c>
 8001f8c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001f90:	2b51      	cmp	r3, #81	@ 0x51
 8001f92:	d103      	bne.n	8001f9c <main+0x31c>
 8001f94:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001f98:	2b14      	cmp	r3, #20
 8001f9a:	d007      	beq.n	8001fac <main+0x32c>
 8001f9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001fa0:	2b51      	cmp	r3, #81	@ 0x51
 8001fa2:	d129      	bne.n	8001ff8 <main+0x378>
 8001fa4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001fa8:	2b13      	cmp	r3, #19
 8001faa:	d125      	bne.n	8001ff8 <main+0x378>
		  {
			  draw_pixel(i,j,0x001F);
 8001fac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8001fb6:	b291      	uxth	r1, r2
 8001fb8:	221f      	movs	r2, #31
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fb5c 	bl	8000678 <draw_pixel>
			  continue;
 8001fc0:	e025      	b.n	800200e <main+0x38e>
 8001fc2:	bf00      	nop
 8001fc4:	20000298 	.word	0x20000298
 8001fc8:	0800cb78 	.word	0x0800cb78
 8001fcc:	0800cb8c 	.word	0x0800cb8c
 8001fd0:	0800cba0 	.word	0x0800cba0
 8001fd4:	0800cbb4 	.word	0x0800cbb4
 8001fd8:	42180000 	.word	0x42180000
 8001fdc:	0800cbc0 	.word	0x0800cbc0
 8001fe0:	0800cbd4 	.word	0x0800cbd4
 8001fe4:	0800cbe8 	.word	0x0800cbe8
 8001fe8:	0800cbfc 	.word	0x0800cbfc
 8001fec:	0800cc10 	.word	0x0800cc10
 8001ff0:	0800cc24 	.word	0x0800cc24
 8001ff4:	0800cc38 	.word	0x0800cc38
		  }


		  draw_pixel(i,j,0xFFFF);
 8001ff8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002002:	b291      	uxth	r1, r2
 8002004:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fb35 	bl	8000678 <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 800200e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002012:	3301      	adds	r3, #1
 8002014:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002018:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800201c:	2b63      	cmp	r3, #99	@ 0x63
 800201e:	d993      	bls.n	8001f48 <main+0x2c8>
  for(uint8_t i=0;i<100;i++)
 8002020:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002024:	3301      	adds	r3, #1
 8002026:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800202a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800202e:	2b63      	cmp	r3, #99	@ 0x63
 8002030:	d986      	bls.n	8001f40 <main+0x2c0>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 8002032:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8002036:	f7fe fbd7 	bl	80007e8 <fill_screen2>
  HAL_Delay(1000);
 800203a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800203e:	f001 fcab 	bl	8003998 <HAL_Delay>
  fill_screen2(0xF150);
 8002042:	f24f 1050 	movw	r0, #61776	@ 0xf150
 8002046:	f7fe fbcf 	bl	80007e8 <fill_screen2>
  HAL_Delay(1000);
 800204a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800204e:	f001 fca3 	bl	8003998 <HAL_Delay>
  fill_screen2(0xF111);
 8002052:	f24f 1011 	movw	r0, #61713	@ 0xf111
 8002056:	f7fe fbc7 	bl	80007e8 <fill_screen2>
  HAL_Delay(1000);
 800205a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800205e:	f001 fc9b 	bl	8003998 <HAL_Delay>
  fill_screen2(0xF10F);
 8002062:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 8002066:	f7fe fbbf 	bl	80007e8 <fill_screen2>
  HAL_Delay(1000);
 800206a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800206e:	f001 fc93 	bl	8003998 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002072:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002076:	f7fe fbb7 	bl	80007e8 <fill_screen2>
  HAL_Delay(1000);
 800207a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800207e:	f001 fc8b 	bl	8003998 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002082:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002086:	f7fe fbaf 	bl	80007e8 <fill_screen2>

  print_string(36, 200, "Licenta 2025", 12, 0x1F00, 0x001F);
 800208a:	231f      	movs	r3, #31
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	230c      	movs	r3, #12
 8002096:	4a26      	ldr	r2, [pc, #152]	@ (8002130 <main+0x4b0>)
 8002098:	21c8      	movs	r1, #200	@ 0xc8
 800209a:	2024      	movs	r0, #36	@ 0x24
 800209c:	f7fe fd00 	bl	8000aa0 <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 80020a0:	4b24      	ldr	r3, [pc, #144]	@ (8002134 <main+0x4b4>)
 80020a2:	603b      	str	r3, [r7, #0]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 80020a4:	463b      	mov	r3, r7
 80020a6:	2204      	movs	r2, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4823      	ldr	r0, [pc, #140]	@ (8002138 <main+0x4b8>)
 80020ac:	f004 fe4a 	bl	8006d44 <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 80020b0:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80020b4:	2250      	movs	r2, #80	@ 0x50
 80020b6:	2114      	movs	r1, #20
 80020b8:	2014      	movs	r0, #20
 80020ba:	f7fe fd35 	bl	8000b28 <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 80020be:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80020c2:	2250      	movs	r2, #80	@ 0x50
 80020c4:	2114      	movs	r1, #20
 80020c6:	2014      	movs	r0, #20
 80020c8:	f7fe fd69 	bl	8000b9e <draw_vertical_line>

  flagDmaSpiTx = 0;
 80020cc:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <main+0x4bc>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 80020d2:	221f      	movs	r2, #31
 80020d4:	2100      	movs	r1, #0
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7fe face 	bl	8000678 <draw_pixel>
  draw_pixel(1,0,0xF800);
 80020dc:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80020e0:	2100      	movs	r1, #0
 80020e2:	2001      	movs	r0, #1
 80020e4:	f7fe fac8 	bl	8000678 <draw_pixel>
  draw_pixel(0,1,0x001F);
 80020e8:	221f      	movs	r2, #31
 80020ea:	2101      	movs	r1, #1
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7fe fac3 	bl	8000678 <draw_pixel>
  draw_pixel(1,1,0xF800);
 80020f2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80020f6:	2101      	movs	r1, #1
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7fe fabd 	bl	8000678 <draw_pixel>

  HAL_Delay(50);
 80020fe:	2032      	movs	r0, #50	@ 0x32
 8002100:	f001 fc4a 	bl	8003998 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 8002104:	2001      	movs	r0, #1
 8002106:	f00a fb6b 	bl	800c7e0 <malloc>
 800210a:	4603      	mov	r3, r0
 800210c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 800210e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2302      	movs	r3, #2
 8002114:	2202      	movs	r2, #2
 8002116:	2100      	movs	r1, #0
 8002118:	2000      	movs	r0, #0
 800211a:	f7ff fc19 	bl	8001950 <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 800211e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002120:	f00a fb66 	bl	800c7f0 <free>

  HAL_Delay(3000);
 8002124:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002128:	f001 fc36 	bl	8003998 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <main+0x4ac>
 8002130:	0800cc48 	.word	0x0800cc48
 8002134:	04030201 	.word	0x04030201
 8002138:	20000180 	.word	0x20000180
 800213c:	20000328 	.word	0x20000328

08002140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b094      	sub	sp, #80	@ 0x50
 8002144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002146:	f107 0320 	add.w	r3, r7, #32
 800214a:	2230      	movs	r2, #48	@ 0x30
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f00a fc3a 	bl	800c9c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002154:	f107 030c 	add.w	r3, r7, #12
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	4b28      	ldr	r3, [pc, #160]	@ (800220c <SystemClock_Config+0xcc>)
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	4a27      	ldr	r2, [pc, #156]	@ (800220c <SystemClock_Config+0xcc>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002172:	6413      	str	r3, [r2, #64]	@ 0x40
 8002174:	4b25      	ldr	r3, [pc, #148]	@ (800220c <SystemClock_Config+0xcc>)
 8002176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002180:	2300      	movs	r3, #0
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <SystemClock_Config+0xd0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a21      	ldr	r2, [pc, #132]	@ (8002210 <SystemClock_Config+0xd0>)
 800218a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b1f      	ldr	r3, [pc, #124]	@ (8002210 <SystemClock_Config+0xd0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800219c:	2301      	movs	r3, #1
 800219e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a6:	2302      	movs	r3, #2
 80021a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80021b0:	2304      	movs	r3, #4
 80021b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021b4:	23a8      	movs	r3, #168	@ 0xa8
 80021b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021b8:	2302      	movs	r3, #2
 80021ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021bc:	2307      	movs	r3, #7
 80021be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c0:	f107 0320 	add.w	r3, r7, #32
 80021c4:	4618      	mov	r0, r3
 80021c6:	f002 fcfd 	bl	8004bc4 <HAL_RCC_OscConfig>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021d0:	f000 f9b2 	bl	8002538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021d4:	230f      	movs	r3, #15
 80021d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021d8:	2302      	movs	r3, #2
 80021da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	2105      	movs	r1, #5
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 ff5e 	bl	80050b4 <HAL_RCC_ClockConfig>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021fe:	f000 f99b 	bl	8002538 <Error_Handler>
  }
}
 8002202:	bf00      	nop
 8002204:	3750      	adds	r7, #80	@ 0x50
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800
 8002210:	40007000 	.word	0x40007000

08002214 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800221a:	463b      	mov	r3, r7
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002222:	4b0f      	ldr	r3, [pc, #60]	@ (8002260 <MX_DAC_Init+0x4c>)
 8002224:	4a0f      	ldr	r2, [pc, #60]	@ (8002264 <MX_DAC_Init+0x50>)
 8002226:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002228:	480d      	ldr	r0, [pc, #52]	@ (8002260 <MX_DAC_Init+0x4c>)
 800222a:	f001 fcea 	bl	8003c02 <HAL_DAC_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002234:	f000 f980 	bl	8002538 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002238:	2324      	movs	r3, #36	@ 0x24
 800223a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002240:	463b      	mov	r3, r7
 8002242:	2200      	movs	r2, #0
 8002244:	4619      	mov	r1, r3
 8002246:	4806      	ldr	r0, [pc, #24]	@ (8002260 <MX_DAC_Init+0x4c>)
 8002248:	f001 fe21 	bl	8003e8e <HAL_DAC_ConfigChannel>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002252:	f000 f971 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000088 	.word	0x20000088
 8002264:	40007400 	.word	0x40007400

08002268 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <MX_SDIO_SD_Init+0x38>)
 800226e:	4a0d      	ldr	r2, [pc, #52]	@ (80022a4 <MX_SDIO_SD_Init+0x3c>)
 8002270:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002272:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <MX_SDIO_SD_Init+0x38>)
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002278:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <MX_SDIO_SD_Init+0x38>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800227e:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <MX_SDIO_SD_Init+0x38>)
 8002280:	2200      	movs	r2, #0
 8002282:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002284:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <MX_SDIO_SD_Init+0x38>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800228a:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <MX_SDIO_SD_Init+0x38>)
 800228c:	2200      	movs	r2, #0
 800228e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8002290:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <MX_SDIO_SD_Init+0x38>)
 8002292:	2208      	movs	r2, #8
 8002294:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	200000fc 	.word	0x200000fc
 80022a4:	40012c00 	.word	0x40012c00

080022a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80022ac:	4b17      	ldr	r3, [pc, #92]	@ (800230c <MX_SPI1_Init+0x64>)
 80022ae:	4a18      	ldr	r2, [pc, #96]	@ (8002310 <MX_SPI1_Init+0x68>)
 80022b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022b2:	4b16      	ldr	r3, [pc, #88]	@ (800230c <MX_SPI1_Init+0x64>)
 80022b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80022b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022ba:	4b14      	ldr	r3, [pc, #80]	@ (800230c <MX_SPI1_Init+0x64>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022c0:	4b12      	ldr	r3, [pc, #72]	@ (800230c <MX_SPI1_Init+0x64>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c6:	4b11      	ldr	r3, [pc, #68]	@ (800230c <MX_SPI1_Init+0x64>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022cc:	4b0f      	ldr	r3, [pc, #60]	@ (800230c <MX_SPI1_Init+0x64>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <MX_SPI1_Init+0x64>)
 80022d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022da:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <MX_SPI1_Init+0x64>)
 80022dc:	2200      	movs	r2, #0
 80022de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022e0:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <MX_SPI1_Init+0x64>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022e6:	4b09      	ldr	r3, [pc, #36]	@ (800230c <MX_SPI1_Init+0x64>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ec:	4b07      	ldr	r3, [pc, #28]	@ (800230c <MX_SPI1_Init+0x64>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022f2:	4b06      	ldr	r3, [pc, #24]	@ (800230c <MX_SPI1_Init+0x64>)
 80022f4:	220a      	movs	r2, #10
 80022f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022f8:	4804      	ldr	r0, [pc, #16]	@ (800230c <MX_SPI1_Init+0x64>)
 80022fa:	f004 f893 	bl	8006424 <HAL_SPI_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002304:	f000 f918 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000180 	.word	0x20000180
 8002310:	40013000 	.word	0x40013000

08002314 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002328:	463b      	mov	r3, r7
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002330:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <MX_TIM2_Init+0x94>)
 8002332:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002336:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;//83
 8002338:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <MX_TIM2_Init+0x94>)
 800233a:	2253      	movs	r2, #83	@ 0x53
 800233c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233e:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <MX_TIM2_Init+0x94>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11;//11
 8002344:	4b18      	ldr	r3, [pc, #96]	@ (80023a8 <MX_TIM2_Init+0x94>)
 8002346:	220b      	movs	r2, #11
 8002348:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800234a:	4b17      	ldr	r3, [pc, #92]	@ (80023a8 <MX_TIM2_Init+0x94>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002350:	4b15      	ldr	r3, [pc, #84]	@ (80023a8 <MX_TIM2_Init+0x94>)
 8002352:	2200      	movs	r2, #0
 8002354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002356:	4814      	ldr	r0, [pc, #80]	@ (80023a8 <MX_TIM2_Init+0x94>)
 8002358:	f005 fa14 	bl	8007784 <HAL_TIM_Base_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002362:	f000 f8e9 	bl	8002538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002366:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800236a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800236c:	f107 0308 	add.w	r3, r7, #8
 8002370:	4619      	mov	r1, r3
 8002372:	480d      	ldr	r0, [pc, #52]	@ (80023a8 <MX_TIM2_Init+0x94>)
 8002374:	f005 fabe 	bl	80078f4 <HAL_TIM_ConfigClockSource>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800237e:	f000 f8db 	bl	8002538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002382:	2320      	movs	r3, #32
 8002384:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800238a:	463b      	mov	r3, r7
 800238c:	4619      	mov	r1, r3
 800238e:	4806      	ldr	r0, [pc, #24]	@ (80023a8 <MX_TIM2_Init+0x94>)
 8002390:	f005 fcbe 	bl	8007d10 <HAL_TIMEx_MasterConfigSynchronization>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800239a:	f000 f8cd 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000298 	.word	0x20000298

080023ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023b0:	4b11      	ldr	r3, [pc, #68]	@ (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023b2:	4a12      	ldr	r2, [pc, #72]	@ (80023fc <MX_USART1_UART_Init+0x50>)
 80023b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023b6:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023b8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80023bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023be:	4b0e      	ldr	r3, [pc, #56]	@ (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023d0:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023d2:	220c      	movs	r2, #12
 80023d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023d6:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023e2:	4805      	ldr	r0, [pc, #20]	@ (80023f8 <MX_USART1_UART_Init+0x4c>)
 80023e4:	f005 fd10 	bl	8007e08 <HAL_UART_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023ee:	f000 f8a3 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200002e0 	.word	0x200002e0
 80023fc:	40011000 	.word	0x40011000

08002400 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]
 800240a:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <MX_DMA_Init+0x78>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	4a1a      	ldr	r2, [pc, #104]	@ (8002478 <MX_DMA_Init+0x78>)
 8002410:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002414:	6313      	str	r3, [r2, #48]	@ 0x30
 8002416:	4b18      	ldr	r3, [pc, #96]	@ (8002478 <MX_DMA_Init+0x78>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	4b14      	ldr	r3, [pc, #80]	@ (8002478 <MX_DMA_Init+0x78>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	4a13      	ldr	r2, [pc, #76]	@ (8002478 <MX_DMA_Init+0x78>)
 800242c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002430:	6313      	str	r3, [r2, #48]	@ 0x30
 8002432:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <MX_DMA_Init+0x78>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	2010      	movs	r0, #16
 8002444:	f001 fba7 	bl	8003b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002448:	2010      	movs	r0, #16
 800244a:	f001 fbc0 	bl	8003bce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2100      	movs	r1, #0
 8002452:	2038      	movs	r0, #56	@ 0x38
 8002454:	f001 fb9f 	bl	8003b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002458:	2038      	movs	r0, #56	@ 0x38
 800245a:	f001 fbb8 	bl	8003bce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	203b      	movs	r0, #59	@ 0x3b
 8002464:	f001 fb97 	bl	8003b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002468:	203b      	movs	r0, #59	@ 0x3b
 800246a:	f001 fbb0 	bl	8003bce <HAL_NVIC_EnableIRQ>

}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023800 	.word	0x40023800

0800247c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	@ 0x28
 8002480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002482:	f107 0314 	add.w	r3, r7, #20
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	4b26      	ldr	r3, [pc, #152]	@ (8002530 <MX_GPIO_Init+0xb4>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	4a25      	ldr	r2, [pc, #148]	@ (8002530 <MX_GPIO_Init+0xb4>)
 800249c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a2:	4b23      	ldr	r3, [pc, #140]	@ (8002530 <MX_GPIO_Init+0xb4>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002530 <MX_GPIO_Init+0xb4>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002530 <MX_GPIO_Init+0xb4>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024be:	4b1c      	ldr	r3, [pc, #112]	@ (8002530 <MX_GPIO_Init+0xb4>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	4b18      	ldr	r3, [pc, #96]	@ (8002530 <MX_GPIO_Init+0xb4>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	4a17      	ldr	r2, [pc, #92]	@ (8002530 <MX_GPIO_Init+0xb4>)
 80024d4:	f043 0304 	orr.w	r3, r3, #4
 80024d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024da:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <MX_GPIO_Init+0xb4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <MX_GPIO_Init+0xb4>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	4a10      	ldr	r2, [pc, #64]	@ (8002530 <MX_GPIO_Init+0xb4>)
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002530 <MX_GPIO_Init+0xb4>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8002502:	2200      	movs	r2, #0
 8002504:	2158      	movs	r1, #88	@ 0x58
 8002506:	480b      	ldr	r0, [pc, #44]	@ (8002534 <MX_GPIO_Init+0xb8>)
 8002508:	f002 fb42 	bl	8004b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 800250c:	2358      	movs	r3, #88	@ 0x58
 800250e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002510:	2301      	movs	r3, #1
 8002512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002518:	2300      	movs	r3, #0
 800251a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	4619      	mov	r1, r3
 8002522:	4804      	ldr	r0, [pc, #16]	@ (8002534 <MX_GPIO_Init+0xb8>)
 8002524:	f002 f998 	bl	8004858 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002528:	bf00      	nop
 800252a:	3728      	adds	r7, #40	@ 0x28
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40023800 	.word	0x40023800
 8002534:	40020c00 	.word	0x40020c00

08002538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800253c:	b672      	cpsid	i
}
 800253e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <Error_Handler+0x8>

08002544 <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 8002548:	2201      	movs	r2, #1
 800254a:	4903      	ldr	r1, [pc, #12]	@ (8002558 <init_cardSD+0x14>)
 800254c:	4803      	ldr	r0, [pc, #12]	@ (800255c <init_cardSD+0x18>)
 800254e:	f008 ffe1 	bl	800b514 <f_mount>

}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	0800cc58 	.word	0x0800cc58
 800255c:	20000330 	.word	0x20000330

08002560 <string_to_int>:
}



inline static uint16_t string_to_int(char *string)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]

	while((*string) != '\n')
 800256c:	e015      	b.n	800259a <string_to_int+0x3a>
	{
		if(((*string) >= '0') && ((*string)<='9'))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b2f      	cmp	r3, #47	@ 0x2f
 8002574:	d90e      	bls.n	8002594 <string_to_int+0x34>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b39      	cmp	r3, #57	@ 0x39
 800257c:	d80a      	bhi.n	8002594 <string_to_int+0x34>
		{
			number = number * 10 + ((*string) - '0');
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	461a      	mov	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	3b30      	subs	r3, #48	@ 0x30
 8002592:	60fb      	str	r3, [r7, #12]
		}

		string++;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3301      	adds	r3, #1
 8002598:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b0a      	cmp	r3, #10
 80025a0:	d1e5      	bne.n	800256e <string_to_int+0xe>
	}

	return number;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	b29b      	uxth	r3, r3
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <assign_filePath>:

}


char* assign_filePath(const char *filePathName)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
	 * Output: adresa char* catre calea
	 * ! alocat dinamic
	 */

	char *string;
	uint8_t i = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]


	while(filePathName[i] != '\0')
 80025be:	e002      	b.n	80025c6 <assign_filePath+0x14>
	{
		i++;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	3301      	adds	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
	while(filePathName[i] != '\0')
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f6      	bne.n	80025c0 <assign_filePath+0xe>
	}

	i++;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	3301      	adds	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]

	string = (char*)malloc(sizeof(char)*i);
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	4618      	mov	r0, r3
 80025dc:	f00a f900 	bl	800c7e0 <malloc>
 80025e0:	4603      	mov	r3, r0
 80025e2:	60bb      	str	r3, [r7, #8]
	memcpy(string, filePathName, i);
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	461a      	mov	r2, r3
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	68b8      	ldr	r0, [r7, #8]
 80025ec:	f00a fa40 	bl	800ca70 <memcpy>

	return string;
 80025f0:	68bb      	ldr	r3, [r7, #8]


}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <read_audio_file>:




void read_audio_file(char *filePathName, uint32_t *buffer, bool *flagAudioDone)
{
 80025fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002600:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 8002604:	af00      	add	r7, sp, #0
 8002606:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800260a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800260e:	6018      	str	r0, [r3, #0]
 8002610:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002614:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002618:	6019      	str	r1, [r3, #0]
 800261a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800261e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	466b      	mov	r3, sp
 8002626:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8002628:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800262c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8002630:	f107 0020 	add.w	r0, r7, #32
 8002634:	2201      	movs	r2, #1
 8002636:	6819      	ldr	r1, [r3, #0]
 8002638:	f008 ffb2 	bl	800b5a0 <f_open>
 800263c:	4603      	mov	r3, r0
 800263e:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f

	if(res != FR_OK)
 8002642:	f897 325f 	ldrb.w	r3, [r7, #607]	@ 0x25f
 8002646:	2b00      	cmp	r3, #0
 8002648:	f040 8101 	bne.w	800284e <read_audio_file+0x252>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 800264c:	4b83      	ldr	r3, [pc, #524]	@ (800285c <read_audio_file+0x260>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	f107 0320 	add.w	r3, r7, #32
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f009 fcb8 	bl	800bfcc <f_lseek>


	if(flagNewAudioFile == 1)
 800265c:	4b80      	ldr	r3, [pc, #512]	@ (8002860 <read_audio_file+0x264>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d017      	beq.n	8002694 <read_audio_file+0x98>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		*/

		flagNewAudioFile = 0;
 8002664:	4b7e      	ldr	r3, [pc, #504]	@ (8002860 <read_audio_file+0x264>)
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 800266a:	4b7e      	ldr	r3, [pc, #504]	@ (8002864 <read_audio_file+0x268>)
 800266c:	2200      	movs	r2, #0
 800266e:	801a      	strh	r2, [r3, #0]

		currentPosition = 0;
 8002670:	4b7a      	ldr	r3, [pc, #488]	@ (800285c <read_audio_file+0x260>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul la inceputul fisierului*/
 8002676:	4b79      	ldr	r3, [pc, #484]	@ (800285c <read_audio_file+0x260>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	f107 0320 	add.w	r3, r7, #32
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f009 fca3 	bl	800bfcc <f_lseek>

		fileSize = f_size(&file); /*Aflam dimensiune in octeti a fisierului*/
 8002686:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800268a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a75      	ldr	r2, [pc, #468]	@ (8002868 <read_audio_file+0x26c>)
 8002692:	6013      	str	r3, [r2, #0]
	}

	const int n = 5120; /*1024 *5 caractere de prelucrat*/
 8002694:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002698:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
	unsigned int nrFrames = fileSize / n;
 800269c:	4b72      	ldr	r3, [pc, #456]	@ (8002868 <read_audio_file+0x26c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

	if(fileSize%n != 0)
 80026ac:	4b6e      	ldr	r3, [pc, #440]	@ (8002868 <read_audio_file+0x26c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 80026b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80026b8:	fb01 f202 	mul.w	r2, r1, r2
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <read_audio_file+0xd0>
	{
		nrFrames++;
 80026c2:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80026c6:	3301      	adds	r3, #1
 80026c8:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
	}

	uint8_t index = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	char tempBuffer[n];
 80026d2:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80026d6:	3b01      	subs	r3, #1
 80026d8:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 80026dc:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80026e0:	2200      	movs	r2, #0
 80026e2:	4698      	mov	r8, r3
 80026e4:	4691      	mov	r9, r2
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026fa:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80026fe:	2200      	movs	r2, #0
 8002700:	461c      	mov	r4, r3
 8002702:	4615      	mov	r5, r2
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	00eb      	lsls	r3, r5, #3
 800270e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002712:	00e2      	lsls	r2, r4, #3
 8002714:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8002718:	3307      	adds	r3, #7
 800271a:	08db      	lsrs	r3, r3, #3
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	ebad 0d03 	sub.w	sp, sp, r3
 8002722:	466b      	mov	r3, sp
 8002724:	3300      	adds	r3, #0
 8002726:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	char nrCharBuffer[5];

	f_read(&file, tempBuffer, (sizeof(char)*n)-1, &byteRead);
 800272a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800272e:	1e5a      	subs	r2, r3, #1
 8002730:	f107 031c 	add.w	r3, r7, #28
 8002734:	f107 0020 	add.w	r0, r7, #32
 8002738:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 800273c:	f009 f8ea 	bl	800b914 <f_read>
	tempBuffer[byteRead] = '\n';
 8002740:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002744:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 800274e:	210a      	movs	r1, #10
 8002750:	54d1      	strb	r1, [r2, r3]


	for(uint16_t i=0; i< byteRead; i++)
 8002752:	2300      	movs	r3, #0
 8002754:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 8002758:	e040      	b.n	80027dc <read_audio_file+0x1e0>
		/*
		 * Vom parcurge tempBuffer si vom transforma caracterele citite
		 * in numere zecimale de interes
		 */

		if(tempBuffer[i] != '\n')
 800275a:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 800275e:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8002762:	5cd3      	ldrb	r3, [r2, r3]
 8002764:	2b0a      	cmp	r3, #10
 8002766:	d011      	beq.n	800278c <read_audio_file+0x190>
		{
			nrCharBuffer[index] = tempBuffer[i];
 8002768:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 800276c:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8002770:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8002774:	5c89      	ldrb	r1, [r1, r2]
 8002776:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800277a:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 800277e:	54d1      	strb	r1, [r2, r3]
			index++;
 8002780:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8002784:	3301      	adds	r3, #1
 8002786:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
 800278a:	e022      	b.n	80027d2 <read_audio_file+0x1d6>
		else
		{
			/*Vom avea in nrCharBuffer esantionul in char si il vom
			 * converti la int*/

			nrCharBuffer[index] = '\n';
 800278c:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8002790:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8002794:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8002798:	210a      	movs	r1, #10
 800279a:	54d1      	strb	r1, [r2, r3]
			*buffer = string_to_int(nrCharBuffer);
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fedd 	bl	8002560 <string_to_int>
 80027a6:	4603      	mov	r3, r0
 80027a8:	461a      	mov	r2, r3
 80027aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80027ae:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	601a      	str	r2, [r3, #0]
			buffer++;
 80027b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80027ba:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80027be:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80027c2:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	3204      	adds	r2, #4
 80027ca:	601a      	str	r2, [r3, #0]

			index = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	for(uint16_t i=0; i< byteRead; i++)
 80027d2:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 80027d6:	3301      	adds	r3, #1
 80027d8:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 80027dc:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 80027e0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80027e4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d3b5      	bcc.n	800275a <read_audio_file+0x15e>


	}


	if(currentFrame == nrFrames)
 80027ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002864 <read_audio_file+0x268>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d10f      	bne.n	800281c <read_audio_file+0x220>
	{
		/*Resetare flag pentru reinitializare*/

		flagNewAudioFile = 1;
 80027fc:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <read_audio_file+0x264>)
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
		*flagAudioDone = 1;
 8002802:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002806:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]

		f_close(&file);
 8002810:	f107 0320 	add.w	r3, r7, #32
 8002814:	4618      	mov	r0, r3
 8002816:	f009 fbaf 	bl	800bf78 <f_close>
		return;
 800281a:	e018      	b.n	800284e <read_audio_file+0x252>
	}

	currentFrame++;
 800281c:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <read_audio_file+0x268>)
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	3301      	adds	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	4b0f      	ldr	r3, [pc, #60]	@ (8002864 <read_audio_file+0x268>)
 8002826:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 8002828:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800282c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	4a0a      	ldr	r2, [pc, #40]	@ (800285c <read_audio_file+0x260>)
 8002834:	6013      	str	r3, [r2, #0]
	currentPosition++;
 8002836:	4b09      	ldr	r3, [pc, #36]	@ (800285c <read_audio_file+0x260>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3301      	adds	r3, #1
 800283c:	4a07      	ldr	r2, [pc, #28]	@ (800285c <read_audio_file+0x260>)
 800283e:	6013      	str	r3, [r2, #0]

	f_close(&file);
 8002840:	f107 0320 	add.w	r3, r7, #32
 8002844:	4618      	mov	r0, r3
 8002846:	f009 fb97 	bl	800bf78 <f_close>
 800284a:	46b5      	mov	sp, r6
 800284c:	e000      	b.n	8002850 <read_audio_file+0x254>
		return;
 800284e:	46b5      	mov	sp, r6


}
 8002850:	f507 771b 	add.w	r7, r7, #620	@ 0x26c
 8002854:	46bd      	mov	sp, r7
 8002856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800285a:	bf00      	nop
 800285c:	20000560 	.word	0x20000560
 8002860:	20000008 	.word	0x20000008
 8002864:	20000564 	.word	0x20000564
 8002868:	20000568 	.word	0x20000568

0800286c <read_image_file>:


void read_image_file(char *filePathName, ENTITY *entity, uint16_t *indexFlag, bool *flagImgDone)
{
 800286c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002870:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8002874:	af00      	add	r7, sp, #0
 8002876:	f507 7616 	add.w	r6, r7, #600	@ 0x258
 800287a:	f5a6 7613 	sub.w	r6, r6, #588	@ 0x24c
 800287e:	6030      	str	r0, [r6, #0]
 8002880:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 8002884:	f5a0 7014 	sub.w	r0, r0, #592	@ 0x250
 8002888:	6001      	str	r1, [r0, #0]
 800288a:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 800288e:	f5a1 7115 	sub.w	r1, r1, #596	@ 0x254
 8002892:	600a      	str	r2, [r1, #0]
 8002894:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8002898:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	466b      	mov	r3, sp
 80028a0:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 80028a2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80028a6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80028aa:	f107 001c 	add.w	r0, r7, #28
 80028ae:	2201      	movs	r2, #1
 80028b0:	6819      	ldr	r1, [r3, #0]
 80028b2:	f008 fe75 	bl	800b5a0 <f_open>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255

	if(res != FR_OK)
 80028bc:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f040 81b0 	bne.w	8002c26 <read_image_file+0x3ba>
	static const int n = 3072;
	static unsigned int nrFrames = 0;



	if(flagNewImageFile == 1)
 80028c6:	4ba9      	ldr	r3, [pc, #676]	@ (8002b6c <read_image_file+0x300>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80d6 	beq.w	8002a7c <read_image_file+0x210>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 80028d0:	4ba7      	ldr	r3, [pc, #668]	@ (8002b70 <read_image_file+0x304>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 80028d6:	4ba6      	ldr	r3, [pc, #664]	@ (8002b70 <read_image_file+0x304>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	f107 031c 	add.w	r3, r7, #28
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f009 fb73 	bl	800bfcc <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 80028e6:	f107 0318 	add.w	r3, r7, #24
 80028ea:	f107 0114 	add.w	r1, r7, #20
 80028ee:	f107 001c 	add.w	r0, r7, #28
 80028f2:	2204      	movs	r2, #4
 80028f4:	f009 f80e 	bl	800b914 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 80028f8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80028fc:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8002906:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800290a:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2200      	movs	r2, #0
 8002912:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8002914:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002918:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002922:	461a      	mov	r2, r3
 8002924:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002928:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800292c:	785b      	ldrb	r3, [r3, #1]
 800292e:	4313      	orrs	r3, r2
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	b21a      	sxth	r2, r3
 8002934:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002938:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8002942:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002946:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	b21b      	sxth	r3, r3
 800294e:	430b      	orrs	r3, r1
 8002950:	b21b      	sxth	r3, r3
 8002952:	4313      	orrs	r3, r2
 8002954:	b21a      	sxth	r2, r3
 8002956:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800295a:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8002962:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002966:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002970:	461a      	mov	r2, r3
 8002972:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002976:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800297a:	78db      	ldrb	r3, [r3, #3]
 800297c:	4313      	orrs	r3, r2
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	b21a      	sxth	r2, r3
 8002982:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002986:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8002990:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002994:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002998:	789b      	ldrb	r3, [r3, #2]
 800299a:	b21b      	sxth	r3, r3
 800299c:	430b      	orrs	r3, r1
 800299e:	b21b      	sxth	r3, r3
 80029a0:	4313      	orrs	r3, r2
 80029a2:	b21a      	sxth	r2, r3
 80029a4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029a8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	811a      	strh	r2, [r3, #8]


		if((entity->x1)*(entity->y1) < 1024)
 80029b0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029b4:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80029be:	461a      	mov	r2, r3
 80029c0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029c4:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d6:	da1f      	bge.n	8002a18 <read_image_file+0x1ac>
		{
			/*Pentru un singur frame alocam exact cat trebuie */
			entity->data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 80029d8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029dc:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80029e6:	461a      	mov	r2, r3
 80029e8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029ec:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029f6:	fb03 f202 	mul.w	r2, r3, r2
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f009 feed 	bl	800c7e0 <malloc>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a0e:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	e00b      	b.n	8002a30 <read_image_file+0x1c4>
		}

		else
		{
			/*Alocam maxim 3072 de octeti per frame*/
			entity->data = malloc(sizeof(char)*3072);
 8002a18:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002a1c:	f009 fee0 	bl	800c7e0 <malloc>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a28:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60da      	str	r2, [r3, #12]
		}

		flagNewImageFile = 0;
 8002a30:	4b4e      	ldr	r3, [pc, #312]	@ (8002b6c <read_image_file+0x300>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8002a36:	4b4f      	ldr	r3, [pc, #316]	@ (8002b74 <read_image_file+0x308>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	801a      	strh	r2, [r3, #0]

		currentPosition = byteRead;
 8002a3c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a40:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a4a      	ldr	r2, [pc, #296]	@ (8002b70 <read_image_file+0x304>)
 8002a48:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8002a4a:	4b49      	ldr	r3, [pc, #292]	@ (8002b70 <read_image_file+0x304>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	f107 031c 	add.w	r3, r7, #28
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f009 fab9 	bl	800bfcc <f_lseek>

		/*Aflam dimensiune in octeti a imaginii de citit (scadem dimensiunea headerului)*/
		fileSize = f_size(&file) - 4;
 8002a5a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a5e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	3b04      	subs	r3, #4
 8002a66:	4a44      	ldr	r2, [pc, #272]	@ (8002b78 <read_image_file+0x30c>)
 8002a68:	6013      	str	r3, [r2, #0]

		/*calculam numarul de frameuri*/

		nrFrames = fileSize / n;
 8002a6a:	4b43      	ldr	r3, [pc, #268]	@ (8002b78 <read_image_file+0x30c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a43      	ldr	r2, [pc, #268]	@ (8002b7c <read_image_file+0x310>)
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a76:	4a42      	ldr	r2, [pc, #264]	@ (8002b80 <read_image_file+0x314>)
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e007      	b.n	8002a8c <read_image_file+0x220>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8002a7c:	4b3c      	ldr	r3, [pc, #240]	@ (8002b70 <read_image_file+0x304>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f107 031c 	add.w	r3, r7, #28
 8002a84:	4611      	mov	r1, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f009 faa0 	bl	800bfcc <f_lseek>
	}



	if(fileSize == n)
 8002a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b78 <read_image_file+0x30c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a3a      	ldr	r2, [pc, #232]	@ (8002b7c <read_image_file+0x310>)
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d104      	bne.n	8002aa2 <read_image_file+0x236>
	{
		nrFrames--; /*pastram logica primului frame pana la n*/
 8002a98:	4b39      	ldr	r3, [pc, #228]	@ (8002b80 <read_image_file+0x314>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	4a38      	ldr	r2, [pc, #224]	@ (8002b80 <read_image_file+0x314>)
 8002aa0:	6013      	str	r3, [r2, #0]
	}

	if(fileSize%n != 0 && nrFrames!=0)
 8002aa2:	4b35      	ldr	r3, [pc, #212]	@ (8002b78 <read_image_file+0x30c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a35      	ldr	r2, [pc, #212]	@ (8002b7c <read_image_file+0x310>)
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8002aae:	fb01 f202 	mul.w	r2, r1, r2
 8002ab2:	1a9b      	subs	r3, r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <read_image_file+0x25e>
 8002ab8:	4b31      	ldr	r3, [pc, #196]	@ (8002b80 <read_image_file+0x314>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d004      	beq.n	8002aca <read_image_file+0x25e>
	{
		nrFrames++;
 8002ac0:	4b2f      	ldr	r3, [pc, #188]	@ (8002b80 <read_image_file+0x314>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	4a2e      	ldr	r2, [pc, #184]	@ (8002b80 <read_image_file+0x314>)
 8002ac8:	6013      	str	r3, [r2, #0]
	}

	*indexFlag = 0;
 8002aca:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ace:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	801a      	strh	r2, [r3, #0]
	char tempBuffer[n];
 8002ad8:	4b28      	ldr	r3, [pc, #160]	@ (8002b7c <read_image_file+0x310>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8002ae2:	4b26      	ldr	r3, [pc, #152]	@ (8002b7c <read_image_file+0x310>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	2300      	movs	r3, #0
 8002aea:	4690      	mov	r8, r2
 8002aec:	4699      	mov	r9, r3
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b02:	4b1e      	ldr	r3, [pc, #120]	@ (8002b7c <read_image_file+0x310>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	2300      	movs	r3, #0
 8002b0a:	4614      	mov	r4, r2
 8002b0c:	461d      	mov	r5, r3
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	00eb      	lsls	r3, r5, #3
 8002b18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b1c:	00e2      	lsls	r2, r4, #3
 8002b1e:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <read_image_file+0x310>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3307      	adds	r3, #7
 8002b24:	08db      	lsrs	r3, r3, #3
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	ebad 0d03 	sub.w	sp, sp, r3
 8002b2c:	466b      	mov	r3, sp
 8002b2e:	3300      	adds	r3, #0
 8002b30:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

	f_read(&file, tempBuffer, (sizeof(char)*n), &byteRead);
 8002b34:	4b11      	ldr	r3, [pc, #68]	@ (8002b7c <read_image_file+0x310>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f107 0318 	add.w	r3, r7, #24
 8002b3e:	f107 001c 	add.w	r0, r7, #28
 8002b42:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8002b46:	f008 fee5 	bl	800b914 <f_read>
	(*indexFlag) = byteRead;
 8002b4a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b4e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b5a:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	801a      	strh	r2, [r3, #0]

	for(uint16_t i=0; i<byteRead; i++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8002b68:	e020      	b.n	8002bac <read_image_file+0x340>
 8002b6a:	bf00      	nop
 8002b6c:	20000009 	.word	0x20000009
 8002b70:	2000056c 	.word	0x2000056c
 8002b74:	20000570 	.word	0x20000570
 8002b78:	20000574 	.word	0x20000574
 8002b7c:	0800d9fc 	.word	0x0800d9fc
 8002b80:	20000578 	.word	0x20000578
	{
		/*Vom parcurge bufferul la intervale de 2 valori HEXA, preluand caracterele ascii
		 * pe care le vom transforma in zecimal ex: FF1200FE3000...*/

		entity->data[i] = tempBuffer[i];
 8002b84:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8002b88:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b8c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68d9      	ldr	r1, [r3, #12]
 8002b94:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8002b98:	440b      	add	r3, r1
 8002b9a:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8002b9e:	5c8a      	ldrb	r2, [r1, r2]
 8002ba0:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<byteRead; i++)
 8002ba2:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8002bac:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8002bb0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002bb4:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d3e2      	bcc.n	8002b84 <read_image_file+0x318>

	}


	currentFrame++;
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002c34 <read_image_file+0x3c8>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <read_image_file+0x3c8>)
 8002bc8:	801a      	strh	r2, [r3, #0]

	if((currentFrame >= nrFrames) || ((*(indexFlag)) < 3072))
 8002bca:	4b1a      	ldr	r3, [pc, #104]	@ (8002c34 <read_image_file+0x3c8>)
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4b19      	ldr	r3, [pc, #100]	@ (8002c38 <read_image_file+0x3cc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d208      	bcs.n	8002bea <read_image_file+0x37e>
 8002bd8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002bdc:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002be8:	d20f      	bcs.n	8002c0a <read_image_file+0x39e>
	{
		/*Resetare flag pentru reinitializare*/

		*flagImgDone = 1;
 8002bea:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002bee:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]

		flagNewImageFile = 1;
 8002bf8:	4b10      	ldr	r3, [pc, #64]	@ (8002c3c <read_image_file+0x3d0>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8002bfe:	f107 031c 	add.w	r3, r7, #28
 8002c02:	4618      	mov	r0, r3
 8002c04:	f009 f9b8 	bl	800bf78 <f_close>
		return;
 8002c08:	e00d      	b.n	8002c26 <read_image_file+0x3ba>
	}


	currentPosition = f_tell(&file);
 8002c0a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002c0e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	4a0a      	ldr	r2, [pc, #40]	@ (8002c40 <read_image_file+0x3d4>)
 8002c16:	6013      	str	r3, [r2, #0]


	f_close(&file);
 8002c18:	f107 031c 	add.w	r3, r7, #28
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f009 f9ab 	bl	800bf78 <f_close>
 8002c22:	46b5      	mov	sp, r6
 8002c24:	e000      	b.n	8002c28 <read_image_file+0x3bc>
		return;
 8002c26:	46b5      	mov	sp, r6


}
 8002c28:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c32:	bf00      	nop
 8002c34:	20000570 	.word	0x20000570
 8002c38:	20000578 	.word	0x20000578
 8002c3c:	20000009 	.word	0x20000009
 8002c40:	2000056c 	.word	0x2000056c

08002c44 <frame_number_x>:



static uint16_t frame_number_x(ENTITY *entity, const float factor)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	ed87 0a02 	vstr	s0, [r7, #8]

	uint8_t x = 1;
 8002c50:	2301      	movs	r3, #1
 8002c52:	75fb      	strb	r3, [r7, #23]

	if(factor > 1)
 8002c54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c64:	dd33      	ble.n	8002cce <frame_number_x+0x8a>
	{
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8002c66:	e00b      	b.n	8002c80 <frame_number_x+0x3c>
		{
			if(x == entity->y1)
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d102      	bne.n	8002c7a <frame_number_x+0x36>
			{
				return x;
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	e05f      	b.n	8002d3a <frame_number_x+0xf6>
			}

			x++;
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c96:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	ee07 3a90 	vmov	s15, r3
 8002ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cac:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002d48 <frame_number_x+0x104>
 8002cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb8:	d9d6      	bls.n	8002c68 <frame_number_x+0x24>
		}


		if(x==1)
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <frame_number_x+0x80>
		{
			return 1;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e03a      	b.n	8002d3a <frame_number_x+0xf6>
		}

		else
		{
			return (x-1);
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	e035      	b.n	8002d3a <frame_number_x+0xf6>
	}


	else
	{
		x = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	75fb      	strb	r3, [r7, #23]

		while((((int)(entity->x1)*x) <= (32*32)))
 8002cd2:	e016      	b.n	8002d02 <frame_number_x+0xbe>
		{
			if(x == entity->y1)
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d102      	bne.n	8002ce6 <frame_number_x+0xa2>
			{
				return x;
 8002ce0:	7dfb      	ldrb	r3, [r7, #23]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	e029      	b.n	8002d3a <frame_number_x+0xf6>
			}

			x = x + (int)(1/factor);
 8002ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cea:	ed97 7a02 	vldr	s14, [r7, #8]
 8002cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf6:	edc7 7a01 	vstr	s15, [r7, #4]
 8002cfa:	793a      	ldrb	r2, [r7, #4]
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	4413      	add	r3, r2
 8002d00:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*x) <= (32*32)))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d14:	ddde      	ble.n	8002cd4 <frame_number_x+0x90>
		}


		return (x-(1/factor));
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
 8002d18:	ee07 3a90 	vmov	s15, r3
 8002d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d20:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8002d24:	edd7 6a02 	vldr	s13, [r7, #8]
 8002d28:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d34:	ee17 3a90 	vmov	r3, s15
 8002d38:	b29b      	uxth	r3, r3

	}


}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	44800000 	.word	0x44800000

08002d4c <read_image_file_scaling>:



void read_image_file_scaling(char *filePathName, ENTITY *entity, const float factor, uint16_t *px, bool *flagTerm)
{
 8002d4c:	b590      	push	{r4, r7, lr}
 8002d4e:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8002d58:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8002d5c:	6020      	str	r0, [r4, #0]
 8002d5e:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 8002d62:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8002d66:	6001      	str	r1, [r0, #0]
 8002d68:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8002d6c:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8002d70:	ed81 0a00 	vstr	s0, [r1]
 8002d74:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8002d78:	f5a1 7114 	sub.w	r1, r1, #592	@ 0x250
 8002d7c:	600a      	str	r2, [r1, #0]
 8002d7e:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8002d82:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8002d86:	6013      	str	r3, [r2, #0]

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8002d88:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002d8c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002d90:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002d94:	2201      	movs	r2, #1
 8002d96:	6819      	ldr	r1, [r3, #0]
 8002d98:	f008 fc02 	bl	800b5a0 <f_open>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 8002da2:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 81be 	bne.w	8003128 <read_image_file_scaling+0x3dc>
	static FSIZE_t currentPosition = 0;

	static uint16_t x = 0; /*Numarul de linii din M1 ai sa avem sub 32x32 pixeli de prelucrat in M2*/
	static unsigned int nrFrames = 0;

	if(flagNewImageFile == 1)
 8002dac:	4ba9      	ldr	r3, [pc, #676]	@ (8003054 <read_image_file_scaling+0x308>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8112 	beq.w	8002fda <read_image_file_scaling+0x28e>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 8002db6:	4ba8      	ldr	r3, [pc, #672]	@ (8003058 <read_image_file_scaling+0x30c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 8002dbc:	4ba6      	ldr	r3, [pc, #664]	@ (8003058 <read_image_file_scaling+0x30c>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f009 f900 	bl	800bfcc <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 8002dcc:	f107 0320 	add.w	r3, r7, #32
 8002dd0:	f107 011c 	add.w	r1, r7, #28
 8002dd4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002dd8:	2204      	movs	r2, #4
 8002dda:	f008 fd9b 	bl	800b914 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8002dde:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002de2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2200      	movs	r2, #0
 8002dea:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8002dec:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002df0:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2200      	movs	r2, #0
 8002df8:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8002dfa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002dfe:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e0e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002e12:	785b      	ldrb	r3, [r3, #1]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	b21a      	sxth	r2, r3
 8002e1a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e1e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8002e28:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e2c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b21b      	sxth	r3, r3
 8002e34:	430b      	orrs	r3, r1
 8002e36:	b21b      	sxth	r3, r3
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	b21a      	sxth	r2, r3
 8002e3c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e40:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8002e48:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e4c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e5c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002e60:	78db      	ldrb	r3, [r3, #3]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	021b      	lsls	r3, r3, #8
 8002e66:	b21a      	sxth	r2, r3
 8002e68:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e6c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8002e76:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e7a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002e7e:	789b      	ldrb	r3, [r3, #2]
 8002e80:	b21b      	sxth	r3, r3
 8002e82:	430b      	orrs	r3, r1
 8002e84:	b21b      	sxth	r3, r3
 8002e86:	4313      	orrs	r3, r2
 8002e88:	b21a      	sxth	r2, r3
 8002e8a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e8e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	811a      	strh	r2, [r3, #8]


		flagNewImageFile = 0;
 8002e96:	4b6f      	ldr	r3, [pc, #444]	@ (8003054 <read_image_file_scaling+0x308>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800305c <read_image_file_scaling+0x310>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	801a      	strh	r2, [r3, #0]
		flagOneFrame = 0;
 8002ea2:	4b6f      	ldr	r3, [pc, #444]	@ (8003060 <read_image_file_scaling+0x314>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]

		currentPosition = byteRead;
 8002ea8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002eac:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a69      	ldr	r2, [pc, #420]	@ (8003058 <read_image_file_scaling+0x30c>)
 8002eb4:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8002eb6:	4b68      	ldr	r3, [pc, #416]	@ (8003058 <read_image_file_scaling+0x30c>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f009 f883 	bl	800bfcc <f_lseek>


		x = frame_number_x(entity, factor); /*numarul de linii cuprins in fiecare frame al matricei M1*/
 8002ec6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002eca:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 8002ece:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ed2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002ed6:	ed92 0a00 	vldr	s0, [r2]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	f7ff feb2 	bl	8002c44 <frame_number_x>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4b5f      	ldr	r3, [pc, #380]	@ (8003064 <read_image_file_scaling+0x318>)
 8002ee6:	801a      	strh	r2, [r3, #0]
		*px = x;
 8002ee8:	4b5e      	ldr	r3, [pc, #376]	@ (8003064 <read_image_file_scaling+0x318>)
 8002eea:	881a      	ldrh	r2, [r3, #0]
 8002eec:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ef0:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	801a      	strh	r2, [r3, #0]

		if(x == entity->y1)
 8002ef8:	4b5a      	ldr	r3, [pc, #360]	@ (8003064 <read_image_file_scaling+0x318>)
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f02:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d125      	bne.n	8002f5c <read_image_file_scaling+0x210>
		{
			flagOneFrame = 1;
 8002f10:	4b53      	ldr	r3, [pc, #332]	@ (8003060 <read_image_file_scaling+0x314>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
			nrFrames = 1; /*Avem o imagine care scalata are mai putini de 32x32 pixeli*/
 8002f16:	4b54      	ldr	r3, [pc, #336]	@ (8003068 <read_image_file_scaling+0x31c>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
			entity->data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8002f1c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f20:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f30:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f3a:	fb03 f202 	mul.w	r2, r3, r2
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f009 fc4b 	bl	800c7e0 <malloc>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f52:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	e046      	b.n	8002fea <read_image_file_scaling+0x29e>

		}

		else
		{
			entity->data = malloc(3*sizeof(char)*(entity->x1)*x);
 8002f5c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f60:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b3d      	ldr	r3, [pc, #244]	@ (8003064 <read_image_file_scaling+0x318>)
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	fb03 f202 	mul.w	r2, r3, r2
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f009 fc30 	bl	800c7e0 <malloc>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f88:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60da      	str	r2, [r3, #12]

			nrFrames = (entity->y1) / x;
 8002f90:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f94:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4b30      	ldr	r3, [pc, #192]	@ (8003064 <read_image_file_scaling+0x318>)
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	fb92 f3f3 	sdiv	r3, r2, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b2f      	ldr	r3, [pc, #188]	@ (8003068 <read_image_file_scaling+0x31c>)
 8002fac:	601a      	str	r2, [r3, #0]

			if((entity->y1) % x != 0)
 8002fae:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002fb2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fbc:	4a29      	ldr	r2, [pc, #164]	@ (8003064 <read_image_file_scaling+0x318>)
 8002fbe:	8812      	ldrh	r2, [r2, #0]
 8002fc0:	fb93 f1f2 	sdiv	r1, r3, r2
 8002fc4:	fb01 f202 	mul.w	r2, r1, r2
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00d      	beq.n	8002fea <read_image_file_scaling+0x29e>
			{
				nrFrames++;
 8002fce:	4b26      	ldr	r3, [pc, #152]	@ (8003068 <read_image_file_scaling+0x31c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	4a24      	ldr	r2, [pc, #144]	@ (8003068 <read_image_file_scaling+0x31c>)
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	e007      	b.n	8002fea <read_image_file_scaling+0x29e>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8002fda:	4b1f      	ldr	r3, [pc, #124]	@ (8003058 <read_image_file_scaling+0x30c>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f008 fff1 	bl	800bfcc <f_lseek>
	}


	/*Vom pune in entity->data primele valori*/

	if(flagOneFrame == 1)
 8002fea:	4b1d      	ldr	r3, [pc, #116]	@ (8003060 <read_image_file_scaling+0x314>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d03c      	beq.n	800306c <read_image_file_scaling+0x320>
	{
		f_read(&file, entity->data, (3*sizeof(char)*(entity->x1)*(entity->y1)), &byteRead);
 8002ff2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ff6:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68d9      	ldr	r1, [r3, #12]
 8002ffe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003002:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800300c:	461a      	mov	r2, r3
 800300e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003012:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800301c:	fb03 f202 	mul.w	r2, r3, r2
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	441a      	add	r2, r3
 8003026:	f107 0320 	add.w	r3, r7, #32
 800302a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800302e:	f008 fc71 	bl	800b914 <f_read>

		*flagTerm = 1;
 8003032:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003036:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2201      	movs	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]
		flagNewImageFile = 1;
 8003040:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <read_image_file_scaling+0x308>)
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8003046:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800304a:	4618      	mov	r0, r3
 800304c:	f008 ff94 	bl	800bf78 <f_close>
		return;
 8003050:	e06b      	b.n	800312a <read_image_file_scaling+0x3de>
 8003052:	bf00      	nop
 8003054:	2000000a 	.word	0x2000000a
 8003058:	2000057c 	.word	0x2000057c
 800305c:	20000580 	.word	0x20000580
 8003060:	20000582 	.word	0x20000582
 8003064:	20000584 	.word	0x20000584
 8003068:	20000588 	.word	0x20000588

	}

	else
	{
		f_read(&file, entity->data, (3*sizeof(char)*(entity->x1)*x), &byteRead);
 800306c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003070:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68d9      	ldr	r1, [r3, #12]
 8003078:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800307c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003086:	461a      	mov	r2, r3
 8003088:	4b2a      	ldr	r3, [pc, #168]	@ (8003134 <read_image_file_scaling+0x3e8>)
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	fb03 f202 	mul.w	r2, r3, r2
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	441a      	add	r2, r3
 8003096:	f107 0320 	add.w	r3, r7, #32
 800309a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800309e:	f008 fc39 	bl	800b914 <f_read>

		currentFrame++;
 80030a2:	4b25      	ldr	r3, [pc, #148]	@ (8003138 <read_image_file_scaling+0x3ec>)
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	3301      	adds	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	4b23      	ldr	r3, [pc, #140]	@ (8003138 <read_image_file_scaling+0x3ec>)
 80030ac:	801a      	strh	r2, [r3, #0]

		if((currentFrame >= nrFrames))
 80030ae:	4b22      	ldr	r3, [pc, #136]	@ (8003138 <read_image_file_scaling+0x3ec>)
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b21      	ldr	r3, [pc, #132]	@ (800313c <read_image_file_scaling+0x3f0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d328      	bcc.n	800310e <read_image_file_scaling+0x3c2>
		{
			*px = (entity->y1) - x*(nrFrames-1); /*recalculam ultimul numar de linii de citit*/
 80030bc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80030c0:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <read_image_file_scaling+0x3f0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b299      	uxth	r1, r3
 80030d4:	4b17      	ldr	r3, [pc, #92]	@ (8003134 <read_image_file_scaling+0x3e8>)
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	fb11 f303 	smulbb	r3, r1, r3
 80030dc:	b29b      	uxth	r3, r3
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80030e6:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	801a      	strh	r2, [r3, #0]
			*flagTerm = 1;
 80030ee:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80030f2:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]
			flagNewImageFile = 1;
 80030fc:	4b10      	ldr	r3, [pc, #64]	@ (8003140 <read_image_file_scaling+0x3f4>)
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
			f_close(&file);
 8003102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003106:	4618      	mov	r0, r3
 8003108:	f008 ff36 	bl	800bf78 <f_close>
			return;
 800310c:	e00d      	b.n	800312a <read_image_file_scaling+0x3de>
		}



		currentPosition = f_tell(&file);
 800310e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003112:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	4a0a      	ldr	r2, [pc, #40]	@ (8003144 <read_image_file_scaling+0x3f8>)
 800311a:	6013      	str	r3, [r2, #0]
		f_close(&file);
 800311c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003120:	4618      	mov	r0, r3
 8003122:	f008 ff29 	bl	800bf78 <f_close>
 8003126:	e000      	b.n	800312a <read_image_file_scaling+0x3de>
		return;
 8003128:	bf00      	nop

	}



}
 800312a:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 800312e:	46bd      	mov	sp, r7
 8003130:	bd90      	pop	{r4, r7, pc}
 8003132:	bf00      	nop
 8003134:	20000584 	.word	0x20000584
 8003138:	20000580 	.word	0x20000580
 800313c:	20000588 	.word	0x20000588
 8003140:	2000000a 	.word	0x2000000a
 8003144:	2000057c 	.word	0x2000057c

08003148 <write_image_file>:



void write_image_file(char *filePathName, uint8_t *data, size_t nrBytesData, int16_t x1, int16_t y1, bool flagTerm)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 800314e:	af00      	add	r7, sp, #0
 8003150:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8003154:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8003158:	6020      	str	r0, [r4, #0]
 800315a:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 800315e:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8003162:	6001      	str	r1, [r0, #0]
 8003164:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8003168:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 800316c:	600a      	str	r2, [r1, #0]
 800316e:	461a      	mov	r2, r3
 8003170:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003174:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003178:	801a      	strh	r2, [r3, #0]


	static bool flagStart = 0;
	static FSIZE_t currentPosition = 0;

	if(flagStart == 0)
 800317a:	4b4b      	ldr	r3, [pc, #300]	@ (80032a8 <write_image_file+0x160>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	f083 0301 	eor.w	r3, r3, #1
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d04b      	beq.n	8003220 <write_image_file+0xd8>
	{

		res = f_open(&file, filePathName, FA_WRITE | FA_CREATE_ALWAYS);
 8003188:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800318c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003190:	f107 001c 	add.w	r0, r7, #28
 8003194:	220a      	movs	r2, #10
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	f008 fa02 	bl	800b5a0 <f_open>
 800319c:	4603      	mov	r3, r0
 800319e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f


		if (res != FR_OK)
 80031a2:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d177      	bne.n	800329a <write_image_file+0x152>
		{
		    return;
		}


		currentPosition = 0;
 80031aa:	4b40      	ldr	r3, [pc, #256]	@ (80032ac <write_image_file+0x164>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
		/*
		 * Scriem mai intai headerul anume
		 * dimensiunea imaginii asociate
		 */

		header[0] = (int8_t)(x1);
 80031b0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031b4:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031c0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80031c4:	701a      	strb	r2, [r3, #0]
		header[1] = (int8_t)(x1>>8);
 80031c6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031ca:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 80031ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d2:	121b      	asrs	r3, r3, #8
 80031d4:	b21b      	sxth	r3, r3
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031dc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80031e0:	705a      	strb	r2, [r3, #1]
		header[2] = (int8_t)(y1);
 80031e2:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031ec:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80031f0:	709a      	strb	r2, [r3, #2]
		header[3] = (int8_t)(y1>>8);
 80031f2:	f9b7 3260 	ldrsh.w	r3, [r7, #608]	@ 0x260
 80031f6:	121b      	asrs	r3, r3, #8
 80031f8:	b21b      	sxth	r3, r3
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003200:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003204:	70da      	strb	r2, [r3, #3]

		f_write(&file, header, 4, &byteWr);
 8003206:	f107 0318 	add.w	r3, r7, #24
 800320a:	f107 0114 	add.w	r1, r7, #20
 800320e:	f107 001c 	add.w	r0, r7, #28
 8003212:	2204      	movs	r2, #4
 8003214:	f008 fcbd 	bl	800bb92 <f_write>

		flagStart = 1;
 8003218:	4b23      	ldr	r3, [pc, #140]	@ (80032a8 <write_image_file+0x160>)
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e018      	b.n	8003252 <write_image_file+0x10a>
	}


	else
	{
		res = f_open(&file, filePathName, FA_WRITE | FA_OPEN_ALWAYS);
 8003220:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003224:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003228:	f107 001c 	add.w	r0, r7, #28
 800322c:	2212      	movs	r2, #18
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	f008 f9b6 	bl	800b5a0 <f_open>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f

		if (res != FR_OK)
 800323a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800323e:	2b00      	cmp	r3, #0
 8003240:	d12d      	bne.n	800329e <write_image_file+0x156>
		{
		    return;
		}

		f_lseek(&file, currentPosition);
 8003242:	4b1a      	ldr	r3, [pc, #104]	@ (80032ac <write_image_file+0x164>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	f107 031c 	add.w	r3, r7, #28
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f008 febd 	bl	800bfcc <f_lseek>

	}


	if(flagTerm == 1)
 8003252:	f897 3264 	ldrb.w	r3, [r7, #612]	@ 0x264
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <write_image_file+0x118>
	{
		flagStart = 0;
 800325a:	4b13      	ldr	r3, [pc, #76]	@ (80032a8 <write_image_file+0x160>)
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]

	}


	f_write(&file, data, nrBytesData, &byteWr);
 8003260:	f107 0318 	add.w	r3, r7, #24
 8003264:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8003268:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800326c:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8003270:	f5a1 7112 	sub.w	r1, r1, #584	@ 0x248
 8003274:	f107 001c 	add.w	r0, r7, #28
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	6809      	ldr	r1, [r1, #0]
 800327c:	f008 fc89 	bl	800bb92 <f_write>
	currentPosition = f_tell(&file);
 8003280:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003284:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	4a08      	ldr	r2, [pc, #32]	@ (80032ac <write_image_file+0x164>)
 800328c:	6013      	str	r3, [r2, #0]

	f_close(&file);
 800328e:	f107 031c 	add.w	r3, r7, #28
 8003292:	4618      	mov	r0, r3
 8003294:	f008 fe70 	bl	800bf78 <f_close>
 8003298:	e002      	b.n	80032a0 <write_image_file+0x158>
		    return;
 800329a:	bf00      	nop
 800329c:	e000      	b.n	80032a0 <write_image_file+0x158>
		    return;
 800329e:	bf00      	nop

}
 80032a0:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd90      	pop	{r4, r7, pc}
 80032a8:	2000058c 	.word	0x2000058c
 80032ac:	20000590 	.word	0x20000590

080032b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	4b10      	ldr	r3, [pc, #64]	@ (80032fc <HAL_MspInit+0x4c>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	4a0f      	ldr	r2, [pc, #60]	@ (80032fc <HAL_MspInit+0x4c>)
 80032c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032c6:	4b0d      	ldr	r3, [pc, #52]	@ (80032fc <HAL_MspInit+0x4c>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ce:	607b      	str	r3, [r7, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	4b09      	ldr	r3, [pc, #36]	@ (80032fc <HAL_MspInit+0x4c>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	4a08      	ldr	r2, [pc, #32]	@ (80032fc <HAL_MspInit+0x4c>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032e2:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <HAL_MspInit+0x4c>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	603b      	str	r3, [r7, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800

08003300 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	@ 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a30      	ldr	r2, [pc, #192]	@ (80033e0 <HAL_DAC_MspInit+0xe0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d159      	bne.n	80033d6 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	4b2f      	ldr	r3, [pc, #188]	@ (80033e4 <HAL_DAC_MspInit+0xe4>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	4a2e      	ldr	r2, [pc, #184]	@ (80033e4 <HAL_DAC_MspInit+0xe4>)
 800332c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003330:	6413      	str	r3, [r2, #64]	@ 0x40
 8003332:	4b2c      	ldr	r3, [pc, #176]	@ (80033e4 <HAL_DAC_MspInit+0xe4>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	4b28      	ldr	r3, [pc, #160]	@ (80033e4 <HAL_DAC_MspInit+0xe4>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	4a27      	ldr	r2, [pc, #156]	@ (80033e4 <HAL_DAC_MspInit+0xe4>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6313      	str	r3, [r2, #48]	@ 0x30
 800334e:	4b25      	ldr	r3, [pc, #148]	@ (80033e4 <HAL_DAC_MspInit+0xe4>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800335a:	2310      	movs	r3, #16
 800335c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800335e:	2303      	movs	r3, #3
 8003360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003366:	f107 0314 	add.w	r3, r7, #20
 800336a:	4619      	mov	r1, r3
 800336c:	481e      	ldr	r0, [pc, #120]	@ (80033e8 <HAL_DAC_MspInit+0xe8>)
 800336e:	f001 fa73 	bl	8004858 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8003372:	4b1e      	ldr	r3, [pc, #120]	@ (80033ec <HAL_DAC_MspInit+0xec>)
 8003374:	4a1e      	ldr	r2, [pc, #120]	@ (80033f0 <HAL_DAC_MspInit+0xf0>)
 8003376:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003378:	4b1c      	ldr	r3, [pc, #112]	@ (80033ec <HAL_DAC_MspInit+0xec>)
 800337a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800337e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003380:	4b1a      	ldr	r3, [pc, #104]	@ (80033ec <HAL_DAC_MspInit+0xec>)
 8003382:	2240      	movs	r2, #64	@ 0x40
 8003384:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003386:	4b19      	ldr	r3, [pc, #100]	@ (80033ec <HAL_DAC_MspInit+0xec>)
 8003388:	2200      	movs	r2, #0
 800338a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800338c:	4b17      	ldr	r3, [pc, #92]	@ (80033ec <HAL_DAC_MspInit+0xec>)
 800338e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003392:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003394:	4b15      	ldr	r3, [pc, #84]	@ (80033ec <HAL_DAC_MspInit+0xec>)
 8003396:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800339a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800339c:	4b13      	ldr	r3, [pc, #76]	@ (80033ec <HAL_DAC_MspInit+0xec>)
 800339e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80033a2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80033a4:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <HAL_DAC_MspInit+0xec>)
 80033a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033aa:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80033ac:	4b0f      	ldr	r3, [pc, #60]	@ (80033ec <HAL_DAC_MspInit+0xec>)
 80033ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80033b2:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033b4:	4b0d      	ldr	r3, [pc, #52]	@ (80033ec <HAL_DAC_MspInit+0xec>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80033ba:	480c      	ldr	r0, [pc, #48]	@ (80033ec <HAL_DAC_MspInit+0xec>)
 80033bc:	f000 fe4a 	bl	8004054 <HAL_DMA_Init>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80033c6:	f7ff f8b7 	bl	8002538 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a07      	ldr	r2, [pc, #28]	@ (80033ec <HAL_DAC_MspInit+0xec>)
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	4a06      	ldr	r2, [pc, #24]	@ (80033ec <HAL_DAC_MspInit+0xec>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80033d6:	bf00      	nop
 80033d8:	3728      	adds	r7, #40	@ 0x28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40007400 	.word	0x40007400
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40020000 	.word	0x40020000
 80033ec:	2000009c 	.word	0x2000009c
 80033f0:	40026088 	.word	0x40026088

080033f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	@ 0x28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a31      	ldr	r2, [pc, #196]	@ (80034d8 <HAL_SD_MspInit+0xe4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d15b      	bne.n	80034ce <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	4b30      	ldr	r3, [pc, #192]	@ (80034dc <HAL_SD_MspInit+0xe8>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341e:	4a2f      	ldr	r2, [pc, #188]	@ (80034dc <HAL_SD_MspInit+0xe8>)
 8003420:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003424:	6453      	str	r3, [r2, #68]	@ 0x44
 8003426:	4b2d      	ldr	r3, [pc, #180]	@ (80034dc <HAL_SD_MspInit+0xe8>)
 8003428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	4b29      	ldr	r3, [pc, #164]	@ (80034dc <HAL_SD_MspInit+0xe8>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	4a28      	ldr	r2, [pc, #160]	@ (80034dc <HAL_SD_MspInit+0xe8>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	6313      	str	r3, [r2, #48]	@ 0x30
 8003442:	4b26      	ldr	r3, [pc, #152]	@ (80034dc <HAL_SD_MspInit+0xe8>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	4b22      	ldr	r3, [pc, #136]	@ (80034dc <HAL_SD_MspInit+0xe8>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	4a21      	ldr	r2, [pc, #132]	@ (80034dc <HAL_SD_MspInit+0xe8>)
 8003458:	f043 0308 	orr.w	r3, r3, #8
 800345c:	6313      	str	r3, [r2, #48]	@ 0x30
 800345e:	4b1f      	ldr	r3, [pc, #124]	@ (80034dc <HAL_SD_MspInit+0xe8>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800346a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800346e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003470:	2302      	movs	r3, #2
 8003472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003474:	2301      	movs	r3, #1
 8003476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003478:	2303      	movs	r3, #3
 800347a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800347c:	230c      	movs	r3, #12
 800347e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	4619      	mov	r1, r3
 8003486:	4816      	ldr	r0, [pc, #88]	@ (80034e0 <HAL_SD_MspInit+0xec>)
 8003488:	f001 f9e6 	bl	8004858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800348c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349a:	2303      	movs	r3, #3
 800349c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800349e:	230c      	movs	r3, #12
 80034a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a2:	f107 0314 	add.w	r3, r7, #20
 80034a6:	4619      	mov	r1, r3
 80034a8:	480d      	ldr	r0, [pc, #52]	@ (80034e0 <HAL_SD_MspInit+0xec>)
 80034aa:	f001 f9d5 	bl	8004858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034ae:	2304      	movs	r3, #4
 80034b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034b6:	2301      	movs	r3, #1
 80034b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ba:	2303      	movs	r3, #3
 80034bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80034be:	230c      	movs	r3, #12
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034c2:	f107 0314 	add.w	r3, r7, #20
 80034c6:	4619      	mov	r1, r3
 80034c8:	4806      	ldr	r0, [pc, #24]	@ (80034e4 <HAL_SD_MspInit+0xf0>)
 80034ca:	f001 f9c5 	bl	8004858 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80034ce:	bf00      	nop
 80034d0:	3728      	adds	r7, #40	@ 0x28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40020800 	.word	0x40020800
 80034e4:	40020c00 	.word	0x40020c00

080034e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	@ 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f0:	f107 0314 	add.w	r3, r7, #20
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a47      	ldr	r2, [pc, #284]	@ (8003624 <HAL_SPI_MspInit+0x13c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	f040 8088 	bne.w	800361c <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	4b45      	ldr	r3, [pc, #276]	@ (8003628 <HAL_SPI_MspInit+0x140>)
 8003512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003514:	4a44      	ldr	r2, [pc, #272]	@ (8003628 <HAL_SPI_MspInit+0x140>)
 8003516:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800351a:	6453      	str	r3, [r2, #68]	@ 0x44
 800351c:	4b42      	ldr	r3, [pc, #264]	@ (8003628 <HAL_SPI_MspInit+0x140>)
 800351e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003520:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003528:	2300      	movs	r3, #0
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	4b3e      	ldr	r3, [pc, #248]	@ (8003628 <HAL_SPI_MspInit+0x140>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003530:	4a3d      	ldr	r2, [pc, #244]	@ (8003628 <HAL_SPI_MspInit+0x140>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6313      	str	r3, [r2, #48]	@ 0x30
 8003538:	4b3b      	ldr	r3, [pc, #236]	@ (8003628 <HAL_SPI_MspInit+0x140>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003544:	23e0      	movs	r3, #224	@ 0xe0
 8003546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003550:	2303      	movs	r3, #3
 8003552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003554:	2305      	movs	r3, #5
 8003556:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	4619      	mov	r1, r3
 800355e:	4833      	ldr	r0, [pc, #204]	@ (800362c <HAL_SPI_MspInit+0x144>)
 8003560:	f001 f97a 	bl	8004858 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003564:	4b32      	ldr	r3, [pc, #200]	@ (8003630 <HAL_SPI_MspInit+0x148>)
 8003566:	4a33      	ldr	r2, [pc, #204]	@ (8003634 <HAL_SPI_MspInit+0x14c>)
 8003568:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800356a:	4b31      	ldr	r3, [pc, #196]	@ (8003630 <HAL_SPI_MspInit+0x148>)
 800356c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003570:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003572:	4b2f      	ldr	r3, [pc, #188]	@ (8003630 <HAL_SPI_MspInit+0x148>)
 8003574:	2240      	movs	r2, #64	@ 0x40
 8003576:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003578:	4b2d      	ldr	r3, [pc, #180]	@ (8003630 <HAL_SPI_MspInit+0x148>)
 800357a:	2200      	movs	r2, #0
 800357c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800357e:	4b2c      	ldr	r3, [pc, #176]	@ (8003630 <HAL_SPI_MspInit+0x148>)
 8003580:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003584:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003586:	4b2a      	ldr	r3, [pc, #168]	@ (8003630 <HAL_SPI_MspInit+0x148>)
 8003588:	2200      	movs	r2, #0
 800358a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800358c:	4b28      	ldr	r3, [pc, #160]	@ (8003630 <HAL_SPI_MspInit+0x148>)
 800358e:	2200      	movs	r2, #0
 8003590:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003592:	4b27      	ldr	r3, [pc, #156]	@ (8003630 <HAL_SPI_MspInit+0x148>)
 8003594:	2200      	movs	r2, #0
 8003596:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003598:	4b25      	ldr	r3, [pc, #148]	@ (8003630 <HAL_SPI_MspInit+0x148>)
 800359a:	2200      	movs	r2, #0
 800359c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800359e:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <HAL_SPI_MspInit+0x148>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80035a4:	4822      	ldr	r0, [pc, #136]	@ (8003630 <HAL_SPI_MspInit+0x148>)
 80035a6:	f000 fd55 	bl	8004054 <HAL_DMA_Init>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80035b0:	f7fe ffc2 	bl	8002538 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003630 <HAL_SPI_MspInit+0x148>)
 80035b8:	649a      	str	r2, [r3, #72]	@ 0x48
 80035ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003630 <HAL_SPI_MspInit+0x148>)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80035c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003638 <HAL_SPI_MspInit+0x150>)
 80035c2:	4a1e      	ldr	r2, [pc, #120]	@ (800363c <HAL_SPI_MspInit+0x154>)
 80035c4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80035c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003638 <HAL_SPI_MspInit+0x150>)
 80035c8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80035cc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003638 <HAL_SPI_MspInit+0x150>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035d4:	4b18      	ldr	r3, [pc, #96]	@ (8003638 <HAL_SPI_MspInit+0x150>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035da:	4b17      	ldr	r3, [pc, #92]	@ (8003638 <HAL_SPI_MspInit+0x150>)
 80035dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035e0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035e2:	4b15      	ldr	r3, [pc, #84]	@ (8003638 <HAL_SPI_MspInit+0x150>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035e8:	4b13      	ldr	r3, [pc, #76]	@ (8003638 <HAL_SPI_MspInit+0x150>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80035ee:	4b12      	ldr	r3, [pc, #72]	@ (8003638 <HAL_SPI_MspInit+0x150>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035f4:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <HAL_SPI_MspInit+0x150>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003638 <HAL_SPI_MspInit+0x150>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003600:	480d      	ldr	r0, [pc, #52]	@ (8003638 <HAL_SPI_MspInit+0x150>)
 8003602:	f000 fd27 	bl	8004054 <HAL_DMA_Init>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 800360c:	f7fe ff94 	bl	8002538 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a09      	ldr	r2, [pc, #36]	@ (8003638 <HAL_SPI_MspInit+0x150>)
 8003614:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003616:	4a08      	ldr	r2, [pc, #32]	@ (8003638 <HAL_SPI_MspInit+0x150>)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800361c:	bf00      	nop
 800361e:	3728      	adds	r7, #40	@ 0x28
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40013000 	.word	0x40013000
 8003628:	40023800 	.word	0x40023800
 800362c:	40020000 	.word	0x40020000
 8003630:	200001d8 	.word	0x200001d8
 8003634:	40026458 	.word	0x40026458
 8003638:	20000238 	.word	0x20000238
 800363c:	40026410 	.word	0x40026410

08003640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003650:	d10d      	bne.n	800366e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	4b09      	ldr	r3, [pc, #36]	@ (800367c <HAL_TIM_Base_MspInit+0x3c>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	4a08      	ldr	r2, [pc, #32]	@ (800367c <HAL_TIM_Base_MspInit+0x3c>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6413      	str	r3, [r2, #64]	@ 0x40
 8003662:	4b06      	ldr	r3, [pc, #24]	@ (800367c <HAL_TIM_Base_MspInit+0x3c>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800

08003680 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	@ 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1d      	ldr	r2, [pc, #116]	@ (8003714 <HAL_UART_MspInit+0x94>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d134      	bne.n	800370c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003718 <HAL_UART_MspInit+0x98>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	4a1b      	ldr	r2, [pc, #108]	@ (8003718 <HAL_UART_MspInit+0x98>)
 80036ac:	f043 0310 	orr.w	r3, r3, #16
 80036b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036b2:	4b19      	ldr	r3, [pc, #100]	@ (8003718 <HAL_UART_MspInit+0x98>)
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	4b15      	ldr	r3, [pc, #84]	@ (8003718 <HAL_UART_MspInit+0x98>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	4a14      	ldr	r2, [pc, #80]	@ (8003718 <HAL_UART_MspInit+0x98>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ce:	4b12      	ldr	r3, [pc, #72]	@ (8003718 <HAL_UART_MspInit+0x98>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036da:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80036de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e0:	2302      	movs	r3, #2
 80036e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e8:	2303      	movs	r3, #3
 80036ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036ec:	2307      	movs	r3, #7
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	4619      	mov	r1, r3
 80036f6:	4809      	ldr	r0, [pc, #36]	@ (800371c <HAL_UART_MspInit+0x9c>)
 80036f8:	f001 f8ae 	bl	8004858 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036fc:	2200      	movs	r2, #0
 80036fe:	2100      	movs	r1, #0
 8003700:	2025      	movs	r0, #37	@ 0x25
 8003702:	f000 fa48 	bl	8003b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003706:	2025      	movs	r0, #37	@ 0x25
 8003708:	f000 fa61 	bl	8003bce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800370c:	bf00      	nop
 800370e:	3728      	adds	r7, #40	@ 0x28
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40011000 	.word	0x40011000
 8003718:	40023800 	.word	0x40023800
 800371c:	40020000 	.word	0x40020000

08003720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003724:	bf00      	nop
 8003726:	e7fd      	b.n	8003724 <NMI_Handler+0x4>

08003728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800372c:	bf00      	nop
 800372e:	e7fd      	b.n	800372c <HardFault_Handler+0x4>

08003730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003734:	bf00      	nop
 8003736:	e7fd      	b.n	8003734 <MemManage_Handler+0x4>

08003738 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800373c:	bf00      	nop
 800373e:	e7fd      	b.n	800373c <BusFault_Handler+0x4>

08003740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003744:	bf00      	nop
 8003746:	e7fd      	b.n	8003744 <UsageFault_Handler+0x4>

08003748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003756:	b480      	push	{r7}
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800375a:	bf00      	nop
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003776:	f000 f8ef 	bl	8003958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003784:	4802      	ldr	r0, [pc, #8]	@ (8003790 <DMA1_Stream5_IRQHandler+0x10>)
 8003786:	f000 fdfd 	bl	8004384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	2000009c 	.word	0x2000009c

08003794 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003798:	4802      	ldr	r0, [pc, #8]	@ (80037a4 <USART1_IRQHandler+0x10>)
 800379a:	f004 fb85 	bl	8007ea8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	200002e0 	.word	0x200002e0

080037a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80037ac:	4802      	ldr	r0, [pc, #8]	@ (80037b8 <DMA2_Stream0_IRQHandler+0x10>)
 80037ae:	f000 fde9 	bl	8004384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000238 	.word	0x20000238

080037bc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80037c0:	4802      	ldr	r0, [pc, #8]	@ (80037cc <DMA2_Stream3_IRQHandler+0x10>)
 80037c2:	f000 fddf 	bl	8004384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200001d8 	.word	0x200001d8

080037d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037d8:	4a14      	ldr	r2, [pc, #80]	@ (800382c <_sbrk+0x5c>)
 80037da:	4b15      	ldr	r3, [pc, #84]	@ (8003830 <_sbrk+0x60>)
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037e4:	4b13      	ldr	r3, [pc, #76]	@ (8003834 <_sbrk+0x64>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d102      	bne.n	80037f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037ec:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <_sbrk+0x64>)
 80037ee:	4a12      	ldr	r2, [pc, #72]	@ (8003838 <_sbrk+0x68>)
 80037f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037f2:	4b10      	ldr	r3, [pc, #64]	@ (8003834 <_sbrk+0x64>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4413      	add	r3, r2
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d207      	bcs.n	8003810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003800:	f009 f90a 	bl	800ca18 <__errno>
 8003804:	4603      	mov	r3, r0
 8003806:	220c      	movs	r2, #12
 8003808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800380a:	f04f 33ff 	mov.w	r3, #4294967295
 800380e:	e009      	b.n	8003824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003810:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <_sbrk+0x64>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003816:	4b07      	ldr	r3, [pc, #28]	@ (8003834 <_sbrk+0x64>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	4a05      	ldr	r2, [pc, #20]	@ (8003834 <_sbrk+0x64>)
 8003820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003822:	68fb      	ldr	r3, [r7, #12]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	20020000 	.word	0x20020000
 8003830:	00000400 	.word	0x00000400
 8003834:	20000594 	.word	0x20000594
 8003838:	20000720 	.word	0x20000720

0800383c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003840:	4b06      	ldr	r3, [pc, #24]	@ (800385c <SystemInit+0x20>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003846:	4a05      	ldr	r2, [pc, #20]	@ (800385c <SystemInit+0x20>)
 8003848:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800384c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003860:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003898 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003864:	f7ff ffea 	bl	800383c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003868:	480c      	ldr	r0, [pc, #48]	@ (800389c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800386a:	490d      	ldr	r1, [pc, #52]	@ (80038a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800386c:	4a0d      	ldr	r2, [pc, #52]	@ (80038a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800386e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003870:	e002      	b.n	8003878 <LoopCopyDataInit>

08003872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003876:	3304      	adds	r3, #4

08003878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800387a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800387c:	d3f9      	bcc.n	8003872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800387e:	4a0a      	ldr	r2, [pc, #40]	@ (80038a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003880:	4c0a      	ldr	r4, [pc, #40]	@ (80038ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8003882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003884:	e001      	b.n	800388a <LoopFillZerobss>

08003886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003888:	3204      	adds	r2, #4

0800388a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800388a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800388c:	d3fb      	bcc.n	8003886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800388e:	f009 f8c9 	bl	800ca24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003892:	f7fe f9f5 	bl	8001c80 <main>
  bx  lr    
 8003896:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003898:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800389c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038a0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80038a4:	0800dac4 	.word	0x0800dac4
  ldr r2, =_sbss
 80038a8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80038ac:	20000720 	.word	0x20000720

080038b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038b0:	e7fe      	b.n	80038b0 <ADC_IRQHandler>
	...

080038b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038b8:	4b0e      	ldr	r3, [pc, #56]	@ (80038f4 <HAL_Init+0x40>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a0d      	ldr	r2, [pc, #52]	@ (80038f4 <HAL_Init+0x40>)
 80038be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038c4:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <HAL_Init+0x40>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a0a      	ldr	r2, [pc, #40]	@ (80038f4 <HAL_Init+0x40>)
 80038ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038d0:	4b08      	ldr	r3, [pc, #32]	@ (80038f4 <HAL_Init+0x40>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a07      	ldr	r2, [pc, #28]	@ (80038f4 <HAL_Init+0x40>)
 80038d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038dc:	2003      	movs	r0, #3
 80038de:	f000 f94f 	bl	8003b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038e2:	200f      	movs	r0, #15
 80038e4:	f000 f808 	bl	80038f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038e8:	f7ff fce2 	bl	80032b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40023c00 	.word	0x40023c00

080038f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003900:	4b12      	ldr	r3, [pc, #72]	@ (800394c <HAL_InitTick+0x54>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <HAL_InitTick+0x58>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	4619      	mov	r1, r3
 800390a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800390e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003912:	fbb2 f3f3 	udiv	r3, r2, r3
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f967 	bl	8003bea <HAL_SYSTICK_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e00e      	b.n	8003944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b0f      	cmp	r3, #15
 800392a:	d80a      	bhi.n	8003942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800392c:	2200      	movs	r2, #0
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	f04f 30ff 	mov.w	r0, #4294967295
 8003934:	f000 f92f 	bl	8003b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003938:	4a06      	ldr	r2, [pc, #24]	@ (8003954 <HAL_InitTick+0x5c>)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	e000      	b.n	8003944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	2000000c 	.word	0x2000000c
 8003950:	20000014 	.word	0x20000014
 8003954:	20000010 	.word	0x20000010

08003958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800395c:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <HAL_IncTick+0x20>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	4b06      	ldr	r3, [pc, #24]	@ (800397c <HAL_IncTick+0x24>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4413      	add	r3, r2
 8003968:	4a04      	ldr	r2, [pc, #16]	@ (800397c <HAL_IncTick+0x24>)
 800396a:	6013      	str	r3, [r2, #0]
}
 800396c:	bf00      	nop
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000014 	.word	0x20000014
 800397c:	20000598 	.word	0x20000598

08003980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return uwTick;
 8003984:	4b03      	ldr	r3, [pc, #12]	@ (8003994 <HAL_GetTick+0x14>)
 8003986:	681b      	ldr	r3, [r3, #0]
}
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	20000598 	.word	0x20000598

08003998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039a0:	f7ff ffee 	bl	8003980 <HAL_GetTick>
 80039a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d005      	beq.n	80039be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039b2:	4b0a      	ldr	r3, [pc, #40]	@ (80039dc <HAL_Delay+0x44>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039be:	bf00      	nop
 80039c0:	f7ff ffde 	bl	8003980 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d8f7      	bhi.n	80039c0 <HAL_Delay+0x28>
  {
  }
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000014 	.word	0x20000014

080039e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a24 <__NVIC_SetPriorityGrouping+0x44>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039fc:	4013      	ands	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a12:	4a04      	ldr	r2, [pc, #16]	@ (8003a24 <__NVIC_SetPriorityGrouping+0x44>)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	60d3      	str	r3, [r2, #12]
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	e000ed00 	.word	0xe000ed00

08003a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a2c:	4b04      	ldr	r3, [pc, #16]	@ (8003a40 <__NVIC_GetPriorityGrouping+0x18>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	0a1b      	lsrs	r3, r3, #8
 8003a32:	f003 0307 	and.w	r3, r3, #7
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	e000ed00 	.word	0xe000ed00

08003a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	db0b      	blt.n	8003a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	f003 021f 	and.w	r2, r3, #31
 8003a5c:	4907      	ldr	r1, [pc, #28]	@ (8003a7c <__NVIC_EnableIRQ+0x38>)
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	2001      	movs	r0, #1
 8003a66:	fa00 f202 	lsl.w	r2, r0, r2
 8003a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	e000e100 	.word	0xe000e100

08003a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	6039      	str	r1, [r7, #0]
 8003a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	db0a      	blt.n	8003aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	490c      	ldr	r1, [pc, #48]	@ (8003acc <__NVIC_SetPriority+0x4c>)
 8003a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9e:	0112      	lsls	r2, r2, #4
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	440b      	add	r3, r1
 8003aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aa8:	e00a      	b.n	8003ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	4908      	ldr	r1, [pc, #32]	@ (8003ad0 <__NVIC_SetPriority+0x50>)
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	3b04      	subs	r3, #4
 8003ab8:	0112      	lsls	r2, r2, #4
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	440b      	add	r3, r1
 8003abe:	761a      	strb	r2, [r3, #24]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	e000e100 	.word	0xe000e100
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b089      	sub	sp, #36	@ 0x24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	f1c3 0307 	rsb	r3, r3, #7
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	bf28      	it	cs
 8003af2:	2304      	movcs	r3, #4
 8003af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3304      	adds	r3, #4
 8003afa:	2b06      	cmp	r3, #6
 8003afc:	d902      	bls.n	8003b04 <NVIC_EncodePriority+0x30>
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3b03      	subs	r3, #3
 8003b02:	e000      	b.n	8003b06 <NVIC_EncodePriority+0x32>
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b08:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	43da      	mvns	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	401a      	ands	r2, r3
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	fa01 f303 	lsl.w	r3, r1, r3
 8003b26:	43d9      	mvns	r1, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b2c:	4313      	orrs	r3, r2
         );
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3724      	adds	r7, #36	@ 0x24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
	...

08003b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b4c:	d301      	bcc.n	8003b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e00f      	b.n	8003b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b52:	4a0a      	ldr	r2, [pc, #40]	@ (8003b7c <SysTick_Config+0x40>)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b5a:	210f      	movs	r1, #15
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	f7ff ff8e 	bl	8003a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b64:	4b05      	ldr	r3, [pc, #20]	@ (8003b7c <SysTick_Config+0x40>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b6a:	4b04      	ldr	r3, [pc, #16]	@ (8003b7c <SysTick_Config+0x40>)
 8003b6c:	2207      	movs	r2, #7
 8003b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	e000e010 	.word	0xe000e010

08003b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ff29 	bl	80039e0 <__NVIC_SetPriorityGrouping>
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b086      	sub	sp, #24
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ba8:	f7ff ff3e 	bl	8003a28 <__NVIC_GetPriorityGrouping>
 8003bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	6978      	ldr	r0, [r7, #20]
 8003bb4:	f7ff ff8e 	bl	8003ad4 <NVIC_EncodePriority>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff ff5d 	bl	8003a80 <__NVIC_SetPriority>
}
 8003bc6:	bf00      	nop
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff ff31 	bl	8003a44 <__NVIC_EnableIRQ>
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b082      	sub	sp, #8
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff ffa2 	bl	8003b3c <SysTick_Config>
 8003bf8:	4603      	mov	r3, r0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e014      	b.n	8003c3e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	791b      	ldrb	r3, [r3, #4]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d105      	bne.n	8003c2a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff fb6b 	bl	8003300 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0a2      	b.n	8003daa <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	795b      	ldrb	r3, [r3, #5]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_DAC_Start_DMA+0x28>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e09c      	b.n	8003daa <HAL_DAC_Start_DMA+0x162>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d129      	bne.n	8003cd6 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	4a4b      	ldr	r2, [pc, #300]	@ (8003db4 <HAL_DAC_Start_DMA+0x16c>)
 8003c88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	4a4a      	ldr	r2, [pc, #296]	@ (8003db8 <HAL_DAC_Start_DMA+0x170>)
 8003c90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	4a49      	ldr	r2, [pc, #292]	@ (8003dbc <HAL_DAC_Start_DMA+0x174>)
 8003c98:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ca8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_DAC_Start_DMA+0x70>
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d005      	beq.n	8003cc2 <HAL_DAC_Start_DMA+0x7a>
 8003cb6:	e009      	b.n	8003ccc <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	613b      	str	r3, [r7, #16]
        break;
 8003cc0:	e033      	b.n	8003d2a <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	613b      	str	r3, [r7, #16]
        break;
 8003cca:	e02e      	b.n	8003d2a <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3310      	adds	r3, #16
 8003cd2:	613b      	str	r3, [r7, #16]
        break;
 8003cd4:	e029      	b.n	8003d2a <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	4a39      	ldr	r2, [pc, #228]	@ (8003dc0 <HAL_DAC_Start_DMA+0x178>)
 8003cdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4a38      	ldr	r2, [pc, #224]	@ (8003dc4 <HAL_DAC_Start_DMA+0x17c>)
 8003ce4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	4a37      	ldr	r2, [pc, #220]	@ (8003dc8 <HAL_DAC_Start_DMA+0x180>)
 8003cec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003cfc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_DAC_Start_DMA+0xc4>
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d005      	beq.n	8003d16 <HAL_DAC_Start_DMA+0xce>
 8003d0a:	e009      	b.n	8003d20 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3314      	adds	r3, #20
 8003d12:	613b      	str	r3, [r7, #16]
        break;
 8003d14:	e009      	b.n	8003d2a <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3318      	adds	r3, #24
 8003d1c:	613b      	str	r3, [r7, #16]
        break;
 8003d1e:	e004      	b.n	8003d2a <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	331c      	adds	r3, #28
 8003d26:	613b      	str	r3, [r7, #16]
        break;
 8003d28:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d111      	bne.n	8003d54 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d3e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6898      	ldr	r0, [r3, #8]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	f000 fa31 	bl	80041b0 <HAL_DMA_Start_IT>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	75fb      	strb	r3, [r7, #23]
 8003d52:	e010      	b.n	8003d76 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003d62:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	68d8      	ldr	r0, [r3, #12]
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	f000 fa1f 	bl	80041b0 <HAL_DMA_Start_IT>
 8003d72:	4603      	mov	r3, r0
 8003d74:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10c      	bne.n	8003d9c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6819      	ldr	r1, [r3, #0]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2201      	movs	r2, #1
 8003d90:	409a      	lsls	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e005      	b.n	8003da8 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f043 0204 	orr.w	r2, r3, #4
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	08003f41 	.word	0x08003f41
 8003db8:	08003f63 	.word	0x08003f63
 8003dbc:	08003f7f 	.word	0x08003f7f
 8003dc0:	08003fe9 	.word	0x08003fe9
 8003dc4:	0800400b 	.word	0x0800400b
 8003dc8:	08004027 	.word	0x08004027

08003dcc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e03e      	b.n	8003e5e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6819      	ldr	r1, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43da      	mvns	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	400a      	ands	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6819      	ldr	r1, [r3, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43da      	mvns	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	400a      	ands	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10d      	bne.n	8003e3c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fa1b 	bl	8004260 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	e00c      	b.n	8003e56 <HAL_DAC_Stop_DMA+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fa0d 	bl	8004260 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8003e54:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b089      	sub	sp, #36	@ 0x24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_DAC_ConfigChannel+0x1c>
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e042      	b.n	8003f34 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	795b      	ldrb	r3, [r3, #5]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_DAC_ConfigChannel+0x2c>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e03c      	b.n	8003f34 <HAL_DAC_ConfigChannel+0xa6>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6819      	ldr	r1, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f003 0310 	and.w	r3, r3, #16
 8003f16:	22c0      	movs	r2, #192	@ 0xc0
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43da      	mvns	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	400a      	ands	r2, r1
 8003f24:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003f32:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3724      	adds	r7, #36	@ 0x24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f7ff ff89 	bl	8003e66 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	711a      	strb	r2, [r3, #4]
}
 8003f5a:	bf00      	nop
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7fd fe75 	bl	8001c60 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f043 0204 	orr.w	r2, r3, #4
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f7ff ff6e 	bl	8003e7a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	711a      	strb	r2, [r3, #4]
}
 8003fa4:	bf00      	nop
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff ffd8 	bl	8003fac <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	711a      	strb	r2, [r3, #4]
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004016:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f7ff ffd1 	bl	8003fc0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004032:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	f043 0204 	orr.w	r2, r3, #4
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f7ff ffc7 	bl	8003fd4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	711a      	strb	r2, [r3, #4]
}
 800404c:	bf00      	nop
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004060:	f7ff fc8e 	bl	8003980 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e099      	b.n	80041a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0201 	bic.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004090:	e00f      	b.n	80040b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004092:	f7ff fc75 	bl	8003980 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b05      	cmp	r3, #5
 800409e:	d908      	bls.n	80040b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2203      	movs	r2, #3
 80040aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e078      	b.n	80041a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e8      	bne.n	8004092 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4b38      	ldr	r3, [pc, #224]	@ (80041ac <HAL_DMA_Init+0x158>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	2b04      	cmp	r3, #4
 800410a:	d107      	bne.n	800411c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004114:	4313      	orrs	r3, r2
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0307 	bic.w	r3, r3, #7
 8004132:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	2b04      	cmp	r3, #4
 8004144:	d117      	bne.n	8004176 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00e      	beq.n	8004176 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fb01 	bl	8004760 <DMA_CheckFifoParam>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2240      	movs	r2, #64	@ 0x40
 8004168:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004172:	2301      	movs	r3, #1
 8004174:	e016      	b.n	80041a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fab8 	bl	80046f4 <DMA_CalcBaseAndBitshift>
 8004184:	4603      	mov	r3, r0
 8004186:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418c:	223f      	movs	r2, #63	@ 0x3f
 800418e:	409a      	lsls	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	f010803f 	.word	0xf010803f

080041b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_DMA_Start_IT+0x26>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e040      	b.n	8004258 <HAL_DMA_Start_IT+0xa8>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d12f      	bne.n	800424a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2202      	movs	r2, #2
 80041ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fa4a 	bl	8004698 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004208:	223f      	movs	r2, #63	@ 0x3f
 800420a:	409a      	lsls	r2, r3
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0216 	orr.w	r2, r2, #22
 800421e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0208 	orr.w	r2, r2, #8
 8004236:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	e005      	b.n	8004256 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004252:	2302      	movs	r3, #2
 8004254:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004256:	7dfb      	ldrb	r3, [r7, #23]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800426e:	f7ff fb87 	bl	8003980 <HAL_GetTick>
 8004272:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d008      	beq.n	8004292 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2280      	movs	r2, #128	@ 0x80
 8004284:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e052      	b.n	8004338 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0216 	bic.w	r2, r2, #22
 80042a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d103      	bne.n	80042c2 <HAL_DMA_Abort+0x62>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0208 	bic.w	r2, r2, #8
 80042d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042e2:	e013      	b.n	800430c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042e4:	f7ff fb4c 	bl	8003980 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b05      	cmp	r3, #5
 80042f0:	d90c      	bls.n	800430c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2203      	movs	r2, #3
 80042fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e015      	b.n	8004338 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e4      	bne.n	80042e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431e:	223f      	movs	r2, #63	@ 0x3f
 8004320:	409a      	lsls	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d004      	beq.n	800435e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2280      	movs	r2, #128	@ 0x80
 8004358:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e00c      	b.n	8004378 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2205      	movs	r2, #5
 8004362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0201 	bic.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004390:	4b8e      	ldr	r3, [pc, #568]	@ (80045cc <HAL_DMA_IRQHandler+0x248>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a8e      	ldr	r2, [pc, #568]	@ (80045d0 <HAL_DMA_IRQHandler+0x24c>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	0a9b      	lsrs	r3, r3, #10
 800439c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ae:	2208      	movs	r2, #8
 80043b0:	409a      	lsls	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01a      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d013      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0204 	bic.w	r2, r2, #4
 80043d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043dc:	2208      	movs	r2, #8
 80043de:	409a      	lsls	r2, r3
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e8:	f043 0201 	orr.w	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f4:	2201      	movs	r2, #1
 80043f6:	409a      	lsls	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d012      	beq.n	8004426 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00b      	beq.n	8004426 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004412:	2201      	movs	r2, #1
 8004414:	409a      	lsls	r2, r3
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441e:	f043 0202 	orr.w	r2, r3, #2
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442a:	2204      	movs	r2, #4
 800442c:	409a      	lsls	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4013      	ands	r3, r2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d012      	beq.n	800445c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00b      	beq.n	800445c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004448:	2204      	movs	r2, #4
 800444a:	409a      	lsls	r2, r3
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004454:	f043 0204 	orr.w	r2, r3, #4
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004460:	2210      	movs	r2, #16
 8004462:	409a      	lsls	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d043      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d03c      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800447e:	2210      	movs	r2, #16
 8004480:	409a      	lsls	r2, r3
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d018      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d108      	bne.n	80044b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d024      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	4798      	blx	r3
 80044b2:	e01f      	b.n	80044f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01b      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4798      	blx	r3
 80044c4:	e016      	b.n	80044f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d107      	bne.n	80044e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0208 	bic.w	r2, r2, #8
 80044e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f8:	2220      	movs	r2, #32
 80044fa:	409a      	lsls	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 808f 	beq.w	8004624 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 8087 	beq.w	8004624 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451a:	2220      	movs	r2, #32
 800451c:	409a      	lsls	r2, r3
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b05      	cmp	r3, #5
 800452c:	d136      	bne.n	800459c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0216 	bic.w	r2, r2, #22
 800453c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695a      	ldr	r2, [r3, #20]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800454c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d103      	bne.n	800455e <HAL_DMA_IRQHandler+0x1da>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800455a:	2b00      	cmp	r3, #0
 800455c:	d007      	beq.n	800456e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0208 	bic.w	r2, r2, #8
 800456c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004572:	223f      	movs	r2, #63	@ 0x3f
 8004574:	409a      	lsls	r2, r3
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800458e:	2b00      	cmp	r3, #0
 8004590:	d07e      	beq.n	8004690 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	4798      	blx	r3
        }
        return;
 800459a:	e079      	b.n	8004690 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01d      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10d      	bne.n	80045d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d031      	beq.n	8004624 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	4798      	blx	r3
 80045c8:	e02c      	b.n	8004624 <HAL_DMA_IRQHandler+0x2a0>
 80045ca:	bf00      	nop
 80045cc:	2000000c 	.word	0x2000000c
 80045d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d023      	beq.n	8004624 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	4798      	blx	r3
 80045e4:	e01e      	b.n	8004624 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10f      	bne.n	8004614 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0210 	bic.w	r2, r2, #16
 8004602:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004628:	2b00      	cmp	r3, #0
 800462a:	d032      	beq.n	8004692 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d022      	beq.n	800467e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2205      	movs	r2, #5
 800463c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0201 	bic.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	3301      	adds	r3, #1
 8004654:	60bb      	str	r3, [r7, #8]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	429a      	cmp	r2, r3
 800465a:	d307      	bcc.n	800466c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f2      	bne.n	8004650 <HAL_DMA_IRQHandler+0x2cc>
 800466a:	e000      	b.n	800466e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800466c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	4798      	blx	r3
 800468e:	e000      	b.n	8004692 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004690:	bf00      	nop
    }
  }
}
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80046b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b40      	cmp	r3, #64	@ 0x40
 80046c4:	d108      	bne.n	80046d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046d6:	e007      	b.n	80046e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	60da      	str	r2, [r3, #12]
}
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	3b10      	subs	r3, #16
 8004704:	4a14      	ldr	r2, [pc, #80]	@ (8004758 <DMA_CalcBaseAndBitshift+0x64>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	091b      	lsrs	r3, r3, #4
 800470c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800470e:	4a13      	ldr	r2, [pc, #76]	@ (800475c <DMA_CalcBaseAndBitshift+0x68>)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b03      	cmp	r3, #3
 8004720:	d909      	bls.n	8004736 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800472a:	f023 0303 	bic.w	r3, r3, #3
 800472e:	1d1a      	adds	r2, r3, #4
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	659a      	str	r2, [r3, #88]	@ 0x58
 8004734:	e007      	b.n	8004746 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800473e:	f023 0303 	bic.w	r3, r3, #3
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	aaaaaaab 	.word	0xaaaaaaab
 800475c:	0800da18 	.word	0x0800da18

08004760 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004770:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d11f      	bne.n	80047ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d856      	bhi.n	800482e <DMA_CheckFifoParam+0xce>
 8004780:	a201      	add	r2, pc, #4	@ (adr r2, 8004788 <DMA_CheckFifoParam+0x28>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	08004799 	.word	0x08004799
 800478c:	080047ab 	.word	0x080047ab
 8004790:	08004799 	.word	0x08004799
 8004794:	0800482f 	.word	0x0800482f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d046      	beq.n	8004832 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a8:	e043      	b.n	8004832 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80047b2:	d140      	bne.n	8004836 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b8:	e03d      	b.n	8004836 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047c2:	d121      	bne.n	8004808 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d837      	bhi.n	800483a <DMA_CheckFifoParam+0xda>
 80047ca:	a201      	add	r2, pc, #4	@ (adr r2, 80047d0 <DMA_CheckFifoParam+0x70>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	080047e1 	.word	0x080047e1
 80047d4:	080047e7 	.word	0x080047e7
 80047d8:	080047e1 	.word	0x080047e1
 80047dc:	080047f9 	.word	0x080047f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
      break;
 80047e4:	e030      	b.n	8004848 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d025      	beq.n	800483e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047f6:	e022      	b.n	800483e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004800:	d11f      	bne.n	8004842 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004806:	e01c      	b.n	8004842 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d903      	bls.n	8004816 <DMA_CheckFifoParam+0xb6>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d003      	beq.n	800481c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004814:	e018      	b.n	8004848 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	73fb      	strb	r3, [r7, #15]
      break;
 800481a:	e015      	b.n	8004848 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00e      	beq.n	8004846 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
      break;
 800482c:	e00b      	b.n	8004846 <DMA_CheckFifoParam+0xe6>
      break;
 800482e:	bf00      	nop
 8004830:	e00a      	b.n	8004848 <DMA_CheckFifoParam+0xe8>
      break;
 8004832:	bf00      	nop
 8004834:	e008      	b.n	8004848 <DMA_CheckFifoParam+0xe8>
      break;
 8004836:	bf00      	nop
 8004838:	e006      	b.n	8004848 <DMA_CheckFifoParam+0xe8>
      break;
 800483a:	bf00      	nop
 800483c:	e004      	b.n	8004848 <DMA_CheckFifoParam+0xe8>
      break;
 800483e:	bf00      	nop
 8004840:	e002      	b.n	8004848 <DMA_CheckFifoParam+0xe8>
      break;   
 8004842:	bf00      	nop
 8004844:	e000      	b.n	8004848 <DMA_CheckFifoParam+0xe8>
      break;
 8004846:	bf00      	nop
    }
  } 
  
  return status; 
 8004848:	7bfb      	ldrb	r3, [r7, #15]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop

08004858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004858:	b480      	push	{r7}
 800485a:	b089      	sub	sp, #36	@ 0x24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004866:	2300      	movs	r3, #0
 8004868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
 8004872:	e16b      	b.n	8004b4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004874:	2201      	movs	r2, #1
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4013      	ands	r3, r2
 8004886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	429a      	cmp	r2, r3
 800488e:	f040 815a 	bne.w	8004b46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b01      	cmp	r3, #1
 800489c:	d005      	beq.n	80048aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d130      	bne.n	800490c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	2203      	movs	r2, #3
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4013      	ands	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048e0:	2201      	movs	r2, #1
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	43db      	mvns	r3, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4013      	ands	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	f003 0201 	and.w	r2, r3, #1
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	2b03      	cmp	r3, #3
 8004916:	d017      	beq.n	8004948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	2203      	movs	r2, #3
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	43db      	mvns	r3, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4013      	ands	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 0303 	and.w	r3, r3, #3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d123      	bne.n	800499c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	08da      	lsrs	r2, r3, #3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3208      	adds	r2, #8
 800495c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	220f      	movs	r2, #15
 800496c:	fa02 f303 	lsl.w	r3, r2, r3
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4313      	orrs	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	08da      	lsrs	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3208      	adds	r2, #8
 8004996:	69b9      	ldr	r1, [r7, #24]
 8004998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	2203      	movs	r2, #3
 80049a8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ac:	43db      	mvns	r3, r3
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4013      	ands	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f003 0203 	and.w	r2, r3, #3
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	fa02 f303 	lsl.w	r3, r2, r3
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80b4 	beq.w	8004b46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	4b60      	ldr	r3, [pc, #384]	@ (8004b64 <HAL_GPIO_Init+0x30c>)
 80049e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e6:	4a5f      	ldr	r2, [pc, #380]	@ (8004b64 <HAL_GPIO_Init+0x30c>)
 80049e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80049ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004b64 <HAL_GPIO_Init+0x30c>)
 80049f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049fa:	4a5b      	ldr	r2, [pc, #364]	@ (8004b68 <HAL_GPIO_Init+0x310>)
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	089b      	lsrs	r3, r3, #2
 8004a00:	3302      	adds	r3, #2
 8004a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	220f      	movs	r2, #15
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43db      	mvns	r3, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a52      	ldr	r2, [pc, #328]	@ (8004b6c <HAL_GPIO_Init+0x314>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d02b      	beq.n	8004a7e <HAL_GPIO_Init+0x226>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a51      	ldr	r2, [pc, #324]	@ (8004b70 <HAL_GPIO_Init+0x318>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d025      	beq.n	8004a7a <HAL_GPIO_Init+0x222>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a50      	ldr	r2, [pc, #320]	@ (8004b74 <HAL_GPIO_Init+0x31c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d01f      	beq.n	8004a76 <HAL_GPIO_Init+0x21e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a4f      	ldr	r2, [pc, #316]	@ (8004b78 <HAL_GPIO_Init+0x320>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d019      	beq.n	8004a72 <HAL_GPIO_Init+0x21a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a4e      	ldr	r2, [pc, #312]	@ (8004b7c <HAL_GPIO_Init+0x324>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d013      	beq.n	8004a6e <HAL_GPIO_Init+0x216>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a4d      	ldr	r2, [pc, #308]	@ (8004b80 <HAL_GPIO_Init+0x328>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00d      	beq.n	8004a6a <HAL_GPIO_Init+0x212>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a4c      	ldr	r2, [pc, #304]	@ (8004b84 <HAL_GPIO_Init+0x32c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d007      	beq.n	8004a66 <HAL_GPIO_Init+0x20e>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a4b      	ldr	r2, [pc, #300]	@ (8004b88 <HAL_GPIO_Init+0x330>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d101      	bne.n	8004a62 <HAL_GPIO_Init+0x20a>
 8004a5e:	2307      	movs	r3, #7
 8004a60:	e00e      	b.n	8004a80 <HAL_GPIO_Init+0x228>
 8004a62:	2308      	movs	r3, #8
 8004a64:	e00c      	b.n	8004a80 <HAL_GPIO_Init+0x228>
 8004a66:	2306      	movs	r3, #6
 8004a68:	e00a      	b.n	8004a80 <HAL_GPIO_Init+0x228>
 8004a6a:	2305      	movs	r3, #5
 8004a6c:	e008      	b.n	8004a80 <HAL_GPIO_Init+0x228>
 8004a6e:	2304      	movs	r3, #4
 8004a70:	e006      	b.n	8004a80 <HAL_GPIO_Init+0x228>
 8004a72:	2303      	movs	r3, #3
 8004a74:	e004      	b.n	8004a80 <HAL_GPIO_Init+0x228>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e002      	b.n	8004a80 <HAL_GPIO_Init+0x228>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <HAL_GPIO_Init+0x228>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	f002 0203 	and.w	r2, r2, #3
 8004a86:	0092      	lsls	r2, r2, #2
 8004a88:	4093      	lsls	r3, r2
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a90:	4935      	ldr	r1, [pc, #212]	@ (8004b68 <HAL_GPIO_Init+0x310>)
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	089b      	lsrs	r3, r3, #2
 8004a96:	3302      	adds	r3, #2
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b8c <HAL_GPIO_Init+0x334>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ac2:	4a32      	ldr	r2, [pc, #200]	@ (8004b8c <HAL_GPIO_Init+0x334>)
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ac8:	4b30      	ldr	r3, [pc, #192]	@ (8004b8c <HAL_GPIO_Init+0x334>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004aec:	4a27      	ldr	r2, [pc, #156]	@ (8004b8c <HAL_GPIO_Init+0x334>)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004af2:	4b26      	ldr	r3, [pc, #152]	@ (8004b8c <HAL_GPIO_Init+0x334>)
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b16:	4a1d      	ldr	r2, [pc, #116]	@ (8004b8c <HAL_GPIO_Init+0x334>)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b8c <HAL_GPIO_Init+0x334>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b40:	4a12      	ldr	r2, [pc, #72]	@ (8004b8c <HAL_GPIO_Init+0x334>)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	2b0f      	cmp	r3, #15
 8004b50:	f67f ae90 	bls.w	8004874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b54:	bf00      	nop
 8004b56:	bf00      	nop
 8004b58:	3724      	adds	r7, #36	@ 0x24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40023800 	.word	0x40023800
 8004b68:	40013800 	.word	0x40013800
 8004b6c:	40020000 	.word	0x40020000
 8004b70:	40020400 	.word	0x40020400
 8004b74:	40020800 	.word	0x40020800
 8004b78:	40020c00 	.word	0x40020c00
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	40021400 	.word	0x40021400
 8004b84:	40021800 	.word	0x40021800
 8004b88:	40021c00 	.word	0x40021c00
 8004b8c:	40013c00 	.word	0x40013c00

08004b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	807b      	strh	r3, [r7, #2]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ba0:	787b      	ldrb	r3, [r7, #1]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bac:	e003      	b.n	8004bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bae:	887b      	ldrh	r3, [r7, #2]
 8004bb0:	041a      	lsls	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	619a      	str	r2, [r3, #24]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e267      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d075      	beq.n	8004cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004be2:	4b88      	ldr	r3, [pc, #544]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d00c      	beq.n	8004c08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bee:	4b85      	ldr	r3, [pc, #532]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d112      	bne.n	8004c20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bfa:	4b82      	ldr	r3, [pc, #520]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c06:	d10b      	bne.n	8004c20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c08:	4b7e      	ldr	r3, [pc, #504]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d05b      	beq.n	8004ccc <HAL_RCC_OscConfig+0x108>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d157      	bne.n	8004ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e242      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c28:	d106      	bne.n	8004c38 <HAL_RCC_OscConfig+0x74>
 8004c2a:	4b76      	ldr	r3, [pc, #472]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a75      	ldr	r2, [pc, #468]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e01d      	b.n	8004c74 <HAL_RCC_OscConfig+0xb0>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x98>
 8004c42:	4b70      	ldr	r3, [pc, #448]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a6f      	ldr	r2, [pc, #444]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a6c      	ldr	r2, [pc, #432]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e00b      	b.n	8004c74 <HAL_RCC_OscConfig+0xb0>
 8004c5c:	4b69      	ldr	r3, [pc, #420]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a68      	ldr	r2, [pc, #416]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	4b66      	ldr	r3, [pc, #408]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a65      	ldr	r2, [pc, #404]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d013      	beq.n	8004ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7c:	f7fe fe80 	bl	8003980 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c84:	f7fe fe7c 	bl	8003980 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b64      	cmp	r3, #100	@ 0x64
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e207      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c96:	4b5b      	ldr	r3, [pc, #364]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0f0      	beq.n	8004c84 <HAL_RCC_OscConfig+0xc0>
 8004ca2:	e014      	b.n	8004cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca4:	f7fe fe6c 	bl	8003980 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cac:	f7fe fe68 	bl	8003980 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	@ 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e1f3      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cbe:	4b51      	ldr	r3, [pc, #324]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <HAL_RCC_OscConfig+0xe8>
 8004cca:	e000      	b.n	8004cce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d063      	beq.n	8004da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cda:	4b4a      	ldr	r3, [pc, #296]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f003 030c 	and.w	r3, r3, #12
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00b      	beq.n	8004cfe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ce6:	4b47      	ldr	r3, [pc, #284]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d11c      	bne.n	8004d2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cf2:	4b44      	ldr	r3, [pc, #272]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d116      	bne.n	8004d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cfe:	4b41      	ldr	r3, [pc, #260]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_RCC_OscConfig+0x152>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d001      	beq.n	8004d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e1c7      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d16:	4b3b      	ldr	r3, [pc, #236]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4937      	ldr	r1, [pc, #220]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d2a:	e03a      	b.n	8004da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d020      	beq.n	8004d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d34:	4b34      	ldr	r3, [pc, #208]	@ (8004e08 <HAL_RCC_OscConfig+0x244>)
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3a:	f7fe fe21 	bl	8003980 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d42:	f7fe fe1d 	bl	8003980 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e1a8      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d54:	4b2b      	ldr	r3, [pc, #172]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d60:	4b28      	ldr	r3, [pc, #160]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	4925      	ldr	r1, [pc, #148]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	600b      	str	r3, [r1, #0]
 8004d74:	e015      	b.n	8004da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d76:	4b24      	ldr	r3, [pc, #144]	@ (8004e08 <HAL_RCC_OscConfig+0x244>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fe fe00 	bl	8003980 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d84:	f7fe fdfc 	bl	8003980 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e187      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d96:	4b1b      	ldr	r3, [pc, #108]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d036      	beq.n	8004e1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d016      	beq.n	8004de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db6:	4b15      	ldr	r3, [pc, #84]	@ (8004e0c <HAL_RCC_OscConfig+0x248>)
 8004db8:	2201      	movs	r2, #1
 8004dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbc:	f7fe fde0 	bl	8003980 <HAL_GetTick>
 8004dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dc4:	f7fe fddc 	bl	8003980 <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e167      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e04 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f0      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x200>
 8004de2:	e01b      	b.n	8004e1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004de4:	4b09      	ldr	r3, [pc, #36]	@ (8004e0c <HAL_RCC_OscConfig+0x248>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dea:	f7fe fdc9 	bl	8003980 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df0:	e00e      	b.n	8004e10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df2:	f7fe fdc5 	bl	8003980 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d907      	bls.n	8004e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e150      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
 8004e04:	40023800 	.word	0x40023800
 8004e08:	42470000 	.word	0x42470000
 8004e0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e10:	4b88      	ldr	r3, [pc, #544]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1ea      	bne.n	8004df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8097 	beq.w	8004f58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e2e:	4b81      	ldr	r3, [pc, #516]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10f      	bne.n	8004e5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	4b7d      	ldr	r3, [pc, #500]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e42:	4a7c      	ldr	r2, [pc, #496]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e4a:	4b7a      	ldr	r3, [pc, #488]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e52:	60bb      	str	r3, [r7, #8]
 8004e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e56:	2301      	movs	r3, #1
 8004e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e5a:	4b77      	ldr	r3, [pc, #476]	@ (8005038 <HAL_RCC_OscConfig+0x474>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d118      	bne.n	8004e98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e66:	4b74      	ldr	r3, [pc, #464]	@ (8005038 <HAL_RCC_OscConfig+0x474>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a73      	ldr	r2, [pc, #460]	@ (8005038 <HAL_RCC_OscConfig+0x474>)
 8004e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e72:	f7fe fd85 	bl	8003980 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7a:	f7fe fd81 	bl	8003980 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e10c      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8005038 <HAL_RCC_OscConfig+0x474>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d106      	bne.n	8004eae <HAL_RCC_OscConfig+0x2ea>
 8004ea0:	4b64      	ldr	r3, [pc, #400]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea4:	4a63      	ldr	r2, [pc, #396]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eac:	e01c      	b.n	8004ee8 <HAL_RCC_OscConfig+0x324>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b05      	cmp	r3, #5
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x30c>
 8004eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eba:	4a5e      	ldr	r2, [pc, #376]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ebc:	f043 0304 	orr.w	r3, r3, #4
 8004ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ec2:	4b5c      	ldr	r3, [pc, #368]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec6:	4a5b      	ldr	r2, [pc, #364]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ece:	e00b      	b.n	8004ee8 <HAL_RCC_OscConfig+0x324>
 8004ed0:	4b58      	ldr	r3, [pc, #352]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed4:	4a57      	ldr	r2, [pc, #348]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004edc:	4b55      	ldr	r3, [pc, #340]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee0:	4a54      	ldr	r2, [pc, #336]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004ee2:	f023 0304 	bic.w	r3, r3, #4
 8004ee6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef0:	f7fe fd46 	bl	8003980 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef8:	f7fe fd42 	bl	8003980 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e0cb      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0e:	4b49      	ldr	r3, [pc, #292]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0ee      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x334>
 8004f1a:	e014      	b.n	8004f46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f1c:	f7fe fd30 	bl	8003980 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f22:	e00a      	b.n	8004f3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f24:	f7fe fd2c 	bl	8003980 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e0b5      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ee      	bne.n	8004f24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d105      	bne.n	8004f58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f4c:	4b39      	ldr	r3, [pc, #228]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f50:	4a38      	ldr	r2, [pc, #224]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80a1 	beq.w	80050a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f62:	4b34      	ldr	r3, [pc, #208]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d05c      	beq.n	8005028 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d141      	bne.n	8004ffa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f76:	4b31      	ldr	r3, [pc, #196]	@ (800503c <HAL_RCC_OscConfig+0x478>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7c:	f7fe fd00 	bl	8003980 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f84:	f7fe fcfc 	bl	8003980 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e087      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f96:	4b27      	ldr	r3, [pc, #156]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69da      	ldr	r2, [r3, #28]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	019b      	lsls	r3, r3, #6
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	041b      	lsls	r3, r3, #16
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc4:	061b      	lsls	r3, r3, #24
 8004fc6:	491b      	ldr	r1, [pc, #108]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800503c <HAL_RCC_OscConfig+0x478>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd2:	f7fe fcd5 	bl	8003980 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fda:	f7fe fcd1 	bl	8003980 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e05c      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fec:	4b11      	ldr	r3, [pc, #68]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCC_OscConfig+0x416>
 8004ff8:	e054      	b.n	80050a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffa:	4b10      	ldr	r3, [pc, #64]	@ (800503c <HAL_RCC_OscConfig+0x478>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005000:	f7fe fcbe 	bl	8003980 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005008:	f7fe fcba 	bl	8003980 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e045      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800501a:	4b06      	ldr	r3, [pc, #24]	@ (8005034 <HAL_RCC_OscConfig+0x470>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0x444>
 8005026:	e03d      	b.n	80050a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d107      	bne.n	8005040 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e038      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
 8005034:	40023800 	.word	0x40023800
 8005038:	40007000 	.word	0x40007000
 800503c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005040:	4b1b      	ldr	r3, [pc, #108]	@ (80050b0 <HAL_RCC_OscConfig+0x4ec>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d028      	beq.n	80050a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005058:	429a      	cmp	r2, r3
 800505a:	d121      	bne.n	80050a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005066:	429a      	cmp	r2, r3
 8005068:	d11a      	bne.n	80050a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005070:	4013      	ands	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005076:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005078:	4293      	cmp	r3, r2
 800507a:	d111      	bne.n	80050a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	3b01      	subs	r3, #1
 800508a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800508c:	429a      	cmp	r2, r3
 800508e:	d107      	bne.n	80050a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800509c:	429a      	cmp	r2, r3
 800509e:	d001      	beq.n	80050a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40023800 	.word	0x40023800

080050b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0cc      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050c8:	4b68      	ldr	r3, [pc, #416]	@ (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d90c      	bls.n	80050f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d6:	4b65      	ldr	r3, [pc, #404]	@ (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050de:	4b63      	ldr	r3, [pc, #396]	@ (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d001      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0b8      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d020      	beq.n	800513e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d005      	beq.n	8005114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005108:	4b59      	ldr	r3, [pc, #356]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	4a58      	ldr	r2, [pc, #352]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005112:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005120:	4b53      	ldr	r3, [pc, #332]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4a52      	ldr	r2, [pc, #328]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800512a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800512c:	4b50      	ldr	r3, [pc, #320]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	494d      	ldr	r1, [pc, #308]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b00      	cmp	r3, #0
 8005148:	d044      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d107      	bne.n	8005162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005152:	4b47      	ldr	r3, [pc, #284]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d119      	bne.n	8005192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e07f      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d003      	beq.n	8005172 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800516e:	2b03      	cmp	r3, #3
 8005170:	d107      	bne.n	8005182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005172:	4b3f      	ldr	r3, [pc, #252]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e06f      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005182:	4b3b      	ldr	r3, [pc, #236]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e067      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005192:	4b37      	ldr	r3, [pc, #220]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f023 0203 	bic.w	r2, r3, #3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	4934      	ldr	r1, [pc, #208]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051a4:	f7fe fbec 	bl	8003980 <HAL_GetTick>
 80051a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051aa:	e00a      	b.n	80051c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ac:	f7fe fbe8 	bl	8003980 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e04f      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 020c 	and.w	r2, r3, #12
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d1eb      	bne.n	80051ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051d4:	4b25      	ldr	r3, [pc, #148]	@ (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d20c      	bcs.n	80051fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e2:	4b22      	ldr	r3, [pc, #136]	@ (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ea:	4b20      	ldr	r3, [pc, #128]	@ (800526c <HAL_RCC_ClockConfig+0x1b8>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d001      	beq.n	80051fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e032      	b.n	8005262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005208:	4b19      	ldr	r3, [pc, #100]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4916      	ldr	r1, [pc, #88]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005216:	4313      	orrs	r3, r2
 8005218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b00      	cmp	r3, #0
 8005224:	d009      	beq.n	800523a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005226:	4b12      	ldr	r3, [pc, #72]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	490e      	ldr	r1, [pc, #56]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005236:	4313      	orrs	r3, r2
 8005238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800523a:	f000 f821 	bl	8005280 <HAL_RCC_GetSysClockFreq>
 800523e:	4602      	mov	r2, r0
 8005240:	4b0b      	ldr	r3, [pc, #44]	@ (8005270 <HAL_RCC_ClockConfig+0x1bc>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	091b      	lsrs	r3, r3, #4
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	490a      	ldr	r1, [pc, #40]	@ (8005274 <HAL_RCC_ClockConfig+0x1c0>)
 800524c:	5ccb      	ldrb	r3, [r1, r3]
 800524e:	fa22 f303 	lsr.w	r3, r2, r3
 8005252:	4a09      	ldr	r2, [pc, #36]	@ (8005278 <HAL_RCC_ClockConfig+0x1c4>)
 8005254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005256:	4b09      	ldr	r3, [pc, #36]	@ (800527c <HAL_RCC_ClockConfig+0x1c8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f7fe fb4c 	bl	80038f8 <HAL_InitTick>

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40023c00 	.word	0x40023c00
 8005270:	40023800 	.word	0x40023800
 8005274:	0800da00 	.word	0x0800da00
 8005278:	2000000c 	.word	0x2000000c
 800527c:	20000010 	.word	0x20000010

08005280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005284:	b094      	sub	sp, #80	@ 0x50
 8005286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005298:	4b79      	ldr	r3, [pc, #484]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x200>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 030c 	and.w	r3, r3, #12
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d00d      	beq.n	80052c0 <HAL_RCC_GetSysClockFreq+0x40>
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	f200 80e1 	bhi.w	800546c <HAL_RCC_GetSysClockFreq+0x1ec>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_RCC_GetSysClockFreq+0x34>
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d003      	beq.n	80052ba <HAL_RCC_GetSysClockFreq+0x3a>
 80052b2:	e0db      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052b4:	4b73      	ldr	r3, [pc, #460]	@ (8005484 <HAL_RCC_GetSysClockFreq+0x204>)
 80052b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052b8:	e0db      	b.n	8005472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052ba:	4b73      	ldr	r3, [pc, #460]	@ (8005488 <HAL_RCC_GetSysClockFreq+0x208>)
 80052bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052be:	e0d8      	b.n	8005472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052c0:	4b6f      	ldr	r3, [pc, #444]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ca:	4b6d      	ldr	r3, [pc, #436]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x200>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d063      	beq.n	800539e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	099b      	lsrs	r3, r3, #6
 80052dc:	2200      	movs	r2, #0
 80052de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80052ea:	2300      	movs	r3, #0
 80052ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052f2:	4622      	mov	r2, r4
 80052f4:	462b      	mov	r3, r5
 80052f6:	f04f 0000 	mov.w	r0, #0
 80052fa:	f04f 0100 	mov.w	r1, #0
 80052fe:	0159      	lsls	r1, r3, #5
 8005300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005304:	0150      	lsls	r0, r2, #5
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4621      	mov	r1, r4
 800530c:	1a51      	subs	r1, r2, r1
 800530e:	6139      	str	r1, [r7, #16]
 8005310:	4629      	mov	r1, r5
 8005312:	eb63 0301 	sbc.w	r3, r3, r1
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005324:	4659      	mov	r1, fp
 8005326:	018b      	lsls	r3, r1, #6
 8005328:	4651      	mov	r1, sl
 800532a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800532e:	4651      	mov	r1, sl
 8005330:	018a      	lsls	r2, r1, #6
 8005332:	4651      	mov	r1, sl
 8005334:	ebb2 0801 	subs.w	r8, r2, r1
 8005338:	4659      	mov	r1, fp
 800533a:	eb63 0901 	sbc.w	r9, r3, r1
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800534a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800534e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005352:	4690      	mov	r8, r2
 8005354:	4699      	mov	r9, r3
 8005356:	4623      	mov	r3, r4
 8005358:	eb18 0303 	adds.w	r3, r8, r3
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	462b      	mov	r3, r5
 8005360:	eb49 0303 	adc.w	r3, r9, r3
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	f04f 0200 	mov.w	r2, #0
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005372:	4629      	mov	r1, r5
 8005374:	024b      	lsls	r3, r1, #9
 8005376:	4621      	mov	r1, r4
 8005378:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800537c:	4621      	mov	r1, r4
 800537e:	024a      	lsls	r2, r1, #9
 8005380:	4610      	mov	r0, r2
 8005382:	4619      	mov	r1, r3
 8005384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005386:	2200      	movs	r2, #0
 8005388:	62bb      	str	r3, [r7, #40]	@ 0x28
 800538a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800538c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005390:	f7fa ff22 	bl	80001d8 <__aeabi_uldivmod>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4613      	mov	r3, r2
 800539a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800539c:	e058      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539e:	4b38      	ldr	r3, [pc, #224]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	2200      	movs	r2, #0
 80053a6:	4618      	mov	r0, r3
 80053a8:	4611      	mov	r1, r2
 80053aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053ae:	623b      	str	r3, [r7, #32]
 80053b0:	2300      	movs	r3, #0
 80053b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80053b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053b8:	4642      	mov	r2, r8
 80053ba:	464b      	mov	r3, r9
 80053bc:	f04f 0000 	mov.w	r0, #0
 80053c0:	f04f 0100 	mov.w	r1, #0
 80053c4:	0159      	lsls	r1, r3, #5
 80053c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053ca:	0150      	lsls	r0, r2, #5
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4641      	mov	r1, r8
 80053d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80053d6:	4649      	mov	r1, r9
 80053d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053f0:	ebb2 040a 	subs.w	r4, r2, sl
 80053f4:	eb63 050b 	sbc.w	r5, r3, fp
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	00eb      	lsls	r3, r5, #3
 8005402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005406:	00e2      	lsls	r2, r4, #3
 8005408:	4614      	mov	r4, r2
 800540a:	461d      	mov	r5, r3
 800540c:	4643      	mov	r3, r8
 800540e:	18e3      	adds	r3, r4, r3
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	464b      	mov	r3, r9
 8005414:	eb45 0303 	adc.w	r3, r5, r3
 8005418:	607b      	str	r3, [r7, #4]
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005426:	4629      	mov	r1, r5
 8005428:	028b      	lsls	r3, r1, #10
 800542a:	4621      	mov	r1, r4
 800542c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005430:	4621      	mov	r1, r4
 8005432:	028a      	lsls	r2, r1, #10
 8005434:	4610      	mov	r0, r2
 8005436:	4619      	mov	r1, r3
 8005438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800543a:	2200      	movs	r2, #0
 800543c:	61bb      	str	r3, [r7, #24]
 800543e:	61fa      	str	r2, [r7, #28]
 8005440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005444:	f7fa fec8 	bl	80001d8 <__aeabi_uldivmod>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4613      	mov	r3, r2
 800544e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005450:	4b0b      	ldr	r3, [pc, #44]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x200>)
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	0c1b      	lsrs	r3, r3, #16
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	3301      	adds	r3, #1
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005460:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800546a:	e002      	b.n	8005472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800546c:	4b05      	ldr	r3, [pc, #20]	@ (8005484 <HAL_RCC_GetSysClockFreq+0x204>)
 800546e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005474:	4618      	mov	r0, r3
 8005476:	3750      	adds	r7, #80	@ 0x50
 8005478:	46bd      	mov	sp, r7
 800547a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800547e:	bf00      	nop
 8005480:	40023800 	.word	0x40023800
 8005484:	00f42400 	.word	0x00f42400
 8005488:	007a1200 	.word	0x007a1200

0800548c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005490:	4b03      	ldr	r3, [pc, #12]	@ (80054a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005492:	681b      	ldr	r3, [r3, #0]
}
 8005494:	4618      	mov	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	2000000c 	.word	0x2000000c

080054a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054a8:	f7ff fff0 	bl	800548c <HAL_RCC_GetHCLKFreq>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4b05      	ldr	r3, [pc, #20]	@ (80054c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	0a9b      	lsrs	r3, r3, #10
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	4903      	ldr	r1, [pc, #12]	@ (80054c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ba:	5ccb      	ldrb	r3, [r1, r3]
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40023800 	.word	0x40023800
 80054c8:	0800da10 	.word	0x0800da10

080054cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054d0:	f7ff ffdc 	bl	800548c <HAL_RCC_GetHCLKFreq>
 80054d4:	4602      	mov	r2, r0
 80054d6:	4b05      	ldr	r3, [pc, #20]	@ (80054ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	0b5b      	lsrs	r3, r3, #13
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	4903      	ldr	r1, [pc, #12]	@ (80054f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054e2:	5ccb      	ldrb	r3, [r1, r3]
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40023800 	.word	0x40023800
 80054f0:	0800da10 	.word	0x0800da10

080054f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e022      	b.n	800554c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d105      	bne.n	800551e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7fd ff6b 	bl	80033f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2203      	movs	r2, #3
 8005522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f814 	bl	8005554 <HAL_SD_InitCard>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e00a      	b.n	800554c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005554:	b5b0      	push	{r4, r5, r7, lr}
 8005556:	b08e      	sub	sp, #56	@ 0x38
 8005558:	af04      	add	r7, sp, #16
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800555c:	2300      	movs	r3, #0
 800555e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005564:	2300      	movs	r3, #0
 8005566:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005568:	2300      	movs	r3, #0
 800556a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005570:	2376      	movs	r3, #118	@ 0x76
 8005572:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681d      	ldr	r5, [r3, #0]
 8005578:	466c      	mov	r4, sp
 800557a:	f107 0314 	add.w	r3, r7, #20
 800557e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005582:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005586:	f107 0308 	add.w	r3, r7, #8
 800558a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800558c:	4628      	mov	r0, r5
 800558e:	f003 fb59 	bl	8008c44 <SDIO_Init>
 8005592:	4603      	mov	r3, r0
 8005594:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8005598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e04f      	b.n	8005644 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80055a4:	4b29      	ldr	r3, [pc, #164]	@ (800564c <HAL_SD_InitCard+0xf8>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f003 fb91 	bl	8008cd6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80055b4:	4b25      	ldr	r3, [pc, #148]	@ (800564c <HAL_SD_InitCard+0xf8>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80055ba:	2002      	movs	r0, #2
 80055bc:	f7fe f9ec 	bl	8003998 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fe79 	bl	80062b8 <SD_PowerON>
 80055c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e02e      	b.n	8005644 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fd98 	bl	800611c <SD_InitCard>
 80055ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00b      	beq.n	800560c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e01b      	b.n	8005644 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005614:	4618      	mov	r0, r3
 8005616:	f003 fbf0 	bl	8008dfa <SDMMC_CmdBlockLength>
 800561a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00f      	beq.n	8005642 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a0a      	ldr	r2, [pc, #40]	@ (8005650 <HAL_SD_InitCard+0xfc>)
 8005628:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3728      	adds	r7, #40	@ 0x28
 8005648:	46bd      	mov	sp, r7
 800564a:	bdb0      	pop	{r4, r5, r7, pc}
 800564c:	422580a0 	.word	0x422580a0
 8005650:	004005ff 	.word	0x004005ff

08005654 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b092      	sub	sp, #72	@ 0x48
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005662:	f7fe f98d 	bl	8003980 <HAL_GetTick>
 8005666:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d107      	bne.n	8005686 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e1c5      	b.n	8005a12 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b01      	cmp	r3, #1
 8005690:	f040 81b8 	bne.w	8005a04 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800569a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	441a      	add	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d907      	bls.n	80056b8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ac:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e1ac      	b.n	8005a12 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2203      	movs	r2, #3
 80056bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2200      	movs	r2, #0
 80056c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d002      	beq.n	80056d6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80056d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d2:	025b      	lsls	r3, r3, #9
 80056d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056d6:	f04f 33ff 	mov.w	r3, #4294967295
 80056da:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	025b      	lsls	r3, r3, #9
 80056e0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80056e2:	2390      	movs	r3, #144	@ 0x90
 80056e4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80056e6:	2302      	movs	r3, #2
 80056e8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80056ee:	2301      	movs	r3, #1
 80056f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f107 0214 	add.w	r2, r7, #20
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f003 fb50 	bl	8008da2 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d90a      	bls.n	800571e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2202      	movs	r2, #2
 800570c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005714:	4618      	mov	r0, r3
 8005716:	f003 fbb4 	bl	8008e82 <SDMMC_CmdReadMultiBlock>
 800571a:	6478      	str	r0, [r7, #68]	@ 0x44
 800571c:	e009      	b.n	8005732 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800572a:	4618      	mov	r0, r3
 800572c:	f003 fb87 	bl	8008e3e <SDMMC_CmdReadSingleBlock>
 8005730:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005734:	2b00      	cmp	r3, #0
 8005736:	d012      	beq.n	800575e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a7e      	ldr	r2, [pc, #504]	@ (8005938 <HAL_SD_ReadBlocks+0x2e4>)
 800573e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005746:	431a      	orrs	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e159      	b.n	8005a12 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005762:	e061      	b.n	8005828 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800576a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d03c      	beq.n	80057ec <HAL_SD_ReadBlocks+0x198>
 8005772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005774:	2b00      	cmp	r3, #0
 8005776:	d039      	beq.n	80057ec <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005778:	2300      	movs	r3, #0
 800577a:	643b      	str	r3, [r7, #64]	@ 0x40
 800577c:	e033      	b.n	80057e6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	f003 fa89 	bl	8008c9a <SDIO_ReadFIFO>
 8005788:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800578a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578c:	b2da      	uxtb	r2, r3
 800578e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005790:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005794:	3301      	adds	r3, #1
 8005796:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800579a:	3b01      	subs	r3, #1
 800579c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800579e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a0:	0a1b      	lsrs	r3, r3, #8
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80057a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057aa:	3301      	adds	r3, #1
 80057ac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80057ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b0:	3b01      	subs	r3, #1
 80057b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80057b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b6:	0c1b      	lsrs	r3, r3, #16
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80057be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c0:	3301      	adds	r3, #1
 80057c2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80057c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c6:	3b01      	subs	r3, #1
 80057c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80057ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057cc:	0e1b      	lsrs	r3, r3, #24
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80057d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d6:	3301      	adds	r3, #1
 80057d8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80057da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057dc:	3b01      	subs	r3, #1
 80057de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80057e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057e2:	3301      	adds	r3, #1
 80057e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80057e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057e8:	2b07      	cmp	r3, #7
 80057ea:	d9c8      	bls.n	800577e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80057ec:	f7fe f8c8 	bl	8003980 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d902      	bls.n	8005802 <HAL_SD_ReadBlocks+0x1ae>
 80057fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d112      	bne.n	8005828 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a4c      	ldr	r2, [pc, #304]	@ (8005938 <HAL_SD_ReadBlocks+0x2e4>)
 8005808:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e0f4      	b.n	8005a12 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800582e:	f240 332a 	movw	r3, #810	@ 0x32a
 8005832:	4013      	ands	r3, r2
 8005834:	2b00      	cmp	r3, #0
 8005836:	d095      	beq.n	8005764 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005842:	2b00      	cmp	r3, #0
 8005844:	d022      	beq.n	800588c <HAL_SD_ReadBlocks+0x238>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d91f      	bls.n	800588c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005850:	2b03      	cmp	r3, #3
 8005852:	d01b      	beq.n	800588c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f003 fb79 	bl	8008f50 <SDMMC_CmdStopTransfer>
 800585e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005862:	2b00      	cmp	r3, #0
 8005864:	d012      	beq.n	800588c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a33      	ldr	r2, [pc, #204]	@ (8005938 <HAL_SD_ReadBlocks+0x2e4>)
 800586c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005872:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005874:	431a      	orrs	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e0c2      	b.n	8005a12 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d106      	bne.n	80058a8 <HAL_SD_ReadBlocks+0x254>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d012      	beq.n	80058ce <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a22      	ldr	r2, [pc, #136]	@ (8005938 <HAL_SD_ReadBlocks+0x2e4>)
 80058ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b4:	f043 0208 	orr.w	r2, r3, #8
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e0a1      	b.n	8005a12 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d012      	beq.n	8005902 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a15      	ldr	r2, [pc, #84]	@ (8005938 <HAL_SD_ReadBlocks+0x2e4>)
 80058e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e8:	f043 0202 	orr.w	r2, r3, #2
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e087      	b.n	8005a12 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d064      	beq.n	80059da <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a08      	ldr	r2, [pc, #32]	@ (8005938 <HAL_SD_ReadBlocks+0x2e4>)
 8005916:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800591c:	f043 0220 	orr.w	r2, r3, #32
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e06d      	b.n	8005a12 <HAL_SD_ReadBlocks+0x3be>
 8005936:	bf00      	nop
 8005938:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f003 f9aa 	bl	8008c9a <SDIO_ReadFIFO>
 8005946:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594a:	b2da      	uxtb	r2, r3
 800594c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005952:	3301      	adds	r3, #1
 8005954:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005958:	3b01      	subs	r3, #1
 800595a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800595c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595e:	0a1b      	lsrs	r3, r3, #8
 8005960:	b2da      	uxtb	r2, r3
 8005962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005964:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005968:	3301      	adds	r3, #1
 800596a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800596c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800596e:	3b01      	subs	r3, #1
 8005970:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005974:	0c1b      	lsrs	r3, r3, #16
 8005976:	b2da      	uxtb	r2, r3
 8005978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800597c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597e:	3301      	adds	r3, #1
 8005980:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005984:	3b01      	subs	r3, #1
 8005986:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800598a:	0e1b      	lsrs	r3, r3, #24
 800598c:	b2da      	uxtb	r2, r3
 800598e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005990:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005994:	3301      	adds	r3, #1
 8005996:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800599a:	3b01      	subs	r3, #1
 800599c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800599e:	f7fd ffef 	bl	8003980 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d902      	bls.n	80059b4 <HAL_SD_ReadBlocks+0x360>
 80059ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d112      	bne.n	80059da <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a18      	ldr	r2, [pc, #96]	@ (8005a1c <HAL_SD_ReadBlocks+0x3c8>)
 80059ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e01b      	b.n	8005a12 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_SD_ReadBlocks+0x39a>
 80059e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1a6      	bne.n	800593c <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80059f6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e006      	b.n	8005a12 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a08:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
  }
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3748      	adds	r7, #72	@ 0x48
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	004005ff 	.word	0x004005ff

08005a20 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b092      	sub	sp, #72	@ 0x48
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005a2e:	f7fd ffa7 	bl	8003980 <HAL_GetTick>
 8005a32:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d107      	bne.n	8005a52 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a46:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e16d      	b.n	8005d2e <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	f040 8160 	bne.w	8005d20 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005a66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	441a      	add	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d907      	bls.n	8005a84 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a78:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e154      	b.n	8005d2e <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2203      	movs	r2, #3
 8005a88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2200      	movs	r2, #0
 8005a92:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d002      	beq.n	8005aa2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9e:	025b      	lsls	r3, r3, #9
 8005aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	025b      	lsls	r3, r3, #9
 8005aac:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005aae:	2390      	movs	r3, #144	@ 0x90
 8005ab0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005aba:	2301      	movs	r3, #1
 8005abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f107 0218 	add.w	r2, r7, #24
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f003 f96a 	bl	8008da2 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d90a      	bls.n	8005aea <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f003 fa12 	bl	8008f0a <SDMMC_CmdWriteMultiBlock>
 8005ae6:	6478      	str	r0, [r7, #68]	@ 0x44
 8005ae8:	e009      	b.n	8005afe <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2210      	movs	r2, #16
 8005aee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005af6:	4618      	mov	r0, r3
 8005af8:	f003 f9e5 	bl	8008ec6 <SDMMC_CmdWriteSingleBlock>
 8005afc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d012      	beq.n	8005b2a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a8b      	ldr	r2, [pc, #556]	@ (8005d38 <HAL_SD_WriteBlocks+0x318>)
 8005b0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b12:	431a      	orrs	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e101      	b.n	8005d2e <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005b2e:	e065      	b.n	8005bfc <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d040      	beq.n	8005bc0 <HAL_SD_WriteBlocks+0x1a0>
 8005b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d03d      	beq.n	8005bc0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005b44:	2300      	movs	r3, #0
 8005b46:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b48:	e037      	b.n	8005bba <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b52:	3301      	adds	r3, #1
 8005b54:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	021a      	lsls	r2, r3, #8
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b70:	3b01      	subs	r3, #1
 8005b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	041a      	lsls	r2, r3, #16
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	3301      	adds	r3, #1
 8005b84:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	061a      	lsls	r2, r3, #24
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f107 0214 	add.w	r2, r7, #20
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f003 f880 	bl	8008cb4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bbc:	2b07      	cmp	r3, #7
 8005bbe:	d9c4      	bls.n	8005b4a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005bc0:	f7fd fede 	bl	8003980 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d902      	bls.n	8005bd6 <HAL_SD_WriteBlocks+0x1b6>
 8005bd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d112      	bne.n	8005bfc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a57      	ldr	r2, [pc, #348]	@ (8005d38 <HAL_SD_WriteBlocks+0x318>)
 8005bdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005be2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005be4:	431a      	orrs	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e098      	b.n	8005d2e <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c02:	f240 331a 	movw	r3, #794	@ 0x31a
 8005c06:	4013      	ands	r3, r2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d091      	beq.n	8005b30 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d022      	beq.n	8005c60 <HAL_SD_WriteBlocks+0x240>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d91f      	bls.n	8005c60 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d01b      	beq.n	8005c60 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f003 f98f 	bl	8008f50 <SDMMC_CmdStopTransfer>
 8005c32:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d012      	beq.n	8005c60 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a3e      	ldr	r2, [pc, #248]	@ (8005d38 <HAL_SD_WriteBlocks+0x318>)
 8005c40:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e066      	b.n	8005d2e <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d106      	bne.n	8005c7c <HAL_SD_WriteBlocks+0x25c>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d012      	beq.n	8005ca2 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a2d      	ldr	r2, [pc, #180]	@ (8005d38 <HAL_SD_WriteBlocks+0x318>)
 8005c82:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c88:	f043 0208 	orr.w	r2, r3, #8
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e045      	b.n	8005d2e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d012      	beq.n	8005cd6 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a20      	ldr	r2, [pc, #128]	@ (8005d38 <HAL_SD_WriteBlocks+0x318>)
 8005cb6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbc:	f043 0202 	orr.w	r2, r3, #2
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e02b      	b.n	8005d2e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d012      	beq.n	8005d0a <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a13      	ldr	r2, [pc, #76]	@ (8005d38 <HAL_SD_WriteBlocks+0x318>)
 8005cea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf0:	f043 0210 	orr.w	r2, r3, #16
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e011      	b.n	8005d2e <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005d12:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e006      	b.n	8005d2e <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d24:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
  }
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3748      	adds	r7, #72	@ 0x48
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	004005ff 	.word	0x004005ff

08005d3c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d4a:	0f9b      	lsrs	r3, r3, #30
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d56:	0e9b      	lsrs	r3, r3, #26
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f003 030f 	and.w	r3, r3, #15
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d68:	0e1b      	lsrs	r3, r3, #24
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d7a:	0c1b      	lsrs	r3, r3, #16
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d86:	0a1b      	lsrs	r3, r3, #8
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d9c:	0d1b      	lsrs	r3, r3, #20
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005da8:	0c1b      	lsrs	r3, r3, #16
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dba:	0bdb      	lsrs	r3, r3, #15
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dcc:	0b9b      	lsrs	r3, r3, #14
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dde:	0b5b      	lsrs	r3, r3, #13
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005df0:	0b1b      	lsrs	r3, r3, #12
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2200      	movs	r2, #0
 8005e02:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d163      	bne.n	8005ed4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e10:	009a      	lsls	r2, r3, #2
 8005e12:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005e16:	4013      	ands	r3, r2
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005e1c:	0f92      	lsrs	r2, r2, #30
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e28:	0edb      	lsrs	r3, r3, #27
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	f003 0307 	and.w	r3, r3, #7
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e3a:	0e1b      	lsrs	r3, r3, #24
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e4c:	0d5b      	lsrs	r3, r3, #21
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e5e:	0c9b      	lsrs	r3, r3, #18
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e70:	0bdb      	lsrs	r3, r3, #15
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	7e1b      	ldrb	r3, [r3, #24]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	3302      	adds	r3, #2
 8005e94:	2201      	movs	r2, #1
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005e9e:	fb03 f202 	mul.w	r2, r3, r2
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	7a1b      	ldrb	r3, [r3, #8]
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	409a      	lsls	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005ec0:	0a52      	lsrs	r2, r2, #9
 8005ec2:	fb03 f202 	mul.w	r2, r3, r2
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ed0:	661a      	str	r2, [r3, #96]	@ 0x60
 8005ed2:	e031      	b.n	8005f38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d11d      	bne.n	8005f18 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ee0:	041b      	lsls	r3, r3, #16
 8005ee2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eea:	0c1b      	lsrs	r3, r3, #16
 8005eec:	431a      	orrs	r2, r3
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	029a      	lsls	r2, r3, #10
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f0c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	661a      	str	r2, [r3, #96]	@ 0x60
 8005f16:	e00f      	b.n	8005f38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a58      	ldr	r2, [pc, #352]	@ (8006080 <HAL_SD_GetCardCSD+0x344>)
 8005f1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f24:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e09d      	b.n	8006074 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f3c:	0b9b      	lsrs	r3, r3, #14
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f4e:	09db      	lsrs	r3, r3, #7
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f70:	0fdb      	lsrs	r3, r3, #31
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7c:	0f5b      	lsrs	r3, r3, #29
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	f003 0303 	and.w	r3, r3, #3
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8e:	0e9b      	lsrs	r3, r3, #26
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa0:	0d9b      	lsrs	r3, r3, #22
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	f003 030f 	and.w	r3, r3, #15
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb2:	0d5b      	lsrs	r3, r3, #21
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fce:	0c1b      	lsrs	r3, r3, #16
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe2:	0bdb      	lsrs	r3, r3, #15
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff6:	0b9b      	lsrs	r3, r3, #14
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	f003 0301 	and.w	r3, r3, #1
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800600a:	0b5b      	lsrs	r3, r3, #13
 800600c:	b2db      	uxtb	r3, r3
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	b2da      	uxtb	r2, r3
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800601e:	0b1b      	lsrs	r3, r3, #12
 8006020:	b2db      	uxtb	r3, r3
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	b2da      	uxtb	r2, r3
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006032:	0a9b      	lsrs	r3, r3, #10
 8006034:	b2db      	uxtb	r3, r3
 8006036:	f003 0303 	and.w	r3, r3, #3
 800603a:	b2da      	uxtb	r2, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006046:	0a1b      	lsrs	r3, r3, #8
 8006048:	b2db      	uxtb	r3, r3
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	b2da      	uxtb	r2, r3
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	b2db      	uxtb	r3, r3
 800605e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006062:	b2da      	uxtb	r2, r3
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	004005ff 	.word	0x004005ff

08006084 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80060e8:	f107 030c 	add.w	r3, r7, #12
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f970 	bl	80063d4 <SD_SendStatus>
 80060f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d005      	beq.n	8006108 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	0a5b      	lsrs	r3, r3, #9
 800610c:	f003 030f 	and.w	r3, r3, #15
 8006110:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006112:	693b      	ldr	r3, [r7, #16]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800611c:	b5b0      	push	{r4, r5, r7, lr}
 800611e:	b094      	sub	sp, #80	@ 0x50
 8006120:	af04      	add	r7, sp, #16
 8006122:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006124:	2301      	movs	r3, #1
 8006126:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4618      	mov	r0, r3
 800612e:	f002 fde0 	bl	8008cf2 <SDIO_GetPowerState>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006138:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800613c:	e0b8      	b.n	80062b0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006142:	2b03      	cmp	r3, #3
 8006144:	d02f      	beq.n	80061a6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f002 ffc7 	bl	80090de <SDMMC_CmdSendCID>
 8006150:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <SD_InitCard+0x40>
    {
      return errorstate;
 8006158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800615a:	e0a9      	b.n	80062b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2100      	movs	r1, #0
 8006162:	4618      	mov	r0, r3
 8006164:	f002 fe0a 	bl	8008d7c <SDIO_GetResponse>
 8006168:	4602      	mov	r2, r0
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2104      	movs	r1, #4
 8006174:	4618      	mov	r0, r3
 8006176:	f002 fe01 	bl	8008d7c <SDIO_GetResponse>
 800617a:	4602      	mov	r2, r0
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2108      	movs	r1, #8
 8006186:	4618      	mov	r0, r3
 8006188:	f002 fdf8 	bl	8008d7c <SDIO_GetResponse>
 800618c:	4602      	mov	r2, r0
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	210c      	movs	r1, #12
 8006198:	4618      	mov	r0, r3
 800619a:	f002 fdef 	bl	8008d7c <SDIO_GetResponse>
 800619e:	4602      	mov	r2, r0
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d00d      	beq.n	80061ca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f107 020e 	add.w	r2, r7, #14
 80061b6:	4611      	mov	r1, r2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f002 ffcd 	bl	8009158 <SDMMC_CmdSetRelAdd>
 80061be:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <SD_InitCard+0xae>
    {
      return errorstate;
 80061c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061c8:	e072      	b.n	80062b0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d036      	beq.n	8006240 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80061d2:	89fb      	ldrh	r3, [r7, #14]
 80061d4:	461a      	mov	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e2:	041b      	lsls	r3, r3, #16
 80061e4:	4619      	mov	r1, r3
 80061e6:	4610      	mov	r0, r2
 80061e8:	f002 ff97 	bl	800911a <SDMMC_CmdSendCSD>
 80061ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80061f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f6:	e05b      	b.n	80062b0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2100      	movs	r1, #0
 80061fe:	4618      	mov	r0, r3
 8006200:	f002 fdbc 	bl	8008d7c <SDIO_GetResponse>
 8006204:	4602      	mov	r2, r0
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2104      	movs	r1, #4
 8006210:	4618      	mov	r0, r3
 8006212:	f002 fdb3 	bl	8008d7c <SDIO_GetResponse>
 8006216:	4602      	mov	r2, r0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2108      	movs	r1, #8
 8006222:	4618      	mov	r0, r3
 8006224:	f002 fdaa 	bl	8008d7c <SDIO_GetResponse>
 8006228:	4602      	mov	r2, r0
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	210c      	movs	r1, #12
 8006234:	4618      	mov	r0, r3
 8006236:	f002 fda1 	bl	8008d7c <SDIO_GetResponse>
 800623a:	4602      	mov	r2, r0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2104      	movs	r1, #4
 8006246:	4618      	mov	r0, r3
 8006248:	f002 fd98 	bl	8008d7c <SDIO_GetResponse>
 800624c:	4603      	mov	r3, r0
 800624e:	0d1a      	lsrs	r2, r3, #20
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006254:	f107 0310 	add.w	r3, r7, #16
 8006258:	4619      	mov	r1, r3
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff fd6e 	bl	8005d3c <HAL_SD_GetCardCSD>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006266:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800626a:	e021      	b.n	80062b0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6819      	ldr	r1, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006274:	041b      	lsls	r3, r3, #16
 8006276:	2200      	movs	r2, #0
 8006278:	461c      	mov	r4, r3
 800627a:	4615      	mov	r5, r2
 800627c:	4622      	mov	r2, r4
 800627e:	462b      	mov	r3, r5
 8006280:	4608      	mov	r0, r1
 8006282:	f002 fe87 	bl	8008f94 <SDMMC_CmdSelDesel>
 8006286:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <SD_InitCard+0x176>
  {
    return errorstate;
 800628e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006290:	e00e      	b.n	80062b0 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681d      	ldr	r5, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	466c      	mov	r4, sp
 800629a:	f103 0210 	add.w	r2, r3, #16
 800629e:	ca07      	ldmia	r2, {r0, r1, r2}
 80062a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80062a4:	3304      	adds	r3, #4
 80062a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062a8:	4628      	mov	r0, r5
 80062aa:	f002 fccb 	bl	8008c44 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3740      	adds	r7, #64	@ 0x40
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bdb0      	pop	{r4, r5, r7, pc}

080062b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	2300      	movs	r3, #0
 80062ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f002 fe82 	bl	8008fda <SDMMC_CmdGoIdleState>
 80062d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	e072      	b.n	80063c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f002 fe95 	bl	8009016 <SDMMC_CmdOperCond>
 80062ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00d      	beq.n	8006310 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f002 fe6b 	bl	8008fda <SDMMC_CmdGoIdleState>
 8006304:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d004      	beq.n	8006316 <SD_PowerON+0x5e>
    {
      return errorstate;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	e05b      	b.n	80063c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800631a:	2b01      	cmp	r3, #1
 800631c:	d137      	bne.n	800638e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f002 fe95 	bl	8009054 <SDMMC_CmdAppCommand>
 800632a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d02d      	beq.n	800638e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006332:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006336:	e047      	b.n	80063c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2100      	movs	r1, #0
 800633e:	4618      	mov	r0, r3
 8006340:	f002 fe88 	bl	8009054 <SDMMC_CmdAppCommand>
 8006344:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <SD_PowerON+0x98>
    {
      return errorstate;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	e03b      	b.n	80063c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	491e      	ldr	r1, [pc, #120]	@ (80063d0 <SD_PowerON+0x118>)
 8006356:	4618      	mov	r0, r3
 8006358:	f002 fe9e 	bl	8009098 <SDMMC_CmdAppOperCommand>
 800635c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006364:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006368:	e02e      	b.n	80063c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2100      	movs	r1, #0
 8006370:	4618      	mov	r0, r3
 8006372:	f002 fd03 	bl	8008d7c <SDIO_GetResponse>
 8006376:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	0fdb      	lsrs	r3, r3, #31
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <SD_PowerON+0xcc>
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <SD_PowerON+0xce>
 8006384:	2300      	movs	r3, #0
 8006386:	613b      	str	r3, [r7, #16]

    count++;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	3301      	adds	r3, #1
 800638c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006394:	4293      	cmp	r3, r2
 8006396:	d802      	bhi.n	800639e <SD_PowerON+0xe6>
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0cc      	beq.n	8006338 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d902      	bls.n	80063ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80063a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063ac:	e00c      	b.n	80063c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80063be:	e002      	b.n	80063c6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	c1100000 	.word	0xc1100000

080063d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80063e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063e8:	e018      	b.n	800641c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063f2:	041b      	lsls	r3, r3, #16
 80063f4:	4619      	mov	r1, r3
 80063f6:	4610      	mov	r0, r2
 80063f8:	f002 fecf 	bl	800919a <SDMMC_CmdSendStatus>
 80063fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	e009      	b.n	800641c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2100      	movs	r1, #0
 800640e:	4618      	mov	r0, r3
 8006410:	f002 fcb4 	bl	8008d7c <SDIO_GetResponse>
 8006414:	4602      	mov	r2, r0
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e07b      	b.n	800652e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643a:	2b00      	cmp	r3, #0
 800643c:	d108      	bne.n	8006450 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006446:	d009      	beq.n	800645c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	61da      	str	r2, [r3, #28]
 800644e:	e005      	b.n	800645c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fd f836 	bl	80034e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006492:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80064a4:	431a      	orrs	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064ae:	431a      	orrs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064cc:	431a      	orrs	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e0:	ea42 0103 	orr.w	r1, r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	0c1b      	lsrs	r3, r3, #16
 80064fa:	f003 0104 	and.w	r1, r3, #4
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006502:	f003 0210 	and.w	r2, r3, #16
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800651c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b088      	sub	sp, #32
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	603b      	str	r3, [r7, #0]
 8006542:	4613      	mov	r3, r2
 8006544:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006546:	f7fd fa1b 	bl	8003980 <HAL_GetTick>
 800654a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800654c:	88fb      	ldrh	r3, [r7, #6]
 800654e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b01      	cmp	r3, #1
 800655a:	d001      	beq.n	8006560 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800655c:	2302      	movs	r3, #2
 800655e:	e12a      	b.n	80067b6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_SPI_Transmit+0x36>
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e122      	b.n	80067b6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_SPI_Transmit+0x48>
 800657a:	2302      	movs	r3, #2
 800657c:	e11b      	b.n	80067b6 <HAL_SPI_Transmit+0x280>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2203      	movs	r2, #3
 800658a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	88fa      	ldrh	r2, [r7, #6]
 800659e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	88fa      	ldrh	r2, [r7, #6]
 80065a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065cc:	d10f      	bne.n	80065ee <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f8:	2b40      	cmp	r3, #64	@ 0x40
 80065fa:	d007      	beq.n	800660c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800660a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006614:	d152      	bne.n	80066bc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <HAL_SPI_Transmit+0xee>
 800661e:	8b7b      	ldrh	r3, [r7, #26]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d145      	bne.n	80066b0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006628:	881a      	ldrh	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006634:	1c9a      	adds	r2, r3, #2
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006648:	e032      	b.n	80066b0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f003 0302 	and.w	r3, r3, #2
 8006654:	2b02      	cmp	r3, #2
 8006656:	d112      	bne.n	800667e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800665c:	881a      	ldrh	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006668:	1c9a      	adds	r2, r3, #2
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800667c:	e018      	b.n	80066b0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800667e:	f7fd f97f 	bl	8003980 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d803      	bhi.n	8006696 <HAL_SPI_Transmit+0x160>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006694:	d102      	bne.n	800669c <HAL_SPI_Transmit+0x166>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d109      	bne.n	80066b0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	e082      	b.n	80067b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1c7      	bne.n	800664a <HAL_SPI_Transmit+0x114>
 80066ba:	e053      	b.n	8006764 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <HAL_SPI_Transmit+0x194>
 80066c4:	8b7b      	ldrh	r3, [r7, #26]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d147      	bne.n	800675a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	330c      	adds	r3, #12
 80066d4:	7812      	ldrb	r2, [r2, #0]
 80066d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80066f0:	e033      	b.n	800675a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d113      	bne.n	8006728 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	330c      	adds	r3, #12
 800670a:	7812      	ldrb	r2, [r2, #0]
 800670c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29a      	uxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006726:	e018      	b.n	800675a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006728:	f7fd f92a 	bl	8003980 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	429a      	cmp	r2, r3
 8006736:	d803      	bhi.n	8006740 <HAL_SPI_Transmit+0x20a>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673e:	d102      	bne.n	8006746 <HAL_SPI_Transmit+0x210>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d109      	bne.n	800675a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e02d      	b.n	80067b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800675e:	b29b      	uxth	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1c6      	bne.n	80066f2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006764:	69fa      	ldr	r2, [r7, #28]
 8006766:	6839      	ldr	r1, [r7, #0]
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f000 ffb7 	bl	80076dc <SPI_EndRxTxTransaction>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006782:	2300      	movs	r3, #0
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e000      	b.n	80067b6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80067b4:	2300      	movs	r3, #0
  }
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3720      	adds	r7, #32
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b088      	sub	sp, #32
 80067c2:	af02      	add	r7, sp, #8
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	603b      	str	r3, [r7, #0]
 80067ca:	4613      	mov	r3, r2
 80067cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d001      	beq.n	80067de <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80067da:	2302      	movs	r3, #2
 80067dc:	e104      	b.n	80069e8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067e6:	d112      	bne.n	800680e <HAL_SPI_Receive+0x50>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10e      	bne.n	800680e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2204      	movs	r2, #4
 80067f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80067f8:	88fa      	ldrh	r2, [r7, #6]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	4613      	mov	r3, r2
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 f8f3 	bl	80069f0 <HAL_SPI_TransmitReceive>
 800680a:	4603      	mov	r3, r0
 800680c:	e0ec      	b.n	80069e8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800680e:	f7fd f8b7 	bl	8003980 <HAL_GetTick>
 8006812:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <HAL_SPI_Receive+0x62>
 800681a:	88fb      	ldrh	r3, [r7, #6]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e0e1      	b.n	80069e8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_SPI_Receive+0x74>
 800682e:	2302      	movs	r3, #2
 8006830:	e0da      	b.n	80069e8 <HAL_SPI_Receive+0x22a>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2204      	movs	r2, #4
 800683e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	88fa      	ldrh	r2, [r7, #6]
 8006852:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	88fa      	ldrh	r2, [r7, #6]
 8006858:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006880:	d10f      	bne.n	80068a2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006890:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80068a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ac:	2b40      	cmp	r3, #64	@ 0x40
 80068ae:	d007      	beq.n	80068c0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d170      	bne.n	80069aa <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80068c8:	e035      	b.n	8006936 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d115      	bne.n	8006904 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f103 020c 	add.w	r2, r3, #12
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e4:	7812      	ldrb	r2, [r2, #0]
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006902:	e018      	b.n	8006936 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006904:	f7fd f83c 	bl	8003980 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	683a      	ldr	r2, [r7, #0]
 8006910:	429a      	cmp	r2, r3
 8006912:	d803      	bhi.n	800691c <HAL_SPI_Receive+0x15e>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691a:	d102      	bne.n	8006922 <HAL_SPI_Receive+0x164>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d109      	bne.n	8006936 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e058      	b.n	80069e8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1c4      	bne.n	80068ca <HAL_SPI_Receive+0x10c>
 8006940:	e038      	b.n	80069b4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b01      	cmp	r3, #1
 800694e:	d113      	bne.n	8006978 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695a:	b292      	uxth	r2, r2
 800695c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006962:	1c9a      	adds	r2, r3, #2
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800696c:	b29b      	uxth	r3, r3
 800696e:	3b01      	subs	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006976:	e018      	b.n	80069aa <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006978:	f7fd f802 	bl	8003980 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d803      	bhi.n	8006990 <HAL_SPI_Receive+0x1d2>
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698e:	d102      	bne.n	8006996 <HAL_SPI_Receive+0x1d8>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d109      	bne.n	80069aa <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e01e      	b.n	80069e8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1c6      	bne.n	8006942 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fe29 	bl	8007610 <SPI_EndRxTransaction>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2220      	movs	r2, #32
 80069c8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80069e6:	2300      	movs	r3, #0
  }
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	@ 0x28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80069fe:	2301      	movs	r3, #1
 8006a00:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a02:	f7fc ffbd 	bl	8003980 <HAL_GetTick>
 8006a06:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a0e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006a16:	887b      	ldrh	r3, [r7, #2]
 8006a18:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a1a:	7ffb      	ldrb	r3, [r7, #31]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d00c      	beq.n	8006a3a <HAL_SPI_TransmitReceive+0x4a>
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a26:	d106      	bne.n	8006a36 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d102      	bne.n	8006a36 <HAL_SPI_TransmitReceive+0x46>
 8006a30:	7ffb      	ldrb	r3, [r7, #31]
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d001      	beq.n	8006a3a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006a36:	2302      	movs	r3, #2
 8006a38:	e17f      	b.n	8006d3a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <HAL_SPI_TransmitReceive+0x5c>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <HAL_SPI_TransmitReceive+0x5c>
 8006a46:	887b      	ldrh	r3, [r7, #2]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e174      	b.n	8006d3a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_SPI_TransmitReceive+0x6e>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e16d      	b.n	8006d3a <HAL_SPI_TransmitReceive+0x34a>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d003      	beq.n	8006a7a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2205      	movs	r2, #5
 8006a76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	887a      	ldrh	r2, [r7, #2]
 8006a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	887a      	ldrh	r2, [r7, #2]
 8006a90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	887a      	ldrh	r2, [r7, #2]
 8006a9c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	887a      	ldrh	r2, [r7, #2]
 8006aa2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aba:	2b40      	cmp	r3, #64	@ 0x40
 8006abc:	d007      	beq.n	8006ace <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006acc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ad6:	d17e      	bne.n	8006bd6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <HAL_SPI_TransmitReceive+0xf6>
 8006ae0:	8afb      	ldrh	r3, [r7, #22]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d16c      	bne.n	8006bc0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aea:	881a      	ldrh	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af6:	1c9a      	adds	r2, r3, #2
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	3b01      	subs	r3, #1
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b0a:	e059      	b.n	8006bc0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d11b      	bne.n	8006b52 <HAL_SPI_TransmitReceive+0x162>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d016      	beq.n	8006b52 <HAL_SPI_TransmitReceive+0x162>
 8006b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d113      	bne.n	8006b52 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2e:	881a      	ldrh	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b3a:	1c9a      	adds	r2, r3, #2
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	3b01      	subs	r3, #1
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d119      	bne.n	8006b94 <HAL_SPI_TransmitReceive+0x1a4>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d014      	beq.n	8006b94 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b74:	b292      	uxth	r2, r2
 8006b76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7c:	1c9a      	adds	r2, r3, #2
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b90:	2301      	movs	r3, #1
 8006b92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b94:	f7fc fef4 	bl	8003980 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d80d      	bhi.n	8006bc0 <HAL_SPI_TransmitReceive+0x1d0>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006baa:	d009      	beq.n	8006bc0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e0bc      	b.n	8006d3a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1a0      	bne.n	8006b0c <HAL_SPI_TransmitReceive+0x11c>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d19b      	bne.n	8006b0c <HAL_SPI_TransmitReceive+0x11c>
 8006bd4:	e082      	b.n	8006cdc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <HAL_SPI_TransmitReceive+0x1f4>
 8006bde:	8afb      	ldrh	r3, [r7, #22]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d171      	bne.n	8006cc8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	330c      	adds	r3, #12
 8006bee:	7812      	ldrb	r2, [r2, #0]
 8006bf0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c0a:	e05d      	b.n	8006cc8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d11c      	bne.n	8006c54 <HAL_SPI_TransmitReceive+0x264>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d017      	beq.n	8006c54 <HAL_SPI_TransmitReceive+0x264>
 8006c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d114      	bne.n	8006c54 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	330c      	adds	r3, #12
 8006c34:	7812      	ldrb	r2, [r2, #0]
 8006c36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c3c:	1c5a      	adds	r2, r3, #1
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d119      	bne.n	8006c96 <HAL_SPI_TransmitReceive+0x2a6>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d014      	beq.n	8006c96 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c92:	2301      	movs	r3, #1
 8006c94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c96:	f7fc fe73 	bl	8003980 <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d803      	bhi.n	8006cae <HAL_SPI_TransmitReceive+0x2be>
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cac:	d102      	bne.n	8006cb4 <HAL_SPI_TransmitReceive+0x2c4>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d109      	bne.n	8006cc8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e038      	b.n	8006d3a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d19c      	bne.n	8006c0c <HAL_SPI_TransmitReceive+0x21c>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d197      	bne.n	8006c0c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cdc:	6a3a      	ldr	r2, [r7, #32]
 8006cde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fcfb 	bl	80076dc <SPI_EndRxTxTransaction>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d008      	beq.n	8006cfe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e01d      	b.n	8006d3a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10a      	bne.n	8006d1c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d06:	2300      	movs	r3, #0
 8006d08:	613b      	str	r3, [r7, #16]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006d38:	2300      	movs	r3, #0
  }
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3728      	adds	r7, #40	@ 0x28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d001      	beq.n	8006d62 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8006d5e:	2302      	movs	r3, #2
 8006d60:	e097      	b.n	8006e92 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <HAL_SPI_Transmit_DMA+0x2a>
 8006d68:	88fb      	ldrh	r3, [r7, #6]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e08f      	b.n	8006e92 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_SPI_Transmit_DMA+0x3c>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e088      	b.n	8006e92 <HAL_SPI_Transmit_DMA+0x14e>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2203      	movs	r2, #3
 8006d8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	88fa      	ldrh	r2, [r7, #6]
 8006da0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	88fa      	ldrh	r2, [r7, #6]
 8006da6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dce:	d10f      	bne.n	8006df0 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df4:	4a29      	ldr	r2, [pc, #164]	@ (8006e9c <HAL_SPI_Transmit_DMA+0x158>)
 8006df6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dfc:	4a28      	ldr	r2, [pc, #160]	@ (8006ea0 <HAL_SPI_Transmit_DMA+0x15c>)
 8006dfe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e04:	4a27      	ldr	r2, [pc, #156]	@ (8006ea4 <HAL_SPI_Transmit_DMA+0x160>)
 8006e06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e18:	4619      	mov	r1, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	330c      	adds	r3, #12
 8006e20:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e26:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006e28:	f7fd f9c2 	bl	80041b0 <HAL_DMA_Start_IT>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00b      	beq.n	8006e4a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e36:	f043 0210 	orr.w	r2, r3, #16
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e023      	b.n	8006e92 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e54:	2b40      	cmp	r3, #64	@ 0x40
 8006e56:	d007      	beq.n	8006e68 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e66:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0220 	orr.w	r2, r2, #32
 8006e7e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f042 0202 	orr.w	r2, r2, #2
 8006e8e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	0800746d 	.word	0x0800746d
 8006ea0:	0800728d 	.word	0x0800728d
 8006ea4:	080074c1 	.word	0x080074c1

08006ea8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d001      	beq.n	8006ec6 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e0a9      	b.n	800701a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d110      	bne.n	8006ef0 <HAL_SPI_Receive_DMA+0x48>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ed6:	d10b      	bne.n	8006ef0 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2204      	movs	r2, #4
 8006edc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006ee0:	88fb      	ldrh	r3, [r7, #6]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	68b9      	ldr	r1, [r7, #8]
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 f8a2 	bl	8007030 <HAL_SPI_TransmitReceive_DMA>
 8006eec:	4603      	mov	r3, r0
 8006eee:	e094      	b.n	800701a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <HAL_SPI_Receive_DMA+0x54>
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e08c      	b.n	800701a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d101      	bne.n	8006f0e <HAL_SPI_Receive_DMA+0x66>
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	e085      	b.n	800701a <HAL_SPI_Receive_DMA+0x172>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2204      	movs	r2, #4
 8006f1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	88fa      	ldrh	r2, [r7, #6]
 8006f2e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	88fa      	ldrh	r2, [r7, #6]
 8006f34:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f56:	d10f      	bne.n	8006f78 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f66:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f7c:	4a29      	ldr	r2, [pc, #164]	@ (8007024 <HAL_SPI_Receive_DMA+0x17c>)
 8006f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f84:	4a28      	ldr	r2, [pc, #160]	@ (8007028 <HAL_SPI_Receive_DMA+0x180>)
 8006f86:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f8c:	4a27      	ldr	r2, [pc, #156]	@ (800702c <HAL_SPI_Receive_DMA+0x184>)
 8006f8e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f94:	2200      	movs	r2, #0
 8006f96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	330c      	adds	r3, #12
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006fb0:	f7fd f8fe 	bl	80041b0 <HAL_DMA_Start_IT>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00b      	beq.n	8006fd2 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fbe:	f043 0210 	orr.w	r2, r3, #16
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e023      	b.n	800701a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fdc:	2b40      	cmp	r3, #64	@ 0x40
 8006fde:	d007      	beq.n	8006ff0 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fee:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685a      	ldr	r2, [r3, #4]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0220 	orr.w	r2, r2, #32
 8007006:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0201 	orr.w	r2, r2, #1
 8007016:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	08007489 	.word	0x08007489
 8007028:	08007335 	.word	0x08007335
 800702c:	080074c1 	.word	0x080074c1

08007030 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007044:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d00c      	beq.n	800706c <HAL_SPI_TransmitReceive_DMA+0x3c>
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007058:	d106      	bne.n	8007068 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d102      	bne.n	8007068 <HAL_SPI_TransmitReceive_DMA+0x38>
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	2b04      	cmp	r3, #4
 8007066:	d001      	beq.n	800706c <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8007068:	2302      	movs	r3, #2
 800706a:	e0cf      	b.n	800720c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d005      	beq.n	800707e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d002      	beq.n	800707e <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007078:	887b      	ldrh	r3, [r7, #2]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e0c4      	b.n	800720c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_SPI_TransmitReceive_DMA+0x60>
 800708c:	2302      	movs	r3, #2
 800708e:	e0bd      	b.n	800720c <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d003      	beq.n	80070ac <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2205      	movs	r2, #5
 80070a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	887a      	ldrh	r2, [r7, #2]
 80070bc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	887a      	ldrh	r2, [r7, #2]
 80070c2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	887a      	ldrh	r2, [r7, #2]
 80070ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	887a      	ldrh	r2, [r7, #2]
 80070d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	d108      	bne.n	8007100 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070f2:	4a48      	ldr	r2, [pc, #288]	@ (8007214 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 80070f4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070fa:	4a47      	ldr	r2, [pc, #284]	@ (8007218 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 80070fc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80070fe:	e007      	b.n	8007110 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007104:	4a45      	ldr	r2, [pc, #276]	@ (800721c <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8007106:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800710c:	4a44      	ldr	r2, [pc, #272]	@ (8007220 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800710e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007114:	4a43      	ldr	r2, [pc, #268]	@ (8007224 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8007116:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800711c:	2200      	movs	r2, #0
 800711e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	330c      	adds	r3, #12
 800712a:	4619      	mov	r1, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007130:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007136:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007138:	f7fd f83a 	bl	80041b0 <HAL_DMA_Start_IT>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00b      	beq.n	800715a <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007146:	f043 0210 	orr.w	r2, r3, #16
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e058      	b.n	800720c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685a      	ldr	r2, [r3, #4]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f042 0201 	orr.w	r2, r2, #1
 8007168:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800716e:	2200      	movs	r2, #0
 8007170:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007176:	2200      	movs	r2, #0
 8007178:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800717e:	2200      	movs	r2, #0
 8007180:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007186:	2200      	movs	r2, #0
 8007188:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007192:	4619      	mov	r1, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	330c      	adds	r3, #12
 800719a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071a0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80071a2:	f7fd f805 	bl	80041b0 <HAL_DMA_Start_IT>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071b0:	f043 0210 	orr.w	r2, r3, #16
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e023      	b.n	800720c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ce:	2b40      	cmp	r3, #64	@ 0x40
 80071d0:	d007      	beq.n	80071e2 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071e0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f042 0220 	orr.w	r2, r2, #32
 80071f8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f042 0202 	orr.w	r2, r2, #2
 8007208:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	08007489 	.word	0x08007489
 8007218:	08007335 	.word	0x08007335
 800721c:	080074a5 	.word	0x080074a5
 8007220:	080073dd 	.word	0x080073dd
 8007224:	080074c1 	.word	0x080074c1

08007228 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007298:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800729a:	f7fc fb71 	bl	8003980 <HAL_GetTick>
 800729e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072ae:	d03b      	beq.n	8007328 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0220 	bic.w	r2, r2, #32
 80072be:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f022 0202 	bic.w	r2, r2, #2
 80072ce:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	2164      	movs	r1, #100	@ 0x64
 80072d4:	6978      	ldr	r0, [r7, #20]
 80072d6:	f000 fa01 	bl	80076dc <SPI_EndRxTxTransaction>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d005      	beq.n	80072ec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072e4:	f043 0220 	orr.w	r2, r3, #32
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	60fb      	str	r3, [r7, #12]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2200      	movs	r2, #0
 800730e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007320:	6978      	ldr	r0, [r7, #20]
 8007322:	f7ff ffa9 	bl	8007278 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007326:	e002      	b.n	800732e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007328:	6978      	ldr	r0, [r7, #20]
 800732a:	f7fa fc21 	bl	8001b70 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007340:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007342:	f7fc fb1d 	bl	8003980 <HAL_GetTick>
 8007346:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007356:	d03b      	beq.n	80073d0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 0220 	bic.w	r2, r2, #32
 8007366:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10d      	bne.n	800738c <SPI_DMAReceiveCplt+0x58>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007378:	d108      	bne.n	800738c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0203 	bic.w	r2, r2, #3
 8007388:	605a      	str	r2, [r3, #4]
 800738a:	e007      	b.n	800739c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	2164      	movs	r1, #100	@ 0x64
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f935 	bl	8007610 <SPI_EndRxTransaction>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2220      	movs	r2, #32
 80073b0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f7ff ff55 	bl	8007278 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80073ce:	e002      	b.n	80073d6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f7fa fbe3 	bl	8001b9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b084      	sub	sp, #16
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073ea:	f7fc fac9 	bl	8003980 <HAL_GetTick>
 80073ee:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073fe:	d02f      	beq.n	8007460 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0220 	bic.w	r2, r2, #32
 800740e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	2164      	movs	r1, #100	@ 0x64
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f961 	bl	80076dc <SPI_EndRxTxTransaction>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007424:	f043 0220 	orr.w	r2, r3, #32
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0203 	bic.w	r2, r2, #3
 800743a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f7ff ff0d 	bl	8007278 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800745e:	e002      	b.n	8007466 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f7ff fee1 	bl	8007228 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007478:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f7ff fede 	bl	800723c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007480:	bf00      	nop
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007494:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f7ff feda 	bl	8007250 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800749c:	bf00      	nop
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7ff fed6 	bl	8007264 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074b8:	bf00      	nop
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0203 	bic.w	r2, r2, #3
 80074dc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074e2:	f043 0210 	orr.w	r2, r3, #16
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f7ff fec0 	bl	8007278 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074f8:	bf00      	nop
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b088      	sub	sp, #32
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	4613      	mov	r3, r2
 800750e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007510:	f7fc fa36 	bl	8003980 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007518:	1a9b      	subs	r3, r3, r2
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	4413      	add	r3, r2
 800751e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007520:	f7fc fa2e 	bl	8003980 <HAL_GetTick>
 8007524:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007526:	4b39      	ldr	r3, [pc, #228]	@ (800760c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	015b      	lsls	r3, r3, #5
 800752c:	0d1b      	lsrs	r3, r3, #20
 800752e:	69fa      	ldr	r2, [r7, #28]
 8007530:	fb02 f303 	mul.w	r3, r2, r3
 8007534:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007536:	e054      	b.n	80075e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753e:	d050      	beq.n	80075e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007540:	f7fc fa1e 	bl	8003980 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	429a      	cmp	r2, r3
 800754e:	d902      	bls.n	8007556 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d13d      	bne.n	80075d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007564:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800756e:	d111      	bne.n	8007594 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007578:	d004      	beq.n	8007584 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007582:	d107      	bne.n	8007594 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007592:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007598:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800759c:	d10f      	bne.n	80075be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e017      	b.n	8007602 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	3b01      	subs	r3, #1
 80075e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	4013      	ands	r3, r2
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	bf0c      	ite	eq
 80075f2:	2301      	moveq	r3, #1
 80075f4:	2300      	movne	r3, #0
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	461a      	mov	r2, r3
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d19b      	bne.n	8007538 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3720      	adds	r7, #32
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	2000000c 	.word	0x2000000c

08007610 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af02      	add	r7, sp, #8
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007624:	d111      	bne.n	800764a <SPI_EndRxTransaction+0x3a>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800762e:	d004      	beq.n	800763a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007638:	d107      	bne.n	800764a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007648:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007652:	d12a      	bne.n	80076aa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800765c:	d012      	beq.n	8007684 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2200      	movs	r2, #0
 8007666:	2180      	movs	r1, #128	@ 0x80
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f7ff ff49 	bl	8007500 <SPI_WaitFlagStateUntilTimeout>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d02d      	beq.n	80076d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007678:	f043 0220 	orr.w	r2, r3, #32
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e026      	b.n	80076d2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2200      	movs	r2, #0
 800768c:	2101      	movs	r1, #1
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff ff36 	bl	8007500 <SPI_WaitFlagStateUntilTimeout>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d01a      	beq.n	80076d0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800769e:	f043 0220 	orr.w	r2, r3, #32
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e013      	b.n	80076d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2200      	movs	r2, #0
 80076b2:	2101      	movs	r1, #1
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7ff ff23 	bl	8007500 <SPI_WaitFlagStateUntilTimeout>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d007      	beq.n	80076d0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c4:	f043 0220 	orr.w	r2, r3, #32
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e000      	b.n	80076d2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2201      	movs	r2, #1
 80076f0:	2102      	movs	r1, #2
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f7ff ff04 	bl	8007500 <SPI_WaitFlagStateUntilTimeout>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d007      	beq.n	800770e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007702:	f043 0220 	orr.w	r2, r3, #32
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e032      	b.n	8007774 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800770e:	4b1b      	ldr	r3, [pc, #108]	@ (800777c <SPI_EndRxTxTransaction+0xa0>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a1b      	ldr	r2, [pc, #108]	@ (8007780 <SPI_EndRxTxTransaction+0xa4>)
 8007714:	fba2 2303 	umull	r2, r3, r2, r3
 8007718:	0d5b      	lsrs	r3, r3, #21
 800771a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800771e:	fb02 f303 	mul.w	r3, r2, r3
 8007722:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800772c:	d112      	bne.n	8007754 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2200      	movs	r2, #0
 8007736:	2180      	movs	r1, #128	@ 0x80
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7ff fee1 	bl	8007500 <SPI_WaitFlagStateUntilTimeout>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d016      	beq.n	8007772 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007748:	f043 0220 	orr.w	r2, r3, #32
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e00f      	b.n	8007774 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00a      	beq.n	8007770 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	3b01      	subs	r3, #1
 800775e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800776a:	2b80      	cmp	r3, #128	@ 0x80
 800776c:	d0f2      	beq.n	8007754 <SPI_EndRxTxTransaction+0x78>
 800776e:	e000      	b.n	8007772 <SPI_EndRxTxTransaction+0x96>
        break;
 8007770:	bf00      	nop
  }

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	2000000c 	.word	0x2000000c
 8007780:	165e9f81 	.word	0x165e9f81

08007784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e041      	b.n	800781a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d106      	bne.n	80077b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f7fb ff48 	bl	8003640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3304      	adds	r3, #4
 80077c0:	4619      	mov	r1, r3
 80077c2:	4610      	mov	r0, r2
 80077c4:	f000 f95e 	bl	8007a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b01      	cmp	r3, #1
 8007836:	d001      	beq.n	800783c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e046      	b.n	80078ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2202      	movs	r2, #2
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a23      	ldr	r2, [pc, #140]	@ (80078d8 <HAL_TIM_Base_Start+0xb4>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d022      	beq.n	8007894 <HAL_TIM_Base_Start+0x70>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007856:	d01d      	beq.n	8007894 <HAL_TIM_Base_Start+0x70>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a1f      	ldr	r2, [pc, #124]	@ (80078dc <HAL_TIM_Base_Start+0xb8>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d018      	beq.n	8007894 <HAL_TIM_Base_Start+0x70>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a1e      	ldr	r2, [pc, #120]	@ (80078e0 <HAL_TIM_Base_Start+0xbc>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d013      	beq.n	8007894 <HAL_TIM_Base_Start+0x70>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a1c      	ldr	r2, [pc, #112]	@ (80078e4 <HAL_TIM_Base_Start+0xc0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d00e      	beq.n	8007894 <HAL_TIM_Base_Start+0x70>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a1b      	ldr	r2, [pc, #108]	@ (80078e8 <HAL_TIM_Base_Start+0xc4>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d009      	beq.n	8007894 <HAL_TIM_Base_Start+0x70>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a19      	ldr	r2, [pc, #100]	@ (80078ec <HAL_TIM_Base_Start+0xc8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d004      	beq.n	8007894 <HAL_TIM_Base_Start+0x70>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a18      	ldr	r2, [pc, #96]	@ (80078f0 <HAL_TIM_Base_Start+0xcc>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d111      	bne.n	80078b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b06      	cmp	r3, #6
 80078a4:	d010      	beq.n	80078c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f042 0201 	orr.w	r2, r2, #1
 80078b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078b6:	e007      	b.n	80078c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0201 	orr.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	40010000 	.word	0x40010000
 80078dc:	40000400 	.word	0x40000400
 80078e0:	40000800 	.word	0x40000800
 80078e4:	40000c00 	.word	0x40000c00
 80078e8:	40010400 	.word	0x40010400
 80078ec:	40014000 	.word	0x40014000
 80078f0:	40001800 	.word	0x40001800

080078f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007908:	2b01      	cmp	r3, #1
 800790a:	d101      	bne.n	8007910 <HAL_TIM_ConfigClockSource+0x1c>
 800790c:	2302      	movs	r3, #2
 800790e:	e0b4      	b.n	8007a7a <HAL_TIM_ConfigClockSource+0x186>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800792e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007948:	d03e      	beq.n	80079c8 <HAL_TIM_ConfigClockSource+0xd4>
 800794a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800794e:	f200 8087 	bhi.w	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007956:	f000 8086 	beq.w	8007a66 <HAL_TIM_ConfigClockSource+0x172>
 800795a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800795e:	d87f      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007960:	2b70      	cmp	r3, #112	@ 0x70
 8007962:	d01a      	beq.n	800799a <HAL_TIM_ConfigClockSource+0xa6>
 8007964:	2b70      	cmp	r3, #112	@ 0x70
 8007966:	d87b      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007968:	2b60      	cmp	r3, #96	@ 0x60
 800796a:	d050      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x11a>
 800796c:	2b60      	cmp	r3, #96	@ 0x60
 800796e:	d877      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007970:	2b50      	cmp	r3, #80	@ 0x50
 8007972:	d03c      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0xfa>
 8007974:	2b50      	cmp	r3, #80	@ 0x50
 8007976:	d873      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007978:	2b40      	cmp	r3, #64	@ 0x40
 800797a:	d058      	beq.n	8007a2e <HAL_TIM_ConfigClockSource+0x13a>
 800797c:	2b40      	cmp	r3, #64	@ 0x40
 800797e:	d86f      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007980:	2b30      	cmp	r3, #48	@ 0x30
 8007982:	d064      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x15a>
 8007984:	2b30      	cmp	r3, #48	@ 0x30
 8007986:	d86b      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007988:	2b20      	cmp	r3, #32
 800798a:	d060      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x15a>
 800798c:	2b20      	cmp	r3, #32
 800798e:	d867      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d05c      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x15a>
 8007994:	2b10      	cmp	r3, #16
 8007996:	d05a      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x15a>
 8007998:	e062      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079aa:	f000 f991 	bl	8007cd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80079bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	609a      	str	r2, [r3, #8]
      break;
 80079c6:	e04f      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079d8:	f000 f97a 	bl	8007cd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689a      	ldr	r2, [r3, #8]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079ea:	609a      	str	r2, [r3, #8]
      break;
 80079ec:	e03c      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079fa:	461a      	mov	r2, r3
 80079fc:	f000 f8ee 	bl	8007bdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2150      	movs	r1, #80	@ 0x50
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 f947 	bl	8007c9a <TIM_ITRx_SetConfig>
      break;
 8007a0c:	e02c      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f000 f90d 	bl	8007c3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2160      	movs	r1, #96	@ 0x60
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 f937 	bl	8007c9a <TIM_ITRx_SetConfig>
      break;
 8007a2c:	e01c      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f000 f8ce 	bl	8007bdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2140      	movs	r1, #64	@ 0x40
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f927 	bl	8007c9a <TIM_ITRx_SetConfig>
      break;
 8007a4c:	e00c      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f000 f91e 	bl	8007c9a <TIM_ITRx_SetConfig>
      break;
 8007a5e:	e003      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]
      break;
 8007a64:	e000      	b.n	8007a68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a46      	ldr	r2, [pc, #280]	@ (8007bb0 <TIM_Base_SetConfig+0x12c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d013      	beq.n	8007ac4 <TIM_Base_SetConfig+0x40>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa2:	d00f      	beq.n	8007ac4 <TIM_Base_SetConfig+0x40>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a43      	ldr	r2, [pc, #268]	@ (8007bb4 <TIM_Base_SetConfig+0x130>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d00b      	beq.n	8007ac4 <TIM_Base_SetConfig+0x40>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a42      	ldr	r2, [pc, #264]	@ (8007bb8 <TIM_Base_SetConfig+0x134>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d007      	beq.n	8007ac4 <TIM_Base_SetConfig+0x40>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a41      	ldr	r2, [pc, #260]	@ (8007bbc <TIM_Base_SetConfig+0x138>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d003      	beq.n	8007ac4 <TIM_Base_SetConfig+0x40>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a40      	ldr	r2, [pc, #256]	@ (8007bc0 <TIM_Base_SetConfig+0x13c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d108      	bne.n	8007ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a35      	ldr	r2, [pc, #212]	@ (8007bb0 <TIM_Base_SetConfig+0x12c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d02b      	beq.n	8007b36 <TIM_Base_SetConfig+0xb2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ae4:	d027      	beq.n	8007b36 <TIM_Base_SetConfig+0xb2>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a32      	ldr	r2, [pc, #200]	@ (8007bb4 <TIM_Base_SetConfig+0x130>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d023      	beq.n	8007b36 <TIM_Base_SetConfig+0xb2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a31      	ldr	r2, [pc, #196]	@ (8007bb8 <TIM_Base_SetConfig+0x134>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d01f      	beq.n	8007b36 <TIM_Base_SetConfig+0xb2>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a30      	ldr	r2, [pc, #192]	@ (8007bbc <TIM_Base_SetConfig+0x138>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d01b      	beq.n	8007b36 <TIM_Base_SetConfig+0xb2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a2f      	ldr	r2, [pc, #188]	@ (8007bc0 <TIM_Base_SetConfig+0x13c>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d017      	beq.n	8007b36 <TIM_Base_SetConfig+0xb2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a2e      	ldr	r2, [pc, #184]	@ (8007bc4 <TIM_Base_SetConfig+0x140>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d013      	beq.n	8007b36 <TIM_Base_SetConfig+0xb2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a2d      	ldr	r2, [pc, #180]	@ (8007bc8 <TIM_Base_SetConfig+0x144>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00f      	beq.n	8007b36 <TIM_Base_SetConfig+0xb2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a2c      	ldr	r2, [pc, #176]	@ (8007bcc <TIM_Base_SetConfig+0x148>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00b      	beq.n	8007b36 <TIM_Base_SetConfig+0xb2>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a2b      	ldr	r2, [pc, #172]	@ (8007bd0 <TIM_Base_SetConfig+0x14c>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d007      	beq.n	8007b36 <TIM_Base_SetConfig+0xb2>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a2a      	ldr	r2, [pc, #168]	@ (8007bd4 <TIM_Base_SetConfig+0x150>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d003      	beq.n	8007b36 <TIM_Base_SetConfig+0xb2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a29      	ldr	r2, [pc, #164]	@ (8007bd8 <TIM_Base_SetConfig+0x154>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d108      	bne.n	8007b48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a10      	ldr	r2, [pc, #64]	@ (8007bb0 <TIM_Base_SetConfig+0x12c>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d003      	beq.n	8007b7c <TIM_Base_SetConfig+0xf8>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a12      	ldr	r2, [pc, #72]	@ (8007bc0 <TIM_Base_SetConfig+0x13c>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d103      	bne.n	8007b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	691a      	ldr	r2, [r3, #16]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d105      	bne.n	8007ba2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	f023 0201 	bic.w	r2, r3, #1
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	611a      	str	r2, [r3, #16]
  }
}
 8007ba2:	bf00      	nop
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	40010000 	.word	0x40010000
 8007bb4:	40000400 	.word	0x40000400
 8007bb8:	40000800 	.word	0x40000800
 8007bbc:	40000c00 	.word	0x40000c00
 8007bc0:	40010400 	.word	0x40010400
 8007bc4:	40014000 	.word	0x40014000
 8007bc8:	40014400 	.word	0x40014400
 8007bcc:	40014800 	.word	0x40014800
 8007bd0:	40001800 	.word	0x40001800
 8007bd4:	40001c00 	.word	0x40001c00
 8007bd8:	40002000 	.word	0x40002000

08007bdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	f023 0201 	bic.w	r2, r3, #1
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	f023 030a 	bic.w	r3, r3, #10
 8007c18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	621a      	str	r2, [r3, #32]
}
 8007c2e:	bf00      	nop
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b087      	sub	sp, #28
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	60f8      	str	r0, [r7, #12]
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	f023 0210 	bic.w	r2, r3, #16
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	031b      	lsls	r3, r3, #12
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007c76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	011b      	lsls	r3, r3, #4
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	621a      	str	r2, [r3, #32]
}
 8007c8e:	bf00      	nop
 8007c90:	371c      	adds	r7, #28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b085      	sub	sp, #20
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f043 0307 	orr.w	r3, r3, #7
 8007cbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	609a      	str	r2, [r3, #8]
}
 8007cc4:	bf00      	nop
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007cea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	021a      	lsls	r2, r3, #8
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	609a      	str	r2, [r3, #8]
}
 8007d04:	bf00      	nop
 8007d06:	371c      	adds	r7, #28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e05a      	b.n	8007dde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a21      	ldr	r2, [pc, #132]	@ (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d022      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d74:	d01d      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d018      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a1b      	ldr	r2, [pc, #108]	@ (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007df8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00e      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a18      	ldr	r2, [pc, #96]	@ (8007dfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d009      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a17      	ldr	r2, [pc, #92]	@ (8007e00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d004      	beq.n	8007db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a15      	ldr	r2, [pc, #84]	@ (8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d10c      	bne.n	8007dcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3714      	adds	r7, #20
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	40010000 	.word	0x40010000
 8007df0:	40000400 	.word	0x40000400
 8007df4:	40000800 	.word	0x40000800
 8007df8:	40000c00 	.word	0x40000c00
 8007dfc:	40010400 	.word	0x40010400
 8007e00:	40014000 	.word	0x40014000
 8007e04:	40001800 	.word	0x40001800

08007e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e042      	b.n	8007ea0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fb fc26 	bl	8003680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2224      	movs	r2, #36	@ 0x24
 8007e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fc85 	bl	800875c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	691a      	ldr	r2, [r3, #16]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	695a      	ldr	r2, [r3, #20]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68da      	ldr	r2, [r3, #12]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b0ba      	sub	sp, #232	@ 0xe8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ede:	f003 030f 	and.w	r3, r3, #15
 8007ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10f      	bne.n	8007f0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef2:	f003 0320 	and.w	r3, r3, #32
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d009      	beq.n	8007f0e <HAL_UART_IRQHandler+0x66>
 8007efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fb69 	bl	80085de <UART_Receive_IT>
      return;
 8007f0c:	e25b      	b.n	80083c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007f0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 80de 	beq.w	80080d4 <HAL_UART_IRQHandler+0x22c>
 8007f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d106      	bne.n	8007f32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 80d1 	beq.w	80080d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00b      	beq.n	8007f56 <HAL_UART_IRQHandler+0xae>
 8007f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d005      	beq.n	8007f56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f4e:	f043 0201 	orr.w	r2, r3, #1
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f5a:	f003 0304 	and.w	r3, r3, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00b      	beq.n	8007f7a <HAL_UART_IRQHandler+0xd2>
 8007f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d005      	beq.n	8007f7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f72:	f043 0202 	orr.w	r2, r3, #2
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00b      	beq.n	8007f9e <HAL_UART_IRQHandler+0xf6>
 8007f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d005      	beq.n	8007f9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f96:	f043 0204 	orr.w	r2, r3, #4
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fa2:	f003 0308 	and.w	r3, r3, #8
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d011      	beq.n	8007fce <HAL_UART_IRQHandler+0x126>
 8007faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fae:	f003 0320 	and.w	r3, r3, #32
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d105      	bne.n	8007fc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d005      	beq.n	8007fce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc6:	f043 0208 	orr.w	r2, r3, #8
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 81f2 	beq.w	80083bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fdc:	f003 0320 	and.w	r3, r3, #32
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d008      	beq.n	8007ff6 <HAL_UART_IRQHandler+0x14e>
 8007fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fe8:	f003 0320 	and.w	r3, r3, #32
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 faf4 	bl	80085de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008000:	2b40      	cmp	r3, #64	@ 0x40
 8008002:	bf0c      	ite	eq
 8008004:	2301      	moveq	r3, #1
 8008006:	2300      	movne	r3, #0
 8008008:	b2db      	uxtb	r3, r3
 800800a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008012:	f003 0308 	and.w	r3, r3, #8
 8008016:	2b00      	cmp	r3, #0
 8008018:	d103      	bne.n	8008022 <HAL_UART_IRQHandler+0x17a>
 800801a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800801e:	2b00      	cmp	r3, #0
 8008020:	d04f      	beq.n	80080c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f9fc 	bl	8008420 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008032:	2b40      	cmp	r3, #64	@ 0x40
 8008034:	d141      	bne.n	80080ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3314      	adds	r3, #20
 800803c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008040:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008044:	e853 3f00 	ldrex	r3, [r3]
 8008048:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800804c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008054:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3314      	adds	r3, #20
 800805e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008062:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008066:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800806e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008072:	e841 2300 	strex	r3, r2, [r1]
 8008076:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800807a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1d9      	bne.n	8008036 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d013      	beq.n	80080b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800808e:	4a7e      	ldr	r2, [pc, #504]	@ (8008288 <HAL_UART_IRQHandler+0x3e0>)
 8008090:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008096:	4618      	mov	r0, r3
 8008098:	f7fc f952 	bl	8004340 <HAL_DMA_Abort_IT>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d016      	beq.n	80080d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80080ac:	4610      	mov	r0, r2
 80080ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b0:	e00e      	b.n	80080d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f99e 	bl	80083f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b8:	e00a      	b.n	80080d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f99a 	bl	80083f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c0:	e006      	b.n	80080d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f996 	bl	80083f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80080ce:	e175      	b.n	80083bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d0:	bf00      	nop
    return;
 80080d2:	e173      	b.n	80083bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d8:	2b01      	cmp	r3, #1
 80080da:	f040 814f 	bne.w	800837c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80080de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080e2:	f003 0310 	and.w	r3, r3, #16
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 8148 	beq.w	800837c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80080ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080f0:	f003 0310 	and.w	r3, r3, #16
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 8141 	beq.w	800837c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080fa:	2300      	movs	r3, #0
 80080fc:	60bb      	str	r3, [r7, #8]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	60bb      	str	r3, [r7, #8]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	60bb      	str	r3, [r7, #8]
 800810e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800811a:	2b40      	cmp	r3, #64	@ 0x40
 800811c:	f040 80b6 	bne.w	800828c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800812c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 8145 	beq.w	80083c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800813a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800813e:	429a      	cmp	r2, r3
 8008140:	f080 813e 	bcs.w	80083c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800814a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008156:	f000 8088 	beq.w	800826a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	330c      	adds	r3, #12
 8008160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008164:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008170:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008178:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	330c      	adds	r3, #12
 8008182:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008186:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800818a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008192:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008196:	e841 2300 	strex	r3, r2, [r1]
 800819a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800819e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1d9      	bne.n	800815a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3314      	adds	r3, #20
 80081ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80081b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80081b8:	f023 0301 	bic.w	r3, r3, #1
 80081bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3314      	adds	r3, #20
 80081c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80081ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80081ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80081d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80081d6:	e841 2300 	strex	r3, r2, [r1]
 80081da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80081dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1e1      	bne.n	80081a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3314      	adds	r3, #20
 80081e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081ec:	e853 3f00 	ldrex	r3, [r3]
 80081f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80081f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3314      	adds	r3, #20
 8008202:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008206:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008208:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800820c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008214:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e3      	bne.n	80081e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	330c      	adds	r3, #12
 800822e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008232:	e853 3f00 	ldrex	r3, [r3]
 8008236:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800823a:	f023 0310 	bic.w	r3, r3, #16
 800823e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	330c      	adds	r3, #12
 8008248:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800824c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800824e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008252:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800825a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e3      	bne.n	8008228 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008264:	4618      	mov	r0, r3
 8008266:	f7fb fffb 	bl	8004260 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2202      	movs	r2, #2
 800826e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008278:	b29b      	uxth	r3, r3
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	b29b      	uxth	r3, r3
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f8c1 	bl	8008408 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008286:	e09b      	b.n	80083c0 <HAL_UART_IRQHandler+0x518>
 8008288:	080084e7 	.word	0x080084e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008294:	b29b      	uxth	r3, r3
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 808e 	beq.w	80083c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80082a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8089 	beq.w	80083c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	330c      	adds	r3, #12
 80082b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	330c      	adds	r3, #12
 80082d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80082d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80082d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e3      	bne.n	80082b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3314      	adds	r3, #20
 80082f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f4:	e853 3f00 	ldrex	r3, [r3]
 80082f8:	623b      	str	r3, [r7, #32]
   return(result);
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	f023 0301 	bic.w	r3, r3, #1
 8008300:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3314      	adds	r3, #20
 800830a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800830e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008310:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800831c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e3      	bne.n	80082ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2220      	movs	r2, #32
 8008326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	330c      	adds	r3, #12
 8008336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f023 0310 	bic.w	r3, r3, #16
 8008346:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	330c      	adds	r3, #12
 8008350:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008354:	61fa      	str	r2, [r7, #28]
 8008356:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	69b9      	ldr	r1, [r7, #24]
 800835a:	69fa      	ldr	r2, [r7, #28]
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	617b      	str	r3, [r7, #20]
   return(result);
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e3      	bne.n	8008330 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2202      	movs	r2, #2
 800836c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800836e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f847 	bl	8008408 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800837a:	e023      	b.n	80083c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800837c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008384:	2b00      	cmp	r3, #0
 8008386:	d009      	beq.n	800839c <HAL_UART_IRQHandler+0x4f4>
 8008388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800838c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f8ba 	bl	800850e <UART_Transmit_IT>
    return;
 800839a:	e014      	b.n	80083c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800839c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00e      	beq.n	80083c6 <HAL_UART_IRQHandler+0x51e>
 80083a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d008      	beq.n	80083c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f8fa 	bl	80085ae <UART_EndTransmit_IT>
    return;
 80083ba:	e004      	b.n	80083c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80083bc:	bf00      	nop
 80083be:	e002      	b.n	80083c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80083c0:	bf00      	nop
 80083c2:	e000      	b.n	80083c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80083c4:	bf00      	nop
  }
}
 80083c6:	37e8      	adds	r7, #232	@ 0xe8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	460b      	mov	r3, r1
 8008412:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008420:	b480      	push	{r7}
 8008422:	b095      	sub	sp, #84	@ 0x54
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	330c      	adds	r3, #12
 800842e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008432:	e853 3f00 	ldrex	r3, [r3]
 8008436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800843e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	330c      	adds	r3, #12
 8008446:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008448:	643a      	str	r2, [r7, #64]	@ 0x40
 800844a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800844e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008450:	e841 2300 	strex	r3, r2, [r1]
 8008454:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1e5      	bne.n	8008428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3314      	adds	r3, #20
 8008462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	61fb      	str	r3, [r7, #28]
   return(result);
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	f023 0301 	bic.w	r3, r3, #1
 8008472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3314      	adds	r3, #20
 800847a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800847c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800847e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e5      	bne.n	800845c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008494:	2b01      	cmp	r3, #1
 8008496:	d119      	bne.n	80084cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	330c      	adds	r3, #12
 800849e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f023 0310 	bic.w	r3, r3, #16
 80084ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	330c      	adds	r3, #12
 80084b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084b8:	61ba      	str	r2, [r7, #24]
 80084ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	6979      	ldr	r1, [r7, #20]
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	e841 2300 	strex	r3, r2, [r1]
 80084c4:	613b      	str	r3, [r7, #16]
   return(result);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e5      	bne.n	8008498 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2220      	movs	r2, #32
 80084d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80084da:	bf00      	nop
 80084dc:	3754      	adds	r7, #84	@ 0x54
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b084      	sub	sp, #16
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2200      	movs	r2, #0
 80084fe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f7ff ff77 	bl	80083f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800850e:	b480      	push	{r7}
 8008510:	b085      	sub	sp, #20
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b21      	cmp	r3, #33	@ 0x21
 8008520:	d13e      	bne.n	80085a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800852a:	d114      	bne.n	8008556 <UART_Transmit_IT+0x48>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d110      	bne.n	8008556 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	461a      	mov	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008548:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	1c9a      	adds	r2, r3, #2
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	621a      	str	r2, [r3, #32]
 8008554:	e008      	b.n	8008568 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	1c59      	adds	r1, r3, #1
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	6211      	str	r1, [r2, #32]
 8008560:	781a      	ldrb	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800856c:	b29b      	uxth	r3, r3
 800856e:	3b01      	subs	r3, #1
 8008570:	b29b      	uxth	r3, r3
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	4619      	mov	r1, r3
 8008576:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10f      	bne.n	800859c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800858a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800859a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	e000      	b.n	80085a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80085a0:	2302      	movs	r3, #2
  }
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b082      	sub	sp, #8
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68da      	ldr	r2, [r3, #12]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2220      	movs	r2, #32
 80085ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7ff fefc 	bl	80083cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b08c      	sub	sp, #48	@ 0x30
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b22      	cmp	r3, #34	@ 0x22
 80085f0:	f040 80ae 	bne.w	8008750 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085fc:	d117      	bne.n	800862e <UART_Receive_IT+0x50>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d113      	bne.n	800862e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008606:	2300      	movs	r3, #0
 8008608:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800860e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	b29b      	uxth	r3, r3
 8008618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861c:	b29a      	uxth	r2, r3
 800861e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008620:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008626:	1c9a      	adds	r2, r3, #2
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	629a      	str	r2, [r3, #40]	@ 0x28
 800862c:	e026      	b.n	800867c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008632:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008634:	2300      	movs	r3, #0
 8008636:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008640:	d007      	beq.n	8008652 <UART_Receive_IT+0x74>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10a      	bne.n	8008660 <UART_Receive_IT+0x82>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	b2da      	uxtb	r2, r3
 800865a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865c:	701a      	strb	r2, [r3, #0]
 800865e:	e008      	b.n	8008672 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800866c:	b2da      	uxtb	r2, r3
 800866e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008670:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008676:	1c5a      	adds	r2, r3, #1
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008680:	b29b      	uxth	r3, r3
 8008682:	3b01      	subs	r3, #1
 8008684:	b29b      	uxth	r3, r3
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	4619      	mov	r1, r3
 800868a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800868c:	2b00      	cmp	r3, #0
 800868e:	d15d      	bne.n	800874c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0220 	bic.w	r2, r2, #32
 800869e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68da      	ldr	r2, [r3, #12]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80086ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	695a      	ldr	r2, [r3, #20]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 0201 	bic.w	r2, r2, #1
 80086be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d135      	bne.n	8008742 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	330c      	adds	r3, #12
 80086e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	e853 3f00 	ldrex	r3, [r3]
 80086ea:	613b      	str	r3, [r7, #16]
   return(result);
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	f023 0310 	bic.w	r3, r3, #16
 80086f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	330c      	adds	r3, #12
 80086fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086fc:	623a      	str	r2, [r7, #32]
 80086fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008700:	69f9      	ldr	r1, [r7, #28]
 8008702:	6a3a      	ldr	r2, [r7, #32]
 8008704:	e841 2300 	strex	r3, r2, [r1]
 8008708:	61bb      	str	r3, [r7, #24]
   return(result);
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1e5      	bne.n	80086dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0310 	and.w	r3, r3, #16
 800871a:	2b10      	cmp	r3, #16
 800871c:	d10a      	bne.n	8008734 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff fe64 	bl	8008408 <HAL_UARTEx_RxEventCallback>
 8008740:	e002      	b.n	8008748 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7ff fe4c 	bl	80083e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	e002      	b.n	8008752 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	e000      	b.n	8008752 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008750:	2302      	movs	r3, #2
  }
}
 8008752:	4618      	mov	r0, r3
 8008754:	3730      	adds	r7, #48	@ 0x30
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
	...

0800875c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800875c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008760:	b0c0      	sub	sp, #256	@ 0x100
 8008762:	af00      	add	r7, sp, #0
 8008764:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008778:	68d9      	ldr	r1, [r3, #12]
 800877a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	ea40 0301 	orr.w	r3, r0, r1
 8008784:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800878a:	689a      	ldr	r2, [r3, #8]
 800878c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	431a      	orrs	r2, r3
 8008794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	431a      	orrs	r2, r3
 800879c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80087a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80087b4:	f021 010c 	bic.w	r1, r1, #12
 80087b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80087c2:	430b      	orrs	r3, r1
 80087c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80087d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087d6:	6999      	ldr	r1, [r3, #24]
 80087d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	ea40 0301 	orr.w	r3, r0, r1
 80087e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	4b8f      	ldr	r3, [pc, #572]	@ (8008a28 <UART_SetConfig+0x2cc>)
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d005      	beq.n	80087fc <UART_SetConfig+0xa0>
 80087f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	4b8d      	ldr	r3, [pc, #564]	@ (8008a2c <UART_SetConfig+0x2d0>)
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d104      	bne.n	8008806 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087fc:	f7fc fe66 	bl	80054cc <HAL_RCC_GetPCLK2Freq>
 8008800:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008804:	e003      	b.n	800880e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008806:	f7fc fe4d 	bl	80054a4 <HAL_RCC_GetPCLK1Freq>
 800880a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800880e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008818:	f040 810c 	bne.w	8008a34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800881c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008820:	2200      	movs	r2, #0
 8008822:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008826:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800882a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800882e:	4622      	mov	r2, r4
 8008830:	462b      	mov	r3, r5
 8008832:	1891      	adds	r1, r2, r2
 8008834:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008836:	415b      	adcs	r3, r3
 8008838:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800883a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800883e:	4621      	mov	r1, r4
 8008840:	eb12 0801 	adds.w	r8, r2, r1
 8008844:	4629      	mov	r1, r5
 8008846:	eb43 0901 	adc.w	r9, r3, r1
 800884a:	f04f 0200 	mov.w	r2, #0
 800884e:	f04f 0300 	mov.w	r3, #0
 8008852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800885a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800885e:	4690      	mov	r8, r2
 8008860:	4699      	mov	r9, r3
 8008862:	4623      	mov	r3, r4
 8008864:	eb18 0303 	adds.w	r3, r8, r3
 8008868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800886c:	462b      	mov	r3, r5
 800886e:	eb49 0303 	adc.w	r3, r9, r3
 8008872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008882:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008886:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800888a:	460b      	mov	r3, r1
 800888c:	18db      	adds	r3, r3, r3
 800888e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008890:	4613      	mov	r3, r2
 8008892:	eb42 0303 	adc.w	r3, r2, r3
 8008896:	657b      	str	r3, [r7, #84]	@ 0x54
 8008898:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800889c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80088a0:	f7f7 fc9a 	bl	80001d8 <__aeabi_uldivmod>
 80088a4:	4602      	mov	r2, r0
 80088a6:	460b      	mov	r3, r1
 80088a8:	4b61      	ldr	r3, [pc, #388]	@ (8008a30 <UART_SetConfig+0x2d4>)
 80088aa:	fba3 2302 	umull	r2, r3, r3, r2
 80088ae:	095b      	lsrs	r3, r3, #5
 80088b0:	011c      	lsls	r4, r3, #4
 80088b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80088c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80088c4:	4642      	mov	r2, r8
 80088c6:	464b      	mov	r3, r9
 80088c8:	1891      	adds	r1, r2, r2
 80088ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80088cc:	415b      	adcs	r3, r3
 80088ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80088d4:	4641      	mov	r1, r8
 80088d6:	eb12 0a01 	adds.w	sl, r2, r1
 80088da:	4649      	mov	r1, r9
 80088dc:	eb43 0b01 	adc.w	fp, r3, r1
 80088e0:	f04f 0200 	mov.w	r2, #0
 80088e4:	f04f 0300 	mov.w	r3, #0
 80088e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80088ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80088f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088f4:	4692      	mov	sl, r2
 80088f6:	469b      	mov	fp, r3
 80088f8:	4643      	mov	r3, r8
 80088fa:	eb1a 0303 	adds.w	r3, sl, r3
 80088fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008902:	464b      	mov	r3, r9
 8008904:	eb4b 0303 	adc.w	r3, fp, r3
 8008908:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800890c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008918:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800891c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008920:	460b      	mov	r3, r1
 8008922:	18db      	adds	r3, r3, r3
 8008924:	643b      	str	r3, [r7, #64]	@ 0x40
 8008926:	4613      	mov	r3, r2
 8008928:	eb42 0303 	adc.w	r3, r2, r3
 800892c:	647b      	str	r3, [r7, #68]	@ 0x44
 800892e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008932:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008936:	f7f7 fc4f 	bl	80001d8 <__aeabi_uldivmod>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	4611      	mov	r1, r2
 8008940:	4b3b      	ldr	r3, [pc, #236]	@ (8008a30 <UART_SetConfig+0x2d4>)
 8008942:	fba3 2301 	umull	r2, r3, r3, r1
 8008946:	095b      	lsrs	r3, r3, #5
 8008948:	2264      	movs	r2, #100	@ 0x64
 800894a:	fb02 f303 	mul.w	r3, r2, r3
 800894e:	1acb      	subs	r3, r1, r3
 8008950:	00db      	lsls	r3, r3, #3
 8008952:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008956:	4b36      	ldr	r3, [pc, #216]	@ (8008a30 <UART_SetConfig+0x2d4>)
 8008958:	fba3 2302 	umull	r2, r3, r3, r2
 800895c:	095b      	lsrs	r3, r3, #5
 800895e:	005b      	lsls	r3, r3, #1
 8008960:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008964:	441c      	add	r4, r3
 8008966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800896a:	2200      	movs	r2, #0
 800896c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008970:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008974:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	1891      	adds	r1, r2, r2
 800897e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008980:	415b      	adcs	r3, r3
 8008982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008984:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008988:	4641      	mov	r1, r8
 800898a:	1851      	adds	r1, r2, r1
 800898c:	6339      	str	r1, [r7, #48]	@ 0x30
 800898e:	4649      	mov	r1, r9
 8008990:	414b      	adcs	r3, r1
 8008992:	637b      	str	r3, [r7, #52]	@ 0x34
 8008994:	f04f 0200 	mov.w	r2, #0
 8008998:	f04f 0300 	mov.w	r3, #0
 800899c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80089a0:	4659      	mov	r1, fp
 80089a2:	00cb      	lsls	r3, r1, #3
 80089a4:	4651      	mov	r1, sl
 80089a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089aa:	4651      	mov	r1, sl
 80089ac:	00ca      	lsls	r2, r1, #3
 80089ae:	4610      	mov	r0, r2
 80089b0:	4619      	mov	r1, r3
 80089b2:	4603      	mov	r3, r0
 80089b4:	4642      	mov	r2, r8
 80089b6:	189b      	adds	r3, r3, r2
 80089b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089bc:	464b      	mov	r3, r9
 80089be:	460a      	mov	r2, r1
 80089c0:	eb42 0303 	adc.w	r3, r2, r3
 80089c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80089d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80089dc:	460b      	mov	r3, r1
 80089de:	18db      	adds	r3, r3, r3
 80089e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089e2:	4613      	mov	r3, r2
 80089e4:	eb42 0303 	adc.w	r3, r2, r3
 80089e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80089ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80089f2:	f7f7 fbf1 	bl	80001d8 <__aeabi_uldivmod>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008a30 <UART_SetConfig+0x2d4>)
 80089fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008a00:	095b      	lsrs	r3, r3, #5
 8008a02:	2164      	movs	r1, #100	@ 0x64
 8008a04:	fb01 f303 	mul.w	r3, r1, r3
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	3332      	adds	r3, #50	@ 0x32
 8008a0e:	4a08      	ldr	r2, [pc, #32]	@ (8008a30 <UART_SetConfig+0x2d4>)
 8008a10:	fba2 2303 	umull	r2, r3, r2, r3
 8008a14:	095b      	lsrs	r3, r3, #5
 8008a16:	f003 0207 	and.w	r2, r3, #7
 8008a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4422      	add	r2, r4
 8008a22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a24:	e106      	b.n	8008c34 <UART_SetConfig+0x4d8>
 8008a26:	bf00      	nop
 8008a28:	40011000 	.word	0x40011000
 8008a2c:	40011400 	.word	0x40011400
 8008a30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008a42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008a46:	4642      	mov	r2, r8
 8008a48:	464b      	mov	r3, r9
 8008a4a:	1891      	adds	r1, r2, r2
 8008a4c:	6239      	str	r1, [r7, #32]
 8008a4e:	415b      	adcs	r3, r3
 8008a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a56:	4641      	mov	r1, r8
 8008a58:	1854      	adds	r4, r2, r1
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	eb43 0501 	adc.w	r5, r3, r1
 8008a60:	f04f 0200 	mov.w	r2, #0
 8008a64:	f04f 0300 	mov.w	r3, #0
 8008a68:	00eb      	lsls	r3, r5, #3
 8008a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a6e:	00e2      	lsls	r2, r4, #3
 8008a70:	4614      	mov	r4, r2
 8008a72:	461d      	mov	r5, r3
 8008a74:	4643      	mov	r3, r8
 8008a76:	18e3      	adds	r3, r4, r3
 8008a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a7c:	464b      	mov	r3, r9
 8008a7e:	eb45 0303 	adc.w	r3, r5, r3
 8008a82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a96:	f04f 0200 	mov.w	r2, #0
 8008a9a:	f04f 0300 	mov.w	r3, #0
 8008a9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	008b      	lsls	r3, r1, #2
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008aac:	4621      	mov	r1, r4
 8008aae:	008a      	lsls	r2, r1, #2
 8008ab0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008ab4:	f7f7 fb90 	bl	80001d8 <__aeabi_uldivmod>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	460b      	mov	r3, r1
 8008abc:	4b60      	ldr	r3, [pc, #384]	@ (8008c40 <UART_SetConfig+0x4e4>)
 8008abe:	fba3 2302 	umull	r2, r3, r3, r2
 8008ac2:	095b      	lsrs	r3, r3, #5
 8008ac4:	011c      	lsls	r4, r3, #4
 8008ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008aca:	2200      	movs	r2, #0
 8008acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ad0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008ad4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008ad8:	4642      	mov	r2, r8
 8008ada:	464b      	mov	r3, r9
 8008adc:	1891      	adds	r1, r2, r2
 8008ade:	61b9      	str	r1, [r7, #24]
 8008ae0:	415b      	adcs	r3, r3
 8008ae2:	61fb      	str	r3, [r7, #28]
 8008ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ae8:	4641      	mov	r1, r8
 8008aea:	1851      	adds	r1, r2, r1
 8008aec:	6139      	str	r1, [r7, #16]
 8008aee:	4649      	mov	r1, r9
 8008af0:	414b      	adcs	r3, r1
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	f04f 0200 	mov.w	r2, #0
 8008af8:	f04f 0300 	mov.w	r3, #0
 8008afc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b00:	4659      	mov	r1, fp
 8008b02:	00cb      	lsls	r3, r1, #3
 8008b04:	4651      	mov	r1, sl
 8008b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b0a:	4651      	mov	r1, sl
 8008b0c:	00ca      	lsls	r2, r1, #3
 8008b0e:	4610      	mov	r0, r2
 8008b10:	4619      	mov	r1, r3
 8008b12:	4603      	mov	r3, r0
 8008b14:	4642      	mov	r2, r8
 8008b16:	189b      	adds	r3, r3, r2
 8008b18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b1c:	464b      	mov	r3, r9
 8008b1e:	460a      	mov	r2, r1
 8008b20:	eb42 0303 	adc.w	r3, r2, r3
 8008b24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008b34:	f04f 0200 	mov.w	r2, #0
 8008b38:	f04f 0300 	mov.w	r3, #0
 8008b3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008b40:	4649      	mov	r1, r9
 8008b42:	008b      	lsls	r3, r1, #2
 8008b44:	4641      	mov	r1, r8
 8008b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b4a:	4641      	mov	r1, r8
 8008b4c:	008a      	lsls	r2, r1, #2
 8008b4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008b52:	f7f7 fb41 	bl	80001d8 <__aeabi_uldivmod>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4611      	mov	r1, r2
 8008b5c:	4b38      	ldr	r3, [pc, #224]	@ (8008c40 <UART_SetConfig+0x4e4>)
 8008b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8008b62:	095b      	lsrs	r3, r3, #5
 8008b64:	2264      	movs	r2, #100	@ 0x64
 8008b66:	fb02 f303 	mul.w	r3, r2, r3
 8008b6a:	1acb      	subs	r3, r1, r3
 8008b6c:	011b      	lsls	r3, r3, #4
 8008b6e:	3332      	adds	r3, #50	@ 0x32
 8008b70:	4a33      	ldr	r2, [pc, #204]	@ (8008c40 <UART_SetConfig+0x4e4>)
 8008b72:	fba2 2303 	umull	r2, r3, r2, r3
 8008b76:	095b      	lsrs	r3, r3, #5
 8008b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b7c:	441c      	add	r4, r3
 8008b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b82:	2200      	movs	r2, #0
 8008b84:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b86:	677a      	str	r2, [r7, #116]	@ 0x74
 8008b88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008b8c:	4642      	mov	r2, r8
 8008b8e:	464b      	mov	r3, r9
 8008b90:	1891      	adds	r1, r2, r2
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	415b      	adcs	r3, r3
 8008b96:	60fb      	str	r3, [r7, #12]
 8008b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b9c:	4641      	mov	r1, r8
 8008b9e:	1851      	adds	r1, r2, r1
 8008ba0:	6039      	str	r1, [r7, #0]
 8008ba2:	4649      	mov	r1, r9
 8008ba4:	414b      	adcs	r3, r1
 8008ba6:	607b      	str	r3, [r7, #4]
 8008ba8:	f04f 0200 	mov.w	r2, #0
 8008bac:	f04f 0300 	mov.w	r3, #0
 8008bb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008bb4:	4659      	mov	r1, fp
 8008bb6:	00cb      	lsls	r3, r1, #3
 8008bb8:	4651      	mov	r1, sl
 8008bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008bbe:	4651      	mov	r1, sl
 8008bc0:	00ca      	lsls	r2, r1, #3
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	4642      	mov	r2, r8
 8008bca:	189b      	adds	r3, r3, r2
 8008bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bce:	464b      	mov	r3, r9
 8008bd0:	460a      	mov	r2, r1
 8008bd2:	eb42 0303 	adc.w	r3, r2, r3
 8008bd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	663b      	str	r3, [r7, #96]	@ 0x60
 8008be2:	667a      	str	r2, [r7, #100]	@ 0x64
 8008be4:	f04f 0200 	mov.w	r2, #0
 8008be8:	f04f 0300 	mov.w	r3, #0
 8008bec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	008b      	lsls	r3, r1, #2
 8008bf4:	4641      	mov	r1, r8
 8008bf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bfa:	4641      	mov	r1, r8
 8008bfc:	008a      	lsls	r2, r1, #2
 8008bfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008c02:	f7f7 fae9 	bl	80001d8 <__aeabi_uldivmod>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c40 <UART_SetConfig+0x4e4>)
 8008c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c10:	095b      	lsrs	r3, r3, #5
 8008c12:	2164      	movs	r1, #100	@ 0x64
 8008c14:	fb01 f303 	mul.w	r3, r1, r3
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	011b      	lsls	r3, r3, #4
 8008c1c:	3332      	adds	r3, #50	@ 0x32
 8008c1e:	4a08      	ldr	r2, [pc, #32]	@ (8008c40 <UART_SetConfig+0x4e4>)
 8008c20:	fba2 2303 	umull	r2, r3, r2, r3
 8008c24:	095b      	lsrs	r3, r3, #5
 8008c26:	f003 020f 	and.w	r2, r3, #15
 8008c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4422      	add	r2, r4
 8008c32:	609a      	str	r2, [r3, #8]
}
 8008c34:	bf00      	nop
 8008c36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c40:	51eb851f 	.word	0x51eb851f

08008c44 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008c44:	b084      	sub	sp, #16
 8008c46:	b480      	push	{r7}
 8008c48:	b085      	sub	sp, #20
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	f107 001c 	add.w	r0, r7, #28
 8008c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008c56:	2300      	movs	r3, #0
 8008c58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008c5a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008c5e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008c62:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008c66:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008c6a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008c6e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8008c7e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	431a      	orrs	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	b004      	add	sp, #16
 8008c98:	4770      	bx	lr

08008c9a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b083      	sub	sp, #12
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2203      	movs	r2, #3
 8008ce2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0303 	and.w	r3, r3, #3
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b085      	sub	sp, #20
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d2c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008d32:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008d38:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008d48:	f023 030f 	bic.w	r3, r3, #15
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	b2db      	uxtb	r3, r3
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3314      	adds	r3, #20
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	4413      	add	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
}  
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b085      	sub	sp, #20
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008dc8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008dce:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008dd4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de0:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	431a      	orrs	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008dec:	2300      	movs	r3, #0

}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b088      	sub	sp, #32
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008e08:	2310      	movs	r3, #16
 8008e0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e0c:	2340      	movs	r3, #64	@ 0x40
 8008e0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e10:	2300      	movs	r3, #0
 8008e12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e1a:	f107 0308 	add.w	r3, r7, #8
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff ff74 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e2a:	2110      	movs	r1, #16
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f9d7 	bl	80091e0 <SDMMC_GetCmdResp1>
 8008e32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e34:	69fb      	ldr	r3, [r7, #28]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3720      	adds	r7, #32
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b088      	sub	sp, #32
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008e4c:	2311      	movs	r3, #17
 8008e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e50:	2340      	movs	r3, #64	@ 0x40
 8008e52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e54:	2300      	movs	r3, #0
 8008e56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e5e:	f107 0308 	add.w	r3, r7, #8
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff ff52 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e6e:	2111      	movs	r1, #17
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f9b5 	bl	80091e0 <SDMMC_GetCmdResp1>
 8008e76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e78:	69fb      	ldr	r3, [r7, #28]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3720      	adds	r7, #32
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b088      	sub	sp, #32
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008e90:	2312      	movs	r3, #18
 8008e92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e94:	2340      	movs	r3, #64	@ 0x40
 8008e96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ea0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ea2:	f107 0308 	add.w	r3, r7, #8
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f7ff ff30 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eb2:	2112      	movs	r1, #18
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f993 	bl	80091e0 <SDMMC_GetCmdResp1>
 8008eba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ebc:	69fb      	ldr	r3, [r7, #28]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3720      	adds	r7, #32
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b088      	sub	sp, #32
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008ed4:	2318      	movs	r3, #24
 8008ed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ed8:	2340      	movs	r3, #64	@ 0x40
 8008eda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ee0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ee4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ee6:	f107 0308 	add.w	r3, r7, #8
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7ff ff0e 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ef6:	2118      	movs	r1, #24
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f971 	bl	80091e0 <SDMMC_GetCmdResp1>
 8008efe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f00:	69fb      	ldr	r3, [r7, #28]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3720      	adds	r7, #32
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b088      	sub	sp, #32
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008f18:	2319      	movs	r3, #25
 8008f1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f1c:	2340      	movs	r3, #64	@ 0x40
 8008f1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f20:	2300      	movs	r3, #0
 8008f22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f28:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f2a:	f107 0308 	add.w	r3, r7, #8
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7ff feec 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f3a:	2119      	movs	r1, #25
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f94f 	bl	80091e0 <SDMMC_GetCmdResp1>
 8008f42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f44:	69fb      	ldr	r3, [r7, #28]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3720      	adds	r7, #32
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
	...

08008f50 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008f5c:	230c      	movs	r3, #12
 8008f5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f60:	2340      	movs	r3, #64	@ 0x40
 8008f62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f64:	2300      	movs	r3, #0
 8008f66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f6e:	f107 0308 	add.w	r3, r7, #8
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7ff feca 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008f7a:	4a05      	ldr	r2, [pc, #20]	@ (8008f90 <SDMMC_CmdStopTransfer+0x40>)
 8008f7c:	210c      	movs	r1, #12
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f92e 	bl	80091e0 <SDMMC_GetCmdResp1>
 8008f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f86:	69fb      	ldr	r3, [r7, #28]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3720      	adds	r7, #32
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	05f5e100 	.word	0x05f5e100

08008f94 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b08a      	sub	sp, #40	@ 0x28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008fa4:	2307      	movs	r3, #7
 8008fa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fa8:	2340      	movs	r3, #64	@ 0x40
 8008faa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fac:	2300      	movs	r3, #0
 8008fae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fb4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fb6:	f107 0310 	add.w	r3, r7, #16
 8008fba:	4619      	mov	r1, r3
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7ff fea6 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fc6:	2107      	movs	r1, #7
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 f909 	bl	80091e0 <SDMMC_GetCmdResp1>
 8008fce:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3728      	adds	r7, #40	@ 0x28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b088      	sub	sp, #32
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008fea:	2300      	movs	r3, #0
 8008fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ff6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ff8:	f107 0308 	add.w	r3, r7, #8
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7ff fe85 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fb23 	bl	8009650 <SDMMC_GetCmdError>
 800900a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800900c:	69fb      	ldr	r3, [r7, #28]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3720      	adds	r7, #32
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b088      	sub	sp, #32
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800901e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8009022:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009024:	2308      	movs	r3, #8
 8009026:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009028:	2340      	movs	r3, #64	@ 0x40
 800902a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800902c:	2300      	movs	r3, #0
 800902e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009030:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009034:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009036:	f107 0308 	add.w	r3, r7, #8
 800903a:	4619      	mov	r1, r3
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7ff fe66 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fab6 	bl	80095b4 <SDMMC_GetCmdResp7>
 8009048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800904a:	69fb      	ldr	r3, [r7, #28]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3720      	adds	r7, #32
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009062:	2337      	movs	r3, #55	@ 0x37
 8009064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009066:	2340      	movs	r3, #64	@ 0x40
 8009068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800906a:	2300      	movs	r3, #0
 800906c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800906e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009072:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009074:	f107 0308 	add.w	r3, r7, #8
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7ff fe47 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009084:	2137      	movs	r1, #55	@ 0x37
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f8aa 	bl	80091e0 <SDMMC_GetCmdResp1>
 800908c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800908e:	69fb      	ldr	r3, [r7, #28]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3720      	adds	r7, #32
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b088      	sub	sp, #32
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80090ae:	2329      	movs	r3, #41	@ 0x29
 80090b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090b2:	2340      	movs	r3, #64	@ 0x40
 80090b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090b6:	2300      	movs	r3, #0
 80090b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090c0:	f107 0308 	add.w	r3, r7, #8
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff fe21 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f9bd 	bl	800944c <SDMMC_GetCmdResp3>
 80090d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090d4:	69fb      	ldr	r3, [r7, #28]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3720      	adds	r7, #32
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b088      	sub	sp, #32
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80090ea:	2302      	movs	r3, #2
 80090ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80090ee:	23c0      	movs	r3, #192	@ 0xc0
 80090f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090f2:	2300      	movs	r3, #0
 80090f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090fc:	f107 0308 	add.w	r3, r7, #8
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7ff fe03 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f957 	bl	80093bc <SDMMC_GetCmdResp2>
 800910e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009110:	69fb      	ldr	r3, [r7, #28]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3720      	adds	r7, #32
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b088      	sub	sp, #32
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009128:	2309      	movs	r3, #9
 800912a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800912c:	23c0      	movs	r3, #192	@ 0xc0
 800912e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009130:	2300      	movs	r3, #0
 8009132:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009134:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009138:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800913a:	f107 0308 	add.w	r3, r7, #8
 800913e:	4619      	mov	r1, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7ff fde4 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f938 	bl	80093bc <SDMMC_GetCmdResp2>
 800914c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800914e:	69fb      	ldr	r3, [r7, #28]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3720      	adds	r7, #32
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b088      	sub	sp, #32
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009166:	2303      	movs	r3, #3
 8009168:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800916a:	2340      	movs	r3, #64	@ 0x40
 800916c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800916e:	2300      	movs	r3, #0
 8009170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009176:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009178:	f107 0308 	add.w	r3, r7, #8
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7ff fdc5 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	2103      	movs	r1, #3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f99d 	bl	80094c8 <SDMMC_GetCmdResp6>
 800918e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009190:	69fb      	ldr	r3, [r7, #28]
}
 8009192:	4618      	mov	r0, r3
 8009194:	3720      	adds	r7, #32
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b088      	sub	sp, #32
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80091a8:	230d      	movs	r3, #13
 80091aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091ac:	2340      	movs	r3, #64	@ 0x40
 80091ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091b0:	2300      	movs	r3, #0
 80091b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091ba:	f107 0308 	add.w	r3, r7, #8
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7ff fda4 	bl	8008d0e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80091c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091ca:	210d      	movs	r1, #13
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f807 	bl	80091e0 <SDMMC_GetCmdResp1>
 80091d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091d4:	69fb      	ldr	r3, [r7, #28]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3720      	adds	r7, #32
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
	...

080091e0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b088      	sub	sp, #32
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	460b      	mov	r3, r1
 80091ea:	607a      	str	r2, [r7, #4]
 80091ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80091ee:	4b70      	ldr	r3, [pc, #448]	@ (80093b0 <SDMMC_GetCmdResp1+0x1d0>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a70      	ldr	r2, [pc, #448]	@ (80093b4 <SDMMC_GetCmdResp1+0x1d4>)
 80091f4:	fba2 2303 	umull	r2, r3, r2, r3
 80091f8:	0a5a      	lsrs	r2, r3, #9
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	fb02 f303 	mul.w	r3, r2, r3
 8009200:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	1e5a      	subs	r2, r3, #1
 8009206:	61fa      	str	r2, [r7, #28]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d102      	bne.n	8009212 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800920c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009210:	e0c9      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009216:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800921e:	2b00      	cmp	r3, #0
 8009220:	d0ef      	beq.n	8009202 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1ea      	bne.n	8009202 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009230:	f003 0304 	and.w	r3, r3, #4
 8009234:	2b00      	cmp	r3, #0
 8009236:	d004      	beq.n	8009242 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2204      	movs	r2, #4
 800923c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800923e:	2304      	movs	r3, #4
 8009240:	e0b1      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b00      	cmp	r3, #0
 800924c:	d004      	beq.n	8009258 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2201      	movs	r2, #1
 8009252:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009254:	2301      	movs	r3, #1
 8009256:	e0a6      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	22c5      	movs	r2, #197	@ 0xc5
 800925c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f7ff fd7f 	bl	8008d62 <SDIO_GetCommandResponse>
 8009264:	4603      	mov	r3, r0
 8009266:	461a      	mov	r2, r3
 8009268:	7afb      	ldrb	r3, [r7, #11]
 800926a:	4293      	cmp	r3, r2
 800926c:	d001      	beq.n	8009272 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800926e:	2301      	movs	r3, #1
 8009270:	e099      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009272:	2100      	movs	r1, #0
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f7ff fd81 	bl	8008d7c <SDIO_GetResponse>
 800927a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	4b4e      	ldr	r3, [pc, #312]	@ (80093b8 <SDMMC_GetCmdResp1+0x1d8>)
 8009280:	4013      	ands	r3, r2
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009286:	2300      	movs	r3, #0
 8009288:	e08d      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	da02      	bge.n	8009296 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009290:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009294:	e087      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80092a0:	2340      	movs	r3, #64	@ 0x40
 80092a2:	e080      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80092ae:	2380      	movs	r3, #128	@ 0x80
 80092b0:	e079      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d002      	beq.n	80092c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80092bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80092c0:	e071      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d002      	beq.n	80092d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80092cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092d0:	e069      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80092dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092e0:	e061      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80092ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80092f0:	e059      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80092fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009300:	e051      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d002      	beq.n	8009312 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800930c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009310:	e049      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800931c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009320:	e041      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800932c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009330:	e039      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d002      	beq.n	8009342 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800933c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009340:	e031      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800934c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009350:	e029      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800935c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009360:	e021      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800936c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009370:	e019      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800937c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009380:	e011      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800938c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009390:	e009      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f003 0308 	and.w	r3, r3, #8
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800939c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80093a0:	e001      	b.n	80093a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3720      	adds	r7, #32
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	2000000c 	.word	0x2000000c
 80093b4:	10624dd3 	.word	0x10624dd3
 80093b8:	fdffe008 	.word	0xfdffe008

080093bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093c4:	4b1f      	ldr	r3, [pc, #124]	@ (8009444 <SDMMC_GetCmdResp2+0x88>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a1f      	ldr	r2, [pc, #124]	@ (8009448 <SDMMC_GetCmdResp2+0x8c>)
 80093ca:	fba2 2303 	umull	r2, r3, r2, r3
 80093ce:	0a5b      	lsrs	r3, r3, #9
 80093d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093d4:	fb02 f303 	mul.w	r3, r2, r3
 80093d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	1e5a      	subs	r2, r3, #1
 80093de:	60fa      	str	r2, [r7, #12]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d102      	bne.n	80093ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80093e8:	e026      	b.n	8009438 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d0ef      	beq.n	80093da <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1ea      	bne.n	80093da <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009408:	f003 0304 	and.w	r3, r3, #4
 800940c:	2b00      	cmp	r3, #0
 800940e:	d004      	beq.n	800941a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2204      	movs	r2, #4
 8009414:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009416:	2304      	movs	r3, #4
 8009418:	e00e      	b.n	8009438 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800941e:	f003 0301 	and.w	r3, r3, #1
 8009422:	2b00      	cmp	r3, #0
 8009424:	d004      	beq.n	8009430 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800942c:	2301      	movs	r3, #1
 800942e:	e003      	b.n	8009438 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	22c5      	movs	r2, #197	@ 0xc5
 8009434:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	2000000c 	.word	0x2000000c
 8009448:	10624dd3 	.word	0x10624dd3

0800944c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009454:	4b1a      	ldr	r3, [pc, #104]	@ (80094c0 <SDMMC_GetCmdResp3+0x74>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a1a      	ldr	r2, [pc, #104]	@ (80094c4 <SDMMC_GetCmdResp3+0x78>)
 800945a:	fba2 2303 	umull	r2, r3, r2, r3
 800945e:	0a5b      	lsrs	r3, r3, #9
 8009460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009464:	fb02 f303 	mul.w	r3, r2, r3
 8009468:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	1e5a      	subs	r2, r3, #1
 800946e:	60fa      	str	r2, [r7, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009474:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009478:	e01b      	b.n	80094b2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800947e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009486:	2b00      	cmp	r3, #0
 8009488:	d0ef      	beq.n	800946a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1ea      	bne.n	800946a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	d004      	beq.n	80094aa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2204      	movs	r2, #4
 80094a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094a6:	2304      	movs	r3, #4
 80094a8:	e003      	b.n	80094b2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	22c5      	movs	r2, #197	@ 0xc5
 80094ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3714      	adds	r7, #20
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	2000000c 	.word	0x2000000c
 80094c4:	10624dd3 	.word	0x10624dd3

080094c8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b088      	sub	sp, #32
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	460b      	mov	r3, r1
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80094d6:	4b35      	ldr	r3, [pc, #212]	@ (80095ac <SDMMC_GetCmdResp6+0xe4>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a35      	ldr	r2, [pc, #212]	@ (80095b0 <SDMMC_GetCmdResp6+0xe8>)
 80094dc:	fba2 2303 	umull	r2, r3, r2, r3
 80094e0:	0a5b      	lsrs	r3, r3, #9
 80094e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094e6:	fb02 f303 	mul.w	r3, r2, r3
 80094ea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	1e5a      	subs	r2, r3, #1
 80094f0:	61fa      	str	r2, [r7, #28]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d102      	bne.n	80094fc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094f6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80094fa:	e052      	b.n	80095a2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009500:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009508:	2b00      	cmp	r3, #0
 800950a:	d0ef      	beq.n	80094ec <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1ea      	bne.n	80094ec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800951a:	f003 0304 	and.w	r3, r3, #4
 800951e:	2b00      	cmp	r3, #0
 8009520:	d004      	beq.n	800952c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2204      	movs	r2, #4
 8009526:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009528:	2304      	movs	r3, #4
 800952a:	e03a      	b.n	80095a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	2b00      	cmp	r3, #0
 8009536:	d004      	beq.n	8009542 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2201      	movs	r2, #1
 800953c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800953e:	2301      	movs	r3, #1
 8009540:	e02f      	b.n	80095a2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff fc0d 	bl	8008d62 <SDIO_GetCommandResponse>
 8009548:	4603      	mov	r3, r0
 800954a:	461a      	mov	r2, r3
 800954c:	7afb      	ldrb	r3, [r7, #11]
 800954e:	4293      	cmp	r3, r2
 8009550:	d001      	beq.n	8009556 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009552:	2301      	movs	r3, #1
 8009554:	e025      	b.n	80095a2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	22c5      	movs	r2, #197	@ 0xc5
 800955a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800955c:	2100      	movs	r1, #0
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f7ff fc0c 	bl	8008d7c <SDIO_GetResponse>
 8009564:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d106      	bne.n	800957e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	0c1b      	lsrs	r3, r3, #16
 8009574:	b29a      	uxth	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800957a:	2300      	movs	r3, #0
 800957c:	e011      	b.n	80095a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d002      	beq.n	800958e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009588:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800958c:	e009      	b.n	80095a2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d002      	beq.n	800959e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800959c:	e001      	b.n	80095a2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800959e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3720      	adds	r7, #32
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	2000000c 	.word	0x2000000c
 80095b0:	10624dd3 	.word	0x10624dd3

080095b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095bc:	4b22      	ldr	r3, [pc, #136]	@ (8009648 <SDMMC_GetCmdResp7+0x94>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a22      	ldr	r2, [pc, #136]	@ (800964c <SDMMC_GetCmdResp7+0x98>)
 80095c2:	fba2 2303 	umull	r2, r3, r2, r3
 80095c6:	0a5b      	lsrs	r3, r3, #9
 80095c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095cc:	fb02 f303 	mul.w	r3, r2, r3
 80095d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	1e5a      	subs	r2, r3, #1
 80095d6:	60fa      	str	r2, [r7, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d102      	bne.n	80095e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80095dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80095e0:	e02c      	b.n	800963c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0ef      	beq.n	80095d2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1ea      	bne.n	80095d2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009600:	f003 0304 	and.w	r3, r3, #4
 8009604:	2b00      	cmp	r3, #0
 8009606:	d004      	beq.n	8009612 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2204      	movs	r2, #4
 800960c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800960e:	2304      	movs	r3, #4
 8009610:	e014      	b.n	800963c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	2b00      	cmp	r3, #0
 800961c:	d004      	beq.n	8009628 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009624:	2301      	movs	r3, #1
 8009626:	e009      	b.n	800963c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800962c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2240      	movs	r2, #64	@ 0x40
 8009638:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800963a:	2300      	movs	r3, #0
  
}
 800963c:	4618      	mov	r0, r3
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	2000000c 	.word	0x2000000c
 800964c:	10624dd3 	.word	0x10624dd3

08009650 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009658:	4b11      	ldr	r3, [pc, #68]	@ (80096a0 <SDMMC_GetCmdError+0x50>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a11      	ldr	r2, [pc, #68]	@ (80096a4 <SDMMC_GetCmdError+0x54>)
 800965e:	fba2 2303 	umull	r2, r3, r2, r3
 8009662:	0a5b      	lsrs	r3, r3, #9
 8009664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009668:	fb02 f303 	mul.w	r3, r2, r3
 800966c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	1e5a      	subs	r2, r3, #1
 8009672:	60fa      	str	r2, [r7, #12]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d102      	bne.n	800967e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009678:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800967c:	e009      	b.n	8009692 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009686:	2b00      	cmp	r3, #0
 8009688:	d0f1      	beq.n	800966e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	22c5      	movs	r2, #197	@ 0xc5
 800968e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
 800969e:	bf00      	nop
 80096a0:	2000000c 	.word	0x2000000c
 80096a4:	10624dd3 	.word	0x10624dd3

080096a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80096ac:	4904      	ldr	r1, [pc, #16]	@ (80096c0 <MX_FATFS_Init+0x18>)
 80096ae:	4805      	ldr	r0, [pc, #20]	@ (80096c4 <MX_FATFS_Init+0x1c>)
 80096b0:	f003 f886 	bl	800c7c0 <FATFS_LinkDriver>
 80096b4:	4603      	mov	r3, r0
 80096b6:	461a      	mov	r2, r3
 80096b8:	4b03      	ldr	r3, [pc, #12]	@ (80096c8 <MX_FATFS_Init+0x20>)
 80096ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80096bc:	bf00      	nop
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	200005a0 	.word	0x200005a0
 80096c4:	0800da20 	.word	0x0800da20
 80096c8:	2000059c 	.word	0x2000059c

080096cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80096cc:	b480      	push	{r7}
 80096ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80096d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80096e6:	f000 f86b 	bl	80097c0 <BSP_SD_IsDetected>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d001      	beq.n	80096f4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e005      	b.n	8009700 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80096f4:	4804      	ldr	r0, [pc, #16]	@ (8009708 <BSP_SD_Init+0x2c>)
 80096f6:	f7fb fefd 	bl	80054f4 <HAL_SD_Init>
 80096fa:	4603      	mov	r3, r0
 80096fc:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80096fe:	79fb      	ldrb	r3, [r7, #7]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	200000fc 	.word	0x200000fc

0800970c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b088      	sub	sp, #32
 8009710:	af02      	add	r7, sp, #8
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	68f9      	ldr	r1, [r7, #12]
 8009728:	4806      	ldr	r0, [pc, #24]	@ (8009744 <BSP_SD_ReadBlocks+0x38>)
 800972a:	f7fb ff93 	bl	8005654 <HAL_SD_ReadBlocks>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009738:	7dfb      	ldrb	r3, [r7, #23]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	200000fc 	.word	0x200000fc

08009748 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b088      	sub	sp, #32
 800974c:	af02      	add	r7, sp, #8
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
 8009754:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	68f9      	ldr	r1, [r7, #12]
 8009764:	4806      	ldr	r0, [pc, #24]	@ (8009780 <BSP_SD_WriteBlocks+0x38>)
 8009766:	f7fc f95b 	bl	8005a20 <HAL_SD_WriteBlocks>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009774:	7dfb      	ldrb	r3, [r7, #23]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	200000fc 	.word	0x200000fc

08009784 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009788:	4805      	ldr	r0, [pc, #20]	@ (80097a0 <BSP_SD_GetCardState+0x1c>)
 800978a:	f7fc fca7 	bl	80060dc <HAL_SD_GetCardState>
 800978e:	4603      	mov	r3, r0
 8009790:	2b04      	cmp	r3, #4
 8009792:	bf14      	ite	ne
 8009794:	2301      	movne	r3, #1
 8009796:	2300      	moveq	r3, #0
 8009798:	b2db      	uxtb	r3, r3
}
 800979a:	4618      	mov	r0, r3
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	200000fc 	.word	0x200000fc

080097a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	4803      	ldr	r0, [pc, #12]	@ (80097bc <BSP_SD_GetCardInfo+0x18>)
 80097b0:	f7fc fc68 	bl	8006084 <HAL_SD_GetCardInfo>
}
 80097b4:	bf00      	nop
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	200000fc 	.word	0x200000fc

080097c0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80097c6:	2301      	movs	r3, #1
 80097c8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	b2db      	uxtb	r3, r3
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
	...

080097dc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80097e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009814 <SD_CheckStatus+0x38>)
 80097e8:	2201      	movs	r2, #1
 80097ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80097ec:	f7ff ffca 	bl	8009784 <BSP_SD_GetCardState>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d107      	bne.n	8009806 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80097f6:	4b07      	ldr	r3, [pc, #28]	@ (8009814 <SD_CheckStatus+0x38>)
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	f023 0301 	bic.w	r3, r3, #1
 8009800:	b2da      	uxtb	r2, r3
 8009802:	4b04      	ldr	r3, [pc, #16]	@ (8009814 <SD_CheckStatus+0x38>)
 8009804:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009806:	4b03      	ldr	r3, [pc, #12]	@ (8009814 <SD_CheckStatus+0x38>)
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	b2db      	uxtb	r3, r3
}
 800980c:	4618      	mov	r0, r3
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	20000015 	.word	0x20000015

08009818 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009822:	4b0b      	ldr	r3, [pc, #44]	@ (8009850 <SD_initialize+0x38>)
 8009824:	2201      	movs	r2, #1
 8009826:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009828:	f7ff ff58 	bl	80096dc <BSP_SD_Init>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d107      	bne.n	8009842 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8009832:	79fb      	ldrb	r3, [r7, #7]
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff ffd1 	bl	80097dc <SD_CheckStatus>
 800983a:	4603      	mov	r3, r0
 800983c:	461a      	mov	r2, r3
 800983e:	4b04      	ldr	r3, [pc, #16]	@ (8009850 <SD_initialize+0x38>)
 8009840:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009842:	4b03      	ldr	r3, [pc, #12]	@ (8009850 <SD_initialize+0x38>)
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	b2db      	uxtb	r3, r3
}
 8009848:	4618      	mov	r0, r3
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	20000015 	.word	0x20000015

08009854 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800985e:	79fb      	ldrb	r3, [r7, #7]
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff ffbb 	bl	80097dc <SD_CheckStatus>
 8009866:	4603      	mov	r3, r0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	607a      	str	r2, [r7, #4]
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009884:	f04f 33ff 	mov.w	r3, #4294967295
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	6879      	ldr	r1, [r7, #4]
 800988c:	68b8      	ldr	r0, [r7, #8]
 800988e:	f7ff ff3d 	bl	800970c <BSP_SD_ReadBlocks>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d107      	bne.n	80098a8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009898:	bf00      	nop
 800989a:	f7ff ff73 	bl	8009784 <BSP_SD_GetCardState>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1fa      	bne.n	800989a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80098a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b086      	sub	sp, #24
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	603b      	str	r3, [r7, #0]
 80098be:	4603      	mov	r3, r0
 80098c0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80098c6:	f04f 33ff 	mov.w	r3, #4294967295
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	6879      	ldr	r1, [r7, #4]
 80098ce:	68b8      	ldr	r0, [r7, #8]
 80098d0:	f7ff ff3a 	bl	8009748 <BSP_SD_WriteBlocks>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d107      	bne.n	80098ea <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80098da:	bf00      	nop
 80098dc:	f7ff ff52 	bl	8009784 <BSP_SD_GetCardState>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1fa      	bne.n	80098dc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3718      	adds	r7, #24
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b08c      	sub	sp, #48	@ 0x30
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	4603      	mov	r3, r0
 80098fc:	603a      	str	r2, [r7, #0]
 80098fe:	71fb      	strb	r3, [r7, #7]
 8009900:	460b      	mov	r3, r1
 8009902:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800990a:	4b25      	ldr	r3, [pc, #148]	@ (80099a0 <SD_ioctl+0xac>)
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	b2db      	uxtb	r3, r3
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <SD_ioctl+0x28>
 8009918:	2303      	movs	r3, #3
 800991a:	e03c      	b.n	8009996 <SD_ioctl+0xa2>

  switch (cmd)
 800991c:	79bb      	ldrb	r3, [r7, #6]
 800991e:	2b03      	cmp	r3, #3
 8009920:	d834      	bhi.n	800998c <SD_ioctl+0x98>
 8009922:	a201      	add	r2, pc, #4	@ (adr r2, 8009928 <SD_ioctl+0x34>)
 8009924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009928:	08009939 	.word	0x08009939
 800992c:	08009941 	.word	0x08009941
 8009930:	08009959 	.word	0x08009959
 8009934:	08009973 	.word	0x08009973
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009938:	2300      	movs	r3, #0
 800993a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800993e:	e028      	b.n	8009992 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009940:	f107 030c 	add.w	r3, r7, #12
 8009944:	4618      	mov	r0, r3
 8009946:	f7ff ff2d 	bl	80097a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800994a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009956:	e01c      	b.n	8009992 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009958:	f107 030c 	add.w	r3, r7, #12
 800995c:	4618      	mov	r0, r3
 800995e:	f7ff ff21 	bl	80097a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009964:	b29a      	uxth	r2, r3
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009970:	e00f      	b.n	8009992 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009972:	f107 030c 	add.w	r3, r7, #12
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff ff14 	bl	80097a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800997c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997e:	0a5a      	lsrs	r2, r3, #9
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800998a:	e002      	b.n	8009992 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800998c:	2304      	movs	r3, #4
 800998e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8009992:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009996:	4618      	mov	r0, r3
 8009998:	3730      	adds	r7, #48	@ 0x30
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	20000015 	.word	0x20000015

080099a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	4a08      	ldr	r2, [pc, #32]	@ (80099d4 <disk_status+0x30>)
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	79fa      	ldrb	r2, [r7, #7]
 80099bc:	4905      	ldr	r1, [pc, #20]	@ (80099d4 <disk_status+0x30>)
 80099be:	440a      	add	r2, r1
 80099c0:	7a12      	ldrb	r2, [r2, #8]
 80099c2:	4610      	mov	r0, r2
 80099c4:	4798      	blx	r3
 80099c6:	4603      	mov	r3, r0
 80099c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	200005cc 	.word	0x200005cc

080099d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	4a0e      	ldr	r2, [pc, #56]	@ (8009a24 <disk_initialize+0x4c>)
 80099ea:	5cd3      	ldrb	r3, [r2, r3]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d114      	bne.n	8009a1a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80099f0:	79fb      	ldrb	r3, [r7, #7]
 80099f2:	4a0c      	ldr	r2, [pc, #48]	@ (8009a24 <disk_initialize+0x4c>)
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	79fa      	ldrb	r2, [r7, #7]
 80099fe:	4909      	ldr	r1, [pc, #36]	@ (8009a24 <disk_initialize+0x4c>)
 8009a00:	440a      	add	r2, r1
 8009a02:	7a12      	ldrb	r2, [r2, #8]
 8009a04:	4610      	mov	r0, r2
 8009a06:	4798      	blx	r3
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d103      	bne.n	8009a1a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009a12:	79fb      	ldrb	r3, [r7, #7]
 8009a14:	4a03      	ldr	r2, [pc, #12]	@ (8009a24 <disk_initialize+0x4c>)
 8009a16:	2101      	movs	r1, #1
 8009a18:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	200005cc 	.word	0x200005cc

08009a28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009a28:	b590      	push	{r4, r7, lr}
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60b9      	str	r1, [r7, #8]
 8009a30:	607a      	str	r2, [r7, #4]
 8009a32:	603b      	str	r3, [r7, #0]
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8009a64 <disk_read+0x3c>)
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4413      	add	r3, r2
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	689c      	ldr	r4, [r3, #8]
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	4a07      	ldr	r2, [pc, #28]	@ (8009a64 <disk_read+0x3c>)
 8009a48:	4413      	add	r3, r2
 8009a4a:	7a18      	ldrb	r0, [r3, #8]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	68b9      	ldr	r1, [r7, #8]
 8009a52:	47a0      	blx	r4
 8009a54:	4603      	mov	r3, r0
 8009a56:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	371c      	adds	r7, #28
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd90      	pop	{r4, r7, pc}
 8009a62:	bf00      	nop
 8009a64:	200005cc 	.word	0x200005cc

08009a68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009a68:	b590      	push	{r4, r7, lr}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60b9      	str	r1, [r7, #8]
 8009a70:	607a      	str	r2, [r7, #4]
 8009a72:	603b      	str	r3, [r7, #0]
 8009a74:	4603      	mov	r3, r0
 8009a76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009a78:	7bfb      	ldrb	r3, [r7, #15]
 8009a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8009aa4 <disk_write+0x3c>)
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4413      	add	r3, r2
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	68dc      	ldr	r4, [r3, #12]
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
 8009a86:	4a07      	ldr	r2, [pc, #28]	@ (8009aa4 <disk_write+0x3c>)
 8009a88:	4413      	add	r3, r2
 8009a8a:	7a18      	ldrb	r0, [r3, #8]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	68b9      	ldr	r1, [r7, #8]
 8009a92:	47a0      	blx	r4
 8009a94:	4603      	mov	r3, r0
 8009a96:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	371c      	adds	r7, #28
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd90      	pop	{r4, r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	200005cc 	.word	0x200005cc

08009aa8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	4603      	mov	r3, r0
 8009ab0:	603a      	str	r2, [r7, #0]
 8009ab2:	71fb      	strb	r3, [r7, #7]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009ab8:	79fb      	ldrb	r3, [r7, #7]
 8009aba:	4a09      	ldr	r2, [pc, #36]	@ (8009ae0 <disk_ioctl+0x38>)
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	4413      	add	r3, r2
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	79fa      	ldrb	r2, [r7, #7]
 8009ac6:	4906      	ldr	r1, [pc, #24]	@ (8009ae0 <disk_ioctl+0x38>)
 8009ac8:	440a      	add	r2, r1
 8009aca:	7a10      	ldrb	r0, [r2, #8]
 8009acc:	79b9      	ldrb	r1, [r7, #6]
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	4798      	blx	r3
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73fb      	strb	r3, [r7, #15]
  return res;
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	200005cc 	.word	0x200005cc

08009ae4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3301      	adds	r3, #1
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009af4:	89fb      	ldrh	r3, [r7, #14]
 8009af6:	021b      	lsls	r3, r3, #8
 8009af8:	b21a      	sxth	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	b21b      	sxth	r3, r3
 8009b00:	4313      	orrs	r3, r2
 8009b02:	b21b      	sxth	r3, r3
 8009b04:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009b06:	89fb      	ldrh	r3, [r7, #14]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	3303      	adds	r3, #3
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	021b      	lsls	r3, r3, #8
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	3202      	adds	r2, #2
 8009b2c:	7812      	ldrb	r2, [r2, #0]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	021b      	lsls	r3, r3, #8
 8009b36:	687a      	ldr	r2, [r7, #4]
 8009b38:	3201      	adds	r2, #1
 8009b3a:	7812      	ldrb	r2, [r2, #0]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	021b      	lsls	r3, r3, #8
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	7812      	ldrb	r2, [r2, #0]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	60fb      	str	r3, [r7, #12]
	return rv;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b083      	sub	sp, #12
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	460b      	mov	r3, r1
 8009b64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	1c5a      	adds	r2, r3, #1
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	887a      	ldrh	r2, [r7, #2]
 8009b6e:	b2d2      	uxtb	r2, r2
 8009b70:	701a      	strb	r2, [r3, #0]
 8009b72:	887b      	ldrh	r3, [r7, #2]
 8009b74:	0a1b      	lsrs	r3, r3, #8
 8009b76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	607a      	str	r2, [r7, #4]
 8009b7e:	887a      	ldrh	r2, [r7, #2]
 8009b80:	b2d2      	uxtb	r2, r2
 8009b82:	701a      	strb	r2, [r3, #0]
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	607a      	str	r2, [r7, #4]
 8009ba0:	683a      	ldr	r2, [r7, #0]
 8009ba2:	b2d2      	uxtb	r2, r2
 8009ba4:	701a      	strb	r2, [r3, #0]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	0a1b      	lsrs	r3, r3, #8
 8009baa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	1c5a      	adds	r2, r3, #1
 8009bb0:	607a      	str	r2, [r7, #4]
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	b2d2      	uxtb	r2, r2
 8009bb6:	701a      	strb	r2, [r3, #0]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	0a1b      	lsrs	r3, r3, #8
 8009bbc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	1c5a      	adds	r2, r3, #1
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	683a      	ldr	r2, [r7, #0]
 8009bc6:	b2d2      	uxtb	r2, r2
 8009bc8:	701a      	strb	r2, [r3, #0]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	0a1b      	lsrs	r3, r3, #8
 8009bce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	1c5a      	adds	r2, r3, #1
 8009bd4:	607a      	str	r2, [r7, #4]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	b2d2      	uxtb	r2, r2
 8009bda:	701a      	strb	r2, [r3, #0]
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00d      	beq.n	8009c1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	1c53      	adds	r3, r2, #1
 8009c06:	613b      	str	r3, [r7, #16]
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	1c59      	adds	r1, r3, #1
 8009c0c:	6179      	str	r1, [r7, #20]
 8009c0e:	7812      	ldrb	r2, [r2, #0]
 8009c10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	607b      	str	r3, [r7, #4]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1f1      	bne.n	8009c02 <mem_cpy+0x1a>
	}
}
 8009c1e:	bf00      	nop
 8009c20:	371c      	adds	r7, #28
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009c2a:	b480      	push	{r7}
 8009c2c:	b087      	sub	sp, #28
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	60f8      	str	r0, [r7, #12]
 8009c32:	60b9      	str	r1, [r7, #8]
 8009c34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	617a      	str	r2, [r7, #20]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	b2d2      	uxtb	r2, r2
 8009c44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	607b      	str	r3, [r7, #4]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1f3      	bne.n	8009c3a <mem_set+0x10>
}
 8009c52:	bf00      	nop
 8009c54:	bf00      	nop
 8009c56:	371c      	adds	r7, #28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009c60:	b480      	push	{r7}
 8009c62:	b089      	sub	sp, #36	@ 0x24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	61fb      	str	r3, [r7, #28]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009c74:	2300      	movs	r3, #0
 8009c76:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	1c5a      	adds	r2, r3, #1
 8009c7c:	61fa      	str	r2, [r7, #28]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	4619      	mov	r1, r3
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	1c5a      	adds	r2, r3, #1
 8009c86:	61ba      	str	r2, [r7, #24]
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	1acb      	subs	r3, r1, r3
 8009c8c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3b01      	subs	r3, #1
 8009c92:	607b      	str	r3, [r7, #4]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d002      	beq.n	8009ca0 <mem_cmp+0x40>
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d0eb      	beq.n	8009c78 <mem_cmp+0x18>

	return r;
 8009ca0:	697b      	ldr	r3, [r7, #20]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3724      	adds	r7, #36	@ 0x24
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009cae:	b480      	push	{r7}
 8009cb0:	b083      	sub	sp, #12
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009cb8:	e002      	b.n	8009cc0 <chk_chr+0x12>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	607b      	str	r3, [r7, #4]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d005      	beq.n	8009cd4 <chk_chr+0x26>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d1f2      	bne.n	8009cba <chk_chr+0xc>
	return *str;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60bb      	str	r3, [r7, #8]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	60fb      	str	r3, [r7, #12]
 8009cf6:	e029      	b.n	8009d4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009cf8:	4a27      	ldr	r2, [pc, #156]	@ (8009d98 <chk_lock+0xb4>)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	011b      	lsls	r3, r3, #4
 8009cfe:	4413      	add	r3, r2
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d01d      	beq.n	8009d42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009d06:	4a24      	ldr	r2, [pc, #144]	@ (8009d98 <chk_lock+0xb4>)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	011b      	lsls	r3, r3, #4
 8009d0c:	4413      	add	r3, r2
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d116      	bne.n	8009d46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009d18:	4a1f      	ldr	r2, [pc, #124]	@ (8009d98 <chk_lock+0xb4>)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	011b      	lsls	r3, r3, #4
 8009d1e:	4413      	add	r3, r2
 8009d20:	3304      	adds	r3, #4
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d10c      	bne.n	8009d46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8009d98 <chk_lock+0xb4>)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	011b      	lsls	r3, r3, #4
 8009d32:	4413      	add	r3, r2
 8009d34:	3308      	adds	r3, #8
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d102      	bne.n	8009d46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009d40:	e007      	b.n	8009d52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009d42:	2301      	movs	r3, #1
 8009d44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	60fb      	str	r3, [r7, #12]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d9d2      	bls.n	8009cf8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d109      	bne.n	8009d6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d102      	bne.n	8009d64 <chk_lock+0x80>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d101      	bne.n	8009d68 <chk_lock+0x84>
 8009d64:	2300      	movs	r3, #0
 8009d66:	e010      	b.n	8009d8a <chk_lock+0xa6>
 8009d68:	2312      	movs	r3, #18
 8009d6a:	e00e      	b.n	8009d8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d108      	bne.n	8009d84 <chk_lock+0xa0>
 8009d72:	4a09      	ldr	r2, [pc, #36]	@ (8009d98 <chk_lock+0xb4>)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	011b      	lsls	r3, r3, #4
 8009d78:	4413      	add	r3, r2
 8009d7a:	330c      	adds	r3, #12
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d82:	d101      	bne.n	8009d88 <chk_lock+0xa4>
 8009d84:	2310      	movs	r3, #16
 8009d86:	e000      	b.n	8009d8a <chk_lock+0xa6>
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	200005ac 	.word	0x200005ac

08009d9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009da2:	2300      	movs	r3, #0
 8009da4:	607b      	str	r3, [r7, #4]
 8009da6:	e002      	b.n	8009dae <enq_lock+0x12>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	3301      	adds	r3, #1
 8009dac:	607b      	str	r3, [r7, #4]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d806      	bhi.n	8009dc2 <enq_lock+0x26>
 8009db4:	4a09      	ldr	r2, [pc, #36]	@ (8009ddc <enq_lock+0x40>)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	011b      	lsls	r3, r3, #4
 8009dba:	4413      	add	r3, r2
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f2      	bne.n	8009da8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	bf14      	ite	ne
 8009dc8:	2301      	movne	r3, #1
 8009dca:	2300      	moveq	r3, #0
 8009dcc:	b2db      	uxtb	r3, r3
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	200005ac 	.word	0x200005ac

08009de0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009dea:	2300      	movs	r3, #0
 8009dec:	60fb      	str	r3, [r7, #12]
 8009dee:	e01f      	b.n	8009e30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009df0:	4a41      	ldr	r2, [pc, #260]	@ (8009ef8 <inc_lock+0x118>)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	4413      	add	r3, r2
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d113      	bne.n	8009e2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009e02:	4a3d      	ldr	r2, [pc, #244]	@ (8009ef8 <inc_lock+0x118>)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	011b      	lsls	r3, r3, #4
 8009e08:	4413      	add	r3, r2
 8009e0a:	3304      	adds	r3, #4
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d109      	bne.n	8009e2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009e16:	4a38      	ldr	r2, [pc, #224]	@ (8009ef8 <inc_lock+0x118>)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	011b      	lsls	r3, r3, #4
 8009e1c:	4413      	add	r3, r2
 8009e1e:	3308      	adds	r3, #8
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d006      	beq.n	8009e38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d9dc      	bls.n	8009df0 <inc_lock+0x10>
 8009e36:	e000      	b.n	8009e3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009e38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d132      	bne.n	8009ea6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e40:	2300      	movs	r3, #0
 8009e42:	60fb      	str	r3, [r7, #12]
 8009e44:	e002      	b.n	8009e4c <inc_lock+0x6c>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d806      	bhi.n	8009e60 <inc_lock+0x80>
 8009e52:	4a29      	ldr	r2, [pc, #164]	@ (8009ef8 <inc_lock+0x118>)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	011b      	lsls	r3, r3, #4
 8009e58:	4413      	add	r3, r2
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1f2      	bne.n	8009e46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d101      	bne.n	8009e6a <inc_lock+0x8a>
 8009e66:	2300      	movs	r3, #0
 8009e68:	e040      	b.n	8009eec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	4922      	ldr	r1, [pc, #136]	@ (8009ef8 <inc_lock+0x118>)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	011b      	lsls	r3, r3, #4
 8009e74:	440b      	add	r3, r1
 8009e76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	491e      	ldr	r1, [pc, #120]	@ (8009ef8 <inc_lock+0x118>)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	011b      	lsls	r3, r3, #4
 8009e82:	440b      	add	r3, r1
 8009e84:	3304      	adds	r3, #4
 8009e86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	695a      	ldr	r2, [r3, #20]
 8009e8c:	491a      	ldr	r1, [pc, #104]	@ (8009ef8 <inc_lock+0x118>)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	011b      	lsls	r3, r3, #4
 8009e92:	440b      	add	r3, r1
 8009e94:	3308      	adds	r3, #8
 8009e96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009e98:	4a17      	ldr	r2, [pc, #92]	@ (8009ef8 <inc_lock+0x118>)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	011b      	lsls	r3, r3, #4
 8009e9e:	4413      	add	r3, r2
 8009ea0:	330c      	adds	r3, #12
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d009      	beq.n	8009ec0 <inc_lock+0xe0>
 8009eac:	4a12      	ldr	r2, [pc, #72]	@ (8009ef8 <inc_lock+0x118>)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	011b      	lsls	r3, r3, #4
 8009eb2:	4413      	add	r3, r2
 8009eb4:	330c      	adds	r3, #12
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d001      	beq.n	8009ec0 <inc_lock+0xe0>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	e015      	b.n	8009eec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d108      	bne.n	8009ed8 <inc_lock+0xf8>
 8009ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8009ef8 <inc_lock+0x118>)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	011b      	lsls	r3, r3, #4
 8009ecc:	4413      	add	r3, r2
 8009ece:	330c      	adds	r3, #12
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	e001      	b.n	8009edc <inc_lock+0xfc>
 8009ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009edc:	4906      	ldr	r1, [pc, #24]	@ (8009ef8 <inc_lock+0x118>)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	440b      	add	r3, r1
 8009ee4:	330c      	adds	r3, #12
 8009ee6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	3301      	adds	r3, #1
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3714      	adds	r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	200005ac 	.word	0x200005ac

08009efc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	3b01      	subs	r3, #1
 8009f08:	607b      	str	r3, [r7, #4]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d825      	bhi.n	8009f5c <dec_lock+0x60>
		n = Files[i].ctr;
 8009f10:	4a17      	ldr	r2, [pc, #92]	@ (8009f70 <dec_lock+0x74>)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	011b      	lsls	r3, r3, #4
 8009f16:	4413      	add	r3, r2
 8009f18:	330c      	adds	r3, #12
 8009f1a:	881b      	ldrh	r3, [r3, #0]
 8009f1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009f1e:	89fb      	ldrh	r3, [r7, #14]
 8009f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f24:	d101      	bne.n	8009f2a <dec_lock+0x2e>
 8009f26:	2300      	movs	r3, #0
 8009f28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009f2a:	89fb      	ldrh	r3, [r7, #14]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <dec_lock+0x3a>
 8009f30:	89fb      	ldrh	r3, [r7, #14]
 8009f32:	3b01      	subs	r3, #1
 8009f34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009f36:	4a0e      	ldr	r2, [pc, #56]	@ (8009f70 <dec_lock+0x74>)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	011b      	lsls	r3, r3, #4
 8009f3c:	4413      	add	r3, r2
 8009f3e:	330c      	adds	r3, #12
 8009f40:	89fa      	ldrh	r2, [r7, #14]
 8009f42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009f44:	89fb      	ldrh	r3, [r7, #14]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d105      	bne.n	8009f56 <dec_lock+0x5a>
 8009f4a:	4a09      	ldr	r2, [pc, #36]	@ (8009f70 <dec_lock+0x74>)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	011b      	lsls	r3, r3, #4
 8009f50:	4413      	add	r3, r2
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	737b      	strb	r3, [r7, #13]
 8009f5a:	e001      	b.n	8009f60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009f60:	7b7b      	ldrb	r3, [r7, #13]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	200005ac 	.word	0x200005ac

08009f74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	e010      	b.n	8009fa4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009f82:	4a0d      	ldr	r2, [pc, #52]	@ (8009fb8 <clear_lock+0x44>)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	011b      	lsls	r3, r3, #4
 8009f88:	4413      	add	r3, r2
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d105      	bne.n	8009f9e <clear_lock+0x2a>
 8009f92:	4a09      	ldr	r2, [pc, #36]	@ (8009fb8 <clear_lock+0x44>)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	011b      	lsls	r3, r3, #4
 8009f98:	4413      	add	r3, r2
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	60fb      	str	r3, [r7, #12]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d9eb      	bls.n	8009f82 <clear_lock+0xe>
	}
}
 8009faa:	bf00      	nop
 8009fac:	bf00      	nop
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	200005ac 	.word	0x200005ac

08009fbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	78db      	ldrb	r3, [r3, #3]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d034      	beq.n	800a03a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	7858      	ldrb	r0, [r3, #1]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	f7ff fd40 	bl	8009a68 <disk_write>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d002      	beq.n	8009ff4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	73fb      	strb	r3, [r7, #15]
 8009ff2:	e022      	b.n	800a03a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	1ad2      	subs	r2, r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	429a      	cmp	r2, r3
 800a008:	d217      	bcs.n	800a03a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	789b      	ldrb	r3, [r3, #2]
 800a00e:	613b      	str	r3, [r7, #16]
 800a010:	e010      	b.n	800a034 <sync_window+0x78>
					wsect += fs->fsize;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	697a      	ldr	r2, [r7, #20]
 800a018:	4413      	add	r3, r2
 800a01a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	7858      	ldrb	r0, [r3, #1]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a026:	2301      	movs	r3, #1
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	f7ff fd1d 	bl	8009a68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	3b01      	subs	r3, #1
 800a032:	613b      	str	r3, [r7, #16]
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d8eb      	bhi.n	800a012 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d01b      	beq.n	800a094 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff ffad 	bl	8009fbc <sync_window>
 800a062:	4603      	mov	r3, r0
 800a064:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a066:	7bfb      	ldrb	r3, [r7, #15]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d113      	bne.n	800a094 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	7858      	ldrb	r0, [r3, #1]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a076:	2301      	movs	r3, #1
 800a078:	683a      	ldr	r2, [r7, #0]
 800a07a:	f7ff fcd5 	bl	8009a28 <disk_read>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d004      	beq.n	800a08e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a084:	f04f 33ff 	mov.w	r3, #4294967295
 800a088:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800a094:	7bfb      	ldrb	r3, [r7, #15]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7ff ff87 	bl	8009fbc <sync_window>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d158      	bne.n	800a16a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	d148      	bne.n	800a152 <sync_fs+0xb2>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	791b      	ldrb	r3, [r3, #4]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d144      	bne.n	800a152 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	3330      	adds	r3, #48	@ 0x30
 800a0cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7ff fda9 	bl	8009c2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3330      	adds	r3, #48	@ 0x30
 800a0dc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a0e0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7ff fd38 	bl	8009b5a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	3330      	adds	r3, #48	@ 0x30
 800a0ee:	4921      	ldr	r1, [pc, #132]	@ (800a174 <sync_fs+0xd4>)
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff fd4d 	bl	8009b90 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	3330      	adds	r3, #48	@ 0x30
 800a0fa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a0fe:	491e      	ldr	r1, [pc, #120]	@ (800a178 <sync_fs+0xd8>)
 800a100:	4618      	mov	r0, r3
 800a102:	f7ff fd45 	bl	8009b90 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3330      	adds	r3, #48	@ 0x30
 800a10a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	4619      	mov	r1, r3
 800a114:	4610      	mov	r0, r2
 800a116:	f7ff fd3b 	bl	8009b90 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3330      	adds	r3, #48	@ 0x30
 800a11e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	4619      	mov	r1, r3
 800a128:	4610      	mov	r0, r2
 800a12a:	f7ff fd31 	bl	8009b90 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	69db      	ldr	r3, [r3, #28]
 800a132:	1c5a      	adds	r2, r3, #1
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	7858      	ldrb	r0, [r3, #1]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a146:	2301      	movs	r3, #1
 800a148:	f7ff fc8e 	bl	8009a68 <disk_write>
			fs->fsi_flag = 0;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	785b      	ldrb	r3, [r3, #1]
 800a156:	2200      	movs	r2, #0
 800a158:	2100      	movs	r1, #0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7ff fca4 	bl	8009aa8 <disk_ioctl>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <sync_fs+0xca>
 800a166:	2301      	movs	r3, #1
 800a168:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	41615252 	.word	0x41615252
 800a178:	61417272 	.word	0x61417272

0800a17c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	3b02      	subs	r3, #2
 800a18a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	3b02      	subs	r3, #2
 800a192:	683a      	ldr	r2, [r7, #0]
 800a194:	429a      	cmp	r2, r3
 800a196:	d301      	bcc.n	800a19c <clust2sect+0x20>
 800a198:	2300      	movs	r3, #0
 800a19a:	e008      	b.n	800a1ae <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	895b      	ldrh	r3, [r3, #10]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	fb03 f202 	mul.w	r2, r3, r2
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ac:	4413      	add	r3, r2
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b086      	sub	sp, #24
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d904      	bls.n	800a1da <get_fat+0x20>
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	683a      	ldr	r2, [r7, #0]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d302      	bcc.n	800a1e0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a1da:	2301      	movs	r3, #1
 800a1dc:	617b      	str	r3, [r7, #20]
 800a1de:	e08e      	b.n	800a2fe <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a1e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	2b03      	cmp	r3, #3
 800a1ec:	d061      	beq.n	800a2b2 <get_fat+0xf8>
 800a1ee:	2b03      	cmp	r3, #3
 800a1f0:	dc7b      	bgt.n	800a2ea <get_fat+0x130>
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d002      	beq.n	800a1fc <get_fat+0x42>
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d041      	beq.n	800a27e <get_fat+0xc4>
 800a1fa:	e076      	b.n	800a2ea <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	60fb      	str	r3, [r7, #12]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	085b      	lsrs	r3, r3, #1
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	4413      	add	r3, r2
 800a208:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	6a1a      	ldr	r2, [r3, #32]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	0a5b      	lsrs	r3, r3, #9
 800a212:	4413      	add	r3, r2
 800a214:	4619      	mov	r1, r3
 800a216:	6938      	ldr	r0, [r7, #16]
 800a218:	f7ff ff14 	bl	800a044 <move_window>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d166      	bne.n	800a2f0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	1c5a      	adds	r2, r3, #1
 800a226:	60fa      	str	r2, [r7, #12]
 800a228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	4413      	add	r3, r2
 800a230:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a234:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	6a1a      	ldr	r2, [r3, #32]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	0a5b      	lsrs	r3, r3, #9
 800a23e:	4413      	add	r3, r2
 800a240:	4619      	mov	r1, r3
 800a242:	6938      	ldr	r0, [r7, #16]
 800a244:	f7ff fefe 	bl	800a044 <move_window>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d152      	bne.n	800a2f4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	4413      	add	r3, r2
 800a258:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a25c:	021b      	lsls	r3, r3, #8
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	4313      	orrs	r3, r2
 800a262:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d002      	beq.n	800a274 <get_fat+0xba>
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	091b      	lsrs	r3, r3, #4
 800a272:	e002      	b.n	800a27a <get_fat+0xc0>
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a27a:	617b      	str	r3, [r7, #20]
			break;
 800a27c:	e03f      	b.n	800a2fe <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	6a1a      	ldr	r2, [r3, #32]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	0a1b      	lsrs	r3, r3, #8
 800a286:	4413      	add	r3, r2
 800a288:	4619      	mov	r1, r3
 800a28a:	6938      	ldr	r0, [r7, #16]
 800a28c:	f7ff feda 	bl	800a044 <move_window>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d130      	bne.n	800a2f8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	005b      	lsls	r3, r3, #1
 800a2a0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a2a4:	4413      	add	r3, r2
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7ff fc1c 	bl	8009ae4 <ld_word>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	617b      	str	r3, [r7, #20]
			break;
 800a2b0:	e025      	b.n	800a2fe <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	6a1a      	ldr	r2, [r3, #32]
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	09db      	lsrs	r3, r3, #7
 800a2ba:	4413      	add	r3, r2
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6938      	ldr	r0, [r7, #16]
 800a2c0:	f7ff fec0 	bl	800a044 <move_window>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d118      	bne.n	800a2fc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a2d8:	4413      	add	r3, r2
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7ff fc1a 	bl	8009b14 <ld_dword>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a2e6:	617b      	str	r3, [r7, #20]
			break;
 800a2e8:	e009      	b.n	800a2fe <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	617b      	str	r3, [r7, #20]
 800a2ee:	e006      	b.n	800a2fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2f0:	bf00      	nop
 800a2f2:	e004      	b.n	800a2fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2f4:	bf00      	nop
 800a2f6:	e002      	b.n	800a2fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a2f8:	bf00      	nop
 800a2fa:	e000      	b.n	800a2fe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2fc:	bf00      	nop
		}
	}

	return val;
 800a2fe:	697b      	ldr	r3, [r7, #20]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a308:	b590      	push	{r4, r7, lr}
 800a30a:	b089      	sub	sp, #36	@ 0x24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a314:	2302      	movs	r3, #2
 800a316:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	f240 80d9 	bls.w	800a4d2 <put_fat+0x1ca>
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	695b      	ldr	r3, [r3, #20]
 800a324:	68ba      	ldr	r2, [r7, #8]
 800a326:	429a      	cmp	r2, r3
 800a328:	f080 80d3 	bcs.w	800a4d2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	2b03      	cmp	r3, #3
 800a332:	f000 8096 	beq.w	800a462 <put_fat+0x15a>
 800a336:	2b03      	cmp	r3, #3
 800a338:	f300 80cb 	bgt.w	800a4d2 <put_fat+0x1ca>
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d002      	beq.n	800a346 <put_fat+0x3e>
 800a340:	2b02      	cmp	r3, #2
 800a342:	d06e      	beq.n	800a422 <put_fat+0x11a>
 800a344:	e0c5      	b.n	800a4d2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	61bb      	str	r3, [r7, #24]
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	085b      	lsrs	r3, r3, #1
 800a34e:	69ba      	ldr	r2, [r7, #24]
 800a350:	4413      	add	r3, r2
 800a352:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6a1a      	ldr	r2, [r3, #32]
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	0a5b      	lsrs	r3, r3, #9
 800a35c:	4413      	add	r3, r2
 800a35e:	4619      	mov	r1, r3
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f7ff fe6f 	bl	800a044 <move_window>
 800a366:	4603      	mov	r3, r0
 800a368:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a36a:	7ffb      	ldrb	r3, [r7, #31]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f040 80a9 	bne.w	800a4c4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	1c59      	adds	r1, r3, #1
 800a37c:	61b9      	str	r1, [r7, #24]
 800a37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a382:	4413      	add	r3, r2
 800a384:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00d      	beq.n	800a3ac <put_fat+0xa4>
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	b25b      	sxtb	r3, r3
 800a396:	f003 030f 	and.w	r3, r3, #15
 800a39a:	b25a      	sxtb	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	011b      	lsls	r3, r3, #4
 800a3a2:	b25b      	sxtb	r3, r3
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	b25b      	sxtb	r3, r3
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	e001      	b.n	800a3b0 <put_fat+0xa8>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	697a      	ldr	r2, [r7, #20]
 800a3b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6a1a      	ldr	r2, [r3, #32]
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	0a5b      	lsrs	r3, r3, #9
 800a3c2:	4413      	add	r3, r2
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7ff fe3c 	bl	800a044 <move_window>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3d0:	7ffb      	ldrb	r3, [r7, #31]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d178      	bne.n	800a4c8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e2:	4413      	add	r3, r2
 800a3e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d003      	beq.n	800a3f8 <put_fat+0xf0>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	091b      	lsrs	r3, r3, #4
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	e00e      	b.n	800a416 <put_fat+0x10e>
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	b25b      	sxtb	r3, r3
 800a3fe:	f023 030f 	bic.w	r3, r3, #15
 800a402:	b25a      	sxtb	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	0a1b      	lsrs	r3, r3, #8
 800a408:	b25b      	sxtb	r3, r3
 800a40a:	f003 030f 	and.w	r3, r3, #15
 800a40e:	b25b      	sxtb	r3, r3
 800a410:	4313      	orrs	r3, r2
 800a412:	b25b      	sxtb	r3, r3
 800a414:	b2db      	uxtb	r3, r3
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2201      	movs	r2, #1
 800a41e:	70da      	strb	r2, [r3, #3]
			break;
 800a420:	e057      	b.n	800a4d2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6a1a      	ldr	r2, [r3, #32]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	0a1b      	lsrs	r3, r3, #8
 800a42a:	4413      	add	r3, r2
 800a42c:	4619      	mov	r1, r3
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7ff fe08 	bl	800a044 <move_window>
 800a434:	4603      	mov	r3, r0
 800a436:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a438:	7ffb      	ldrb	r3, [r7, #31]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d146      	bne.n	800a4cc <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	005b      	lsls	r3, r3, #1
 800a448:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a44c:	4413      	add	r3, r2
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	b292      	uxth	r2, r2
 800a452:	4611      	mov	r1, r2
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff fb80 	bl	8009b5a <st_word>
			fs->wflag = 1;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2201      	movs	r2, #1
 800a45e:	70da      	strb	r2, [r3, #3]
			break;
 800a460:	e037      	b.n	800a4d2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6a1a      	ldr	r2, [r3, #32]
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	09db      	lsrs	r3, r3, #7
 800a46a:	4413      	add	r3, r2
 800a46c:	4619      	mov	r1, r3
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f7ff fde8 	bl	800a044 <move_window>
 800a474:	4603      	mov	r3, r0
 800a476:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a478:	7ffb      	ldrb	r3, [r7, #31]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d128      	bne.n	800a4d0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a492:	4413      	add	r3, r2
 800a494:	4618      	mov	r0, r3
 800a496:	f7ff fb3d 	bl	8009b14 <ld_dword>
 800a49a:	4603      	mov	r3, r0
 800a49c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a4a0:	4323      	orrs	r3, r4
 800a4a2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a4b2:	4413      	add	r3, r2
 800a4b4:	6879      	ldr	r1, [r7, #4]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7ff fb6a 	bl	8009b90 <st_dword>
			fs->wflag = 1;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	70da      	strb	r2, [r3, #3]
			break;
 800a4c2:	e006      	b.n	800a4d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a4c4:	bf00      	nop
 800a4c6:	e004      	b.n	800a4d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a4c8:	bf00      	nop
 800a4ca:	e002      	b.n	800a4d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a4cc:	bf00      	nop
 800a4ce:	e000      	b.n	800a4d2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a4d0:	bf00      	nop
		}
	}
	return res;
 800a4d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3724      	adds	r7, #36	@ 0x24
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd90      	pop	{r4, r7, pc}

0800a4dc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b088      	sub	sp, #32
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d904      	bls.n	800a502 <remove_chain+0x26>
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	695b      	ldr	r3, [r3, #20]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d301      	bcc.n	800a506 <remove_chain+0x2a>
 800a502:	2302      	movs	r3, #2
 800a504:	e04b      	b.n	800a59e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00c      	beq.n	800a526 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a50c:	f04f 32ff 	mov.w	r2, #4294967295
 800a510:	6879      	ldr	r1, [r7, #4]
 800a512:	69b8      	ldr	r0, [r7, #24]
 800a514:	f7ff fef8 	bl	800a308 <put_fat>
 800a518:	4603      	mov	r3, r0
 800a51a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a51c:	7ffb      	ldrb	r3, [r7, #31]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d001      	beq.n	800a526 <remove_chain+0x4a>
 800a522:	7ffb      	ldrb	r3, [r7, #31]
 800a524:	e03b      	b.n	800a59e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a526:	68b9      	ldr	r1, [r7, #8]
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f7ff fe46 	bl	800a1ba <get_fat>
 800a52e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d031      	beq.n	800a59a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d101      	bne.n	800a540 <remove_chain+0x64>
 800a53c:	2302      	movs	r3, #2
 800a53e:	e02e      	b.n	800a59e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a546:	d101      	bne.n	800a54c <remove_chain+0x70>
 800a548:	2301      	movs	r3, #1
 800a54a:	e028      	b.n	800a59e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a54c:	2200      	movs	r2, #0
 800a54e:	68b9      	ldr	r1, [r7, #8]
 800a550:	69b8      	ldr	r0, [r7, #24]
 800a552:	f7ff fed9 	bl	800a308 <put_fat>
 800a556:	4603      	mov	r3, r0
 800a558:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a55a:	7ffb      	ldrb	r3, [r7, #31]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <remove_chain+0x88>
 800a560:	7ffb      	ldrb	r3, [r7, #31]
 800a562:	e01c      	b.n	800a59e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	691a      	ldr	r2, [r3, #16]
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	3b02      	subs	r3, #2
 800a56e:	429a      	cmp	r2, r3
 800a570:	d20b      	bcs.n	800a58a <remove_chain+0xae>
			fs->free_clst++;
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	791b      	ldrb	r3, [r3, #4]
 800a580:	f043 0301 	orr.w	r3, r3, #1
 800a584:	b2da      	uxtb	r2, r3
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	429a      	cmp	r2, r3
 800a596:	d3c6      	bcc.n	800a526 <remove_chain+0x4a>
 800a598:	e000      	b.n	800a59c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a59a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3720      	adds	r7, #32
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b088      	sub	sp, #32
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10d      	bne.n	800a5d8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d004      	beq.n	800a5d2 <create_chain+0x2c>
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	695b      	ldr	r3, [r3, #20]
 800a5cc:	69ba      	ldr	r2, [r7, #24]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d31b      	bcc.n	800a60a <create_chain+0x64>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	61bb      	str	r3, [r7, #24]
 800a5d6:	e018      	b.n	800a60a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a5d8:	6839      	ldr	r1, [r7, #0]
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7ff fded 	bl	800a1ba <get_fat>
 800a5e0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d801      	bhi.n	800a5ec <create_chain+0x46>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e070      	b.n	800a6ce <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f2:	d101      	bne.n	800a5f8 <create_chain+0x52>
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	e06a      	b.n	800a6ce <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	695b      	ldr	r3, [r3, #20]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d201      	bcs.n	800a606 <create_chain+0x60>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	e063      	b.n	800a6ce <create_chain+0x128>
		scl = clst;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	3301      	adds	r3, #1
 800a612:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	695b      	ldr	r3, [r3, #20]
 800a618:	69fa      	ldr	r2, [r7, #28]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d307      	bcc.n	800a62e <create_chain+0x88>
				ncl = 2;
 800a61e:	2302      	movs	r3, #2
 800a620:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a622:	69fa      	ldr	r2, [r7, #28]
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	429a      	cmp	r2, r3
 800a628:	d901      	bls.n	800a62e <create_chain+0x88>
 800a62a:	2300      	movs	r3, #0
 800a62c:	e04f      	b.n	800a6ce <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a62e:	69f9      	ldr	r1, [r7, #28]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7ff fdc2 	bl	800a1ba <get_fat>
 800a636:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00e      	beq.n	800a65c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d003      	beq.n	800a64c <create_chain+0xa6>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64a:	d101      	bne.n	800a650 <create_chain+0xaa>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	e03e      	b.n	800a6ce <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a650:	69fa      	ldr	r2, [r7, #28]
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	429a      	cmp	r2, r3
 800a656:	d1da      	bne.n	800a60e <create_chain+0x68>
 800a658:	2300      	movs	r3, #0
 800a65a:	e038      	b.n	800a6ce <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a65c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a65e:	f04f 32ff 	mov.w	r2, #4294967295
 800a662:	69f9      	ldr	r1, [r7, #28]
 800a664:	6938      	ldr	r0, [r7, #16]
 800a666:	f7ff fe4f 	bl	800a308 <put_fat>
 800a66a:	4603      	mov	r3, r0
 800a66c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a66e:	7dfb      	ldrb	r3, [r7, #23]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d109      	bne.n	800a688 <create_chain+0xe2>
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d006      	beq.n	800a688 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a67a:	69fa      	ldr	r2, [r7, #28]
 800a67c:	6839      	ldr	r1, [r7, #0]
 800a67e:	6938      	ldr	r0, [r7, #16]
 800a680:	f7ff fe42 	bl	800a308 <put_fat>
 800a684:	4603      	mov	r3, r0
 800a686:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a688:	7dfb      	ldrb	r3, [r7, #23]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d116      	bne.n	800a6bc <create_chain+0x116>
		fs->last_clst = ncl;
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	69fa      	ldr	r2, [r7, #28]
 800a692:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	691a      	ldr	r2, [r3, #16]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	3b02      	subs	r3, #2
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d804      	bhi.n	800a6ac <create_chain+0x106>
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	1e5a      	subs	r2, r3, #1
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	791b      	ldrb	r3, [r3, #4]
 800a6b0:	f043 0301 	orr.w	r3, r3, #1
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	711a      	strb	r2, [r3, #4]
 800a6ba:	e007      	b.n	800a6cc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a6bc:	7dfb      	ldrb	r3, [r7, #23]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d102      	bne.n	800a6c8 <create_chain+0x122>
 800a6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c6:	e000      	b.n	800a6ca <create_chain+0x124>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a6cc:	69fb      	ldr	r3, [r7, #28]
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3720      	adds	r7, #32
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b087      	sub	sp, #28
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ea:	3304      	adds	r3, #4
 800a6ec:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	0a5b      	lsrs	r3, r3, #9
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	8952      	ldrh	r2, [r2, #10]
 800a6f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	1d1a      	adds	r2, r3, #4
 800a700:	613a      	str	r2, [r7, #16]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d101      	bne.n	800a710 <clmt_clust+0x3a>
 800a70c:	2300      	movs	r3, #0
 800a70e:	e010      	b.n	800a732 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	429a      	cmp	r2, r3
 800a716:	d307      	bcc.n	800a728 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	1ad3      	subs	r3, r2, r3
 800a71e:	617b      	str	r3, [r7, #20]
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	3304      	adds	r3, #4
 800a724:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a726:	e7e9      	b.n	800a6fc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a728:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	4413      	add	r3, r2
}
 800a732:	4618      	mov	r0, r3
 800a734:	371c      	adds	r7, #28
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b086      	sub	sp, #24
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a754:	d204      	bcs.n	800a760 <dir_sdi+0x22>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	f003 031f 	and.w	r3, r3, #31
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d001      	beq.n	800a764 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a760:	2302      	movs	r3, #2
 800a762:	e063      	b.n	800a82c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d106      	bne.n	800a784 <dir_sdi+0x46>
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d902      	bls.n	800a784 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a782:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10c      	bne.n	800a7a4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	095b      	lsrs	r3, r3, #5
 800a78e:	693a      	ldr	r2, [r7, #16]
 800a790:	8912      	ldrh	r2, [r2, #8]
 800a792:	4293      	cmp	r3, r2
 800a794:	d301      	bcc.n	800a79a <dir_sdi+0x5c>
 800a796:	2302      	movs	r3, #2
 800a798:	e048      	b.n	800a82c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	61da      	str	r2, [r3, #28]
 800a7a2:	e029      	b.n	800a7f8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	895b      	ldrh	r3, [r3, #10]
 800a7a8:	025b      	lsls	r3, r3, #9
 800a7aa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a7ac:	e019      	b.n	800a7e2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6979      	ldr	r1, [r7, #20]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7ff fd01 	bl	800a1ba <get_fat>
 800a7b8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c0:	d101      	bne.n	800a7c6 <dir_sdi+0x88>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e032      	b.n	800a82c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d904      	bls.n	800a7d6 <dir_sdi+0x98>
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	697a      	ldr	r2, [r7, #20]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d301      	bcc.n	800a7da <dir_sdi+0x9c>
 800a7d6:	2302      	movs	r3, #2
 800a7d8:	e028      	b.n	800a82c <dir_sdi+0xee>
			ofs -= csz;
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	1ad3      	subs	r3, r2, r3
 800a7e0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d2e1      	bcs.n	800a7ae <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a7ea:	6979      	ldr	r1, [r7, #20]
 800a7ec:	6938      	ldr	r0, [r7, #16]
 800a7ee:	f7ff fcc5 	bl	800a17c <clust2sect>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	69db      	ldr	r3, [r3, #28]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d101      	bne.n	800a80a <dir_sdi+0xcc>
 800a806:	2302      	movs	r3, #2
 800a808:	e010      	b.n	800a82c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	69da      	ldr	r2, [r3, #28]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	0a5b      	lsrs	r3, r3, #9
 800a812:	441a      	add	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a824:	441a      	add	r2, r3
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3718      	adds	r7, #24
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	695b      	ldr	r3, [r3, #20]
 800a848:	3320      	adds	r3, #32
 800a84a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	69db      	ldr	r3, [r3, #28]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d003      	beq.n	800a85c <dir_next+0x28>
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a85a:	d301      	bcc.n	800a860 <dir_next+0x2c>
 800a85c:	2304      	movs	r3, #4
 800a85e:	e0aa      	b.n	800a9b6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a866:	2b00      	cmp	r3, #0
 800a868:	f040 8098 	bne.w	800a99c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	69db      	ldr	r3, [r3, #28]
 800a870:	1c5a      	adds	r2, r3, #1
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	699b      	ldr	r3, [r3, #24]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10b      	bne.n	800a896 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	095b      	lsrs	r3, r3, #5
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	8912      	ldrh	r2, [r2, #8]
 800a886:	4293      	cmp	r3, r2
 800a888:	f0c0 8088 	bcc.w	800a99c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	61da      	str	r2, [r3, #28]
 800a892:	2304      	movs	r3, #4
 800a894:	e08f      	b.n	800a9b6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	0a5b      	lsrs	r3, r3, #9
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	8952      	ldrh	r2, [r2, #10]
 800a89e:	3a01      	subs	r2, #1
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d17a      	bne.n	800a99c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	699b      	ldr	r3, [r3, #24]
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	f7ff fc83 	bl	800a1ba <get_fat>
 800a8b4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d801      	bhi.n	800a8c0 <dir_next+0x8c>
 800a8bc:	2302      	movs	r3, #2
 800a8be:	e07a      	b.n	800a9b6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c6:	d101      	bne.n	800a8cc <dir_next+0x98>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e074      	b.n	800a9b6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	695b      	ldr	r3, [r3, #20]
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d358      	bcc.n	800a988 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d104      	bne.n	800a8e6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	61da      	str	r2, [r3, #28]
 800a8e2:	2304      	movs	r3, #4
 800a8e4:	e067      	b.n	800a9b6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	4610      	mov	r0, r2
 800a8f0:	f7ff fe59 	bl	800a5a6 <create_chain>
 800a8f4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d101      	bne.n	800a900 <dir_next+0xcc>
 800a8fc:	2307      	movs	r3, #7
 800a8fe:	e05a      	b.n	800a9b6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	2b01      	cmp	r3, #1
 800a904:	d101      	bne.n	800a90a <dir_next+0xd6>
 800a906:	2302      	movs	r3, #2
 800a908:	e055      	b.n	800a9b6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a910:	d101      	bne.n	800a916 <dir_next+0xe2>
 800a912:	2301      	movs	r3, #1
 800a914:	e04f      	b.n	800a9b6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f7ff fb50 	bl	8009fbc <sync_window>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d001      	beq.n	800a926 <dir_next+0xf2>
 800a922:	2301      	movs	r3, #1
 800a924:	e047      	b.n	800a9b6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	3330      	adds	r3, #48	@ 0x30
 800a92a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a92e:	2100      	movs	r1, #0
 800a930:	4618      	mov	r0, r3
 800a932:	f7ff f97a 	bl	8009c2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a936:	2300      	movs	r3, #0
 800a938:	613b      	str	r3, [r7, #16]
 800a93a:	6979      	ldr	r1, [r7, #20]
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f7ff fc1d 	bl	800a17c <clust2sect>
 800a942:	4602      	mov	r2, r0
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a948:	e012      	b.n	800a970 <dir_next+0x13c>
						fs->wflag = 1;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2201      	movs	r2, #1
 800a94e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f7ff fb33 	bl	8009fbc <sync_window>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d001      	beq.n	800a960 <dir_next+0x12c>
 800a95c:	2301      	movs	r3, #1
 800a95e:	e02a      	b.n	800a9b6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	3301      	adds	r3, #1
 800a964:	613b      	str	r3, [r7, #16]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a96a:	1c5a      	adds	r2, r3, #1
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	895b      	ldrh	r3, [r3, #10]
 800a974:	461a      	mov	r2, r3
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	4293      	cmp	r3, r2
 800a97a:	d3e6      	bcc.n	800a94a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	1ad2      	subs	r2, r2, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	697a      	ldr	r2, [r7, #20]
 800a98c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a98e:	6979      	ldr	r1, [r7, #20]
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f7ff fbf3 	bl	800a17c <clust2sect>
 800a996:	4602      	mov	r2, r0
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ae:	441a      	add	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b086      	sub	sp, #24
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff feb4 	bl	800a73e <dir_sdi>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a9da:	7dfb      	ldrb	r3, [r7, #23]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d12b      	bne.n	800aa38 <dir_alloc+0x7a>
		n = 0;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	69db      	ldr	r3, [r3, #28]
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f7ff fb2a 	bl	800a044 <move_window>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a9f4:	7dfb      	ldrb	r3, [r7, #23]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d11d      	bne.n	800aa36 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a1b      	ldr	r3, [r3, #32]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	2be5      	cmp	r3, #229	@ 0xe5
 800aa02:	d004      	beq.n	800aa0e <dir_alloc+0x50>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a1b      	ldr	r3, [r3, #32]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d107      	bne.n	800aa1e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	3301      	adds	r3, #1
 800aa12:	613b      	str	r3, [r7, #16]
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d102      	bne.n	800aa22 <dir_alloc+0x64>
 800aa1c:	e00c      	b.n	800aa38 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aa1e:	2300      	movs	r3, #0
 800aa20:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aa22:	2101      	movs	r1, #1
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7ff ff05 	bl	800a834 <dir_next>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d0d7      	beq.n	800a9e4 <dir_alloc+0x26>
 800aa34:	e000      	b.n	800aa38 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aa36:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aa38:	7dfb      	ldrb	r3, [r7, #23]
 800aa3a:	2b04      	cmp	r3, #4
 800aa3c:	d101      	bne.n	800aa42 <dir_alloc+0x84>
 800aa3e:	2307      	movs	r3, #7
 800aa40:	75fb      	strb	r3, [r7, #23]
	return res;
 800aa42:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3718      	adds	r7, #24
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	331a      	adds	r3, #26
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7ff f842 	bl	8009ae4 <ld_word>
 800aa60:	4603      	mov	r3, r0
 800aa62:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	2b03      	cmp	r3, #3
 800aa6a:	d109      	bne.n	800aa80 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	3314      	adds	r3, #20
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7ff f837 	bl	8009ae4 <ld_word>
 800aa76:	4603      	mov	r3, r0
 800aa78:	041b      	lsls	r3, r3, #16
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aa80:	68fb      	ldr	r3, [r7, #12]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	60f8      	str	r0, [r7, #12]
 800aa92:	60b9      	str	r1, [r7, #8]
 800aa94:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	331a      	adds	r3, #26
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	b292      	uxth	r2, r2
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7ff f85a 	bl	8009b5a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d109      	bne.n	800aac2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	f103 0214 	add.w	r2, r3, #20
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	0c1b      	lsrs	r3, r3, #16
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	4619      	mov	r1, r3
 800aabc:	4610      	mov	r0, r2
 800aabe:	f7ff f84c 	bl	8009b5a <st_word>
	}
}
 800aac2:	bf00      	nop
 800aac4:	3710      	adds	r7, #16
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b086      	sub	sp, #24
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800aad4:	2304      	movs	r3, #4
 800aad6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800aade:	e03c      	b.n	800ab5a <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	69db      	ldr	r3, [r3, #28]
 800aae4:	4619      	mov	r1, r3
 800aae6:	6938      	ldr	r0, [r7, #16]
 800aae8:	f7ff faac 	bl	800a044 <move_window>
 800aaec:	4603      	mov	r3, r0
 800aaee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d136      	bne.n	800ab64 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d102      	bne.n	800ab0a <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ab04:	2304      	movs	r3, #4
 800ab06:	75fb      	strb	r3, [r7, #23]
 800ab08:	e031      	b.n	800ab6e <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	330b      	adds	r3, #11
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab16:	73bb      	strb	r3, [r7, #14]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	7bba      	ldrb	r2, [r7, #14]
 800ab1c:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800ab1e:	7bfb      	ldrb	r3, [r7, #15]
 800ab20:	2be5      	cmp	r3, #229	@ 0xe5
 800ab22:	d011      	beq.n	800ab48 <dir_read+0x7e>
 800ab24:	7bfb      	ldrb	r3, [r7, #15]
 800ab26:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab28:	d00e      	beq.n	800ab48 <dir_read+0x7e>
 800ab2a:	7bbb      	ldrb	r3, [r7, #14]
 800ab2c:	2b0f      	cmp	r3, #15
 800ab2e:	d00b      	beq.n	800ab48 <dir_read+0x7e>
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
 800ab32:	f023 0320 	bic.w	r3, r3, #32
 800ab36:	2b08      	cmp	r3, #8
 800ab38:	bf0c      	ite	eq
 800ab3a:	2301      	moveq	r3, #1
 800ab3c:	2300      	movne	r3, #0
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	461a      	mov	r2, r3
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d00f      	beq.n	800ab68 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ab48:	2100      	movs	r1, #0
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f7ff fe72 	bl	800a834 <dir_next>
 800ab50:	4603      	mov	r3, r0
 800ab52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ab54:	7dfb      	ldrb	r3, [r7, #23]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d108      	bne.n	800ab6c <dir_read+0xa2>
	while (dp->sect) {
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	69db      	ldr	r3, [r3, #28]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1be      	bne.n	800aae0 <dir_read+0x16>
 800ab62:	e004      	b.n	800ab6e <dir_read+0xa4>
		if (res != FR_OK) break;
 800ab64:	bf00      	nop
 800ab66:	e002      	b.n	800ab6e <dir_read+0xa4>
				break;
 800ab68:	bf00      	nop
 800ab6a:	e000      	b.n	800ab6e <dir_read+0xa4>
		if (res != FR_OK) break;
 800ab6c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ab6e:	7dfb      	ldrb	r3, [r7, #23]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <dir_read+0xb0>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	61da      	str	r2, [r3, #28]
	return res;
 800ab7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b086      	sub	sp, #24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ab92:	2100      	movs	r1, #0
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7ff fdd2 	bl	800a73e <dir_sdi>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d001      	beq.n	800aba8 <dir_find+0x24>
 800aba4:	7dfb      	ldrb	r3, [r7, #23]
 800aba6:	e03e      	b.n	800ac26 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	69db      	ldr	r3, [r3, #28]
 800abac:	4619      	mov	r1, r3
 800abae:	6938      	ldr	r0, [r7, #16]
 800abb0:	f7ff fa48 	bl	800a044 <move_window>
 800abb4:	4603      	mov	r3, r0
 800abb6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800abb8:	7dfb      	ldrb	r3, [r7, #23]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d12f      	bne.n	800ac1e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d102      	bne.n	800abd2 <dir_find+0x4e>
 800abcc:	2304      	movs	r3, #4
 800abce:	75fb      	strb	r3, [r7, #23]
 800abd0:	e028      	b.n	800ac24 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	330b      	adds	r3, #11
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a1b      	ldr	r3, [r3, #32]
 800abe8:	330b      	adds	r3, #11
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	f003 0308 	and.w	r3, r3, #8
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10a      	bne.n	800ac0a <dir_find+0x86>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6a18      	ldr	r0, [r3, #32]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	3324      	adds	r3, #36	@ 0x24
 800abfc:	220b      	movs	r2, #11
 800abfe:	4619      	mov	r1, r3
 800ac00:	f7ff f82e 	bl	8009c60 <mem_cmp>
 800ac04:	4603      	mov	r3, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00b      	beq.n	800ac22 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f7ff fe11 	bl	800a834 <dir_next>
 800ac12:	4603      	mov	r3, r0
 800ac14:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ac16:	7dfb      	ldrb	r3, [r7, #23]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d0c5      	beq.n	800aba8 <dir_find+0x24>
 800ac1c:	e002      	b.n	800ac24 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ac1e:	bf00      	nop
 800ac20:	e000      	b.n	800ac24 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ac22:	bf00      	nop

	return res;
 800ac24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3718      	adds	r7, #24
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ac3c:	2101      	movs	r1, #1
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7ff febd 	bl	800a9be <dir_alloc>
 800ac44:	4603      	mov	r3, r0
 800ac46:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d11c      	bne.n	800ac88 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	69db      	ldr	r3, [r3, #28]
 800ac52:	4619      	mov	r1, r3
 800ac54:	68b8      	ldr	r0, [r7, #8]
 800ac56:	f7ff f9f5 	bl	800a044 <move_window>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d111      	bne.n	800ac88 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a1b      	ldr	r3, [r3, #32]
 800ac68:	2220      	movs	r2, #32
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fe ffdc 	bl	8009c2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a18      	ldr	r0, [r3, #32]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	3324      	adds	r3, #36	@ 0x24
 800ac7a:	220b      	movs	r2, #11
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	f7fe ffb3 	bl	8009be8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2201      	movs	r2, #1
 800ac86:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ac88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b084      	sub	sp, #16
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	69db      	ldr	r3, [r3, #28]
 800aca4:	4619      	mov	r1, r3
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f7ff f9cc 	bl	800a044 <move_window>
 800acac:	4603      	mov	r3, r0
 800acae:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800acb0:	7afb      	ldrb	r3, [r7, #11]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d106      	bne.n	800acc4 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	22e5      	movs	r2, #229	@ 0xe5
 800acbc:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2201      	movs	r2, #1
 800acc2:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800acc4:	7afb      	ldrb	r3, [r7, #11]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
	...

0800acd0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b088      	sub	sp, #32
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	60fb      	str	r3, [r7, #12]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	3324      	adds	r3, #36	@ 0x24
 800ace4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ace6:	220b      	movs	r2, #11
 800ace8:	2120      	movs	r1, #32
 800acea:	68b8      	ldr	r0, [r7, #8]
 800acec:	f7fe ff9d 	bl	8009c2a <mem_set>
	si = i = 0; ni = 8;
 800acf0:	2300      	movs	r3, #0
 800acf2:	613b      	str	r3, [r7, #16]
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	61fb      	str	r3, [r7, #28]
 800acf8:	2308      	movs	r3, #8
 800acfa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	61fa      	str	r2, [r7, #28]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	4413      	add	r3, r2
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ad0a:	7efb      	ldrb	r3, [r7, #27]
 800ad0c:	2b20      	cmp	r3, #32
 800ad0e:	d94e      	bls.n	800adae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ad10:	7efb      	ldrb	r3, [r7, #27]
 800ad12:	2b2f      	cmp	r3, #47	@ 0x2f
 800ad14:	d006      	beq.n	800ad24 <create_name+0x54>
 800ad16:	7efb      	ldrb	r3, [r7, #27]
 800ad18:	2b5c      	cmp	r3, #92	@ 0x5c
 800ad1a:	d110      	bne.n	800ad3e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ad1c:	e002      	b.n	800ad24 <create_name+0x54>
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	3301      	adds	r3, #1
 800ad22:	61fb      	str	r3, [r7, #28]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	4413      	add	r3, r2
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ad2e:	d0f6      	beq.n	800ad1e <create_name+0x4e>
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	4413      	add	r3, r2
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	2b5c      	cmp	r3, #92	@ 0x5c
 800ad3a:	d0f0      	beq.n	800ad1e <create_name+0x4e>
			break;
 800ad3c:	e038      	b.n	800adb0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ad3e:	7efb      	ldrb	r3, [r7, #27]
 800ad40:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad42:	d003      	beq.n	800ad4c <create_name+0x7c>
 800ad44:	693a      	ldr	r2, [r7, #16]
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d30c      	bcc.n	800ad66 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2b0b      	cmp	r3, #11
 800ad50:	d002      	beq.n	800ad58 <create_name+0x88>
 800ad52:	7efb      	ldrb	r3, [r7, #27]
 800ad54:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad56:	d001      	beq.n	800ad5c <create_name+0x8c>
 800ad58:	2306      	movs	r3, #6
 800ad5a:	e044      	b.n	800ade6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ad5c:	2308      	movs	r3, #8
 800ad5e:	613b      	str	r3, [r7, #16]
 800ad60:	230b      	movs	r3, #11
 800ad62:	617b      	str	r3, [r7, #20]
			continue;
 800ad64:	e022      	b.n	800adac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ad66:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	da04      	bge.n	800ad78 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ad6e:	7efb      	ldrb	r3, [r7, #27]
 800ad70:	3b80      	subs	r3, #128	@ 0x80
 800ad72:	4a1f      	ldr	r2, [pc, #124]	@ (800adf0 <create_name+0x120>)
 800ad74:	5cd3      	ldrb	r3, [r2, r3]
 800ad76:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ad78:	7efb      	ldrb	r3, [r7, #27]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	481d      	ldr	r0, [pc, #116]	@ (800adf4 <create_name+0x124>)
 800ad7e:	f7fe ff96 	bl	8009cae <chk_chr>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <create_name+0xbc>
 800ad88:	2306      	movs	r3, #6
 800ad8a:	e02c      	b.n	800ade6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ad8c:	7efb      	ldrb	r3, [r7, #27]
 800ad8e:	2b60      	cmp	r3, #96	@ 0x60
 800ad90:	d905      	bls.n	800ad9e <create_name+0xce>
 800ad92:	7efb      	ldrb	r3, [r7, #27]
 800ad94:	2b7a      	cmp	r3, #122	@ 0x7a
 800ad96:	d802      	bhi.n	800ad9e <create_name+0xce>
 800ad98:	7efb      	ldrb	r3, [r7, #27]
 800ad9a:	3b20      	subs	r3, #32
 800ad9c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	1c5a      	adds	r2, r3, #1
 800ada2:	613a      	str	r2, [r7, #16]
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	4413      	add	r3, r2
 800ada8:	7efa      	ldrb	r2, [r7, #27]
 800adaa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800adac:	e7a6      	b.n	800acfc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800adae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	441a      	add	r2, r3
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d101      	bne.n	800adc4 <create_name+0xf4>
 800adc0:	2306      	movs	r3, #6
 800adc2:	e010      	b.n	800ade6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2be5      	cmp	r3, #229	@ 0xe5
 800adca:	d102      	bne.n	800add2 <create_name+0x102>
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2205      	movs	r2, #5
 800add0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800add2:	7efb      	ldrb	r3, [r7, #27]
 800add4:	2b20      	cmp	r3, #32
 800add6:	d801      	bhi.n	800addc <create_name+0x10c>
 800add8:	2204      	movs	r2, #4
 800adda:	e000      	b.n	800adde <create_name+0x10e>
 800addc:	2200      	movs	r2, #0
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	330b      	adds	r3, #11
 800ade2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ade4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3720      	adds	r7, #32
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	0800da34 	.word	0x0800da34
 800adf4:	0800cc5c 	.word	0x0800cc5c

0800adf8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ae0c:	e002      	b.n	800ae14 <follow_path+0x1c>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	3301      	adds	r3, #1
 800ae12:	603b      	str	r3, [r7, #0]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	2b2f      	cmp	r3, #47	@ 0x2f
 800ae1a:	d0f8      	beq.n	800ae0e <follow_path+0x16>
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	2b5c      	cmp	r3, #92	@ 0x5c
 800ae22:	d0f4      	beq.n	800ae0e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	2200      	movs	r2, #0
 800ae28:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	2b1f      	cmp	r3, #31
 800ae30:	d80a      	bhi.n	800ae48 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2280      	movs	r2, #128	@ 0x80
 800ae36:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff fc7e 	bl	800a73e <dir_sdi>
 800ae42:	4603      	mov	r3, r0
 800ae44:	75fb      	strb	r3, [r7, #23]
 800ae46:	e043      	b.n	800aed0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae48:	463b      	mov	r3, r7
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f7ff ff3f 	bl	800acd0 <create_name>
 800ae52:	4603      	mov	r3, r0
 800ae54:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ae56:	7dfb      	ldrb	r3, [r7, #23]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d134      	bne.n	800aec6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f7ff fe91 	bl	800ab84 <dir_find>
 800ae62:	4603      	mov	r3, r0
 800ae64:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ae6c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ae6e:	7dfb      	ldrb	r3, [r7, #23]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00a      	beq.n	800ae8a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
 800ae76:	2b04      	cmp	r3, #4
 800ae78:	d127      	bne.n	800aeca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ae7a:	7afb      	ldrb	r3, [r7, #11]
 800ae7c:	f003 0304 	and.w	r3, r3, #4
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d122      	bne.n	800aeca <follow_path+0xd2>
 800ae84:	2305      	movs	r3, #5
 800ae86:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ae88:	e01f      	b.n	800aeca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae8a:	7afb      	ldrb	r3, [r7, #11]
 800ae8c:	f003 0304 	and.w	r3, r3, #4
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d11c      	bne.n	800aece <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	799b      	ldrb	r3, [r3, #6]
 800ae98:	f003 0310 	and.w	r3, r3, #16
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d102      	bne.n	800aea6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800aea0:	2305      	movs	r3, #5
 800aea2:	75fb      	strb	r3, [r7, #23]
 800aea4:	e014      	b.n	800aed0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	695b      	ldr	r3, [r3, #20]
 800aeb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeb4:	4413      	add	r3, r2
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	f7ff fdc7 	bl	800aa4c <ld_clust>
 800aebe:	4602      	mov	r2, r0
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aec4:	e7c0      	b.n	800ae48 <follow_path+0x50>
			if (res != FR_OK) break;
 800aec6:	bf00      	nop
 800aec8:	e002      	b.n	800aed0 <follow_path+0xd8>
				break;
 800aeca:	bf00      	nop
 800aecc:	e000      	b.n	800aed0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aece:	bf00      	nop
			}
		}
	}

	return res;
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aeda:	b480      	push	{r7}
 800aedc:	b087      	sub	sp, #28
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800aee2:	f04f 33ff 	mov.w	r3, #4294967295
 800aee6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d031      	beq.n	800af54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	617b      	str	r3, [r7, #20]
 800aef6:	e002      	b.n	800aefe <get_ldnumber+0x24>
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	3301      	adds	r3, #1
 800aefc:	617b      	str	r3, [r7, #20]
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	2b20      	cmp	r3, #32
 800af04:	d903      	bls.n	800af0e <get_ldnumber+0x34>
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	2b3a      	cmp	r3, #58	@ 0x3a
 800af0c:	d1f4      	bne.n	800aef8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	2b3a      	cmp	r3, #58	@ 0x3a
 800af14:	d11c      	bne.n	800af50 <get_ldnumber+0x76>
			tp = *path;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	1c5a      	adds	r2, r3, #1
 800af20:	60fa      	str	r2, [r7, #12]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	3b30      	subs	r3, #48	@ 0x30
 800af26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	2b09      	cmp	r3, #9
 800af2c:	d80e      	bhi.n	800af4c <get_ldnumber+0x72>
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	429a      	cmp	r2, r3
 800af34:	d10a      	bne.n	800af4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d107      	bne.n	800af4c <get_ldnumber+0x72>
					vol = (int)i;
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	3301      	adds	r3, #1
 800af44:	617b      	str	r3, [r7, #20]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	697a      	ldr	r2, [r7, #20]
 800af4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	e002      	b.n	800af56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800af50:	2300      	movs	r3, #0
 800af52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800af54:	693b      	ldr	r3, [r7, #16]
}
 800af56:	4618      	mov	r0, r3
 800af58:	371c      	adds	r7, #28
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
	...

0800af64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	70da      	strb	r2, [r3, #3]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f04f 32ff 	mov.w	r2, #4294967295
 800af7a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7ff f860 	bl	800a044 <move_window>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <check_fs+0x2a>
 800af8a:	2304      	movs	r3, #4
 800af8c:	e038      	b.n	800b000 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	3330      	adds	r3, #48	@ 0x30
 800af92:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe fda4 	bl	8009ae4 <ld_word>
 800af9c:	4603      	mov	r3, r0
 800af9e:	461a      	mov	r2, r3
 800afa0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d001      	beq.n	800afac <check_fs+0x48>
 800afa8:	2303      	movs	r3, #3
 800afaa:	e029      	b.n	800b000 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800afb2:	2be9      	cmp	r3, #233	@ 0xe9
 800afb4:	d009      	beq.n	800afca <check_fs+0x66>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800afbc:	2beb      	cmp	r3, #235	@ 0xeb
 800afbe:	d11e      	bne.n	800affe <check_fs+0x9a>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800afc6:	2b90      	cmp	r3, #144	@ 0x90
 800afc8:	d119      	bne.n	800affe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	3330      	adds	r3, #48	@ 0x30
 800afce:	3336      	adds	r3, #54	@ 0x36
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7fe fd9f 	bl	8009b14 <ld_dword>
 800afd6:	4603      	mov	r3, r0
 800afd8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800afdc:	4a0a      	ldr	r2, [pc, #40]	@ (800b008 <check_fs+0xa4>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d101      	bne.n	800afe6 <check_fs+0x82>
 800afe2:	2300      	movs	r3, #0
 800afe4:	e00c      	b.n	800b000 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	3330      	adds	r3, #48	@ 0x30
 800afea:	3352      	adds	r3, #82	@ 0x52
 800afec:	4618      	mov	r0, r3
 800afee:	f7fe fd91 	bl	8009b14 <ld_dword>
 800aff2:	4603      	mov	r3, r0
 800aff4:	4a05      	ldr	r2, [pc, #20]	@ (800b00c <check_fs+0xa8>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d101      	bne.n	800affe <check_fs+0x9a>
 800affa:	2300      	movs	r3, #0
 800affc:	e000      	b.n	800b000 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800affe:	2302      	movs	r3, #2
}
 800b000:	4618      	mov	r0, r3
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	00544146 	.word	0x00544146
 800b00c:	33544146 	.word	0x33544146

0800b010 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b096      	sub	sp, #88	@ 0x58
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	4613      	mov	r3, r2
 800b01c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f7ff ff58 	bl	800aeda <get_ldnumber>
 800b02a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b02c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b02e:	2b00      	cmp	r3, #0
 800b030:	da01      	bge.n	800b036 <find_volume+0x26>
 800b032:	230b      	movs	r3, #11
 800b034:	e22d      	b.n	800b492 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b036:	4aa1      	ldr	r2, [pc, #644]	@ (800b2bc <find_volume+0x2ac>)
 800b038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b03a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b03e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b042:	2b00      	cmp	r3, #0
 800b044:	d101      	bne.n	800b04a <find_volume+0x3a>
 800b046:	230c      	movs	r3, #12
 800b048:	e223      	b.n	800b492 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b04e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b050:	79fb      	ldrb	r3, [r7, #7]
 800b052:	f023 0301 	bic.w	r3, r3, #1
 800b056:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d01a      	beq.n	800b096 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b062:	785b      	ldrb	r3, [r3, #1]
 800b064:	4618      	mov	r0, r3
 800b066:	f7fe fc9d 	bl	80099a4 <disk_status>
 800b06a:	4603      	mov	r3, r0
 800b06c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b070:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d10c      	bne.n	800b096 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b07c:	79fb      	ldrb	r3, [r7, #7]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d007      	beq.n	800b092 <find_volume+0x82>
 800b082:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b086:	f003 0304 	and.w	r3, r3, #4
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b08e:	230a      	movs	r3, #10
 800b090:	e1ff      	b.n	800b492 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b092:	2300      	movs	r3, #0
 800b094:	e1fd      	b.n	800b492 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b098:	2200      	movs	r2, #0
 800b09a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b09c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b09e:	b2da      	uxtb	r2, r3
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a6:	785b      	ldrb	r3, [r3, #1]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7fe fc95 	bl	80099d8 <disk_initialize>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b0b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	e1e6      	b.n	800b492 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b0c4:	79fb      	ldrb	r3, [r7, #7]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d007      	beq.n	800b0da <find_volume+0xca>
 800b0ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b0ce:	f003 0304 	and.w	r3, r3, #4
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b0d6:	230a      	movs	r3, #10
 800b0d8:	e1db      	b.n	800b492 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b0de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b0e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b0e2:	f7ff ff3f 	bl	800af64 <check_fs>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b0ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b0f0:	2b02      	cmp	r3, #2
 800b0f2:	d149      	bne.n	800b188 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0f8:	e01e      	b.n	800b138 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b102:	011b      	lsls	r3, r3, #4
 800b104:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b108:	4413      	add	r3, r2
 800b10a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10e:	3304      	adds	r3, #4
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d006      	beq.n	800b124 <find_volume+0x114>
 800b116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b118:	3308      	adds	r3, #8
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fe fcfa 	bl	8009b14 <ld_dword>
 800b120:	4602      	mov	r2, r0
 800b122:	e000      	b.n	800b126 <find_volume+0x116>
 800b124:	2200      	movs	r2, #0
 800b126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	3358      	adds	r3, #88	@ 0x58
 800b12c:	443b      	add	r3, r7
 800b12e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b134:	3301      	adds	r3, #1
 800b136:	643b      	str	r3, [r7, #64]	@ 0x40
 800b138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	d9dd      	bls.n	800b0fa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b13e:	2300      	movs	r3, #0
 800b140:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b144:	2b00      	cmp	r3, #0
 800b146:	d002      	beq.n	800b14e <find_volume+0x13e>
 800b148:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b14a:	3b01      	subs	r3, #1
 800b14c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b14e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	3358      	adds	r3, #88	@ 0x58
 800b154:	443b      	add	r3, r7
 800b156:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b15a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b15c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d005      	beq.n	800b16e <find_volume+0x15e>
 800b162:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b164:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b166:	f7ff fefd 	bl	800af64 <check_fs>
 800b16a:	4603      	mov	r3, r0
 800b16c:	e000      	b.n	800b170 <find_volume+0x160>
 800b16e:	2303      	movs	r3, #3
 800b170:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b174:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d905      	bls.n	800b188 <find_volume+0x178>
 800b17c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b17e:	3301      	adds	r3, #1
 800b180:	643b      	str	r3, [r7, #64]	@ 0x40
 800b182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b184:	2b03      	cmp	r3, #3
 800b186:	d9e2      	bls.n	800b14e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b188:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b18c:	2b04      	cmp	r3, #4
 800b18e:	d101      	bne.n	800b194 <find_volume+0x184>
 800b190:	2301      	movs	r3, #1
 800b192:	e17e      	b.n	800b492 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b194:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d901      	bls.n	800b1a0 <find_volume+0x190>
 800b19c:	230d      	movs	r3, #13
 800b19e:	e178      	b.n	800b492 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a2:	3330      	adds	r3, #48	@ 0x30
 800b1a4:	330b      	adds	r3, #11
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fe fc9c 	bl	8009ae4 <ld_word>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1b2:	d001      	beq.n	800b1b8 <find_volume+0x1a8>
 800b1b4:	230d      	movs	r3, #13
 800b1b6:	e16c      	b.n	800b492 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ba:	3330      	adds	r3, #48	@ 0x30
 800b1bc:	3316      	adds	r3, #22
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7fe fc90 	bl	8009ae4 <ld_word>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b1c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d106      	bne.n	800b1dc <find_volume+0x1cc>
 800b1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d0:	3330      	adds	r3, #48	@ 0x30
 800b1d2:	3324      	adds	r3, #36	@ 0x24
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7fe fc9d 	bl	8009b14 <ld_dword>
 800b1da:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b1e0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ee:	789b      	ldrb	r3, [r3, #2]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d005      	beq.n	800b200 <find_volume+0x1f0>
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f6:	789b      	ldrb	r3, [r3, #2]
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d001      	beq.n	800b200 <find_volume+0x1f0>
 800b1fc:	230d      	movs	r3, #13
 800b1fe:	e148      	b.n	800b492 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b202:	789b      	ldrb	r3, [r3, #2]
 800b204:	461a      	mov	r2, r3
 800b206:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b208:	fb02 f303 	mul.w	r3, r2, r3
 800b20c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b214:	461a      	mov	r2, r3
 800b216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b218:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21c:	895b      	ldrh	r3, [r3, #10]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d008      	beq.n	800b234 <find_volume+0x224>
 800b222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b224:	895b      	ldrh	r3, [r3, #10]
 800b226:	461a      	mov	r2, r3
 800b228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b22a:	895b      	ldrh	r3, [r3, #10]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	4013      	ands	r3, r2
 800b230:	2b00      	cmp	r3, #0
 800b232:	d001      	beq.n	800b238 <find_volume+0x228>
 800b234:	230d      	movs	r3, #13
 800b236:	e12c      	b.n	800b492 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23a:	3330      	adds	r3, #48	@ 0x30
 800b23c:	3311      	adds	r3, #17
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fe fc50 	bl	8009ae4 <ld_word>
 800b244:	4603      	mov	r3, r0
 800b246:	461a      	mov	r2, r3
 800b248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b24c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24e:	891b      	ldrh	r3, [r3, #8]
 800b250:	f003 030f 	and.w	r3, r3, #15
 800b254:	b29b      	uxth	r3, r3
 800b256:	2b00      	cmp	r3, #0
 800b258:	d001      	beq.n	800b25e <find_volume+0x24e>
 800b25a:	230d      	movs	r3, #13
 800b25c:	e119      	b.n	800b492 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b260:	3330      	adds	r3, #48	@ 0x30
 800b262:	3313      	adds	r3, #19
 800b264:	4618      	mov	r0, r3
 800b266:	f7fe fc3d 	bl	8009ae4 <ld_word>
 800b26a:	4603      	mov	r3, r0
 800b26c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b26e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b270:	2b00      	cmp	r3, #0
 800b272:	d106      	bne.n	800b282 <find_volume+0x272>
 800b274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b276:	3330      	adds	r3, #48	@ 0x30
 800b278:	3320      	adds	r3, #32
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fe fc4a 	bl	8009b14 <ld_dword>
 800b280:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b284:	3330      	adds	r3, #48	@ 0x30
 800b286:	330e      	adds	r3, #14
 800b288:	4618      	mov	r0, r3
 800b28a:	f7fe fc2b 	bl	8009ae4 <ld_word>
 800b28e:	4603      	mov	r3, r0
 800b290:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b292:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <find_volume+0x28c>
 800b298:	230d      	movs	r3, #13
 800b29a:	e0fa      	b.n	800b492 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b29c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b29e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2a0:	4413      	add	r3, r2
 800b2a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2a4:	8912      	ldrh	r2, [r2, #8]
 800b2a6:	0912      	lsrs	r2, r2, #4
 800b2a8:	b292      	uxth	r2, r2
 800b2aa:	4413      	add	r3, r2
 800b2ac:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b2ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d204      	bcs.n	800b2c0 <find_volume+0x2b0>
 800b2b6:	230d      	movs	r3, #13
 800b2b8:	e0eb      	b.n	800b492 <find_volume+0x482>
 800b2ba:	bf00      	nop
 800b2bc:	200005a4 	.word	0x200005a4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b2c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2c8:	8952      	ldrh	r2, [r2, #10]
 800b2ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2ce:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d101      	bne.n	800b2da <find_volume+0x2ca>
 800b2d6:	230d      	movs	r3, #13
 800b2d8:	e0db      	b.n	800b492 <find_volume+0x482>
		fmt = FS_FAT32;
 800b2da:	2303      	movs	r3, #3
 800b2dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d802      	bhi.n	800b2f0 <find_volume+0x2e0>
 800b2ea:	2302      	movs	r3, #2
 800b2ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d802      	bhi.n	800b300 <find_volume+0x2f0>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b302:	1c9a      	adds	r2, r3, #2
 800b304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b306:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b30c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b30e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b312:	441a      	add	r2, r3
 800b314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b316:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b318:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b31c:	441a      	add	r2, r3
 800b31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b320:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b322:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b326:	2b03      	cmp	r3, #3
 800b328:	d11e      	bne.n	800b368 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32c:	3330      	adds	r3, #48	@ 0x30
 800b32e:	332a      	adds	r3, #42	@ 0x2a
 800b330:	4618      	mov	r0, r3
 800b332:	f7fe fbd7 	bl	8009ae4 <ld_word>
 800b336:	4603      	mov	r3, r0
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <find_volume+0x330>
 800b33c:	230d      	movs	r3, #13
 800b33e:	e0a8      	b.n	800b492 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b342:	891b      	ldrh	r3, [r3, #8]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d001      	beq.n	800b34c <find_volume+0x33c>
 800b348:	230d      	movs	r3, #13
 800b34a:	e0a2      	b.n	800b492 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34e:	3330      	adds	r3, #48	@ 0x30
 800b350:	332c      	adds	r3, #44	@ 0x2c
 800b352:	4618      	mov	r0, r3
 800b354:	f7fe fbde 	bl	8009b14 <ld_dword>
 800b358:	4602      	mov	r2, r0
 800b35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b35c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	647b      	str	r3, [r7, #68]	@ 0x44
 800b366:	e01f      	b.n	800b3a8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36a:	891b      	ldrh	r3, [r3, #8]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d101      	bne.n	800b374 <find_volume+0x364>
 800b370:	230d      	movs	r3, #13
 800b372:	e08e      	b.n	800b492 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b376:	6a1a      	ldr	r2, [r3, #32]
 800b378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b37a:	441a      	add	r2, r3
 800b37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b380:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b384:	2b02      	cmp	r3, #2
 800b386:	d103      	bne.n	800b390 <find_volume+0x380>
 800b388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38a:	695b      	ldr	r3, [r3, #20]
 800b38c:	005b      	lsls	r3, r3, #1
 800b38e:	e00a      	b.n	800b3a6 <find_volume+0x396>
 800b390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b392:	695a      	ldr	r2, [r3, #20]
 800b394:	4613      	mov	r3, r2
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	4413      	add	r3, r2
 800b39a:	085a      	lsrs	r2, r3, #1
 800b39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39e:	695b      	ldr	r3, [r3, #20]
 800b3a0:	f003 0301 	and.w	r3, r3, #1
 800b3a4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b3a6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3aa:	699a      	ldr	r2, [r3, #24]
 800b3ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3ae:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b3b2:	0a5b      	lsrs	r3, r3, #9
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d201      	bcs.n	800b3bc <find_volume+0x3ac>
 800b3b8:	230d      	movs	r3, #13
 800b3ba:	e06a      	b.n	800b492 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3be:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c2:	611a      	str	r2, [r3, #16]
 800b3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c6:	691a      	ldr	r2, [r3, #16]
 800b3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ca:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ce:	2280      	movs	r2, #128	@ 0x80
 800b3d0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b3d2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b3d6:	2b03      	cmp	r3, #3
 800b3d8:	d149      	bne.n	800b46e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3dc:	3330      	adds	r3, #48	@ 0x30
 800b3de:	3330      	adds	r3, #48	@ 0x30
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7fe fb7f 	bl	8009ae4 <ld_word>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d140      	bne.n	800b46e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b3ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b3f4:	f7fe fe26 	bl	800a044 <move_window>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d137      	bne.n	800b46e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b400:	2200      	movs	r2, #0
 800b402:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b406:	3330      	adds	r3, #48	@ 0x30
 800b408:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7fe fb69 	bl	8009ae4 <ld_word>
 800b412:	4603      	mov	r3, r0
 800b414:	461a      	mov	r2, r3
 800b416:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d127      	bne.n	800b46e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b420:	3330      	adds	r3, #48	@ 0x30
 800b422:	4618      	mov	r0, r3
 800b424:	f7fe fb76 	bl	8009b14 <ld_dword>
 800b428:	4603      	mov	r3, r0
 800b42a:	4a1c      	ldr	r2, [pc, #112]	@ (800b49c <find_volume+0x48c>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d11e      	bne.n	800b46e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b432:	3330      	adds	r3, #48	@ 0x30
 800b434:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fe fb6b 	bl	8009b14 <ld_dword>
 800b43e:	4603      	mov	r3, r0
 800b440:	4a17      	ldr	r2, [pc, #92]	@ (800b4a0 <find_volume+0x490>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d113      	bne.n	800b46e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b448:	3330      	adds	r3, #48	@ 0x30
 800b44a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fe fb60 	bl	8009b14 <ld_dword>
 800b454:	4602      	mov	r2, r0
 800b456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b458:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b45c:	3330      	adds	r3, #48	@ 0x30
 800b45e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b462:	4618      	mov	r0, r3
 800b464:	f7fe fb56 	bl	8009b14 <ld_dword>
 800b468:	4602      	mov	r2, r0
 800b46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b46c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b470:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b474:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b476:	4b0b      	ldr	r3, [pc, #44]	@ (800b4a4 <find_volume+0x494>)
 800b478:	881b      	ldrh	r3, [r3, #0]
 800b47a:	3301      	adds	r3, #1
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	4b09      	ldr	r3, [pc, #36]	@ (800b4a4 <find_volume+0x494>)
 800b480:	801a      	strh	r2, [r3, #0]
 800b482:	4b08      	ldr	r3, [pc, #32]	@ (800b4a4 <find_volume+0x494>)
 800b484:	881a      	ldrh	r2, [r3, #0]
 800b486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b488:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b48a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b48c:	f7fe fd72 	bl	8009f74 <clear_lock>
#endif
	return FR_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3758      	adds	r7, #88	@ 0x58
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	41615252 	.word	0x41615252
 800b4a0:	61417272 	.word	0x61417272
 800b4a4:	200005a8 	.word	0x200005a8

0800b4a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b4b2:	2309      	movs	r3, #9
 800b4b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d01c      	beq.n	800b4f6 <validate+0x4e>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d018      	beq.n	800b4f6 <validate+0x4e>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d013      	beq.n	800b4f6 <validate+0x4e>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	889a      	ldrh	r2, [r3, #4]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	88db      	ldrh	r3, [r3, #6]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d10c      	bne.n	800b4f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	785b      	ldrb	r3, [r3, #1]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fe fa5e 	bl	80099a4 <disk_status>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	f003 0301 	and.w	r3, r3, #1
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d101      	bne.n	800b4f6 <validate+0x4e>
			res = FR_OK;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b4f6:	7bfb      	ldrb	r3, [r7, #15]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d102      	bne.n	800b502 <validate+0x5a>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	e000      	b.n	800b504 <validate+0x5c>
 800b502:	2300      	movs	r3, #0
 800b504:	683a      	ldr	r2, [r7, #0]
 800b506:	6013      	str	r3, [r2, #0]
	return res;
 800b508:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
	...

0800b514 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b088      	sub	sp, #32
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	4613      	mov	r3, r2
 800b520:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b526:	f107 0310 	add.w	r3, r7, #16
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7ff fcd5 	bl	800aeda <get_ldnumber>
 800b530:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	2b00      	cmp	r3, #0
 800b536:	da01      	bge.n	800b53c <f_mount+0x28>
 800b538:	230b      	movs	r3, #11
 800b53a:	e02b      	b.n	800b594 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b53c:	4a17      	ldr	r2, [pc, #92]	@ (800b59c <f_mount+0x88>)
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b544:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d005      	beq.n	800b558 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b54c:	69b8      	ldr	r0, [r7, #24]
 800b54e:	f7fe fd11 	bl	8009f74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	2200      	movs	r2, #0
 800b556:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d002      	beq.n	800b564 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2200      	movs	r2, #0
 800b562:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	490d      	ldr	r1, [pc, #52]	@ (800b59c <f_mount+0x88>)
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <f_mount+0x66>
 800b574:	79fb      	ldrb	r3, [r7, #7]
 800b576:	2b01      	cmp	r3, #1
 800b578:	d001      	beq.n	800b57e <f_mount+0x6a>
 800b57a:	2300      	movs	r3, #0
 800b57c:	e00a      	b.n	800b594 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b57e:	f107 010c 	add.w	r1, r7, #12
 800b582:	f107 0308 	add.w	r3, r7, #8
 800b586:	2200      	movs	r2, #0
 800b588:	4618      	mov	r0, r3
 800b58a:	f7ff fd41 	bl	800b010 <find_volume>
 800b58e:	4603      	mov	r3, r0
 800b590:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b592:	7dfb      	ldrb	r3, [r7, #23]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3720      	adds	r7, #32
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	200005a4 	.word	0x200005a4

0800b5a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b098      	sub	sp, #96	@ 0x60
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <f_open+0x18>
 800b5b4:	2309      	movs	r3, #9
 800b5b6:	e1a9      	b.n	800b90c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b5b8:	79fb      	ldrb	r3, [r7, #7]
 800b5ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b5be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b5c0:	79fa      	ldrb	r2, [r7, #7]
 800b5c2:	f107 0110 	add.w	r1, r7, #16
 800b5c6:	f107 0308 	add.w	r3, r7, #8
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7ff fd20 	bl	800b010 <find_volume>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b5d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	f040 818d 	bne.w	800b8fa <f_open+0x35a>
		dj.obj.fs = fs;
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	f107 0314 	add.w	r3, r7, #20
 800b5ea:	4611      	mov	r1, r2
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7ff fc03 	bl	800adf8 <follow_path>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b5f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d118      	bne.n	800b632 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b600:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b604:	b25b      	sxtb	r3, r3
 800b606:	2b00      	cmp	r3, #0
 800b608:	da03      	bge.n	800b612 <f_open+0x72>
				res = FR_INVALID_NAME;
 800b60a:	2306      	movs	r3, #6
 800b60c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b610:	e00f      	b.n	800b632 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b612:	79fb      	ldrb	r3, [r7, #7]
 800b614:	2b01      	cmp	r3, #1
 800b616:	bf8c      	ite	hi
 800b618:	2301      	movhi	r3, #1
 800b61a:	2300      	movls	r3, #0
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	461a      	mov	r2, r3
 800b620:	f107 0314 	add.w	r3, r7, #20
 800b624:	4611      	mov	r1, r2
 800b626:	4618      	mov	r0, r3
 800b628:	f7fe fb5c 	bl	8009ce4 <chk_lock>
 800b62c:	4603      	mov	r3, r0
 800b62e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b632:	79fb      	ldrb	r3, [r7, #7]
 800b634:	f003 031c 	and.w	r3, r3, #28
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d07f      	beq.n	800b73c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b63c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b640:	2b00      	cmp	r3, #0
 800b642:	d017      	beq.n	800b674 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b644:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b648:	2b04      	cmp	r3, #4
 800b64a:	d10e      	bne.n	800b66a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b64c:	f7fe fba6 	bl	8009d9c <enq_lock>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d006      	beq.n	800b664 <f_open+0xc4>
 800b656:	f107 0314 	add.w	r3, r7, #20
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7ff fae7 	bl	800ac2e <dir_register>
 800b660:	4603      	mov	r3, r0
 800b662:	e000      	b.n	800b666 <f_open+0xc6>
 800b664:	2312      	movs	r3, #18
 800b666:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b66a:	79fb      	ldrb	r3, [r7, #7]
 800b66c:	f043 0308 	orr.w	r3, r3, #8
 800b670:	71fb      	strb	r3, [r7, #7]
 800b672:	e010      	b.n	800b696 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b674:	7ebb      	ldrb	r3, [r7, #26]
 800b676:	f003 0311 	and.w	r3, r3, #17
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d003      	beq.n	800b686 <f_open+0xe6>
					res = FR_DENIED;
 800b67e:	2307      	movs	r3, #7
 800b680:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b684:	e007      	b.n	800b696 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b686:	79fb      	ldrb	r3, [r7, #7]
 800b688:	f003 0304 	and.w	r3, r3, #4
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <f_open+0xf6>
 800b690:	2308      	movs	r3, #8
 800b692:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b696:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d168      	bne.n	800b770 <f_open+0x1d0>
 800b69e:	79fb      	ldrb	r3, [r7, #7]
 800b6a0:	f003 0308 	and.w	r3, r3, #8
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d063      	beq.n	800b770 <f_open+0x1d0>
				dw = GET_FATTIME();
 800b6a8:	f7fe f810 	bl	80096cc <get_fattime>
 800b6ac:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b6ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6b0:	330e      	adds	r3, #14
 800b6b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7fe fa6b 	bl	8009b90 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6bc:	3316      	adds	r3, #22
 800b6be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7fe fa65 	bl	8009b90 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6c8:	330b      	adds	r3, #11
 800b6ca:	2220      	movs	r2, #32
 800b6cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7ff f9b9 	bl	800aa4c <ld_clust>
 800b6da:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff f9d1 	bl	800aa8a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b6e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ea:	331c      	adds	r3, #28
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe fa4e 	bl	8009b90 <st_dword>
					fs->wflag = 1;
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b6fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d037      	beq.n	800b770 <f_open+0x1d0>
						dw = fs->winsect;
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b704:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b706:	f107 0314 	add.w	r3, r7, #20
 800b70a:	2200      	movs	r2, #0
 800b70c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fe fee4 	bl	800a4dc <remove_chain>
 800b714:	4603      	mov	r3, r0
 800b716:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b71a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d126      	bne.n	800b770 <f_open+0x1d0>
							res = move_window(fs, dw);
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b726:	4618      	mov	r0, r3
 800b728:	f7fe fc8c 	bl	800a044 <move_window>
 800b72c:	4603      	mov	r3, r0
 800b72e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b736:	3a01      	subs	r2, #1
 800b738:	60da      	str	r2, [r3, #12]
 800b73a:	e019      	b.n	800b770 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b73c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b740:	2b00      	cmp	r3, #0
 800b742:	d115      	bne.n	800b770 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b744:	7ebb      	ldrb	r3, [r7, #26]
 800b746:	f003 0310 	and.w	r3, r3, #16
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <f_open+0x1b6>
					res = FR_NO_FILE;
 800b74e:	2304      	movs	r3, #4
 800b750:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b754:	e00c      	b.n	800b770 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b756:	79fb      	ldrb	r3, [r7, #7]
 800b758:	f003 0302 	and.w	r3, r3, #2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d007      	beq.n	800b770 <f_open+0x1d0>
 800b760:	7ebb      	ldrb	r3, [r7, #26]
 800b762:	f003 0301 	and.w	r3, r3, #1
 800b766:	2b00      	cmp	r3, #0
 800b768:	d002      	beq.n	800b770 <f_open+0x1d0>
						res = FR_DENIED;
 800b76a:	2307      	movs	r3, #7
 800b76c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b770:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b774:	2b00      	cmp	r3, #0
 800b776:	d126      	bne.n	800b7c6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b778:	79fb      	ldrb	r3, [r7, #7]
 800b77a:	f003 0308 	and.w	r3, r3, #8
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d003      	beq.n	800b78a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b782:	79fb      	ldrb	r3, [r7, #7]
 800b784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b788:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b792:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b798:	79fb      	ldrb	r3, [r7, #7]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	bf8c      	ite	hi
 800b79e:	2301      	movhi	r3, #1
 800b7a0:	2300      	movls	r3, #0
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	f107 0314 	add.w	r3, r7, #20
 800b7aa:	4611      	mov	r1, r2
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7fe fb17 	bl	8009de0 <inc_lock>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	691b      	ldr	r3, [r3, #16]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d102      	bne.n	800b7c6 <f_open+0x226>
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b7c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f040 8095 	bne.w	800b8fa <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7ff f938 	bl	800aa4c <ld_clust>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b7e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7e4:	331c      	adds	r3, #28
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fe f994 	bl	8009b14 <ld_dword>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b7f8:	693a      	ldr	r2, [r7, #16]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	88da      	ldrh	r2, [r3, #6]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	79fa      	ldrb	r2, [r7, #7]
 800b80a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2200      	movs	r2, #0
 800b810:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2200      	movs	r2, #0
 800b81c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3330      	adds	r3, #48	@ 0x30
 800b822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b826:	2100      	movs	r1, #0
 800b828:	4618      	mov	r0, r3
 800b82a:	f7fe f9fe 	bl	8009c2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b82e:	79fb      	ldrb	r3, [r7, #7]
 800b830:	f003 0320 	and.w	r3, r3, #32
 800b834:	2b00      	cmp	r3, #0
 800b836:	d060      	beq.n	800b8fa <f_open+0x35a>
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d05c      	beq.n	800b8fa <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	68da      	ldr	r2, [r3, #12]
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	895b      	ldrh	r3, [r3, #10]
 800b84c:	025b      	lsls	r3, r3, #9
 800b84e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b85c:	e016      	b.n	800b88c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b862:	4618      	mov	r0, r3
 800b864:	f7fe fca9 	bl	800a1ba <get_fat>
 800b868:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b86a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d802      	bhi.n	800b876 <f_open+0x2d6>
 800b870:	2302      	movs	r3, #2
 800b872:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b876:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87c:	d102      	bne.n	800b884 <f_open+0x2e4>
 800b87e:	2301      	movs	r3, #1
 800b880:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b884:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b888:	1ad3      	subs	r3, r2, r3
 800b88a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b88c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b890:	2b00      	cmp	r3, #0
 800b892:	d103      	bne.n	800b89c <f_open+0x2fc>
 800b894:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b898:	429a      	cmp	r2, r3
 800b89a:	d8e0      	bhi.n	800b85e <f_open+0x2be>
				}
				fp->clust = clst;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b8a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d127      	bne.n	800b8fa <f_open+0x35a>
 800b8aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d022      	beq.n	800b8fa <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7fe fc5f 	bl	800a17c <clust2sect>
 800b8be:	6478      	str	r0, [r7, #68]	@ 0x44
 800b8c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d103      	bne.n	800b8ce <f_open+0x32e>
						res = FR_INT_ERR;
 800b8c6:	2302      	movs	r3, #2
 800b8c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b8cc:	e015      	b.n	800b8fa <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b8ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8d0:	0a5a      	lsrs	r2, r3, #9
 800b8d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8d4:	441a      	add	r2, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	7858      	ldrb	r0, [r3, #1]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6a1a      	ldr	r2, [r3, #32]
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	f7fe f89d 	bl	8009a28 <disk_read>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <f_open+0x35a>
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b8fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d002      	beq.n	800b908 <f_open+0x368>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2200      	movs	r2, #0
 800b906:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b908:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3760      	adds	r7, #96	@ 0x60
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b08e      	sub	sp, #56	@ 0x38
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	60b9      	str	r1, [r7, #8]
 800b91e:	607a      	str	r2, [r7, #4]
 800b920:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	2200      	movs	r2, #0
 800b92a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f107 0214 	add.w	r2, r7, #20
 800b932:	4611      	mov	r1, r2
 800b934:	4618      	mov	r0, r3
 800b936:	f7ff fdb7 	bl	800b4a8 <validate>
 800b93a:	4603      	mov	r3, r0
 800b93c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b940:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b944:	2b00      	cmp	r3, #0
 800b946:	d107      	bne.n	800b958 <f_read+0x44>
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	7d5b      	ldrb	r3, [r3, #21]
 800b94c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b950:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <f_read+0x4a>
 800b958:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b95c:	e115      	b.n	800bb8a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	7d1b      	ldrb	r3, [r3, #20]
 800b962:	f003 0301 	and.w	r3, r3, #1
 800b966:	2b00      	cmp	r3, #0
 800b968:	d101      	bne.n	800b96e <f_read+0x5a>
 800b96a:	2307      	movs	r3, #7
 800b96c:	e10d      	b.n	800bb8a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	68da      	ldr	r2, [r3, #12]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	6a3b      	ldr	r3, [r7, #32]
 800b97e:	429a      	cmp	r2, r3
 800b980:	f240 80fe 	bls.w	800bb80 <f_read+0x26c>
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b988:	e0fa      	b.n	800bb80 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	699b      	ldr	r3, [r3, #24]
 800b98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b992:	2b00      	cmp	r3, #0
 800b994:	f040 80c6 	bne.w	800bb24 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	699b      	ldr	r3, [r3, #24]
 800b99c:	0a5b      	lsrs	r3, r3, #9
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	8952      	ldrh	r2, [r2, #10]
 800b9a2:	3a01      	subs	r2, #1
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d12f      	bne.n	800ba0e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	699b      	ldr	r3, [r3, #24]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d103      	bne.n	800b9be <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	689b      	ldr	r3, [r3, #8]
 800b9ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9bc:	e013      	b.n	800b9e6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d007      	beq.n	800b9d6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f7fe fe82 	bl	800a6d6 <clmt_clust>
 800b9d2:	6338      	str	r0, [r7, #48]	@ 0x30
 800b9d4:	e007      	b.n	800b9e6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	69db      	ldr	r3, [r3, #28]
 800b9dc:	4619      	mov	r1, r3
 800b9de:	4610      	mov	r0, r2
 800b9e0:	f7fe fbeb 	bl	800a1ba <get_fat>
 800b9e4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d804      	bhi.n	800b9f6 <f_read+0xe2>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	2202      	movs	r2, #2
 800b9f0:	755a      	strb	r2, [r3, #21]
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	e0c9      	b.n	800bb8a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fc:	d104      	bne.n	800ba08 <f_read+0xf4>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2201      	movs	r2, #1
 800ba02:	755a      	strb	r2, [r3, #21]
 800ba04:	2301      	movs	r3, #1
 800ba06:	e0c0      	b.n	800bb8a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba0c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ba0e:	697a      	ldr	r2, [r7, #20]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	69db      	ldr	r3, [r3, #28]
 800ba14:	4619      	mov	r1, r3
 800ba16:	4610      	mov	r0, r2
 800ba18:	f7fe fbb0 	bl	800a17c <clust2sect>
 800ba1c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d104      	bne.n	800ba2e <f_read+0x11a>
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2202      	movs	r2, #2
 800ba28:	755a      	strb	r2, [r3, #21]
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	e0ad      	b.n	800bb8a <f_read+0x276>
			sect += csect;
 800ba2e:	69ba      	ldr	r2, [r7, #24]
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	4413      	add	r3, r2
 800ba34:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	0a5b      	lsrs	r3, r3, #9
 800ba3a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ba3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d039      	beq.n	800bab6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ba42:	69fa      	ldr	r2, [r7, #28]
 800ba44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba46:	4413      	add	r3, r2
 800ba48:	697a      	ldr	r2, [r7, #20]
 800ba4a:	8952      	ldrh	r2, [r2, #10]
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d905      	bls.n	800ba5c <f_read+0x148>
					cc = fs->csize - csect;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	895b      	ldrh	r3, [r3, #10]
 800ba54:	461a      	mov	r2, r3
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	7858      	ldrb	r0, [r3, #1]
 800ba60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba62:	69ba      	ldr	r2, [r7, #24]
 800ba64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba66:	f7fd ffdf 	bl	8009a28 <disk_read>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d004      	beq.n	800ba7a <f_read+0x166>
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2201      	movs	r2, #1
 800ba74:	755a      	strb	r2, [r3, #21]
 800ba76:	2301      	movs	r3, #1
 800ba78:	e087      	b.n	800bb8a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	7d1b      	ldrb	r3, [r3, #20]
 800ba7e:	b25b      	sxtb	r3, r3
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	da14      	bge.n	800baae <f_read+0x19a>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6a1a      	ldr	r2, [r3, #32]
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d90d      	bls.n	800baae <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6a1a      	ldr	r2, [r3, #32]
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	025b      	lsls	r3, r3, #9
 800ba9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba9e:	18d0      	adds	r0, r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	3330      	adds	r3, #48	@ 0x30
 800baa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800baa8:	4619      	mov	r1, r3
 800baaa:	f7fe f89d 	bl	8009be8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800baae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bab0:	025b      	lsls	r3, r3, #9
 800bab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800bab4:	e050      	b.n	800bb58 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	6a1b      	ldr	r3, [r3, #32]
 800baba:	69ba      	ldr	r2, [r7, #24]
 800babc:	429a      	cmp	r2, r3
 800babe:	d02e      	beq.n	800bb1e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	7d1b      	ldrb	r3, [r3, #20]
 800bac4:	b25b      	sxtb	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	da18      	bge.n	800bafc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	7858      	ldrb	r0, [r3, #1]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6a1a      	ldr	r2, [r3, #32]
 800bad8:	2301      	movs	r3, #1
 800bada:	f7fd ffc5 	bl	8009a68 <disk_write>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d004      	beq.n	800baee <f_read+0x1da>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2201      	movs	r2, #1
 800bae8:	755a      	strb	r2, [r3, #21]
 800baea:	2301      	movs	r3, #1
 800baec:	e04d      	b.n	800bb8a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	7d1b      	ldrb	r3, [r3, #20]
 800baf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	7858      	ldrb	r0, [r3, #1]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bb06:	2301      	movs	r3, #1
 800bb08:	69ba      	ldr	r2, [r7, #24]
 800bb0a:	f7fd ff8d 	bl	8009a28 <disk_read>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d004      	beq.n	800bb1e <f_read+0x20a>
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2201      	movs	r2, #1
 800bb18:	755a      	strb	r2, [r3, #21]
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e035      	b.n	800bb8a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	69ba      	ldr	r2, [r7, #24]
 800bb22:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb2c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bb30:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bb32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d901      	bls.n	800bb3e <f_read+0x22a>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb4c:	4413      	add	r3, r2
 800bb4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb50:	4619      	mov	r1, r3
 800bb52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bb54:	f7fe f848 	bl	8009be8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bb58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb5c:	4413      	add	r3, r2
 800bb5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	699a      	ldr	r2, [r3, #24]
 800bb64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb66:	441a      	add	r2, r3
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	619a      	str	r2, [r3, #24]
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb72:	441a      	add	r2, r3
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	601a      	str	r2, [r3, #0]
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f47f af01 	bne.w	800b98a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3738      	adds	r7, #56	@ 0x38
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b08c      	sub	sp, #48	@ 0x30
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	60f8      	str	r0, [r7, #12]
 800bb9a:	60b9      	str	r1, [r7, #8]
 800bb9c:	607a      	str	r2, [r7, #4]
 800bb9e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	2200      	movs	r2, #0
 800bba8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f107 0210 	add.w	r2, r7, #16
 800bbb0:	4611      	mov	r1, r2
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7ff fc78 	bl	800b4a8 <validate>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bbbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d107      	bne.n	800bbd6 <f_write+0x44>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	7d5b      	ldrb	r3, [r3, #21]
 800bbca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bbce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d002      	beq.n	800bbdc <f_write+0x4a>
 800bbd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbda:	e14b      	b.n	800be74 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	7d1b      	ldrb	r3, [r3, #20]
 800bbe0:	f003 0302 	and.w	r3, r3, #2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d101      	bne.n	800bbec <f_write+0x5a>
 800bbe8:	2307      	movs	r3, #7
 800bbea:	e143      	b.n	800be74 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	699a      	ldr	r2, [r3, #24]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	441a      	add	r2, r3
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	699b      	ldr	r3, [r3, #24]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	f080 812d 	bcs.w	800be58 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	699b      	ldr	r3, [r3, #24]
 800bc02:	43db      	mvns	r3, r3
 800bc04:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bc06:	e127      	b.n	800be58 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	f040 80e3 	bne.w	800bddc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	699b      	ldr	r3, [r3, #24]
 800bc1a:	0a5b      	lsrs	r3, r3, #9
 800bc1c:	693a      	ldr	r2, [r7, #16]
 800bc1e:	8952      	ldrh	r2, [r2, #10]
 800bc20:	3a01      	subs	r2, #1
 800bc22:	4013      	ands	r3, r2
 800bc24:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d143      	bne.n	800bcb4 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10c      	bne.n	800bc4e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d11a      	bne.n	800bc76 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2100      	movs	r1, #0
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7fe fcae 	bl	800a5a6 <create_chain>
 800bc4a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bc4c:	e013      	b.n	800bc76 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d007      	beq.n	800bc66 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	699b      	ldr	r3, [r3, #24]
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f7fe fd3a 	bl	800a6d6 <clmt_clust>
 800bc62:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bc64:	e007      	b.n	800bc76 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	69db      	ldr	r3, [r3, #28]
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	4610      	mov	r0, r2
 800bc70:	f7fe fc99 	bl	800a5a6 <create_chain>
 800bc74:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bc76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	f000 80f2 	beq.w	800be62 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bc7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d104      	bne.n	800bc8e <f_write+0xfc>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2202      	movs	r2, #2
 800bc88:	755a      	strb	r2, [r3, #21]
 800bc8a:	2302      	movs	r3, #2
 800bc8c:	e0f2      	b.n	800be74 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bc8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc94:	d104      	bne.n	800bca0 <f_write+0x10e>
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	755a      	strb	r2, [r3, #21]
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e0e9      	b.n	800be74 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bca4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d102      	bne.n	800bcb4 <f_write+0x122>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcb2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	7d1b      	ldrb	r3, [r3, #20]
 800bcb8:	b25b      	sxtb	r3, r3
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	da18      	bge.n	800bcf0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	7858      	ldrb	r0, [r3, #1]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6a1a      	ldr	r2, [r3, #32]
 800bccc:	2301      	movs	r3, #1
 800bcce:	f7fd fecb 	bl	8009a68 <disk_write>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d004      	beq.n	800bce2 <f_write+0x150>
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	755a      	strb	r2, [r3, #21]
 800bcde:	2301      	movs	r3, #1
 800bce0:	e0c8      	b.n	800be74 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	7d1b      	ldrb	r3, [r3, #20]
 800bce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcea:	b2da      	uxtb	r2, r3
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bcf0:	693a      	ldr	r2, [r7, #16]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	69db      	ldr	r3, [r3, #28]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	f7fe fa3f 	bl	800a17c <clust2sect>
 800bcfe:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d104      	bne.n	800bd10 <f_write+0x17e>
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2202      	movs	r2, #2
 800bd0a:	755a      	strb	r2, [r3, #21]
 800bd0c:	2302      	movs	r3, #2
 800bd0e:	e0b1      	b.n	800be74 <f_write+0x2e2>
			sect += csect;
 800bd10:	697a      	ldr	r2, [r7, #20]
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	4413      	add	r3, r2
 800bd16:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	0a5b      	lsrs	r3, r3, #9
 800bd1c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bd1e:	6a3b      	ldr	r3, [r7, #32]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d03c      	beq.n	800bd9e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bd24:	69ba      	ldr	r2, [r7, #24]
 800bd26:	6a3b      	ldr	r3, [r7, #32]
 800bd28:	4413      	add	r3, r2
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	8952      	ldrh	r2, [r2, #10]
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d905      	bls.n	800bd3e <f_write+0x1ac>
					cc = fs->csize - csect;
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	895b      	ldrh	r3, [r3, #10]
 800bd36:	461a      	mov	r2, r3
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	1ad3      	subs	r3, r2, r3
 800bd3c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	7858      	ldrb	r0, [r3, #1]
 800bd42:	6a3b      	ldr	r3, [r7, #32]
 800bd44:	697a      	ldr	r2, [r7, #20]
 800bd46:	69f9      	ldr	r1, [r7, #28]
 800bd48:	f7fd fe8e 	bl	8009a68 <disk_write>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d004      	beq.n	800bd5c <f_write+0x1ca>
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2201      	movs	r2, #1
 800bd56:	755a      	strb	r2, [r3, #21]
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e08b      	b.n	800be74 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6a1a      	ldr	r2, [r3, #32]
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	1ad3      	subs	r3, r2, r3
 800bd64:	6a3a      	ldr	r2, [r7, #32]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d915      	bls.n	800bd96 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6a1a      	ldr	r2, [r3, #32]
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	025b      	lsls	r3, r3, #9
 800bd7a:	69fa      	ldr	r2, [r7, #28]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd82:	4619      	mov	r1, r3
 800bd84:	f7fd ff30 	bl	8009be8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	7d1b      	ldrb	r3, [r3, #20]
 800bd8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd90:	b2da      	uxtb	r2, r3
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bd96:	6a3b      	ldr	r3, [r7, #32]
 800bd98:	025b      	lsls	r3, r3, #9
 800bd9a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800bd9c:	e03f      	b.n	800be1e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6a1b      	ldr	r3, [r3, #32]
 800bda2:	697a      	ldr	r2, [r7, #20]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d016      	beq.n	800bdd6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	699a      	ldr	r2, [r3, #24]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d210      	bcs.n	800bdd6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	7858      	ldrb	r0, [r3, #1]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	697a      	ldr	r2, [r7, #20]
 800bdc2:	f7fd fe31 	bl	8009a28 <disk_read>
 800bdc6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d004      	beq.n	800bdd6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	755a      	strb	r2, [r3, #21]
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e04e      	b.n	800be74 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	697a      	ldr	r2, [r7, #20]
 800bdda:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	699b      	ldr	r3, [r3, #24]
 800bde0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bde4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bde8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bdea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d901      	bls.n	800bdf6 <f_write+0x264>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	699b      	ldr	r3, [r3, #24]
 800be00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be04:	4413      	add	r3, r2
 800be06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be08:	69f9      	ldr	r1, [r7, #28]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fd feec 	bl	8009be8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	7d1b      	ldrb	r3, [r3, #20]
 800be14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800be1e:	69fa      	ldr	r2, [r7, #28]
 800be20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be22:	4413      	add	r3, r2
 800be24:	61fb      	str	r3, [r7, #28]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	699a      	ldr	r2, [r3, #24]
 800be2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be2c:	441a      	add	r2, r3
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	619a      	str	r2, [r3, #24]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	68da      	ldr	r2, [r3, #12]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	bf38      	it	cc
 800be3e:	461a      	movcc	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	60da      	str	r2, [r3, #12]
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4a:	441a      	add	r2, r3
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	601a      	str	r2, [r3, #0]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f47f aed4 	bne.w	800bc08 <f_write+0x76>
 800be60:	e000      	b.n	800be64 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800be62:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	7d1b      	ldrb	r3, [r3, #20]
 800be68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3730      	adds	r7, #48	@ 0x30
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f107 0208 	add.w	r2, r7, #8
 800be8a:	4611      	mov	r1, r2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7ff fb0b 	bl	800b4a8 <validate>
 800be92:	4603      	mov	r3, r0
 800be94:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800be96:	7dfb      	ldrb	r3, [r7, #23]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d168      	bne.n	800bf6e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	7d1b      	ldrb	r3, [r3, #20]
 800bea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d062      	beq.n	800bf6e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	7d1b      	ldrb	r3, [r3, #20]
 800beac:	b25b      	sxtb	r3, r3
 800beae:	2b00      	cmp	r3, #0
 800beb0:	da15      	bge.n	800bede <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	7858      	ldrb	r0, [r3, #1]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6a1a      	ldr	r2, [r3, #32]
 800bec0:	2301      	movs	r3, #1
 800bec2:	f7fd fdd1 	bl	8009a68 <disk_write>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d001      	beq.n	800bed0 <f_sync+0x54>
 800becc:	2301      	movs	r3, #1
 800bece:	e04f      	b.n	800bf70 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	7d1b      	ldrb	r3, [r3, #20]
 800bed4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bede:	f7fd fbf5 	bl	80096cc <get_fattime>
 800bee2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bee4:	68ba      	ldr	r2, [r7, #8]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beea:	4619      	mov	r1, r3
 800beec:	4610      	mov	r0, r2
 800beee:	f7fe f8a9 	bl	800a044 <move_window>
 800bef2:	4603      	mov	r3, r0
 800bef4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d138      	bne.n	800bf6e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf00:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	330b      	adds	r3, #11
 800bf06:	781a      	ldrb	r2, [r3, #0]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	330b      	adds	r3, #11
 800bf0c:	f042 0220 	orr.w	r2, r2, #32
 800bf10:	b2d2      	uxtb	r2, r2
 800bf12:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	68f9      	ldr	r1, [r7, #12]
 800bf20:	f7fe fdb3 	bl	800aa8a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f103 021c 	add.w	r2, r3, #28
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	4619      	mov	r1, r3
 800bf30:	4610      	mov	r0, r2
 800bf32:	f7fd fe2d 	bl	8009b90 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	3316      	adds	r3, #22
 800bf3a:	6939      	ldr	r1, [r7, #16]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7fd fe27 	bl	8009b90 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	3312      	adds	r3, #18
 800bf46:	2100      	movs	r1, #0
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fd fe06 	bl	8009b5a <st_word>
					fs->wflag = 1;
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	2201      	movs	r2, #1
 800bf52:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fe f8a2 	bl	800a0a0 <sync_fs>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	7d1b      	ldrb	r3, [r3, #20]
 800bf64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf68:	b2da      	uxtb	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bf6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3718      	adds	r7, #24
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f7ff ff7b 	bl	800be7c <f_sync>
 800bf86:	4603      	mov	r3, r0
 800bf88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bf8a:	7bfb      	ldrb	r3, [r7, #15]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d118      	bne.n	800bfc2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f107 0208 	add.w	r2, r7, #8
 800bf96:	4611      	mov	r1, r2
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7ff fa85 	bl	800b4a8 <validate>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bfa2:	7bfb      	ldrb	r3, [r7, #15]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10c      	bne.n	800bfc2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7fd ffa5 	bl	8009efc <dec_lock>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bfb6:	7bfb      	ldrb	r3, [r7, #15]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d102      	bne.n	800bfc2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b090      	sub	sp, #64	@ 0x40
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f107 0208 	add.w	r2, r7, #8
 800bfdc:	4611      	mov	r1, r2
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7ff fa62 	bl	800b4a8 <validate>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800bfea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d103      	bne.n	800bffa <f_lseek+0x2e>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	7d5b      	ldrb	r3, [r3, #21]
 800bff6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bffa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d002      	beq.n	800c008 <f_lseek+0x3c>
 800c002:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c006:	e1e6      	b.n	800c3d6 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 80d1 	beq.w	800c1b4 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c018:	d15a      	bne.n	800c0d0 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01e:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c022:	1d1a      	adds	r2, r3, #4
 800c024:	627a      	str	r2, [r7, #36]	@ 0x24
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	617b      	str	r3, [r7, #20]
 800c02a:	2302      	movs	r3, #2
 800c02c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800c034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c036:	2b00      	cmp	r3, #0
 800c038:	d03a      	beq.n	800c0b0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c03c:	613b      	str	r3, [r7, #16]
 800c03e:	2300      	movs	r3, #0
 800c040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c044:	3302      	adds	r3, #2
 800c046:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800c048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c04a:	60fb      	str	r3, [r7, #12]
 800c04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c04e:	3301      	adds	r3, #1
 800c050:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c056:	4618      	mov	r0, r3
 800c058:	f7fe f8af 	bl	800a1ba <get_fat>
 800c05c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c060:	2b01      	cmp	r3, #1
 800c062:	d804      	bhi.n	800c06e <f_lseek+0xa2>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2202      	movs	r2, #2
 800c068:	755a      	strb	r2, [r3, #21]
 800c06a:	2302      	movs	r3, #2
 800c06c:	e1b3      	b.n	800c3d6 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c074:	d104      	bne.n	800c080 <f_lseek+0xb4>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2201      	movs	r2, #1
 800c07a:	755a      	strb	r2, [r3, #21]
 800c07c:	2301      	movs	r3, #1
 800c07e:	e1aa      	b.n	800c3d6 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	3301      	adds	r3, #1
 800c084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c086:	429a      	cmp	r2, r3
 800c088:	d0de      	beq.n	800c048 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c08a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	429a      	cmp	r2, r3
 800c090:	d809      	bhi.n	800c0a6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c094:	1d1a      	adds	r2, r3, #4
 800c096:	627a      	str	r2, [r7, #36]	@ 0x24
 800c098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c09a:	601a      	str	r2, [r3, #0]
 800c09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09e:	1d1a      	adds	r2, r3, #4
 800c0a0:	627a      	str	r2, [r7, #36]	@ 0x24
 800c0a2:	693a      	ldr	r2, [r7, #16]
 800c0a4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	695b      	ldr	r3, [r3, #20]
 800c0aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d3c4      	bcc.n	800c03a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0b6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c0b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d803      	bhi.n	800c0c8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	601a      	str	r2, [r3, #0]
 800c0c6:	e184      	b.n	800c3d2 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c0c8:	2311      	movs	r3, #17
 800c0ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c0ce:	e180      	b.n	800c3d2 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	683a      	ldr	r2, [r7, #0]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d902      	bls.n	800c0e0 <f_lseek+0x114>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f000 8172 	beq.w	800c3d2 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7fe faee 	bl	800a6d6 <clmt_clust>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c100:	68ba      	ldr	r2, [r7, #8]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	69db      	ldr	r3, [r3, #28]
 800c106:	4619      	mov	r1, r3
 800c108:	4610      	mov	r0, r2
 800c10a:	f7fe f837 	bl	800a17c <clust2sect>
 800c10e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d104      	bne.n	800c120 <f_lseek+0x154>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2202      	movs	r2, #2
 800c11a:	755a      	strb	r2, [r3, #21]
 800c11c:	2302      	movs	r3, #2
 800c11e:	e15a      	b.n	800c3d6 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	3b01      	subs	r3, #1
 800c124:	0a5b      	lsrs	r3, r3, #9
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	8952      	ldrh	r2, [r2, #10]
 800c12a:	3a01      	subs	r2, #1
 800c12c:	4013      	ands	r3, r2
 800c12e:	69ba      	ldr	r2, [r7, #24]
 800c130:	4413      	add	r3, r2
 800c132:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	699b      	ldr	r3, [r3, #24]
 800c138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f000 8148 	beq.w	800c3d2 <f_lseek+0x406>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	69ba      	ldr	r2, [r7, #24]
 800c148:	429a      	cmp	r2, r3
 800c14a:	f000 8142 	beq.w	800c3d2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	7d1b      	ldrb	r3, [r3, #20]
 800c152:	b25b      	sxtb	r3, r3
 800c154:	2b00      	cmp	r3, #0
 800c156:	da18      	bge.n	800c18a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	7858      	ldrb	r0, [r3, #1]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6a1a      	ldr	r2, [r3, #32]
 800c166:	2301      	movs	r3, #1
 800c168:	f7fd fc7e 	bl	8009a68 <disk_write>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d004      	beq.n	800c17c <f_lseek+0x1b0>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2201      	movs	r2, #1
 800c176:	755a      	strb	r2, [r3, #21]
 800c178:	2301      	movs	r3, #1
 800c17a:	e12c      	b.n	800c3d6 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	7d1b      	ldrb	r3, [r3, #20]
 800c180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c184:	b2da      	uxtb	r2, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	7858      	ldrb	r0, [r3, #1]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c194:	2301      	movs	r3, #1
 800c196:	69ba      	ldr	r2, [r7, #24]
 800c198:	f7fd fc46 	bl	8009a28 <disk_read>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d004      	beq.n	800c1ac <f_lseek+0x1e0>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	755a      	strb	r2, [r3, #21]
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e114      	b.n	800c3d6 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	69ba      	ldr	r2, [r7, #24]
 800c1b0:	621a      	str	r2, [r3, #32]
 800c1b2:	e10e      	b.n	800c3d2 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	683a      	ldr	r2, [r7, #0]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d908      	bls.n	800c1d0 <f_lseek+0x204>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	7d1b      	ldrb	r3, [r3, #20]
 800c1c2:	f003 0302 	and.w	r3, r3, #2
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d102      	bne.n	800c1d0 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c1de:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f000 80a7 	beq.w	800c336 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	895b      	ldrh	r3, [r3, #10]
 800c1ec:	025b      	lsls	r3, r3, #9
 800c1ee:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c1f0:	6a3b      	ldr	r3, [r7, #32]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d01b      	beq.n	800c22e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	1e5a      	subs	r2, r3, #1
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	fbb2 f2f3 	udiv	r2, r2, r3
 800c200:	6a3b      	ldr	r3, [r7, #32]
 800c202:	1e59      	subs	r1, r3, #1
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d30f      	bcc.n	800c22e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c20e:	6a3b      	ldr	r3, [r7, #32]
 800c210:	1e5a      	subs	r2, r3, #1
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	425b      	negs	r3, r3
 800c216:	401a      	ands	r2, r3
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	699b      	ldr	r3, [r3, #24]
 800c220:	683a      	ldr	r2, [r7, #0]
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	69db      	ldr	r3, [r3, #28]
 800c22a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c22c:	e022      	b.n	800c274 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c236:	2b00      	cmp	r3, #0
 800c238:	d119      	bne.n	800c26e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2100      	movs	r1, #0
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fe f9b1 	bl	800a5a6 <create_chain>
 800c244:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d104      	bne.n	800c256 <f_lseek+0x28a>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2202      	movs	r2, #2
 800c250:	755a      	strb	r2, [r3, #21]
 800c252:	2302      	movs	r3, #2
 800c254:	e0bf      	b.n	800c3d6 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c25c:	d104      	bne.n	800c268 <f_lseek+0x29c>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2201      	movs	r2, #1
 800c262:	755a      	strb	r2, [r3, #21]
 800c264:	2301      	movs	r3, #1
 800c266:	e0b6      	b.n	800c3d6 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c26c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c272:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c276:	2b00      	cmp	r3, #0
 800c278:	d05d      	beq.n	800c336 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c27a:	e03a      	b.n	800c2f2 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c27c:	683a      	ldr	r2, [r7, #0]
 800c27e:	69fb      	ldr	r3, [r7, #28]
 800c280:	1ad3      	subs	r3, r2, r3
 800c282:	603b      	str	r3, [r7, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	699a      	ldr	r2, [r3, #24]
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	441a      	add	r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	7d1b      	ldrb	r3, [r3, #20]
 800c294:	f003 0302 	and.w	r3, r3, #2
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00b      	beq.n	800c2b4 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7fe f980 	bl	800a5a6 <create_chain>
 800c2a6:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d108      	bne.n	800c2c0 <f_lseek+0x2f4>
							ofs = 0; break;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	603b      	str	r3, [r7, #0]
 800c2b2:	e022      	b.n	800c2fa <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7fd ff7e 	bl	800a1ba <get_fat>
 800c2be:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c6:	d104      	bne.n	800c2d2 <f_lseek+0x306>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	755a      	strb	r2, [r3, #21]
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e081      	b.n	800c3d6 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d904      	bls.n	800c2e2 <f_lseek+0x316>
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	695b      	ldr	r3, [r3, #20]
 800c2dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d304      	bcc.n	800c2ec <f_lseek+0x320>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2202      	movs	r2, #2
 800c2e6:	755a      	strb	r2, [r3, #21]
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	e074      	b.n	800c3d6 <f_lseek+0x40a>
					fp->clust = clst;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c2f0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c2f2:	683a      	ldr	r2, [r7, #0]
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d8c0      	bhi.n	800c27c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	699a      	ldr	r2, [r3, #24]
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	441a      	add	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d012      	beq.n	800c336 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c314:	4618      	mov	r0, r3
 800c316:	f7fd ff31 	bl	800a17c <clust2sect>
 800c31a:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d104      	bne.n	800c32c <f_lseek+0x360>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2202      	movs	r2, #2
 800c326:	755a      	strb	r2, [r3, #21]
 800c328:	2302      	movs	r3, #2
 800c32a:	e054      	b.n	800c3d6 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	0a5b      	lsrs	r3, r3, #9
 800c330:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c332:	4413      	add	r3, r2
 800c334:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	699a      	ldr	r2, [r3, #24]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d90a      	bls.n	800c358 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	699a      	ldr	r2, [r3, #24]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	7d1b      	ldrb	r3, [r3, #20]
 800c34e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c352:	b2da      	uxtb	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	699b      	ldr	r3, [r3, #24]
 800c35c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c360:	2b00      	cmp	r3, #0
 800c362:	d036      	beq.n	800c3d2 <f_lseek+0x406>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a1b      	ldr	r3, [r3, #32]
 800c368:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d031      	beq.n	800c3d2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	7d1b      	ldrb	r3, [r3, #20]
 800c372:	b25b      	sxtb	r3, r3
 800c374:	2b00      	cmp	r3, #0
 800c376:	da18      	bge.n	800c3aa <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	7858      	ldrb	r0, [r3, #1]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a1a      	ldr	r2, [r3, #32]
 800c386:	2301      	movs	r3, #1
 800c388:	f7fd fb6e 	bl	8009a68 <disk_write>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d004      	beq.n	800c39c <f_lseek+0x3d0>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2201      	movs	r2, #1
 800c396:	755a      	strb	r2, [r3, #21]
 800c398:	2301      	movs	r3, #1
 800c39a:	e01c      	b.n	800c3d6 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	7d1b      	ldrb	r3, [r3, #20]
 800c3a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c3a4:	b2da      	uxtb	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	7858      	ldrb	r0, [r3, #1]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c3b8:	f7fd fb36 	bl	8009a28 <disk_read>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d004      	beq.n	800c3cc <f_lseek+0x400>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	755a      	strb	r2, [r3, #21]
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	e004      	b.n	800c3d6 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c3d0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c3d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3740      	adds	r7, #64	@ 0x40
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b09e      	sub	sp, #120	@ 0x78
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c3ea:	f107 010c 	add.w	r1, r7, #12
 800c3ee:	1d3b      	adds	r3, r7, #4
 800c3f0:	2202      	movs	r2, #2
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fe fe0c 	bl	800b010 <find_volume>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800c402:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c406:	2b00      	cmp	r3, #0
 800c408:	f040 808e 	bne.w	800c528 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c412:	4611      	mov	r1, r2
 800c414:	4618      	mov	r0, r3
 800c416:	f7fe fcef 	bl	800adf8 <follow_path>
 800c41a:	4603      	mov	r3, r0
 800c41c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800c420:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c424:	2b00      	cmp	r3, #0
 800c426:	d108      	bne.n	800c43a <f_unlink+0x5c>
 800c428:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c42c:	2102      	movs	r1, #2
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fd fc58 	bl	8009ce4 <chk_lock>
 800c434:	4603      	mov	r3, r0
 800c436:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800c43a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d172      	bne.n	800c528 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800c442:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c446:	b25b      	sxtb	r3, r3
 800c448:	2b00      	cmp	r3, #0
 800c44a:	da03      	bge.n	800c454 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800c44c:	2306      	movs	r3, #6
 800c44e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800c452:	e008      	b.n	800c466 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800c454:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c458:	f003 0301 	and.w	r3, r3, #1
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d002      	beq.n	800c466 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800c460:	2307      	movs	r3, #7
 800c462:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800c466:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d134      	bne.n	800c4d8 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c472:	4611      	mov	r1, r2
 800c474:	4618      	mov	r0, r3
 800c476:	f7fe fae9 	bl	800aa4c <ld_clust>
 800c47a:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800c47c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c480:	f003 0310 	and.w	r3, r3, #16
 800c484:	2b00      	cmp	r3, #0
 800c486:	d027      	beq.n	800c4d8 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800c48c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c48e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800c490:	f107 0310 	add.w	r3, r7, #16
 800c494:	2100      	movs	r1, #0
 800c496:	4618      	mov	r0, r3
 800c498:	f7fe f951 	bl	800a73e <dir_sdi>
 800c49c:	4603      	mov	r3, r0
 800c49e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800c4a2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d116      	bne.n	800c4d8 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800c4aa:	f107 0310 	add.w	r3, r7, #16
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fe fb0a 	bl	800aaca <dir_read>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800c4bc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d102      	bne.n	800c4ca <f_unlink+0xec>
 800c4c4:	2307      	movs	r3, #7
 800c4c6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800c4ca:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c4ce:	2b04      	cmp	r3, #4
 800c4d0:	d102      	bne.n	800c4d8 <f_unlink+0xfa>
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800c4d8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d123      	bne.n	800c528 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800c4e0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fe fbd4 	bl	800ac92 <dir_remove>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800c4f0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10c      	bne.n	800c512 <f_unlink+0x134>
 800c4f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d009      	beq.n	800c512 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800c4fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c502:	2200      	movs	r2, #0
 800c504:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c506:	4618      	mov	r0, r3
 800c508:	f7fd ffe8 	bl	800a4dc <remove_chain>
 800c50c:	4603      	mov	r3, r0
 800c50e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800c512:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c516:	2b00      	cmp	r3, #0
 800c518:	d106      	bne.n	800c528 <f_unlink+0x14a>
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fd fdbf 	bl	800a0a0 <sync_fs>
 800c522:	4603      	mov	r3, r0
 800c524:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c528:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3778      	adds	r7, #120	@ 0x78
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800c534:	b590      	push	{r4, r7, lr}
 800c536:	b0a5      	sub	sp, #148	@ 0x94
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800c53e:	463b      	mov	r3, r7
 800c540:	4618      	mov	r0, r3
 800c542:	f7fe fcca 	bl	800aeda <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800c546:	f107 0120 	add.w	r1, r7, #32
 800c54a:	1d3b      	adds	r3, r7, #4
 800c54c:	2202      	movs	r2, #2
 800c54e:	4618      	mov	r0, r3
 800c550:	f7fe fd5e 	bl	800b010 <find_volume>
 800c554:	4603      	mov	r3, r0
 800c556:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800c55a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f040 80db 	bne.w	800c71a <f_rename+0x1e6>
		djo.obj.fs = fs;
 800c564:	6a3b      	ldr	r3, [r7, #32]
 800c566:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c56e:	4611      	mov	r1, r2
 800c570:	4618      	mov	r0, r3
 800c572:	f7fe fc41 	bl	800adf8 <follow_path>
 800c576:	4603      	mov	r3, r0
 800c578:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800c57c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c580:	2b00      	cmp	r3, #0
 800c582:	d108      	bne.n	800c596 <f_rename+0x62>
 800c584:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c588:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d002      	beq.n	800c596 <f_rename+0x62>
 800c590:	2306      	movs	r3, #6
 800c592:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800c596:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d108      	bne.n	800c5b0 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800c59e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c5a2:	2102      	movs	r1, #2
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7fd fb9d 	bl	8009ce4 <chk_lock>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800c5b0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	f040 80b0 	bne.w	800c71a <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800c5ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5bc:	f103 010b 	add.w	r1, r3, #11
 800c5c0:	f107 0308 	add.w	r3, r7, #8
 800c5c4:	2215      	movs	r2, #21
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7fd fb0e 	bl	8009be8 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800c5cc:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800c5d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5d4:	2230      	movs	r2, #48	@ 0x30
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7fd fb06 	bl	8009be8 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800c5dc:	683a      	ldr	r2, [r7, #0]
 800c5de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5e2:	4611      	mov	r1, r2
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7fe fc07 	bl	800adf8 <follow_path>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800c5f0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10c      	bne.n	800c612 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800c5f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d105      	bne.n	800c60c <f_rename+0xd8>
 800c600:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c602:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c604:	429a      	cmp	r2, r3
 800c606:	d101      	bne.n	800c60c <f_rename+0xd8>
 800c608:	2304      	movs	r3, #4
 800c60a:	e000      	b.n	800c60e <f_rename+0xda>
 800c60c:	2308      	movs	r3, #8
 800c60e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800c612:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c616:	2b04      	cmp	r3, #4
 800c618:	d168      	bne.n	800c6ec <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800c61a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c61e:	4618      	mov	r0, r3
 800c620:	f7fe fb05 	bl	800ac2e <dir_register>
 800c624:	4603      	mov	r3, r0
 800c626:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 800c62a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d15c      	bne.n	800c6ec <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800c632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800c638:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c63c:	f103 000d 	add.w	r0, r3, #13
 800c640:	f107 0308 	add.w	r3, r7, #8
 800c644:	3302      	adds	r3, #2
 800c646:	2213      	movs	r2, #19
 800c648:	4619      	mov	r1, r3
 800c64a:	f7fd facd 	bl	8009be8 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800c64e:	7a3a      	ldrb	r2, [r7, #8]
 800c650:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c654:	330b      	adds	r3, #11
 800c656:	f042 0220 	orr.w	r2, r2, #32
 800c65a:	b2d2      	uxtb	r2, r2
 800c65c:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800c65e:	6a3b      	ldr	r3, [r7, #32]
 800c660:	2201      	movs	r2, #1
 800c662:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800c664:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c668:	330b      	adds	r3, #11
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	f003 0310 	and.w	r3, r3, #16
 800c670:	2b00      	cmp	r3, #0
 800c672:	d03b      	beq.n	800c6ec <f_rename+0x1b8>
 800c674:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c678:	429a      	cmp	r2, r3
 800c67a:	d037      	beq.n	800c6ec <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800c67c:	6a3c      	ldr	r4, [r7, #32]
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c684:	4618      	mov	r0, r3
 800c686:	f7fe f9e1 	bl	800aa4c <ld_clust>
 800c68a:	4603      	mov	r3, r0
 800c68c:	4619      	mov	r1, r3
 800c68e:	4620      	mov	r0, r4
 800c690:	f7fd fd74 	bl	800a17c <clust2sect>
 800c694:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 800c698:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d103      	bne.n	800c6a8 <f_rename+0x174>
								res = FR_INT_ERR;
 800c6a0:	2302      	movs	r3, #2
 800c6a2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800c6a6:	e021      	b.n	800c6ec <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800c6a8:	6a3b      	ldr	r3, [r7, #32]
 800c6aa:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fd fcc8 	bl	800a044 <move_window>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	3330      	adds	r3, #48	@ 0x30
 800c6be:	3320      	adds	r3, #32
 800c6c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 800c6c4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d10f      	bne.n	800c6ec <f_rename+0x1b8>
 800c6cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6d6:	d109      	bne.n	800c6ec <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
 800c6da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6dc:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7fe f9d2 	bl	800aa8a <st_clust>
									fs->wflag = 1;
 800c6e6:	6a3b      	ldr	r3, [r7, #32]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800c6ec:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d112      	bne.n	800c71a <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800c6f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7fe faca 	bl	800ac92 <dir_remove>
 800c6fe:	4603      	mov	r3, r0
 800c700:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 800c704:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d106      	bne.n	800c71a <f_rename+0x1e6>
					res = sync_fs(fs);
 800c70c:	6a3b      	ldr	r3, [r7, #32]
 800c70e:	4618      	mov	r0, r3
 800c710:	f7fd fcc6 	bl	800a0a0 <sync_fs>
 800c714:	4603      	mov	r3, r0
 800c716:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c71a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3794      	adds	r7, #148	@ 0x94
 800c722:	46bd      	mov	sp, r7
 800c724:	bd90      	pop	{r4, r7, pc}
	...

0800c728 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c728:	b480      	push	{r7}
 800c72a:	b087      	sub	sp, #28
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	4613      	mov	r3, r2
 800c734:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c736:	2301      	movs	r3, #1
 800c738:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c73e:	4b1f      	ldr	r3, [pc, #124]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c740:	7a5b      	ldrb	r3, [r3, #9]
 800c742:	b2db      	uxtb	r3, r3
 800c744:	2b00      	cmp	r3, #0
 800c746:	d131      	bne.n	800c7ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c748:	4b1c      	ldr	r3, [pc, #112]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c74a:	7a5b      	ldrb	r3, [r3, #9]
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	461a      	mov	r2, r3
 800c750:	4b1a      	ldr	r3, [pc, #104]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c752:	2100      	movs	r1, #0
 800c754:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c756:	4b19      	ldr	r3, [pc, #100]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c758:	7a5b      	ldrb	r3, [r3, #9]
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	4a17      	ldr	r2, [pc, #92]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c766:	4b15      	ldr	r3, [pc, #84]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c768:	7a5b      	ldrb	r3, [r3, #9]
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	461a      	mov	r2, r3
 800c76e:	4b13      	ldr	r3, [pc, #76]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c770:	4413      	add	r3, r2
 800c772:	79fa      	ldrb	r2, [r7, #7]
 800c774:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c776:	4b11      	ldr	r3, [pc, #68]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c778:	7a5b      	ldrb	r3, [r3, #9]
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	1c5a      	adds	r2, r3, #1
 800c77e:	b2d1      	uxtb	r1, r2
 800c780:	4a0e      	ldr	r2, [pc, #56]	@ (800c7bc <FATFS_LinkDriverEx+0x94>)
 800c782:	7251      	strb	r1, [r2, #9]
 800c784:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c786:	7dbb      	ldrb	r3, [r7, #22]
 800c788:	3330      	adds	r3, #48	@ 0x30
 800c78a:	b2da      	uxtb	r2, r3
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	3301      	adds	r3, #1
 800c794:	223a      	movs	r2, #58	@ 0x3a
 800c796:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	3302      	adds	r3, #2
 800c79c:	222f      	movs	r2, #47	@ 0x2f
 800c79e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	3303      	adds	r3, #3
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c7ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	371c      	adds	r7, #28
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr
 800c7ba:	bf00      	nop
 800c7bc:	200005cc 	.word	0x200005cc

0800c7c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f7ff ffaa 	bl	800c728 <FATFS_LinkDriverEx>
 800c7d4:	4603      	mov	r3, r0
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3708      	adds	r7, #8
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
	...

0800c7e0 <malloc>:
 800c7e0:	4b02      	ldr	r3, [pc, #8]	@ (800c7ec <malloc+0xc>)
 800c7e2:	4601      	mov	r1, r0
 800c7e4:	6818      	ldr	r0, [r3, #0]
 800c7e6:	f000 b82d 	b.w	800c844 <_malloc_r>
 800c7ea:	bf00      	nop
 800c7ec:	20000018 	.word	0x20000018

0800c7f0 <free>:
 800c7f0:	4b02      	ldr	r3, [pc, #8]	@ (800c7fc <free+0xc>)
 800c7f2:	4601      	mov	r1, r0
 800c7f4:	6818      	ldr	r0, [r3, #0]
 800c7f6:	f000 b949 	b.w	800ca8c <_free_r>
 800c7fa:	bf00      	nop
 800c7fc:	20000018 	.word	0x20000018

0800c800 <sbrk_aligned>:
 800c800:	b570      	push	{r4, r5, r6, lr}
 800c802:	4e0f      	ldr	r6, [pc, #60]	@ (800c840 <sbrk_aligned+0x40>)
 800c804:	460c      	mov	r4, r1
 800c806:	6831      	ldr	r1, [r6, #0]
 800c808:	4605      	mov	r5, r0
 800c80a:	b911      	cbnz	r1, 800c812 <sbrk_aligned+0x12>
 800c80c:	f000 f8f4 	bl	800c9f8 <_sbrk_r>
 800c810:	6030      	str	r0, [r6, #0]
 800c812:	4621      	mov	r1, r4
 800c814:	4628      	mov	r0, r5
 800c816:	f000 f8ef 	bl	800c9f8 <_sbrk_r>
 800c81a:	1c43      	adds	r3, r0, #1
 800c81c:	d103      	bne.n	800c826 <sbrk_aligned+0x26>
 800c81e:	f04f 34ff 	mov.w	r4, #4294967295
 800c822:	4620      	mov	r0, r4
 800c824:	bd70      	pop	{r4, r5, r6, pc}
 800c826:	1cc4      	adds	r4, r0, #3
 800c828:	f024 0403 	bic.w	r4, r4, #3
 800c82c:	42a0      	cmp	r0, r4
 800c82e:	d0f8      	beq.n	800c822 <sbrk_aligned+0x22>
 800c830:	1a21      	subs	r1, r4, r0
 800c832:	4628      	mov	r0, r5
 800c834:	f000 f8e0 	bl	800c9f8 <_sbrk_r>
 800c838:	3001      	adds	r0, #1
 800c83a:	d1f2      	bne.n	800c822 <sbrk_aligned+0x22>
 800c83c:	e7ef      	b.n	800c81e <sbrk_aligned+0x1e>
 800c83e:	bf00      	nop
 800c840:	200005d8 	.word	0x200005d8

0800c844 <_malloc_r>:
 800c844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c848:	1ccd      	adds	r5, r1, #3
 800c84a:	f025 0503 	bic.w	r5, r5, #3
 800c84e:	3508      	adds	r5, #8
 800c850:	2d0c      	cmp	r5, #12
 800c852:	bf38      	it	cc
 800c854:	250c      	movcc	r5, #12
 800c856:	2d00      	cmp	r5, #0
 800c858:	4606      	mov	r6, r0
 800c85a:	db01      	blt.n	800c860 <_malloc_r+0x1c>
 800c85c:	42a9      	cmp	r1, r5
 800c85e:	d904      	bls.n	800c86a <_malloc_r+0x26>
 800c860:	230c      	movs	r3, #12
 800c862:	6033      	str	r3, [r6, #0]
 800c864:	2000      	movs	r0, #0
 800c866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c86a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c940 <_malloc_r+0xfc>
 800c86e:	f000 f869 	bl	800c944 <__malloc_lock>
 800c872:	f8d8 3000 	ldr.w	r3, [r8]
 800c876:	461c      	mov	r4, r3
 800c878:	bb44      	cbnz	r4, 800c8cc <_malloc_r+0x88>
 800c87a:	4629      	mov	r1, r5
 800c87c:	4630      	mov	r0, r6
 800c87e:	f7ff ffbf 	bl	800c800 <sbrk_aligned>
 800c882:	1c43      	adds	r3, r0, #1
 800c884:	4604      	mov	r4, r0
 800c886:	d158      	bne.n	800c93a <_malloc_r+0xf6>
 800c888:	f8d8 4000 	ldr.w	r4, [r8]
 800c88c:	4627      	mov	r7, r4
 800c88e:	2f00      	cmp	r7, #0
 800c890:	d143      	bne.n	800c91a <_malloc_r+0xd6>
 800c892:	2c00      	cmp	r4, #0
 800c894:	d04b      	beq.n	800c92e <_malloc_r+0xea>
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	4639      	mov	r1, r7
 800c89a:	4630      	mov	r0, r6
 800c89c:	eb04 0903 	add.w	r9, r4, r3
 800c8a0:	f000 f8aa 	bl	800c9f8 <_sbrk_r>
 800c8a4:	4581      	cmp	r9, r0
 800c8a6:	d142      	bne.n	800c92e <_malloc_r+0xea>
 800c8a8:	6821      	ldr	r1, [r4, #0]
 800c8aa:	1a6d      	subs	r5, r5, r1
 800c8ac:	4629      	mov	r1, r5
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	f7ff ffa6 	bl	800c800 <sbrk_aligned>
 800c8b4:	3001      	adds	r0, #1
 800c8b6:	d03a      	beq.n	800c92e <_malloc_r+0xea>
 800c8b8:	6823      	ldr	r3, [r4, #0]
 800c8ba:	442b      	add	r3, r5
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	f8d8 3000 	ldr.w	r3, [r8]
 800c8c2:	685a      	ldr	r2, [r3, #4]
 800c8c4:	bb62      	cbnz	r2, 800c920 <_malloc_r+0xdc>
 800c8c6:	f8c8 7000 	str.w	r7, [r8]
 800c8ca:	e00f      	b.n	800c8ec <_malloc_r+0xa8>
 800c8cc:	6822      	ldr	r2, [r4, #0]
 800c8ce:	1b52      	subs	r2, r2, r5
 800c8d0:	d420      	bmi.n	800c914 <_malloc_r+0xd0>
 800c8d2:	2a0b      	cmp	r2, #11
 800c8d4:	d917      	bls.n	800c906 <_malloc_r+0xc2>
 800c8d6:	1961      	adds	r1, r4, r5
 800c8d8:	42a3      	cmp	r3, r4
 800c8da:	6025      	str	r5, [r4, #0]
 800c8dc:	bf18      	it	ne
 800c8de:	6059      	strne	r1, [r3, #4]
 800c8e0:	6863      	ldr	r3, [r4, #4]
 800c8e2:	bf08      	it	eq
 800c8e4:	f8c8 1000 	streq.w	r1, [r8]
 800c8e8:	5162      	str	r2, [r4, r5]
 800c8ea:	604b      	str	r3, [r1, #4]
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	f000 f82f 	bl	800c950 <__malloc_unlock>
 800c8f2:	f104 000b 	add.w	r0, r4, #11
 800c8f6:	1d23      	adds	r3, r4, #4
 800c8f8:	f020 0007 	bic.w	r0, r0, #7
 800c8fc:	1ac2      	subs	r2, r0, r3
 800c8fe:	bf1c      	itt	ne
 800c900:	1a1b      	subne	r3, r3, r0
 800c902:	50a3      	strne	r3, [r4, r2]
 800c904:	e7af      	b.n	800c866 <_malloc_r+0x22>
 800c906:	6862      	ldr	r2, [r4, #4]
 800c908:	42a3      	cmp	r3, r4
 800c90a:	bf0c      	ite	eq
 800c90c:	f8c8 2000 	streq.w	r2, [r8]
 800c910:	605a      	strne	r2, [r3, #4]
 800c912:	e7eb      	b.n	800c8ec <_malloc_r+0xa8>
 800c914:	4623      	mov	r3, r4
 800c916:	6864      	ldr	r4, [r4, #4]
 800c918:	e7ae      	b.n	800c878 <_malloc_r+0x34>
 800c91a:	463c      	mov	r4, r7
 800c91c:	687f      	ldr	r7, [r7, #4]
 800c91e:	e7b6      	b.n	800c88e <_malloc_r+0x4a>
 800c920:	461a      	mov	r2, r3
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	42a3      	cmp	r3, r4
 800c926:	d1fb      	bne.n	800c920 <_malloc_r+0xdc>
 800c928:	2300      	movs	r3, #0
 800c92a:	6053      	str	r3, [r2, #4]
 800c92c:	e7de      	b.n	800c8ec <_malloc_r+0xa8>
 800c92e:	230c      	movs	r3, #12
 800c930:	6033      	str	r3, [r6, #0]
 800c932:	4630      	mov	r0, r6
 800c934:	f000 f80c 	bl	800c950 <__malloc_unlock>
 800c938:	e794      	b.n	800c864 <_malloc_r+0x20>
 800c93a:	6005      	str	r5, [r0, #0]
 800c93c:	e7d6      	b.n	800c8ec <_malloc_r+0xa8>
 800c93e:	bf00      	nop
 800c940:	200005dc 	.word	0x200005dc

0800c944 <__malloc_lock>:
 800c944:	4801      	ldr	r0, [pc, #4]	@ (800c94c <__malloc_lock+0x8>)
 800c946:	f000 b891 	b.w	800ca6c <__retarget_lock_acquire_recursive>
 800c94a:	bf00      	nop
 800c94c:	2000071c 	.word	0x2000071c

0800c950 <__malloc_unlock>:
 800c950:	4801      	ldr	r0, [pc, #4]	@ (800c958 <__malloc_unlock+0x8>)
 800c952:	f000 b88c 	b.w	800ca6e <__retarget_lock_release_recursive>
 800c956:	bf00      	nop
 800c958:	2000071c 	.word	0x2000071c

0800c95c <realloc>:
 800c95c:	4b02      	ldr	r3, [pc, #8]	@ (800c968 <realloc+0xc>)
 800c95e:	460a      	mov	r2, r1
 800c960:	4601      	mov	r1, r0
 800c962:	6818      	ldr	r0, [r3, #0]
 800c964:	f000 b802 	b.w	800c96c <_realloc_r>
 800c968:	20000018 	.word	0x20000018

0800c96c <_realloc_r>:
 800c96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c970:	4680      	mov	r8, r0
 800c972:	4615      	mov	r5, r2
 800c974:	460c      	mov	r4, r1
 800c976:	b921      	cbnz	r1, 800c982 <_realloc_r+0x16>
 800c978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c97c:	4611      	mov	r1, r2
 800c97e:	f7ff bf61 	b.w	800c844 <_malloc_r>
 800c982:	b92a      	cbnz	r2, 800c990 <_realloc_r+0x24>
 800c984:	f000 f882 	bl	800ca8c <_free_r>
 800c988:	2400      	movs	r4, #0
 800c98a:	4620      	mov	r0, r4
 800c98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c990:	f000 f8c6 	bl	800cb20 <_malloc_usable_size_r>
 800c994:	4285      	cmp	r5, r0
 800c996:	4606      	mov	r6, r0
 800c998:	d802      	bhi.n	800c9a0 <_realloc_r+0x34>
 800c99a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c99e:	d8f4      	bhi.n	800c98a <_realloc_r+0x1e>
 800c9a0:	4629      	mov	r1, r5
 800c9a2:	4640      	mov	r0, r8
 800c9a4:	f7ff ff4e 	bl	800c844 <_malloc_r>
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	d0ec      	beq.n	800c988 <_realloc_r+0x1c>
 800c9ae:	42b5      	cmp	r5, r6
 800c9b0:	462a      	mov	r2, r5
 800c9b2:	4621      	mov	r1, r4
 800c9b4:	bf28      	it	cs
 800c9b6:	4632      	movcs	r2, r6
 800c9b8:	f000 f85a 	bl	800ca70 <memcpy>
 800c9bc:	4621      	mov	r1, r4
 800c9be:	4640      	mov	r0, r8
 800c9c0:	f000 f864 	bl	800ca8c <_free_r>
 800c9c4:	463c      	mov	r4, r7
 800c9c6:	e7e0      	b.n	800c98a <_realloc_r+0x1e>

0800c9c8 <memset>:
 800c9c8:	4402      	add	r2, r0
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d100      	bne.n	800c9d2 <memset+0xa>
 800c9d0:	4770      	bx	lr
 800c9d2:	f803 1b01 	strb.w	r1, [r3], #1
 800c9d6:	e7f9      	b.n	800c9cc <memset+0x4>

0800c9d8 <strcat>:
 800c9d8:	b510      	push	{r4, lr}
 800c9da:	4602      	mov	r2, r0
 800c9dc:	7814      	ldrb	r4, [r2, #0]
 800c9de:	4613      	mov	r3, r2
 800c9e0:	3201      	adds	r2, #1
 800c9e2:	2c00      	cmp	r4, #0
 800c9e4:	d1fa      	bne.n	800c9dc <strcat+0x4>
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9f0:	2a00      	cmp	r2, #0
 800c9f2:	d1f9      	bne.n	800c9e8 <strcat+0x10>
 800c9f4:	bd10      	pop	{r4, pc}
	...

0800c9f8 <_sbrk_r>:
 800c9f8:	b538      	push	{r3, r4, r5, lr}
 800c9fa:	4d06      	ldr	r5, [pc, #24]	@ (800ca14 <_sbrk_r+0x1c>)
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	4604      	mov	r4, r0
 800ca00:	4608      	mov	r0, r1
 800ca02:	602b      	str	r3, [r5, #0]
 800ca04:	f7f6 fee4 	bl	80037d0 <_sbrk>
 800ca08:	1c43      	adds	r3, r0, #1
 800ca0a:	d102      	bne.n	800ca12 <_sbrk_r+0x1a>
 800ca0c:	682b      	ldr	r3, [r5, #0]
 800ca0e:	b103      	cbz	r3, 800ca12 <_sbrk_r+0x1a>
 800ca10:	6023      	str	r3, [r4, #0]
 800ca12:	bd38      	pop	{r3, r4, r5, pc}
 800ca14:	20000718 	.word	0x20000718

0800ca18 <__errno>:
 800ca18:	4b01      	ldr	r3, [pc, #4]	@ (800ca20 <__errno+0x8>)
 800ca1a:	6818      	ldr	r0, [r3, #0]
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop
 800ca20:	20000018 	.word	0x20000018

0800ca24 <__libc_init_array>:
 800ca24:	b570      	push	{r4, r5, r6, lr}
 800ca26:	4d0d      	ldr	r5, [pc, #52]	@ (800ca5c <__libc_init_array+0x38>)
 800ca28:	4c0d      	ldr	r4, [pc, #52]	@ (800ca60 <__libc_init_array+0x3c>)
 800ca2a:	1b64      	subs	r4, r4, r5
 800ca2c:	10a4      	asrs	r4, r4, #2
 800ca2e:	2600      	movs	r6, #0
 800ca30:	42a6      	cmp	r6, r4
 800ca32:	d109      	bne.n	800ca48 <__libc_init_array+0x24>
 800ca34:	4d0b      	ldr	r5, [pc, #44]	@ (800ca64 <__libc_init_array+0x40>)
 800ca36:	4c0c      	ldr	r4, [pc, #48]	@ (800ca68 <__libc_init_array+0x44>)
 800ca38:	f000 f87a 	bl	800cb30 <_init>
 800ca3c:	1b64      	subs	r4, r4, r5
 800ca3e:	10a4      	asrs	r4, r4, #2
 800ca40:	2600      	movs	r6, #0
 800ca42:	42a6      	cmp	r6, r4
 800ca44:	d105      	bne.n	800ca52 <__libc_init_array+0x2e>
 800ca46:	bd70      	pop	{r4, r5, r6, pc}
 800ca48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca4c:	4798      	blx	r3
 800ca4e:	3601      	adds	r6, #1
 800ca50:	e7ee      	b.n	800ca30 <__libc_init_array+0xc>
 800ca52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca56:	4798      	blx	r3
 800ca58:	3601      	adds	r6, #1
 800ca5a:	e7f2      	b.n	800ca42 <__libc_init_array+0x1e>
 800ca5c:	0800dabc 	.word	0x0800dabc
 800ca60:	0800dabc 	.word	0x0800dabc
 800ca64:	0800dabc 	.word	0x0800dabc
 800ca68:	0800dac0 	.word	0x0800dac0

0800ca6c <__retarget_lock_acquire_recursive>:
 800ca6c:	4770      	bx	lr

0800ca6e <__retarget_lock_release_recursive>:
 800ca6e:	4770      	bx	lr

0800ca70 <memcpy>:
 800ca70:	440a      	add	r2, r1
 800ca72:	4291      	cmp	r1, r2
 800ca74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca78:	d100      	bne.n	800ca7c <memcpy+0xc>
 800ca7a:	4770      	bx	lr
 800ca7c:	b510      	push	{r4, lr}
 800ca7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca86:	4291      	cmp	r1, r2
 800ca88:	d1f9      	bne.n	800ca7e <memcpy+0xe>
 800ca8a:	bd10      	pop	{r4, pc}

0800ca8c <_free_r>:
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	4605      	mov	r5, r0
 800ca90:	2900      	cmp	r1, #0
 800ca92:	d041      	beq.n	800cb18 <_free_r+0x8c>
 800ca94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca98:	1f0c      	subs	r4, r1, #4
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	bfb8      	it	lt
 800ca9e:	18e4      	addlt	r4, r4, r3
 800caa0:	f7ff ff50 	bl	800c944 <__malloc_lock>
 800caa4:	4a1d      	ldr	r2, [pc, #116]	@ (800cb1c <_free_r+0x90>)
 800caa6:	6813      	ldr	r3, [r2, #0]
 800caa8:	b933      	cbnz	r3, 800cab8 <_free_r+0x2c>
 800caaa:	6063      	str	r3, [r4, #4]
 800caac:	6014      	str	r4, [r2, #0]
 800caae:	4628      	mov	r0, r5
 800cab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cab4:	f7ff bf4c 	b.w	800c950 <__malloc_unlock>
 800cab8:	42a3      	cmp	r3, r4
 800caba:	d908      	bls.n	800cace <_free_r+0x42>
 800cabc:	6820      	ldr	r0, [r4, #0]
 800cabe:	1821      	adds	r1, r4, r0
 800cac0:	428b      	cmp	r3, r1
 800cac2:	bf01      	itttt	eq
 800cac4:	6819      	ldreq	r1, [r3, #0]
 800cac6:	685b      	ldreq	r3, [r3, #4]
 800cac8:	1809      	addeq	r1, r1, r0
 800caca:	6021      	streq	r1, [r4, #0]
 800cacc:	e7ed      	b.n	800caaa <_free_r+0x1e>
 800cace:	461a      	mov	r2, r3
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	b10b      	cbz	r3, 800cad8 <_free_r+0x4c>
 800cad4:	42a3      	cmp	r3, r4
 800cad6:	d9fa      	bls.n	800cace <_free_r+0x42>
 800cad8:	6811      	ldr	r1, [r2, #0]
 800cada:	1850      	adds	r0, r2, r1
 800cadc:	42a0      	cmp	r0, r4
 800cade:	d10b      	bne.n	800caf8 <_free_r+0x6c>
 800cae0:	6820      	ldr	r0, [r4, #0]
 800cae2:	4401      	add	r1, r0
 800cae4:	1850      	adds	r0, r2, r1
 800cae6:	4283      	cmp	r3, r0
 800cae8:	6011      	str	r1, [r2, #0]
 800caea:	d1e0      	bne.n	800caae <_free_r+0x22>
 800caec:	6818      	ldr	r0, [r3, #0]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	6053      	str	r3, [r2, #4]
 800caf2:	4408      	add	r0, r1
 800caf4:	6010      	str	r0, [r2, #0]
 800caf6:	e7da      	b.n	800caae <_free_r+0x22>
 800caf8:	d902      	bls.n	800cb00 <_free_r+0x74>
 800cafa:	230c      	movs	r3, #12
 800cafc:	602b      	str	r3, [r5, #0]
 800cafe:	e7d6      	b.n	800caae <_free_r+0x22>
 800cb00:	6820      	ldr	r0, [r4, #0]
 800cb02:	1821      	adds	r1, r4, r0
 800cb04:	428b      	cmp	r3, r1
 800cb06:	bf04      	itt	eq
 800cb08:	6819      	ldreq	r1, [r3, #0]
 800cb0a:	685b      	ldreq	r3, [r3, #4]
 800cb0c:	6063      	str	r3, [r4, #4]
 800cb0e:	bf04      	itt	eq
 800cb10:	1809      	addeq	r1, r1, r0
 800cb12:	6021      	streq	r1, [r4, #0]
 800cb14:	6054      	str	r4, [r2, #4]
 800cb16:	e7ca      	b.n	800caae <_free_r+0x22>
 800cb18:	bd38      	pop	{r3, r4, r5, pc}
 800cb1a:	bf00      	nop
 800cb1c:	200005dc 	.word	0x200005dc

0800cb20 <_malloc_usable_size_r>:
 800cb20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb24:	1f18      	subs	r0, r3, #4
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	bfbc      	itt	lt
 800cb2a:	580b      	ldrlt	r3, [r1, r0]
 800cb2c:	18c0      	addlt	r0, r0, r3
 800cb2e:	4770      	bx	lr

0800cb30 <_init>:
 800cb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb32:	bf00      	nop
 800cb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb36:	bc08      	pop	{r3}
 800cb38:	469e      	mov	lr, r3
 800cb3a:	4770      	bx	lr

0800cb3c <_fini>:
 800cb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb3e:	bf00      	nop
 800cb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb42:	bc08      	pop	{r3}
 800cb44:	469e      	mov	lr, r3
 800cb46:	4770      	bx	lr
