
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c95c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f68  0800cae4  0800cae4  0000dae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da4c  0800da4c  0000f068  2**0
                  CONTENTS
  4 .ARM          00000008  0800da4c  0800da4c  0000ea4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da54  0800da54  0000f068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da54  0800da54  0000ea54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da58  0800da58  0000ea58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800da5c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f068  2**0
                  CONTENTS
 10 .bss          000006b4  20000068  20000068  0000f068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000071c  2000071c  0000f068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a4bb  00000000  00000000  0000f098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d16  00000000  00000000  00029553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d0  00000000  00000000  0002d270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001270  00000000  00000000  0002ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b3b  00000000  00000000  0002fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f746  00000000  00000000  000557eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6ae5  00000000  00000000  00074f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014ba16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000680c  00000000  00000000  0014ba5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00152268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800cacc 	.word	0x0800cacc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800cacc 	.word	0x0800cacc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <play_audio_file>:

static uint32_t *buffer; /*Buffer pentru redare audio folosit static in fisier*/


void play_audio_file(char *path)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
	 * se va iesi din while(1), resetand fisierul la 0 si oprind fluxul DMA
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 80004d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004d4:	f00c f952 	bl	800c77c <malloc>
 80004d8:	4603      	mov	r3, r0
 80004da:	461a      	mov	r2, r3
 80004dc:	4b20      	ldr	r3, [pc, #128]	@ (8000560 <play_audio_file+0x98>)
 80004de:	601a      	str	r2, [r3, #0]

	if(buffer == NULL)
 80004e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <play_audio_file+0x98>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d036      	beq.n	8000556 <play_audio_file+0x8e>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	read_audio_file(path, buffer); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 80004e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <play_audio_file+0x98>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4619      	mov	r1, r3
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f002 f8aa 	bl	8002648 <read_audio_file>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 80004f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <play_audio_file+0x98>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	2300      	movs	r3, #0
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000500:	2100      	movs	r1, #0
 8000502:	4818      	ldr	r0, [pc, #96]	@ (8000564 <play_audio_file+0x9c>)
 8000504:	f003 fbba 	bl	8003c7c <HAL_DAC_Start_DMA>

	while(1)
	{
		read_audio_file(path, buffer+1024);
 8000508:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <play_audio_file+0x98>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000510:	4619      	mov	r1, r3
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f002 f898 	bl	8002648 <read_audio_file>
		while(flagDmaDAC == 0);
 8000518:	bf00      	nop
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <play_audio_file+0xa0>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	f083 0301 	eor.w	r3, r3, #1
 8000524:	b2db      	uxtb	r3, r3
 8000526:	2b00      	cmp	r3, #0
 8000528:	d1f7      	bne.n	800051a <play_audio_file+0x52>
		flagDmaDAC = 0;
 800052a:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <play_audio_file+0xa0>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
		read_audio_file(path, buffer);
 8000530:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <play_audio_file+0x98>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f002 f886 	bl	8002648 <read_audio_file>
		while(flagDmaDAC == 0);
 800053c:	bf00      	nop
 800053e:	4b0a      	ldr	r3, [pc, #40]	@ (8000568 <play_audio_file+0xa0>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b2db      	uxtb	r3, r3
 8000544:	f083 0301 	eor.w	r3, r3, #1
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1f7      	bne.n	800053e <play_audio_file+0x76>
		flagDmaDAC = 0;
 800054e:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <play_audio_file+0xa0>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
		read_audio_file(path, buffer+1024);
 8000554:	e7d8      	b.n	8000508 <play_audio_file+0x40>
		return;
 8000556:	bf00      	nop

	}

	free(buffer);

}
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000084 	.word	0x20000084
 8000564:	20000088 	.word	0x20000088
 8000568:	2000032a 	.word	0x2000032a

0800056c <convert_color_16_to_18>:

extern SPI_HandleTypeDef hspi1;
volatile extern uint8_t flagDmaSpiTx;

void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8000578:	88fb      	ldrh	r3, [r7, #6]
 800057a:	0adb      	lsrs	r3, r3, #11
 800057c:	b29b      	uxth	r3, r3
 800057e:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 8000580:	88fb      	ldrh	r3, [r7, #6]
 8000582:	115b      	asrs	r3, r3, #5
 8000584:	b2db      	uxtb	r3, r3
 8000586:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800058a:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f003 031f 	and.w	r3, r3, #31
 8000594:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 8000596:	7bfa      	ldrb	r2, [r7, #15]
 8000598:	4613      	mov	r3, r2
 800059a:	019b      	lsls	r3, r3, #6
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	4a16      	ldr	r2, [pc, #88]	@ (80005f8 <convert_color_16_to_18+0x8c>)
 80005a0:	fb82 1203 	smull	r1, r2, r2, r3
 80005a4:	441a      	add	r2, r3
 80005a6:	1112      	asrs	r2, r2, #4
 80005a8:	17db      	asrs	r3, r3, #31
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 80005b2:	7bbb      	ldrb	r3, [r7, #14]
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 80005b8:	7b7a      	ldrb	r2, [r7, #13]
 80005ba:	4613      	mov	r3, r2
 80005bc:	019b      	lsls	r3, r3, #6
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	4a0d      	ldr	r2, [pc, #52]	@ (80005f8 <convert_color_16_to_18+0x8c>)
 80005c2:	fb82 1203 	smull	r1, r2, r2, r3
 80005c6:	441a      	add	r2, r3
 80005c8:	1112      	asrs	r2, r2, #4
 80005ca:	17db      	asrs	r3, r3, #31
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	7bfa      	ldrb	r2, [r7, #15]
 80005d8:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	7bba      	ldrb	r2, [r7, #14]
 80005e0:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	3302      	adds	r3, #2
 80005e6:	7b7a      	ldrb	r2, [r7, #13]
 80005e8:	701a      	strb	r2, [r3, #0]

}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	84210843 	.word	0x84210843

080005fc <write_color>:


void write_color(uint16_t color)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 8000606:	f107 020c 	add.w	r2, r7, #12
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	4611      	mov	r1, r2
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff ffac 	bl	800056c <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000614:	f107 010c 	add.w	r1, r7, #12
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	2203      	movs	r2, #3
 800061e:	4803      	ldr	r0, [pc, #12]	@ (800062c <write_color+0x30>)
 8000620:	f005 ff57 	bl	80064d2 <HAL_SPI_Transmit>


}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000180 	.word	0x20000180

08000630 <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b085      	sub	sp, #20
 8000634:	af02      	add	r7, sp, #8
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	460b      	mov	r3, r1
 800063c:	80bb      	strh	r3, [r7, #4]
 800063e:	4613      	mov	r3, r2
 8000640:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 8000642:	88bb      	ldrh	r3, [r7, #4]
 8000644:	88fa      	ldrh	r2, [r7, #6]
 8000646:	88b9      	ldrh	r1, [r7, #4]
 8000648:	88f8      	ldrh	r0, [r7, #6]
 800064a:	2477      	movs	r4, #119	@ 0x77
 800064c:	9400      	str	r4, [sp, #0]
 800064e:	f001 f80d 	bl	800166c <set_adress_window>

	DC_DATA();
 8000652:	2201      	movs	r2, #1
 8000654:	2108      	movs	r1, #8
 8000656:	480a      	ldr	r0, [pc, #40]	@ (8000680 <draw_pixel+0x50>)
 8000658:	f004 fa68 	bl	8004b2c <HAL_GPIO_WritePin>
	CS_A();
 800065c:	2200      	movs	r2, #0
 800065e:	2110      	movs	r1, #16
 8000660:	4807      	ldr	r0, [pc, #28]	@ (8000680 <draw_pixel+0x50>)
 8000662:	f004 fa63 	bl	8004b2c <HAL_GPIO_WritePin>

	write_color(color);
 8000666:	887b      	ldrh	r3, [r7, #2]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffc7 	bl	80005fc <write_color>

	CS_D();
 800066e:	2201      	movs	r2, #1
 8000670:	2110      	movs	r1, #16
 8000672:	4803      	ldr	r0, [pc, #12]	@ (8000680 <draw_pixel+0x50>)
 8000674:	f004 fa5a 	bl	8004b2c <HAL_GPIO_WritePin>

}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}
 8000680:	40020c00 	.word	0x40020c00

08000684 <fill_screen1>:




void fill_screen1(uint16_t color)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af02      	add	r7, sp, #8
 800068a:	4603      	mov	r3, r0
 800068c:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 800068e:	f107 020c 	add.w	r2, r7, #12
 8000692:	88fb      	ldrh	r3, [r7, #6]
 8000694:	4611      	mov	r1, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff68 	bl	800056c <convert_color_16_to_18>

	uint8_t *line = malloc(320*sizeof(pixel));
 800069c:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 80006a0:	f00c f86c 	bl	800c77c <malloc>
 80006a4:	4603      	mov	r3, r0
 80006a6:	613b      	str	r3, [r7, #16]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 80006a8:	2377      	movs	r3, #119	@ 0x77
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	f240 13df 	movw	r3, #479	@ 0x1df
 80006b0:	f240 123f 	movw	r2, #319	@ 0x13f
 80006b4:	2100      	movs	r1, #0
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 ffd8 	bl	800166c <set_adress_window>

	DC_DATA();
 80006bc:	2201      	movs	r2, #1
 80006be:	2108      	movs	r1, #8
 80006c0:	481e      	ldr	r0, [pc, #120]	@ (800073c <fill_screen1+0xb8>)
 80006c2:	f004 fa33 	bl	8004b2c <HAL_GPIO_WritePin>
	CS_A();
 80006c6:	2200      	movs	r2, #0
 80006c8:	2110      	movs	r1, #16
 80006ca:	481c      	ldr	r0, [pc, #112]	@ (800073c <fill_screen1+0xb8>)
 80006cc:	f004 fa2e 	bl	8004b2c <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 80006d0:	2300      	movs	r3, #0
 80006d2:	82fb      	strh	r3, [r7, #22]
 80006d4:	e00f      	b.n	80006f6 <fill_screen1+0x72>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 80006d6:	8afa      	ldrh	r2, [r7, #22]
 80006d8:	4613      	mov	r3, r2
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	4413      	add	r3, r2
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	4413      	add	r3, r2
 80006e2:	461a      	mov	r2, r3
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	8819      	ldrh	r1, [r3, #0]
 80006ea:	789b      	ldrb	r3, [r3, #2]
 80006ec:	8011      	strh	r1, [r2, #0]
 80006ee:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 80006f0:	8afb      	ldrh	r3, [r7, #22]
 80006f2:	3301      	adds	r3, #1
 80006f4:	82fb      	strh	r3, [r7, #22]
 80006f6:	8afb      	ldrh	r3, [r7, #22]
 80006f8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80006fc:	d3eb      	bcc.n	80006d6 <fill_screen1+0x52>
	}

	for(uint16_t y=0; y<480; y++)
 80006fe:	2300      	movs	r3, #0
 8000700:	82bb      	strh	r3, [r7, #20]
 8000702:	e00a      	b.n	800071a <fill_screen1+0x96>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 800070c:	6939      	ldr	r1, [r7, #16]
 800070e:	480c      	ldr	r0, [pc, #48]	@ (8000740 <fill_screen1+0xbc>)
 8000710:	f005 fedf 	bl	80064d2 <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 8000714:	8abb      	ldrh	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	82bb      	strh	r3, [r7, #20]
 800071a:	8abb      	ldrh	r3, [r7, #20]
 800071c:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000720:	d3f0      	bcc.n	8000704 <fill_screen1+0x80>

	}

	free(line);
 8000722:	6938      	ldr	r0, [r7, #16]
 8000724:	f00c f832 	bl	800c78c <free>

	CS_D();
 8000728:	2201      	movs	r2, #1
 800072a:	2110      	movs	r1, #16
 800072c:	4803      	ldr	r0, [pc, #12]	@ (800073c <fill_screen1+0xb8>)
 800072e:	f004 f9fd 	bl	8004b2c <HAL_GPIO_WritePin>

}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40020c00 	.word	0x40020c00
 8000740:	20000180 	.word	0x20000180

08000744 <fill_screen2>:


void fill_screen2(uint16_t color)
{
 8000744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000748:	b08f      	sub	sp, #60	@ 0x3c
 800074a:	af02      	add	r7, sp, #8
 800074c:	4603      	mov	r3, r0
 800074e:	80fb      	strh	r3, [r7, #6]
 8000750:	466b      	mov	r3, sp
 8000752:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8000754:	2377      	movs	r3, #119	@ 0x77
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	f240 13df 	movw	r3, #479	@ 0x1df
 800075c:	f240 123f 	movw	r2, #319	@ 0x13f
 8000760:	2100      	movs	r1, #0
 8000762:	2000      	movs	r0, #0
 8000764:	f000 ff82 	bl	800166c <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 8000768:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 800076e:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8000772:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8000774:	88fb      	ldrh	r3, [r7, #6]
 8000776:	0adb      	lsrs	r3, r3, #11
 8000778:	b29b      	uxth	r3, r3
 800077a:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 800077c:	88fb      	ldrh	r3, [r7, #6]
 800077e:	115b      	asrs	r3, r3, #5
 8000780:	b2db      	uxtb	r3, r3
 8000782:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000786:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 8000788:	88fb      	ldrh	r3, [r7, #6]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	f003 031f 	and.w	r3, r3, #31
 8000790:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 8000792:	7ffa      	ldrb	r2, [r7, #31]
 8000794:	4613      	mov	r3, r2
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	4a4f      	ldr	r2, [pc, #316]	@ (80008d8 <fill_screen2+0x194>)
 800079c:	fb82 1203 	smull	r1, r2, r2, r3
 80007a0:	441a      	add	r2, r3
 80007a2:	1112      	asrs	r2, r2, #4
 80007a4:	17db      	asrs	r3, r3, #31
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 80007aa:	7fba      	ldrb	r2, [r7, #30]
 80007ac:	4613      	mov	r3, r2
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	4a4a      	ldr	r2, [pc, #296]	@ (80008dc <fill_screen2+0x198>)
 80007b4:	fb82 1203 	smull	r1, r2, r2, r3
 80007b8:	441a      	add	r2, r3
 80007ba:	1152      	asrs	r2, r2, #5
 80007bc:	17db      	asrs	r3, r3, #31
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 80007c2:	7f7a      	ldrb	r2, [r7, #29]
 80007c4:	4613      	mov	r3, r2
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	1a9b      	subs	r3, r3, r2
 80007ca:	4a43      	ldr	r2, [pc, #268]	@ (80008d8 <fill_screen2+0x194>)
 80007cc:	fb82 1203 	smull	r1, r2, r2, r3
 80007d0:	441a      	add	r2, r3
 80007d2:	1112      	asrs	r2, r2, #4
 80007d4:	17db      	asrs	r3, r3, #31
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 80007da:	2201      	movs	r2, #1
 80007dc:	2108      	movs	r1, #8
 80007de:	4840      	ldr	r0, [pc, #256]	@ (80008e0 <fill_screen2+0x19c>)
 80007e0:	f004 f9a4 	bl	8004b2c <HAL_GPIO_WritePin>
	CS_A();
 80007e4:	2200      	movs	r2, #0
 80007e6:	2110      	movs	r1, #16
 80007e8:	483d      	ldr	r0, [pc, #244]	@ (80008e0 <fill_screen2+0x19c>)
 80007ea:	f004 f99f 	bl	8004b2c <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 80007ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007f0:	460b      	mov	r3, r1
 80007f2:	3b01      	subs	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	2300      	movs	r3, #0
 80007f8:	4688      	mov	r8, r1
 80007fa:	4699      	mov	r9, r3
 80007fc:	f04f 0200 	mov.w	r2, #0
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000808:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800080c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000810:	2300      	movs	r3, #0
 8000812:	460c      	mov	r4, r1
 8000814:	461d      	mov	r5, r3
 8000816:	f04f 0200 	mov.w	r2, #0
 800081a:	f04f 0300 	mov.w	r3, #0
 800081e:	00eb      	lsls	r3, r5, #3
 8000820:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000824:	00e2      	lsls	r2, r4, #3
 8000826:	1dcb      	adds	r3, r1, #7
 8000828:	08db      	lsrs	r3, r3, #3
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	ebad 0d03 	sub.w	sp, sp, r3
 8000830:	ab02      	add	r3, sp, #8
 8000832:	3300      	adds	r3, #0
 8000834:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800083a:	e011      	b.n	8000860 <fill_screen2+0x11c>
	{
		frame[j] = r;
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000840:	4413      	add	r3, r2
 8000842:	7ffa      	ldrb	r2, [r7, #31]
 8000844:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 8000846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000848:	3301      	adds	r3, #1
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	7fb9      	ldrb	r1, [r7, #30]
 800084e:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 8000850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000852:	3302      	adds	r3, #2
 8000854:	697a      	ldr	r2, [r7, #20]
 8000856:	7f79      	ldrb	r1, [r7, #29]
 8000858:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 800085a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800085c:	3303      	adds	r3, #3
 800085e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000864:	429a      	cmp	r2, r3
 8000866:	d3e9      	bcc.n	800083c <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 8000868:	6a3a      	ldr	r2, [r7, #32]
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 8000872:	693a      	ldr	r2, [r7, #16]
 8000874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 800087c:	4b19      	ldr	r3, [pc, #100]	@ (80008e4 <fill_screen2+0x1a0>)
 800087e:	2201      	movs	r2, #1
 8000880:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000886:	e012      	b.n	80008ae <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 8000888:	bf00      	nop
 800088a:	4b16      	ldr	r3, [pc, #88]	@ (80008e4 <fill_screen2+0x1a0>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0fa      	beq.n	800088a <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 8000894:	4b13      	ldr	r3, [pc, #76]	@ (80008e4 <fill_screen2+0x1a0>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 800089a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800089c:	b29b      	uxth	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	6979      	ldr	r1, [r7, #20]
 80008a2:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <fill_screen2+0x1a4>)
 80008a4:	f006 fa1c 	bl	8006ce0 <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 80008a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008aa:	3301      	adds	r3, #1
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d3e8      	bcc.n	8000888 <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 80008b6:	bf00      	nop
 80008b8:	4b0a      	ldr	r3, [pc, #40]	@ (80008e4 <fill_screen2+0x1a0>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0fa      	beq.n	80008b8 <fill_screen2+0x174>
	CS_D();
 80008c2:	2201      	movs	r2, #1
 80008c4:	2110      	movs	r1, #16
 80008c6:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <fill_screen2+0x19c>)
 80008c8:	f004 f930 	bl	8004b2c <HAL_GPIO_WritePin>
 80008cc:	46b5      	mov	sp, r6
}
 80008ce:	bf00      	nop
 80008d0:	3734      	adds	r7, #52	@ 0x34
 80008d2:	46bd      	mov	sp, r7
 80008d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80008d8:	84210843 	.word	0x84210843
 80008dc:	82082083 	.word	0x82082083
 80008e0:	40020c00 	.word	0x40020c00
 80008e4:	20000328 	.word	0x20000328
 80008e8:	20000180 	.word	0x20000180

080008ec <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b089      	sub	sp, #36	@ 0x24
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	4604      	mov	r4, r0
 80008f4:	4608      	mov	r0, r1
 80008f6:	4611      	mov	r1, r2
 80008f8:	461a      	mov	r2, r3
 80008fa:	4623      	mov	r3, r4
 80008fc:	80fb      	strh	r3, [r7, #6]
 80008fe:	4603      	mov	r3, r0
 8000900:	80bb      	strh	r3, [r7, #4]
 8000902:	460b      	mov	r3, r1
 8000904:	70fb      	strb	r3, [r7, #3]
 8000906:	4613      	mov	r3, r2
 8000908:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 800090a:	4b3a      	ldr	r3, [pc, #232]	@ (80009f4 <print_character+0x108>)
 800090c:	889a      	ldrh	r2, [r3, #4]
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	4413      	add	r3, r2
 8000912:	b29b      	uxth	r3, r3
 8000914:	3b01      	subs	r3, #1
 8000916:	b29c      	uxth	r4, r3
 8000918:	4b36      	ldr	r3, [pc, #216]	@ (80009f4 <print_character+0x108>)
 800091a:	88da      	ldrh	r2, [r3, #6]
 800091c:	88bb      	ldrh	r3, [r7, #4]
 800091e:	4413      	add	r3, r2
 8000920:	b29b      	uxth	r3, r3
 8000922:	3b01      	subs	r3, #1
 8000924:	b29b      	uxth	r3, r3
 8000926:	88b9      	ldrh	r1, [r7, #4]
 8000928:	88f8      	ldrh	r0, [r7, #6]
 800092a:	2277      	movs	r2, #119	@ 0x77
 800092c:	9200      	str	r2, [sp, #0]
 800092e:	4622      	mov	r2, r4
 8000930:	f000 fe9c 	bl	800166c <set_adress_window>

	uint16_t mask = 0x8000;
 8000934:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000938:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 800093e:	f107 020c 	add.w	r2, r7, #12
 8000942:	883b      	ldrh	r3, [r7, #0]
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fe10 	bl	800056c <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 800094c:	f107 0208 	add.w	r2, r7, #8
 8000950:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe09 	bl	800056c <convert_color_16_to_18>


	DC_DATA();
 800095a:	2201      	movs	r2, #1
 800095c:	2108      	movs	r1, #8
 800095e:	4826      	ldr	r0, [pc, #152]	@ (80009f8 <print_character+0x10c>)
 8000960:	f004 f8e4 	bl	8004b2c <HAL_GPIO_WritePin>
	CS_A();
 8000964:	2200      	movs	r2, #0
 8000966:	2110      	movs	r1, #16
 8000968:	4823      	ldr	r0, [pc, #140]	@ (80009f8 <print_character+0x10c>)
 800096a:	f004 f8df 	bl	8004b2c <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 800096e:	2300      	movs	r3, #0
 8000970:	75fb      	strb	r3, [r7, #23]
 8000972:	e030      	b.n	80009d6 <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 8000974:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <print_character+0x108>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	78fb      	ldrb	r3, [r7, #3]
 800097a:	3b20      	subs	r3, #32
 800097c:	491d      	ldr	r1, [pc, #116]	@ (80009f4 <print_character+0x108>)
 800097e:	88c9      	ldrh	r1, [r1, #6]
 8000980:	fb03 f101 	mul.w	r1, r3, r1
 8000984:	7dfb      	ldrb	r3, [r7, #23]
 8000986:	440b      	add	r3, r1
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	4413      	add	r3, r2
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8000990:	2300      	movs	r3, #0
 8000992:	75bb      	strb	r3, [r7, #22]
 8000994:	e016      	b.n	80009c4 <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 8000996:	8a7a      	ldrh	r2, [r7, #18]
 8000998:	7dbb      	ldrb	r3, [r7, #22]
 800099a:	409a      	lsls	r2, r3
 800099c:	8abb      	ldrh	r3, [r7, #20]
 800099e:	4013      	ands	r3, r2
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d006      	beq.n	80009b2 <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2103      	movs	r1, #3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fcc6 	bl	800133c <LCD_send_data_multi>
 80009b0:	e005      	b.n	80009be <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	2103      	movs	r1, #3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fcbf 	bl	800133c <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 80009be:	7dbb      	ldrb	r3, [r7, #22]
 80009c0:	3301      	adds	r3, #1
 80009c2:	75bb      	strb	r3, [r7, #22]
 80009c4:	7dbb      	ldrb	r3, [r7, #22]
 80009c6:	b29a      	uxth	r2, r3
 80009c8:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <print_character+0x108>)
 80009ca:	889b      	ldrh	r3, [r3, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3e2      	bcc.n	8000996 <print_character+0xaa>
	for(i=0; i<font.height; i++)
 80009d0:	7dfb      	ldrb	r3, [r7, #23]
 80009d2:	3301      	adds	r3, #1
 80009d4:	75fb      	strb	r3, [r7, #23]
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <print_character+0x108>)
 80009dc:	88db      	ldrh	r3, [r3, #6]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d3c8      	bcc.n	8000974 <print_character+0x88>
			}
		}
	}

	CS_D();
 80009e2:	2201      	movs	r2, #1
 80009e4:	2110      	movs	r1, #16
 80009e6:	4804      	ldr	r0, [pc, #16]	@ (80009f8 <print_character+0x10c>)
 80009e8:	f004 f8a0 	bl	8004b2c <HAL_GPIO_WritePin>

}
 80009ec:	bf00      	nop
 80009ee:	371c      	adds	r7, #28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	40020c00 	.word	0x40020c00

080009fc <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint8_t n, uint16_t fontColor, uint16_t backColor)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b089      	sub	sp, #36	@ 0x24
 8000a00:	af02      	add	r7, sp, #8
 8000a02:	60ba      	str	r2, [r7, #8]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4603      	mov	r3, r0
 8000a08:	81fb      	strh	r3, [r7, #14]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	81bb      	strh	r3, [r7, #12]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	71fb      	strb	r3, [r7, #7]

	char *temp = string;
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	617b      	str	r3, [r7, #20]

	while(string<(temp+n))
 8000a16:	e027      	b.n	8000a68 <print_string+0x6c>
	{
		if(x + font.width > 320)
 8000a18:	89fb      	ldrh	r3, [r7, #14]
 8000a1a:	4a19      	ldr	r2, [pc, #100]	@ (8000a80 <print_string+0x84>)
 8000a1c:	8892      	ldrh	r2, [r2, #4]
 8000a1e:	4413      	add	r3, r2
 8000a20:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a24:	dd07      	ble.n	8000a36 <print_string+0x3a>
		{
			x = font.width;
 8000a26:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <print_string+0x84>)
 8000a28:	889b      	ldrh	r3, [r3, #4]
 8000a2a:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <print_string+0x84>)
 8000a2e:	88da      	ldrh	r2, [r3, #6]
 8000a30:	89bb      	ldrh	r3, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 8000a36:	89bb      	ldrh	r3, [r7, #12]
 8000a38:	4a11      	ldr	r2, [pc, #68]	@ (8000a80 <print_string+0x84>)
 8000a3a:	88d2      	ldrh	r2, [r2, #6]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000a42:	dc18      	bgt.n	8000a76 <print_string+0x7a>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	781a      	ldrb	r2, [r3, #0]
 8000a48:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000a4a:	89b9      	ldrh	r1, [r7, #12]
 8000a4c:	89f8      	ldrh	r0, [r7, #14]
 8000a4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	4623      	mov	r3, r4
 8000a54:	f7ff ff4a 	bl	80008ec <print_character>
		string++;
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <print_string+0x84>)
 8000a60:	889a      	ldrh	r2, [r3, #4]
 8000a62:	89fb      	ldrh	r3, [r7, #14]
 8000a64:	4413      	add	r3, r2
 8000a66:	81fb      	strh	r3, [r7, #14]
	while(string<(temp+n))
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3d1      	bcc.n	8000a18 <print_string+0x1c>
 8000a74:	e000      	b.n	8000a78 <print_string+0x7c>
			return;
 8000a76:	bf00      	nop
	}

}
 8000a78:	371c      	adds	r7, #28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd90      	pop	{r4, r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000000 	.word	0x20000000

08000a84 <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b087      	sub	sp, #28
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4611      	mov	r1, r2
 8000a90:	461a      	mov	r2, r3
 8000a92:	4623      	mov	r3, r4
 8000a94:	80fb      	strh	r3, [r7, #6]
 8000a96:	4603      	mov	r3, r0
 8000a98:	80bb      	strh	r3, [r7, #4]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	807b      	strh	r3, [r7, #2]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8000aa2:	88fa      	ldrh	r2, [r7, #6]
 8000aa4:	887b      	ldrh	r3, [r7, #2]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 8000aaa:	887b      	ldrh	r3, [r7, #2]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	88bb      	ldrh	r3, [r7, #4]
 8000ab2:	88b9      	ldrh	r1, [r7, #4]
 8000ab4:	88f8      	ldrh	r0, [r7, #6]
 8000ab6:	2477      	movs	r4, #119	@ 0x77
 8000ab8:	9400      	str	r4, [sp, #0]
 8000aba:	f000 fdd7 	bl	800166c <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000abe:	f107 0208 	add.w	r2, r7, #8
 8000ac2:	883b      	ldrh	r3, [r7, #0]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fd50 	bl	800056c <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	81fb      	strh	r3, [r7, #14]
 8000ad0:	e008      	b.n	8000ae4 <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	2103      	movs	r1, #3
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 fc2f 	bl	800133c <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 8000ade:	89fb      	ldrh	r3, [r7, #14]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	81fb      	strh	r3, [r7, #14]
 8000ae4:	89fa      	ldrh	r2, [r7, #14]
 8000ae6:	8879      	ldrh	r1, [r7, #2]
 8000ae8:	88fb      	ldrh	r3, [r7, #6]
 8000aea:	1acb      	subs	r3, r1, r3
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf0      	blt.n	8000ad2 <draw_horizontal_line+0x4e>
	}


}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd90      	pop	{r4, r7, pc}

08000afa <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000afa:	b590      	push	{r4, r7, lr}
 8000afc:	b087      	sub	sp, #28
 8000afe:	af02      	add	r7, sp, #8
 8000b00:	4604      	mov	r4, r0
 8000b02:	4608      	mov	r0, r1
 8000b04:	4611      	mov	r1, r2
 8000b06:	461a      	mov	r2, r3
 8000b08:	4623      	mov	r3, r4
 8000b0a:	80fb      	strh	r3, [r7, #6]
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	80bb      	strh	r3, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	807b      	strh	r3, [r7, #2]
 8000b14:	4613      	mov	r3, r2
 8000b16:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 8000b18:	88ba      	ldrh	r2, [r7, #4]
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8000b20:	887b      	ldrh	r3, [r7, #2]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	88fa      	ldrh	r2, [r7, #6]
 8000b28:	88b9      	ldrh	r1, [r7, #4]
 8000b2a:	88f8      	ldrh	r0, [r7, #6]
 8000b2c:	2477      	movs	r4, #119	@ 0x77
 8000b2e:	9400      	str	r4, [sp, #0]
 8000b30:	f000 fd9c 	bl	800166c <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000b34:	f107 0208 	add.w	r2, r7, #8
 8000b38:	883b      	ldrh	r3, [r7, #0]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fd15 	bl	800056c <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	81fb      	strh	r3, [r7, #14]
 8000b46:	e008      	b.n	8000b5a <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fbf4 	bl	800133c <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8000b54:	89fb      	ldrh	r3, [r7, #14]
 8000b56:	3301      	adds	r3, #1
 8000b58:	81fb      	strh	r3, [r7, #14]
 8000b5a:	89fa      	ldrh	r2, [r7, #14]
 8000b5c:	8879      	ldrh	r1, [r7, #2]
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	1acb      	subs	r3, r1, r3
 8000b62:	429a      	cmp	r2, r3
 8000b64:	dbf0      	blt.n	8000b48 <draw_vertical_line+0x4e>
	}


}
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd90      	pop	{r4, r7, pc}

08000b70 <draw_rectangle>:


void draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b089      	sub	sp, #36	@ 0x24
 8000b74:	af02      	add	r7, sp, #8
 8000b76:	4604      	mov	r4, r0
 8000b78:	4608      	mov	r0, r1
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4623      	mov	r3, r4
 8000b80:	80fb      	strh	r3, [r7, #6]
 8000b82:	4603      	mov	r3, r0
 8000b84:	80bb      	strh	r3, [r7, #4]
 8000b86:	460b      	mov	r3, r1
 8000b88:	807b      	strh	r3, [r7, #2]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */


	uint8_t pixel[3];
	uint16_t pixelNr = x1*y1;
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	883b      	ldrh	r3, [r7, #0]
 8000b92:	fb12 f303 	smulbb	r3, r2, r3
 8000b96:	82bb      	strh	r3, [r7, #20]
	convert_color_16_to_18(color, pixel);
 8000b98:	f107 020c 	add.w	r2, r7, #12
 8000b9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fce3 	bl	800056c <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*pixelNr);
 8000ba6:	8aba      	ldrh	r2, [r7, #20]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00b fde4 	bl	800c77c <malloc>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	613b      	str	r3, [r7, #16]

	for(uint16_t i=0; i<pixelNr; i++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	82fb      	strh	r3, [r7, #22]
 8000bbc:	e00f      	b.n	8000bde <draw_rectangle+0x6e>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000bbe:	8afa      	ldrh	r2, [r7, #22]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4413      	add	r3, r2
 8000bca:	461a      	mov	r2, r3
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	8819      	ldrh	r1, [r3, #0]
 8000bd2:	789b      	ldrb	r3, [r3, #2]
 8000bd4:	8011      	strh	r1, [r2, #0]
 8000bd6:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<pixelNr; i++)
 8000bd8:	8afb      	ldrh	r3, [r7, #22]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	82fb      	strh	r3, [r7, #22]
 8000bde:	8afa      	ldrh	r2, [r7, #22]
 8000be0:	8abb      	ldrh	r3, [r7, #20]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d3eb      	bcc.n	8000bbe <draw_rectangle+0x4e>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 8000be6:	88fa      	ldrh	r2, [r7, #6]
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	4413      	add	r3, r2
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	b29c      	uxth	r4, r3
 8000bf2:	88ba      	ldrh	r2, [r7, #4]
 8000bf4:	883b      	ldrh	r3, [r7, #0]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	88b9      	ldrh	r1, [r7, #4]
 8000c00:	88f8      	ldrh	r0, [r7, #6]
 8000c02:	2277      	movs	r2, #119	@ 0x77
 8000c04:	9200      	str	r2, [sp, #0]
 8000c06:	4622      	mov	r2, r4
 8000c08:	f000 fd30 	bl	800166c <set_adress_window>
	LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000c0c:	8aba      	ldrh	r2, [r7, #20]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	4619      	mov	r1, r3
 8000c16:	6938      	ldr	r0, [r7, #16]
 8000c18:	f000 fb90 	bl	800133c <LCD_send_data_multi>

	free(data);
 8000c1c:	6938      	ldr	r0, [r7, #16]
 8000c1e:	f00b fdb5 	bl	800c78c <free>

}
 8000c22:	bf00      	nop
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd90      	pop	{r4, r7, pc}
	...

08000c2c <draw_entity>:


void draw_entity(ENTITY *entity, char *filePathName)
{
 8000c2c:	b590      	push	{r4, r7, lr}
 8000c2e:	b089      	sub	sp, #36	@ 0x24
 8000c30:	af02      	add	r7, sp, #8
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	 * Feature: De dat ca parametru numele unui fisier ce contine datele imaginii
	 * de afisat si nu culoarea, parametrul color e doar de test
	 */

	uint8_t *data;
	bool flagImgDone = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]

	if((entity->id != 0) || (filePathName==NULL))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d102      	bne.n	8000c48 <draw_entity+0x1c>
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d163      	bne.n	8000d10 <draw_entity+0xe4>
	{
		/*Avem imagine monocolor sub 32x32 -> imagine nu se afla pe cardul SD!*/

		uint16_t pixelNr = (entity->x1)*(entity->y1);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	fb12 f303 	smulbb	r3, r2, r3
 8000c5c:	82bb      	strh	r3, [r7, #20]

		uint8_t pixel[3];
		convert_color_16_to_18(entity->color, pixel);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	895b      	ldrh	r3, [r3, #10]
 8000c62:	f107 020c 	add.w	r2, r7, #12
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fc7f 	bl	800056c <convert_color_16_to_18>

		data = malloc(sizeof(pixel)*pixelNr);
 8000c6e:	8aba      	ldrh	r2, [r7, #20]
 8000c70:	4613      	mov	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	4413      	add	r3, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f00b fd80 	bl	800c77c <malloc>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	613b      	str	r3, [r7, #16]

		for(uint16_t i=0;i<pixelNr;i++ )
 8000c80:	2300      	movs	r3, #0
 8000c82:	82fb      	strh	r3, [r7, #22]
 8000c84:	e00f      	b.n	8000ca6 <draw_entity+0x7a>
		{
			memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000c86:	8afa      	ldrh	r2, [r7, #22]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4413      	add	r3, r2
 8000c92:	461a      	mov	r2, r3
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	8819      	ldrh	r1, [r3, #0]
 8000c9a:	789b      	ldrb	r3, [r3, #2]
 8000c9c:	8011      	strh	r1, [r2, #0]
 8000c9e:	7093      	strb	r3, [r2, #2]
		for(uint16_t i=0;i<pixelNr;i++ )
 8000ca0:	8afb      	ldrh	r3, [r7, #22]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	82fb      	strh	r3, [r7, #22]
 8000ca6:	8afa      	ldrh	r2, [r7, #22]
 8000ca8:	8abb      	ldrh	r3, [r7, #20]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d3eb      	bcc.n	8000c86 <draw_entity+0x5a>
		}

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cb4:	b298      	uxth	r0, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cbc:	b299      	uxth	r1, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	4413      	add	r3, r2
 8000cd0:	b29b      	uxth	r3, r3
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	b29c      	uxth	r4, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	3b01      	subs	r3, #1
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	2277      	movs	r2, #119	@ 0x77
 8000cf0:	9200      	str	r2, [sp, #0]
 8000cf2:	4622      	mov	r2, r4
 8000cf4:	f000 fcba 	bl	800166c <set_adress_window>
		LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000cf8:	8aba      	ldrh	r2, [r7, #20]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	6938      	ldr	r0, [r7, #16]
 8000d04:	f000 fb1a 	bl	800133c <LCD_send_data_multi>

		free(data);
 8000d08:	6938      	ldr	r0, [r7, #16]
 8000d0a:	f00b fd3f 	bl	800c78c <free>
	{
 8000d0e:	e084      	b.n	8000e1a <draw_entity+0x1ee>

	else
	{
		/*Imagine stocata in bufferul *data din cardul SD*/

		uint16_t byteNr = 0; /*index*/
 8000d10:	2300      	movs	r3, #0
 8000d12:	817b      	strh	r3, [r7, #10]

		read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8000d14:	f107 030f 	add.w	r3, r7, #15
 8000d18:	f107 020a 	add.w	r2, r7, #10
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	6838      	ldr	r0, [r7, #0]
 8000d20:	f001 fdbe 	bl	80028a0 <read_image_file>

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d2a:	b298      	uxth	r0, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d32:	b299      	uxth	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	4413      	add	r3, r2
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	b29c      	uxth	r4, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	3b01      	subs	r3, #1
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	2277      	movs	r2, #119	@ 0x77
 8000d66:	9200      	str	r2, [sp, #0]
 8000d68:	4622      	mov	r2, r4
 8000d6a:	f000 fc7f 	bl	800166c <set_adress_window>

		DC_DATA();
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2108      	movs	r1, #8
 8000d72:	482b      	ldr	r0, [pc, #172]	@ (8000e20 <draw_entity+0x1f4>)
 8000d74:	f003 feda 	bl	8004b2c <HAL_GPIO_WritePin>
		CS_A();
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	4828      	ldr	r0, [pc, #160]	@ (8000e20 <draw_entity+0x1f4>)
 8000d7e:	f003 fed5 	bl	8004b2c <HAL_GPIO_WritePin>

		if(byteNr < 3072)
 8000d82:	897b      	ldrh	r3, [r7, #10]
 8000d84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000d88:	d20c      	bcs.n	8000da4 <draw_entity+0x178>
		{
			/*
			 * Pentru cazul unui singur frame de transmis
			 */

			LCD_send_data_multi(entity->data, byteNr);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	897a      	ldrh	r2, [r7, #10]
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fad2 	bl	800133c <LCD_send_data_multi>
			free(entity->data);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f00b fcf5 	bl	800c78c <free>
 8000da2:	e03a      	b.n	8000e1a <draw_entity+0x1ee>
		else
		{
			/*
			 * Pentru cazul mai multor frameuri
			 */
			flagDmaSpiTx = 0;
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <draw_entity+0x1f8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]

			//LCD_send_data_multi(entity->data, byteNr);
			HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	897a      	ldrh	r2, [r7, #10]
 8000db0:	4619      	mov	r1, r3
 8000db2:	481d      	ldr	r0, [pc, #116]	@ (8000e28 <draw_entity+0x1fc>)
 8000db4:	f005 ff94 	bl	8006ce0 <HAL_SPI_Transmit_DMA>

			do
			{
				if(flagImgDone == 1)
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d11c      	bne.n	8000df8 <draw_entity+0x1cc>
				{
					break;
				}

				read_image_file(filePathName, entity, &byteNr, &flagImgDone);
 8000dbe:	f107 030f 	add.w	r3, r7, #15
 8000dc2:	f107 020a 	add.w	r2, r7, #10
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	6838      	ldr	r0, [r7, #0]
 8000dca:	f001 fd69 	bl	80028a0 <read_image_file>

				while(flagDmaSpiTx == 0);
 8000dce:	bf00      	nop
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <draw_entity+0x1f8>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d0fa      	beq.n	8000dd0 <draw_entity+0x1a4>
				flagDmaSpiTx = 0;
 8000dda:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <draw_entity+0x1f8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, entity->data, byteNr);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	897a      	ldrh	r2, [r7, #10]
 8000de6:	4619      	mov	r1, r3
 8000de8:	480f      	ldr	r0, [pc, #60]	@ (8000e28 <draw_entity+0x1fc>)
 8000dea:	f005 ff79 	bl	8006ce0 <HAL_SPI_Transmit_DMA>

			}while(byteNr >= 3072);
 8000dee:	897b      	ldrh	r3, [r7, #10]
 8000df0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8000df4:	d2e0      	bcs.n	8000db8 <draw_entity+0x18c>
 8000df6:	e000      	b.n	8000dfa <draw_entity+0x1ce>
					break;
 8000df8:	bf00      	nop

		}

		while(flagDmaSpiTx == 0);
 8000dfa:	bf00      	nop
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <draw_entity+0x1f8>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0fa      	beq.n	8000dfc <draw_entity+0x1d0>
		free(entity->data);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f00b fcbe 	bl	800c78c <free>
		CS_D();
 8000e10:	2201      	movs	r2, #1
 8000e12:	2110      	movs	r1, #16
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <draw_entity+0x1f4>)
 8000e16:	f003 fe89 	bl	8004b2c <HAL_GPIO_WritePin>

	}


}
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	40020c00 	.word	0x40020c00
 8000e24:	20000328 	.word	0x20000328
 8000e28:	20000180 	.word	0x20000180

08000e2c <translation_entity>:



void translation_entity(ENTITY *const restrict entity, int16_t x, int16_t y, bool TurnOnStep)
{
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	b08c      	sub	sp, #48	@ 0x30
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	4608      	mov	r0, r1
 8000e36:	4611      	mov	r1, r2
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	817b      	strh	r3, [r7, #10]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	813b      	strh	r3, [r7, #8]
 8000e42:	4613      	mov	r3, r2
 8000e44:	71fb      	strb	r3, [r7, #7]
	 * de afisat
	 * Momentan de rezumam la un exemplu simplu pentru a demonstra functionalitatea
	 */


	if(x<0 || x>LCD_Width || y<0 || y> LCD_Length)
 8000e46:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f2c0 80e6 	blt.w	800101c <translation_entity+0x1f0>
 8000e50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e54:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e58:	f300 80e0 	bgt.w	800101c <translation_entity+0x1f0>
 8000e5c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f2c0 80db 	blt.w	800101c <translation_entity+0x1f0>
 8000e66:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e6a:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000e6e:	f300 80d5 	bgt.w	800101c <translation_entity+0x1f0>

		return;
	}


	ENTITY temp = *entity;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f107 0414 	add.w	r4, r7, #20
 8000e78:	461d      	mov	r5, r3
 8000e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7e:	682b      	ldr	r3, [r5, #0]
 8000e80:	6023      	str	r3, [r4, #0]

	entity->x0 = x;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	897a      	ldrh	r2, [r7, #10]
 8000e86:	805a      	strh	r2, [r3, #2]
	entity->y0 = y;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	893a      	ldrh	r2, [r7, #8]
 8000e8c:	809a      	strh	r2, [r3, #4]


	if((temp.y0 == y) && (TurnOnStep==1))
 8000e8e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e92:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d157      	bne.n	8000f4a <translation_entity+0x11e>
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d054      	beq.n	8000f4a <translation_entity+0x11e>
	{
		/*Pentru cazul unui Step cuprins in cadrul anterior pe axa x*/

		if((x < (temp.x0+temp.x1)) && (x > (temp.x0)))
 8000ea0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ea4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000eae:	440b      	add	r3, r1
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	da1d      	bge.n	8000ef0 <translation_entity+0xc4>
 8000eb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000eb8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dd17      	ble.n	8000ef0 <translation_entity+0xc4>
		{
			/*Pentru cazul deplasarii pe +x*/
			draw_entity(entity, NULL);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff feb2 	bl	8000c2c <draw_entity>
			draw_rectangle(temp.x0, temp.y0, x-temp.x0, temp.y1, 0xFFFF); /*Culoare background*/
 8000ec8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ecc:	b298      	uxth	r0, r3
 8000ece:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000ed2:	b299      	uxth	r1, r3
 8000ed4:	897a      	ldrh	r2, [r7, #10]
 8000ed6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8000eea:	9400      	str	r4, [sp, #0]
 8000eec:	f7ff fe40 	bl	8000b70 <draw_rectangle>
		}

		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000ef0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ef4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f280 8091 	bge.w	8001020 <translation_entity+0x1f4>
 8000efe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f02:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8000f06:	4413      	add	r3, r2
 8000f08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	f340 8087 	ble.w	8001020 <translation_entity+0x1f4>
		{
			/*Pentru cazul deplasarii pe -x*/
			draw_entity(entity, NULL);
 8000f12:	2100      	movs	r1, #0
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f7ff fe89 	bl	8000c2c <draw_entity>
			draw_rectangle(temp.x0+temp.x1-(temp.x0-x), temp.y0, temp.x0-x, temp.y1, 0xFFFF); /*Culoare background*/
 8000f1a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	897b      	ldrh	r3, [r7, #10]
 8000f22:	4413      	add	r3, r2
 8000f24:	b298      	uxth	r0, r3
 8000f26:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f2a:	b299      	uxth	r1, r3
 8000f2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	897b      	ldrh	r3, [r7, #10]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 8000f42:	9400      	str	r4, [sp, #0]
 8000f44:	f7ff fe14 	bl	8000b70 <draw_rectangle>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8000f48:	e06a      	b.n	8001020 <translation_entity+0x1f4>

	}

	else

		if((temp.x0==x) && (TurnOnStep==1))
 8000f4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f4e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d157      	bne.n	8001006 <translation_entity+0x1da>
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d054      	beq.n	8001006 <translation_entity+0x1da>
		{
			if((y < (temp.y0+temp.y1)) && (y > (temp.y0)))
 8000f5c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f60:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f6a:	440b      	add	r3, r1
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	da1e      	bge.n	8000fae <translation_entity+0x182>
 8000f70:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f74:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dd18      	ble.n	8000fae <translation_entity+0x182>
			{
				/*Pentru cazul deplasarii pe +y*/
				draw_entity(entity, NULL);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f7ff fe54 	bl	8000c2c <draw_entity>
				draw_rectangle(temp.x0, temp.y0, temp.x1, y-temp.y0, 0xFFFF);
 8000f84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f88:	b298      	uxth	r0, r3
 8000f8a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f8e:	b299      	uxth	r1, r3
 8000f90:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f94:	b29c      	uxth	r4, r3
 8000f96:	893a      	ldrh	r2, [r7, #8]
 8000f98:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fa6:	9200      	str	r2, [sp, #0]
 8000fa8:	4622      	mov	r2, r4
 8000faa:	f7ff fde1 	bl	8000b70 <draw_rectangle>
			}

			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8000fae:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fb2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	da34      	bge.n	8001024 <translation_entity+0x1f8>
 8000fba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000fbe:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	dd2b      	ble.n	8001024 <translation_entity+0x1f8>
			{
				/*Pentru cazul deplasarii pe -y*/
				draw_entity(entity, NULL);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff fe2c 	bl	8000c2c <draw_entity>
				draw_rectangle(temp.x0, temp.y0+temp.y1-(temp.y0-y), temp.x1, temp.y0-y, 0xFFFF);
 8000fd4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fd8:	b298      	uxth	r0, r3
 8000fda:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	893b      	ldrh	r3, [r7, #8]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b299      	uxth	r1, r3
 8000fe6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fea:	b29c      	uxth	r4, r3
 8000fec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	893b      	ldrh	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ffc:	9200      	str	r2, [sp, #0]
 8000ffe:	4622      	mov	r2, r4
 8001000:	f7ff fdb6 	bl	8000b70 <draw_rectangle>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001004:	e00e      	b.n	8001024 <translation_entity+0x1f8>

		else
		{
			/*Pentru orice alt caz (deplasare pe diagonala sau aleatoriu)*/

			draw_entity(entity, NULL);
 8001006:	2100      	movs	r1, #0
 8001008:	68f8      	ldr	r0, [r7, #12]
 800100a:	f7ff fe0f 	bl	8000c2c <draw_entity>
			draw_entity(&temp, NULL);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fe09 	bl	8000c2c <draw_entity>
 800101a:	e004      	b.n	8001026 <translation_entity+0x1fa>
		return;
 800101c:	bf00      	nop
 800101e:	e002      	b.n	8001026 <translation_entity+0x1fa>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8001020:	bf00      	nop
 8001022:	e000      	b.n	8001026 <translation_entity+0x1fa>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001024:	bf00      	nop
		}


}
 8001026:	3728      	adds	r7, #40	@ 0x28
 8001028:	46bd      	mov	sp, r7
 800102a:	bdb0      	pop	{r4, r5, r7, pc}

0800102c <scaling_entity>:
	}
}


void scaling_entity(ENTITY *entity, const float factor, char *filePathName, char *fileName)
{
 800102c:	b590      	push	{r4, r7, lr}
 800102e:	b093      	sub	sp, #76	@ 0x4c
 8001030:	af02      	add	r7, sp, #8
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	ed87 0a02 	vstr	s0, [r7, #8]
 8001038:	6079      	str	r1, [r7, #4]
 800103a:	603a      	str	r2, [r7, #0]
	 * de scalat
	 */

	FRESULT res;
	char *scalFilePath;
	char *tempFile = "graphic/scalare/temp.bin";
 800103c:	4baa      	ldr	r3, [pc, #680]	@ (80012e8 <scaling_entity+0x2bc>)
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	scalFilePath = assign_filePath("graphic/scalare/");
 8001040:	48aa      	ldr	r0, [pc, #680]	@ (80012ec <scaling_entity+0x2c0>)
 8001042:	f001 fadd 	bl	8002600 <assign_filePath>
 8001046:	62b8      	str	r0, [r7, #40]	@ 0x28
	scalFilePath = realloc(scalFilePath, strlen(scalFilePath)+ strlen(fileName) +1 );
 8001048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800104a:	f7ff f8bd 	bl	80001c8 <strlen>
 800104e:	4604      	mov	r4, r0
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f7ff f8b9 	bl	80001c8 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	4423      	add	r3, r4
 800105a:	3301      	adds	r3, #1
 800105c:	4619      	mov	r1, r3
 800105e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001060:	f00b fc4a 	bl	800c8f8 <realloc>
 8001064:	62b8      	str	r0, [r7, #40]	@ 0x28
	strcat(scalFilePath, fileName);
 8001066:	6839      	ldr	r1, [r7, #0]
 8001068:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800106a:	f00b fc83 	bl	800c974 <strcat>

	uint16_t x = 0; /*nr d elinii de prelucrat din M1 ai sa avem 32x32 pixeli de prelucrat in M2*/
 800106e:	2300      	movs	r3, #0
 8001070:	827b      	strh	r3, [r7, #18]
	bool flagTerm = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	747b      	strb	r3, [r7, #17]

	int i = 0; /*indexi de referinta in M2*/
 8001076:	2300      	movs	r3, #0
 8001078:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int j = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	63bb      	str	r3, [r7, #56]	@ 0x38
	int ik = 0; /*indexi de referinta in M1*/
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
	int jk = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]

	bool flagPixel = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37


	uint8_t *data = malloc(sizeof(uint8_t)*3072);
 800108c:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8001090:	f00b fb74 	bl	800c77c <malloc>
 8001094:	4603      	mov	r3, r0
 8001096:	61fb      	str	r3, [r7, #28]
	int16_t x1 = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	837b      	strh	r3, [r7, #26]
	int16_t y1 = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	833b      	strh	r3, [r7, #24]
	int16_t index = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	82fb      	strh	r3, [r7, #22]

	x1 = (int16_t)((entity->x1)*factor);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010be:	ee17 3a90 	vmov	r3, s15
 80010c2:	837b      	strh	r3, [r7, #26]
	y1 = (int16_t)((entity->y1)*factor);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80010d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010de:	ee17 3a90 	vmov	r3, s15
 80010e2:	833b      	strh	r3, [r7, #24]



	while(!flagTerm)
 80010e4:	e0d1      	b.n	800128a <scaling_entity+0x25e>
	{
		read_image_file_scaling(filePathName, entity, factor, &x, &flagTerm);
 80010e6:	f107 0311 	add.w	r3, r7, #17
 80010ea:	f107 0212 	add.w	r2, r7, #18
 80010ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80010f2:	68f9      	ldr	r1, [r7, #12]
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f001 fe43 	bl	8002d80 <read_image_file_scaling>

		i = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
		j = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	63bb      	str	r3, [r7, #56]	@ 0x38

		ik = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
		jk = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]

		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 800110a:	2300      	movs	r3, #0
 800110c:	633b      	str	r3, [r7, #48]	@ 0x30
 800110e:	e07d      	b.n	800120c <scaling_entity+0x1e0>
		{
			/*
			 * Parcurgem frameul asociat matricei scalate M2
			 */

			if((k%(x1*3)==0) && (k!=0))
 8001110:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	441a      	add	r2, r3
 800111a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800111c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001120:	fb01 f202 	mul.w	r2, r1, r2
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d107      	bne.n	800113a <scaling_entity+0x10e>
 800112a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800112c:	2b00      	cmp	r3, #0
 800112e:	d004      	beq.n	800113a <scaling_entity+0x10e>
			{
				/*
				 * new line
				 */

				i++;
 8001130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001132:	3301      	adds	r3, #1
 8001134:	63fb      	str	r3, [r7, #60]	@ 0x3c
				j = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			if(k%3 == 0)
 800113a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800113c:	4b6c      	ldr	r3, [pc, #432]	@ (80012f0 <scaling_entity+0x2c4>)
 800113e:	fb83 3201 	smull	r3, r2, r3, r1
 8001142:	17cb      	asrs	r3, r1, #31
 8001144:	1ad2      	subs	r2, r2, r3
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	1aca      	subs	r2, r1, r3
 800114e:	2a00      	cmp	r2, #0
 8001150:	d102      	bne.n	8001158 <scaling_entity+0x12c>
			{
				flagPixel = 1;
 8001152:	2301      	movs	r3, #1
 8001154:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			}

			if(flagPixel == 1)
 8001158:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800115c:	2b00      	cmp	r3, #0
 800115e:	d052      	beq.n	8001206 <scaling_entity+0x1da>
			{
				ik = (int)i/factor;
 8001160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800116a:	ed97 7a02 	vldr	s14, [r7, #8]
 800116e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001176:	ee17 3a90 	vmov	r3, s15
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
				jk = (int)j/factor;
 800117c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001186:	ed97 7a02 	vldr	s14, [r7, #8]
 800118a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800118e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001192:	ee17 3a90 	vmov	r3, s15
 8001196:	623b      	str	r3, [r7, #32]

				index = ik*(entity->x1)*3 + jk*3; /*index normat la M1*/
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800119e:	461a      	mov	r2, r3
 80011a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a2:	fb03 f202 	mul.w	r2, r3, r2
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	4413      	add	r3, r2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	0052      	lsls	r2, r2, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	82fb      	strh	r3, [r7, #22]

				data[k] = entity->data[index];
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011be:	441a      	add	r2, r3
 80011c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011c2:	69f9      	ldr	r1, [r7, #28]
 80011c4:	440b      	add	r3, r1
 80011c6:	7812      	ldrb	r2, [r2, #0]
 80011c8:	701a      	strb	r2, [r3, #0]
				data[k+1] = entity->data[index + 1];
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011d2:	3301      	adds	r3, #1
 80011d4:	441a      	add	r2, r3
 80011d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011d8:	3301      	adds	r3, #1
 80011da:	69f9      	ldr	r1, [r7, #28]
 80011dc:	440b      	add	r3, r1
 80011de:	7812      	ldrb	r2, [r2, #0]
 80011e0:	701a      	strb	r2, [r3, #0]
				data[k+2] = entity->data[index + 2];
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011ea:	3302      	adds	r3, #2
 80011ec:	441a      	add	r2, r3
 80011ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011f0:	3302      	adds	r3, #2
 80011f2:	69f9      	ldr	r1, [r7, #28]
 80011f4:	440b      	add	r3, r1
 80011f6:	7812      	ldrb	r2, [r2, #0]
 80011f8:	701a      	strb	r2, [r3, #0]

				j++;
 80011fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011fc:	3301      	adds	r3, #1
 80011fe:	63bb      	str	r3, [r7, #56]	@ 0x38
				flagPixel = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 8001206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001208:	3301      	adds	r3, #1
 800120a:	633b      	str	r3, [r7, #48]	@ 0x30
 800120c:	8a7b      	ldrh	r3, [r7, #18]
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001216:	edd7 7a02 	vldr	s15, [r7, #8]
 800121a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800122e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123a:	ee17 2a90 	vmov	r2, s15
 800123e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001240:	4293      	cmp	r3, r2
 8001242:	f6ff af65 	blt.w	8001110 <scaling_entity+0xe4>
		/*
		 * Scriem in fisier datele obitnute din frame-ul curent in fisiserul aferent.
		 * Fisiserul va fi salvat in folderul de scalare
		 */

		write_image_file(tempFile, data, (int)(x1*factor)*x*3, x1, y1, flagTerm);
 8001246:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001252:	edd7 7a02 	vldr	s15, [r7, #8]
 8001256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800125e:	ee17 2a90 	vmov	r2, s15
 8001262:	8a7b      	ldrh	r3, [r7, #18]
 8001264:	fb03 f202 	mul.w	r2, r3, r2
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	4619      	mov	r1, r3
 8001270:	7c7b      	ldrb	r3, [r7, #17]
 8001272:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	4613      	mov	r3, r2
 8001280:	460a      	mov	r2, r1
 8001282:	69f9      	ldr	r1, [r7, #28]
 8001284:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001286:	f001 ff79 	bl	800317c <write_image_file>
	while(!flagTerm)
 800128a:	7c7b      	ldrb	r3, [r7, #17]
 800128c:	f083 0301 	eor.w	r3, r3, #1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	f47f af27 	bne.w	80010e6 <scaling_entity+0xba>
	 * renumind fisiserul tempFile in care ne-am scris datele din temp.bin in
	 * numele aferent acestuia stocat in scalFilePath
	 */


	res = f_unlink(scalFilePath);
 8001298:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800129a:	f00b f86e 	bl	800c37a <f_unlink>
 800129e:	4603      	mov	r3, r0
 80012a0:	757b      	strb	r3, [r7, #21]

	if((res != FR_OK) && (res != FR_NO_FILE))
 80012a2:	7d7b      	ldrb	r3, [r7, #21]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <scaling_entity+0x282>
 80012a8:	7d7b      	ldrb	r3, [r7, #21]
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d115      	bne.n	80012da <scaling_entity+0x2ae>
	{
		return;
	}

	res = f_rename(tempFile, scalFilePath);
 80012ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80012b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80012b2:	f00b f90d 	bl	800c4d0 <f_rename>
 80012b6:	4603      	mov	r3, r0
 80012b8:	757b      	strb	r3, [r7, #21]

	if(res != FR_OK)
 80012ba:	7d7b      	ldrb	r3, [r7, #21]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10e      	bne.n	80012de <scaling_entity+0x2b2>

	/*
	 * Atribuim noile valori entitatii prelucrate
	 */

	entity->x1=x1;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8b7a      	ldrh	r2, [r7, #26]
 80012c4:	80da      	strh	r2, [r3, #6]
	entity->y1=y1;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	8b3a      	ldrh	r2, [r7, #24]
 80012ca:	811a      	strh	r2, [r3, #8]
	entity->filePathName = scalFilePath;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012d0:	611a      	str	r2, [r3, #16]

	free(data);
 80012d2:	69f8      	ldr	r0, [r7, #28]
 80012d4:	f00b fa5a 	bl	800c78c <free>
 80012d8:	e002      	b.n	80012e0 <scaling_entity+0x2b4>
		return;
 80012da:	bf00      	nop
 80012dc:	e000      	b.n	80012e0 <scaling_entity+0x2b4>
		return;
 80012de:	bf00      	nop
	//free(entity->data);

}
 80012e0:	3744      	adds	r7, #68	@ 0x44
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd90      	pop	{r4, r7, pc}
 80012e6:	bf00      	nop
 80012e8:	0800cae4 	.word	0x0800cae4
 80012ec:	0800cb00 	.word	0x0800cb00
 80012f0:	55555556 	.word	0x55555556

080012f4 <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 80012fe:	2200      	movs	r2, #0
 8001300:	2108      	movs	r1, #8
 8001302:	480c      	ldr	r0, [pc, #48]	@ (8001334 <LCD_send_command+0x40>)
 8001304:	f003 fc12 	bl	8004b2c <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8001308:	2200      	movs	r2, #0
 800130a:	2110      	movs	r1, #16
 800130c:	4809      	ldr	r0, [pc, #36]	@ (8001334 <LCD_send_command+0x40>)
 800130e:	f003 fc0d 	bl	8004b2c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 8001312:	1df9      	adds	r1, r7, #7
 8001314:	f04f 33ff 	mov.w	r3, #4294967295
 8001318:	2201      	movs	r2, #1
 800131a:	4807      	ldr	r0, [pc, #28]	@ (8001338 <LCD_send_command+0x44>)
 800131c:	f005 f8d9 	bl	80064d2 <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 8001320:	2201      	movs	r2, #1
 8001322:	2110      	movs	r1, #16
 8001324:	4803      	ldr	r0, [pc, #12]	@ (8001334 <LCD_send_command+0x40>)
 8001326:	f003 fc01 	bl	8004b2c <HAL_GPIO_WritePin>


}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40020c00 	.word	0x40020c00
 8001338:	20000180 	.word	0x20000180

0800133c <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 8001346:	4b34      	ldr	r3, [pc, #208]	@ (8001418 <LCD_send_data_multi+0xdc>)
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 800134c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001350:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	fbb3 f2f2 	udiv	r2, r3, r2
 8001364:	6939      	ldr	r1, [r7, #16]
 8001366:	fb01 f202 	mul.w	r2, r1, r2
 800136a:	1a9b      	subs	r3, r3, r2
 800136c:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 800136e:	2201      	movs	r2, #1
 8001370:	2108      	movs	r1, #8
 8001372:	482a      	ldr	r0, [pc, #168]	@ (800141c <LCD_send_data_multi+0xe0>)
 8001374:	f003 fbda 	bl	8004b2c <HAL_GPIO_WritePin>
	CS_A();
 8001378:	2200      	movs	r2, #0
 800137a:	2110      	movs	r1, #16
 800137c:	4827      	ldr	r0, [pc, #156]	@ (800141c <LCD_send_data_multi+0xe0>)
 800137e:	f003 fbd5 	bl	8004b2c <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	429a      	cmp	r2, r3
 8001388:	d821      	bhi.n	80013ce <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <LCD_send_data_multi+0xdc>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	4821      	ldr	r0, [pc, #132]	@ (8001420 <LCD_send_data_multi+0xe4>)
 800139a:	f005 fca1 	bl	8006ce0 <HAL_SPI_Transmit_DMA>
 800139e:	e02c      	b.n	80013fa <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 80013a0:	bf00      	nop
 80013a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <LCD_send_data_multi+0xdc>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0fa      	beq.n	80013a2 <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <LCD_send_data_multi+0xdc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	4819      	ldr	r0, [pc, #100]	@ (8001420 <LCD_send_data_multi+0xe4>)
 80013bc:	f005 fc90 	bl	8006ce0 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4413      	add	r3, r2
 80013c6:	607b      	str	r3, [r7, #4]
			nrFrames--;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1e5      	bne.n	80013a0 <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00f      	beq.n	80013fa <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 80013da:	bf00      	nop
 80013dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <LCD_send_data_multi+0xdc>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0fa      	beq.n	80013dc <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <LCD_send_data_multi+0xdc>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	480a      	ldr	r0, [pc, #40]	@ (8001420 <LCD_send_data_multi+0xe4>)
 80013f6:	f005 fc73 	bl	8006ce0 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 80013fa:	bf00      	nop
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <LCD_send_data_multi+0xdc>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0fa      	beq.n	80013fc <LCD_send_data_multi+0xc0>
	CS_D();
 8001406:	2201      	movs	r2, #1
 8001408:	2110      	movs	r1, #16
 800140a:	4804      	ldr	r0, [pc, #16]	@ (800141c <LCD_send_data_multi+0xe0>)
 800140c:	f003 fb8e 	bl	8004b2c <HAL_GPIO_WritePin>

}
 8001410:	bf00      	nop
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000328 	.word	0x20000328
 800141c:	40020c00 	.word	0x40020c00
 8001420:	20000180 	.word	0x20000180

08001424 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 800142e:	2201      	movs	r2, #1
 8001430:	2108      	movs	r1, #8
 8001432:	480c      	ldr	r0, [pc, #48]	@ (8001464 <LCD_send_data+0x40>)
 8001434:	f003 fb7a 	bl	8004b2c <HAL_GPIO_WritePin>
	CS_A();
 8001438:	2200      	movs	r2, #0
 800143a:	2110      	movs	r1, #16
 800143c:	4809      	ldr	r0, [pc, #36]	@ (8001464 <LCD_send_data+0x40>)
 800143e:	f003 fb75 	bl	8004b2c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8001442:	1df9      	adds	r1, r7, #7
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
 8001448:	2201      	movs	r2, #1
 800144a:	4807      	ldr	r0, [pc, #28]	@ (8001468 <LCD_send_data+0x44>)
 800144c:	f005 f841 	bl	80064d2 <HAL_SPI_Transmit>

	CS_D();
 8001450:	2201      	movs	r2, #1
 8001452:	2110      	movs	r1, #16
 8001454:	4803      	ldr	r0, [pc, #12]	@ (8001464 <LCD_send_data+0x40>)
 8001456:	f003 fb69 	bl	8004b2c <HAL_GPIO_WritePin>

}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40020c00 	.word	0x40020c00
 8001468:	20000180 	.word	0x20000180

0800146c <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 8001470:	2200      	movs	r2, #0
 8001472:	2140      	movs	r1, #64	@ 0x40
 8001474:	487c      	ldr	r0, [pc, #496]	@ (8001668 <ILI9488_driver_init+0x1fc>)
 8001476:	f003 fb59 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800147a:	200a      	movs	r0, #10
 800147c:	f002 faa6 	bl	80039cc <HAL_Delay>
	RST_D();
 8001480:	2201      	movs	r2, #1
 8001482:	2140      	movs	r1, #64	@ 0x40
 8001484:	4878      	ldr	r0, [pc, #480]	@ (8001668 <ILI9488_driver_init+0x1fc>)
 8001486:	f003 fb51 	bl	8004b2c <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff ff32 	bl	80012f4 <LCD_send_command>
	HAL_Delay(150);
 8001490:	2096      	movs	r0, #150	@ 0x96
 8001492:	f002 fa9b 	bl	80039cc <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 8001496:	2011      	movs	r0, #17
 8001498:	f7ff ff2c 	bl	80012f4 <LCD_send_command>
	HAL_Delay(255);
 800149c:	20ff      	movs	r0, #255	@ 0xff
 800149e:	f002 fa95 	bl	80039cc <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 80014a2:	20e0      	movs	r0, #224	@ 0xe0
 80014a4:	f7ff ff26 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff ffbb 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x0C);
 80014ae:	200c      	movs	r0, #12
 80014b0:	f7ff ffb8 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x05);
 80014b4:	2005      	movs	r0, #5
 80014b6:	f7ff ffb5 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x04);
 80014ba:	2004      	movs	r0, #4
 80014bc:	f7ff ffb2 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x0F);
 80014c0:	200f      	movs	r0, #15
 80014c2:	f7ff ffaf 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x06);
 80014c6:	2006      	movs	r0, #6
 80014c8:	f7ff ffac 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x3A);
 80014cc:	203a      	movs	r0, #58	@ 0x3a
 80014ce:	f7ff ffa9 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x56);
 80014d2:	2056      	movs	r0, #86	@ 0x56
 80014d4:	f7ff ffa6 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x4D);
 80014d8:	204d      	movs	r0, #77	@ 0x4d
 80014da:	f7ff ffa3 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x03);
 80014de:	2003      	movs	r0, #3
 80014e0:	f7ff ffa0 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x0A);
 80014e4:	200a      	movs	r0, #10
 80014e6:	f7ff ff9d 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x06);
 80014ea:	2006      	movs	r0, #6
 80014ec:	f7ff ff9a 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x30);
 80014f0:	2030      	movs	r0, #48	@ 0x30
 80014f2:	f7ff ff97 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x3E);
 80014f6:	203e      	movs	r0, #62	@ 0x3e
 80014f8:	f7ff ff94 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x0F);
 80014fc:	200f      	movs	r0, #15
 80014fe:	f7ff ff91 	bl	8001424 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 8001502:	20e1      	movs	r0, #225	@ 0xe1
 8001504:	f7ff fef6 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0x00);
 8001508:	2000      	movs	r0, #0
 800150a:	f7ff ff8b 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x13);
 800150e:	2013      	movs	r0, #19
 8001510:	f7ff ff88 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x18);
 8001514:	2018      	movs	r0, #24
 8001516:	f7ff ff85 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x01);
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff ff82 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x11);
 8001520:	2011      	movs	r0, #17
 8001522:	f7ff ff7f 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x06);
 8001526:	2006      	movs	r0, #6
 8001528:	f7ff ff7c 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x38);
 800152c:	2038      	movs	r0, #56	@ 0x38
 800152e:	f7ff ff79 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x34);
 8001532:	2034      	movs	r0, #52	@ 0x34
 8001534:	f7ff ff76 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x4D);
 8001538:	204d      	movs	r0, #77	@ 0x4d
 800153a:	f7ff ff73 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x06);
 800153e:	2006      	movs	r0, #6
 8001540:	f7ff ff70 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x0D);
 8001544:	200d      	movs	r0, #13
 8001546:	f7ff ff6d 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x0B);
 800154a:	200b      	movs	r0, #11
 800154c:	f7ff ff6a 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x31);
 8001550:	2031      	movs	r0, #49	@ 0x31
 8001552:	f7ff ff67 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x37);
 8001556:	2037      	movs	r0, #55	@ 0x37
 8001558:	f7ff ff64 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x0F);
 800155c:	200f      	movs	r0, #15
 800155e:	f7ff ff61 	bl	8001424 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 8001562:	20c0      	movs	r0, #192	@ 0xc0
 8001564:	f7ff fec6 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0x18);
 8001568:	2018      	movs	r0, #24
 800156a:	f7ff ff5b 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x16);
 800156e:	2016      	movs	r0, #22
 8001570:	f7ff ff58 	bl	8001424 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 8001574:	20c1      	movs	r0, #193	@ 0xc1
 8001576:	f7ff febd 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0x45);
 800157a:	2045      	movs	r0, #69	@ 0x45
 800157c:	f7ff ff52 	bl	8001424 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 8001580:	20c2      	movs	r0, #194	@ 0xc2
 8001582:	f7ff feb7 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0x33);
 8001586:	2033      	movs	r0, #51	@ 0x33
 8001588:	f7ff ff4c 	bl	8001424 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 800158c:	20c3      	movs	r0, #195	@ 0xc3
 800158e:	f7ff feb1 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0x33);
 8001592:	2033      	movs	r0, #51	@ 0x33
 8001594:	f7ff ff46 	bl	8001424 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 8001598:	2036      	movs	r0, #54	@ 0x36
 800159a:	f7ff feab 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 800159e:	205c      	movs	r0, #92	@ 0x5c
 80015a0:	f7ff ff40 	bl	8001424 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 80015a4:	203a      	movs	r0, #58	@ 0x3a
 80015a6:	f7ff fea5 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 80015aa:	2006      	movs	r0, #6
 80015ac:	f7ff ff3a 	bl	8001424 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff fe9f 	bl	80012f4 <LCD_send_command>
	LCD_send_command(0x00);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f7ff fe9c 	bl	80012f4 <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 80015bc:	20b0      	movs	r0, #176	@ 0xb0
 80015be:	f7ff fe99 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff ff2e 	bl	8001424 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 80015c8:	20b1      	movs	r0, #177	@ 0xb1
 80015ca:	f7ff fe93 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 80015ce:	20a0      	movs	r0, #160	@ 0xa0
 80015d0:	f7ff ff28 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 80015d4:	2011      	movs	r0, #17
 80015d6:	f7ff ff25 	bl	8001424 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 80015da:	20b4      	movs	r0, #180	@ 0xb4
 80015dc:	f7ff fe8a 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 80015e0:	2002      	movs	r0, #2
 80015e2:	f7ff ff1f 	bl	8001424 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 80015e6:	20b5      	movs	r0, #181	@ 0xb5
 80015e8:	f7ff fe84 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0x02);
 80015ec:	2002      	movs	r0, #2
 80015ee:	f7ff ff19 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x02);
 80015f2:	2002      	movs	r0, #2
 80015f4:	f7ff ff16 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x0A);
 80015f8:	200a      	movs	r0, #10
 80015fa:	f7ff ff13 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x04);
 80015fe:	2004      	movs	r0, #4
 8001600:	f7ff ff10 	bl	8001424 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 8001604:	20b6      	movs	r0, #182	@ 0xb6
 8001606:	f7ff fe75 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0x02);
 800160a:	2002      	movs	r0, #2
 800160c:	f7ff ff0a 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x02);
 8001610:	2002      	movs	r0, #2
 8001612:	f7ff ff07 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x3B);
 8001616:	203b      	movs	r0, #59	@ 0x3b
 8001618:	f7ff ff04 	bl	8001424 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 800161c:	20e9      	movs	r0, #233	@ 0xe9
 800161e:	f7ff fe69 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff fefe 	bl	8001424 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8001628:	20f7      	movs	r0, #247	@ 0xf7
 800162a:	f7ff fe63 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0xA9);
 800162e:	20a9      	movs	r0, #169	@ 0xa9
 8001630:	f7ff fef8 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x51);
 8001634:	2051      	movs	r0, #81	@ 0x51
 8001636:	f7ff fef5 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x2C);
 800163a:	202c      	movs	r0, #44	@ 0x2c
 800163c:	f7ff fef2 	bl	8001424 <LCD_send_data>
	LCD_send_data(0x82);
 8001640:	2082      	movs	r0, #130	@ 0x82
 8001642:	f7ff feef 	bl	8001424 <LCD_send_data>


	LCD_send_command(0x11);
 8001646:	2011      	movs	r0, #17
 8001648:	f7ff fe54 	bl	80012f4 <LCD_send_command>
	HAL_Delay(255);
 800164c:	20ff      	movs	r0, #255	@ 0xff
 800164e:	f002 f9bd 	bl	80039cc <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 8001652:	2051      	movs	r0, #81	@ 0x51
 8001654:	f7ff fe4e 	bl	80012f4 <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 8001658:	20ff      	movs	r0, #255	@ 0xff
 800165a:	f7ff fee3 	bl	8001424 <LCD_send_data>
	LCD_send_command(0x29); //Display on
 800165e:	2029      	movs	r0, #41	@ 0x29
 8001660:	f7ff fe48 	bl	80012f4 <LCD_send_command>


}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40020c00 	.word	0x40020c00

0800166c <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	4604      	mov	r4, r0
 8001674:	4608      	mov	r0, r1
 8001676:	4611      	mov	r1, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4623      	mov	r3, r4
 800167c:	80fb      	strh	r3, [r7, #6]
 800167e:	4603      	mov	r3, r0
 8001680:	80bb      	strh	r3, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	807b      	strh	r3, [r7, #2]
 8001686:	4613      	mov	r3, r2
 8001688:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 800168a:	202a      	movs	r0, #42	@ 0x2a
 800168c:	f7ff fe32 	bl	80012f4 <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	0a1b      	lsrs	r3, r3, #8
 8001694:	b29b      	uxth	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	733b      	strb	r3, [r7, #12]
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 80016a0:	887b      	ldrh	r3, [r7, #2]
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	73bb      	strb	r3, [r7, #14]
 80016aa:	887b      	ldrh	r3, [r7, #2]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	2104      	movs	r1, #4
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fe40 	bl	800133c <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 80016bc:	202b      	movs	r0, #43	@ 0x2b
 80016be:	f7ff fe19 	bl	80012f4 <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 80016c2:	88bb      	ldrh	r3, [r7, #4]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	733b      	strb	r3, [r7, #12]
 80016cc:	88bb      	ldrh	r3, [r7, #4]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 80016d2:	883b      	ldrh	r3, [r7, #0]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	73bb      	strb	r3, [r7, #14]
 80016dc:	883b      	ldrh	r3, [r7, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	2104      	movs	r1, #4
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fe27 	bl	800133c <LCD_send_data_multi>

	if(x == 'w')
 80016ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016f2:	2b77      	cmp	r3, #119	@ 0x77
 80016f4:	d102      	bne.n	80016fc <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 80016f6:	202c      	movs	r0, #44	@ 0x2c
 80016f8:	f7ff fdfc 	bl	80012f4 <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 80016fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001700:	2b72      	cmp	r3, #114	@ 0x72
 8001702:	d102      	bne.n	800170a <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 8001704:	202e      	movs	r0, #46	@ 0x2e
 8001706:	f7ff fdf5 	bl	80012f4 <LCD_send_command>
	}


}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}
	...

08001714 <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	4604      	mov	r4, r0
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4623      	mov	r3, r4
 8001724:	80fb      	strh	r3, [r7, #6]
 8001726:	4603      	mov	r3, r0
 8001728:	80bb      	strh	r3, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	807b      	strh	r3, [r7, #2]
 800172e:	4613      	mov	r3, r2
 8001730:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 8001732:	4b7d      	ldr	r3, [pc, #500]	@ (8001928 <read_pixel_frame+0x214>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b7b      	ldr	r3, [pc, #492]	@ (8001928 <read_pixel_frame+0x214>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001740:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 8001742:	4b79      	ldr	r3, [pc, #484]	@ (8001928 <read_pixel_frame+0x214>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b77      	ldr	r3, [pc, #476]	@ (8001928 <read_pixel_frame+0x214>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8001750:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 8001752:	4b75      	ldr	r3, [pc, #468]	@ (8001928 <read_pixel_frame+0x214>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b73      	ldr	r3, [pc, #460]	@ (8001928 <read_pixel_frame+0x214>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0210 	orr.w	r2, r2, #16
 8001760:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8001762:	4b71      	ldr	r3, [pc, #452]	@ (8001928 <read_pixel_frame+0x214>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b6f      	ldr	r3, [pc, #444]	@ (8001928 <read_pixel_frame+0x214>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001770:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 8001772:	4b6e      	ldr	r3, [pc, #440]	@ (800192c <read_pixel_frame+0x218>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 800177c:	887a      	ldrh	r2, [r7, #2]
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	bfb8      	it	lt
 8001786:	425b      	neglt	r3, r3
 8001788:	b29a      	uxth	r2, r3
 800178a:	8839      	ldrh	r1, [r7, #0]
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	1acb      	subs	r3, r1, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	bfb8      	it	lt
 8001794:	425b      	neglt	r3, r3
 8001796:	b29b      	uxth	r3, r3
 8001798:	fb12 f303 	smulbb	r3, r2, r3
 800179c:	b29b      	uxth	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	0052      	lsls	r2, r2, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 80017a6:	2300      	movs	r3, #0
 80017a8:	753b      	strb	r3, [r7, #20]

    free(data);
 80017aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80017ac:	f00a ffee 	bl	800c78c <free>
    data = malloc(byteNr);
 80017b0:	8afb      	ldrh	r3, [r7, #22]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f00a ffe2 	bl	800c77c <malloc>
 80017b8:	4603      	mov	r3, r0
 80017ba:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	3b01      	subs	r3, #1
 80017c0:	807b      	strh	r3, [r7, #2]
    y--;
 80017c2:	883b      	ldrh	r3, [r7, #0]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	743b      	strb	r3, [r7, #16]
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	747b      	strb	r3, [r7, #17]
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	0a1b      	lsrs	r3, r3, #8
 80017dc:	b29b      	uxth	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	74bb      	strb	r3, [r7, #18]
 80017e2:	887b      	ldrh	r3, [r7, #2]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 80017e8:	88bb      	ldrh	r3, [r7, #4]
 80017ea:	0a1b      	lsrs	r3, r3, #8
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	733b      	strb	r3, [r7, #12]
 80017f2:	88bb      	ldrh	r3, [r7, #4]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	737b      	strb	r3, [r7, #13]
 80017f8:	883b      	ldrh	r3, [r7, #0]
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	73bb      	strb	r3, [r7, #14]
 8001802:	883b      	ldrh	r3, [r7, #0]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	73fb      	strb	r3, [r7, #15]

    CS_A();
 8001808:	2200      	movs	r2, #0
 800180a:	2110      	movs	r1, #16
 800180c:	4848      	ldr	r0, [pc, #288]	@ (8001930 <read_pixel_frame+0x21c>)
 800180e:	f003 f98d 	bl	8004b2c <HAL_GPIO_WritePin>

    DC_COMMAND();
 8001812:	2200      	movs	r2, #0
 8001814:	2108      	movs	r1, #8
 8001816:	4846      	ldr	r0, [pc, #280]	@ (8001930 <read_pixel_frame+0x21c>)
 8001818:	f003 f988 	bl	8004b2c <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 800181c:	232a      	movs	r3, #42	@ 0x2a
 800181e:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 8001820:	f107 010b 	add.w	r1, r7, #11
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
 8001828:	2201      	movs	r2, #1
 800182a:	483f      	ldr	r0, [pc, #252]	@ (8001928 <read_pixel_frame+0x214>)
 800182c:	f004 fe51 	bl	80064d2 <HAL_SPI_Transmit>
    DC_DATA();
 8001830:	2201      	movs	r2, #1
 8001832:	2108      	movs	r1, #8
 8001834:	483e      	ldr	r0, [pc, #248]	@ (8001930 <read_pixel_frame+0x21c>)
 8001836:	f003 f979 	bl	8004b2c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 800183a:	f107 0110 	add.w	r1, r7, #16
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	2204      	movs	r2, #4
 8001844:	4838      	ldr	r0, [pc, #224]	@ (8001928 <read_pixel_frame+0x214>)
 8001846:	f004 fe44 	bl	80064d2 <HAL_SPI_Transmit>

    DC_COMMAND();
 800184a:	2200      	movs	r2, #0
 800184c:	2108      	movs	r1, #8
 800184e:	4838      	ldr	r0, [pc, #224]	@ (8001930 <read_pixel_frame+0x21c>)
 8001850:	f003 f96c 	bl	8004b2c <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 8001854:	232b      	movs	r3, #43	@ 0x2b
 8001856:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 8001858:	f107 010a 	add.w	r1, r7, #10
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	2201      	movs	r2, #1
 8001862:	4831      	ldr	r0, [pc, #196]	@ (8001928 <read_pixel_frame+0x214>)
 8001864:	f004 fe35 	bl	80064d2 <HAL_SPI_Transmit>
    DC_DATA();
 8001868:	2201      	movs	r2, #1
 800186a:	2108      	movs	r1, #8
 800186c:	4830      	ldr	r0, [pc, #192]	@ (8001930 <read_pixel_frame+0x21c>)
 800186e:	f003 f95d 	bl	8004b2c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 8001872:	f107 010c 	add.w	r1, r7, #12
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	2204      	movs	r2, #4
 800187c:	482a      	ldr	r0, [pc, #168]	@ (8001928 <read_pixel_frame+0x214>)
 800187e:	f004 fe28 	bl	80064d2 <HAL_SPI_Transmit>

    DC_COMMAND();
 8001882:	2200      	movs	r2, #0
 8001884:	2108      	movs	r1, #8
 8001886:	482a      	ldr	r0, [pc, #168]	@ (8001930 <read_pixel_frame+0x21c>)
 8001888:	f003 f950 	bl	8004b2c <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 800188c:	232e      	movs	r3, #46	@ 0x2e
 800188e:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 8001890:	f107 0109 	add.w	r1, r7, #9
 8001894:	f04f 33ff 	mov.w	r3, #4294967295
 8001898:	2201      	movs	r2, #1
 800189a:	4823      	ldr	r0, [pc, #140]	@ (8001928 <read_pixel_frame+0x214>)
 800189c:	f004 fe19 	bl	80064d2 <HAL_SPI_Transmit>
    DC_DATA();
 80018a0:	2201      	movs	r2, #1
 80018a2:	2108      	movs	r1, #8
 80018a4:	4822      	ldr	r0, [pc, #136]	@ (8001930 <read_pixel_frame+0x21c>)
 80018a6:	f003 f941 	bl	8004b2c <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 80018aa:	f107 0114 	add.w	r1, r7, #20
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	2201      	movs	r2, #1
 80018b4:	481c      	ldr	r0, [pc, #112]	@ (8001928 <read_pixel_frame+0x214>)
 80018b6:	f004 ff50 	bl	800675a <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 80018ba:	8afb      	ldrh	r3, [r7, #22]
 80018bc:	461a      	mov	r2, r3
 80018be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018c0:	4819      	ldr	r0, [pc, #100]	@ (8001928 <read_pixel_frame+0x214>)
 80018c2:	f005 fabf 	bl	8006e44 <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 80018c6:	bf00      	nop
 80018c8:	4b18      	ldr	r3, [pc, #96]	@ (800192c <read_pixel_frame+0x218>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0fa      	beq.n	80018c8 <read_pixel_frame+0x1b4>
    CS_D();
 80018d2:	2201      	movs	r2, #1
 80018d4:	2110      	movs	r1, #16
 80018d6:	4816      	ldr	r0, [pc, #88]	@ (8001930 <read_pixel_frame+0x21c>)
 80018d8:	f003 f928 	bl	8004b2c <HAL_GPIO_WritePin>

    free(data);
 80018dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018de:	f00a ff55 	bl	800c78c <free>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <read_pixel_frame+0x214>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001928 <read_pixel_frame+0x214>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80018f0:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <read_pixel_frame+0x214>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <read_pixel_frame+0x214>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8001900:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 8001902:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <read_pixel_frame+0x214>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <read_pixel_frame+0x214>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <read_pixel_frame+0x214>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <read_pixel_frame+0x214>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800191c:	601a      	str	r2, [r3, #0]

}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}
 8001926:	bf00      	nop
 8001928:	20000180 	.word	0x20000180
 800192c:	20000329 	.word	0x20000329
 8001930:	40020c00 	.word	0x40020c00

08001934 <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


  void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
  {
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	   * folosind DMA. Odata terminat transferul SPI prin DMA,
	   * aceasta functia de CallBack se va apela, setandu-ne un flag
	   * pentru a indica starea acestui transfer de date.
	   */

	  flagDmaSpiTx = 1;
 800193c:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <HAL_SPI_TxCpltCallback+0x1c>)
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]

  }
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20000328 	.word	0x20000328

08001954 <HAL_SPI_RxCpltCallback>:


  void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
  {
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	  /*
	   * Functie de CallBack pentru terminarea receptiei datelor
	   * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	   */

	  flagDmaSpiRx = 1;
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <HAL_SPI_RxCpltCallback+0x1c>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]

  }
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000329 	.word	0x20000329

08001974 <HAL_DAC_ConvHalfCpltCallbackCh1>:


  void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
  {
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
      /*
       * Functie de CallBack pentru finalizare 1/2 din transfer DMA pe DAC
       */

	  flagDmaDAC = 1;
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]

  }
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2000032a 	.word	0x2000032a

08001994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 800199a:	b084      	sub	sp, #16
 800199c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800199e:	f001 ffa3 	bl	80038e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019a2:	f000 fb95 	bl	80020d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a6:	f000 fd31 	bl	800240c <MX_GPIO_Init>
  MX_DMA_Init();
 80019aa:	f000 fcf1 	bl	8002390 <MX_DMA_Init>
  MX_SPI1_Init();
 80019ae:	f000 fc43 	bl	8002238 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80019b2:	f000 fcc3 	bl	800233c <MX_USART1_UART_Init>
  MX_DAC_Init();
 80019b6:	f000 fbf5 	bl	80021a4 <MX_DAC_Init>
  MX_TIM2_Init();
 80019ba:	f000 fc73 	bl	80022a4 <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 80019be:	f000 fc1b 	bl	80021f8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80019c2:	f007 fe3f 	bl	8009644 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 80019c6:	f000 fd85 	bl	80024d4 <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 80019ca:	f7ff fd4f 	bl	800146c <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 80019ce:	48e1      	ldr	r0, [pc, #900]	@ (8001d54 <main+0x3c0>)
 80019d0:	f005 fef6 	bl	80077c0 <HAL_TIM_Base_Start>



  fill_screen1(0xF100);
 80019d4:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 80019d8:	f7fe fe54 	bl	8000684 <fill_screen1>
  HAL_Delay(1000);
 80019dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019e0:	f001 fff4 	bl	80039cc <HAL_Delay>
  fill_screen2(0xF00F);
 80019e4:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 80019e8:	f7fe feac 	bl	8000744 <fill_screen2>
  HAL_Delay(1000);
 80019ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019f0:	f001 ffec 	bl	80039cc <HAL_Delay>
  fill_screen2(0xFFFF);
 80019f4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80019f8:	f7fe fea4 	bl	8000744 <fill_screen2>
  HAL_Delay(1000);
 80019fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a00:	f001 ffe4 	bl	80039cc <HAL_Delay>

  unsigned int startTick = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001a0a:	6013      	str	r3, [r2, #0]
  unsigned int endTick = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001a12:	f102 021c 	add.w	r2, r2, #28
 8001a16:	6013      	str	r3, [r2, #0]
  unsigned int getTime = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001a1e:	f102 0218 	add.w	r2, r2, #24
 8001a22:	6013      	str	r3, [r2, #0]
  ENTITY entity;


  /*Test SCALARE*/

  fill_screen2(0xFFFF);
 8001a24:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a28:	f7fe fe8c 	bl	8000744 <fill_screen2>

  entity.x0 = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001a32:	f102 021e 	add.w	r2, r2, #30
 8001a36:	8013      	strh	r3, [r2, #0]
  entity.y0 = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001a3e:	8013      	strh	r3, [r2, #0]
  entity.id = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001a46:	f102 021c 	add.w	r2, r2, #28
 8001a4a:	7013      	strb	r3, [r2, #0]
  draw_entity(&entity, "graphic/multi2.bin");
 8001a4c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a50:	f103 031c 	add.w	r3, r3, #28
 8001a54:	49c0      	ldr	r1, [pc, #768]	@ (8001d58 <main+0x3c4>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f8e8 	bl	8000c2c <draw_entity>
  HAL_Delay(1000);
 8001a5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a60:	f001 ffb4 	bl	80039cc <HAL_Delay>
  fill_screen2(0xFFFF);
 8001a64:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a68:	f7fe fe6c 	bl	8000744 <fill_screen2>
  scaling_entity(&entity, 100, "graphic/multi2.bin", "multi2.bin");
 8001a6c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a70:	f103 031c 	add.w	r3, r3, #28
 8001a74:	4ab9      	ldr	r2, [pc, #740]	@ (8001d5c <main+0x3c8>)
 8001a76:	49b8      	ldr	r1, [pc, #736]	@ (8001d58 <main+0x3c4>)
 8001a78:	ed9f 0ab9 	vldr	s0, [pc, #740]	@ 8001d60 <main+0x3cc>
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fad5 	bl	800102c <scaling_entity>
  draw_entity(&entity, entity.filePathName);
 8001a82:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001a86:	f103 030c 	add.w	r3, r3, #12
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001a90:	f103 031c 	add.w	r3, r3, #28
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f8c8 	bl	8000c2c <draw_entity>

  HAL_Delay(1000);
 8001a9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aa0:	f001 ff94 	bl	80039cc <HAL_Delay>

  fill_screen2(0xFFFF);
 8001aa4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001aa8:	f7fe fe4c 	bl	8000744 <fill_screen2>
  draw_entity(&entity, entity.filePathName);
 8001aac:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001ab0:	f103 030c 	add.w	r3, r3, #12
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001aba:	f103 031c 	add.w	r3, r3, #28
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f8b3 	bl	8000c2c <draw_entity>
  HAL_Delay(1000);
 8001ac6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aca:	f001 ff7f 	bl	80039cc <HAL_Delay>
  fill_screen2(0xFFFF);
 8001ace:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ad2:	f7fe fe37 	bl	8000744 <fill_screen2>
  scaling_entity(&entity, 0.5, entity.filePathName, "multi2.bin");
 8001ad6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001ada:	f103 030c 	add.w	r3, r3, #12
 8001ade:	6819      	ldr	r1, [r3, #0]
 8001ae0:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001ae4:	f103 031c 	add.w	r3, r3, #28
 8001ae8:	4a9c      	ldr	r2, [pc, #624]	@ (8001d5c <main+0x3c8>)
 8001aea:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fa9c 	bl	800102c <scaling_entity>
  draw_entity(&entity, entity.filePathName);
 8001af4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001af8:	f103 030c 	add.w	r3, r3, #12
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b02:	f103 031c 	add.w	r3, r3, #28
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f88f 	bl	8000c2c <draw_entity>
  HAL_Delay(1000);
 8001b0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b12:	f001 ff5b 	bl	80039cc <HAL_Delay>

  //free(dataRec1);

  //Test image print from SD card
  ENTITY ent;
  ent.x0 = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001b1c:	f102 020a 	add.w	r2, r2, #10
 8001b20:	8013      	strh	r3, [r2, #0]
  ent.y0 = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001b28:	f102 020c 	add.w	r2, r2, #12
 8001b2c:	8013      	strh	r3, [r2, #0]
  ent.id = 0x00;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001b34:	f102 0208 	add.w	r2, r2, #8
 8001b38:	7013      	strb	r3, [r2, #0]
  draw_entity(&ent, "graphic/img5.bin");
 8001b3a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b3e:	f103 0308 	add.w	r3, r3, #8
 8001b42:	4988      	ldr	r1, [pc, #544]	@ (8001d64 <main+0x3d0>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f871 	bl	8000c2c <draw_entity>
  HAL_Delay(2000);
 8001b4a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b4e:	f001 ff3d 	bl	80039cc <HAL_Delay>
  draw_entity(&ent, "graphic/img6.bin");
 8001b52:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b56:	f103 0308 	add.w	r3, r3, #8
 8001b5a:	4983      	ldr	r1, [pc, #524]	@ (8001d68 <main+0x3d4>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff f865 	bl	8000c2c <draw_entity>
  HAL_Delay(2000);
 8001b62:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b66:	f001 ff31 	bl	80039cc <HAL_Delay>
  draw_entity(&ent, "graphic/img8.bin");
 8001b6a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b6e:	f103 0308 	add.w	r3, r3, #8
 8001b72:	497e      	ldr	r1, [pc, #504]	@ (8001d6c <main+0x3d8>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff f859 	bl	8000c2c <draw_entity>
  HAL_Delay(2000);
 8001b7a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b7e:	f001 ff25 	bl	80039cc <HAL_Delay>
  draw_entity(&ent, "graphic/img9.bin");
 8001b82:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001b86:	f103 0308 	add.w	r3, r3, #8
 8001b8a:	4979      	ldr	r1, [pc, #484]	@ (8001d70 <main+0x3dc>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff f84d 	bl	8000c2c <draw_entity>
  HAL_Delay(2000);
 8001b92:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b96:	f001 ff19 	bl	80039cc <HAL_Delay>
  startTick = HAL_GetTick();
 8001b9a:	f001 ff0b 	bl	80039b4 <HAL_GetTick>
 8001b9e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001ba2:	6018      	str	r0, [r3, #0]
  draw_entity(&ent, "graphic/img92.bin");
 8001ba4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001ba8:	f103 0308 	add.w	r3, r3, #8
 8001bac:	4971      	ldr	r1, [pc, #452]	@ (8001d74 <main+0x3e0>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f83c 	bl	8000c2c <draw_entity>
  endTick = HAL_GetTick();
 8001bb4:	f001 fefe 	bl	80039b4 <HAL_GetTick>
 8001bb8:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001bbc:	f103 031c 	add.w	r3, r3, #28
 8001bc0:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001bc2:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001bc6:	f103 031c 	add.w	r3, r3, #28
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001bd8:	f102 0218 	add.w	r2, r2, #24
 8001bdc:	6013      	str	r3, [r2, #0]

  fill_screen2(0x0000);
 8001bde:	2000      	movs	r0, #0
 8001be0:	f7fe fdb0 	bl	8000744 <fill_screen2>
  draw_entity(&ent, "graphic/pixel1.bin");
 8001be4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001be8:	f103 0308 	add.w	r3, r3, #8
 8001bec:	4962      	ldr	r1, [pc, #392]	@ (8001d78 <main+0x3e4>)
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f81c 	bl	8000c2c <draw_entity>
  HAL_Delay(3000);
 8001bf4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001bf8:	f001 fee8 	bl	80039cc <HAL_Delay>

  //Test translation

  //ENTITY entity;

  entity.x0 = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001c02:	f102 021e 	add.w	r2, r2, #30
 8001c06:	8013      	strh	r3, [r2, #0]
  entity.y0 = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c0e:	8013      	strh	r3, [r2, #0]
  entity.x1 = 64;
 8001c10:	2340      	movs	r3, #64	@ 0x40
 8001c12:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c16:	f102 0202 	add.w	r2, r2, #2
 8001c1a:	8013      	strh	r3, [r2, #0]
  entity.y1 = 64;
 8001c1c:	2340      	movs	r3, #64	@ 0x40
 8001c1e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c22:	f102 0204 	add.w	r2, r2, #4
 8001c26:	8013      	strh	r3, [r2, #0]
  entity.color = 0xF100;
 8001c28:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8001c2c:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001c30:	f102 0206 	add.w	r2, r2, #6
 8001c34:	8013      	strh	r3, [r2, #0]

  //draw_entity(&entity,NULL);

  //translation_test(&entity, 1, 0);

  HAL_Delay(500);
 8001c36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c3a:	f001 fec7 	bl	80039cc <HAL_Delay>
  translation_entity(&entity, entity.x0+100, entity.y0+100, 1);//, 0xF100);
 8001c3e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001c42:	f103 031e 	add.w	r3, r3, #30
 8001c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	3364      	adds	r3, #100	@ 0x64
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	b219      	sxth	r1, r3
 8001c52:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3364      	adds	r3, #100	@ 0x64
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001c66:	f100 001c 	add.w	r0, r0, #28
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f7ff f8de 	bl	8000e2c <translation_entity>
  HAL_Delay(2000);
 8001c70:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c74:	f001 feaa 	bl	80039cc <HAL_Delay>
  translation_entity(&entity, entity.x0+32, entity.y0+32, 1);//, 0xF100);
 8001c78:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001c7c:	f103 031e 	add.w	r3, r3, #30
 8001c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3320      	adds	r3, #32
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	b219      	sxth	r1, r3
 8001c8c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	3320      	adds	r3, #32
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001ca0:	f100 001c 	add.w	r0, r0, #28
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f7ff f8c1 	bl	8000e2c <translation_entity>
  HAL_Delay(500);
 8001caa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cae:	f001 fe8d 	bl	80039cc <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0+32, 1);//, 0xF100);
 8001cb2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001cb6:	f103 031e 	add.w	r3, r3, #30
 8001cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	330c      	adds	r3, #12
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b219      	sxth	r1, r3
 8001cc6:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3320      	adds	r3, #32
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	b21a      	sxth	r2, r3
 8001cd6:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001cda:	f100 001c 	add.w	r0, r0, #28
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f7ff f8a4 	bl	8000e2c <translation_entity>
  HAL_Delay(500);
 8001ce4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ce8:	f001 fe70 	bl	80039cc <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0, 1);//, 0xF100);
 8001cec:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001cf0:	f103 031e 	add.w	r3, r3, #30
 8001cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	330c      	adds	r3, #12
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	b219      	sxth	r1, r3
 8001d00:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d08:	f507 5080 	add.w	r0, r7, #4096	@ 0x1000
 8001d0c:	f100 001c 	add.w	r0, r0, #28
 8001d10:	2301      	movs	r3, #1
 8001d12:	f7ff f88b 	bl	8000e2c <translation_entity>
  HAL_Delay(500);
 8001d16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d1a:	f001 fe57 	bl	80039cc <HAL_Delay>


  //Test_SD_Card();

  play_audio_file("audio/mine.txt"); //doremi mine songita song22
 8001d1e:	4817      	ldr	r0, [pc, #92]	@ (8001d7c <main+0x3e8>)
 8001d20:	f7fe fbd2 	bl	80004c8 <play_audio_file>

  char *fileData = NULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001d2a:	f102 0214 	add.w	r2, r2, #20
 8001d2e:	6013      	str	r3, [r2, #0]
  read_file("audio/text.txt", fileData);
 8001d30:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d34:	f103 0314 	add.w	r3, r3, #20
 8001d38:	6819      	ldr	r1, [r3, #0]
 8001d3a:	4811      	ldr	r0, [pc, #68]	@ (8001d80 <main+0x3ec>)
 8001d3c:	f000 fbd8 	bl	80024f0 <read_file>
  HAL_Delay(1000);
 8001d40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d44:	f001 fe42 	bl	80039cc <HAL_Delay>

  uint32_t sampleData[1024]; /*23 de ms pentru redare DMA dintre care 7 ms pentru citire din fisier*/
  	  	  	  	  	  	  	 /*Vor ramane aproximativ 16 ms pentru prelucrarea frame-ului (pentru 1024 de esantioane)*/

  startTick = HAL_GetTick();
 8001d48:	f001 fe34 	bl	80039b4 <HAL_GetTick>
 8001d4c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001d50:	6018      	str	r0, [r3, #0]
 8001d52:	e017      	b.n	8001d84 <main+0x3f0>
 8001d54:	20000298 	.word	0x20000298
 8001d58:	0800cb14 	.word	0x0800cb14
 8001d5c:	0800cb28 	.word	0x0800cb28
 8001d60:	42c80000 	.word	0x42c80000
 8001d64:	0800cb34 	.word	0x0800cb34
 8001d68:	0800cb48 	.word	0x0800cb48
 8001d6c:	0800cb5c 	.word	0x0800cb5c
 8001d70:	0800cb70 	.word	0x0800cb70
 8001d74:	0800cb84 	.word	0x0800cb84
 8001d78:	0800cb98 	.word	0x0800cb98
 8001d7c:	0800cbac 	.word	0x0800cbac
 8001d80:	0800cbbc 	.word	0x0800cbbc
  read_audio_file("audio/random.txt", sampleData);
 8001d84:	f107 0308 	add.w	r3, r7, #8
 8001d88:	4619      	mov	r1, r3
 8001d8a:	48cb      	ldr	r0, [pc, #812]	@ (80020b8 <main+0x724>)
 8001d8c:	f000 fc5c 	bl	8002648 <read_audio_file>
  endTick = HAL_GetTick();
 8001d90:	f001 fe10 	bl	80039b4 <HAL_GetTick>
 8001d94:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001d98:	f103 031c 	add.w	r3, r3, #28
 8001d9c:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001d9e:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001da2:	f103 031c 	add.w	r3, r3, #28
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001db4:	f102 0218 	add.w	r2, r2, #24
 8001db8:	6013      	str	r3, [r2, #0]

  HAL_Delay(100);
 8001dba:	2064      	movs	r0, #100	@ 0x64
 8001dbc:	f001 fe06 	bl	80039cc <HAL_Delay>

  startTick = HAL_GetTick();
 8001dc0:	f001 fdf8 	bl	80039b4 <HAL_GetTick>
 8001dc4:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001dc8:	6018      	str	r0, [r3, #0]
  read_audio_file("audio/random.txt", sampleData);
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	4619      	mov	r1, r3
 8001dd0:	48b9      	ldr	r0, [pc, #740]	@ (80020b8 <main+0x724>)
 8001dd2:	f000 fc39 	bl	8002648 <read_audio_file>
  endTick = HAL_GetTick();
 8001dd6:	f001 fded 	bl	80039b4 <HAL_GetTick>
 8001dda:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001dde:	f103 031c 	add.w	r3, r3, #28
 8001de2:	6018      	str	r0, [r3, #0]
  getTime = endTick - startTick;
 8001de4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001de8:	f103 031c 	add.w	r3, r3, #28
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001dfa:	f102 0218 	add.w	r2, r2, #24
 8001dfe:	6013      	str	r3, [r2, #0]

  HAL_Delay(100);
 8001e00:	2064      	movs	r0, #100	@ 0x64
 8001e02:	f001 fde3 	bl	80039cc <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 8001e06:	f107 0308 	add.w	r3, r7, #8
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	48ab      	ldr	r0, [pc, #684]	@ (80020bc <main+0x728>)
 8001e0e:	f000 fc1b 	bl	8002648 <read_audio_file>
  HAL_Delay(100);
 8001e12:	2064      	movs	r0, #100	@ 0x64
 8001e14:	f001 fdda 	bl	80039cc <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 8001e18:	f107 0308 	add.w	r3, r7, #8
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	48a7      	ldr	r0, [pc, #668]	@ (80020bc <main+0x728>)
 8001e20:	f000 fc12 	bl	8002648 <read_audio_file>
  HAL_Delay(100);
 8001e24:	2064      	movs	r0, #100	@ 0x64
 8001e26:	f001 fdd1 	bl	80039cc <HAL_Delay>
  read_audio_file("audio/text.txt", sampleData);
 8001e2a:	f107 0308 	add.w	r3, r7, #8
 8001e2e:	4619      	mov	r1, r3
 8001e30:	48a2      	ldr	r0, [pc, #648]	@ (80020bc <main+0x728>)
 8001e32:	f000 fc09 	bl	8002648 <read_audio_file>
  HAL_Delay(100);
 8001e36:	2064      	movs	r0, #100	@ 0x64
 8001e38:	f001 fdc8 	bl	80039cc <HAL_Delay>

  for(uint8_t i=0;i<100;i++)
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001e42:	f102 0207 	add.w	r2, r2, #7
 8001e46:	7013      	strb	r3, [r2, #0]
 8001e48:	e09c      	b.n	8001f84 <main+0x5f0>
  {
	  for(uint8_t j=0; j<100;j++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001e50:	f102 0206 	add.w	r2, r2, #6
 8001e54:	7013      	strb	r3, [r2, #0]
 8001e56:	e082      	b.n	8001f5e <main+0x5ca>
	  {

		  if(i==j)
 8001e58:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001e5c:	f103 0307 	add.w	r3, r3, #7
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001e66:	f103 0306 	add.w	r3, r3, #6
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d111      	bne.n	8001e94 <main+0x500>
		  {
			  draw_pixel(i,j,0xF100);
 8001e70:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001e74:	f103 0307 	add.w	r3, r3, #7
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001e80:	f102 0206 	add.w	r2, r2, #6
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	b291      	uxth	r1, r2
 8001e88:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fbcf 	bl	8000630 <draw_pixel>
			  continue;
 8001e92:	e059      	b.n	8001f48 <main+0x5b4>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 8001e94:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001e98:	f103 0307 	add.w	r3, r3, #7
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b50      	cmp	r3, #80	@ 0x50
 8001ea0:	d106      	bne.n	8001eb0 <main+0x51c>
 8001ea2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001ea6:	f103 0306 	add.w	r3, r3, #6
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b14      	cmp	r3, #20
 8001eae:	d029      	beq.n	8001f04 <main+0x570>
 8001eb0:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001eb4:	f103 0307 	add.w	r3, r3, #7
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b50      	cmp	r3, #80	@ 0x50
 8001ebc:	d106      	bne.n	8001ecc <main+0x538>
 8001ebe:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001ec2:	f103 0306 	add.w	r3, r3, #6
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b13      	cmp	r3, #19
 8001eca:	d01b      	beq.n	8001f04 <main+0x570>
 8001ecc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001ed0:	f103 0307 	add.w	r3, r3, #7
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b51      	cmp	r3, #81	@ 0x51
 8001ed8:	d106      	bne.n	8001ee8 <main+0x554>
 8001eda:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001ede:	f103 0306 	add.w	r3, r3, #6
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b14      	cmp	r3, #20
 8001ee6:	d00d      	beq.n	8001f04 <main+0x570>
 8001ee8:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001eec:	f103 0307 	add.w	r3, r3, #7
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b51      	cmp	r3, #81	@ 0x51
 8001ef4:	d117      	bne.n	8001f26 <main+0x592>
 8001ef6:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001efa:	f103 0306 	add.w	r3, r3, #6
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b13      	cmp	r3, #19
 8001f02:	d110      	bne.n	8001f26 <main+0x592>
		  {
			  draw_pixel(i,j,0x001F);
 8001f04:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001f08:	f103 0307 	add.w	r3, r3, #7
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001f14:	f102 0206 	add.w	r2, r2, #6
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	b291      	uxth	r1, r2
 8001f1c:	221f      	movs	r2, #31
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fb86 	bl	8000630 <draw_pixel>
			  continue;
 8001f24:	e010      	b.n	8001f48 <main+0x5b4>
		  }


		  draw_pixel(i,j,0xFFFF);
 8001f26:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001f2a:	f103 0307 	add.w	r3, r3, #7
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001f36:	f102 0206 	add.w	r2, r2, #6
 8001f3a:	7812      	ldrb	r2, [r2, #0]
 8001f3c:	b291      	uxth	r1, r2
 8001f3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fb74 	bl	8000630 <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 8001f48:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001f4c:	f103 0306 	add.w	r3, r3, #6
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001f58:	f102 0206 	add.w	r2, r2, #6
 8001f5c:	7013      	strb	r3, [r2, #0]
 8001f5e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001f62:	f103 0306 	add.w	r3, r3, #6
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b63      	cmp	r3, #99	@ 0x63
 8001f6a:	f67f af75 	bls.w	8001e58 <main+0x4c4>
  for(uint8_t i=0;i<100;i++)
 8001f6e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001f72:	f103 0307 	add.w	r3, r3, #7
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8001f7e:	f102 0207 	add.w	r2, r2, #7
 8001f82:	7013      	strb	r3, [r2, #0]
 8001f84:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8001f88:	f103 0307 	add.w	r3, r3, #7
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b63      	cmp	r3, #99	@ 0x63
 8001f90:	f67f af5b 	bls.w	8001e4a <main+0x4b6>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 8001f94:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001f98:	f7fe fbd4 	bl	8000744 <fill_screen2>
  HAL_Delay(1000);
 8001f9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fa0:	f001 fd14 	bl	80039cc <HAL_Delay>
  fill_screen2(0xF150);
 8001fa4:	f24f 1050 	movw	r0, #61776	@ 0xf150
 8001fa8:	f7fe fbcc 	bl	8000744 <fill_screen2>
  HAL_Delay(1000);
 8001fac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fb0:	f001 fd0c 	bl	80039cc <HAL_Delay>
  fill_screen2(0xF111);
 8001fb4:	f24f 1011 	movw	r0, #61713	@ 0xf111
 8001fb8:	f7fe fbc4 	bl	8000744 <fill_screen2>
  HAL_Delay(1000);
 8001fbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fc0:	f001 fd04 	bl	80039cc <HAL_Delay>
  fill_screen2(0xF10F);
 8001fc4:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 8001fc8:	f7fe fbbc 	bl	8000744 <fill_screen2>
  HAL_Delay(1000);
 8001fcc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fd0:	f001 fcfc 	bl	80039cc <HAL_Delay>
  fill_screen2(0xFFFF);
 8001fd4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fd8:	f7fe fbb4 	bl	8000744 <fill_screen2>
  HAL_Delay(1000);
 8001fdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fe0:	f001 fcf4 	bl	80039cc <HAL_Delay>
  fill_screen2(0xFFFF);
 8001fe4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fe8:	f7fe fbac 	bl	8000744 <fill_screen2>

  print_string(36, 200, "Licenta 2025", 12, 0x1F00, 0x001F);
 8001fec:	231f      	movs	r3, #31
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	230c      	movs	r3, #12
 8001ff8:	4a31      	ldr	r2, [pc, #196]	@ (80020c0 <main+0x72c>)
 8001ffa:	21c8      	movs	r1, #200	@ 0xc8
 8001ffc:	2024      	movs	r0, #36	@ 0x24
 8001ffe:	f7fe fcfd 	bl	80009fc <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 8002002:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002006:	461a      	mov	r2, r3
 8002008:	4b2e      	ldr	r3, [pc, #184]	@ (80020c4 <main+0x730>)
 800200a:	f842 3c44 	str.w	r3, [r2, #-68]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 800200e:	f107 0308 	add.w	r3, r7, #8
 8002012:	3b04      	subs	r3, #4
 8002014:	2204      	movs	r2, #4
 8002016:	4619      	mov	r1, r3
 8002018:	482b      	ldr	r0, [pc, #172]	@ (80020c8 <main+0x734>)
 800201a:	f004 fe61 	bl	8006ce0 <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 800201e:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002022:	2250      	movs	r2, #80	@ 0x50
 8002024:	2114      	movs	r1, #20
 8002026:	2014      	movs	r0, #20
 8002028:	f7fe fd2c 	bl	8000a84 <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 800202c:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002030:	2250      	movs	r2, #80	@ 0x50
 8002032:	2114      	movs	r1, #20
 8002034:	2014      	movs	r0, #20
 8002036:	f7fe fd60 	bl	8000afa <draw_vertical_line>

  flagDmaSpiTx = 0;
 800203a:	4b24      	ldr	r3, [pc, #144]	@ (80020cc <main+0x738>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 8002040:	221f      	movs	r2, #31
 8002042:	2100      	movs	r1, #0
 8002044:	2000      	movs	r0, #0
 8002046:	f7fe faf3 	bl	8000630 <draw_pixel>
  draw_pixel(1,0,0xF800);
 800204a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800204e:	2100      	movs	r1, #0
 8002050:	2001      	movs	r0, #1
 8002052:	f7fe faed 	bl	8000630 <draw_pixel>
  draw_pixel(0,1,0x001F);
 8002056:	221f      	movs	r2, #31
 8002058:	2101      	movs	r1, #1
 800205a:	2000      	movs	r0, #0
 800205c:	f7fe fae8 	bl	8000630 <draw_pixel>
  draw_pixel(1,1,0xF800);
 8002060:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002064:	2101      	movs	r1, #1
 8002066:	2001      	movs	r0, #1
 8002068:	f7fe fae2 	bl	8000630 <draw_pixel>

  HAL_Delay(50);
 800206c:	2032      	movs	r0, #50	@ 0x32
 800206e:	f001 fcad 	bl	80039cc <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 8002072:	2001      	movs	r0, #1
 8002074:	f00a fb82 	bl	800c77c <malloc>
 8002078:	4603      	mov	r3, r0
 800207a:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 800207e:	f102 0210 	add.w	r2, r2, #16
 8002082:	6013      	str	r3, [r2, #0]
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 8002084:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8002088:	f103 0310 	add.w	r3, r3, #16
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	2302      	movs	r3, #2
 8002092:	2202      	movs	r2, #2
 8002094:	2100      	movs	r1, #0
 8002096:	2000      	movs	r0, #0
 8002098:	f7ff fb3c 	bl	8001714 <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 800209c:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80020a0:	f103 0310 	add.w	r3, r3, #16
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	f00a fb71 	bl	800c78c <free>

  HAL_Delay(3000);
 80020aa:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80020ae:	f001 fc8d 	bl	80039cc <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80020b2:	bf00      	nop
 80020b4:	e7fd      	b.n	80020b2 <main+0x71e>
 80020b6:	bf00      	nop
 80020b8:	0800cbcc 	.word	0x0800cbcc
 80020bc:	0800cbbc 	.word	0x0800cbbc
 80020c0:	0800cbe0 	.word	0x0800cbe0
 80020c4:	04030201 	.word	0x04030201
 80020c8:	20000180 	.word	0x20000180
 80020cc:	20000328 	.word	0x20000328

080020d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b094      	sub	sp, #80	@ 0x50
 80020d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020d6:	f107 0320 	add.w	r3, r7, #32
 80020da:	2230      	movs	r2, #48	@ 0x30
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f00a fc40 	bl	800c964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	4b28      	ldr	r3, [pc, #160]	@ (800219c <SystemClock_Config+0xcc>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	4a27      	ldr	r2, [pc, #156]	@ (800219c <SystemClock_Config+0xcc>)
 80020fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002102:	6413      	str	r3, [r2, #64]	@ 0x40
 8002104:	4b25      	ldr	r3, [pc, #148]	@ (800219c <SystemClock_Config+0xcc>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002110:	2300      	movs	r3, #0
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	4b22      	ldr	r3, [pc, #136]	@ (80021a0 <SystemClock_Config+0xd0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a21      	ldr	r2, [pc, #132]	@ (80021a0 <SystemClock_Config+0xd0>)
 800211a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <SystemClock_Config+0xd0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800212c:	2301      	movs	r3, #1
 800212e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002130:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002136:	2302      	movs	r3, #2
 8002138:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800213a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800213e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002140:	2304      	movs	r3, #4
 8002142:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002144:	23a8      	movs	r3, #168	@ 0xa8
 8002146:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002148:	2302      	movs	r3, #2
 800214a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800214c:	2307      	movs	r3, #7
 800214e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002150:	f107 0320 	add.w	r3, r7, #32
 8002154:	4618      	mov	r0, r3
 8002156:	f002 fd03 	bl	8004b60 <HAL_RCC_OscConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002160:	f000 f9b2 	bl	80024c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002164:	230f      	movs	r3, #15
 8002166:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002168:	2302      	movs	r3, #2
 800216a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002170:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002174:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002176:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800217a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	2105      	movs	r1, #5
 8002182:	4618      	mov	r0, r3
 8002184:	f002 ff64 	bl	8005050 <HAL_RCC_ClockConfig>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800218e:	f000 f99b 	bl	80024c8 <Error_Handler>
  }
}
 8002192:	bf00      	nop
 8002194:	3750      	adds	r7, #80	@ 0x50
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800
 80021a0:	40007000 	.word	0x40007000

080021a4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80021aa:	463b      	mov	r3, r7
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80021b2:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <MX_DAC_Init+0x4c>)
 80021b4:	4a0f      	ldr	r2, [pc, #60]	@ (80021f4 <MX_DAC_Init+0x50>)
 80021b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80021b8:	480d      	ldr	r0, [pc, #52]	@ (80021f0 <MX_DAC_Init+0x4c>)
 80021ba:	f001 fd3c 	bl	8003c36 <HAL_DAC_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80021c4:	f000 f980 	bl	80024c8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80021c8:	2324      	movs	r3, #36	@ 0x24
 80021ca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80021d0:	463b      	mov	r3, r7
 80021d2:	2200      	movs	r2, #0
 80021d4:	4619      	mov	r1, r3
 80021d6:	4806      	ldr	r0, [pc, #24]	@ (80021f0 <MX_DAC_Init+0x4c>)
 80021d8:	f001 fe26 	bl	8003e28 <HAL_DAC_ConfigChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80021e2:	f000 f971 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000088 	.word	0x20000088
 80021f4:	40007400 	.word	0x40007400

080021f8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <MX_SDIO_SD_Init+0x38>)
 80021fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <MX_SDIO_SD_Init+0x3c>)
 8002200:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002202:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <MX_SDIO_SD_Init+0x38>)
 8002204:	2200      	movs	r2, #0
 8002206:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002208:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <MX_SDIO_SD_Init+0x38>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800220e:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <MX_SDIO_SD_Init+0x38>)
 8002210:	2200      	movs	r2, #0
 8002212:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002214:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <MX_SDIO_SD_Init+0x38>)
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800221a:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <MX_SDIO_SD_Init+0x38>)
 800221c:	2200      	movs	r2, #0
 800221e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8002220:	4b03      	ldr	r3, [pc, #12]	@ (8002230 <MX_SDIO_SD_Init+0x38>)
 8002222:	2208      	movs	r2, #8
 8002224:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	200000fc 	.word	0x200000fc
 8002234:	40012c00 	.word	0x40012c00

08002238 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800223c:	4b17      	ldr	r3, [pc, #92]	@ (800229c <MX_SPI1_Init+0x64>)
 800223e:	4a18      	ldr	r2, [pc, #96]	@ (80022a0 <MX_SPI1_Init+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002242:	4b16      	ldr	r3, [pc, #88]	@ (800229c <MX_SPI1_Init+0x64>)
 8002244:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800224a:	4b14      	ldr	r3, [pc, #80]	@ (800229c <MX_SPI1_Init+0x64>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002250:	4b12      	ldr	r3, [pc, #72]	@ (800229c <MX_SPI1_Init+0x64>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002256:	4b11      	ldr	r3, [pc, #68]	@ (800229c <MX_SPI1_Init+0x64>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800225c:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <MX_SPI1_Init+0x64>)
 800225e:	2200      	movs	r2, #0
 8002260:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002262:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <MX_SPI1_Init+0x64>)
 8002264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002268:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800226a:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <MX_SPI1_Init+0x64>)
 800226c:	2200      	movs	r2, #0
 800226e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002270:	4b0a      	ldr	r3, [pc, #40]	@ (800229c <MX_SPI1_Init+0x64>)
 8002272:	2200      	movs	r2, #0
 8002274:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002276:	4b09      	ldr	r3, [pc, #36]	@ (800229c <MX_SPI1_Init+0x64>)
 8002278:	2200      	movs	r2, #0
 800227a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800227c:	4b07      	ldr	r3, [pc, #28]	@ (800229c <MX_SPI1_Init+0x64>)
 800227e:	2200      	movs	r2, #0
 8002280:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <MX_SPI1_Init+0x64>)
 8002284:	220a      	movs	r2, #10
 8002286:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002288:	4804      	ldr	r0, [pc, #16]	@ (800229c <MX_SPI1_Init+0x64>)
 800228a:	f004 f899 	bl	80063c0 <HAL_SPI_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002294:	f000 f918 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000180 	.word	0x20000180
 80022a0:	40013000 	.word	0x40013000

080022a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022aa:	f107 0308 	add.w	r3, r7, #8
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b8:	463b      	mov	r3, r7
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002338 <MX_TIM2_Init+0x94>)
 80022c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002338 <MX_TIM2_Init+0x94>)
 80022ca:	2253      	movs	r2, #83	@ 0x53
 80022cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002338 <MX_TIM2_Init+0x94>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23;
 80022d4:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <MX_TIM2_Init+0x94>)
 80022d6:	2217      	movs	r2, #23
 80022d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022da:	4b17      	ldr	r3, [pc, #92]	@ (8002338 <MX_TIM2_Init+0x94>)
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e0:	4b15      	ldr	r3, [pc, #84]	@ (8002338 <MX_TIM2_Init+0x94>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022e6:	4814      	ldr	r0, [pc, #80]	@ (8002338 <MX_TIM2_Init+0x94>)
 80022e8:	f005 fa1a 	bl	8007720 <HAL_TIM_Base_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80022f2:	f000 f8e9 	bl	80024c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	4619      	mov	r1, r3
 8002302:	480d      	ldr	r0, [pc, #52]	@ (8002338 <MX_TIM2_Init+0x94>)
 8002304:	f005 fac4 	bl	8007890 <HAL_TIM_ConfigClockSource>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800230e:	f000 f8db 	bl	80024c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002312:	2320      	movs	r3, #32
 8002314:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800231a:	463b      	mov	r3, r7
 800231c:	4619      	mov	r1, r3
 800231e:	4806      	ldr	r0, [pc, #24]	@ (8002338 <MX_TIM2_Init+0x94>)
 8002320:	f005 fcc4 	bl	8007cac <HAL_TIMEx_MasterConfigSynchronization>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800232a:	f000 f8cd 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000298 	.word	0x20000298

0800233c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002340:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002342:	4a12      	ldr	r2, [pc, #72]	@ (800238c <MX_USART1_UART_Init+0x50>)
 8002344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002348:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800234c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800234e:	4b0e      	ldr	r3, [pc, #56]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002354:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800235a:	4b0b      	ldr	r3, [pc, #44]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002360:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002362:	220c      	movs	r2, #12
 8002364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002366:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002372:	4805      	ldr	r0, [pc, #20]	@ (8002388 <MX_USART1_UART_Init+0x4c>)
 8002374:	f005 fd16 	bl	8007da4 <HAL_UART_Init>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800237e:	f000 f8a3 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200002e0 	.word	0x200002e0
 800238c:	40011000 	.word	0x40011000

08002390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <MX_DMA_Init+0x78>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	4a1a      	ldr	r2, [pc, #104]	@ (8002408 <MX_DMA_Init+0x78>)
 80023a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a6:	4b18      	ldr	r3, [pc, #96]	@ (8002408 <MX_DMA_Init+0x78>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	4b14      	ldr	r3, [pc, #80]	@ (8002408 <MX_DMA_Init+0x78>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	4a13      	ldr	r2, [pc, #76]	@ (8002408 <MX_DMA_Init+0x78>)
 80023bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c2:	4b11      	ldr	r3, [pc, #68]	@ (8002408 <MX_DMA_Init+0x78>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2100      	movs	r1, #0
 80023d2:	2010      	movs	r0, #16
 80023d4:	f001 fbf9 	bl	8003bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80023d8:	2010      	movs	r0, #16
 80023da:	f001 fc12 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	2100      	movs	r1, #0
 80023e2:	2038      	movs	r0, #56	@ 0x38
 80023e4:	f001 fbf1 	bl	8003bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023e8:	2038      	movs	r0, #56	@ 0x38
 80023ea:	f001 fc0a 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	203b      	movs	r0, #59	@ 0x3b
 80023f4:	f001 fbe9 	bl	8003bca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80023f8:	203b      	movs	r0, #59	@ 0x3b
 80023fa:	f001 fc02 	bl	8003c02 <HAL_NVIC_EnableIRQ>

}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	@ 0x28
 8002410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
 8002420:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	4b26      	ldr	r3, [pc, #152]	@ (80024c0 <MX_GPIO_Init+0xb4>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	4a25      	ldr	r2, [pc, #148]	@ (80024c0 <MX_GPIO_Init+0xb4>)
 800242c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002430:	6313      	str	r3, [r2, #48]	@ 0x30
 8002432:	4b23      	ldr	r3, [pc, #140]	@ (80024c0 <MX_GPIO_Init+0xb4>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b1f      	ldr	r3, [pc, #124]	@ (80024c0 <MX_GPIO_Init+0xb4>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	4a1e      	ldr	r2, [pc, #120]	@ (80024c0 <MX_GPIO_Init+0xb4>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6313      	str	r3, [r2, #48]	@ 0x30
 800244e:	4b1c      	ldr	r3, [pc, #112]	@ (80024c0 <MX_GPIO_Init+0xb4>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	4b18      	ldr	r3, [pc, #96]	@ (80024c0 <MX_GPIO_Init+0xb4>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	4a17      	ldr	r2, [pc, #92]	@ (80024c0 <MX_GPIO_Init+0xb4>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	6313      	str	r3, [r2, #48]	@ 0x30
 800246a:	4b15      	ldr	r3, [pc, #84]	@ (80024c0 <MX_GPIO_Init+0xb4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <MX_GPIO_Init+0xb4>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	4a10      	ldr	r2, [pc, #64]	@ (80024c0 <MX_GPIO_Init+0xb4>)
 8002480:	f043 0308 	orr.w	r3, r3, #8
 8002484:	6313      	str	r3, [r2, #48]	@ 0x30
 8002486:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <MX_GPIO_Init+0xb4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8002492:	2200      	movs	r2, #0
 8002494:	2158      	movs	r1, #88	@ 0x58
 8002496:	480b      	ldr	r0, [pc, #44]	@ (80024c4 <MX_GPIO_Init+0xb8>)
 8002498:	f002 fb48 	bl	8004b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 800249c:	2358      	movs	r3, #88	@ 0x58
 800249e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a0:	2301      	movs	r3, #1
 80024a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	4619      	mov	r1, r3
 80024b2:	4804      	ldr	r0, [pc, #16]	@ (80024c4 <MX_GPIO_Init+0xb8>)
 80024b4:	f002 f99e 	bl	80047f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024b8:	bf00      	nop
 80024ba:	3728      	adds	r7, #40	@ 0x28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020c00 	.word	0x40020c00

080024c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024cc:	b672      	cpsid	i
}
 80024ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <Error_Handler+0x8>

080024d4 <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 80024d8:	2201      	movs	r2, #1
 80024da:	4903      	ldr	r1, [pc, #12]	@ (80024e8 <init_cardSD+0x14>)
 80024dc:	4803      	ldr	r0, [pc, #12]	@ (80024ec <init_cardSD+0x18>)
 80024de:	f008 ffe7 	bl	800b4b0 <f_mount>

}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	0800cbf0 	.word	0x0800cbf0
 80024ec:	2000032c 	.word	0x2000032c

080024f0 <read_file>:



void read_file(char *filePathName, char*fileData)
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80024fc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002500:	6018      	str	r0, [r3, #0]
 8002502:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002506:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800250a:	6019      	str	r1, [r3, #0]

	FRESULT res;  //stocarea starii cardului SD (util pentru depanare)
	FIL file;  //stocarea informatiilor despre fisierul deschis
	UINT byteRead;  //contor pentru numarul total de octeti cititi efectivi

	fileData = (char*)malloc(128*sizeof(char));
 800250c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002510:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 8002514:	2080      	movs	r0, #128	@ 0x80
 8002516:	f00a f931 	bl	800c77c <malloc>
 800251a:	4603      	mov	r3, r0
 800251c:	6023      	str	r3, [r4, #0]

	res = f_open(&file, filePathName, FA_READ);
 800251e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002522:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002526:	f107 000c 	add.w	r0, r7, #12
 800252a:	2201      	movs	r2, #1
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	f009 f805 	bl	800b53c <f_open>
 8002532:	4603      	mov	r3, r0
 8002534:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f

	if(res != FR_OK)
 8002538:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800253c:	2b00      	cmp	r3, #0
 800253e:	d131      	bne.n	80025a4 <read_file+0xb4>
	{
		return;
	}

	f_read(&file, fileData, (sizeof(fileData)*128)-1, &byteRead);
 8002540:	f107 0308 	add.w	r3, r7, #8
 8002544:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8002548:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 800254c:	f107 000c 	add.w	r0, r7, #12
 8002550:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002554:	6809      	ldr	r1, [r1, #0]
 8002556:	f009 f9ab 	bl	800b8b0 <f_read>
	fileData[byteRead] = '\0';
 800255a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800255e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8002568:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	4413      	add	r3, r2
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]

	fileData = (char*)realloc(fileData, byteRead);
 8002574:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002578:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002582:	f5a3 7410 	sub.w	r4, r3, #576	@ 0x240
 8002586:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800258a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800258e:	4611      	mov	r1, r2
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	f00a f9b1 	bl	800c8f8 <realloc>
 8002596:	6020      	str	r0, [r4, #0]

	f_close(&file);
 8002598:	f107 030c 	add.w	r3, r7, #12
 800259c:	4618      	mov	r0, r3
 800259e:	f009 fcb9 	bl	800bf14 <f_close>
 80025a2:	e000      	b.n	80025a6 <read_file+0xb6>
		return;
 80025a4:	bf00      	nop


}
 80025a6:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd90      	pop	{r4, r7, pc}

080025ae <string_to_int>:
}



static uint16_t string_to_int(char *string)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b085      	sub	sp, #20
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]

	while((*string) != '\n')
 80025ba:	e015      	b.n	80025e8 <string_to_int+0x3a>
	{
		if(((*string) >= '0') && ((*string)<='9'))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80025c2:	d90e      	bls.n	80025e2 <string_to_int+0x34>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b39      	cmp	r3, #57	@ 0x39
 80025ca:	d80a      	bhi.n	80025e2 <string_to_int+0x34>
		{
			number = number * 10 + ((*string) - '0');
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	461a      	mov	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	4413      	add	r3, r2
 80025de:	3b30      	subs	r3, #48	@ 0x30
 80025e0:	60fb      	str	r3, [r7, #12]
		}

		string++;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3301      	adds	r3, #1
 80025e6:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b0a      	cmp	r3, #10
 80025ee:	d1e5      	bne.n	80025bc <string_to_int+0xe>
	}

	return number;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	b29b      	uxth	r3, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <assign_filePath>:

}


char* assign_filePath(const char *filePathName)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	 * Output: adresa char* catre calea
	 * ! alocat dinamic
	 */

	char *string;
	uint8_t i = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	73fb      	strb	r3, [r7, #15]


	while(filePathName[i] != '\0')
 800260c:	e002      	b.n	8002614 <assign_filePath+0x14>
	{
		i++;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	3301      	adds	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
	while(filePathName[i] != '\0')
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f6      	bne.n	800260e <assign_filePath+0xe>
	}

	i++;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	3301      	adds	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]

	string = (char*)malloc(sizeof(char)*i);
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	4618      	mov	r0, r3
 800262a:	f00a f8a7 	bl	800c77c <malloc>
 800262e:	4603      	mov	r3, r0
 8002630:	60bb      	str	r3, [r7, #8]
	memcpy(string, filePathName, i);
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	461a      	mov	r2, r3
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	68b8      	ldr	r0, [r7, #8]
 800263a:	f00a f9e7 	bl	800ca0c <memcpy>

	return string;
 800263e:	68bb      	ldr	r3, [r7, #8]


}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <read_audio_file>:




void read_audio_file(char *filePathName, uint32_t *buffer)
{
 8002648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800264c:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8002650:	af00      	add	r7, sp, #0
 8002652:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002656:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800265a:	6018      	str	r0, [r3, #0]
 800265c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002660:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002664:	6019      	str	r1, [r3, #0]
 8002666:	466b      	mov	r3, sp
 8002668:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 800266a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800266e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8002672:	f107 0018 	add.w	r0, r7, #24
 8002676:	2201      	movs	r2, #1
 8002678:	6819      	ldr	r1, [r3, #0]
 800267a:	f008 ff5f 	bl	800b53c <f_open>
 800267e:	4603      	mov	r3, r0
 8002680:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 8002684:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8002688:	2b00      	cmp	r3, #0
 800268a:	f040 80fa 	bne.w	8002882 <read_audio_file+0x23a>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 800268e:	4b80      	ldr	r3, [pc, #512]	@ (8002890 <read_audio_file+0x248>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	f107 0318 	add.w	r3, r7, #24
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f009 fc65 	bl	800bf68 <f_lseek>


	if(flagNewAudioFile == 1)
 800269e:	4b7d      	ldr	r3, [pc, #500]	@ (8002894 <read_audio_file+0x24c>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d017      	beq.n	80026d6 <read_audio_file+0x8e>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		*/

		flagNewAudioFile = 0;
 80026a6:	4b7b      	ldr	r3, [pc, #492]	@ (8002894 <read_audio_file+0x24c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 80026ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002898 <read_audio_file+0x250>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	801a      	strh	r2, [r3, #0]

		currentPosition = 0;
 80026b2:	4b77      	ldr	r3, [pc, #476]	@ (8002890 <read_audio_file+0x248>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul la inceputul fisierului*/
 80026b8:	4b75      	ldr	r3, [pc, #468]	@ (8002890 <read_audio_file+0x248>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	f107 0318 	add.w	r3, r7, #24
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f009 fc50 	bl	800bf68 <f_lseek>

		fileSize = f_size(&file); /*Aflam dimensiune in octeti a fisierului*/
 80026c8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80026cc:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	4a72      	ldr	r2, [pc, #456]	@ (800289c <read_audio_file+0x254>)
 80026d4:	6013      	str	r3, [r2, #0]
	}

	const int n = 5120; /*1024 *5 caractere de prelucrat*/
 80026d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026da:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	unsigned int nrFrames = fileSize / n;
 80026de:	4b6f      	ldr	r3, [pc, #444]	@ (800289c <read_audio_file+0x254>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c

	if(fileSize%n != 0)
 80026ee:	4b6b      	ldr	r3, [pc, #428]	@ (800289c <read_audio_file+0x254>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 80026f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80026fa:	fb01 f202 	mul.w	r2, r1, r2
 80026fe:	1a9b      	subs	r3, r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d004      	beq.n	800270e <read_audio_file+0xc6>
	{
		nrFrames++;
 8002704:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8002708:	3301      	adds	r3, #1
 800270a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	}

	uint8_t index = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
	char tempBuffer[n];
 8002714:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002718:	3b01      	subs	r3, #1
 800271a:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800271e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002722:	2200      	movs	r2, #0
 8002724:	4698      	mov	r8, r3
 8002726:	4691      	mov	r9, r2
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002734:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002738:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800273c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002740:	2200      	movs	r2, #0
 8002742:	461c      	mov	r4, r3
 8002744:	4615      	mov	r5, r2
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	00eb      	lsls	r3, r5, #3
 8002750:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002754:	00e2      	lsls	r2, r4, #3
 8002756:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800275a:	3307      	adds	r3, #7
 800275c:	08db      	lsrs	r3, r3, #3
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	ebad 0d03 	sub.w	sp, sp, r3
 8002764:	466b      	mov	r3, sp
 8002766:	3300      	adds	r3, #0
 8002768:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
	char nrCharBuffer[5];

	f_read(&file, tempBuffer, (sizeof(char)*n)-1, &byteRead);
 800276c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8002770:	1e5a      	subs	r2, r3, #1
 8002772:	f107 0314 	add.w	r3, r7, #20
 8002776:	f107 0018 	add.w	r0, r7, #24
 800277a:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 800277e:	f009 f897 	bl	800b8b0 <f_read>
	tempBuffer[byteRead] = '\n';
 8002782:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002786:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8002790:	210a      	movs	r1, #10
 8002792:	54d1      	strb	r1, [r2, r3]


	for(uint16_t i=0; i< byteRead; i++)
 8002794:	2300      	movs	r3, #0
 8002796:	f8a7 3258 	strh.w	r3, [r7, #600]	@ 0x258
 800279a:	e040      	b.n	800281e <read_audio_file+0x1d6>
		/*
		 * Vom parcurge tempBuffer si vom transforma caracterele citite
		 * in numere zecimale de interes
		 */

		if(tempBuffer[i] != '\n')
 800279c:	f8b7 3258 	ldrh.w	r3, [r7, #600]	@ 0x258
 80027a0:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	2b0a      	cmp	r3, #10
 80027a8:	d011      	beq.n	80027ce <read_audio_file+0x186>
		{
			nrCharBuffer[index] = tempBuffer[i];
 80027aa:	f8b7 2258 	ldrh.w	r2, [r7, #600]	@ 0x258
 80027ae:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 80027b2:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 80027b6:	5c89      	ldrb	r1, [r1, r2]
 80027b8:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80027bc:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 80027c0:	54d1      	strb	r1, [r2, r3]
			index++;
 80027c2:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 80027c6:	3301      	adds	r3, #1
 80027c8:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
 80027cc:	e022      	b.n	8002814 <read_audio_file+0x1cc>
		else
		{
			/*Vom avea in nrCharBuffer esantionul in char si il vom
			 * converti la int*/

			nrCharBuffer[index] = '\n';
 80027ce:	f897 325b 	ldrb.w	r3, [r7, #603]	@ 0x25b
 80027d2:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80027d6:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 80027da:	210a      	movs	r1, #10
 80027dc:	54d1      	strb	r1, [r2, r3]
			*buffer = string_to_int(nrCharBuffer);
 80027de:	f107 030c 	add.w	r3, r7, #12
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fee3 	bl	80025ae <string_to_int>
 80027e8:	4603      	mov	r3, r0
 80027ea:	461a      	mov	r2, r3
 80027ec:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80027f0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	601a      	str	r2, [r3, #0]
			buffer++;
 80027f8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80027fc:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8002800:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8002804:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	3204      	adds	r2, #4
 800280c:	601a      	str	r2, [r3, #0]

			index = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 325b 	strb.w	r3, [r7, #603]	@ 0x25b
	for(uint16_t i=0; i< byteRead; i++)
 8002814:	f8b7 3258 	ldrh.w	r3, [r7, #600]	@ 0x258
 8002818:	3301      	adds	r3, #1
 800281a:	f8a7 3258 	strh.w	r3, [r7, #600]	@ 0x258
 800281e:	f8b7 2258 	ldrh.w	r2, [r7, #600]	@ 0x258
 8002822:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002826:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d3b5      	bcc.n	800279c <read_audio_file+0x154>


	}


	if(currentFrame == nrFrames)
 8002830:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <read_audio_file+0x250>)
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800283a:	4293      	cmp	r3, r2
 800283c:	d108      	bne.n	8002850 <read_audio_file+0x208>
	{
		/*Resetare flag pentru reinitializare*/

		flagNewAudioFile = 1;
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <read_audio_file+0x24c>)
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8002844:	f107 0318 	add.w	r3, r7, #24
 8002848:	4618      	mov	r0, r3
 800284a:	f009 fb63 	bl	800bf14 <f_close>
		return;
 800284e:	e018      	b.n	8002882 <read_audio_file+0x23a>
	}

	currentFrame++;
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <read_audio_file+0x250>)
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	4b0f      	ldr	r3, [pc, #60]	@ (8002898 <read_audio_file+0x250>)
 800285a:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 800285c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8002860:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <read_audio_file+0x248>)
 8002868:	6013      	str	r3, [r2, #0]
	currentPosition++;
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <read_audio_file+0x248>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	4a07      	ldr	r2, [pc, #28]	@ (8002890 <read_audio_file+0x248>)
 8002872:	6013      	str	r3, [r2, #0]

	f_close(&file);
 8002874:	f107 0318 	add.w	r3, r7, #24
 8002878:	4618      	mov	r0, r3
 800287a:	f009 fb4b 	bl	800bf14 <f_close>
 800287e:	46b5      	mov	sp, r6
 8002880:	e000      	b.n	8002884 <read_audio_file+0x23c>
		return;
 8002882:	46b5      	mov	sp, r6


}
 8002884:	f507 7719 	add.w	r7, r7, #612	@ 0x264
 8002888:	46bd      	mov	sp, r7
 800288a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800288e:	bf00      	nop
 8002890:	2000055c 	.word	0x2000055c
 8002894:	20000008 	.word	0x20000008
 8002898:	20000560 	.word	0x20000560
 800289c:	20000564 	.word	0x20000564

080028a0 <read_image_file>:


void read_image_file(char *filePathName, ENTITY *entity, uint16_t *indexFlag, bool *flagImgDone)
{
 80028a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028a4:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	f507 7616 	add.w	r6, r7, #600	@ 0x258
 80028ae:	f5a6 7613 	sub.w	r6, r6, #588	@ 0x24c
 80028b2:	6030      	str	r0, [r6, #0]
 80028b4:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 80028b8:	f5a0 7014 	sub.w	r0, r0, #592	@ 0x250
 80028bc:	6001      	str	r1, [r0, #0]
 80028be:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 80028c2:	f5a1 7115 	sub.w	r1, r1, #596	@ 0x254
 80028c6:	600a      	str	r2, [r1, #0]
 80028c8:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 80028cc:	f5a2 7216 	sub.w	r2, r2, #600	@ 0x258
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	466b      	mov	r3, sp
 80028d4:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 80028d6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80028da:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80028de:	f107 001c 	add.w	r0, r7, #28
 80028e2:	2201      	movs	r2, #1
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	f008 fe29 	bl	800b53c <f_open>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255

	if(res != FR_OK)
 80028f0:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f040 81b0 	bne.w	8002c5a <read_image_file+0x3ba>
	static const int n = 3072;
	static unsigned int nrFrames = 0;



	if(flagNewImageFile == 1)
 80028fa:	4ba9      	ldr	r3, [pc, #676]	@ (8002ba0 <read_image_file+0x300>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80d6 	beq.w	8002ab0 <read_image_file+0x210>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 8002904:	4ba7      	ldr	r3, [pc, #668]	@ (8002ba4 <read_image_file+0x304>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 800290a:	4ba6      	ldr	r3, [pc, #664]	@ (8002ba4 <read_image_file+0x304>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	f107 031c 	add.w	r3, r7, #28
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f009 fb27 	bl	800bf68 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 800291a:	f107 0318 	add.w	r3, r7, #24
 800291e:	f107 0114 	add.w	r1, r7, #20
 8002922:	f107 001c 	add.w	r0, r7, #28
 8002926:	2204      	movs	r2, #4
 8002928:	f008 ffc2 	bl	800b8b0 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 800292c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002930:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2200      	movs	r2, #0
 8002938:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 800293a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800293e:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2200      	movs	r2, #0
 8002946:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8002948:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800294c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002956:	461a      	mov	r2, r3
 8002958:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800295c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002960:	785b      	ldrb	r3, [r3, #1]
 8002962:	4313      	orrs	r3, r2
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	b21a      	sxth	r2, r3
 8002968:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800296c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8002976:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800297a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	b21b      	sxth	r3, r3
 8002982:	430b      	orrs	r3, r1
 8002984:	b21b      	sxth	r3, r3
 8002986:	4313      	orrs	r3, r2
 8002988:	b21a      	sxth	r2, r3
 800298a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800298e:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8002996:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800299a:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029a4:	461a      	mov	r2, r3
 80029a6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029aa:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80029ae:	78db      	ldrb	r3, [r3, #3]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	b21a      	sxth	r2, r3
 80029b6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029ba:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80029c4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029c8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80029cc:	789b      	ldrb	r3, [r3, #2]
 80029ce:	b21b      	sxth	r3, r3
 80029d0:	430b      	orrs	r3, r1
 80029d2:	b21b      	sxth	r3, r3
 80029d4:	4313      	orrs	r3, r2
 80029d6:	b21a      	sxth	r2, r3
 80029d8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029dc:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	811a      	strh	r2, [r3, #8]


		if((entity->x1)*(entity->y1) < 1024)
 80029e4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029e8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80029f8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a02:	fb02 f303 	mul.w	r3, r2, r3
 8002a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a0a:	da1f      	bge.n	8002a4c <read_image_file+0x1ac>
		{
			/*Pentru un singur frame alocam exact cat trebuie */
			entity->data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8002a0c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a10:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a20:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a2a:	fb03 f202 	mul.w	r2, r3, r2
 8002a2e:	4613      	mov	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f009 fea1 	bl	800c77c <malloc>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a42:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	e00b      	b.n	8002a64 <read_image_file+0x1c4>
		}

		else
		{
			/*Alocam maxim 3072 de octeti per frame*/
			entity->data = malloc(sizeof(char)*3072);
 8002a4c:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002a50:	f009 fe94 	bl	800c77c <malloc>
 8002a54:	4603      	mov	r3, r0
 8002a56:	461a      	mov	r2, r3
 8002a58:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a5c:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60da      	str	r2, [r3, #12]
		}

		flagNewImageFile = 0;
 8002a64:	4b4e      	ldr	r3, [pc, #312]	@ (8002ba0 <read_image_file+0x300>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8002a6a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ba8 <read_image_file+0x308>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	801a      	strh	r2, [r3, #0]

		currentPosition = byteRead;
 8002a70:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a74:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba4 <read_image_file+0x304>)
 8002a7c:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8002a7e:	4b49      	ldr	r3, [pc, #292]	@ (8002ba4 <read_image_file+0x304>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	f107 031c 	add.w	r3, r7, #28
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f009 fa6d 	bl	800bf68 <f_lseek>

		/*Aflam dimensiune in octeti a imaginii de citit (scadem dimensiunea headerului)*/
		fileSize = f_size(&file) - 4;
 8002a8e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002a92:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	3b04      	subs	r3, #4
 8002a9a:	4a44      	ldr	r2, [pc, #272]	@ (8002bac <read_image_file+0x30c>)
 8002a9c:	6013      	str	r3, [r2, #0]

		/*calculam numarul de frameuri*/

		nrFrames = fileSize / n;
 8002a9e:	4b43      	ldr	r3, [pc, #268]	@ (8002bac <read_image_file+0x30c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a43      	ldr	r2, [pc, #268]	@ (8002bb0 <read_image_file+0x310>)
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aaa:	4a42      	ldr	r2, [pc, #264]	@ (8002bb4 <read_image_file+0x314>)
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e007      	b.n	8002ac0 <read_image_file+0x220>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8002ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ba4 <read_image_file+0x304>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	f107 031c 	add.w	r3, r7, #28
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f009 fa54 	bl	800bf68 <f_lseek>
	}



	if(fileSize == n)
 8002ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8002bac <read_image_file+0x30c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a3a      	ldr	r2, [pc, #232]	@ (8002bb0 <read_image_file+0x310>)
 8002ac6:	6812      	ldr	r2, [r2, #0]
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d104      	bne.n	8002ad6 <read_image_file+0x236>
	{
		nrFrames--; /*pastram logica primului frame pana la n*/
 8002acc:	4b39      	ldr	r3, [pc, #228]	@ (8002bb4 <read_image_file+0x314>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	4a38      	ldr	r2, [pc, #224]	@ (8002bb4 <read_image_file+0x314>)
 8002ad4:	6013      	str	r3, [r2, #0]
	}

	if(fileSize%n != 0 && nrFrames!=0)
 8002ad6:	4b35      	ldr	r3, [pc, #212]	@ (8002bac <read_image_file+0x30c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a35      	ldr	r2, [pc, #212]	@ (8002bb0 <read_image_file+0x310>)
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ae2:	fb01 f202 	mul.w	r2, r1, r2
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <read_image_file+0x25e>
 8002aec:	4b31      	ldr	r3, [pc, #196]	@ (8002bb4 <read_image_file+0x314>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d004      	beq.n	8002afe <read_image_file+0x25e>
	{
		nrFrames++;
 8002af4:	4b2f      	ldr	r3, [pc, #188]	@ (8002bb4 <read_image_file+0x314>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	4a2e      	ldr	r2, [pc, #184]	@ (8002bb4 <read_image_file+0x314>)
 8002afc:	6013      	str	r3, [r2, #0]
	}

	*indexFlag = 0;
 8002afe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b02:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	801a      	strh	r2, [r3, #0]
	char tempBuffer[n];
 8002b0c:	4b28      	ldr	r3, [pc, #160]	@ (8002bb0 <read_image_file+0x310>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8002b16:	4b26      	ldr	r3, [pc, #152]	@ (8002bb0 <read_image_file+0x310>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	4690      	mov	r8, r2
 8002b20:	4699      	mov	r9, r3
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b36:	4b1e      	ldr	r3, [pc, #120]	@ (8002bb0 <read_image_file+0x310>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	4614      	mov	r4, r2
 8002b40:	461d      	mov	r5, r3
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	00eb      	lsls	r3, r5, #3
 8002b4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b50:	00e2      	lsls	r2, r4, #3
 8002b52:	4b17      	ldr	r3, [pc, #92]	@ (8002bb0 <read_image_file+0x310>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3307      	adds	r3, #7
 8002b58:	08db      	lsrs	r3, r3, #3
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	ebad 0d03 	sub.w	sp, sp, r3
 8002b60:	466b      	mov	r3, sp
 8002b62:	3300      	adds	r3, #0
 8002b64:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

	f_read(&file, tempBuffer, (sizeof(char)*n), &byteRead);
 8002b68:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <read_image_file+0x310>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f107 0318 	add.w	r3, r7, #24
 8002b72:	f107 001c 	add.w	r0, r7, #28
 8002b76:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8002b7a:	f008 fe99 	bl	800b8b0 <f_read>
	(*indexFlag) = byteRead;
 8002b7e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b82:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002b8e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	801a      	strh	r2, [r3, #0]

	for(uint16_t i=0; i<byteRead; i++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8002b9c:	e020      	b.n	8002be0 <read_image_file+0x340>
 8002b9e:	bf00      	nop
 8002ba0:	20000009 	.word	0x20000009
 8002ba4:	20000568 	.word	0x20000568
 8002ba8:	2000056c 	.word	0x2000056c
 8002bac:	20000570 	.word	0x20000570
 8002bb0:	0800d994 	.word	0x0800d994
 8002bb4:	20000574 	.word	0x20000574
	{
		/*Vom parcurge bufferul la intervale de 2 valori HEXA, preluand caracterele ascii
		 * pe care le vom transforma in zecimal ex: FF1200FE3000...*/

		entity->data[i] = tempBuffer[i];
 8002bb8:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8002bbc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002bc0:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68d9      	ldr	r1, [r3, #12]
 8002bc8:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8002bcc:	440b      	add	r3, r1
 8002bce:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8002bd2:	5c8a      	ldrb	r2, [r1, r2]
 8002bd4:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<byteRead; i++)
 8002bd6:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8002bda:	3301      	adds	r3, #1
 8002bdc:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8002be0:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8002be4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002be8:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d3e2      	bcc.n	8002bb8 <read_image_file+0x318>

	}


	currentFrame++;
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c68 <read_image_file+0x3c8>)
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002c68 <read_image_file+0x3c8>)
 8002bfc:	801a      	strh	r2, [r3, #0]

	if((currentFrame >= nrFrames) || ((*(indexFlag)) < 3072))
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <read_image_file+0x3c8>)
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	4b19      	ldr	r3, [pc, #100]	@ (8002c6c <read_image_file+0x3cc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d208      	bcs.n	8002c1e <read_image_file+0x37e>
 8002c0c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002c10:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002c1c:	d20f      	bcs.n	8002c3e <read_image_file+0x39e>
	{
		/*Resetare flag pentru reinitializare*/

		*flagImgDone = 1;
 8002c1e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002c22:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]

		flagNewImageFile = 1;
 8002c2c:	4b10      	ldr	r3, [pc, #64]	@ (8002c70 <read_image_file+0x3d0>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8002c32:	f107 031c 	add.w	r3, r7, #28
 8002c36:	4618      	mov	r0, r3
 8002c38:	f009 f96c 	bl	800bf14 <f_close>
		return;
 8002c3c:	e00d      	b.n	8002c5a <read_image_file+0x3ba>
	}


	currentPosition = f_tell(&file);
 8002c3e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002c42:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	4a0a      	ldr	r2, [pc, #40]	@ (8002c74 <read_image_file+0x3d4>)
 8002c4a:	6013      	str	r3, [r2, #0]


	f_close(&file);
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	4618      	mov	r0, r3
 8002c52:	f009 f95f 	bl	800bf14 <f_close>
 8002c56:	46b5      	mov	sp, r6
 8002c58:	e000      	b.n	8002c5c <read_image_file+0x3bc>
		return;
 8002c5a:	46b5      	mov	sp, r6


}
 8002c5c:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8002c60:	46bd      	mov	sp, r7
 8002c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c66:	bf00      	nop
 8002c68:	2000056c 	.word	0x2000056c
 8002c6c:	20000574 	.word	0x20000574
 8002c70:	20000009 	.word	0x20000009
 8002c74:	20000568 	.word	0x20000568

08002c78 <frame_number_x>:



static uint16_t frame_number_x(ENTITY *entity, const float factor)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	ed87 0a02 	vstr	s0, [r7, #8]

	uint8_t x = 1;
 8002c84:	2301      	movs	r3, #1
 8002c86:	75fb      	strb	r3, [r7, #23]

	if(factor > 1)
 8002c88:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c98:	dd33      	ble.n	8002d02 <frame_number_x+0x8a>
	{
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8002c9a:	e00b      	b.n	8002cb4 <frame_number_x+0x3c>
		{
			if(x == entity->y1)
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d102      	bne.n	8002cae <frame_number_x+0x36>
			{
				return x;
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	e05f      	b.n	8002d6e <frame_number_x+0xf6>
			}

			x++;
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cca:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd2:	7dfb      	ldrb	r3, [r7, #23]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002d7c <frame_number_x+0x104>
 8002ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cec:	d9d6      	bls.n	8002c9c <frame_number_x+0x24>
		}


		if(x==1)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <frame_number_x+0x80>
		{
			return 1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e03a      	b.n	8002d6e <frame_number_x+0xf6>
		}

		else
		{
			return (x-1);
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	e035      	b.n	8002d6e <frame_number_x+0xf6>
	}


	else
	{
		x = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	75fb      	strb	r3, [r7, #23]

		while((((int)(entity->x1)*x) <= (32*32)))
 8002d06:	e016      	b.n	8002d36 <frame_number_x+0xbe>
		{
			if(x == entity->y1)
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d102      	bne.n	8002d1a <frame_number_x+0xa2>
			{
				return x;
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	e029      	b.n	8002d6e <frame_number_x+0xf6>
			}

			x = x + (int)(1/factor);
 8002d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d2a:	edc7 7a01 	vstr	s15, [r7, #4]
 8002d2e:	793a      	ldrb	r2, [r7, #4]
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
 8002d32:	4413      	add	r3, r2
 8002d34:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*x) <= (32*32)))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	7dfb      	ldrb	r3, [r7, #23]
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d48:	ddde      	ble.n	8002d08 <frame_number_x+0x90>
		}


		return (x-(1/factor));
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
 8002d4c:	ee07 3a90 	vmov	s15, r3
 8002d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d54:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8002d58:	edd7 6a02 	vldr	s13, [r7, #8]
 8002d5c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d68:	ee17 3a90 	vmov	r3, s15
 8002d6c:	b29b      	uxth	r3, r3

	}


}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	44800000 	.word	0x44800000

08002d80 <read_image_file_scaling>:



void read_image_file_scaling(char *filePathName, ENTITY *entity, const float factor, uint16_t *px, bool *flagTerm)
{
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8002d8c:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8002d90:	6020      	str	r0, [r4, #0]
 8002d92:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 8002d96:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8002d9a:	6001      	str	r1, [r0, #0]
 8002d9c:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8002da0:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8002da4:	ed81 0a00 	vstr	s0, [r1]
 8002da8:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8002dac:	f5a1 7114 	sub.w	r1, r1, #592	@ 0x250
 8002db0:	600a      	str	r2, [r1, #0]
 8002db2:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8002db6:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8002dba:	6013      	str	r3, [r2, #0]

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8002dbc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002dc0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002dc4:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002dc8:	2201      	movs	r2, #1
 8002dca:	6819      	ldr	r1, [r3, #0]
 8002dcc:	f008 fbb6 	bl	800b53c <f_open>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 8002dd6:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f040 81be 	bne.w	800315c <read_image_file_scaling+0x3dc>
	static FSIZE_t currentPosition = 0;

	static uint16_t x = 0; /*Numarul de linii din M1 ai sa avem sub 32x32 pixeli de prelucrat in M2*/
	static unsigned int nrFrames = 0;

	if(flagNewImageFile == 1)
 8002de0:	4ba9      	ldr	r3, [pc, #676]	@ (8003088 <read_image_file_scaling+0x308>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8112 	beq.w	800300e <read_image_file_scaling+0x28e>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 8002dea:	4ba8      	ldr	r3, [pc, #672]	@ (800308c <read_image_file_scaling+0x30c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 8002df0:	4ba6      	ldr	r3, [pc, #664]	@ (800308c <read_image_file_scaling+0x30c>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f009 f8b4 	bl	800bf68 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 8002e00:	f107 0320 	add.w	r3, r7, #32
 8002e04:	f107 011c 	add.w	r1, r7, #28
 8002e08:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	f008 fd4f 	bl	800b8b0 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8002e12:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e16:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8002e20:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e24:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8002e2e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e32:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e42:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002e46:	785b      	ldrb	r3, [r3, #1]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	b21a      	sxth	r2, r3
 8002e4e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e52:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8002e5c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e60:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	b21b      	sxth	r3, r3
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	b21a      	sxth	r2, r3
 8002e70:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e74:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8002e7c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e80:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002e90:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002e94:	78db      	ldrb	r3, [r3, #3]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	021b      	lsls	r3, r3, #8
 8002e9a:	b21a      	sxth	r2, r3
 8002e9c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ea0:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8002eaa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002eae:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002eb2:	789b      	ldrb	r3, [r3, #2]
 8002eb4:	b21b      	sxth	r3, r3
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	b21b      	sxth	r3, r3
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	b21a      	sxth	r2, r3
 8002ebe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ec2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	811a      	strh	r2, [r3, #8]


		flagNewImageFile = 0;
 8002eca:	4b6f      	ldr	r3, [pc, #444]	@ (8003088 <read_image_file_scaling+0x308>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8002ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8003090 <read_image_file_scaling+0x310>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	801a      	strh	r2, [r3, #0]
		flagOneFrame = 0;
 8002ed6:	4b6f      	ldr	r3, [pc, #444]	@ (8003094 <read_image_file_scaling+0x314>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]

		currentPosition = byteRead;
 8002edc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002ee0:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a69      	ldr	r2, [pc, #420]	@ (800308c <read_image_file_scaling+0x30c>)
 8002ee8:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8002eea:	4b68      	ldr	r3, [pc, #416]	@ (800308c <read_image_file_scaling+0x30c>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f009 f837 	bl	800bf68 <f_lseek>


		x = frame_number_x(entity, factor); /*numarul de linii cuprins in fiecare frame al matricei M1*/
 8002efa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002efe:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 8002f02:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f06:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f0a:	ed92 0a00 	vldr	s0, [r2]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	f7ff feb2 	bl	8002c78 <frame_number_x>
 8002f14:	4603      	mov	r3, r0
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b5f      	ldr	r3, [pc, #380]	@ (8003098 <read_image_file_scaling+0x318>)
 8002f1a:	801a      	strh	r2, [r3, #0]
		*px = x;
 8002f1c:	4b5e      	ldr	r3, [pc, #376]	@ (8003098 <read_image_file_scaling+0x318>)
 8002f1e:	881a      	ldrh	r2, [r3, #0]
 8002f20:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f24:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	801a      	strh	r2, [r3, #0]

		if(x == entity->y1)
 8002f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8003098 <read_image_file_scaling+0x318>)
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f36:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d125      	bne.n	8002f90 <read_image_file_scaling+0x210>
		{
			flagOneFrame = 1;
 8002f44:	4b53      	ldr	r3, [pc, #332]	@ (8003094 <read_image_file_scaling+0x314>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
			nrFrames = 1; /*Avem o imagine care scalata are mai putini de 32x32 pixeli*/
 8002f4a:	4b54      	ldr	r3, [pc, #336]	@ (800309c <read_image_file_scaling+0x31c>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
			entity->data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8002f50:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f54:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f64:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f6e:	fb03 f202 	mul.w	r2, r3, r2
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f009 fbff 	bl	800c77c <malloc>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f86:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	e046      	b.n	800301e <read_image_file_scaling+0x29e>

		}

		else
		{
			entity->data = malloc(3*sizeof(char)*(entity->x1)*x);
 8002f90:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002f94:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	4b3d      	ldr	r3, [pc, #244]	@ (8003098 <read_image_file_scaling+0x318>)
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	fb03 f202 	mul.w	r2, r3, r2
 8002fa8:	4613      	mov	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f009 fbe4 	bl	800c77c <malloc>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002fbc:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60da      	str	r2, [r3, #12]

			nrFrames = (entity->y1) / x;
 8002fc4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002fc8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b30      	ldr	r3, [pc, #192]	@ (8003098 <read_image_file_scaling+0x318>)
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4b2f      	ldr	r3, [pc, #188]	@ (800309c <read_image_file_scaling+0x31c>)
 8002fe0:	601a      	str	r2, [r3, #0]

			if((entity->y1) % x != 0)
 8002fe2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8002fe6:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ff0:	4a29      	ldr	r2, [pc, #164]	@ (8003098 <read_image_file_scaling+0x318>)
 8002ff2:	8812      	ldrh	r2, [r2, #0]
 8002ff4:	fb93 f1f2 	sdiv	r1, r3, r2
 8002ff8:	fb01 f202 	mul.w	r2, r1, r2
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00d      	beq.n	800301e <read_image_file_scaling+0x29e>
			{
				nrFrames++;
 8003002:	4b26      	ldr	r3, [pc, #152]	@ (800309c <read_image_file_scaling+0x31c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3301      	adds	r3, #1
 8003008:	4a24      	ldr	r2, [pc, #144]	@ (800309c <read_image_file_scaling+0x31c>)
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e007      	b.n	800301e <read_image_file_scaling+0x29e>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 800300e:	4b1f      	ldr	r3, [pc, #124]	@ (800308c <read_image_file_scaling+0x30c>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f008 ffa5 	bl	800bf68 <f_lseek>
	}


	/*Vom pune in entity->data primele valori*/

	if(flagOneFrame == 1)
 800301e:	4b1d      	ldr	r3, [pc, #116]	@ (8003094 <read_image_file_scaling+0x314>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d03c      	beq.n	80030a0 <read_image_file_scaling+0x320>
	{
		f_read(&file, entity->data, (3*sizeof(char)*(entity->x1)*(entity->y1)), &byteRead);
 8003026:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800302a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68d9      	ldr	r1, [r3, #12]
 8003032:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003036:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003040:	461a      	mov	r2, r3
 8003042:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003046:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003050:	fb03 f202 	mul.w	r2, r3, r2
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	441a      	add	r2, r3
 800305a:	f107 0320 	add.w	r3, r7, #32
 800305e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003062:	f008 fc25 	bl	800b8b0 <f_read>

		*flagTerm = 1;
 8003066:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800306a:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2201      	movs	r2, #1
 8003072:	701a      	strb	r2, [r3, #0]
		flagNewImageFile = 1;
 8003074:	4b04      	ldr	r3, [pc, #16]	@ (8003088 <read_image_file_scaling+0x308>)
 8003076:	2201      	movs	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 800307a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800307e:	4618      	mov	r0, r3
 8003080:	f008 ff48 	bl	800bf14 <f_close>
		return;
 8003084:	e06b      	b.n	800315e <read_image_file_scaling+0x3de>
 8003086:	bf00      	nop
 8003088:	2000000a 	.word	0x2000000a
 800308c:	20000578 	.word	0x20000578
 8003090:	2000057c 	.word	0x2000057c
 8003094:	2000057e 	.word	0x2000057e
 8003098:	20000580 	.word	0x20000580
 800309c:	20000584 	.word	0x20000584

	}

	else
	{
		f_read(&file, entity->data, (3*sizeof(char)*(entity->x1)*x), &byteRead);
 80030a0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80030a4:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68d9      	ldr	r1, [r3, #12]
 80030ac:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80030b0:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003168 <read_image_file_scaling+0x3e8>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	fb03 f202 	mul.w	r2, r3, r2
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	441a      	add	r2, r3
 80030ca:	f107 0320 	add.w	r3, r7, #32
 80030ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80030d2:	f008 fbed 	bl	800b8b0 <f_read>

		currentFrame++;
 80030d6:	4b25      	ldr	r3, [pc, #148]	@ (800316c <read_image_file_scaling+0x3ec>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	3301      	adds	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	4b23      	ldr	r3, [pc, #140]	@ (800316c <read_image_file_scaling+0x3ec>)
 80030e0:	801a      	strh	r2, [r3, #0]

		if((currentFrame >= nrFrames))
 80030e2:	4b22      	ldr	r3, [pc, #136]	@ (800316c <read_image_file_scaling+0x3ec>)
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	4b21      	ldr	r3, [pc, #132]	@ (8003170 <read_image_file_scaling+0x3f0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d328      	bcc.n	8003142 <read_image_file_scaling+0x3c2>
		{
			*px = (entity->y1) - x*(nrFrames-1); /*recalculam ultimul numar de linii de citit*/
 80030f0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80030f4:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	4b1b      	ldr	r3, [pc, #108]	@ (8003170 <read_image_file_scaling+0x3f0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3b01      	subs	r3, #1
 8003106:	b299      	uxth	r1, r3
 8003108:	4b17      	ldr	r3, [pc, #92]	@ (8003168 <read_image_file_scaling+0x3e8>)
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	fb11 f303 	smulbb	r3, r1, r3
 8003110:	b29b      	uxth	r3, r3
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	b29a      	uxth	r2, r3
 8003116:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800311a:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	801a      	strh	r2, [r3, #0]
			*flagTerm = 1;
 8003122:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003126:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
			flagNewImageFile = 1;
 8003130:	4b10      	ldr	r3, [pc, #64]	@ (8003174 <read_image_file_scaling+0x3f4>)
 8003132:	2201      	movs	r2, #1
 8003134:	701a      	strb	r2, [r3, #0]
			f_close(&file);
 8003136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800313a:	4618      	mov	r0, r3
 800313c:	f008 feea 	bl	800bf14 <f_close>
			return;
 8003140:	e00d      	b.n	800315e <read_image_file_scaling+0x3de>
		}



		currentPosition = f_tell(&file);
 8003142:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003146:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	4a0a      	ldr	r2, [pc, #40]	@ (8003178 <read_image_file_scaling+0x3f8>)
 800314e:	6013      	str	r3, [r2, #0]
		f_close(&file);
 8003150:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003154:	4618      	mov	r0, r3
 8003156:	f008 fedd 	bl	800bf14 <f_close>
 800315a:	e000      	b.n	800315e <read_image_file_scaling+0x3de>
		return;
 800315c:	bf00      	nop

	}



}
 800315e:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8003162:	46bd      	mov	sp, r7
 8003164:	bd90      	pop	{r4, r7, pc}
 8003166:	bf00      	nop
 8003168:	20000580 	.word	0x20000580
 800316c:	2000057c 	.word	0x2000057c
 8003170:	20000584 	.word	0x20000584
 8003174:	2000000a 	.word	0x2000000a
 8003178:	20000578 	.word	0x20000578

0800317c <write_image_file>:



void write_image_file(char *filePathName, uint8_t *data, size_t nrBytesData, int16_t x1, int16_t y1, bool flagTerm)
{
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8003182:	af00      	add	r7, sp, #0
 8003184:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8003188:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 800318c:	6020      	str	r0, [r4, #0]
 800318e:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8003192:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8003196:	6001      	str	r1, [r0, #0]
 8003198:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 800319c:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 80031a0:	600a      	str	r2, [r1, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031a8:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 80031ac:	801a      	strh	r2, [r3, #0]


	static bool flagStart = 0;
	static FSIZE_t currentPosition = 0;

	if(flagStart == 0)
 80031ae:	4b4b      	ldr	r3, [pc, #300]	@ (80032dc <write_image_file+0x160>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	f083 0301 	eor.w	r3, r3, #1
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d04b      	beq.n	8003254 <write_image_file+0xd8>
	{

		res = f_open(&file, filePathName, FA_WRITE | FA_CREATE_ALWAYS);
 80031bc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031c0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80031c4:	f107 001c 	add.w	r0, r7, #28
 80031c8:	220a      	movs	r2, #10
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	f008 f9b6 	bl	800b53c <f_open>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f


		if (res != FR_OK)
 80031d6:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d177      	bne.n	80032ce <write_image_file+0x152>
		{
		    return;
		}


		currentPosition = 0;
 80031de:	4b40      	ldr	r3, [pc, #256]	@ (80032e0 <write_image_file+0x164>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
		/*
		 * Scriem mai intai headerul anume
		 * dimensiunea imaginii asociate
		 */

		header[0] = (int8_t)(x1);
 80031e4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031e8:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031f4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80031f8:	701a      	strb	r2, [r3, #0]
		header[1] = (int8_t)(x1>>8);
 80031fa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80031fe:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003206:	121b      	asrs	r3, r3, #8
 8003208:	b21b      	sxth	r3, r3
 800320a:	b2da      	uxtb	r2, r3
 800320c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003210:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003214:	705a      	strb	r2, [r3, #1]
		header[2] = (int8_t)(y1);
 8003216:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 800321a:	b2da      	uxtb	r2, r3
 800321c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003220:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003224:	709a      	strb	r2, [r3, #2]
		header[3] = (int8_t)(y1>>8);
 8003226:	f9b7 3260 	ldrsh.w	r3, [r7, #608]	@ 0x260
 800322a:	121b      	asrs	r3, r3, #8
 800322c:	b21b      	sxth	r3, r3
 800322e:	b2da      	uxtb	r2, r3
 8003230:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003234:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003238:	70da      	strb	r2, [r3, #3]

		f_write(&file, header, 4, &byteWr);
 800323a:	f107 0318 	add.w	r3, r7, #24
 800323e:	f107 0114 	add.w	r1, r7, #20
 8003242:	f107 001c 	add.w	r0, r7, #28
 8003246:	2204      	movs	r2, #4
 8003248:	f008 fc71 	bl	800bb2e <f_write>

		flagStart = 1;
 800324c:	4b23      	ldr	r3, [pc, #140]	@ (80032dc <write_image_file+0x160>)
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e018      	b.n	8003286 <write_image_file+0x10a>
	}


	else
	{
		res = f_open(&file, filePathName, FA_WRITE | FA_OPEN_ALWAYS);
 8003254:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003258:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800325c:	f107 001c 	add.w	r0, r7, #28
 8003260:	2212      	movs	r2, #18
 8003262:	6819      	ldr	r1, [r3, #0]
 8003264:	f008 f96a 	bl	800b53c <f_open>
 8003268:	4603      	mov	r3, r0
 800326a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f

		if (res != FR_OK)
 800326e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8003272:	2b00      	cmp	r3, #0
 8003274:	d12d      	bne.n	80032d2 <write_image_file+0x156>
		{
		    return;
		}

		f_lseek(&file, currentPosition);
 8003276:	4b1a      	ldr	r3, [pc, #104]	@ (80032e0 <write_image_file+0x164>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	f107 031c 	add.w	r3, r7, #28
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f008 fe71 	bl	800bf68 <f_lseek>

	}


	if(flagTerm == 1)
 8003286:	f897 3264 	ldrb.w	r3, [r7, #612]	@ 0x264
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <write_image_file+0x118>
	{
		flagStart = 0;
 800328e:	4b13      	ldr	r3, [pc, #76]	@ (80032dc <write_image_file+0x160>)
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]

	}


	f_write(&file, data, nrBytesData, &byteWr);
 8003294:	f107 0318 	add.w	r3, r7, #24
 8003298:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800329c:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 80032a0:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 80032a4:	f5a1 7112 	sub.w	r1, r1, #584	@ 0x248
 80032a8:	f107 001c 	add.w	r0, r7, #28
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	6809      	ldr	r1, [r1, #0]
 80032b0:	f008 fc3d 	bl	800bb2e <f_write>
	currentPosition = f_tell(&file);
 80032b4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80032b8:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	4a08      	ldr	r2, [pc, #32]	@ (80032e0 <write_image_file+0x164>)
 80032c0:	6013      	str	r3, [r2, #0]

	f_close(&file);
 80032c2:	f107 031c 	add.w	r3, r7, #28
 80032c6:	4618      	mov	r0, r3
 80032c8:	f008 fe24 	bl	800bf14 <f_close>
 80032cc:	e002      	b.n	80032d4 <write_image_file+0x158>
		    return;
 80032ce:	bf00      	nop
 80032d0:	e000      	b.n	80032d4 <write_image_file+0x158>
		    return;
 80032d2:	bf00      	nop

}
 80032d4:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd90      	pop	{r4, r7, pc}
 80032dc:	20000588 	.word	0x20000588
 80032e0:	2000058c 	.word	0x2000058c

080032e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	4b10      	ldr	r3, [pc, #64]	@ (8003330 <HAL_MspInit+0x4c>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003330 <HAL_MspInit+0x4c>)
 80032f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003330 <HAL_MspInit+0x4c>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003302:	607b      	str	r3, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	4b09      	ldr	r3, [pc, #36]	@ (8003330 <HAL_MspInit+0x4c>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	4a08      	ldr	r2, [pc, #32]	@ (8003330 <HAL_MspInit+0x4c>)
 8003310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003314:	6413      	str	r3, [r2, #64]	@ 0x40
 8003316:	4b06      	ldr	r3, [pc, #24]	@ (8003330 <HAL_MspInit+0x4c>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800

08003334 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	@ 0x28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a30      	ldr	r2, [pc, #192]	@ (8003414 <HAL_DAC_MspInit+0xe0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d159      	bne.n	800340a <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	4b2f      	ldr	r3, [pc, #188]	@ (8003418 <HAL_DAC_MspInit+0xe4>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	4a2e      	ldr	r2, [pc, #184]	@ (8003418 <HAL_DAC_MspInit+0xe4>)
 8003360:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003364:	6413      	str	r3, [r2, #64]	@ 0x40
 8003366:	4b2c      	ldr	r3, [pc, #176]	@ (8003418 <HAL_DAC_MspInit+0xe4>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b28      	ldr	r3, [pc, #160]	@ (8003418 <HAL_DAC_MspInit+0xe4>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337a:	4a27      	ldr	r2, [pc, #156]	@ (8003418 <HAL_DAC_MspInit+0xe4>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6313      	str	r3, [r2, #48]	@ 0x30
 8003382:	4b25      	ldr	r3, [pc, #148]	@ (8003418 <HAL_DAC_MspInit+0xe4>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800338e:	2310      	movs	r3, #16
 8003390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003392:	2303      	movs	r3, #3
 8003394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800339a:	f107 0314 	add.w	r3, r7, #20
 800339e:	4619      	mov	r1, r3
 80033a0:	481e      	ldr	r0, [pc, #120]	@ (800341c <HAL_DAC_MspInit+0xe8>)
 80033a2:	f001 fa27 	bl	80047f4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80033a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003420 <HAL_DAC_MspInit+0xec>)
 80033a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003424 <HAL_DAC_MspInit+0xf0>)
 80033aa:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80033ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003420 <HAL_DAC_MspInit+0xec>)
 80033ae:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80033b2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003420 <HAL_DAC_MspInit+0xec>)
 80033b6:	2240      	movs	r2, #64	@ 0x40
 80033b8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ba:	4b19      	ldr	r3, [pc, #100]	@ (8003420 <HAL_DAC_MspInit+0xec>)
 80033bc:	2200      	movs	r2, #0
 80033be:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80033c0:	4b17      	ldr	r3, [pc, #92]	@ (8003420 <HAL_DAC_MspInit+0xec>)
 80033c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033c6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033c8:	4b15      	ldr	r3, [pc, #84]	@ (8003420 <HAL_DAC_MspInit+0xec>)
 80033ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033ce:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033d0:	4b13      	ldr	r3, [pc, #76]	@ (8003420 <HAL_DAC_MspInit+0xec>)
 80033d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80033d6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80033d8:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <HAL_DAC_MspInit+0xec>)
 80033da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033de:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80033e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003420 <HAL_DAC_MspInit+0xec>)
 80033e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80033e6:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003420 <HAL_DAC_MspInit+0xec>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80033ee:	480c      	ldr	r0, [pc, #48]	@ (8003420 <HAL_DAC_MspInit+0xec>)
 80033f0:	f000 fdfe 	bl	8003ff0 <HAL_DMA_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80033fa:	f7ff f865 	bl	80024c8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a07      	ldr	r2, [pc, #28]	@ (8003420 <HAL_DAC_MspInit+0xec>)
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	4a06      	ldr	r2, [pc, #24]	@ (8003420 <HAL_DAC_MspInit+0xec>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800340a:	bf00      	nop
 800340c:	3728      	adds	r7, #40	@ 0x28
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40007400 	.word	0x40007400
 8003418:	40023800 	.word	0x40023800
 800341c:	40020000 	.word	0x40020000
 8003420:	2000009c 	.word	0x2000009c
 8003424:	40026088 	.word	0x40026088

08003428 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08a      	sub	sp, #40	@ 0x28
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003430:	f107 0314 	add.w	r3, r7, #20
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a31      	ldr	r2, [pc, #196]	@ (800350c <HAL_SD_MspInit+0xe4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d15b      	bne.n	8003502 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	4b30      	ldr	r3, [pc, #192]	@ (8003510 <HAL_SD_MspInit+0xe8>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	4a2f      	ldr	r2, [pc, #188]	@ (8003510 <HAL_SD_MspInit+0xe8>)
 8003454:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003458:	6453      	str	r3, [r2, #68]	@ 0x44
 800345a:	4b2d      	ldr	r3, [pc, #180]	@ (8003510 <HAL_SD_MspInit+0xe8>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b29      	ldr	r3, [pc, #164]	@ (8003510 <HAL_SD_MspInit+0xe8>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346e:	4a28      	ldr	r2, [pc, #160]	@ (8003510 <HAL_SD_MspInit+0xe8>)
 8003470:	f043 0304 	orr.w	r3, r3, #4
 8003474:	6313      	str	r3, [r2, #48]	@ 0x30
 8003476:	4b26      	ldr	r3, [pc, #152]	@ (8003510 <HAL_SD_MspInit+0xe8>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	4b22      	ldr	r3, [pc, #136]	@ (8003510 <HAL_SD_MspInit+0xe8>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348a:	4a21      	ldr	r2, [pc, #132]	@ (8003510 <HAL_SD_MspInit+0xe8>)
 800348c:	f043 0308 	orr.w	r3, r3, #8
 8003490:	6313      	str	r3, [r2, #48]	@ 0x30
 8003492:	4b1f      	ldr	r3, [pc, #124]	@ (8003510 <HAL_SD_MspInit+0xe8>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800349e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034a8:	2301      	movs	r3, #1
 80034aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ac:	2303      	movs	r3, #3
 80034ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80034b0:	230c      	movs	r3, #12
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b4:	f107 0314 	add.w	r3, r7, #20
 80034b8:	4619      	mov	r1, r3
 80034ba:	4816      	ldr	r0, [pc, #88]	@ (8003514 <HAL_SD_MspInit+0xec>)
 80034bc:	f001 f99a 	bl	80047f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c6:	2302      	movs	r3, #2
 80034c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ce:	2303      	movs	r3, #3
 80034d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80034d2:	230c      	movs	r3, #12
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	480d      	ldr	r0, [pc, #52]	@ (8003514 <HAL_SD_MspInit+0xec>)
 80034de:	f001 f989 	bl	80047f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034e2:	2304      	movs	r3, #4
 80034e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e6:	2302      	movs	r3, #2
 80034e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ea:	2301      	movs	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ee:	2303      	movs	r3, #3
 80034f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80034f2:	230c      	movs	r3, #12
 80034f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034f6:	f107 0314 	add.w	r3, r7, #20
 80034fa:	4619      	mov	r1, r3
 80034fc:	4806      	ldr	r0, [pc, #24]	@ (8003518 <HAL_SD_MspInit+0xf0>)
 80034fe:	f001 f979 	bl	80047f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003502:	bf00      	nop
 8003504:	3728      	adds	r7, #40	@ 0x28
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40012c00 	.word	0x40012c00
 8003510:	40023800 	.word	0x40023800
 8003514:	40020800 	.word	0x40020800
 8003518:	40020c00 	.word	0x40020c00

0800351c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	@ 0x28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003524:	f107 0314 	add.w	r3, r7, #20
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	60da      	str	r2, [r3, #12]
 8003532:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a47      	ldr	r2, [pc, #284]	@ (8003658 <HAL_SPI_MspInit+0x13c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	f040 8088 	bne.w	8003650 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	4b45      	ldr	r3, [pc, #276]	@ (800365c <HAL_SPI_MspInit+0x140>)
 8003546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003548:	4a44      	ldr	r2, [pc, #272]	@ (800365c <HAL_SPI_MspInit+0x140>)
 800354a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800354e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003550:	4b42      	ldr	r3, [pc, #264]	@ (800365c <HAL_SPI_MspInit+0x140>)
 8003552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003554:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	4b3e      	ldr	r3, [pc, #248]	@ (800365c <HAL_SPI_MspInit+0x140>)
 8003562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003564:	4a3d      	ldr	r2, [pc, #244]	@ (800365c <HAL_SPI_MspInit+0x140>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6313      	str	r3, [r2, #48]	@ 0x30
 800356c:	4b3b      	ldr	r3, [pc, #236]	@ (800365c <HAL_SPI_MspInit+0x140>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003578:	23e0      	movs	r3, #224	@ 0xe0
 800357a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357c:	2302      	movs	r3, #2
 800357e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003584:	2303      	movs	r3, #3
 8003586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003588:	2305      	movs	r3, #5
 800358a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	4619      	mov	r1, r3
 8003592:	4833      	ldr	r0, [pc, #204]	@ (8003660 <HAL_SPI_MspInit+0x144>)
 8003594:	f001 f92e 	bl	80047f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8003598:	4b32      	ldr	r3, [pc, #200]	@ (8003664 <HAL_SPI_MspInit+0x148>)
 800359a:	4a33      	ldr	r2, [pc, #204]	@ (8003668 <HAL_SPI_MspInit+0x14c>)
 800359c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800359e:	4b31      	ldr	r3, [pc, #196]	@ (8003664 <HAL_SPI_MspInit+0x148>)
 80035a0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80035a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003664 <HAL_SPI_MspInit+0x148>)
 80035a8:	2240      	movs	r2, #64	@ 0x40
 80035aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003664 <HAL_SPI_MspInit+0x148>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003664 <HAL_SPI_MspInit+0x148>)
 80035b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003664 <HAL_SPI_MspInit+0x148>)
 80035bc:	2200      	movs	r2, #0
 80035be:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035c0:	4b28      	ldr	r3, [pc, #160]	@ (8003664 <HAL_SPI_MspInit+0x148>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80035c6:	4b27      	ldr	r3, [pc, #156]	@ (8003664 <HAL_SPI_MspInit+0x148>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035cc:	4b25      	ldr	r3, [pc, #148]	@ (8003664 <HAL_SPI_MspInit+0x148>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035d2:	4b24      	ldr	r3, [pc, #144]	@ (8003664 <HAL_SPI_MspInit+0x148>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80035d8:	4822      	ldr	r0, [pc, #136]	@ (8003664 <HAL_SPI_MspInit+0x148>)
 80035da:	f000 fd09 	bl	8003ff0 <HAL_DMA_Init>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80035e4:	f7fe ff70 	bl	80024c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003664 <HAL_SPI_MspInit+0x148>)
 80035ec:	649a      	str	r2, [r3, #72]	@ 0x48
 80035ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003664 <HAL_SPI_MspInit+0x148>)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80035f4:	4b1d      	ldr	r3, [pc, #116]	@ (800366c <HAL_SPI_MspInit+0x150>)
 80035f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003670 <HAL_SPI_MspInit+0x154>)
 80035f8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80035fa:	4b1c      	ldr	r3, [pc, #112]	@ (800366c <HAL_SPI_MspInit+0x150>)
 80035fc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003600:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003602:	4b1a      	ldr	r3, [pc, #104]	@ (800366c <HAL_SPI_MspInit+0x150>)
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003608:	4b18      	ldr	r3, [pc, #96]	@ (800366c <HAL_SPI_MspInit+0x150>)
 800360a:	2200      	movs	r2, #0
 800360c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800360e:	4b17      	ldr	r3, [pc, #92]	@ (800366c <HAL_SPI_MspInit+0x150>)
 8003610:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003614:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003616:	4b15      	ldr	r3, [pc, #84]	@ (800366c <HAL_SPI_MspInit+0x150>)
 8003618:	2200      	movs	r2, #0
 800361a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800361c:	4b13      	ldr	r3, [pc, #76]	@ (800366c <HAL_SPI_MspInit+0x150>)
 800361e:	2200      	movs	r2, #0
 8003620:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003622:	4b12      	ldr	r3, [pc, #72]	@ (800366c <HAL_SPI_MspInit+0x150>)
 8003624:	2200      	movs	r2, #0
 8003626:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003628:	4b10      	ldr	r3, [pc, #64]	@ (800366c <HAL_SPI_MspInit+0x150>)
 800362a:	2200      	movs	r2, #0
 800362c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800362e:	4b0f      	ldr	r3, [pc, #60]	@ (800366c <HAL_SPI_MspInit+0x150>)
 8003630:	2200      	movs	r2, #0
 8003632:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003634:	480d      	ldr	r0, [pc, #52]	@ (800366c <HAL_SPI_MspInit+0x150>)
 8003636:	f000 fcdb 	bl	8003ff0 <HAL_DMA_Init>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8003640:	f7fe ff42 	bl	80024c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a09      	ldr	r2, [pc, #36]	@ (800366c <HAL_SPI_MspInit+0x150>)
 8003648:	64da      	str	r2, [r3, #76]	@ 0x4c
 800364a:	4a08      	ldr	r2, [pc, #32]	@ (800366c <HAL_SPI_MspInit+0x150>)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003650:	bf00      	nop
 8003652:	3728      	adds	r7, #40	@ 0x28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40013000 	.word	0x40013000
 800365c:	40023800 	.word	0x40023800
 8003660:	40020000 	.word	0x40020000
 8003664:	200001d8 	.word	0x200001d8
 8003668:	40026458 	.word	0x40026458
 800366c:	20000238 	.word	0x20000238
 8003670:	40026410 	.word	0x40026410

08003674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003684:	d10d      	bne.n	80036a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	4b09      	ldr	r3, [pc, #36]	@ (80036b0 <HAL_TIM_Base_MspInit+0x3c>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	4a08      	ldr	r2, [pc, #32]	@ (80036b0 <HAL_TIM_Base_MspInit+0x3c>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6413      	str	r3, [r2, #64]	@ 0x40
 8003696:	4b06      	ldr	r3, [pc, #24]	@ (80036b0 <HAL_TIM_Base_MspInit+0x3c>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800

080036b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	@ 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003748 <HAL_UART_MspInit+0x94>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d134      	bne.n	8003740 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	4b1c      	ldr	r3, [pc, #112]	@ (800374c <HAL_UART_MspInit+0x98>)
 80036dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036de:	4a1b      	ldr	r2, [pc, #108]	@ (800374c <HAL_UART_MspInit+0x98>)
 80036e0:	f043 0310 	orr.w	r3, r3, #16
 80036e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80036e6:	4b19      	ldr	r3, [pc, #100]	@ (800374c <HAL_UART_MspInit+0x98>)
 80036e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	4b15      	ldr	r3, [pc, #84]	@ (800374c <HAL_UART_MspInit+0x98>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fa:	4a14      	ldr	r2, [pc, #80]	@ (800374c <HAL_UART_MspInit+0x98>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6313      	str	r3, [r2, #48]	@ 0x30
 8003702:	4b12      	ldr	r3, [pc, #72]	@ (800374c <HAL_UART_MspInit+0x98>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800370e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003714:	2302      	movs	r3, #2
 8003716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371c:	2303      	movs	r3, #3
 800371e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003720:	2307      	movs	r3, #7
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003724:	f107 0314 	add.w	r3, r7, #20
 8003728:	4619      	mov	r1, r3
 800372a:	4809      	ldr	r0, [pc, #36]	@ (8003750 <HAL_UART_MspInit+0x9c>)
 800372c:	f001 f862 	bl	80047f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003730:	2200      	movs	r2, #0
 8003732:	2100      	movs	r1, #0
 8003734:	2025      	movs	r0, #37	@ 0x25
 8003736:	f000 fa48 	bl	8003bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800373a:	2025      	movs	r0, #37	@ 0x25
 800373c:	f000 fa61 	bl	8003c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003740:	bf00      	nop
 8003742:	3728      	adds	r7, #40	@ 0x28
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40011000 	.word	0x40011000
 800374c:	40023800 	.word	0x40023800
 8003750:	40020000 	.word	0x40020000

08003754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003758:	bf00      	nop
 800375a:	e7fd      	b.n	8003758 <NMI_Handler+0x4>

0800375c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003760:	bf00      	nop
 8003762:	e7fd      	b.n	8003760 <HardFault_Handler+0x4>

08003764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003768:	bf00      	nop
 800376a:	e7fd      	b.n	8003768 <MemManage_Handler+0x4>

0800376c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003770:	bf00      	nop
 8003772:	e7fd      	b.n	8003770 <BusFault_Handler+0x4>

08003774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003778:	bf00      	nop
 800377a:	e7fd      	b.n	8003778 <UsageFault_Handler+0x4>

0800377c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800378a:	b480      	push	{r7}
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037aa:	f000 f8ef 	bl	800398c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037ae:	bf00      	nop
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80037b8:	4802      	ldr	r0, [pc, #8]	@ (80037c4 <DMA1_Stream5_IRQHandler+0x10>)
 80037ba:	f000 fdb1 	bl	8004320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	2000009c 	.word	0x2000009c

080037c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037cc:	4802      	ldr	r0, [pc, #8]	@ (80037d8 <USART1_IRQHandler+0x10>)
 80037ce:	f004 fb39 	bl	8007e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200002e0 	.word	0x200002e0

080037dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80037e0:	4802      	ldr	r0, [pc, #8]	@ (80037ec <DMA2_Stream0_IRQHandler+0x10>)
 80037e2:	f000 fd9d 	bl	8004320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000238 	.word	0x20000238

080037f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80037f4:	4802      	ldr	r0, [pc, #8]	@ (8003800 <DMA2_Stream3_IRQHandler+0x10>)
 80037f6:	f000 fd93 	bl	8004320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200001d8 	.word	0x200001d8

08003804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800380c:	4a14      	ldr	r2, [pc, #80]	@ (8003860 <_sbrk+0x5c>)
 800380e:	4b15      	ldr	r3, [pc, #84]	@ (8003864 <_sbrk+0x60>)
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003818:	4b13      	ldr	r3, [pc, #76]	@ (8003868 <_sbrk+0x64>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003820:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <_sbrk+0x64>)
 8003822:	4a12      	ldr	r2, [pc, #72]	@ (800386c <_sbrk+0x68>)
 8003824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003826:	4b10      	ldr	r3, [pc, #64]	@ (8003868 <_sbrk+0x64>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	429a      	cmp	r2, r3
 8003832:	d207      	bcs.n	8003844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003834:	f009 f8be 	bl	800c9b4 <__errno>
 8003838:	4603      	mov	r3, r0
 800383a:	220c      	movs	r2, #12
 800383c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800383e:	f04f 33ff 	mov.w	r3, #4294967295
 8003842:	e009      	b.n	8003858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003844:	4b08      	ldr	r3, [pc, #32]	@ (8003868 <_sbrk+0x64>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800384a:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <_sbrk+0x64>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	4a05      	ldr	r2, [pc, #20]	@ (8003868 <_sbrk+0x64>)
 8003854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003856:	68fb      	ldr	r3, [r7, #12]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20020000 	.word	0x20020000
 8003864:	00000400 	.word	0x00000400
 8003868:	20000590 	.word	0x20000590
 800386c:	20000720 	.word	0x20000720

08003870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003874:	4b06      	ldr	r3, [pc, #24]	@ (8003890 <SystemInit+0x20>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387a:	4a05      	ldr	r2, [pc, #20]	@ (8003890 <SystemInit+0x20>)
 800387c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003880:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003894:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80038cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003898:	f7ff ffea 	bl	8003870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800389c:	480c      	ldr	r0, [pc, #48]	@ (80038d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800389e:	490d      	ldr	r1, [pc, #52]	@ (80038d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038a0:	4a0d      	ldr	r2, [pc, #52]	@ (80038d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038a4:	e002      	b.n	80038ac <LoopCopyDataInit>

080038a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038aa:	3304      	adds	r3, #4

080038ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038b0:	d3f9      	bcc.n	80038a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038b2:	4a0a      	ldr	r2, [pc, #40]	@ (80038dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038b4:	4c0a      	ldr	r4, [pc, #40]	@ (80038e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80038b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038b8:	e001      	b.n	80038be <LoopFillZerobss>

080038ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038bc:	3204      	adds	r2, #4

080038be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038c0:	d3fb      	bcc.n	80038ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038c2:	f009 f87d 	bl	800c9c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038c6:	f7fe f865 	bl	8001994 <main>
  bx  lr    
 80038ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80038cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80038d8:	0800da5c 	.word	0x0800da5c
  ldr r2, =_sbss
 80038dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80038e0:	2000071c 	.word	0x2000071c

080038e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038e4:	e7fe      	b.n	80038e4 <ADC_IRQHandler>
	...

080038e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003928 <HAL_Init+0x40>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003928 <HAL_Init+0x40>)
 80038f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <HAL_Init+0x40>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003928 <HAL_Init+0x40>)
 80038fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003904:	4b08      	ldr	r3, [pc, #32]	@ (8003928 <HAL_Init+0x40>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a07      	ldr	r2, [pc, #28]	@ (8003928 <HAL_Init+0x40>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800390e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003910:	2003      	movs	r0, #3
 8003912:	f000 f94f 	bl	8003bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003916:	200f      	movs	r0, #15
 8003918:	f000 f808 	bl	800392c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800391c:	f7ff fce2 	bl	80032e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40023c00 	.word	0x40023c00

0800392c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003934:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <HAL_InitTick+0x54>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b12      	ldr	r3, [pc, #72]	@ (8003984 <HAL_InitTick+0x58>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	4619      	mov	r1, r3
 800393e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003942:	fbb3 f3f1 	udiv	r3, r3, r1
 8003946:	fbb2 f3f3 	udiv	r3, r2, r3
 800394a:	4618      	mov	r0, r3
 800394c:	f000 f967 	bl	8003c1e <HAL_SYSTICK_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e00e      	b.n	8003978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b0f      	cmp	r3, #15
 800395e:	d80a      	bhi.n	8003976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003960:	2200      	movs	r2, #0
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	f04f 30ff 	mov.w	r0, #4294967295
 8003968:	f000 f92f 	bl	8003bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800396c:	4a06      	ldr	r2, [pc, #24]	@ (8003988 <HAL_InitTick+0x5c>)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e000      	b.n	8003978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	2000000c 	.word	0x2000000c
 8003984:	20000014 	.word	0x20000014
 8003988:	20000010 	.word	0x20000010

0800398c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003990:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <HAL_IncTick+0x20>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_IncTick+0x24>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4413      	add	r3, r2
 800399c:	4a04      	ldr	r2, [pc, #16]	@ (80039b0 <HAL_IncTick+0x24>)
 800399e:	6013      	str	r3, [r2, #0]
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000014 	.word	0x20000014
 80039b0:	20000594 	.word	0x20000594

080039b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return uwTick;
 80039b8:	4b03      	ldr	r3, [pc, #12]	@ (80039c8 <HAL_GetTick+0x14>)
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000594 	.word	0x20000594

080039cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039d4:	f7ff ffee 	bl	80039b4 <HAL_GetTick>
 80039d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d005      	beq.n	80039f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <HAL_Delay+0x44>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039f2:	bf00      	nop
 80039f4:	f7ff ffde 	bl	80039b4 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d8f7      	bhi.n	80039f4 <HAL_Delay+0x28>
  {
  }
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20000014 	.word	0x20000014

08003a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a24:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a46:	4a04      	ldr	r2, [pc, #16]	@ (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	60d3      	str	r3, [r2, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a60:	4b04      	ldr	r3, [pc, #16]	@ (8003a74 <__NVIC_GetPriorityGrouping+0x18>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	f003 0307 	and.w	r3, r3, #7
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	db0b      	blt.n	8003aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	4907      	ldr	r1, [pc, #28]	@ (8003ab0 <__NVIC_EnableIRQ+0x38>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2001      	movs	r0, #1
 8003a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000e100 	.word	0xe000e100

08003ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	6039      	str	r1, [r7, #0]
 8003abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	db0a      	blt.n	8003ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	490c      	ldr	r1, [pc, #48]	@ (8003b00 <__NVIC_SetPriority+0x4c>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	0112      	lsls	r2, r2, #4
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003adc:	e00a      	b.n	8003af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	4908      	ldr	r1, [pc, #32]	@ (8003b04 <__NVIC_SetPriority+0x50>)
 8003ae4:	79fb      	ldrb	r3, [r7, #7]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	3b04      	subs	r3, #4
 8003aec:	0112      	lsls	r2, r2, #4
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	440b      	add	r3, r1
 8003af2:	761a      	strb	r2, [r3, #24]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	e000e100 	.word	0xe000e100
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b089      	sub	sp, #36	@ 0x24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f1c3 0307 	rsb	r3, r3, #7
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	bf28      	it	cs
 8003b26:	2304      	movcs	r3, #4
 8003b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	2b06      	cmp	r3, #6
 8003b30:	d902      	bls.n	8003b38 <NVIC_EncodePriority+0x30>
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	3b03      	subs	r3, #3
 8003b36:	e000      	b.n	8003b3a <NVIC_EncodePriority+0x32>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43da      	mvns	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b50:	f04f 31ff 	mov.w	r1, #4294967295
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5a:	43d9      	mvns	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b60:	4313      	orrs	r3, r2
         );
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3724      	adds	r7, #36	@ 0x24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b80:	d301      	bcc.n	8003b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b82:	2301      	movs	r3, #1
 8003b84:	e00f      	b.n	8003ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b86:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb0 <SysTick_Config+0x40>)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b8e:	210f      	movs	r1, #15
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	f7ff ff8e 	bl	8003ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b98:	4b05      	ldr	r3, [pc, #20]	@ (8003bb0 <SysTick_Config+0x40>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b9e:	4b04      	ldr	r3, [pc, #16]	@ (8003bb0 <SysTick_Config+0x40>)
 8003ba0:	2207      	movs	r2, #7
 8003ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	e000e010 	.word	0xe000e010

08003bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff ff29 	bl	8003a14 <__NVIC_SetPriorityGrouping>
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b086      	sub	sp, #24
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	607a      	str	r2, [r7, #4]
 8003bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bdc:	f7ff ff3e 	bl	8003a5c <__NVIC_GetPriorityGrouping>
 8003be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	6978      	ldr	r0, [r7, #20]
 8003be8:	f7ff ff8e 	bl	8003b08 <NVIC_EncodePriority>
 8003bec:	4602      	mov	r2, r0
 8003bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff5d 	bl	8003ab4 <__NVIC_SetPriority>
}
 8003bfa:	bf00      	nop
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	4603      	mov	r3, r0
 8003c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff ff31 	bl	8003a78 <__NVIC_EnableIRQ>
}
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b082      	sub	sp, #8
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff ffa2 	bl	8003b70 <SysTick_Config>
 8003c2c:	4603      	mov	r3, r0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e014      	b.n	8003c72 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	791b      	ldrb	r3, [r3, #4]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d105      	bne.n	8003c5e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff fb6b 	bl	8003334 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2202      	movs	r2, #2
 8003c62:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0a2      	b.n	8003dde <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	795b      	ldrb	r3, [r3, #5]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_DAC_Start_DMA+0x28>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e09c      	b.n	8003dde <HAL_DAC_Start_DMA+0x162>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2202      	movs	r2, #2
 8003cae:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d129      	bne.n	8003d0a <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	4a4b      	ldr	r2, [pc, #300]	@ (8003de8 <HAL_DAC_Start_DMA+0x16c>)
 8003cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	4a4a      	ldr	r2, [pc, #296]	@ (8003dec <HAL_DAC_Start_DMA+0x170>)
 8003cc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	4a49      	ldr	r2, [pc, #292]	@ (8003df0 <HAL_DAC_Start_DMA+0x174>)
 8003ccc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003cdc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_DAC_Start_DMA+0x70>
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d005      	beq.n	8003cf6 <HAL_DAC_Start_DMA+0x7a>
 8003cea:	e009      	b.n	8003d00 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	613b      	str	r3, [r7, #16]
        break;
 8003cf4:	e033      	b.n	8003d5e <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	613b      	str	r3, [r7, #16]
        break;
 8003cfe:	e02e      	b.n	8003d5e <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3310      	adds	r3, #16
 8003d06:	613b      	str	r3, [r7, #16]
        break;
 8003d08:	e029      	b.n	8003d5e <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	4a39      	ldr	r2, [pc, #228]	@ (8003df4 <HAL_DAC_Start_DMA+0x178>)
 8003d10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	4a38      	ldr	r2, [pc, #224]	@ (8003df8 <HAL_DAC_Start_DMA+0x17c>)
 8003d18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	4a37      	ldr	r2, [pc, #220]	@ (8003dfc <HAL_DAC_Start_DMA+0x180>)
 8003d20:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003d30:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_DAC_Start_DMA+0xc4>
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d005      	beq.n	8003d4a <HAL_DAC_Start_DMA+0xce>
 8003d3e:	e009      	b.n	8003d54 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3314      	adds	r3, #20
 8003d46:	613b      	str	r3, [r7, #16]
        break;
 8003d48:	e009      	b.n	8003d5e <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3318      	adds	r3, #24
 8003d50:	613b      	str	r3, [r7, #16]
        break;
 8003d52:	e004      	b.n	8003d5e <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	331c      	adds	r3, #28
 8003d5a:	613b      	str	r3, [r7, #16]
        break;
 8003d5c:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d111      	bne.n	8003d88 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6898      	ldr	r0, [r3, #8]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	f000 f9e5 	bl	800414c <HAL_DMA_Start_IT>
 8003d82:	4603      	mov	r3, r0
 8003d84:	75fb      	strb	r3, [r7, #23]
 8003d86:	e010      	b.n	8003daa <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003d96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68d8      	ldr	r0, [r3, #12]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	f000 f9d3 	bl	800414c <HAL_DMA_Start_IT>
 8003da6:	4603      	mov	r3, r0
 8003da8:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10c      	bne.n	8003dd0 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6819      	ldr	r1, [r3, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	e005      	b.n	8003ddc <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f043 0204 	orr.w	r2, r3, #4
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	08003edb 	.word	0x08003edb
 8003dec:	08003efd 	.word	0x08003efd
 8003df0:	08003f19 	.word	0x08003f19
 8003df4:	08003f83 	.word	0x08003f83
 8003df8:	08003fa5 	.word	0x08003fa5
 8003dfc:	08003fc1 	.word	0x08003fc1

08003e00 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	@ 0x24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_DAC_ConfigChannel+0x1c>
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e042      	b.n	8003ece <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	795b      	ldrb	r3, [r3, #5]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_DAC_ConfigChannel+0x2c>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e03c      	b.n	8003ece <HAL_DAC_ConfigChannel+0xa6>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f003 0310 	and.w	r3, r3, #16
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6819      	ldr	r1, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f003 0310 	and.w	r3, r3, #16
 8003eb0:	22c0      	movs	r2, #192	@ 0xc0
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	400a      	ands	r2, r1
 8003ebe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003ecc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3724      	adds	r7, #36	@ 0x24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f7ff ff89 	bl	8003e00 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	711a      	strb	r2, [r3, #4]
}
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f08:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7fd fd32 	bl	8001974 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f043 0204 	orr.w	r2, r3, #4
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f7ff ff6e 	bl	8003e14 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	711a      	strb	r2, [r3, #4]
}
 8003f3e:	bf00      	nop
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff ffd8 	bl	8003f46 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	711a      	strb	r2, [r3, #4]
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff ffd1 	bl	8003f5a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003fb8:	bf00      	nop
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f043 0204 	orr.w	r2, r3, #4
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff ffc7 	bl	8003f6e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	711a      	strb	r2, [r3, #4]
}
 8003fe6:	bf00      	nop
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ffc:	f7ff fcda 	bl	80039b4 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e099      	b.n	8004140 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800402c:	e00f      	b.n	800404e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800402e:	f7ff fcc1 	bl	80039b4 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b05      	cmp	r3, #5
 800403a:	d908      	bls.n	800404e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2203      	movs	r2, #3
 8004046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e078      	b.n	8004140 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e8      	bne.n	800402e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4b38      	ldr	r3, [pc, #224]	@ (8004148 <HAL_DMA_Init+0x158>)
 8004068:	4013      	ands	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800407a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d107      	bne.n	80040b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	4313      	orrs	r3, r2
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f023 0307 	bic.w	r3, r3, #7
 80040ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d117      	bne.n	8004112 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00e      	beq.n	8004112 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fb01 	bl	80046fc <DMA_CheckFifoParam>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2240      	movs	r2, #64	@ 0x40
 8004104:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800410e:	2301      	movs	r3, #1
 8004110:	e016      	b.n	8004140 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fab8 	bl	8004690 <DMA_CalcBaseAndBitshift>
 8004120:	4603      	mov	r3, r0
 8004122:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004128:	223f      	movs	r2, #63	@ 0x3f
 800412a:	409a      	lsls	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	f010803f 	.word	0xf010803f

0800414c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004162:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_DMA_Start_IT+0x26>
 800416e:	2302      	movs	r3, #2
 8004170:	e040      	b.n	80041f4 <HAL_DMA_Start_IT+0xa8>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b01      	cmp	r3, #1
 8004184:	d12f      	bne.n	80041e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2202      	movs	r2, #2
 800418a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fa4a 	bl	8004634 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a4:	223f      	movs	r2, #63	@ 0x3f
 80041a6:	409a      	lsls	r2, r3
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0216 	orr.w	r2, r2, #22
 80041ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d007      	beq.n	80041d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0208 	orr.w	r2, r2, #8
 80041d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0201 	orr.w	r2, r2, #1
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	e005      	b.n	80041f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
 80041f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004208:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800420a:	f7ff fbd3 	bl	80039b4 <HAL_GetTick>
 800420e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d008      	beq.n	800422e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2280      	movs	r2, #128	@ 0x80
 8004220:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e052      	b.n	80042d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0216 	bic.w	r2, r2, #22
 800423c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695a      	ldr	r2, [r3, #20]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800424c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <HAL_DMA_Abort+0x62>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0208 	bic.w	r2, r2, #8
 800426c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0201 	bic.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800427e:	e013      	b.n	80042a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004280:	f7ff fb98 	bl	80039b4 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b05      	cmp	r3, #5
 800428c:	d90c      	bls.n	80042a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2203      	movs	r2, #3
 8004298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e015      	b.n	80042d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e4      	bne.n	8004280 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ba:	223f      	movs	r2, #63	@ 0x3f
 80042bc:	409a      	lsls	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d004      	beq.n	80042fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2280      	movs	r2, #128	@ 0x80
 80042f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e00c      	b.n	8004314 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2205      	movs	r2, #5
 80042fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800432c:	4b8e      	ldr	r3, [pc, #568]	@ (8004568 <HAL_DMA_IRQHandler+0x248>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a8e      	ldr	r2, [pc, #568]	@ (800456c <HAL_DMA_IRQHandler+0x24c>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	0a9b      	lsrs	r3, r3, #10
 8004338:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434a:	2208      	movs	r2, #8
 800434c:	409a      	lsls	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4013      	ands	r3, r2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01a      	beq.n	800438c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d013      	beq.n	800438c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0204 	bic.w	r2, r2, #4
 8004372:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004378:	2208      	movs	r2, #8
 800437a:	409a      	lsls	r2, r3
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004384:	f043 0201 	orr.w	r2, r3, #1
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004390:	2201      	movs	r2, #1
 8004392:	409a      	lsls	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4013      	ands	r3, r2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d012      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ae:	2201      	movs	r2, #1
 80043b0:	409a      	lsls	r2, r3
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ba:	f043 0202 	orr.w	r2, r3, #2
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c6:	2204      	movs	r2, #4
 80043c8:	409a      	lsls	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4013      	ands	r3, r2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d012      	beq.n	80043f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00b      	beq.n	80043f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e4:	2204      	movs	r2, #4
 80043e6:	409a      	lsls	r2, r3
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f0:	f043 0204 	orr.w	r2, r3, #4
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043fc:	2210      	movs	r2, #16
 80043fe:	409a      	lsls	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d043      	beq.n	8004490 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d03c      	beq.n	8004490 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800441a:	2210      	movs	r2, #16
 800441c:	409a      	lsls	r2, r3
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d018      	beq.n	8004462 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d108      	bne.n	8004450 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d024      	beq.n	8004490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	4798      	blx	r3
 800444e:	e01f      	b.n	8004490 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004454:	2b00      	cmp	r3, #0
 8004456:	d01b      	beq.n	8004490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	4798      	blx	r3
 8004460:	e016      	b.n	8004490 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d107      	bne.n	8004480 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0208 	bic.w	r2, r2, #8
 800447e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004494:	2220      	movs	r2, #32
 8004496:	409a      	lsls	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4013      	ands	r3, r2
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 808f 	beq.w	80045c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8087 	beq.w	80045c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b6:	2220      	movs	r2, #32
 80044b8:	409a      	lsls	r2, r3
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b05      	cmp	r3, #5
 80044c8:	d136      	bne.n	8004538 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0216 	bic.w	r2, r2, #22
 80044d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695a      	ldr	r2, [r3, #20]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d103      	bne.n	80044fa <HAL_DMA_IRQHandler+0x1da>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d007      	beq.n	800450a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0208 	bic.w	r2, r2, #8
 8004508:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450e:	223f      	movs	r2, #63	@ 0x3f
 8004510:	409a      	lsls	r2, r3
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800452a:	2b00      	cmp	r3, #0
 800452c:	d07e      	beq.n	800462c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	4798      	blx	r3
        }
        return;
 8004536:	e079      	b.n	800462c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d01d      	beq.n	8004582 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10d      	bne.n	8004570 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004558:	2b00      	cmp	r3, #0
 800455a:	d031      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
 8004564:	e02c      	b.n	80045c0 <HAL_DMA_IRQHandler+0x2a0>
 8004566:	bf00      	nop
 8004568:	2000000c 	.word	0x2000000c
 800456c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004574:	2b00      	cmp	r3, #0
 8004576:	d023      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
 8004580:	e01e      	b.n	80045c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10f      	bne.n	80045b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0210 	bic.w	r2, r2, #16
 800459e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d032      	beq.n	800462e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d022      	beq.n	800461a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2205      	movs	r2, #5
 80045d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0201 	bic.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	3301      	adds	r3, #1
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d307      	bcc.n	8004608 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f2      	bne.n	80045ec <HAL_DMA_IRQHandler+0x2cc>
 8004606:	e000      	b.n	800460a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004608:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	4798      	blx	r3
 800462a:	e000      	b.n	800462e <HAL_DMA_IRQHandler+0x30e>
        return;
 800462c:	bf00      	nop
    }
  }
}
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004650:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	2b40      	cmp	r3, #64	@ 0x40
 8004660:	d108      	bne.n	8004674 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004672:	e007      	b.n	8004684 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	60da      	str	r2, [r3, #12]
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	3b10      	subs	r3, #16
 80046a0:	4a14      	ldr	r2, [pc, #80]	@ (80046f4 <DMA_CalcBaseAndBitshift+0x64>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046aa:	4a13      	ldr	r2, [pc, #76]	@ (80046f8 <DMA_CalcBaseAndBitshift+0x68>)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d909      	bls.n	80046d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046c6:	f023 0303 	bic.w	r3, r3, #3
 80046ca:	1d1a      	adds	r2, r3, #4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80046d0:	e007      	b.n	80046e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	aaaaaaab 	.word	0xaaaaaaab
 80046f8:	0800d9b0 	.word	0x0800d9b0

080046fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d11f      	bne.n	8004756 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d856      	bhi.n	80047ca <DMA_CheckFifoParam+0xce>
 800471c:	a201      	add	r2, pc, #4	@ (adr r2, 8004724 <DMA_CheckFifoParam+0x28>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004735 	.word	0x08004735
 8004728:	08004747 	.word	0x08004747
 800472c:	08004735 	.word	0x08004735
 8004730:	080047cb 	.word	0x080047cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d046      	beq.n	80047ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004744:	e043      	b.n	80047ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800474e:	d140      	bne.n	80047d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004754:	e03d      	b.n	80047d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800475e:	d121      	bne.n	80047a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b03      	cmp	r3, #3
 8004764:	d837      	bhi.n	80047d6 <DMA_CheckFifoParam+0xda>
 8004766:	a201      	add	r2, pc, #4	@ (adr r2, 800476c <DMA_CheckFifoParam+0x70>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	0800477d 	.word	0x0800477d
 8004770:	08004783 	.word	0x08004783
 8004774:	0800477d 	.word	0x0800477d
 8004778:	08004795 	.word	0x08004795
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
      break;
 8004780:	e030      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004786:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d025      	beq.n	80047da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004792:	e022      	b.n	80047da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004798:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800479c:	d11f      	bne.n	80047de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047a2:	e01c      	b.n	80047de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d903      	bls.n	80047b2 <DMA_CheckFifoParam+0xb6>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d003      	beq.n	80047b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047b0:	e018      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
      break;
 80047b6:	e015      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00e      	beq.n	80047e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	73fb      	strb	r3, [r7, #15]
      break;
 80047c8:	e00b      	b.n	80047e2 <DMA_CheckFifoParam+0xe6>
      break;
 80047ca:	bf00      	nop
 80047cc:	e00a      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      break;
 80047ce:	bf00      	nop
 80047d0:	e008      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      break;
 80047d2:	bf00      	nop
 80047d4:	e006      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      break;
 80047d6:	bf00      	nop
 80047d8:	e004      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      break;
 80047da:	bf00      	nop
 80047dc:	e002      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80047de:	bf00      	nop
 80047e0:	e000      	b.n	80047e4 <DMA_CheckFifoParam+0xe8>
      break;
 80047e2:	bf00      	nop
    }
  } 
  
  return status; 
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop

080047f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b089      	sub	sp, #36	@ 0x24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	e16b      	b.n	8004ae8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004810:	2201      	movs	r2, #1
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4013      	ands	r3, r2
 8004822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	429a      	cmp	r2, r3
 800482a:	f040 815a 	bne.w	8004ae2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b01      	cmp	r3, #1
 8004838:	d005      	beq.n	8004846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004842:	2b02      	cmp	r3, #2
 8004844:	d130      	bne.n	80048a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	2203      	movs	r2, #3
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4013      	ands	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800487c:	2201      	movs	r2, #1
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f003 0201 	and.w	r2, r3, #1
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d017      	beq.n	80048e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	2203      	movs	r2, #3
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 0303 	and.w	r3, r3, #3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d123      	bne.n	8004938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	08da      	lsrs	r2, r3, #3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3208      	adds	r2, #8
 80048f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	220f      	movs	r2, #15
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4013      	ands	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	08da      	lsrs	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3208      	adds	r2, #8
 8004932:	69b9      	ldr	r1, [r7, #24]
 8004934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	2203      	movs	r2, #3
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	43db      	mvns	r3, r3
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	4013      	ands	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 0203 	and.w	r2, r3, #3
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4313      	orrs	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 80b4 	beq.w	8004ae2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	4b60      	ldr	r3, [pc, #384]	@ (8004b00 <HAL_GPIO_Init+0x30c>)
 8004980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004982:	4a5f      	ldr	r2, [pc, #380]	@ (8004b00 <HAL_GPIO_Init+0x30c>)
 8004984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004988:	6453      	str	r3, [r2, #68]	@ 0x44
 800498a:	4b5d      	ldr	r3, [pc, #372]	@ (8004b00 <HAL_GPIO_Init+0x30c>)
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004996:	4a5b      	ldr	r2, [pc, #364]	@ (8004b04 <HAL_GPIO_Init+0x310>)
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	089b      	lsrs	r3, r3, #2
 800499c:	3302      	adds	r3, #2
 800499e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	220f      	movs	r2, #15
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a52      	ldr	r2, [pc, #328]	@ (8004b08 <HAL_GPIO_Init+0x314>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d02b      	beq.n	8004a1a <HAL_GPIO_Init+0x226>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a51      	ldr	r2, [pc, #324]	@ (8004b0c <HAL_GPIO_Init+0x318>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d025      	beq.n	8004a16 <HAL_GPIO_Init+0x222>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a50      	ldr	r2, [pc, #320]	@ (8004b10 <HAL_GPIO_Init+0x31c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01f      	beq.n	8004a12 <HAL_GPIO_Init+0x21e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004b14 <HAL_GPIO_Init+0x320>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d019      	beq.n	8004a0e <HAL_GPIO_Init+0x21a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a4e      	ldr	r2, [pc, #312]	@ (8004b18 <HAL_GPIO_Init+0x324>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <HAL_GPIO_Init+0x216>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a4d      	ldr	r2, [pc, #308]	@ (8004b1c <HAL_GPIO_Init+0x328>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00d      	beq.n	8004a06 <HAL_GPIO_Init+0x212>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a4c      	ldr	r2, [pc, #304]	@ (8004b20 <HAL_GPIO_Init+0x32c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d007      	beq.n	8004a02 <HAL_GPIO_Init+0x20e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004b24 <HAL_GPIO_Init+0x330>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d101      	bne.n	80049fe <HAL_GPIO_Init+0x20a>
 80049fa:	2307      	movs	r3, #7
 80049fc:	e00e      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 80049fe:	2308      	movs	r3, #8
 8004a00:	e00c      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 8004a02:	2306      	movs	r3, #6
 8004a04:	e00a      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 8004a06:	2305      	movs	r3, #5
 8004a08:	e008      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	e006      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e004      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e002      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <HAL_GPIO_Init+0x228>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	f002 0203 	and.w	r2, r2, #3
 8004a22:	0092      	lsls	r2, r2, #2
 8004a24:	4093      	lsls	r3, r2
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a2c:	4935      	ldr	r1, [pc, #212]	@ (8004b04 <HAL_GPIO_Init+0x310>)
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	089b      	lsrs	r3, r3, #2
 8004a32:	3302      	adds	r3, #2
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b28 <HAL_GPIO_Init+0x334>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a5e:	4a32      	ldr	r2, [pc, #200]	@ (8004b28 <HAL_GPIO_Init+0x334>)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a64:	4b30      	ldr	r3, [pc, #192]	@ (8004b28 <HAL_GPIO_Init+0x334>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4013      	ands	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a88:	4a27      	ldr	r2, [pc, #156]	@ (8004b28 <HAL_GPIO_Init+0x334>)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a8e:	4b26      	ldr	r3, [pc, #152]	@ (8004b28 <HAL_GPIO_Init+0x334>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	43db      	mvns	r3, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b28 <HAL_GPIO_Init+0x334>)
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b28 <HAL_GPIO_Init+0x334>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004adc:	4a12      	ldr	r2, [pc, #72]	@ (8004b28 <HAL_GPIO_Init+0x334>)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	61fb      	str	r3, [r7, #28]
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	2b0f      	cmp	r3, #15
 8004aec:	f67f ae90 	bls.w	8004810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004af0:	bf00      	nop
 8004af2:	bf00      	nop
 8004af4:	3724      	adds	r7, #36	@ 0x24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40023800 	.word	0x40023800
 8004b04:	40013800 	.word	0x40013800
 8004b08:	40020000 	.word	0x40020000
 8004b0c:	40020400 	.word	0x40020400
 8004b10:	40020800 	.word	0x40020800
 8004b14:	40020c00 	.word	0x40020c00
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	40021400 	.word	0x40021400
 8004b20:	40021800 	.word	0x40021800
 8004b24:	40021c00 	.word	0x40021c00
 8004b28:	40013c00 	.word	0x40013c00

08004b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b3c:	787b      	ldrb	r3, [r7, #1]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b48:	e003      	b.n	8004b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b4a:	887b      	ldrh	r3, [r7, #2]
 8004b4c:	041a      	lsls	r2, r3, #16
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	619a      	str	r2, [r3, #24]
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e267      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d075      	beq.n	8004c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b7e:	4b88      	ldr	r3, [pc, #544]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d00c      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b8a:	4b85      	ldr	r3, [pc, #532]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d112      	bne.n	8004bbc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b96:	4b82      	ldr	r3, [pc, #520]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ba2:	d10b      	bne.n	8004bbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	4b7e      	ldr	r3, [pc, #504]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d05b      	beq.n	8004c68 <HAL_RCC_OscConfig+0x108>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d157      	bne.n	8004c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e242      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bc4:	d106      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x74>
 8004bc6:	4b76      	ldr	r3, [pc, #472]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a75      	ldr	r2, [pc, #468]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	e01d      	b.n	8004c10 <HAL_RCC_OscConfig+0xb0>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x98>
 8004bde:	4b70      	ldr	r3, [pc, #448]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a6f      	ldr	r2, [pc, #444]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	4b6d      	ldr	r3, [pc, #436]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a6c      	ldr	r2, [pc, #432]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e00b      	b.n	8004c10 <HAL_RCC_OscConfig+0xb0>
 8004bf8:	4b69      	ldr	r3, [pc, #420]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a68      	ldr	r2, [pc, #416]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	4b66      	ldr	r3, [pc, #408]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a65      	ldr	r2, [pc, #404]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d013      	beq.n	8004c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fe fecc 	bl	80039b4 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fe fec8 	bl	80039b4 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	@ 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e207      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	4b5b      	ldr	r3, [pc, #364]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0xc0>
 8004c3e:	e014      	b.n	8004c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fe feb8 	bl	80039b4 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fe feb4 	bl	80039b4 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	@ 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e1f3      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c5a:	4b51      	ldr	r3, [pc, #324]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0xe8>
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d063      	beq.n	8004d3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c76:	4b4a      	ldr	r3, [pc, #296]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00b      	beq.n	8004c9a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c82:	4b47      	ldr	r3, [pc, #284]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d11c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c8e:	4b44      	ldr	r3, [pc, #272]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d116      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9a:	4b41      	ldr	r3, [pc, #260]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x152>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e1c7      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4937      	ldr	r1, [pc, #220]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc6:	e03a      	b.n	8004d3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d020      	beq.n	8004d12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd0:	4b34      	ldr	r3, [pc, #208]	@ (8004da4 <HAL_RCC_OscConfig+0x244>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd6:	f7fe fe6d 	bl	80039b4 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cde:	f7fe fe69 	bl	80039b4 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e1a8      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf0:	4b2b      	ldr	r3, [pc, #172]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cfc:	4b28      	ldr	r3, [pc, #160]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4925      	ldr	r1, [pc, #148]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	600b      	str	r3, [r1, #0]
 8004d10:	e015      	b.n	8004d3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d12:	4b24      	ldr	r3, [pc, #144]	@ (8004da4 <HAL_RCC_OscConfig+0x244>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fe fe4c 	bl	80039b4 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d20:	f7fe fe48 	bl	80039b4 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e187      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d32:	4b1b      	ldr	r3, [pc, #108]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d036      	beq.n	8004db8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d016      	beq.n	8004d80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d52:	4b15      	ldr	r3, [pc, #84]	@ (8004da8 <HAL_RCC_OscConfig+0x248>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d58:	f7fe fe2c 	bl	80039b4 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d60:	f7fe fe28 	bl	80039b4 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e167      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d72:	4b0b      	ldr	r3, [pc, #44]	@ (8004da0 <HAL_RCC_OscConfig+0x240>)
 8004d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0f0      	beq.n	8004d60 <HAL_RCC_OscConfig+0x200>
 8004d7e:	e01b      	b.n	8004db8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d80:	4b09      	ldr	r3, [pc, #36]	@ (8004da8 <HAL_RCC_OscConfig+0x248>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d86:	f7fe fe15 	bl	80039b4 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d8c:	e00e      	b.n	8004dac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d8e:	f7fe fe11 	bl	80039b4 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d907      	bls.n	8004dac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e150      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
 8004da0:	40023800 	.word	0x40023800
 8004da4:	42470000 	.word	0x42470000
 8004da8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dac:	4b88      	ldr	r3, [pc, #544]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1ea      	bne.n	8004d8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8097 	beq.w	8004ef4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dca:	4b81      	ldr	r3, [pc, #516]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10f      	bne.n	8004df6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	4b7d      	ldr	r3, [pc, #500]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	4a7c      	ldr	r2, [pc, #496]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004de6:	4b7a      	ldr	r3, [pc, #488]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dee:	60bb      	str	r3, [r7, #8]
 8004df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df2:	2301      	movs	r3, #1
 8004df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df6:	4b77      	ldr	r3, [pc, #476]	@ (8004fd4 <HAL_RCC_OscConfig+0x474>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d118      	bne.n	8004e34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e02:	4b74      	ldr	r3, [pc, #464]	@ (8004fd4 <HAL_RCC_OscConfig+0x474>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a73      	ldr	r2, [pc, #460]	@ (8004fd4 <HAL_RCC_OscConfig+0x474>)
 8004e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e0e:	f7fe fdd1 	bl	80039b4 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e16:	f7fe fdcd 	bl	80039b4 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e10c      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e28:	4b6a      	ldr	r3, [pc, #424]	@ (8004fd4 <HAL_RCC_OscConfig+0x474>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0f0      	beq.n	8004e16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d106      	bne.n	8004e4a <HAL_RCC_OscConfig+0x2ea>
 8004e3c:	4b64      	ldr	r3, [pc, #400]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e40:	4a63      	ldr	r2, [pc, #396]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e42:	f043 0301 	orr.w	r3, r3, #1
 8004e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e48:	e01c      	b.n	8004e84 <HAL_RCC_OscConfig+0x324>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x30c>
 8004e52:	4b5f      	ldr	r3, [pc, #380]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e56:	4a5e      	ldr	r2, [pc, #376]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e58:	f043 0304 	orr.w	r3, r3, #4
 8004e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e5e:	4b5c      	ldr	r3, [pc, #368]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e62:	4a5b      	ldr	r2, [pc, #364]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e64:	f043 0301 	orr.w	r3, r3, #1
 8004e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e6a:	e00b      	b.n	8004e84 <HAL_RCC_OscConfig+0x324>
 8004e6c:	4b58      	ldr	r3, [pc, #352]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e70:	4a57      	ldr	r2, [pc, #348]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e72:	f023 0301 	bic.w	r3, r3, #1
 8004e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e78:	4b55      	ldr	r3, [pc, #340]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7c:	4a54      	ldr	r2, [pc, #336]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004e7e:	f023 0304 	bic.w	r3, r3, #4
 8004e82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d015      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8c:	f7fe fd92 	bl	80039b4 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e92:	e00a      	b.n	8004eaa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e94:	f7fe fd8e 	bl	80039b4 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e0cb      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eaa:	4b49      	ldr	r3, [pc, #292]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0ee      	beq.n	8004e94 <HAL_RCC_OscConfig+0x334>
 8004eb6:	e014      	b.n	8004ee2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb8:	f7fe fd7c 	bl	80039b4 <HAL_GetTick>
 8004ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ebe:	e00a      	b.n	8004ed6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec0:	f7fe fd78 	bl	80039b4 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e0b5      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ee      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d105      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee8:	4b39      	ldr	r3, [pc, #228]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	4a38      	ldr	r2, [pc, #224]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004eee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ef2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80a1 	beq.w	8005040 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004efe:	4b34      	ldr	r3, [pc, #208]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d05c      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d141      	bne.n	8004f96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f12:	4b31      	ldr	r3, [pc, #196]	@ (8004fd8 <HAL_RCC_OscConfig+0x478>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f18:	f7fe fd4c 	bl	80039b4 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f20:	f7fe fd48 	bl	80039b4 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e087      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f32:	4b27      	ldr	r3, [pc, #156]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f0      	bne.n	8004f20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69da      	ldr	r2, [r3, #28]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4c:	019b      	lsls	r3, r3, #6
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f54:	085b      	lsrs	r3, r3, #1
 8004f56:	3b01      	subs	r3, #1
 8004f58:	041b      	lsls	r3, r3, #16
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f60:	061b      	lsls	r3, r3, #24
 8004f62:	491b      	ldr	r1, [pc, #108]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f68:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd8 <HAL_RCC_OscConfig+0x478>)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6e:	f7fe fd21 	bl	80039b4 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f76:	f7fe fd1d 	bl	80039b4 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e05c      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f88:	4b11      	ldr	r3, [pc, #68]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x416>
 8004f94:	e054      	b.n	8005040 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f96:	4b10      	ldr	r3, [pc, #64]	@ (8004fd8 <HAL_RCC_OscConfig+0x478>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9c:	f7fe fd0a 	bl	80039b4 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa4:	f7fe fd06 	bl	80039b4 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e045      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb6:	4b06      	ldr	r3, [pc, #24]	@ (8004fd0 <HAL_RCC_OscConfig+0x470>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x444>
 8004fc2:	e03d      	b.n	8005040 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d107      	bne.n	8004fdc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e038      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	40007000 	.word	0x40007000
 8004fd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800504c <HAL_RCC_OscConfig+0x4ec>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d028      	beq.n	800503c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d121      	bne.n	800503c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005002:	429a      	cmp	r2, r3
 8005004:	d11a      	bne.n	800503c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800500c:	4013      	ands	r3, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005012:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005014:	4293      	cmp	r3, r2
 8005016:	d111      	bne.n	800503c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005022:	085b      	lsrs	r3, r3, #1
 8005024:	3b01      	subs	r3, #1
 8005026:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d107      	bne.n	800503c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005036:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005038:	429a      	cmp	r2, r3
 800503a:	d001      	beq.n	8005040 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e000      	b.n	8005042 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800

08005050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0cc      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005064:	4b68      	ldr	r3, [pc, #416]	@ (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d90c      	bls.n	800508c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005072:	4b65      	ldr	r3, [pc, #404]	@ (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	b2d2      	uxtb	r2, r2
 8005078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800507a:	4b63      	ldr	r3, [pc, #396]	@ (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d001      	beq.n	800508c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0b8      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0302 	and.w	r3, r3, #2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d020      	beq.n	80050da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050a4:	4b59      	ldr	r3, [pc, #356]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4a58      	ldr	r2, [pc, #352]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050bc:	4b53      	ldr	r3, [pc, #332]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	4a52      	ldr	r2, [pc, #328]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c8:	4b50      	ldr	r3, [pc, #320]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	494d      	ldr	r1, [pc, #308]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d044      	beq.n	8005170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d107      	bne.n	80050fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ee:	4b47      	ldr	r3, [pc, #284]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d119      	bne.n	800512e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e07f      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d003      	beq.n	800510e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800510a:	2b03      	cmp	r3, #3
 800510c:	d107      	bne.n	800511e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800510e:	4b3f      	ldr	r3, [pc, #252]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d109      	bne.n	800512e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e06f      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511e:	4b3b      	ldr	r3, [pc, #236]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e067      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800512e:	4b37      	ldr	r3, [pc, #220]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f023 0203 	bic.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4934      	ldr	r1, [pc, #208]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	4313      	orrs	r3, r2
 800513e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005140:	f7fe fc38 	bl	80039b4 <HAL_GetTick>
 8005144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005146:	e00a      	b.n	800515e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005148:	f7fe fc34 	bl	80039b4 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005156:	4293      	cmp	r3, r2
 8005158:	d901      	bls.n	800515e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e04f      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515e:	4b2b      	ldr	r3, [pc, #172]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 020c 	and.w	r2, r3, #12
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	429a      	cmp	r2, r3
 800516e:	d1eb      	bne.n	8005148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005170:	4b25      	ldr	r3, [pc, #148]	@ (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d20c      	bcs.n	8005198 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517e:	4b22      	ldr	r3, [pc, #136]	@ (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005186:	4b20      	ldr	r3, [pc, #128]	@ (8005208 <HAL_RCC_ClockConfig+0x1b8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e032      	b.n	80051fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a4:	4b19      	ldr	r3, [pc, #100]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	4916      	ldr	r1, [pc, #88]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051c2:	4b12      	ldr	r3, [pc, #72]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	490e      	ldr	r1, [pc, #56]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051d6:	f000 f821 	bl	800521c <HAL_RCC_GetSysClockFreq>
 80051da:	4602      	mov	r2, r0
 80051dc:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	490a      	ldr	r1, [pc, #40]	@ (8005210 <HAL_RCC_ClockConfig+0x1c0>)
 80051e8:	5ccb      	ldrb	r3, [r1, r3]
 80051ea:	fa22 f303 	lsr.w	r3, r2, r3
 80051ee:	4a09      	ldr	r2, [pc, #36]	@ (8005214 <HAL_RCC_ClockConfig+0x1c4>)
 80051f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80051f2:	4b09      	ldr	r3, [pc, #36]	@ (8005218 <HAL_RCC_ClockConfig+0x1c8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe fb98 	bl	800392c <HAL_InitTick>

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40023c00 	.word	0x40023c00
 800520c:	40023800 	.word	0x40023800
 8005210:	0800d998 	.word	0x0800d998
 8005214:	2000000c 	.word	0x2000000c
 8005218:	20000010 	.word	0x20000010

0800521c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800521c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005220:	b094      	sub	sp, #80	@ 0x50
 8005222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005234:	4b79      	ldr	r3, [pc, #484]	@ (800541c <HAL_RCC_GetSysClockFreq+0x200>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 030c 	and.w	r3, r3, #12
 800523c:	2b08      	cmp	r3, #8
 800523e:	d00d      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x40>
 8005240:	2b08      	cmp	r3, #8
 8005242:	f200 80e1 	bhi.w	8005408 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0x34>
 800524a:	2b04      	cmp	r3, #4
 800524c:	d003      	beq.n	8005256 <HAL_RCC_GetSysClockFreq+0x3a>
 800524e:	e0db      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005250:	4b73      	ldr	r3, [pc, #460]	@ (8005420 <HAL_RCC_GetSysClockFreq+0x204>)
 8005252:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005254:	e0db      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005256:	4b73      	ldr	r3, [pc, #460]	@ (8005424 <HAL_RCC_GetSysClockFreq+0x208>)
 8005258:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800525a:	e0d8      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800525c:	4b6f      	ldr	r3, [pc, #444]	@ (800541c <HAL_RCC_GetSysClockFreq+0x200>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005264:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005266:	4b6d      	ldr	r3, [pc, #436]	@ (800541c <HAL_RCC_GetSysClockFreq+0x200>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d063      	beq.n	800533a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005272:	4b6a      	ldr	r3, [pc, #424]	@ (800541c <HAL_RCC_GetSysClockFreq+0x200>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	099b      	lsrs	r3, r3, #6
 8005278:	2200      	movs	r2, #0
 800527a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800527c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800527e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005284:	633b      	str	r3, [r7, #48]	@ 0x30
 8005286:	2300      	movs	r3, #0
 8005288:	637b      	str	r3, [r7, #52]	@ 0x34
 800528a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800528e:	4622      	mov	r2, r4
 8005290:	462b      	mov	r3, r5
 8005292:	f04f 0000 	mov.w	r0, #0
 8005296:	f04f 0100 	mov.w	r1, #0
 800529a:	0159      	lsls	r1, r3, #5
 800529c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052a0:	0150      	lsls	r0, r2, #5
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	4621      	mov	r1, r4
 80052a8:	1a51      	subs	r1, r2, r1
 80052aa:	6139      	str	r1, [r7, #16]
 80052ac:	4629      	mov	r1, r5
 80052ae:	eb63 0301 	sbc.w	r3, r3, r1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052c0:	4659      	mov	r1, fp
 80052c2:	018b      	lsls	r3, r1, #6
 80052c4:	4651      	mov	r1, sl
 80052c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052ca:	4651      	mov	r1, sl
 80052cc:	018a      	lsls	r2, r1, #6
 80052ce:	4651      	mov	r1, sl
 80052d0:	ebb2 0801 	subs.w	r8, r2, r1
 80052d4:	4659      	mov	r1, fp
 80052d6:	eb63 0901 	sbc.w	r9, r3, r1
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052ee:	4690      	mov	r8, r2
 80052f0:	4699      	mov	r9, r3
 80052f2:	4623      	mov	r3, r4
 80052f4:	eb18 0303 	adds.w	r3, r8, r3
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	462b      	mov	r3, r5
 80052fc:	eb49 0303 	adc.w	r3, r9, r3
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800530e:	4629      	mov	r1, r5
 8005310:	024b      	lsls	r3, r1, #9
 8005312:	4621      	mov	r1, r4
 8005314:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005318:	4621      	mov	r1, r4
 800531a:	024a      	lsls	r2, r1, #9
 800531c:	4610      	mov	r0, r2
 800531e:	4619      	mov	r1, r3
 8005320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005322:	2200      	movs	r2, #0
 8005324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005328:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800532c:	f7fa ff54 	bl	80001d8 <__aeabi_uldivmod>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4613      	mov	r3, r2
 8005336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005338:	e058      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800533a:	4b38      	ldr	r3, [pc, #224]	@ (800541c <HAL_RCC_GetSysClockFreq+0x200>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	099b      	lsrs	r3, r3, #6
 8005340:	2200      	movs	r2, #0
 8005342:	4618      	mov	r0, r3
 8005344:	4611      	mov	r1, r2
 8005346:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800534a:	623b      	str	r3, [r7, #32]
 800534c:	2300      	movs	r3, #0
 800534e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005350:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005354:	4642      	mov	r2, r8
 8005356:	464b      	mov	r3, r9
 8005358:	f04f 0000 	mov.w	r0, #0
 800535c:	f04f 0100 	mov.w	r1, #0
 8005360:	0159      	lsls	r1, r3, #5
 8005362:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005366:	0150      	lsls	r0, r2, #5
 8005368:	4602      	mov	r2, r0
 800536a:	460b      	mov	r3, r1
 800536c:	4641      	mov	r1, r8
 800536e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005372:	4649      	mov	r1, r9
 8005374:	eb63 0b01 	sbc.w	fp, r3, r1
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005384:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005388:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800538c:	ebb2 040a 	subs.w	r4, r2, sl
 8005390:	eb63 050b 	sbc.w	r5, r3, fp
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	00eb      	lsls	r3, r5, #3
 800539e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053a2:	00e2      	lsls	r2, r4, #3
 80053a4:	4614      	mov	r4, r2
 80053a6:	461d      	mov	r5, r3
 80053a8:	4643      	mov	r3, r8
 80053aa:	18e3      	adds	r3, r4, r3
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	464b      	mov	r3, r9
 80053b0:	eb45 0303 	adc.w	r3, r5, r3
 80053b4:	607b      	str	r3, [r7, #4]
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053c2:	4629      	mov	r1, r5
 80053c4:	028b      	lsls	r3, r1, #10
 80053c6:	4621      	mov	r1, r4
 80053c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053cc:	4621      	mov	r1, r4
 80053ce:	028a      	lsls	r2, r1, #10
 80053d0:	4610      	mov	r0, r2
 80053d2:	4619      	mov	r1, r3
 80053d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053d6:	2200      	movs	r2, #0
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	61fa      	str	r2, [r7, #28]
 80053dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053e0:	f7fa fefa 	bl	80001d8 <__aeabi_uldivmod>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4613      	mov	r3, r2
 80053ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053ec:	4b0b      	ldr	r3, [pc, #44]	@ (800541c <HAL_RCC_GetSysClockFreq+0x200>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	0c1b      	lsrs	r3, r3, #16
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	3301      	adds	r3, #1
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80053fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005406:	e002      	b.n	800540e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005408:	4b05      	ldr	r3, [pc, #20]	@ (8005420 <HAL_RCC_GetSysClockFreq+0x204>)
 800540a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800540c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800540e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005410:	4618      	mov	r0, r3
 8005412:	3750      	adds	r7, #80	@ 0x50
 8005414:	46bd      	mov	sp, r7
 8005416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800541a:	bf00      	nop
 800541c:	40023800 	.word	0x40023800
 8005420:	00f42400 	.word	0x00f42400
 8005424:	007a1200 	.word	0x007a1200

08005428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800542c:	4b03      	ldr	r3, [pc, #12]	@ (800543c <HAL_RCC_GetHCLKFreq+0x14>)
 800542e:	681b      	ldr	r3, [r3, #0]
}
 8005430:	4618      	mov	r0, r3
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	2000000c 	.word	0x2000000c

08005440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005444:	f7ff fff0 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8005448:	4602      	mov	r2, r0
 800544a:	4b05      	ldr	r3, [pc, #20]	@ (8005460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	0a9b      	lsrs	r3, r3, #10
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	4903      	ldr	r1, [pc, #12]	@ (8005464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005456:	5ccb      	ldrb	r3, [r1, r3]
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40023800 	.word	0x40023800
 8005464:	0800d9a8 	.word	0x0800d9a8

08005468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800546c:	f7ff ffdc 	bl	8005428 <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b05      	ldr	r3, [pc, #20]	@ (8005488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	0b5b      	lsrs	r3, r3, #13
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4903      	ldr	r1, [pc, #12]	@ (800548c <HAL_RCC_GetPCLK2Freq+0x24>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40023800 	.word	0x40023800
 800548c:	0800d9a8 	.word	0x0800d9a8

08005490 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e022      	b.n	80054e8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fd ffb7 	bl	8003428 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2203      	movs	r2, #3
 80054be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f814 	bl	80054f0 <HAL_SD_InitCard>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e00a      	b.n	80054e8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80054f0:	b5b0      	push	{r4, r5, r7, lr}
 80054f2:	b08e      	sub	sp, #56	@ 0x38
 80054f4:	af04      	add	r7, sp, #16
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80054fc:	2300      	movs	r3, #0
 80054fe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005500:	2300      	movs	r3, #0
 8005502:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005508:	2300      	movs	r3, #0
 800550a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800550c:	2376      	movs	r3, #118	@ 0x76
 800550e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681d      	ldr	r5, [r3, #0]
 8005514:	466c      	mov	r4, sp
 8005516:	f107 0314 	add.w	r3, r7, #20
 800551a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800551e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005522:	f107 0308 	add.w	r3, r7, #8
 8005526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005528:	4628      	mov	r0, r5
 800552a:	f003 fb59 	bl	8008be0 <SDIO_Init>
 800552e:	4603      	mov	r3, r0
 8005530:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8005534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005538:	2b00      	cmp	r3, #0
 800553a:	d001      	beq.n	8005540 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e04f      	b.n	80055e0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005540:	4b29      	ldr	r3, [pc, #164]	@ (80055e8 <HAL_SD_InitCard+0xf8>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f003 fb91 	bl	8008c72 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005550:	4b25      	ldr	r3, [pc, #148]	@ (80055e8 <HAL_SD_InitCard+0xf8>)
 8005552:	2201      	movs	r2, #1
 8005554:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005556:	2002      	movs	r0, #2
 8005558:	f7fe fa38 	bl	80039cc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fe79 	bl	8006254 <SD_PowerON>
 8005562:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00b      	beq.n	8005582 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e02e      	b.n	80055e0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fd98 	bl	80060b8 <SD_InitCard>
 8005588:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00b      	beq.n	80055a8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	431a      	orrs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e01b      	b.n	80055e0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80055b0:	4618      	mov	r0, r3
 80055b2:	f003 fbf0 	bl	8008d96 <SDMMC_CmdBlockLength>
 80055b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00f      	beq.n	80055de <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a0a      	ldr	r2, [pc, #40]	@ (80055ec <HAL_SD_InitCard+0xfc>)
 80055c4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3728      	adds	r7, #40	@ 0x28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bdb0      	pop	{r4, r5, r7, pc}
 80055e8:	422580a0 	.word	0x422580a0
 80055ec:	004005ff 	.word	0x004005ff

080055f0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b092      	sub	sp, #72	@ 0x48
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80055fe:	f7fe f9d9 	bl	80039b4 <HAL_GetTick>
 8005602:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d107      	bne.n	8005622 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005616:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e1c5      	b.n	80059ae <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b01      	cmp	r3, #1
 800562c:	f040 81b8 	bne.w	80059a0 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005636:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	441a      	add	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005640:	429a      	cmp	r2, r3
 8005642:	d907      	bls.n	8005654 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005648:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e1ac      	b.n	80059ae <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2203      	movs	r2, #3
 8005658:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2200      	movs	r2, #0
 8005662:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005668:	2b01      	cmp	r3, #1
 800566a:	d002      	beq.n	8005672 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800566c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566e:	025b      	lsls	r3, r3, #9
 8005670:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005672:	f04f 33ff 	mov.w	r3, #4294967295
 8005676:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	025b      	lsls	r3, r3, #9
 800567c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800567e:	2390      	movs	r3, #144	@ 0x90
 8005680:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005682:	2302      	movs	r3, #2
 8005684:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005686:	2300      	movs	r3, #0
 8005688:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800568a:	2301      	movs	r3, #1
 800568c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f107 0214 	add.w	r2, r7, #20
 8005696:	4611      	mov	r1, r2
 8005698:	4618      	mov	r0, r3
 800569a:	f003 fb50 	bl	8008d3e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d90a      	bls.n	80056ba <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2202      	movs	r2, #2
 80056a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80056b0:	4618      	mov	r0, r3
 80056b2:	f003 fbb4 	bl	8008e1e <SDMMC_CmdReadMultiBlock>
 80056b6:	6478      	str	r0, [r7, #68]	@ 0x44
 80056b8:	e009      	b.n	80056ce <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2201      	movs	r2, #1
 80056be:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80056c6:	4618      	mov	r0, r3
 80056c8:	f003 fb87 	bl	8008dda <SDMMC_CmdReadSingleBlock>
 80056cc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80056ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d012      	beq.n	80056fa <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a7e      	ldr	r2, [pc, #504]	@ (80058d4 <HAL_SD_ReadBlocks+0x2e4>)
 80056da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056e2:	431a      	orrs	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e159      	b.n	80059ae <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80056fe:	e061      	b.n	80057c4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d03c      	beq.n	8005788 <HAL_SD_ReadBlocks+0x198>
 800570e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d039      	beq.n	8005788 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005714:	2300      	movs	r3, #0
 8005716:	643b      	str	r3, [r7, #64]	@ 0x40
 8005718:	e033      	b.n	8005782 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f003 fa89 	bl	8008c36 <SDIO_ReadFIFO>
 8005724:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005728:	b2da      	uxtb	r2, r3
 800572a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800572e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005730:	3301      	adds	r3, #1
 8005732:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005736:	3b01      	subs	r3, #1
 8005738:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800573a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573c:	0a1b      	lsrs	r3, r3, #8
 800573e:	b2da      	uxtb	r2, r3
 8005740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005742:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005746:	3301      	adds	r3, #1
 8005748:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800574a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574c:	3b01      	subs	r3, #1
 800574e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005752:	0c1b      	lsrs	r3, r3, #16
 8005754:	b2da      	uxtb	r2, r3
 8005756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005758:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800575a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800575c:	3301      	adds	r3, #1
 800575e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005762:	3b01      	subs	r3, #1
 8005764:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005768:	0e1b      	lsrs	r3, r3, #24
 800576a:	b2da      	uxtb	r2, r3
 800576c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005772:	3301      	adds	r3, #1
 8005774:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005778:	3b01      	subs	r3, #1
 800577a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800577c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800577e:	3301      	adds	r3, #1
 8005780:	643b      	str	r3, [r7, #64]	@ 0x40
 8005782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005784:	2b07      	cmp	r3, #7
 8005786:	d9c8      	bls.n	800571a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005788:	f7fe f914 	bl	80039b4 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005794:	429a      	cmp	r2, r3
 8005796:	d902      	bls.n	800579e <HAL_SD_ReadBlocks+0x1ae>
 8005798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800579a:	2b00      	cmp	r3, #0
 800579c:	d112      	bne.n	80057c4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a4c      	ldr	r2, [pc, #304]	@ (80058d4 <HAL_SD_ReadBlocks+0x2e4>)
 80057a4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e0f4      	b.n	80059ae <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057ca:	f240 332a 	movw	r3, #810	@ 0x32a
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d095      	beq.n	8005700 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d022      	beq.n	8005828 <HAL_SD_ReadBlocks+0x238>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d91f      	bls.n	8005828 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d01b      	beq.n	8005828 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f003 fb79 	bl	8008eec <SDMMC_CmdStopTransfer>
 80057fa:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80057fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d012      	beq.n	8005828 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a33      	ldr	r2, [pc, #204]	@ (80058d4 <HAL_SD_ReadBlocks+0x2e4>)
 8005808:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800580e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005810:	431a      	orrs	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e0c2      	b.n	80059ae <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800582e:	f003 0308 	and.w	r3, r3, #8
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <HAL_SD_ReadBlocks+0x254>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800583c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005840:	2b00      	cmp	r3, #0
 8005842:	d012      	beq.n	800586a <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a22      	ldr	r2, [pc, #136]	@ (80058d4 <HAL_SD_ReadBlocks+0x2e4>)
 800584a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005850:	f043 0208 	orr.w	r2, r3, #8
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e0a1      	b.n	80059ae <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d012      	beq.n	800589e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a15      	ldr	r2, [pc, #84]	@ (80058d4 <HAL_SD_ReadBlocks+0x2e4>)
 800587e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005884:	f043 0202 	orr.w	r2, r3, #2
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e087      	b.n	80059ae <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d064      	beq.n	8005976 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a08      	ldr	r2, [pc, #32]	@ (80058d4 <HAL_SD_ReadBlocks+0x2e4>)
 80058b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b8:	f043 0220 	orr.w	r2, r3, #32
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e06d      	b.n	80059ae <HAL_SD_ReadBlocks+0x3be>
 80058d2:	bf00      	nop
 80058d4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f003 f9aa 	bl	8008c36 <SDIO_ReadFIFO>
 80058e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80058e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80058ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ee:	3301      	adds	r3, #1
 80058f0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80058f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058f4:	3b01      	subs	r3, #1
 80058f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80058f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005900:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005904:	3301      	adds	r3, #1
 8005906:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800590a:	3b01      	subs	r3, #1
 800590c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800590e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005910:	0c1b      	lsrs	r3, r3, #16
 8005912:	b2da      	uxtb	r2, r3
 8005914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005916:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591a:	3301      	adds	r3, #1
 800591c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800591e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005920:	3b01      	subs	r3, #1
 8005922:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005926:	0e1b      	lsrs	r3, r3, #24
 8005928:	b2da      	uxtb	r2, r3
 800592a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800592c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800592e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005930:	3301      	adds	r3, #1
 8005932:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005936:	3b01      	subs	r3, #1
 8005938:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800593a:	f7fe f83b 	bl	80039b4 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005946:	429a      	cmp	r2, r3
 8005948:	d902      	bls.n	8005950 <HAL_SD_ReadBlocks+0x360>
 800594a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800594c:	2b00      	cmp	r3, #0
 800594e:	d112      	bne.n	8005976 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a18      	ldr	r2, [pc, #96]	@ (80059b8 <HAL_SD_ReadBlocks+0x3c8>)
 8005956:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e01b      	b.n	80059ae <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800597c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_SD_ReadBlocks+0x39a>
 8005984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1a6      	bne.n	80058d8 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005992:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800599c:	2300      	movs	r3, #0
 800599e:	e006      	b.n	80059ae <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
  }
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3748      	adds	r7, #72	@ 0x48
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	004005ff 	.word	0x004005ff

080059bc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b092      	sub	sp, #72	@ 0x48
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80059ca:	f7fd fff3 	bl	80039b4 <HAL_GetTick>
 80059ce:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d107      	bne.n	80059ee <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e16d      	b.n	8005cca <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	f040 8160 	bne.w	8005cbc <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005a02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	441a      	add	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d907      	bls.n	8005a20 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a14:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e154      	b.n	8005cca <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2203      	movs	r2, #3
 8005a24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d002      	beq.n	8005a3e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3a:	025b      	lsls	r3, r3, #9
 8005a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a42:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	025b      	lsls	r3, r3, #9
 8005a48:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005a4a:	2390      	movs	r3, #144	@ 0x90
 8005a4c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005a56:	2301      	movs	r3, #1
 8005a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f107 0218 	add.w	r2, r7, #24
 8005a62:	4611      	mov	r1, r2
 8005a64:	4618      	mov	r0, r3
 8005a66:	f003 f96a 	bl	8008d3e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d90a      	bls.n	8005a86 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2220      	movs	r2, #32
 8005a74:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f003 fa12 	bl	8008ea6 <SDMMC_CmdWriteMultiBlock>
 8005a82:	6478      	str	r0, [r7, #68]	@ 0x44
 8005a84:	e009      	b.n	8005a9a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2210      	movs	r2, #16
 8005a8a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a92:	4618      	mov	r0, r3
 8005a94:	f003 f9e5 	bl	8008e62 <SDMMC_CmdWriteSingleBlock>
 8005a98:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d012      	beq.n	8005ac6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a8b      	ldr	r2, [pc, #556]	@ (8005cd4 <HAL_SD_WriteBlocks+0x318>)
 8005aa6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e101      	b.n	8005cca <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005aca:	e065      	b.n	8005b98 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d040      	beq.n	8005b5c <HAL_SD_WriteBlocks+0x1a0>
 8005ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d03d      	beq.n	8005b5c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ae4:	e037      	b.n	8005b56 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aee:	3301      	adds	r3, #1
 8005af0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af4:	3b01      	subs	r3, #1
 8005af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	021a      	lsls	r2, r3, #8
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b06:	3301      	adds	r3, #1
 8005b08:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b0c:	3b01      	subs	r3, #1
 8005b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	041a      	lsls	r2, r3, #16
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b1e:	3301      	adds	r3, #1
 8005b20:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b24:	3b01      	subs	r3, #1
 8005b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	061a      	lsls	r2, r3, #24
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b36:	3301      	adds	r3, #1
 8005b38:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f107 0214 	add.w	r2, r7, #20
 8005b48:	4611      	mov	r1, r2
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f003 f880 	bl	8008c50 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b52:	3301      	adds	r3, #1
 8005b54:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b58:	2b07      	cmp	r3, #7
 8005b5a:	d9c4      	bls.n	8005ae6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005b5c:	f7fd ff2a 	bl	80039b4 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d902      	bls.n	8005b72 <HAL_SD_WriteBlocks+0x1b6>
 8005b6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d112      	bne.n	8005b98 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a57      	ldr	r2, [pc, #348]	@ (8005cd4 <HAL_SD_WriteBlocks+0x318>)
 8005b78:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b80:	431a      	orrs	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e098      	b.n	8005cca <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b9e:	f240 331a 	movw	r3, #794	@ 0x31a
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d091      	beq.n	8005acc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d022      	beq.n	8005bfc <HAL_SD_WriteBlocks+0x240>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d91f      	bls.n	8005bfc <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d01b      	beq.n	8005bfc <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f003 f98f 	bl	8008eec <SDMMC_CmdStopTransfer>
 8005bce:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005bd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d012      	beq.n	8005bfc <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a3e      	ldr	r2, [pc, #248]	@ (8005cd4 <HAL_SD_WriteBlocks+0x318>)
 8005bdc:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005be2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005be4:	431a      	orrs	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e066      	b.n	8005cca <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_SD_WriteBlocks+0x25c>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d012      	beq.n	8005c3e <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2d      	ldr	r2, [pc, #180]	@ (8005cd4 <HAL_SD_WriteBlocks+0x318>)
 8005c1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c24:	f043 0208 	orr.w	r2, r3, #8
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e045      	b.n	8005cca <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d012      	beq.n	8005c72 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a20      	ldr	r2, [pc, #128]	@ (8005cd4 <HAL_SD_WriteBlocks+0x318>)
 8005c52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c58:	f043 0202 	orr.w	r2, r3, #2
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e02b      	b.n	8005cca <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c78:	f003 0310 	and.w	r3, r3, #16
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d012      	beq.n	8005ca6 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a13      	ldr	r2, [pc, #76]	@ (8005cd4 <HAL_SD_WriteBlocks+0x318>)
 8005c86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8c:	f043 0210 	orr.w	r2, r3, #16
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e011      	b.n	8005cca <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005cae:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e006      	b.n	8005cca <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
  }
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3748      	adds	r7, #72	@ 0x48
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	004005ff 	.word	0x004005ff

08005cd8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ce6:	0f9b      	lsrs	r3, r3, #30
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cf2:	0e9b      	lsrs	r3, r3, #26
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d04:	0e1b      	lsrs	r3, r3, #24
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d16:	0c1b      	lsrs	r3, r3, #16
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d22:	0a1b      	lsrs	r3, r3, #8
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d38:	0d1b      	lsrs	r3, r3, #20
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d44:	0c1b      	lsrs	r3, r3, #16
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d56:	0bdb      	lsrs	r3, r3, #15
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d68:	0b9b      	lsrs	r3, r3, #14
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d7a:	0b5b      	lsrs	r3, r3, #13
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d8c:	0b1b      	lsrs	r3, r3, #12
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d163      	bne.n	8005e70 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dac:	009a      	lsls	r2, r3, #2
 8005dae:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005db2:	4013      	ands	r3, r2
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005db8:	0f92      	lsrs	r2, r2, #30
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dc4:	0edb      	lsrs	r3, r3, #27
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dd6:	0e1b      	lsrs	r3, r3, #24
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005de8:	0d5b      	lsrs	r3, r3, #21
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dfa:	0c9b      	lsrs	r3, r3, #18
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	f003 0307 	and.w	r3, r3, #7
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e0c:	0bdb      	lsrs	r3, r3, #15
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	7e1b      	ldrb	r3, [r3, #24]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	3302      	adds	r3, #2
 8005e30:	2201      	movs	r2, #1
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005e3a:	fb03 f202 	mul.w	r2, r3, r2
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	7a1b      	ldrb	r3, [r3, #8]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005e5c:	0a52      	lsrs	r2, r2, #9
 8005e5e:	fb03 f202 	mul.w	r2, r3, r2
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e6c:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e6e:	e031      	b.n	8005ed4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d11d      	bne.n	8005eb4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e86:	0c1b      	lsrs	r3, r3, #16
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	3301      	adds	r3, #1
 8005e94:	029a      	lsls	r2, r3, #10
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ea8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	661a      	str	r2, [r3, #96]	@ 0x60
 8005eb2:	e00f      	b.n	8005ed4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a58      	ldr	r2, [pc, #352]	@ (800601c <HAL_SD_GetCardCSD+0x344>)
 8005eba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e09d      	b.n	8006010 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ed8:	0b9b      	lsrs	r3, r3, #14
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eea:	09db      	lsrs	r3, r3, #7
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0c:	0fdb      	lsrs	r3, r3, #31
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f18:	0f5b      	lsrs	r3, r3, #29
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2a:	0e9b      	lsrs	r3, r3, #26
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3c:	0d9b      	lsrs	r3, r3, #22
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f4e:	0d5b      	lsrs	r3, r3, #21
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f6a:	0c1b      	lsrs	r3, r3, #16
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7e:	0bdb      	lsrs	r3, r3, #15
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f92:	0b9b      	lsrs	r3, r3, #14
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa6:	0b5b      	lsrs	r3, r3, #13
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fba:	0b1b      	lsrs	r3, r3, #12
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fce:	0a9b      	lsrs	r3, r3, #10
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe2:	0a1b      	lsrs	r3, r3, #8
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff6:	085b      	lsrs	r3, r3, #1
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	004005ff 	.word	0x004005ff

08006020 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006084:	f107 030c 	add.w	r3, r7, #12
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f970 	bl	8006370 <SD_SendStatus>
 8006090:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d005      	beq.n	80060a4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	0a5b      	lsrs	r3, r3, #9
 80060a8:	f003 030f 	and.w	r3, r3, #15
 80060ac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80060ae:	693b      	ldr	r3, [r7, #16]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80060b8:	b5b0      	push	{r4, r5, r7, lr}
 80060ba:	b094      	sub	sp, #80	@ 0x50
 80060bc:	af04      	add	r7, sp, #16
 80060be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80060c0:	2301      	movs	r3, #1
 80060c2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f002 fde0 	bl	8008c8e <SDIO_GetPowerState>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d102      	bne.n	80060da <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80060d4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80060d8:	e0b8      	b.n	800624c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d02f      	beq.n	8006142 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f002 ffc7 	bl	800907a <SDMMC_CmdSendCID>
 80060ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80060ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <SD_InitCard+0x40>
    {
      return errorstate;
 80060f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f6:	e0a9      	b.n	800624c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2100      	movs	r1, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	f002 fe0a 	bl	8008d18 <SDIO_GetResponse>
 8006104:	4602      	mov	r2, r0
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2104      	movs	r1, #4
 8006110:	4618      	mov	r0, r3
 8006112:	f002 fe01 	bl	8008d18 <SDIO_GetResponse>
 8006116:	4602      	mov	r2, r0
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2108      	movs	r1, #8
 8006122:	4618      	mov	r0, r3
 8006124:	f002 fdf8 	bl	8008d18 <SDIO_GetResponse>
 8006128:	4602      	mov	r2, r0
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	210c      	movs	r1, #12
 8006134:	4618      	mov	r0, r3
 8006136:	f002 fdef 	bl	8008d18 <SDIO_GetResponse>
 800613a:	4602      	mov	r2, r0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006146:	2b03      	cmp	r3, #3
 8006148:	d00d      	beq.n	8006166 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f107 020e 	add.w	r2, r7, #14
 8006152:	4611      	mov	r1, r2
 8006154:	4618      	mov	r0, r3
 8006156:	f002 ffcd 	bl	80090f4 <SDMMC_CmdSetRelAdd>
 800615a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800615c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <SD_InitCard+0xae>
    {
      return errorstate;
 8006162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006164:	e072      	b.n	800624c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800616a:	2b03      	cmp	r3, #3
 800616c:	d036      	beq.n	80061dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800616e:	89fb      	ldrh	r3, [r7, #14]
 8006170:	461a      	mov	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800617e:	041b      	lsls	r3, r3, #16
 8006180:	4619      	mov	r1, r3
 8006182:	4610      	mov	r0, r2
 8006184:	f002 ff97 	bl	80090b6 <SDMMC_CmdSendCSD>
 8006188:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800618a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006192:	e05b      	b.n	800624c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2100      	movs	r1, #0
 800619a:	4618      	mov	r0, r3
 800619c:	f002 fdbc 	bl	8008d18 <SDIO_GetResponse>
 80061a0:	4602      	mov	r2, r0
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2104      	movs	r1, #4
 80061ac:	4618      	mov	r0, r3
 80061ae:	f002 fdb3 	bl	8008d18 <SDIO_GetResponse>
 80061b2:	4602      	mov	r2, r0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2108      	movs	r1, #8
 80061be:	4618      	mov	r0, r3
 80061c0:	f002 fdaa 	bl	8008d18 <SDIO_GetResponse>
 80061c4:	4602      	mov	r2, r0
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	210c      	movs	r1, #12
 80061d0:	4618      	mov	r0, r3
 80061d2:	f002 fda1 	bl	8008d18 <SDIO_GetResponse>
 80061d6:	4602      	mov	r2, r0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2104      	movs	r1, #4
 80061e2:	4618      	mov	r0, r3
 80061e4:	f002 fd98 	bl	8008d18 <SDIO_GetResponse>
 80061e8:	4603      	mov	r3, r0
 80061ea:	0d1a      	lsrs	r2, r3, #20
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80061f0:	f107 0310 	add.w	r3, r7, #16
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff fd6e 	bl	8005cd8 <HAL_SD_GetCardCSD>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006202:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006206:	e021      	b.n	800624c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6819      	ldr	r1, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006210:	041b      	lsls	r3, r3, #16
 8006212:	2200      	movs	r2, #0
 8006214:	461c      	mov	r4, r3
 8006216:	4615      	mov	r5, r2
 8006218:	4622      	mov	r2, r4
 800621a:	462b      	mov	r3, r5
 800621c:	4608      	mov	r0, r1
 800621e:	f002 fe87 	bl	8008f30 <SDMMC_CmdSelDesel>
 8006222:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <SD_InitCard+0x176>
  {
    return errorstate;
 800622a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622c:	e00e      	b.n	800624c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681d      	ldr	r5, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	466c      	mov	r4, sp
 8006236:	f103 0210 	add.w	r2, r3, #16
 800623a:	ca07      	ldmia	r2, {r0, r1, r2}
 800623c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006240:	3304      	adds	r3, #4
 8006242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006244:	4628      	mov	r0, r5
 8006246:	f002 fccb 	bl	8008be0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3740      	adds	r7, #64	@ 0x40
 8006250:	46bd      	mov	sp, r7
 8006252:	bdb0      	pop	{r4, r5, r7, pc}

08006254 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	2300      	movs	r3, #0
 8006266:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f002 fe82 	bl	8008f76 <SDMMC_CmdGoIdleState>
 8006272:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <SD_PowerON+0x2a>
  {
    return errorstate;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	e072      	b.n	8006364 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f002 fe95 	bl	8008fb2 <SDMMC_CmdOperCond>
 8006288:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00d      	beq.n	80062ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4618      	mov	r0, r3
 800629c:	f002 fe6b 	bl	8008f76 <SDMMC_CmdGoIdleState>
 80062a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d004      	beq.n	80062b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	e05b      	b.n	8006364 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d137      	bne.n	800632a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2100      	movs	r1, #0
 80062c0:	4618      	mov	r0, r3
 80062c2:	f002 fe95 	bl	8008ff0 <SDMMC_CmdAppCommand>
 80062c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d02d      	beq.n	800632a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062ce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80062d2:	e047      	b.n	8006364 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2100      	movs	r1, #0
 80062da:	4618      	mov	r0, r3
 80062dc:	f002 fe88 	bl	8008ff0 <SDMMC_CmdAppCommand>
 80062e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <SD_PowerON+0x98>
    {
      return errorstate;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	e03b      	b.n	8006364 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	491e      	ldr	r1, [pc, #120]	@ (800636c <SD_PowerON+0x118>)
 80062f2:	4618      	mov	r0, r3
 80062f4:	f002 fe9e 	bl	8009034 <SDMMC_CmdAppOperCommand>
 80062f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006300:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006304:	e02e      	b.n	8006364 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2100      	movs	r1, #0
 800630c:	4618      	mov	r0, r3
 800630e:	f002 fd03 	bl	8008d18 <SDIO_GetResponse>
 8006312:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	0fdb      	lsrs	r3, r3, #31
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <SD_PowerON+0xcc>
 800631c:	2301      	movs	r3, #1
 800631e:	e000      	b.n	8006322 <SD_PowerON+0xce>
 8006320:	2300      	movs	r3, #0
 8006322:	613b      	str	r3, [r7, #16]

    count++;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	3301      	adds	r3, #1
 8006328:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006330:	4293      	cmp	r3, r2
 8006332:	d802      	bhi.n	800633a <SD_PowerON+0xe6>
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0cc      	beq.n	80062d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006340:	4293      	cmp	r3, r2
 8006342:	d902      	bls.n	800634a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006344:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006348:	e00c      	b.n	8006364 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	645a      	str	r2, [r3, #68]	@ 0x44
 800635a:	e002      	b.n	8006362 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	c1100000 	.word	0xc1100000

08006370 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006380:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006384:	e018      	b.n	80063b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800638e:	041b      	lsls	r3, r3, #16
 8006390:	4619      	mov	r1, r3
 8006392:	4610      	mov	r0, r2
 8006394:	f002 fecf 	bl	8009136 <SDMMC_CmdSendStatus>
 8006398:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	e009      	b.n	80063b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2100      	movs	r1, #0
 80063aa:	4618      	mov	r0, r3
 80063ac:	f002 fcb4 	bl	8008d18 <SDIO_GetResponse>
 80063b0:	4602      	mov	r2, r0
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e07b      	b.n	80064ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d108      	bne.n	80063ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063e2:	d009      	beq.n	80063f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	61da      	str	r2, [r3, #28]
 80063ea:	e005      	b.n	80063f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d106      	bne.n	8006418 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7fd f882 	bl	800351c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800642e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	431a      	orrs	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006468:	431a      	orrs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800647c:	ea42 0103 	orr.w	r1, r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006484:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	0c1b      	lsrs	r3, r3, #16
 8006496:	f003 0104 	and.w	r1, r3, #4
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649e:	f003 0210 	and.w	r2, r3, #16
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69da      	ldr	r2, [r3, #28]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b088      	sub	sp, #32
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	603b      	str	r3, [r7, #0]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064e2:	f7fd fa67 	bl	80039b4 <HAL_GetTick>
 80064e6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80064e8:	88fb      	ldrh	r3, [r7, #6]
 80064ea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d001      	beq.n	80064fc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
 80064fa:	e12a      	b.n	8006752 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_SPI_Transmit+0x36>
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e122      	b.n	8006752 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <HAL_SPI_Transmit+0x48>
 8006516:	2302      	movs	r3, #2
 8006518:	e11b      	b.n	8006752 <HAL_SPI_Transmit+0x280>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2203      	movs	r2, #3
 8006526:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	88fa      	ldrh	r2, [r7, #6]
 800653a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	88fa      	ldrh	r2, [r7, #6]
 8006540:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006568:	d10f      	bne.n	800658a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006578:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006588:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006594:	2b40      	cmp	r3, #64	@ 0x40
 8006596:	d007      	beq.n	80065a8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065b0:	d152      	bne.n	8006658 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <HAL_SPI_Transmit+0xee>
 80065ba:	8b7b      	ldrh	r3, [r7, #26]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d145      	bne.n	800664c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c4:	881a      	ldrh	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d0:	1c9a      	adds	r2, r3, #2
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065e4:	e032      	b.n	800664c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d112      	bne.n	800661a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f8:	881a      	ldrh	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006604:	1c9a      	adds	r2, r3, #2
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006618:	e018      	b.n	800664c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800661a:	f7fd f9cb 	bl	80039b4 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	429a      	cmp	r2, r3
 8006628:	d803      	bhi.n	8006632 <HAL_SPI_Transmit+0x160>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d102      	bne.n	8006638 <HAL_SPI_Transmit+0x166>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006648:	2303      	movs	r3, #3
 800664a:	e082      	b.n	8006752 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006650:	b29b      	uxth	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1c7      	bne.n	80065e6 <HAL_SPI_Transmit+0x114>
 8006656:	e053      	b.n	8006700 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d002      	beq.n	8006666 <HAL_SPI_Transmit+0x194>
 8006660:	8b7b      	ldrh	r3, [r7, #26]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d147      	bne.n	80066f6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	330c      	adds	r3, #12
 8006670:	7812      	ldrb	r2, [r2, #0]
 8006672:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006682:	b29b      	uxth	r3, r3
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800668c:	e033      	b.n	80066f6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b02      	cmp	r3, #2
 800669a:	d113      	bne.n	80066c4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	330c      	adds	r3, #12
 80066a6:	7812      	ldrb	r2, [r2, #0]
 80066a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80066c2:	e018      	b.n	80066f6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066c4:	f7fd f976 	bl	80039b4 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	683a      	ldr	r2, [r7, #0]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d803      	bhi.n	80066dc <HAL_SPI_Transmit+0x20a>
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066da:	d102      	bne.n	80066e2 <HAL_SPI_Transmit+0x210>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d109      	bne.n	80066f6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e02d      	b.n	8006752 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1c6      	bne.n	800668e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	6839      	ldr	r1, [r7, #0]
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 ffb7 	bl	8007678 <SPI_EndRxTxTransaction>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2220      	movs	r2, #32
 8006714:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10a      	bne.n	8006734 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800671e:	2300      	movs	r3, #0
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	617b      	str	r3, [r7, #20]
 8006732:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e000      	b.n	8006752 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006750:	2300      	movs	r3, #0
  }
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b088      	sub	sp, #32
 800675e:	af02      	add	r7, sp, #8
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	603b      	str	r3, [r7, #0]
 8006766:	4613      	mov	r3, r2
 8006768:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b01      	cmp	r3, #1
 8006774:	d001      	beq.n	800677a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006776:	2302      	movs	r3, #2
 8006778:	e104      	b.n	8006984 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006782:	d112      	bne.n	80067aa <HAL_SPI_Receive+0x50>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10e      	bne.n	80067aa <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2204      	movs	r2, #4
 8006790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006794:	88fa      	ldrh	r2, [r7, #6]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	4613      	mov	r3, r2
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f8f3 	bl	800698c <HAL_SPI_TransmitReceive>
 80067a6:	4603      	mov	r3, r0
 80067a8:	e0ec      	b.n	8006984 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067aa:	f7fd f903 	bl	80039b4 <HAL_GetTick>
 80067ae:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <HAL_SPI_Receive+0x62>
 80067b6:	88fb      	ldrh	r3, [r7, #6]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e0e1      	b.n	8006984 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d101      	bne.n	80067ce <HAL_SPI_Receive+0x74>
 80067ca:	2302      	movs	r3, #2
 80067cc:	e0da      	b.n	8006984 <HAL_SPI_Receive+0x22a>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2204      	movs	r2, #4
 80067da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	88fa      	ldrh	r2, [r7, #6]
 80067ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800681c:	d10f      	bne.n	800683e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800682c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800683c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006848:	2b40      	cmp	r3, #64	@ 0x40
 800684a:	d007      	beq.n	800685c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800685a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d170      	bne.n	8006946 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006864:	e035      	b.n	80068d2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b01      	cmp	r3, #1
 8006872:	d115      	bne.n	80068a0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f103 020c 	add.w	r2, r3, #12
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006880:	7812      	ldrb	r2, [r2, #0]
 8006882:	b2d2      	uxtb	r2, r2
 8006884:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800689e:	e018      	b.n	80068d2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068a0:	f7fd f888 	bl	80039b4 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d803      	bhi.n	80068b8 <HAL_SPI_Receive+0x15e>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b6:	d102      	bne.n	80068be <HAL_SPI_Receive+0x164>
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d109      	bne.n	80068d2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e058      	b.n	8006984 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1c4      	bne.n	8006866 <HAL_SPI_Receive+0x10c>
 80068dc:	e038      	b.n	8006950 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d113      	bne.n	8006914 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f6:	b292      	uxth	r2, r2
 80068f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fe:	1c9a      	adds	r2, r3, #2
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b01      	subs	r3, #1
 800690c:	b29a      	uxth	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006912:	e018      	b.n	8006946 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006914:	f7fd f84e 	bl	80039b4 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	429a      	cmp	r2, r3
 8006922:	d803      	bhi.n	800692c <HAL_SPI_Receive+0x1d2>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692a:	d102      	bne.n	8006932 <HAL_SPI_Receive+0x1d8>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d109      	bne.n	8006946 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e01e      	b.n	8006984 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800694a:	b29b      	uxth	r3, r3
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1c6      	bne.n	80068de <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 fe29 	bl	80075ac <SPI_EndRxTransaction>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2220      	movs	r2, #32
 8006964:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006982:	2300      	movs	r3, #0
  }
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b08a      	sub	sp, #40	@ 0x28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800699a:	2301      	movs	r3, #1
 800699c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800699e:	f7fd f809 	bl	80039b4 <HAL_GetTick>
 80069a2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069aa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80069b2:	887b      	ldrh	r3, [r7, #2]
 80069b4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80069b6:	7ffb      	ldrb	r3, [r7, #31]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d00c      	beq.n	80069d6 <HAL_SPI_TransmitReceive+0x4a>
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069c2:	d106      	bne.n	80069d2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d102      	bne.n	80069d2 <HAL_SPI_TransmitReceive+0x46>
 80069cc:	7ffb      	ldrb	r3, [r7, #31]
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d001      	beq.n	80069d6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80069d2:	2302      	movs	r3, #2
 80069d4:	e17f      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_SPI_TransmitReceive+0x5c>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <HAL_SPI_TransmitReceive+0x5c>
 80069e2:	887b      	ldrh	r3, [r7, #2]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e174      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d101      	bne.n	80069fa <HAL_SPI_TransmitReceive+0x6e>
 80069f6:	2302      	movs	r3, #2
 80069f8:	e16d      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x34a>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d003      	beq.n	8006a16 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2205      	movs	r2, #5
 8006a12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	887a      	ldrh	r2, [r7, #2]
 8006a26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	887a      	ldrh	r2, [r7, #2]
 8006a2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	887a      	ldrh	r2, [r7, #2]
 8006a38:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	887a      	ldrh	r2, [r7, #2]
 8006a3e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a56:	2b40      	cmp	r3, #64	@ 0x40
 8006a58:	d007      	beq.n	8006a6a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a72:	d17e      	bne.n	8006b72 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <HAL_SPI_TransmitReceive+0xf6>
 8006a7c:	8afb      	ldrh	r3, [r7, #22]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d16c      	bne.n	8006b5c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a86:	881a      	ldrh	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a92:	1c9a      	adds	r2, r3, #2
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006aa6:	e059      	b.n	8006b5c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d11b      	bne.n	8006aee <HAL_SPI_TransmitReceive+0x162>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d016      	beq.n	8006aee <HAL_SPI_TransmitReceive+0x162>
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d113      	bne.n	8006aee <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aca:	881a      	ldrh	r2, [r3, #0]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad6:	1c9a      	adds	r2, r3, #2
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d119      	bne.n	8006b30 <HAL_SPI_TransmitReceive+0x1a4>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d014      	beq.n	8006b30 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b10:	b292      	uxth	r2, r2
 8006b12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b18:	1c9a      	adds	r2, r3, #2
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b30:	f7fc ff40 	bl	80039b4 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d80d      	bhi.n	8006b5c <HAL_SPI_TransmitReceive+0x1d0>
 8006b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	d009      	beq.n	8006b5c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e0bc      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1a0      	bne.n	8006aa8 <HAL_SPI_TransmitReceive+0x11c>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d19b      	bne.n	8006aa8 <HAL_SPI_TransmitReceive+0x11c>
 8006b70:	e082      	b.n	8006c78 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <HAL_SPI_TransmitReceive+0x1f4>
 8006b7a:	8afb      	ldrh	r3, [r7, #22]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d171      	bne.n	8006c64 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	330c      	adds	r3, #12
 8006b8a:	7812      	ldrb	r2, [r2, #0]
 8006b8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ba6:	e05d      	b.n	8006c64 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d11c      	bne.n	8006bf0 <HAL_SPI_TransmitReceive+0x264>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d017      	beq.n	8006bf0 <HAL_SPI_TransmitReceive+0x264>
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d114      	bne.n	8006bf0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	330c      	adds	r3, #12
 8006bd0:	7812      	ldrb	r2, [r2, #0]
 8006bd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d119      	bne.n	8006c32 <HAL_SPI_TransmitReceive+0x2a6>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d014      	beq.n	8006c32 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	3b01      	subs	r3, #1
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c32:	f7fc febf 	bl	80039b4 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d803      	bhi.n	8006c4a <HAL_SPI_TransmitReceive+0x2be>
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c48:	d102      	bne.n	8006c50 <HAL_SPI_TransmitReceive+0x2c4>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d109      	bne.n	8006c64 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e038      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d19c      	bne.n	8006ba8 <HAL_SPI_TransmitReceive+0x21c>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d197      	bne.n	8006ba8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c78:	6a3a      	ldr	r2, [r7, #32]
 8006c7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 fcfb 	bl	8007678 <SPI_EndRxTxTransaction>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d008      	beq.n	8006c9a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e01d      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10a      	bne.n	8006cb8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	613b      	str	r3, [r7, #16]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	613b      	str	r3, [r7, #16]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	613b      	str	r3, [r7, #16]
 8006cb6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e000      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
  }
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3728      	adds	r7, #40	@ 0x28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
	...

08006ce0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	4613      	mov	r3, r2
 8006cec:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d001      	beq.n	8006cfe <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	e097      	b.n	8006e2e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <HAL_SPI_Transmit_DMA+0x2a>
 8006d04:	88fb      	ldrh	r3, [r7, #6]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e08f      	b.n	8006e2e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_SPI_Transmit_DMA+0x3c>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e088      	b.n	8006e2e <HAL_SPI_Transmit_DMA+0x14e>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2203      	movs	r2, #3
 8006d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	88fa      	ldrh	r2, [r7, #6]
 8006d3c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	88fa      	ldrh	r2, [r7, #6]
 8006d42:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d6a:	d10f      	bne.n	8006d8c <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d90:	4a29      	ldr	r2, [pc, #164]	@ (8006e38 <HAL_SPI_Transmit_DMA+0x158>)
 8006d92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d98:	4a28      	ldr	r2, [pc, #160]	@ (8006e3c <HAL_SPI_Transmit_DMA+0x15c>)
 8006d9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006da0:	4a27      	ldr	r2, [pc, #156]	@ (8006e40 <HAL_SPI_Transmit_DMA+0x160>)
 8006da2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006da8:	2200      	movs	r2, #0
 8006daa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db4:	4619      	mov	r1, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	330c      	adds	r3, #12
 8006dbc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dc2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006dc4:	f7fd f9c2 	bl	800414c <HAL_DMA_Start_IT>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd2:	f043 0210 	orr.w	r2, r3, #16
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e023      	b.n	8006e2e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df0:	2b40      	cmp	r3, #64	@ 0x40
 8006df2:	d007      	beq.n	8006e04 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e02:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f042 0220 	orr.w	r2, r2, #32
 8006e1a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 0202 	orr.w	r2, r2, #2
 8006e2a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006e2c:	2300      	movs	r3, #0
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	08007409 	.word	0x08007409
 8006e3c:	08007229 	.word	0x08007229
 8006e40:	0800745d 	.word	0x0800745d

08006e44 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d001      	beq.n	8006e62 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e0a9      	b.n	8006fb6 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d110      	bne.n	8006e8c <HAL_SPI_Receive_DMA+0x48>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e72:	d10b      	bne.n	8006e8c <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2204      	movs	r2, #4
 8006e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006e7c:	88fb      	ldrh	r3, [r7, #6]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	68b9      	ldr	r1, [r7, #8]
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 f8a2 	bl	8006fcc <HAL_SPI_TransmitReceive_DMA>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	e094      	b.n	8006fb6 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <HAL_SPI_Receive_DMA+0x54>
 8006e92:	88fb      	ldrh	r3, [r7, #6]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e08c      	b.n	8006fb6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d101      	bne.n	8006eaa <HAL_SPI_Receive_DMA+0x66>
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	e085      	b.n	8006fb6 <HAL_SPI_Receive_DMA+0x172>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2204      	movs	r2, #4
 8006eb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	88fa      	ldrh	r2, [r7, #6]
 8006eca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	88fa      	ldrh	r2, [r7, #6]
 8006ed0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ef2:	d10f      	bne.n	8006f14 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f18:	4a29      	ldr	r2, [pc, #164]	@ (8006fc0 <HAL_SPI_Receive_DMA+0x17c>)
 8006f1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f20:	4a28      	ldr	r2, [pc, #160]	@ (8006fc4 <HAL_SPI_Receive_DMA+0x180>)
 8006f22:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f28:	4a27      	ldr	r2, [pc, #156]	@ (8006fc8 <HAL_SPI_Receive_DMA+0x184>)
 8006f2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f30:	2200      	movs	r2, #0
 8006f32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	330c      	adds	r3, #12
 8006f3e:	4619      	mov	r1, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f44:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f4a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006f4c:	f7fd f8fe 	bl	800414c <HAL_DMA_Start_IT>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00b      	beq.n	8006f6e <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f5a:	f043 0210 	orr.w	r2, r3, #16
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e023      	b.n	8006fb6 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f78:	2b40      	cmp	r3, #64	@ 0x40
 8006f7a:	d007      	beq.n	8006f8c <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f8a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0220 	orr.w	r2, r2, #32
 8006fa2:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	08007425 	.word	0x08007425
 8006fc4:	080072d1 	.word	0x080072d1
 8006fc8:	0800745d 	.word	0x0800745d

08006fcc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fe0:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d00c      	beq.n	8007008 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ff4:	d106      	bne.n	8007004 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d102      	bne.n	8007004 <HAL_SPI_TransmitReceive_DMA+0x38>
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	2b04      	cmp	r3, #4
 8007002:	d001      	beq.n	8007008 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8007004:	2302      	movs	r3, #2
 8007006:	e0cf      	b.n	80071a8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <HAL_SPI_TransmitReceive_DMA+0x4e>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8007014:	887b      	ldrh	r3, [r7, #2]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e0c4      	b.n	80071a8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_SPI_TransmitReceive_DMA+0x60>
 8007028:	2302      	movs	r3, #2
 800702a:	e0bd      	b.n	80071a8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b04      	cmp	r3, #4
 800703e:	d003      	beq.n	8007048 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2205      	movs	r2, #5
 8007044:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	887a      	ldrh	r2, [r7, #2]
 8007058:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	887a      	ldrh	r2, [r7, #2]
 800705e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	887a      	ldrh	r2, [r7, #2]
 800706a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	887a      	ldrh	r2, [r7, #2]
 8007070:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b04      	cmp	r3, #4
 8007088:	d108      	bne.n	800709c <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800708e:	4a48      	ldr	r2, [pc, #288]	@ (80071b0 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8007090:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007096:	4a47      	ldr	r2, [pc, #284]	@ (80071b4 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8007098:	63da      	str	r2, [r3, #60]	@ 0x3c
 800709a:	e007      	b.n	80070ac <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070a0:	4a45      	ldr	r2, [pc, #276]	@ (80071b8 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 80070a2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070a8:	4a44      	ldr	r2, [pc, #272]	@ (80071bc <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80070aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070b0:	4a43      	ldr	r2, [pc, #268]	@ (80071c0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80070b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070b8:	2200      	movs	r2, #0
 80070ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	330c      	adds	r3, #12
 80070c6:	4619      	mov	r1, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070cc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80070d4:	f7fd f83a 	bl	800414c <HAL_DMA_Start_IT>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070e2:	f043 0210 	orr.w	r2, r3, #16
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e058      	b.n	80071a8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0201 	orr.w	r2, r2, #1
 8007104:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800710a:	2200      	movs	r2, #0
 800710c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007112:	2200      	movs	r2, #0
 8007114:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800711a:	2200      	movs	r2, #0
 800711c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007122:	2200      	movs	r2, #0
 8007124:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712e:	4619      	mov	r1, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	330c      	adds	r3, #12
 8007136:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800713c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800713e:	f7fd f805 	bl	800414c <HAL_DMA_Start_IT>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00b      	beq.n	8007160 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800714c:	f043 0210 	orr.w	r2, r3, #16
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e023      	b.n	80071a8 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800716a:	2b40      	cmp	r3, #64	@ 0x40
 800716c:	d007      	beq.n	800717e <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800717c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f042 0220 	orr.w	r2, r2, #32
 8007194:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f042 0202 	orr.w	r2, r2, #2
 80071a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	08007425 	.word	0x08007425
 80071b4:	080072d1 	.word	0x080072d1
 80071b8:	08007441 	.word	0x08007441
 80071bc:	08007379 	.word	0x08007379
 80071c0:	0800745d 	.word	0x0800745d

080071c4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007234:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007236:	f7fc fbbd 	bl	80039b4 <HAL_GetTick>
 800723a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800724a:	d03b      	beq.n	80072c4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0220 	bic.w	r2, r2, #32
 800725a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0202 	bic.w	r2, r2, #2
 800726a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	2164      	movs	r1, #100	@ 0x64
 8007270:	6978      	ldr	r0, [r7, #20]
 8007272:	f000 fa01 	bl	8007678 <SPI_EndRxTxTransaction>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007280:	f043 0220 	orr.w	r2, r3, #32
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10a      	bne.n	80072a6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	60fb      	str	r3, [r7, #12]
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	60fb      	str	r3, [r7, #12]
 80072a4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2200      	movs	r2, #0
 80072aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80072bc:	6978      	ldr	r0, [r7, #20]
 80072be:	f7ff ffa9 	bl	8007214 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80072c2:	e002      	b.n	80072ca <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80072c4:	6978      	ldr	r0, [r7, #20]
 80072c6:	f7fa fb35 	bl	8001934 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072dc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072de:	f7fc fb69 	bl	80039b4 <HAL_GetTick>
 80072e2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072f2:	d03b      	beq.n	800736c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0220 	bic.w	r2, r2, #32
 8007302:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10d      	bne.n	8007328 <SPI_DMAReceiveCplt+0x58>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007314:	d108      	bne.n	8007328 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0203 	bic.w	r2, r2, #3
 8007324:	605a      	str	r2, [r3, #4]
 8007326:	e007      	b.n	8007338 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0201 	bic.w	r2, r2, #1
 8007336:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	2164      	movs	r1, #100	@ 0x64
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 f935 	bl	80075ac <SPI_EndRxTransaction>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2220      	movs	r2, #32
 800734c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f7ff ff55 	bl	8007214 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800736a:	e002      	b.n	8007372 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7fa faf1 	bl	8001954 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007384:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007386:	f7fc fb15 	bl	80039b4 <HAL_GetTick>
 800738a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800739a:	d02f      	beq.n	80073fc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 0220 	bic.w	r2, r2, #32
 80073aa:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	2164      	movs	r1, #100	@ 0x64
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 f961 	bl	8007678 <SPI_EndRxTxTransaction>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c0:	f043 0220 	orr.w	r2, r3, #32
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0203 	bic.w	r2, r2, #3
 80073d6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f7ff ff0d 	bl	8007214 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80073fa:	e002      	b.n	8007402 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f7ff fee1 	bl	80071c4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007414:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f7ff fede 	bl	80071d8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800741c:	bf00      	nop
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007430:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7ff feda 	bl	80071ec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007438:	bf00      	nop
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f7ff fed6 	bl	8007200 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007454:	bf00      	nop
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007468:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 0203 	bic.w	r2, r2, #3
 8007478:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800747e:	f043 0210 	orr.w	r2, r3, #16
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f7ff fec0 	bl	8007214 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	4613      	mov	r3, r2
 80074aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074ac:	f7fc fa82 	bl	80039b4 <HAL_GetTick>
 80074b0:	4602      	mov	r2, r0
 80074b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b4:	1a9b      	subs	r3, r3, r2
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	4413      	add	r3, r2
 80074ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074bc:	f7fc fa7a 	bl	80039b4 <HAL_GetTick>
 80074c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074c2:	4b39      	ldr	r3, [pc, #228]	@ (80075a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	015b      	lsls	r3, r3, #5
 80074c8:	0d1b      	lsrs	r3, r3, #20
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	fb02 f303 	mul.w	r3, r2, r3
 80074d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074d2:	e054      	b.n	800757e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074da:	d050      	beq.n	800757e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074dc:	f7fc fa6a 	bl	80039b4 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d902      	bls.n	80074f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d13d      	bne.n	800756e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800750a:	d111      	bne.n	8007530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007514:	d004      	beq.n	8007520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800751e:	d107      	bne.n	8007530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800752e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007538:	d10f      	bne.n	800755a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e017      	b.n	800759e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	3b01      	subs	r3, #1
 800757c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4013      	ands	r3, r2
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	429a      	cmp	r2, r3
 800758c:	bf0c      	ite	eq
 800758e:	2301      	moveq	r3, #1
 8007590:	2300      	movne	r3, #0
 8007592:	b2db      	uxtb	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	429a      	cmp	r2, r3
 800759a:	d19b      	bne.n	80074d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3720      	adds	r7, #32
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	2000000c 	.word	0x2000000c

080075ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af02      	add	r7, sp, #8
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075c0:	d111      	bne.n	80075e6 <SPI_EndRxTransaction+0x3a>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075ca:	d004      	beq.n	80075d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d4:	d107      	bne.n	80075e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075ee:	d12a      	bne.n	8007646 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075f8:	d012      	beq.n	8007620 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2200      	movs	r2, #0
 8007602:	2180      	movs	r1, #128	@ 0x80
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f7ff ff49 	bl	800749c <SPI_WaitFlagStateUntilTimeout>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d02d      	beq.n	800766c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007614:	f043 0220 	orr.w	r2, r3, #32
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e026      	b.n	800766e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2200      	movs	r2, #0
 8007628:	2101      	movs	r1, #1
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f7ff ff36 	bl	800749c <SPI_WaitFlagStateUntilTimeout>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d01a      	beq.n	800766c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800763a:	f043 0220 	orr.w	r2, r3, #32
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e013      	b.n	800766e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2200      	movs	r2, #0
 800764e:	2101      	movs	r1, #1
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f7ff ff23 	bl	800749c <SPI_WaitFlagStateUntilTimeout>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d007      	beq.n	800766c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007660:	f043 0220 	orr.w	r2, r3, #32
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e000      	b.n	800766e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b088      	sub	sp, #32
 800767c:	af02      	add	r7, sp, #8
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2201      	movs	r2, #1
 800768c:	2102      	movs	r1, #2
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff ff04 	bl	800749c <SPI_WaitFlagStateUntilTimeout>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d007      	beq.n	80076aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800769e:	f043 0220 	orr.w	r2, r3, #32
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e032      	b.n	8007710 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80076aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007718 <SPI_EndRxTxTransaction+0xa0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1b      	ldr	r2, [pc, #108]	@ (800771c <SPI_EndRxTxTransaction+0xa4>)
 80076b0:	fba2 2303 	umull	r2, r3, r2, r3
 80076b4:	0d5b      	lsrs	r3, r3, #21
 80076b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80076ba:	fb02 f303 	mul.w	r3, r2, r3
 80076be:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076c8:	d112      	bne.n	80076f0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2200      	movs	r2, #0
 80076d2:	2180      	movs	r1, #128	@ 0x80
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff fee1 	bl	800749c <SPI_WaitFlagStateUntilTimeout>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d016      	beq.n	800770e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076e4:	f043 0220 	orr.w	r2, r3, #32
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e00f      	b.n	8007710 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007706:	2b80      	cmp	r3, #128	@ 0x80
 8007708:	d0f2      	beq.n	80076f0 <SPI_EndRxTxTransaction+0x78>
 800770a:	e000      	b.n	800770e <SPI_EndRxTxTransaction+0x96>
        break;
 800770c:	bf00      	nop
  }

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	2000000c 	.word	0x2000000c
 800771c:	165e9f81 	.word	0x165e9f81

08007720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e041      	b.n	80077b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d106      	bne.n	800774c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7fb ff94 	bl	8003674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2202      	movs	r2, #2
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3304      	adds	r3, #4
 800775c:	4619      	mov	r1, r3
 800775e:	4610      	mov	r0, r2
 8007760:	f000 f95e 	bl	8007a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d001      	beq.n	80077d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e046      	b.n	8007866 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a23      	ldr	r2, [pc, #140]	@ (8007874 <HAL_TIM_Base_Start+0xb4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d022      	beq.n	8007830 <HAL_TIM_Base_Start+0x70>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077f2:	d01d      	beq.n	8007830 <HAL_TIM_Base_Start+0x70>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007878 <HAL_TIM_Base_Start+0xb8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d018      	beq.n	8007830 <HAL_TIM_Base_Start+0x70>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a1e      	ldr	r2, [pc, #120]	@ (800787c <HAL_TIM_Base_Start+0xbc>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d013      	beq.n	8007830 <HAL_TIM_Base_Start+0x70>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a1c      	ldr	r2, [pc, #112]	@ (8007880 <HAL_TIM_Base_Start+0xc0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00e      	beq.n	8007830 <HAL_TIM_Base_Start+0x70>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a1b      	ldr	r2, [pc, #108]	@ (8007884 <HAL_TIM_Base_Start+0xc4>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d009      	beq.n	8007830 <HAL_TIM_Base_Start+0x70>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a19      	ldr	r2, [pc, #100]	@ (8007888 <HAL_TIM_Base_Start+0xc8>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d004      	beq.n	8007830 <HAL_TIM_Base_Start+0x70>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a18      	ldr	r2, [pc, #96]	@ (800788c <HAL_TIM_Base_Start+0xcc>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d111      	bne.n	8007854 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b06      	cmp	r3, #6
 8007840:	d010      	beq.n	8007864 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0201 	orr.w	r2, r2, #1
 8007850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007852:	e007      	b.n	8007864 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	40010000 	.word	0x40010000
 8007878:	40000400 	.word	0x40000400
 800787c:	40000800 	.word	0x40000800
 8007880:	40000c00 	.word	0x40000c00
 8007884:	40010400 	.word	0x40010400
 8007888:	40014000 	.word	0x40014000
 800788c:	40001800 	.word	0x40001800

08007890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800789a:	2300      	movs	r3, #0
 800789c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_TIM_ConfigClockSource+0x1c>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e0b4      	b.n	8007a16 <HAL_TIM_ConfigClockSource+0x186>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80078ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078e4:	d03e      	beq.n	8007964 <HAL_TIM_ConfigClockSource+0xd4>
 80078e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078ea:	f200 8087 	bhi.w	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 80078ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078f2:	f000 8086 	beq.w	8007a02 <HAL_TIM_ConfigClockSource+0x172>
 80078f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078fa:	d87f      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 80078fc:	2b70      	cmp	r3, #112	@ 0x70
 80078fe:	d01a      	beq.n	8007936 <HAL_TIM_ConfigClockSource+0xa6>
 8007900:	2b70      	cmp	r3, #112	@ 0x70
 8007902:	d87b      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 8007904:	2b60      	cmp	r3, #96	@ 0x60
 8007906:	d050      	beq.n	80079aa <HAL_TIM_ConfigClockSource+0x11a>
 8007908:	2b60      	cmp	r3, #96	@ 0x60
 800790a:	d877      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 800790c:	2b50      	cmp	r3, #80	@ 0x50
 800790e:	d03c      	beq.n	800798a <HAL_TIM_ConfigClockSource+0xfa>
 8007910:	2b50      	cmp	r3, #80	@ 0x50
 8007912:	d873      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 8007914:	2b40      	cmp	r3, #64	@ 0x40
 8007916:	d058      	beq.n	80079ca <HAL_TIM_ConfigClockSource+0x13a>
 8007918:	2b40      	cmp	r3, #64	@ 0x40
 800791a:	d86f      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 800791c:	2b30      	cmp	r3, #48	@ 0x30
 800791e:	d064      	beq.n	80079ea <HAL_TIM_ConfigClockSource+0x15a>
 8007920:	2b30      	cmp	r3, #48	@ 0x30
 8007922:	d86b      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 8007924:	2b20      	cmp	r3, #32
 8007926:	d060      	beq.n	80079ea <HAL_TIM_ConfigClockSource+0x15a>
 8007928:	2b20      	cmp	r3, #32
 800792a:	d867      	bhi.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
 800792c:	2b00      	cmp	r3, #0
 800792e:	d05c      	beq.n	80079ea <HAL_TIM_ConfigClockSource+0x15a>
 8007930:	2b10      	cmp	r3, #16
 8007932:	d05a      	beq.n	80079ea <HAL_TIM_ConfigClockSource+0x15a>
 8007934:	e062      	b.n	80079fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007946:	f000 f991 	bl	8007c6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	609a      	str	r2, [r3, #8]
      break;
 8007962:	e04f      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007974:	f000 f97a 	bl	8007c6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689a      	ldr	r2, [r3, #8]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007986:	609a      	str	r2, [r3, #8]
      break;
 8007988:	e03c      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007996:	461a      	mov	r2, r3
 8007998:	f000 f8ee 	bl	8007b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2150      	movs	r1, #80	@ 0x50
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f947 	bl	8007c36 <TIM_ITRx_SetConfig>
      break;
 80079a8:	e02c      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079b6:	461a      	mov	r2, r3
 80079b8:	f000 f90d 	bl	8007bd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2160      	movs	r1, #96	@ 0x60
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 f937 	bl	8007c36 <TIM_ITRx_SetConfig>
      break;
 80079c8:	e01c      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079d6:	461a      	mov	r2, r3
 80079d8:	f000 f8ce 	bl	8007b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2140      	movs	r1, #64	@ 0x40
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 f927 	bl	8007c36 <TIM_ITRx_SetConfig>
      break;
 80079e8:	e00c      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4619      	mov	r1, r3
 80079f4:	4610      	mov	r0, r2
 80079f6:	f000 f91e 	bl	8007c36 <TIM_ITRx_SetConfig>
      break;
 80079fa:	e003      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007a00:	e000      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a46      	ldr	r2, [pc, #280]	@ (8007b4c <TIM_Base_SetConfig+0x12c>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d013      	beq.n	8007a60 <TIM_Base_SetConfig+0x40>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a3e:	d00f      	beq.n	8007a60 <TIM_Base_SetConfig+0x40>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a43      	ldr	r2, [pc, #268]	@ (8007b50 <TIM_Base_SetConfig+0x130>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d00b      	beq.n	8007a60 <TIM_Base_SetConfig+0x40>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a42      	ldr	r2, [pc, #264]	@ (8007b54 <TIM_Base_SetConfig+0x134>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d007      	beq.n	8007a60 <TIM_Base_SetConfig+0x40>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a41      	ldr	r2, [pc, #260]	@ (8007b58 <TIM_Base_SetConfig+0x138>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d003      	beq.n	8007a60 <TIM_Base_SetConfig+0x40>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a40      	ldr	r2, [pc, #256]	@ (8007b5c <TIM_Base_SetConfig+0x13c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d108      	bne.n	8007a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a35      	ldr	r2, [pc, #212]	@ (8007b4c <TIM_Base_SetConfig+0x12c>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d02b      	beq.n	8007ad2 <TIM_Base_SetConfig+0xb2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a80:	d027      	beq.n	8007ad2 <TIM_Base_SetConfig+0xb2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a32      	ldr	r2, [pc, #200]	@ (8007b50 <TIM_Base_SetConfig+0x130>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d023      	beq.n	8007ad2 <TIM_Base_SetConfig+0xb2>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a31      	ldr	r2, [pc, #196]	@ (8007b54 <TIM_Base_SetConfig+0x134>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d01f      	beq.n	8007ad2 <TIM_Base_SetConfig+0xb2>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a30      	ldr	r2, [pc, #192]	@ (8007b58 <TIM_Base_SetConfig+0x138>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d01b      	beq.n	8007ad2 <TIM_Base_SetConfig+0xb2>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a2f      	ldr	r2, [pc, #188]	@ (8007b5c <TIM_Base_SetConfig+0x13c>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d017      	beq.n	8007ad2 <TIM_Base_SetConfig+0xb2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8007b60 <TIM_Base_SetConfig+0x140>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d013      	beq.n	8007ad2 <TIM_Base_SetConfig+0xb2>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a2d      	ldr	r2, [pc, #180]	@ (8007b64 <TIM_Base_SetConfig+0x144>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d00f      	beq.n	8007ad2 <TIM_Base_SetConfig+0xb2>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a2c      	ldr	r2, [pc, #176]	@ (8007b68 <TIM_Base_SetConfig+0x148>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d00b      	beq.n	8007ad2 <TIM_Base_SetConfig+0xb2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a2b      	ldr	r2, [pc, #172]	@ (8007b6c <TIM_Base_SetConfig+0x14c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d007      	beq.n	8007ad2 <TIM_Base_SetConfig+0xb2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8007b70 <TIM_Base_SetConfig+0x150>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d003      	beq.n	8007ad2 <TIM_Base_SetConfig+0xb2>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a29      	ldr	r2, [pc, #164]	@ (8007b74 <TIM_Base_SetConfig+0x154>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d108      	bne.n	8007ae4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	689a      	ldr	r2, [r3, #8]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a10      	ldr	r2, [pc, #64]	@ (8007b4c <TIM_Base_SetConfig+0x12c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d003      	beq.n	8007b18 <TIM_Base_SetConfig+0xf8>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a12      	ldr	r2, [pc, #72]	@ (8007b5c <TIM_Base_SetConfig+0x13c>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d103      	bne.n	8007b20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	691a      	ldr	r2, [r3, #16]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d105      	bne.n	8007b3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f023 0201 	bic.w	r2, r3, #1
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	611a      	str	r2, [r3, #16]
  }
}
 8007b3e:	bf00      	nop
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	40010000 	.word	0x40010000
 8007b50:	40000400 	.word	0x40000400
 8007b54:	40000800 	.word	0x40000800
 8007b58:	40000c00 	.word	0x40000c00
 8007b5c:	40010400 	.word	0x40010400
 8007b60:	40014000 	.word	0x40014000
 8007b64:	40014400 	.word	0x40014400
 8007b68:	40014800 	.word	0x40014800
 8007b6c:	40001800 	.word	0x40001800
 8007b70:	40001c00 	.word	0x40001c00
 8007b74:	40002000 	.word	0x40002000

08007b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	f023 0201 	bic.w	r2, r3, #1
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	011b      	lsls	r3, r3, #4
 8007ba8:	693a      	ldr	r2, [r7, #16]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f023 030a 	bic.w	r3, r3, #10
 8007bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	621a      	str	r2, [r3, #32]
}
 8007bca:	bf00      	nop
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b087      	sub	sp, #28
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	f023 0210 	bic.w	r2, r3, #16
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	031b      	lsls	r3, r3, #12
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007c12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	011b      	lsls	r3, r3, #4
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	621a      	str	r2, [r3, #32]
}
 8007c2a:	bf00      	nop
 8007c2c:	371c      	adds	r7, #28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b085      	sub	sp, #20
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f043 0307 	orr.w	r3, r3, #7
 8007c58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	609a      	str	r2, [r3, #8]
}
 8007c60:	bf00      	nop
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
 8007c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	021a      	lsls	r2, r3, #8
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	609a      	str	r2, [r3, #8]
}
 8007ca0:	bf00      	nop
 8007ca2:	371c      	adds	r7, #28
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d101      	bne.n	8007cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	e05a      	b.n	8007d7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a21      	ldr	r2, [pc, #132]	@ (8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d022      	beq.n	8007d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d10:	d01d      	beq.n	8007d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a1d      	ldr	r2, [pc, #116]	@ (8007d8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d018      	beq.n	8007d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a1b      	ldr	r2, [pc, #108]	@ (8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8007d94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00e      	beq.n	8007d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a18      	ldr	r2, [pc, #96]	@ (8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d009      	beq.n	8007d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a17      	ldr	r2, [pc, #92]	@ (8007d9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d004      	beq.n	8007d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a15      	ldr	r2, [pc, #84]	@ (8007da0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d10c      	bne.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	40010000 	.word	0x40010000
 8007d8c:	40000400 	.word	0x40000400
 8007d90:	40000800 	.word	0x40000800
 8007d94:	40000c00 	.word	0x40000c00
 8007d98:	40010400 	.word	0x40010400
 8007d9c:	40014000 	.word	0x40014000
 8007da0:	40001800 	.word	0x40001800

08007da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e042      	b.n	8007e3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d106      	bne.n	8007dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7fb fc72 	bl	80036b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2224      	movs	r2, #36	@ 0x24
 8007dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fc85 	bl	80086f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695a      	ldr	r2, [r3, #20]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68da      	ldr	r2, [r3, #12]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b0ba      	sub	sp, #232	@ 0xe8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007e82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10f      	bne.n	8007eaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e8e:	f003 0320 	and.w	r3, r3, #32
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d009      	beq.n	8007eaa <HAL_UART_IRQHandler+0x66>
 8007e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e9a:	f003 0320 	and.w	r3, r3, #32
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fb69 	bl	800857a <UART_Receive_IT>
      return;
 8007ea8:	e25b      	b.n	8008362 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 80de 	beq.w	8008070 <HAL_UART_IRQHandler+0x22c>
 8007eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d106      	bne.n	8007ece <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ec4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 80d1 	beq.w	8008070 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00b      	beq.n	8007ef2 <HAL_UART_IRQHandler+0xae>
 8007eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d005      	beq.n	8007ef2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eea:	f043 0201 	orr.w	r2, r3, #1
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00b      	beq.n	8007f16 <HAL_UART_IRQHandler+0xd2>
 8007efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d005      	beq.n	8007f16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f0e:	f043 0202 	orr.w	r2, r3, #2
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00b      	beq.n	8007f3a <HAL_UART_IRQHandler+0xf6>
 8007f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d005      	beq.n	8007f3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f32:	f043 0204 	orr.w	r2, r3, #4
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d011      	beq.n	8007f6a <HAL_UART_IRQHandler+0x126>
 8007f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f4a:	f003 0320 	and.w	r3, r3, #32
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d105      	bne.n	8007f5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d005      	beq.n	8007f6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f62:	f043 0208 	orr.w	r2, r3, #8
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 81f2 	beq.w	8008358 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d008      	beq.n	8007f92 <HAL_UART_IRQHandler+0x14e>
 8007f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 faf4 	bl	800857a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f9c:	2b40      	cmp	r3, #64	@ 0x40
 8007f9e:	bf0c      	ite	eq
 8007fa0:	2301      	moveq	r3, #1
 8007fa2:	2300      	movne	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fae:	f003 0308 	and.w	r3, r3, #8
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d103      	bne.n	8007fbe <HAL_UART_IRQHandler+0x17a>
 8007fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d04f      	beq.n	800805e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f9fc 	bl	80083bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fce:	2b40      	cmp	r3, #64	@ 0x40
 8007fd0:	d141      	bne.n	8008056 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	3314      	adds	r3, #20
 8007fd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3314      	adds	r3, #20
 8007ffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007ffe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008002:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800800a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800800e:	e841 2300 	strex	r3, r2, [r1]
 8008012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1d9      	bne.n	8007fd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d013      	beq.n	800804e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800802a:	4a7e      	ldr	r2, [pc, #504]	@ (8008224 <HAL_UART_IRQHandler+0x3e0>)
 800802c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008032:	4618      	mov	r0, r3
 8008034:	f7fc f952 	bl	80042dc <HAL_DMA_Abort_IT>
 8008038:	4603      	mov	r3, r0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d016      	beq.n	800806c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008048:	4610      	mov	r0, r2
 800804a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804c:	e00e      	b.n	800806c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f99e 	bl	8008390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008054:	e00a      	b.n	800806c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f99a 	bl	8008390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800805c:	e006      	b.n	800806c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f996 	bl	8008390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800806a:	e175      	b.n	8008358 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800806c:	bf00      	nop
    return;
 800806e:	e173      	b.n	8008358 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008074:	2b01      	cmp	r3, #1
 8008076:	f040 814f 	bne.w	8008318 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800807a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800807e:	f003 0310 	and.w	r3, r3, #16
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 8148 	beq.w	8008318 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800808c:	f003 0310 	and.w	r3, r3, #16
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 8141 	beq.w	8008318 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008096:	2300      	movs	r3, #0
 8008098:	60bb      	str	r3, [r7, #8]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	60bb      	str	r3, [r7, #8]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	60bb      	str	r3, [r7, #8]
 80080aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080b6:	2b40      	cmp	r3, #64	@ 0x40
 80080b8:	f040 80b6 	bne.w	8008228 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 8145 	beq.w	800835c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80080da:	429a      	cmp	r2, r3
 80080dc:	f080 813e 	bcs.w	800835c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80080e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080f2:	f000 8088 	beq.w	8008206 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	330c      	adds	r3, #12
 80080fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008100:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800810c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008114:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	330c      	adds	r3, #12
 800811e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008122:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800812a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800812e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008132:	e841 2300 	strex	r3, r2, [r1]
 8008136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800813a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1d9      	bne.n	80080f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3314      	adds	r3, #20
 8008148:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008152:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008154:	f023 0301 	bic.w	r3, r3, #1
 8008158:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3314      	adds	r3, #20
 8008162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008166:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800816a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800816e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008172:	e841 2300 	strex	r3, r2, [r1]
 8008176:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1e1      	bne.n	8008142 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3314      	adds	r3, #20
 8008184:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800818e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008194:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3314      	adds	r3, #20
 800819e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80081a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80081a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80081a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80081b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e3      	bne.n	800817e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	330c      	adds	r3, #12
 80081ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081ce:	e853 3f00 	ldrex	r3, [r3]
 80081d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80081d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081d6:	f023 0310 	bic.w	r3, r3, #16
 80081da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	330c      	adds	r3, #12
 80081e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80081e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80081ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081f0:	e841 2300 	strex	r3, r2, [r1]
 80081f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e3      	bne.n	80081c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008200:	4618      	mov	r0, r3
 8008202:	f7fb fffb 	bl	80041fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2202      	movs	r2, #2
 800820a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008214:	b29b      	uxth	r3, r3
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	b29b      	uxth	r3, r3
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f8c1 	bl	80083a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008222:	e09b      	b.n	800835c <HAL_UART_IRQHandler+0x518>
 8008224:	08008483 	.word	0x08008483
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008230:	b29b      	uxth	r3, r3
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800823c:	b29b      	uxth	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 808e 	beq.w	8008360 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008244:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 8089 	beq.w	8008360 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	330c      	adds	r3, #12
 8008254:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008258:	e853 3f00 	ldrex	r3, [r3]
 800825c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800825e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008260:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008264:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	330c      	adds	r3, #12
 800826e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008272:	647a      	str	r2, [r7, #68]	@ 0x44
 8008274:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008278:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e3      	bne.n	800824e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	3314      	adds	r3, #20
 800828c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	623b      	str	r3, [r7, #32]
   return(result);
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	f023 0301 	bic.w	r3, r3, #1
 800829c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3314      	adds	r3, #20
 80082a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80082aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80082ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e3      	bne.n	8008286 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	330c      	adds	r3, #12
 80082d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	e853 3f00 	ldrex	r3, [r3]
 80082da:	60fb      	str	r3, [r7, #12]
   return(result);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 0310 	bic.w	r3, r3, #16
 80082e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	330c      	adds	r3, #12
 80082ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80082f0:	61fa      	str	r2, [r7, #28]
 80082f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	69b9      	ldr	r1, [r7, #24]
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	617b      	str	r3, [r7, #20]
   return(result);
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e3      	bne.n	80082cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2202      	movs	r2, #2
 8008308:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800830a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f847 	bl	80083a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008316:	e023      	b.n	8008360 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800831c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008320:	2b00      	cmp	r3, #0
 8008322:	d009      	beq.n	8008338 <HAL_UART_IRQHandler+0x4f4>
 8008324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800832c:	2b00      	cmp	r3, #0
 800832e:	d003      	beq.n	8008338 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f8ba 	bl	80084aa <UART_Transmit_IT>
    return;
 8008336:	e014      	b.n	8008362 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800833c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00e      	beq.n	8008362 <HAL_UART_IRQHandler+0x51e>
 8008344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800834c:	2b00      	cmp	r3, #0
 800834e:	d008      	beq.n	8008362 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f8fa 	bl	800854a <UART_EndTransmit_IT>
    return;
 8008356:	e004      	b.n	8008362 <HAL_UART_IRQHandler+0x51e>
    return;
 8008358:	bf00      	nop
 800835a:	e002      	b.n	8008362 <HAL_UART_IRQHandler+0x51e>
      return;
 800835c:	bf00      	nop
 800835e:	e000      	b.n	8008362 <HAL_UART_IRQHandler+0x51e>
      return;
 8008360:	bf00      	nop
  }
}
 8008362:	37e8      	adds	r7, #232	@ 0xe8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083bc:	b480      	push	{r7}
 80083be:	b095      	sub	sp, #84	@ 0x54
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	330c      	adds	r3, #12
 80083ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083ce:	e853 3f00 	ldrex	r3, [r3]
 80083d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	330c      	adds	r3, #12
 80083e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80083e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083ec:	e841 2300 	strex	r3, r2, [r1]
 80083f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d1e5      	bne.n	80083c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3314      	adds	r3, #20
 80083fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	e853 3f00 	ldrex	r3, [r3]
 8008406:	61fb      	str	r3, [r7, #28]
   return(result);
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	f023 0301 	bic.w	r3, r3, #1
 800840e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3314      	adds	r3, #20
 8008416:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008418:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800841a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800841e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008420:	e841 2300 	strex	r3, r2, [r1]
 8008424:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e5      	bne.n	80083f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008430:	2b01      	cmp	r3, #1
 8008432:	d119      	bne.n	8008468 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	330c      	adds	r3, #12
 800843a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	e853 3f00 	ldrex	r3, [r3]
 8008442:	60bb      	str	r3, [r7, #8]
   return(result);
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	f023 0310 	bic.w	r3, r3, #16
 800844a:	647b      	str	r3, [r7, #68]	@ 0x44
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	330c      	adds	r3, #12
 8008452:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008454:	61ba      	str	r2, [r7, #24]
 8008456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	6979      	ldr	r1, [r7, #20]
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	613b      	str	r3, [r7, #16]
   return(result);
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e5      	bne.n	8008434 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2220      	movs	r2, #32
 800846c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008476:	bf00      	nop
 8008478:	3754      	adds	r7, #84	@ 0x54
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800848e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f7ff ff77 	bl	8008390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084a2:	bf00      	nop
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b085      	sub	sp, #20
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b21      	cmp	r3, #33	@ 0x21
 80084bc:	d13e      	bne.n	800853c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084c6:	d114      	bne.n	80084f2 <UART_Transmit_IT+0x48>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d110      	bne.n	80084f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a1b      	ldr	r3, [r3, #32]
 80084d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	1c9a      	adds	r2, r3, #2
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	621a      	str	r2, [r3, #32]
 80084f0:	e008      	b.n	8008504 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	1c59      	adds	r1, r3, #1
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	6211      	str	r1, [r2, #32]
 80084fc:	781a      	ldrb	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008508:	b29b      	uxth	r3, r3
 800850a:	3b01      	subs	r3, #1
 800850c:	b29b      	uxth	r3, r3
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	4619      	mov	r1, r3
 8008512:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10f      	bne.n	8008538 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008526:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68da      	ldr	r2, [r3, #12]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008536:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	e000      	b.n	800853e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800853c:	2302      	movs	r3, #2
  }
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b082      	sub	sp, #8
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008560:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2220      	movs	r2, #32
 8008566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff fefc 	bl	8008368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b08c      	sub	sp, #48	@ 0x30
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b22      	cmp	r3, #34	@ 0x22
 800858c:	f040 80ae 	bne.w	80086ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008598:	d117      	bne.n	80085ca <UART_Receive_IT+0x50>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d113      	bne.n	80085ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c2:	1c9a      	adds	r2, r3, #2
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80085c8:	e026      	b.n	8008618 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80085d0:	2300      	movs	r3, #0
 80085d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085dc:	d007      	beq.n	80085ee <UART_Receive_IT+0x74>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10a      	bne.n	80085fc <UART_Receive_IT+0x82>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d106      	bne.n	80085fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f8:	701a      	strb	r2, [r3, #0]
 80085fa:	e008      	b.n	800860e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	b2db      	uxtb	r3, r3
 8008604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008608:	b2da      	uxtb	r2, r3
 800860a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008612:	1c5a      	adds	r2, r3, #1
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800861c:	b29b      	uxth	r3, r3
 800861e:	3b01      	subs	r3, #1
 8008620:	b29b      	uxth	r3, r3
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	4619      	mov	r1, r3
 8008626:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008628:	2b00      	cmp	r3, #0
 800862a:	d15d      	bne.n	80086e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68da      	ldr	r2, [r3, #12]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0220 	bic.w	r2, r2, #32
 800863a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68da      	ldr	r2, [r3, #12]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800864a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	695a      	ldr	r2, [r3, #20]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f022 0201 	bic.w	r2, r2, #1
 800865a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2220      	movs	r2, #32
 8008660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800866e:	2b01      	cmp	r3, #1
 8008670:	d135      	bne.n	80086de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	330c      	adds	r3, #12
 800867e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	e853 3f00 	ldrex	r3, [r3]
 8008686:	613b      	str	r3, [r7, #16]
   return(result);
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f023 0310 	bic.w	r3, r3, #16
 800868e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	330c      	adds	r3, #12
 8008696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008698:	623a      	str	r2, [r7, #32]
 800869a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	69f9      	ldr	r1, [r7, #28]
 800869e:	6a3a      	ldr	r2, [r7, #32]
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e5      	bne.n	8008678 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0310 	and.w	r3, r3, #16
 80086b6:	2b10      	cmp	r3, #16
 80086b8:	d10a      	bne.n	80086d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	60fb      	str	r3, [r7, #12]
 80086ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7ff fe64 	bl	80083a4 <HAL_UARTEx_RxEventCallback>
 80086dc:	e002      	b.n	80086e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff fe4c 	bl	800837c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	e002      	b.n	80086ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	e000      	b.n	80086ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80086ec:	2302      	movs	r3, #2
  }
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3730      	adds	r7, #48	@ 0x30
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086fc:	b0c0      	sub	sp, #256	@ 0x100
 80086fe:	af00      	add	r7, sp, #0
 8008700:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008714:	68d9      	ldr	r1, [r3, #12]
 8008716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	ea40 0301 	orr.w	r3, r0, r1
 8008720:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	431a      	orrs	r2, r3
 8008730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	431a      	orrs	r2, r3
 8008738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	4313      	orrs	r3, r2
 8008740:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008750:	f021 010c 	bic.w	r1, r1, #12
 8008754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800875e:	430b      	orrs	r3, r1
 8008760:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800876e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008772:	6999      	ldr	r1, [r3, #24]
 8008774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	ea40 0301 	orr.w	r3, r0, r1
 800877e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	4b8f      	ldr	r3, [pc, #572]	@ (80089c4 <UART_SetConfig+0x2cc>)
 8008788:	429a      	cmp	r2, r3
 800878a:	d005      	beq.n	8008798 <UART_SetConfig+0xa0>
 800878c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	4b8d      	ldr	r3, [pc, #564]	@ (80089c8 <UART_SetConfig+0x2d0>)
 8008794:	429a      	cmp	r2, r3
 8008796:	d104      	bne.n	80087a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008798:	f7fc fe66 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 800879c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80087a0:	e003      	b.n	80087aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087a2:	f7fc fe4d 	bl	8005440 <HAL_RCC_GetPCLK1Freq>
 80087a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087b4:	f040 810c 	bne.w	80089d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80087bc:	2200      	movs	r2, #0
 80087be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80087c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80087c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80087ca:	4622      	mov	r2, r4
 80087cc:	462b      	mov	r3, r5
 80087ce:	1891      	adds	r1, r2, r2
 80087d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80087d2:	415b      	adcs	r3, r3
 80087d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80087da:	4621      	mov	r1, r4
 80087dc:	eb12 0801 	adds.w	r8, r2, r1
 80087e0:	4629      	mov	r1, r5
 80087e2:	eb43 0901 	adc.w	r9, r3, r1
 80087e6:	f04f 0200 	mov.w	r2, #0
 80087ea:	f04f 0300 	mov.w	r3, #0
 80087ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087fa:	4690      	mov	r8, r2
 80087fc:	4699      	mov	r9, r3
 80087fe:	4623      	mov	r3, r4
 8008800:	eb18 0303 	adds.w	r3, r8, r3
 8008804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008808:	462b      	mov	r3, r5
 800880a:	eb49 0303 	adc.w	r3, r9, r3
 800880e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800881e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008822:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008826:	460b      	mov	r3, r1
 8008828:	18db      	adds	r3, r3, r3
 800882a:	653b      	str	r3, [r7, #80]	@ 0x50
 800882c:	4613      	mov	r3, r2
 800882e:	eb42 0303 	adc.w	r3, r2, r3
 8008832:	657b      	str	r3, [r7, #84]	@ 0x54
 8008834:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008838:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800883c:	f7f7 fccc 	bl	80001d8 <__aeabi_uldivmod>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	4b61      	ldr	r3, [pc, #388]	@ (80089cc <UART_SetConfig+0x2d4>)
 8008846:	fba3 2302 	umull	r2, r3, r3, r2
 800884a:	095b      	lsrs	r3, r3, #5
 800884c:	011c      	lsls	r4, r3, #4
 800884e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008852:	2200      	movs	r2, #0
 8008854:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008858:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800885c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008860:	4642      	mov	r2, r8
 8008862:	464b      	mov	r3, r9
 8008864:	1891      	adds	r1, r2, r2
 8008866:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008868:	415b      	adcs	r3, r3
 800886a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800886c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008870:	4641      	mov	r1, r8
 8008872:	eb12 0a01 	adds.w	sl, r2, r1
 8008876:	4649      	mov	r1, r9
 8008878:	eb43 0b01 	adc.w	fp, r3, r1
 800887c:	f04f 0200 	mov.w	r2, #0
 8008880:	f04f 0300 	mov.w	r3, #0
 8008884:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008888:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800888c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008890:	4692      	mov	sl, r2
 8008892:	469b      	mov	fp, r3
 8008894:	4643      	mov	r3, r8
 8008896:	eb1a 0303 	adds.w	r3, sl, r3
 800889a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800889e:	464b      	mov	r3, r9
 80088a0:	eb4b 0303 	adc.w	r3, fp, r3
 80088a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80088a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80088b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80088b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80088bc:	460b      	mov	r3, r1
 80088be:	18db      	adds	r3, r3, r3
 80088c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80088c2:	4613      	mov	r3, r2
 80088c4:	eb42 0303 	adc.w	r3, r2, r3
 80088c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80088ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80088ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80088d2:	f7f7 fc81 	bl	80001d8 <__aeabi_uldivmod>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	4611      	mov	r1, r2
 80088dc:	4b3b      	ldr	r3, [pc, #236]	@ (80089cc <UART_SetConfig+0x2d4>)
 80088de:	fba3 2301 	umull	r2, r3, r3, r1
 80088e2:	095b      	lsrs	r3, r3, #5
 80088e4:	2264      	movs	r2, #100	@ 0x64
 80088e6:	fb02 f303 	mul.w	r3, r2, r3
 80088ea:	1acb      	subs	r3, r1, r3
 80088ec:	00db      	lsls	r3, r3, #3
 80088ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80088f2:	4b36      	ldr	r3, [pc, #216]	@ (80089cc <UART_SetConfig+0x2d4>)
 80088f4:	fba3 2302 	umull	r2, r3, r3, r2
 80088f8:	095b      	lsrs	r3, r3, #5
 80088fa:	005b      	lsls	r3, r3, #1
 80088fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008900:	441c      	add	r4, r3
 8008902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008906:	2200      	movs	r2, #0
 8008908:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800890c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008910:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008914:	4642      	mov	r2, r8
 8008916:	464b      	mov	r3, r9
 8008918:	1891      	adds	r1, r2, r2
 800891a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800891c:	415b      	adcs	r3, r3
 800891e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008920:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008924:	4641      	mov	r1, r8
 8008926:	1851      	adds	r1, r2, r1
 8008928:	6339      	str	r1, [r7, #48]	@ 0x30
 800892a:	4649      	mov	r1, r9
 800892c:	414b      	adcs	r3, r1
 800892e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008930:	f04f 0200 	mov.w	r2, #0
 8008934:	f04f 0300 	mov.w	r3, #0
 8008938:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800893c:	4659      	mov	r1, fp
 800893e:	00cb      	lsls	r3, r1, #3
 8008940:	4651      	mov	r1, sl
 8008942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008946:	4651      	mov	r1, sl
 8008948:	00ca      	lsls	r2, r1, #3
 800894a:	4610      	mov	r0, r2
 800894c:	4619      	mov	r1, r3
 800894e:	4603      	mov	r3, r0
 8008950:	4642      	mov	r2, r8
 8008952:	189b      	adds	r3, r3, r2
 8008954:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008958:	464b      	mov	r3, r9
 800895a:	460a      	mov	r2, r1
 800895c:	eb42 0303 	adc.w	r3, r2, r3
 8008960:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008970:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008974:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008978:	460b      	mov	r3, r1
 800897a:	18db      	adds	r3, r3, r3
 800897c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800897e:	4613      	mov	r3, r2
 8008980:	eb42 0303 	adc.w	r3, r2, r3
 8008984:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008986:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800898a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800898e:	f7f7 fc23 	bl	80001d8 <__aeabi_uldivmod>
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	4b0d      	ldr	r3, [pc, #52]	@ (80089cc <UART_SetConfig+0x2d4>)
 8008998:	fba3 1302 	umull	r1, r3, r3, r2
 800899c:	095b      	lsrs	r3, r3, #5
 800899e:	2164      	movs	r1, #100	@ 0x64
 80089a0:	fb01 f303 	mul.w	r3, r1, r3
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	3332      	adds	r3, #50	@ 0x32
 80089aa:	4a08      	ldr	r2, [pc, #32]	@ (80089cc <UART_SetConfig+0x2d4>)
 80089ac:	fba2 2303 	umull	r2, r3, r2, r3
 80089b0:	095b      	lsrs	r3, r3, #5
 80089b2:	f003 0207 	and.w	r2, r3, #7
 80089b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4422      	add	r2, r4
 80089be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80089c0:	e106      	b.n	8008bd0 <UART_SetConfig+0x4d8>
 80089c2:	bf00      	nop
 80089c4:	40011000 	.word	0x40011000
 80089c8:	40011400 	.word	0x40011400
 80089cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089d4:	2200      	movs	r2, #0
 80089d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80089da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80089de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80089e2:	4642      	mov	r2, r8
 80089e4:	464b      	mov	r3, r9
 80089e6:	1891      	adds	r1, r2, r2
 80089e8:	6239      	str	r1, [r7, #32]
 80089ea:	415b      	adcs	r3, r3
 80089ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80089ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089f2:	4641      	mov	r1, r8
 80089f4:	1854      	adds	r4, r2, r1
 80089f6:	4649      	mov	r1, r9
 80089f8:	eb43 0501 	adc.w	r5, r3, r1
 80089fc:	f04f 0200 	mov.w	r2, #0
 8008a00:	f04f 0300 	mov.w	r3, #0
 8008a04:	00eb      	lsls	r3, r5, #3
 8008a06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a0a:	00e2      	lsls	r2, r4, #3
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	461d      	mov	r5, r3
 8008a10:	4643      	mov	r3, r8
 8008a12:	18e3      	adds	r3, r4, r3
 8008a14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a18:	464b      	mov	r3, r9
 8008a1a:	eb45 0303 	adc.w	r3, r5, r3
 8008a1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a32:	f04f 0200 	mov.w	r2, #0
 8008a36:	f04f 0300 	mov.w	r3, #0
 8008a3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008a3e:	4629      	mov	r1, r5
 8008a40:	008b      	lsls	r3, r1, #2
 8008a42:	4621      	mov	r1, r4
 8008a44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a48:	4621      	mov	r1, r4
 8008a4a:	008a      	lsls	r2, r1, #2
 8008a4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008a50:	f7f7 fbc2 	bl	80001d8 <__aeabi_uldivmod>
 8008a54:	4602      	mov	r2, r0
 8008a56:	460b      	mov	r3, r1
 8008a58:	4b60      	ldr	r3, [pc, #384]	@ (8008bdc <UART_SetConfig+0x4e4>)
 8008a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8008a5e:	095b      	lsrs	r3, r3, #5
 8008a60:	011c      	lsls	r4, r3, #4
 8008a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a66:	2200      	movs	r2, #0
 8008a68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008a70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008a74:	4642      	mov	r2, r8
 8008a76:	464b      	mov	r3, r9
 8008a78:	1891      	adds	r1, r2, r2
 8008a7a:	61b9      	str	r1, [r7, #24]
 8008a7c:	415b      	adcs	r3, r3
 8008a7e:	61fb      	str	r3, [r7, #28]
 8008a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a84:	4641      	mov	r1, r8
 8008a86:	1851      	adds	r1, r2, r1
 8008a88:	6139      	str	r1, [r7, #16]
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	414b      	adcs	r3, r1
 8008a8e:	617b      	str	r3, [r7, #20]
 8008a90:	f04f 0200 	mov.w	r2, #0
 8008a94:	f04f 0300 	mov.w	r3, #0
 8008a98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a9c:	4659      	mov	r1, fp
 8008a9e:	00cb      	lsls	r3, r1, #3
 8008aa0:	4651      	mov	r1, sl
 8008aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008aa6:	4651      	mov	r1, sl
 8008aa8:	00ca      	lsls	r2, r1, #3
 8008aaa:	4610      	mov	r0, r2
 8008aac:	4619      	mov	r1, r3
 8008aae:	4603      	mov	r3, r0
 8008ab0:	4642      	mov	r2, r8
 8008ab2:	189b      	adds	r3, r3, r2
 8008ab4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ab8:	464b      	mov	r3, r9
 8008aba:	460a      	mov	r2, r1
 8008abc:	eb42 0303 	adc.w	r3, r2, r3
 8008ac0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ace:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008ad0:	f04f 0200 	mov.w	r2, #0
 8008ad4:	f04f 0300 	mov.w	r3, #0
 8008ad8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008adc:	4649      	mov	r1, r9
 8008ade:	008b      	lsls	r3, r1, #2
 8008ae0:	4641      	mov	r1, r8
 8008ae2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ae6:	4641      	mov	r1, r8
 8008ae8:	008a      	lsls	r2, r1, #2
 8008aea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008aee:	f7f7 fb73 	bl	80001d8 <__aeabi_uldivmod>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4611      	mov	r1, r2
 8008af8:	4b38      	ldr	r3, [pc, #224]	@ (8008bdc <UART_SetConfig+0x4e4>)
 8008afa:	fba3 2301 	umull	r2, r3, r3, r1
 8008afe:	095b      	lsrs	r3, r3, #5
 8008b00:	2264      	movs	r2, #100	@ 0x64
 8008b02:	fb02 f303 	mul.w	r3, r2, r3
 8008b06:	1acb      	subs	r3, r1, r3
 8008b08:	011b      	lsls	r3, r3, #4
 8008b0a:	3332      	adds	r3, #50	@ 0x32
 8008b0c:	4a33      	ldr	r2, [pc, #204]	@ (8008bdc <UART_SetConfig+0x4e4>)
 8008b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b12:	095b      	lsrs	r3, r3, #5
 8008b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b18:	441c      	add	r4, r3
 8008b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b1e:	2200      	movs	r2, #0
 8008b20:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b22:	677a      	str	r2, [r7, #116]	@ 0x74
 8008b24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008b28:	4642      	mov	r2, r8
 8008b2a:	464b      	mov	r3, r9
 8008b2c:	1891      	adds	r1, r2, r2
 8008b2e:	60b9      	str	r1, [r7, #8]
 8008b30:	415b      	adcs	r3, r3
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b38:	4641      	mov	r1, r8
 8008b3a:	1851      	adds	r1, r2, r1
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	4649      	mov	r1, r9
 8008b40:	414b      	adcs	r3, r1
 8008b42:	607b      	str	r3, [r7, #4]
 8008b44:	f04f 0200 	mov.w	r2, #0
 8008b48:	f04f 0300 	mov.w	r3, #0
 8008b4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b50:	4659      	mov	r1, fp
 8008b52:	00cb      	lsls	r3, r1, #3
 8008b54:	4651      	mov	r1, sl
 8008b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b5a:	4651      	mov	r1, sl
 8008b5c:	00ca      	lsls	r2, r1, #3
 8008b5e:	4610      	mov	r0, r2
 8008b60:	4619      	mov	r1, r3
 8008b62:	4603      	mov	r3, r0
 8008b64:	4642      	mov	r2, r8
 8008b66:	189b      	adds	r3, r3, r2
 8008b68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b6a:	464b      	mov	r3, r9
 8008b6c:	460a      	mov	r2, r1
 8008b6e:	eb42 0303 	adc.w	r3, r2, r3
 8008b72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008b80:	f04f 0200 	mov.w	r2, #0
 8008b84:	f04f 0300 	mov.w	r3, #0
 8008b88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008b8c:	4649      	mov	r1, r9
 8008b8e:	008b      	lsls	r3, r1, #2
 8008b90:	4641      	mov	r1, r8
 8008b92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b96:	4641      	mov	r1, r8
 8008b98:	008a      	lsls	r2, r1, #2
 8008b9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008b9e:	f7f7 fb1b 	bl	80001d8 <__aeabi_uldivmod>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bdc <UART_SetConfig+0x4e4>)
 8008ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8008bac:	095b      	lsrs	r3, r3, #5
 8008bae:	2164      	movs	r1, #100	@ 0x64
 8008bb0:	fb01 f303 	mul.w	r3, r1, r3
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	011b      	lsls	r3, r3, #4
 8008bb8:	3332      	adds	r3, #50	@ 0x32
 8008bba:	4a08      	ldr	r2, [pc, #32]	@ (8008bdc <UART_SetConfig+0x4e4>)
 8008bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc0:	095b      	lsrs	r3, r3, #5
 8008bc2:	f003 020f 	and.w	r2, r3, #15
 8008bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4422      	add	r2, r4
 8008bce:	609a      	str	r2, [r3, #8]
}
 8008bd0:	bf00      	nop
 8008bd2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bdc:	51eb851f 	.word	0x51eb851f

08008be0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008be0:	b084      	sub	sp, #16
 8008be2:	b480      	push	{r7}
 8008be4:	b085      	sub	sp, #20
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	f107 001c 	add.w	r0, r7, #28
 8008bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008bf6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008bfa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008bfe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008c02:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008c06:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008c0a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8008c1a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	431a      	orrs	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	b004      	add	sp, #16
 8008c34:	4770      	bx	lr

08008c36 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b083      	sub	sp, #12
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2203      	movs	r2, #3
 8008c7e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0303 	and.w	r3, r3, #3
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b085      	sub	sp, #20
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
 8008cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cc8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008cce:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008cd4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008ce4:	f023 030f 	bic.w	r3, r3, #15
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	431a      	orrs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr

08008cfe <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008cfe:	b480      	push	{r7}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	b2db      	uxtb	r3, r3
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	3314      	adds	r3, #20
 8008d26:	461a      	mov	r2, r3
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
}  
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b085      	sub	sp, #20
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d64:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008d6a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008d70:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	431a      	orrs	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0

}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b088      	sub	sp, #32
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008da4:	2310      	movs	r3, #16
 8008da6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008da8:	2340      	movs	r3, #64	@ 0x40
 8008daa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dac:	2300      	movs	r3, #0
 8008dae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008db0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008db4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008db6:	f107 0308 	add.w	r3, r7, #8
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff ff74 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dc6:	2110      	movs	r1, #16
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f9d7 	bl	800917c <SDMMC_GetCmdResp1>
 8008dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3720      	adds	r7, #32
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b088      	sub	sp, #32
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008de8:	2311      	movs	r3, #17
 8008dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dec:	2340      	movs	r3, #64	@ 0x40
 8008dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008df0:	2300      	movs	r3, #0
 8008df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008df8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dfa:	f107 0308 	add.w	r3, r7, #8
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f7ff ff52 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e0a:	2111      	movs	r1, #17
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f9b5 	bl	800917c <SDMMC_GetCmdResp1>
 8008e12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e14:	69fb      	ldr	r3, [r7, #28]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3720      	adds	r7, #32
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b088      	sub	sp, #32
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008e2c:	2312      	movs	r3, #18
 8008e2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e30:	2340      	movs	r3, #64	@ 0x40
 8008e32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e34:	2300      	movs	r3, #0
 8008e36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e3e:	f107 0308 	add.w	r3, r7, #8
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff ff30 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e4e:	2112      	movs	r1, #18
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 f993 	bl	800917c <SDMMC_GetCmdResp1>
 8008e56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e58:	69fb      	ldr	r3, [r7, #28]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3720      	adds	r7, #32
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b088      	sub	sp, #32
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008e70:	2318      	movs	r3, #24
 8008e72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e74:	2340      	movs	r3, #64	@ 0x40
 8008e76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e82:	f107 0308 	add.w	r3, r7, #8
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7ff ff0e 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e92:	2118      	movs	r1, #24
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f971 	bl	800917c <SDMMC_GetCmdResp1>
 8008e9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e9c:	69fb      	ldr	r3, [r7, #28]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3720      	adds	r7, #32
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b088      	sub	sp, #32
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008eb4:	2319      	movs	r3, #25
 8008eb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008eb8:	2340      	movs	r3, #64	@ 0x40
 8008eba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ec0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ec4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ec6:	f107 0308 	add.w	r3, r7, #8
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7ff feec 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ed6:	2119      	movs	r1, #25
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f94f 	bl	800917c <SDMMC_GetCmdResp1>
 8008ede:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ee0:	69fb      	ldr	r3, [r7, #28]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3720      	adds	r7, #32
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b088      	sub	sp, #32
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008ef8:	230c      	movs	r3, #12
 8008efa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008efc:	2340      	movs	r3, #64	@ 0x40
 8008efe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f00:	2300      	movs	r3, #0
 8008f02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f0a:	f107 0308 	add.w	r3, r7, #8
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f7ff feca 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008f16:	4a05      	ldr	r2, [pc, #20]	@ (8008f2c <SDMMC_CmdStopTransfer+0x40>)
 8008f18:	210c      	movs	r1, #12
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f92e 	bl	800917c <SDMMC_GetCmdResp1>
 8008f20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f22:	69fb      	ldr	r3, [r7, #28]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3720      	adds	r7, #32
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	05f5e100 	.word	0x05f5e100

08008f30 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08a      	sub	sp, #40	@ 0x28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f40:	2307      	movs	r3, #7
 8008f42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f44:	2340      	movs	r3, #64	@ 0x40
 8008f46:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f50:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f52:	f107 0310 	add.w	r3, r7, #16
 8008f56:	4619      	mov	r1, r3
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f7ff fea6 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f62:	2107      	movs	r1, #7
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 f909 	bl	800917c <SDMMC_GetCmdResp1>
 8008f6a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3728      	adds	r7, #40	@ 0x28
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b088      	sub	sp, #32
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f82:	2300      	movs	r3, #0
 8008f84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008f86:	2300      	movs	r3, #0
 8008f88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f94:	f107 0308 	add.w	r3, r7, #8
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f7ff fe85 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fb23 	bl	80095ec <SDMMC_GetCmdError>
 8008fa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fa8:	69fb      	ldr	r3, [r7, #28]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3720      	adds	r7, #32
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b088      	sub	sp, #32
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008fba:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008fbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008fc0:	2308      	movs	r3, #8
 8008fc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fc4:	2340      	movs	r3, #64	@ 0x40
 8008fc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008fd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fd2:	f107 0308 	add.w	r3, r7, #8
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff fe66 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fab6 	bl	8009550 <SDMMC_GetCmdResp7>
 8008fe4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fe6:	69fb      	ldr	r3, [r7, #28]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3720      	adds	r7, #32
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b088      	sub	sp, #32
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008ffe:	2337      	movs	r3, #55	@ 0x37
 8009000:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009002:	2340      	movs	r3, #64	@ 0x40
 8009004:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009006:	2300      	movs	r3, #0
 8009008:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800900a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800900e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009010:	f107 0308 	add.w	r3, r7, #8
 8009014:	4619      	mov	r1, r3
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7ff fe47 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800901c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009020:	2137      	movs	r1, #55	@ 0x37
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f8aa 	bl	800917c <SDMMC_GetCmdResp1>
 8009028:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800902a:	69fb      	ldr	r3, [r7, #28]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3720      	adds	r7, #32
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b088      	sub	sp, #32
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009044:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009048:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800904a:	2329      	movs	r3, #41	@ 0x29
 800904c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800904e:	2340      	movs	r3, #64	@ 0x40
 8009050:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009052:	2300      	movs	r3, #0
 8009054:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800905a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800905c:	f107 0308 	add.w	r3, r7, #8
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff fe21 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f9bd 	bl	80093e8 <SDMMC_GetCmdResp3>
 800906e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009070:	69fb      	ldr	r3, [r7, #28]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3720      	adds	r7, #32
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b088      	sub	sp, #32
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009082:	2300      	movs	r3, #0
 8009084:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009086:	2302      	movs	r3, #2
 8009088:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800908a:	23c0      	movs	r3, #192	@ 0xc0
 800908c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800908e:	2300      	movs	r3, #0
 8009090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009096:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009098:	f107 0308 	add.w	r3, r7, #8
 800909c:	4619      	mov	r1, r3
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff fe03 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f957 	bl	8009358 <SDMMC_GetCmdResp2>
 80090aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ac:	69fb      	ldr	r3, [r7, #28]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3720      	adds	r7, #32
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b088      	sub	sp, #32
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80090c4:	2309      	movs	r3, #9
 80090c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80090c8:	23c0      	movs	r3, #192	@ 0xc0
 80090ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090d6:	f107 0308 	add.w	r3, r7, #8
 80090da:	4619      	mov	r1, r3
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff fde4 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f938 	bl	8009358 <SDMMC_GetCmdResp2>
 80090e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ea:	69fb      	ldr	r3, [r7, #28]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3720      	adds	r7, #32
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80090fe:	2300      	movs	r3, #0
 8009100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009102:	2303      	movs	r3, #3
 8009104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009106:	2340      	movs	r3, #64	@ 0x40
 8009108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800910a:	2300      	movs	r3, #0
 800910c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800910e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009112:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009114:	f107 0308 	add.w	r3, r7, #8
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff fdc5 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	2103      	movs	r1, #3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f99d 	bl	8009464 <SDMMC_GetCmdResp6>
 800912a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800912c:	69fb      	ldr	r3, [r7, #28]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3720      	adds	r7, #32
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b088      	sub	sp, #32
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009144:	230d      	movs	r3, #13
 8009146:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009148:	2340      	movs	r3, #64	@ 0x40
 800914a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800914c:	2300      	movs	r3, #0
 800914e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009150:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009154:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009156:	f107 0308 	add.w	r3, r7, #8
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff fda4 	bl	8008caa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009166:	210d      	movs	r1, #13
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f807 	bl	800917c <SDMMC_GetCmdResp1>
 800916e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009170:	69fb      	ldr	r3, [r7, #28]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3720      	adds	r7, #32
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	460b      	mov	r3, r1
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800918a:	4b70      	ldr	r3, [pc, #448]	@ (800934c <SDMMC_GetCmdResp1+0x1d0>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a70      	ldr	r2, [pc, #448]	@ (8009350 <SDMMC_GetCmdResp1+0x1d4>)
 8009190:	fba2 2303 	umull	r2, r3, r2, r3
 8009194:	0a5a      	lsrs	r2, r3, #9
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	fb02 f303 	mul.w	r3, r2, r3
 800919c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	1e5a      	subs	r2, r3, #1
 80091a2:	61fa      	str	r2, [r7, #28]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d102      	bne.n	80091ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80091ac:	e0c9      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0ef      	beq.n	800919e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1ea      	bne.n	800919e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d004      	beq.n	80091de <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2204      	movs	r2, #4
 80091d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091da:	2304      	movs	r3, #4
 80091dc:	e0b1      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d004      	beq.n	80091f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2201      	movs	r2, #1
 80091ee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e0a6      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	22c5      	movs	r2, #197	@ 0xc5
 80091f8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f7ff fd7f 	bl	8008cfe <SDIO_GetCommandResponse>
 8009200:	4603      	mov	r3, r0
 8009202:	461a      	mov	r2, r3
 8009204:	7afb      	ldrb	r3, [r7, #11]
 8009206:	4293      	cmp	r3, r2
 8009208:	d001      	beq.n	800920e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800920a:	2301      	movs	r3, #1
 800920c:	e099      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800920e:	2100      	movs	r1, #0
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f7ff fd81 	bl	8008d18 <SDIO_GetResponse>
 8009216:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	4b4e      	ldr	r3, [pc, #312]	@ (8009354 <SDMMC_GetCmdResp1+0x1d8>)
 800921c:	4013      	ands	r3, r2
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009222:	2300      	movs	r3, #0
 8009224:	e08d      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2b00      	cmp	r3, #0
 800922a:	da02      	bge.n	8009232 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800922c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009230:	e087      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800923c:	2340      	movs	r3, #64	@ 0x40
 800923e:	e080      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800924a:	2380      	movs	r3, #128	@ 0x80
 800924c:	e079      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009258:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800925c:	e071      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800926c:	e069      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d002      	beq.n	800927e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009278:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800927c:	e061      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009288:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800928c:	e059      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d002      	beq.n	800929e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800929c:	e051      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d002      	beq.n	80092ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80092a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80092ac:	e049      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80092b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80092bc:	e041      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d002      	beq.n	80092ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80092c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092cc:	e039      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80092d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80092dc:	e031      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d002      	beq.n	80092ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80092e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80092ec:	e029      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80092f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80092fc:	e021      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d002      	beq.n	800930e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009308:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800930c:	e019      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d002      	beq.n	800931e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009318:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800931c:	e011      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009324:	2b00      	cmp	r3, #0
 8009326:	d002      	beq.n	800932e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009328:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800932c:	e009      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f003 0308 	and.w	r3, r3, #8
 8009334:	2b00      	cmp	r3, #0
 8009336:	d002      	beq.n	800933e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009338:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800933c:	e001      	b.n	8009342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800933e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009342:	4618      	mov	r0, r3
 8009344:	3720      	adds	r7, #32
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	2000000c 	.word	0x2000000c
 8009350:	10624dd3 	.word	0x10624dd3
 8009354:	fdffe008 	.word	0xfdffe008

08009358 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009360:	4b1f      	ldr	r3, [pc, #124]	@ (80093e0 <SDMMC_GetCmdResp2+0x88>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a1f      	ldr	r2, [pc, #124]	@ (80093e4 <SDMMC_GetCmdResp2+0x8c>)
 8009366:	fba2 2303 	umull	r2, r3, r2, r3
 800936a:	0a5b      	lsrs	r3, r3, #9
 800936c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009370:	fb02 f303 	mul.w	r3, r2, r3
 8009374:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	1e5a      	subs	r2, r3, #1
 800937a:	60fa      	str	r2, [r7, #12]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d102      	bne.n	8009386 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009380:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009384:	e026      	b.n	80093d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800938a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009392:	2b00      	cmp	r3, #0
 8009394:	d0ef      	beq.n	8009376 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1ea      	bne.n	8009376 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093a4:	f003 0304 	and.w	r3, r3, #4
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d004      	beq.n	80093b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2204      	movs	r2, #4
 80093b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093b2:	2304      	movs	r3, #4
 80093b4:	e00e      	b.n	80093d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d004      	beq.n	80093cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2201      	movs	r2, #1
 80093c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e003      	b.n	80093d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	22c5      	movs	r2, #197	@ 0xc5
 80093d0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80093d2:	2300      	movs	r3, #0
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	2000000c 	.word	0x2000000c
 80093e4:	10624dd3 	.word	0x10624dd3

080093e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093f0:	4b1a      	ldr	r3, [pc, #104]	@ (800945c <SDMMC_GetCmdResp3+0x74>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a1a      	ldr	r2, [pc, #104]	@ (8009460 <SDMMC_GetCmdResp3+0x78>)
 80093f6:	fba2 2303 	umull	r2, r3, r2, r3
 80093fa:	0a5b      	lsrs	r3, r3, #9
 80093fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009400:	fb02 f303 	mul.w	r3, r2, r3
 8009404:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	1e5a      	subs	r2, r3, #1
 800940a:	60fa      	str	r2, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d102      	bne.n	8009416 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009410:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009414:	e01b      	b.n	800944e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800941a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0ef      	beq.n	8009406 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1ea      	bne.n	8009406 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b00      	cmp	r3, #0
 800943a:	d004      	beq.n	8009446 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2204      	movs	r2, #4
 8009440:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009442:	2304      	movs	r3, #4
 8009444:	e003      	b.n	800944e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	22c5      	movs	r2, #197	@ 0xc5
 800944a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	2000000c 	.word	0x2000000c
 8009460:	10624dd3 	.word	0x10624dd3

08009464 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	460b      	mov	r3, r1
 800946e:	607a      	str	r2, [r7, #4]
 8009470:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009472:	4b35      	ldr	r3, [pc, #212]	@ (8009548 <SDMMC_GetCmdResp6+0xe4>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a35      	ldr	r2, [pc, #212]	@ (800954c <SDMMC_GetCmdResp6+0xe8>)
 8009478:	fba2 2303 	umull	r2, r3, r2, r3
 800947c:	0a5b      	lsrs	r3, r3, #9
 800947e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009482:	fb02 f303 	mul.w	r3, r2, r3
 8009486:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	1e5a      	subs	r2, r3, #1
 800948c:	61fa      	str	r2, [r7, #28]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d102      	bne.n	8009498 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009492:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009496:	e052      	b.n	800953e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800949c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d0ef      	beq.n	8009488 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1ea      	bne.n	8009488 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094b6:	f003 0304 	and.w	r3, r3, #4
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d004      	beq.n	80094c8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2204      	movs	r2, #4
 80094c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094c4:	2304      	movs	r3, #4
 80094c6:	e03a      	b.n	800953e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d004      	beq.n	80094de <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2201      	movs	r2, #1
 80094d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094da:	2301      	movs	r3, #1
 80094dc:	e02f      	b.n	800953e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f7ff fc0d 	bl	8008cfe <SDIO_GetCommandResponse>
 80094e4:	4603      	mov	r3, r0
 80094e6:	461a      	mov	r2, r3
 80094e8:	7afb      	ldrb	r3, [r7, #11]
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d001      	beq.n	80094f2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e025      	b.n	800953e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	22c5      	movs	r2, #197	@ 0xc5
 80094f6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80094f8:	2100      	movs	r1, #0
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f7ff fc0c 	bl	8008d18 <SDIO_GetResponse>
 8009500:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009508:	2b00      	cmp	r3, #0
 800950a:	d106      	bne.n	800951a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	0c1b      	lsrs	r3, r3, #16
 8009510:	b29a      	uxth	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009516:	2300      	movs	r3, #0
 8009518:	e011      	b.n	800953e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009524:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009528:	e009      	b.n	800953e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009534:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009538:	e001      	b.n	800953e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800953a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800953e:	4618      	mov	r0, r3
 8009540:	3720      	adds	r7, #32
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	2000000c 	.word	0x2000000c
 800954c:	10624dd3 	.word	0x10624dd3

08009550 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009558:	4b22      	ldr	r3, [pc, #136]	@ (80095e4 <SDMMC_GetCmdResp7+0x94>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a22      	ldr	r2, [pc, #136]	@ (80095e8 <SDMMC_GetCmdResp7+0x98>)
 800955e:	fba2 2303 	umull	r2, r3, r2, r3
 8009562:	0a5b      	lsrs	r3, r3, #9
 8009564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009568:	fb02 f303 	mul.w	r3, r2, r3
 800956c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	1e5a      	subs	r2, r3, #1
 8009572:	60fa      	str	r2, [r7, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d102      	bne.n	800957e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009578:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800957c:	e02c      	b.n	80095d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009582:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800958a:	2b00      	cmp	r3, #0
 800958c:	d0ef      	beq.n	800956e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1ea      	bne.n	800956e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800959c:	f003 0304 	and.w	r3, r3, #4
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2204      	movs	r2, #4
 80095a8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80095aa:	2304      	movs	r3, #4
 80095ac:	e014      	b.n	80095d8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d004      	beq.n	80095c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e009      	b.n	80095d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d002      	beq.n	80095d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2240      	movs	r2, #64	@ 0x40
 80095d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80095d6:	2300      	movs	r3, #0
  
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	2000000c 	.word	0x2000000c
 80095e8:	10624dd3 	.word	0x10624dd3

080095ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095f4:	4b11      	ldr	r3, [pc, #68]	@ (800963c <SDMMC_GetCmdError+0x50>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a11      	ldr	r2, [pc, #68]	@ (8009640 <SDMMC_GetCmdError+0x54>)
 80095fa:	fba2 2303 	umull	r2, r3, r2, r3
 80095fe:	0a5b      	lsrs	r3, r3, #9
 8009600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009604:	fb02 f303 	mul.w	r3, r2, r3
 8009608:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	1e5a      	subs	r2, r3, #1
 800960e:	60fa      	str	r2, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d102      	bne.n	800961a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009614:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009618:	e009      	b.n	800962e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800961e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009622:	2b00      	cmp	r3, #0
 8009624:	d0f1      	beq.n	800960a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	22c5      	movs	r2, #197	@ 0xc5
 800962a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	2000000c 	.word	0x2000000c
 8009640:	10624dd3 	.word	0x10624dd3

08009644 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009648:	4904      	ldr	r1, [pc, #16]	@ (800965c <MX_FATFS_Init+0x18>)
 800964a:	4805      	ldr	r0, [pc, #20]	@ (8009660 <MX_FATFS_Init+0x1c>)
 800964c:	f003 f886 	bl	800c75c <FATFS_LinkDriver>
 8009650:	4603      	mov	r3, r0
 8009652:	461a      	mov	r2, r3
 8009654:	4b03      	ldr	r3, [pc, #12]	@ (8009664 <MX_FATFS_Init+0x20>)
 8009656:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009658:	bf00      	nop
 800965a:	bd80      	pop	{r7, pc}
 800965c:	2000059c 	.word	0x2000059c
 8009660:	0800d9b8 	.word	0x0800d9b8
 8009664:	20000598 	.word	0x20000598

08009668 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009668:	b480      	push	{r7}
 800966a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800966c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800966e:	4618      	mov	r0, r3
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009682:	f000 f86b 	bl	800975c <BSP_SD_IsDetected>
 8009686:	4603      	mov	r3, r0
 8009688:	2b01      	cmp	r3, #1
 800968a:	d001      	beq.n	8009690 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e005      	b.n	800969c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009690:	4804      	ldr	r0, [pc, #16]	@ (80096a4 <BSP_SD_Init+0x2c>)
 8009692:	f7fb fefd 	bl	8005490 <HAL_SD_Init>
 8009696:	4603      	mov	r3, r0
 8009698:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800969a:	79fb      	ldrb	r3, [r7, #7]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	200000fc 	.word	0x200000fc

080096a8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b088      	sub	sp, #32
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	60b9      	str	r1, [r7, #8]
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	68f9      	ldr	r1, [r7, #12]
 80096c4:	4806      	ldr	r0, [pc, #24]	@ (80096e0 <BSP_SD_ReadBlocks+0x38>)
 80096c6:	f7fb ff93 	bl	80055f0 <HAL_SD_ReadBlocks>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80096d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	200000fc 	.word	0x200000fc

080096e4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b088      	sub	sp, #32
 80096e8:	af02      	add	r7, sp, #8
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
 80096f0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	68f9      	ldr	r1, [r7, #12]
 8009700:	4806      	ldr	r0, [pc, #24]	@ (800971c <BSP_SD_WriteBlocks+0x38>)
 8009702:	f7fc f95b 	bl	80059bc <HAL_SD_WriteBlocks>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3718      	adds	r7, #24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	200000fc 	.word	0x200000fc

08009720 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009724:	4805      	ldr	r0, [pc, #20]	@ (800973c <BSP_SD_GetCardState+0x1c>)
 8009726:	f7fc fca7 	bl	8006078 <HAL_SD_GetCardState>
 800972a:	4603      	mov	r3, r0
 800972c:	2b04      	cmp	r3, #4
 800972e:	bf14      	ite	ne
 8009730:	2301      	movne	r3, #1
 8009732:	2300      	moveq	r3, #0
 8009734:	b2db      	uxtb	r3, r3
}
 8009736:	4618      	mov	r0, r3
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	200000fc 	.word	0x200000fc

08009740 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009748:	6879      	ldr	r1, [r7, #4]
 800974a:	4803      	ldr	r0, [pc, #12]	@ (8009758 <BSP_SD_GetCardInfo+0x18>)
 800974c:	f7fc fc68 	bl	8006020 <HAL_SD_GetCardInfo>
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	200000fc 	.word	0x200000fc

0800975c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009762:	2301      	movs	r3, #1
 8009764:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8009766:	79fb      	ldrb	r3, [r7, #7]
 8009768:	b2db      	uxtb	r3, r3
}
 800976a:	4618      	mov	r0, r3
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
	...

08009778 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009782:	4b0b      	ldr	r3, [pc, #44]	@ (80097b0 <SD_CheckStatus+0x38>)
 8009784:	2201      	movs	r2, #1
 8009786:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009788:	f7ff ffca 	bl	8009720 <BSP_SD_GetCardState>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d107      	bne.n	80097a2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009792:	4b07      	ldr	r3, [pc, #28]	@ (80097b0 <SD_CheckStatus+0x38>)
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	b2db      	uxtb	r3, r3
 8009798:	f023 0301 	bic.w	r3, r3, #1
 800979c:	b2da      	uxtb	r2, r3
 800979e:	4b04      	ldr	r3, [pc, #16]	@ (80097b0 <SD_CheckStatus+0x38>)
 80097a0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80097a2:	4b03      	ldr	r3, [pc, #12]	@ (80097b0 <SD_CheckStatus+0x38>)
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	b2db      	uxtb	r3, r3
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	20000015 	.word	0x20000015

080097b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	4603      	mov	r3, r0
 80097bc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80097be:	4b0b      	ldr	r3, [pc, #44]	@ (80097ec <SD_initialize+0x38>)
 80097c0:	2201      	movs	r2, #1
 80097c2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80097c4:	f7ff ff58 	bl	8009678 <BSP_SD_Init>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d107      	bne.n	80097de <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff ffd1 	bl	8009778 <SD_CheckStatus>
 80097d6:	4603      	mov	r3, r0
 80097d8:	461a      	mov	r2, r3
 80097da:	4b04      	ldr	r3, [pc, #16]	@ (80097ec <SD_initialize+0x38>)
 80097dc:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80097de:	4b03      	ldr	r3, [pc, #12]	@ (80097ec <SD_initialize+0x38>)
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	b2db      	uxtb	r3, r3
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	20000015 	.word	0x20000015

080097f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80097fa:	79fb      	ldrb	r3, [r7, #7]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7ff ffbb 	bl	8009778 <SD_CheckStatus>
 8009802:	4603      	mov	r3, r0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	60b9      	str	r1, [r7, #8]
 8009814:	607a      	str	r2, [r7, #4]
 8009816:	603b      	str	r3, [r7, #0]
 8009818:	4603      	mov	r3, r0
 800981a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8009820:	f04f 33ff 	mov.w	r3, #4294967295
 8009824:	683a      	ldr	r2, [r7, #0]
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	68b8      	ldr	r0, [r7, #8]
 800982a:	f7ff ff3d 	bl	80096a8 <BSP_SD_ReadBlocks>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d107      	bne.n	8009844 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8009834:	bf00      	nop
 8009836:	f7ff ff73 	bl	8009720 <BSP_SD_GetCardState>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1fa      	bne.n	8009836 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009844:	7dfb      	ldrb	r3, [r7, #23]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3718      	adds	r7, #24
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}

0800984e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b086      	sub	sp, #24
 8009852:	af00      	add	r7, sp, #0
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]
 800985a:	4603      	mov	r3, r0
 800985c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8009862:	f04f 33ff 	mov.w	r3, #4294967295
 8009866:	683a      	ldr	r2, [r7, #0]
 8009868:	6879      	ldr	r1, [r7, #4]
 800986a:	68b8      	ldr	r0, [r7, #8]
 800986c:	f7ff ff3a 	bl	80096e4 <BSP_SD_WriteBlocks>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d107      	bne.n	8009886 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8009876:	bf00      	nop
 8009878:	f7ff ff52 	bl	8009720 <BSP_SD_GetCardState>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1fa      	bne.n	8009878 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8009882:	2300      	movs	r3, #0
 8009884:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8009886:	7dfb      	ldrb	r3, [r7, #23]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b08c      	sub	sp, #48	@ 0x30
 8009894:	af00      	add	r7, sp, #0
 8009896:	4603      	mov	r3, r0
 8009898:	603a      	str	r2, [r7, #0]
 800989a:	71fb      	strb	r3, [r7, #7]
 800989c:	460b      	mov	r3, r1
 800989e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80098a6:	4b25      	ldr	r3, [pc, #148]	@ (800993c <SD_ioctl+0xac>)
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	f003 0301 	and.w	r3, r3, #1
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <SD_ioctl+0x28>
 80098b4:	2303      	movs	r3, #3
 80098b6:	e03c      	b.n	8009932 <SD_ioctl+0xa2>

  switch (cmd)
 80098b8:	79bb      	ldrb	r3, [r7, #6]
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	d834      	bhi.n	8009928 <SD_ioctl+0x98>
 80098be:	a201      	add	r2, pc, #4	@ (adr r2, 80098c4 <SD_ioctl+0x34>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098d5 	.word	0x080098d5
 80098c8:	080098dd 	.word	0x080098dd
 80098cc:	080098f5 	.word	0x080098f5
 80098d0:	0800990f 	.word	0x0800990f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80098da:	e028      	b.n	800992e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80098dc:	f107 030c 	add.w	r3, r7, #12
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7ff ff2d 	bl	8009740 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80098e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098ec:	2300      	movs	r3, #0
 80098ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80098f2:	e01c      	b.n	800992e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098f4:	f107 030c 	add.w	r3, r7, #12
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7ff ff21 	bl	8009740 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80098fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009900:	b29a      	uxth	r2, r3
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800990c:	e00f      	b.n	800992e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800990e:	f107 030c 	add.w	r3, r7, #12
 8009912:	4618      	mov	r0, r3
 8009914:	f7ff ff14 	bl	8009740 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991a:	0a5a      	lsrs	r2, r3, #9
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009920:	2300      	movs	r3, #0
 8009922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009926:	e002      	b.n	800992e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009928:	2304      	movs	r3, #4
 800992a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800992e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009932:	4618      	mov	r0, r3
 8009934:	3730      	adds	r7, #48	@ 0x30
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	20000015 	.word	0x20000015

08009940 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	4603      	mov	r3, r0
 8009948:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	4a08      	ldr	r2, [pc, #32]	@ (8009970 <disk_status+0x30>)
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	79fa      	ldrb	r2, [r7, #7]
 8009958:	4905      	ldr	r1, [pc, #20]	@ (8009970 <disk_status+0x30>)
 800995a:	440a      	add	r2, r1
 800995c:	7a12      	ldrb	r2, [r2, #8]
 800995e:	4610      	mov	r0, r2
 8009960:	4798      	blx	r3
 8009962:	4603      	mov	r3, r0
 8009964:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009966:	7bfb      	ldrb	r3, [r7, #15]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	200005c8 	.word	0x200005c8

08009974 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	4603      	mov	r3, r0
 800997c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009982:	79fb      	ldrb	r3, [r7, #7]
 8009984:	4a0e      	ldr	r2, [pc, #56]	@ (80099c0 <disk_initialize+0x4c>)
 8009986:	5cd3      	ldrb	r3, [r2, r3]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d114      	bne.n	80099b6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	4a0c      	ldr	r2, [pc, #48]	@ (80099c0 <disk_initialize+0x4c>)
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	79fa      	ldrb	r2, [r7, #7]
 800999a:	4909      	ldr	r1, [pc, #36]	@ (80099c0 <disk_initialize+0x4c>)
 800999c:	440a      	add	r2, r1
 800999e:	7a12      	ldrb	r2, [r2, #8]
 80099a0:	4610      	mov	r0, r2
 80099a2:	4798      	blx	r3
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d103      	bne.n	80099b6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	4a03      	ldr	r2, [pc, #12]	@ (80099c0 <disk_initialize+0x4c>)
 80099b2:	2101      	movs	r1, #1
 80099b4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	200005c8 	.word	0x200005c8

080099c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80099c4:	b590      	push	{r4, r7, lr}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60b9      	str	r1, [r7, #8]
 80099cc:	607a      	str	r2, [r7, #4]
 80099ce:	603b      	str	r3, [r7, #0]
 80099d0:	4603      	mov	r3, r0
 80099d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
 80099d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009a00 <disk_read+0x3c>)
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	689c      	ldr	r4, [r3, #8]
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	4a07      	ldr	r2, [pc, #28]	@ (8009a00 <disk_read+0x3c>)
 80099e4:	4413      	add	r3, r2
 80099e6:	7a18      	ldrb	r0, [r3, #8]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	68b9      	ldr	r1, [r7, #8]
 80099ee:	47a0      	blx	r4
 80099f0:	4603      	mov	r3, r0
 80099f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80099f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	371c      	adds	r7, #28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd90      	pop	{r4, r7, pc}
 80099fe:	bf00      	nop
 8009a00:	200005c8 	.word	0x200005c8

08009a04 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009a04:	b590      	push	{r4, r7, lr}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	607a      	str	r2, [r7, #4]
 8009a0e:	603b      	str	r3, [r7, #0]
 8009a10:	4603      	mov	r3, r0
 8009a12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	4a0a      	ldr	r2, [pc, #40]	@ (8009a40 <disk_write+0x3c>)
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4413      	add	r3, r2
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	68dc      	ldr	r4, [r3, #12]
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	4a07      	ldr	r2, [pc, #28]	@ (8009a40 <disk_write+0x3c>)
 8009a24:	4413      	add	r3, r2
 8009a26:	7a18      	ldrb	r0, [r3, #8]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	68b9      	ldr	r1, [r7, #8]
 8009a2e:	47a0      	blx	r4
 8009a30:	4603      	mov	r3, r0
 8009a32:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	371c      	adds	r7, #28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd90      	pop	{r4, r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	200005c8 	.word	0x200005c8

08009a44 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b084      	sub	sp, #16
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	603a      	str	r2, [r7, #0]
 8009a4e:	71fb      	strb	r3, [r7, #7]
 8009a50:	460b      	mov	r3, r1
 8009a52:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009a54:	79fb      	ldrb	r3, [r7, #7]
 8009a56:	4a09      	ldr	r2, [pc, #36]	@ (8009a7c <disk_ioctl+0x38>)
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	4413      	add	r3, r2
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	79fa      	ldrb	r2, [r7, #7]
 8009a62:	4906      	ldr	r1, [pc, #24]	@ (8009a7c <disk_ioctl+0x38>)
 8009a64:	440a      	add	r2, r1
 8009a66:	7a10      	ldrb	r0, [r2, #8]
 8009a68:	79b9      	ldrb	r1, [r7, #6]
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	4798      	blx	r3
 8009a6e:	4603      	mov	r3, r0
 8009a70:	73fb      	strb	r3, [r7, #15]
  return res;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	200005c8 	.word	0x200005c8

08009a80 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009a90:	89fb      	ldrh	r3, [r7, #14]
 8009a92:	021b      	lsls	r3, r3, #8
 8009a94:	b21a      	sxth	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	b21b      	sxth	r3, r3
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	b21b      	sxth	r3, r3
 8009aa0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009aa2:	89fb      	ldrh	r3, [r7, #14]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	3303      	adds	r3, #3
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	021b      	lsls	r3, r3, #8
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	3202      	adds	r2, #2
 8009ac8:	7812      	ldrb	r2, [r2, #0]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	021b      	lsls	r3, r3, #8
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	3201      	adds	r2, #1
 8009ad6:	7812      	ldrb	r2, [r2, #0]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	021b      	lsls	r3, r3, #8
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	7812      	ldrb	r2, [r2, #0]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	60fb      	str	r3, [r7, #12]
	return rv;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009af6:	b480      	push	{r7}
 8009af8:	b083      	sub	sp, #12
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	460b      	mov	r3, r1
 8009b00:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	1c5a      	adds	r2, r3, #1
 8009b06:	607a      	str	r2, [r7, #4]
 8009b08:	887a      	ldrh	r2, [r7, #2]
 8009b0a:	b2d2      	uxtb	r2, r2
 8009b0c:	701a      	strb	r2, [r3, #0]
 8009b0e:	887b      	ldrh	r3, [r7, #2]
 8009b10:	0a1b      	lsrs	r3, r3, #8
 8009b12:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	607a      	str	r2, [r7, #4]
 8009b1a:	887a      	ldrh	r2, [r7, #2]
 8009b1c:	b2d2      	uxtb	r2, r2
 8009b1e:	701a      	strb	r2, [r3, #0]
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	1c5a      	adds	r2, r3, #1
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	b2d2      	uxtb	r2, r2
 8009b40:	701a      	strb	r2, [r3, #0]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	0a1b      	lsrs	r3, r3, #8
 8009b46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	1c5a      	adds	r2, r3, #1
 8009b4c:	607a      	str	r2, [r7, #4]
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	b2d2      	uxtb	r2, r2
 8009b52:	701a      	strb	r2, [r3, #0]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	0a1b      	lsrs	r3, r3, #8
 8009b58:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	1c5a      	adds	r2, r3, #1
 8009b5e:	607a      	str	r2, [r7, #4]
 8009b60:	683a      	ldr	r2, [r7, #0]
 8009b62:	b2d2      	uxtb	r2, r2
 8009b64:	701a      	strb	r2, [r3, #0]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	0a1b      	lsrs	r3, r3, #8
 8009b6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	607a      	str	r2, [r7, #4]
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	b2d2      	uxtb	r2, r2
 8009b76:	701a      	strb	r2, [r3, #0]
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00d      	beq.n	8009bba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009b9e:	693a      	ldr	r2, [r7, #16]
 8009ba0:	1c53      	adds	r3, r2, #1
 8009ba2:	613b      	str	r3, [r7, #16]
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	1c59      	adds	r1, r3, #1
 8009ba8:	6179      	str	r1, [r7, #20]
 8009baa:	7812      	ldrb	r2, [r2, #0]
 8009bac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	607b      	str	r3, [r7, #4]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1f1      	bne.n	8009b9e <mem_cpy+0x1a>
	}
}
 8009bba:	bf00      	nop
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009bc6:	b480      	push	{r7}
 8009bc8:	b087      	sub	sp, #28
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	60f8      	str	r0, [r7, #12]
 8009bce:	60b9      	str	r1, [r7, #8]
 8009bd0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	617a      	str	r2, [r7, #20]
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	b2d2      	uxtb	r2, r2
 8009be0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	3b01      	subs	r3, #1
 8009be6:	607b      	str	r3, [r7, #4]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1f3      	bne.n	8009bd6 <mem_set+0x10>
}
 8009bee:	bf00      	nop
 8009bf0:	bf00      	nop
 8009bf2:	371c      	adds	r7, #28
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009bfc:	b480      	push	{r7}
 8009bfe:	b089      	sub	sp, #36	@ 0x24
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	61fb      	str	r3, [r7, #28]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009c10:	2300      	movs	r3, #0
 8009c12:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	1c5a      	adds	r2, r3, #1
 8009c18:	61fa      	str	r2, [r7, #28]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	1c5a      	adds	r2, r3, #1
 8009c22:	61ba      	str	r2, [r7, #24]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	1acb      	subs	r3, r1, r3
 8009c28:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	607b      	str	r3, [r7, #4]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <mem_cmp+0x40>
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d0eb      	beq.n	8009c14 <mem_cmp+0x18>

	return r;
 8009c3c:	697b      	ldr	r3, [r7, #20]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3724      	adds	r7, #36	@ 0x24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009c4a:	b480      	push	{r7}
 8009c4c:	b083      	sub	sp, #12
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009c54:	e002      	b.n	8009c5c <chk_chr+0x12>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	607b      	str	r3, [r7, #4]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d005      	beq.n	8009c70 <chk_chr+0x26>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d1f2      	bne.n	8009c56 <chk_chr+0xc>
	return *str;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	781b      	ldrb	r3, [r3, #0]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60bb      	str	r3, [r7, #8]
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	60fb      	str	r3, [r7, #12]
 8009c92:	e029      	b.n	8009ce8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009c94:	4a27      	ldr	r2, [pc, #156]	@ (8009d34 <chk_lock+0xb4>)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	011b      	lsls	r3, r3, #4
 8009c9a:	4413      	add	r3, r2
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d01d      	beq.n	8009cde <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009ca2:	4a24      	ldr	r2, [pc, #144]	@ (8009d34 <chk_lock+0xb4>)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	011b      	lsls	r3, r3, #4
 8009ca8:	4413      	add	r3, r2
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d116      	bne.n	8009ce2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8009d34 <chk_lock+0xb4>)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	011b      	lsls	r3, r3, #4
 8009cba:	4413      	add	r3, r2
 8009cbc:	3304      	adds	r3, #4
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	d10c      	bne.n	8009ce2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8009d34 <chk_lock+0xb4>)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	011b      	lsls	r3, r3, #4
 8009cce:	4413      	add	r3, r2
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d102      	bne.n	8009ce2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009cdc:	e007      	b.n	8009cee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d9d2      	bls.n	8009c94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d109      	bne.n	8009d08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d102      	bne.n	8009d00 <chk_lock+0x80>
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d101      	bne.n	8009d04 <chk_lock+0x84>
 8009d00:	2300      	movs	r3, #0
 8009d02:	e010      	b.n	8009d26 <chk_lock+0xa6>
 8009d04:	2312      	movs	r3, #18
 8009d06:	e00e      	b.n	8009d26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d108      	bne.n	8009d20 <chk_lock+0xa0>
 8009d0e:	4a09      	ldr	r2, [pc, #36]	@ (8009d34 <chk_lock+0xb4>)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	011b      	lsls	r3, r3, #4
 8009d14:	4413      	add	r3, r2
 8009d16:	330c      	adds	r3, #12
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d1e:	d101      	bne.n	8009d24 <chk_lock+0xa4>
 8009d20:	2310      	movs	r3, #16
 8009d22:	e000      	b.n	8009d26 <chk_lock+0xa6>
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	200005a8 	.word	0x200005a8

08009d38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	607b      	str	r3, [r7, #4]
 8009d42:	e002      	b.n	8009d4a <enq_lock+0x12>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	3301      	adds	r3, #1
 8009d48:	607b      	str	r3, [r7, #4]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d806      	bhi.n	8009d5e <enq_lock+0x26>
 8009d50:	4a09      	ldr	r2, [pc, #36]	@ (8009d78 <enq_lock+0x40>)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	011b      	lsls	r3, r3, #4
 8009d56:	4413      	add	r3, r2
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1f2      	bne.n	8009d44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	bf14      	ite	ne
 8009d64:	2301      	movne	r3, #1
 8009d66:	2300      	moveq	r3, #0
 8009d68:	b2db      	uxtb	r3, r3
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	200005a8 	.word	0x200005a8

08009d7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d86:	2300      	movs	r3, #0
 8009d88:	60fb      	str	r3, [r7, #12]
 8009d8a:	e01f      	b.n	8009dcc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009d8c:	4a41      	ldr	r2, [pc, #260]	@ (8009e94 <inc_lock+0x118>)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	011b      	lsls	r3, r3, #4
 8009d92:	4413      	add	r3, r2
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d113      	bne.n	8009dc6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009d9e:	4a3d      	ldr	r2, [pc, #244]	@ (8009e94 <inc_lock+0x118>)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	011b      	lsls	r3, r3, #4
 8009da4:	4413      	add	r3, r2
 8009da6:	3304      	adds	r3, #4
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d109      	bne.n	8009dc6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009db2:	4a38      	ldr	r2, [pc, #224]	@ (8009e94 <inc_lock+0x118>)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	011b      	lsls	r3, r3, #4
 8009db8:	4413      	add	r3, r2
 8009dba:	3308      	adds	r3, #8
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d006      	beq.n	8009dd4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d9dc      	bls.n	8009d8c <inc_lock+0x10>
 8009dd2:	e000      	b.n	8009dd6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009dd4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d132      	bne.n	8009e42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	e002      	b.n	8009de8 <inc_lock+0x6c>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3301      	adds	r3, #1
 8009de6:	60fb      	str	r3, [r7, #12]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d806      	bhi.n	8009dfc <inc_lock+0x80>
 8009dee:	4a29      	ldr	r2, [pc, #164]	@ (8009e94 <inc_lock+0x118>)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	011b      	lsls	r3, r3, #4
 8009df4:	4413      	add	r3, r2
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d1f2      	bne.n	8009de2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d101      	bne.n	8009e06 <inc_lock+0x8a>
 8009e02:	2300      	movs	r3, #0
 8009e04:	e040      	b.n	8009e88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	4922      	ldr	r1, [pc, #136]	@ (8009e94 <inc_lock+0x118>)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	011b      	lsls	r3, r3, #4
 8009e10:	440b      	add	r3, r1
 8009e12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	689a      	ldr	r2, [r3, #8]
 8009e18:	491e      	ldr	r1, [pc, #120]	@ (8009e94 <inc_lock+0x118>)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	011b      	lsls	r3, r3, #4
 8009e1e:	440b      	add	r3, r1
 8009e20:	3304      	adds	r3, #4
 8009e22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	695a      	ldr	r2, [r3, #20]
 8009e28:	491a      	ldr	r1, [pc, #104]	@ (8009e94 <inc_lock+0x118>)
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	011b      	lsls	r3, r3, #4
 8009e2e:	440b      	add	r3, r1
 8009e30:	3308      	adds	r3, #8
 8009e32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009e34:	4a17      	ldr	r2, [pc, #92]	@ (8009e94 <inc_lock+0x118>)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	011b      	lsls	r3, r3, #4
 8009e3a:	4413      	add	r3, r2
 8009e3c:	330c      	adds	r3, #12
 8009e3e:	2200      	movs	r2, #0
 8009e40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d009      	beq.n	8009e5c <inc_lock+0xe0>
 8009e48:	4a12      	ldr	r2, [pc, #72]	@ (8009e94 <inc_lock+0x118>)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	011b      	lsls	r3, r3, #4
 8009e4e:	4413      	add	r3, r2
 8009e50:	330c      	adds	r3, #12
 8009e52:	881b      	ldrh	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <inc_lock+0xe0>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	e015      	b.n	8009e88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d108      	bne.n	8009e74 <inc_lock+0xf8>
 8009e62:	4a0c      	ldr	r2, [pc, #48]	@ (8009e94 <inc_lock+0x118>)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	011b      	lsls	r3, r3, #4
 8009e68:	4413      	add	r3, r2
 8009e6a:	330c      	adds	r3, #12
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	e001      	b.n	8009e78 <inc_lock+0xfc>
 8009e74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009e78:	4906      	ldr	r1, [pc, #24]	@ (8009e94 <inc_lock+0x118>)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	011b      	lsls	r3, r3, #4
 8009e7e:	440b      	add	r3, r1
 8009e80:	330c      	adds	r3, #12
 8009e82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	3301      	adds	r3, #1
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	200005a8 	.word	0x200005a8

08009e98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3b01      	subs	r3, #1
 8009ea4:	607b      	str	r3, [r7, #4]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d825      	bhi.n	8009ef8 <dec_lock+0x60>
		n = Files[i].ctr;
 8009eac:	4a17      	ldr	r2, [pc, #92]	@ (8009f0c <dec_lock+0x74>)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	011b      	lsls	r3, r3, #4
 8009eb2:	4413      	add	r3, r2
 8009eb4:	330c      	adds	r3, #12
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009eba:	89fb      	ldrh	r3, [r7, #14]
 8009ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ec0:	d101      	bne.n	8009ec6 <dec_lock+0x2e>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009ec6:	89fb      	ldrh	r3, [r7, #14]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <dec_lock+0x3a>
 8009ecc:	89fb      	ldrh	r3, [r7, #14]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8009f0c <dec_lock+0x74>)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	011b      	lsls	r3, r3, #4
 8009ed8:	4413      	add	r3, r2
 8009eda:	330c      	adds	r3, #12
 8009edc:	89fa      	ldrh	r2, [r7, #14]
 8009ede:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009ee0:	89fb      	ldrh	r3, [r7, #14]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d105      	bne.n	8009ef2 <dec_lock+0x5a>
 8009ee6:	4a09      	ldr	r2, [pc, #36]	@ (8009f0c <dec_lock+0x74>)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	011b      	lsls	r3, r3, #4
 8009eec:	4413      	add	r3, r2
 8009eee:	2200      	movs	r2, #0
 8009ef0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	737b      	strb	r3, [r7, #13]
 8009ef6:	e001      	b.n	8009efc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009ef8:	2302      	movs	r3, #2
 8009efa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009efc:	7b7b      	ldrb	r3, [r7, #13]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	200005a8 	.word	0x200005a8

08009f10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	e010      	b.n	8009f40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009f1e:	4a0d      	ldr	r2, [pc, #52]	@ (8009f54 <clear_lock+0x44>)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	011b      	lsls	r3, r3, #4
 8009f24:	4413      	add	r3, r2
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d105      	bne.n	8009f3a <clear_lock+0x2a>
 8009f2e:	4a09      	ldr	r2, [pc, #36]	@ (8009f54 <clear_lock+0x44>)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	011b      	lsls	r3, r3, #4
 8009f34:	4413      	add	r3, r2
 8009f36:	2200      	movs	r2, #0
 8009f38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	60fb      	str	r3, [r7, #12]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d9eb      	bls.n	8009f1e <clear_lock+0xe>
	}
}
 8009f46:	bf00      	nop
 8009f48:	bf00      	nop
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	200005a8 	.word	0x200005a8

08009f58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	78db      	ldrb	r3, [r3, #3]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d034      	beq.n	8009fd6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	7858      	ldrb	r0, [r3, #1]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	f7ff fd40 	bl	8009a04 <disk_write>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d002      	beq.n	8009f90 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	73fb      	strb	r3, [r7, #15]
 8009f8e:	e022      	b.n	8009fd6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	1ad2      	subs	r2, r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d217      	bcs.n	8009fd6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	789b      	ldrb	r3, [r3, #2]
 8009faa:	613b      	str	r3, [r7, #16]
 8009fac:	e010      	b.n	8009fd0 <sync_window+0x78>
					wsect += fs->fsize;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	697a      	ldr	r2, [r7, #20]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	7858      	ldrb	r0, [r3, #1]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	f7ff fd1d 	bl	8009a04 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	613b      	str	r3, [r7, #16]
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d8eb      	bhi.n	8009fae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009fea:	2300      	movs	r3, #0
 8009fec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d01b      	beq.n	800a030 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7ff ffad 	bl	8009f58 <sync_window>
 8009ffe:	4603      	mov	r3, r0
 800a000:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a002:	7bfb      	ldrb	r3, [r7, #15]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d113      	bne.n	800a030 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	7858      	ldrb	r0, [r3, #1]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a012:	2301      	movs	r3, #1
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	f7ff fcd5 	bl	80099c4 <disk_read>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d004      	beq.n	800a02a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a020:	f04f 33ff 	mov.w	r3, #4294967295
 800a024:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a026:	2301      	movs	r3, #1
 800a028:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800a030:	7bfb      	ldrb	r3, [r7, #15]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
	...

0800a03c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff ff87 	bl	8009f58 <sync_window>
 800a04a:	4603      	mov	r3, r0
 800a04c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a04e:	7bfb      	ldrb	r3, [r7, #15]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d158      	bne.n	800a106 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b03      	cmp	r3, #3
 800a05a:	d148      	bne.n	800a0ee <sync_fs+0xb2>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	791b      	ldrb	r3, [r3, #4]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d144      	bne.n	800a0ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	3330      	adds	r3, #48	@ 0x30
 800a068:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a06c:	2100      	movs	r1, #0
 800a06e:	4618      	mov	r0, r3
 800a070:	f7ff fda9 	bl	8009bc6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	3330      	adds	r3, #48	@ 0x30
 800a078:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a07c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a080:	4618      	mov	r0, r3
 800a082:	f7ff fd38 	bl	8009af6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	3330      	adds	r3, #48	@ 0x30
 800a08a:	4921      	ldr	r1, [pc, #132]	@ (800a110 <sync_fs+0xd4>)
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7ff fd4d 	bl	8009b2c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	3330      	adds	r3, #48	@ 0x30
 800a096:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a09a:	491e      	ldr	r1, [pc, #120]	@ (800a114 <sync_fs+0xd8>)
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7ff fd45 	bl	8009b2c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	3330      	adds	r3, #48	@ 0x30
 800a0a6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4610      	mov	r0, r2
 800a0b2:	f7ff fd3b 	bl	8009b2c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	3330      	adds	r3, #48	@ 0x30
 800a0ba:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	f7ff fd31 	bl	8009b2c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	1c5a      	adds	r2, r3, #1
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	7858      	ldrb	r0, [r3, #1]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	f7ff fc8e 	bl	8009a04 <disk_write>
			fs->fsi_flag = 0;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	785b      	ldrb	r3, [r3, #1]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff fca4 	bl	8009a44 <disk_ioctl>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <sync_fs+0xca>
 800a102:	2301      	movs	r3, #1
 800a104:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a106:	7bfb      	ldrb	r3, [r7, #15]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	41615252 	.word	0x41615252
 800a114:	61417272 	.word	0x61417272

0800a118 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	3b02      	subs	r3, #2
 800a126:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	3b02      	subs	r3, #2
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	429a      	cmp	r2, r3
 800a132:	d301      	bcc.n	800a138 <clust2sect+0x20>
 800a134:	2300      	movs	r3, #0
 800a136:	e008      	b.n	800a14a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	895b      	ldrh	r3, [r3, #10]
 800a13c:	461a      	mov	r2, r3
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	fb03 f202 	mul.w	r2, r3, r2
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a148:	4413      	add	r3, r2
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr

0800a156 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b086      	sub	sp, #24
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d904      	bls.n	800a176 <get_fat+0x20>
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	695b      	ldr	r3, [r3, #20]
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	429a      	cmp	r2, r3
 800a174:	d302      	bcc.n	800a17c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a176:	2301      	movs	r3, #1
 800a178:	617b      	str	r3, [r7, #20]
 800a17a:	e08e      	b.n	800a29a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a17c:	f04f 33ff 	mov.w	r3, #4294967295
 800a180:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	2b03      	cmp	r3, #3
 800a188:	d061      	beq.n	800a24e <get_fat+0xf8>
 800a18a:	2b03      	cmp	r3, #3
 800a18c:	dc7b      	bgt.n	800a286 <get_fat+0x130>
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d002      	beq.n	800a198 <get_fat+0x42>
 800a192:	2b02      	cmp	r3, #2
 800a194:	d041      	beq.n	800a21a <get_fat+0xc4>
 800a196:	e076      	b.n	800a286 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	085b      	lsrs	r3, r3, #1
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	6a1a      	ldr	r2, [r3, #32]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	0a5b      	lsrs	r3, r3, #9
 800a1ae:	4413      	add	r3, r2
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	6938      	ldr	r0, [r7, #16]
 800a1b4:	f7ff ff14 	bl	8009fe0 <move_window>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d166      	bne.n	800a28c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	1c5a      	adds	r2, r3, #1
 800a1c2:	60fa      	str	r2, [r7, #12]
 800a1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1c8:	693a      	ldr	r2, [r7, #16]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	6a1a      	ldr	r2, [r3, #32]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	0a5b      	lsrs	r3, r3, #9
 800a1da:	4413      	add	r3, r2
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6938      	ldr	r0, [r7, #16]
 800a1e0:	f7ff fefe 	bl	8009fe0 <move_window>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d152      	bne.n	800a290 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a1f8:	021b      	lsls	r3, r3, #8
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	2b00      	cmp	r3, #0
 800a208:	d002      	beq.n	800a210 <get_fat+0xba>
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	091b      	lsrs	r3, r3, #4
 800a20e:	e002      	b.n	800a216 <get_fat+0xc0>
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a216:	617b      	str	r3, [r7, #20]
			break;
 800a218:	e03f      	b.n	800a29a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	6a1a      	ldr	r2, [r3, #32]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	0a1b      	lsrs	r3, r3, #8
 800a222:	4413      	add	r3, r2
 800a224:	4619      	mov	r1, r3
 800a226:	6938      	ldr	r0, [r7, #16]
 800a228:	f7ff feda 	bl	8009fe0 <move_window>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d130      	bne.n	800a294 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	005b      	lsls	r3, r3, #1
 800a23c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a240:	4413      	add	r3, r2
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff fc1c 	bl	8009a80 <ld_word>
 800a248:	4603      	mov	r3, r0
 800a24a:	617b      	str	r3, [r7, #20]
			break;
 800a24c:	e025      	b.n	800a29a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	6a1a      	ldr	r2, [r3, #32]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	09db      	lsrs	r3, r3, #7
 800a256:	4413      	add	r3, r2
 800a258:	4619      	mov	r1, r3
 800a25a:	6938      	ldr	r0, [r7, #16]
 800a25c:	f7ff fec0 	bl	8009fe0 <move_window>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d118      	bne.n	800a298 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a274:	4413      	add	r3, r2
 800a276:	4618      	mov	r0, r3
 800a278:	f7ff fc1a 	bl	8009ab0 <ld_dword>
 800a27c:	4603      	mov	r3, r0
 800a27e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a282:	617b      	str	r3, [r7, #20]
			break;
 800a284:	e009      	b.n	800a29a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a286:	2301      	movs	r3, #1
 800a288:	617b      	str	r3, [r7, #20]
 800a28a:	e006      	b.n	800a29a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a28c:	bf00      	nop
 800a28e:	e004      	b.n	800a29a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a290:	bf00      	nop
 800a292:	e002      	b.n	800a29a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a294:	bf00      	nop
 800a296:	e000      	b.n	800a29a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a298:	bf00      	nop
		}
	}

	return val;
 800a29a:	697b      	ldr	r3, [r7, #20]
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3718      	adds	r7, #24
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a2a4:	b590      	push	{r4, r7, lr}
 800a2a6:	b089      	sub	sp, #36	@ 0x24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	f240 80d9 	bls.w	800a46e <put_fat+0x1ca>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	695b      	ldr	r3, [r3, #20]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	f080 80d3 	bcs.w	800a46e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	2b03      	cmp	r3, #3
 800a2ce:	f000 8096 	beq.w	800a3fe <put_fat+0x15a>
 800a2d2:	2b03      	cmp	r3, #3
 800a2d4:	f300 80cb 	bgt.w	800a46e <put_fat+0x1ca>
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d002      	beq.n	800a2e2 <put_fat+0x3e>
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d06e      	beq.n	800a3be <put_fat+0x11a>
 800a2e0:	e0c5      	b.n	800a46e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	61bb      	str	r3, [r7, #24]
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	085b      	lsrs	r3, r3, #1
 800a2ea:	69ba      	ldr	r2, [r7, #24]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6a1a      	ldr	r2, [r3, #32]
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	0a5b      	lsrs	r3, r3, #9
 800a2f8:	4413      	add	r3, r2
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f7ff fe6f 	bl	8009fe0 <move_window>
 800a302:	4603      	mov	r3, r0
 800a304:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a306:	7ffb      	ldrb	r3, [r7, #31]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f040 80a9 	bne.w	800a460 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	1c59      	adds	r1, r3, #1
 800a318:	61b9      	str	r1, [r7, #24]
 800a31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a31e:	4413      	add	r3, r2
 800a320:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00d      	beq.n	800a348 <put_fat+0xa4>
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	b25b      	sxtb	r3, r3
 800a332:	f003 030f 	and.w	r3, r3, #15
 800a336:	b25a      	sxtb	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	011b      	lsls	r3, r3, #4
 800a33e:	b25b      	sxtb	r3, r3
 800a340:	4313      	orrs	r3, r2
 800a342:	b25b      	sxtb	r3, r3
 800a344:	b2db      	uxtb	r3, r3
 800a346:	e001      	b.n	800a34c <put_fat+0xa8>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2201      	movs	r2, #1
 800a354:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6a1a      	ldr	r2, [r3, #32]
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	0a5b      	lsrs	r3, r3, #9
 800a35e:	4413      	add	r3, r2
 800a360:	4619      	mov	r1, r3
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f7ff fe3c 	bl	8009fe0 <move_window>
 800a368:	4603      	mov	r3, r0
 800a36a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a36c:	7ffb      	ldrb	r3, [r7, #31]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d178      	bne.n	800a464 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a37e:	4413      	add	r3, r2
 800a380:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	f003 0301 	and.w	r3, r3, #1
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d003      	beq.n	800a394 <put_fat+0xf0>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	091b      	lsrs	r3, r3, #4
 800a390:	b2db      	uxtb	r3, r3
 800a392:	e00e      	b.n	800a3b2 <put_fat+0x10e>
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	b25b      	sxtb	r3, r3
 800a39a:	f023 030f 	bic.w	r3, r3, #15
 800a39e:	b25a      	sxtb	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	0a1b      	lsrs	r3, r3, #8
 800a3a4:	b25b      	sxtb	r3, r3
 800a3a6:	f003 030f 	and.w	r3, r3, #15
 800a3aa:	b25b      	sxtb	r3, r3
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	b25b      	sxtb	r3, r3
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	697a      	ldr	r2, [r7, #20]
 800a3b4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	70da      	strb	r2, [r3, #3]
			break;
 800a3bc:	e057      	b.n	800a46e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	6a1a      	ldr	r2, [r3, #32]
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	0a1b      	lsrs	r3, r3, #8
 800a3c6:	4413      	add	r3, r2
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f7ff fe08 	bl	8009fe0 <move_window>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3d4:	7ffb      	ldrb	r3, [r7, #31]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d146      	bne.n	800a468 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	005b      	lsls	r3, r3, #1
 800a3e4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a3e8:	4413      	add	r3, r2
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	b292      	uxth	r2, r2
 800a3ee:	4611      	mov	r1, r2
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7ff fb80 	bl	8009af6 <st_word>
			fs->wflag = 1;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	70da      	strb	r2, [r3, #3]
			break;
 800a3fc:	e037      	b.n	800a46e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6a1a      	ldr	r2, [r3, #32]
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	09db      	lsrs	r3, r3, #7
 800a406:	4413      	add	r3, r2
 800a408:	4619      	mov	r1, r3
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f7ff fde8 	bl	8009fe0 <move_window>
 800a410:	4603      	mov	r3, r0
 800a412:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a414:	7ffb      	ldrb	r3, [r7, #31]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d128      	bne.n	800a46c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a42e:	4413      	add	r3, r2
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff fb3d 	bl	8009ab0 <ld_dword>
 800a436:	4603      	mov	r3, r0
 800a438:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a43c:	4323      	orrs	r3, r4
 800a43e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a44e:	4413      	add	r3, r2
 800a450:	6879      	ldr	r1, [r7, #4]
 800a452:	4618      	mov	r0, r3
 800a454:	f7ff fb6a 	bl	8009b2c <st_dword>
			fs->wflag = 1;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2201      	movs	r2, #1
 800a45c:	70da      	strb	r2, [r3, #3]
			break;
 800a45e:	e006      	b.n	800a46e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a460:	bf00      	nop
 800a462:	e004      	b.n	800a46e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a464:	bf00      	nop
 800a466:	e002      	b.n	800a46e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a468:	bf00      	nop
 800a46a:	e000      	b.n	800a46e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a46c:	bf00      	nop
		}
	}
	return res;
 800a46e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3724      	adds	r7, #36	@ 0x24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd90      	pop	{r4, r7, pc}

0800a478 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b088      	sub	sp, #32
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b01      	cmp	r3, #1
 800a492:	d904      	bls.n	800a49e <remove_chain+0x26>
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d301      	bcc.n	800a4a2 <remove_chain+0x2a>
 800a49e:	2302      	movs	r3, #2
 800a4a0:	e04b      	b.n	800a53a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00c      	beq.n	800a4c2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a4a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ac:	6879      	ldr	r1, [r7, #4]
 800a4ae:	69b8      	ldr	r0, [r7, #24]
 800a4b0:	f7ff fef8 	bl	800a2a4 <put_fat>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a4b8:	7ffb      	ldrb	r3, [r7, #31]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <remove_chain+0x4a>
 800a4be:	7ffb      	ldrb	r3, [r7, #31]
 800a4c0:	e03b      	b.n	800a53a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a4c2:	68b9      	ldr	r1, [r7, #8]
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f7ff fe46 	bl	800a156 <get_fat>
 800a4ca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d031      	beq.n	800a536 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d101      	bne.n	800a4dc <remove_chain+0x64>
 800a4d8:	2302      	movs	r3, #2
 800a4da:	e02e      	b.n	800a53a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e2:	d101      	bne.n	800a4e8 <remove_chain+0x70>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e028      	b.n	800a53a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	68b9      	ldr	r1, [r7, #8]
 800a4ec:	69b8      	ldr	r0, [r7, #24]
 800a4ee:	f7ff fed9 	bl	800a2a4 <put_fat>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a4f6:	7ffb      	ldrb	r3, [r7, #31]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d001      	beq.n	800a500 <remove_chain+0x88>
 800a4fc:	7ffb      	ldrb	r3, [r7, #31]
 800a4fe:	e01c      	b.n	800a53a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	691a      	ldr	r2, [r3, #16]
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	3b02      	subs	r3, #2
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d20b      	bcs.n	800a526 <remove_chain+0xae>
			fs->free_clst++;
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	1c5a      	adds	r2, r3, #1
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	791b      	ldrb	r3, [r3, #4]
 800a51c:	f043 0301 	orr.w	r3, r3, #1
 800a520:	b2da      	uxtb	r2, r3
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	429a      	cmp	r2, r3
 800a532:	d3c6      	bcc.n	800a4c2 <remove_chain+0x4a>
 800a534:	e000      	b.n	800a538 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a536:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3720      	adds	r7, #32
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b088      	sub	sp, #32
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10d      	bne.n	800a574 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d004      	beq.n	800a56e <create_chain+0x2c>
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	695b      	ldr	r3, [r3, #20]
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d31b      	bcc.n	800a5a6 <create_chain+0x64>
 800a56e:	2301      	movs	r3, #1
 800a570:	61bb      	str	r3, [r7, #24]
 800a572:	e018      	b.n	800a5a6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff fded 	bl	800a156 <get_fat>
 800a57c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d801      	bhi.n	800a588 <create_chain+0x46>
 800a584:	2301      	movs	r3, #1
 800a586:	e070      	b.n	800a66a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58e:	d101      	bne.n	800a594 <create_chain+0x52>
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	e06a      	b.n	800a66a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	695b      	ldr	r3, [r3, #20]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d201      	bcs.n	800a5a2 <create_chain+0x60>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	e063      	b.n	800a66a <create_chain+0x128>
		scl = clst;
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	695b      	ldr	r3, [r3, #20]
 800a5b4:	69fa      	ldr	r2, [r7, #28]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d307      	bcc.n	800a5ca <create_chain+0x88>
				ncl = 2;
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a5be:	69fa      	ldr	r2, [r7, #28]
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d901      	bls.n	800a5ca <create_chain+0x88>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	e04f      	b.n	800a66a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a5ca:	69f9      	ldr	r1, [r7, #28]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f7ff fdc2 	bl	800a156 <get_fat>
 800a5d2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00e      	beq.n	800a5f8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d003      	beq.n	800a5e8 <create_chain+0xa6>
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e6:	d101      	bne.n	800a5ec <create_chain+0xaa>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	e03e      	b.n	800a66a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a5ec:	69fa      	ldr	r2, [r7, #28]
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d1da      	bne.n	800a5aa <create_chain+0x68>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	e038      	b.n	800a66a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a5f8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a5fe:	69f9      	ldr	r1, [r7, #28]
 800a600:	6938      	ldr	r0, [r7, #16]
 800a602:	f7ff fe4f 	bl	800a2a4 <put_fat>
 800a606:	4603      	mov	r3, r0
 800a608:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a60a:	7dfb      	ldrb	r3, [r7, #23]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d109      	bne.n	800a624 <create_chain+0xe2>
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d006      	beq.n	800a624 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a616:	69fa      	ldr	r2, [r7, #28]
 800a618:	6839      	ldr	r1, [r7, #0]
 800a61a:	6938      	ldr	r0, [r7, #16]
 800a61c:	f7ff fe42 	bl	800a2a4 <put_fat>
 800a620:	4603      	mov	r3, r0
 800a622:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a624:	7dfb      	ldrb	r3, [r7, #23]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d116      	bne.n	800a658 <create_chain+0x116>
		fs->last_clst = ncl;
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	69fa      	ldr	r2, [r7, #28]
 800a62e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	691a      	ldr	r2, [r3, #16]
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	695b      	ldr	r3, [r3, #20]
 800a638:	3b02      	subs	r3, #2
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d804      	bhi.n	800a648 <create_chain+0x106>
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	1e5a      	subs	r2, r3, #1
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	791b      	ldrb	r3, [r3, #4]
 800a64c:	f043 0301 	orr.w	r3, r3, #1
 800a650:	b2da      	uxtb	r2, r3
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	711a      	strb	r2, [r3, #4]
 800a656:	e007      	b.n	800a668 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d102      	bne.n	800a664 <create_chain+0x122>
 800a65e:	f04f 33ff 	mov.w	r3, #4294967295
 800a662:	e000      	b.n	800a666 <create_chain+0x124>
 800a664:	2301      	movs	r3, #1
 800a666:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a668:	69fb      	ldr	r3, [r7, #28]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a672:	b480      	push	{r7}
 800a674:	b087      	sub	sp, #28
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a686:	3304      	adds	r3, #4
 800a688:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	0a5b      	lsrs	r3, r3, #9
 800a68e:	68fa      	ldr	r2, [r7, #12]
 800a690:	8952      	ldrh	r2, [r2, #10]
 800a692:	fbb3 f3f2 	udiv	r3, r3, r2
 800a696:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	1d1a      	adds	r2, r3, #4
 800a69c:	613a      	str	r2, [r7, #16]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d101      	bne.n	800a6ac <clmt_clust+0x3a>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	e010      	b.n	800a6ce <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d307      	bcc.n	800a6c4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a6b4:	697a      	ldr	r2, [r7, #20]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	617b      	str	r3, [r7, #20]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	3304      	adds	r3, #4
 800a6c0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a6c2:	e7e9      	b.n	800a698 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a6c4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	4413      	add	r3, r2
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	371c      	adds	r7, #28
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b086      	sub	sp, #24
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6f0:	d204      	bcs.n	800a6fc <dir_sdi+0x22>
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	f003 031f 	and.w	r3, r3, #31
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d001      	beq.n	800a700 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	e063      	b.n	800a7c8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d106      	bne.n	800a720 <dir_sdi+0x46>
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	2b02      	cmp	r3, #2
 800a718:	d902      	bls.n	800a720 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a71e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10c      	bne.n	800a740 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	095b      	lsrs	r3, r3, #5
 800a72a:	693a      	ldr	r2, [r7, #16]
 800a72c:	8912      	ldrh	r2, [r2, #8]
 800a72e:	4293      	cmp	r3, r2
 800a730:	d301      	bcc.n	800a736 <dir_sdi+0x5c>
 800a732:	2302      	movs	r3, #2
 800a734:	e048      	b.n	800a7c8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	61da      	str	r2, [r3, #28]
 800a73e:	e029      	b.n	800a794 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	895b      	ldrh	r3, [r3, #10]
 800a744:	025b      	lsls	r3, r3, #9
 800a746:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a748:	e019      	b.n	800a77e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6979      	ldr	r1, [r7, #20]
 800a74e:	4618      	mov	r0, r3
 800a750:	f7ff fd01 	bl	800a156 <get_fat>
 800a754:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75c:	d101      	bne.n	800a762 <dir_sdi+0x88>
 800a75e:	2301      	movs	r3, #1
 800a760:	e032      	b.n	800a7c8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d904      	bls.n	800a772 <dir_sdi+0x98>
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	695b      	ldr	r3, [r3, #20]
 800a76c:	697a      	ldr	r2, [r7, #20]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d301      	bcc.n	800a776 <dir_sdi+0x9c>
 800a772:	2302      	movs	r3, #2
 800a774:	e028      	b.n	800a7c8 <dir_sdi+0xee>
			ofs -= csz;
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	429a      	cmp	r2, r3
 800a784:	d2e1      	bcs.n	800a74a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a786:	6979      	ldr	r1, [r7, #20]
 800a788:	6938      	ldr	r0, [r7, #16]
 800a78a:	f7ff fcc5 	bl	800a118 <clust2sect>
 800a78e:	4602      	mov	r2, r0
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	69db      	ldr	r3, [r3, #28]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <dir_sdi+0xcc>
 800a7a2:	2302      	movs	r3, #2
 800a7a4:	e010      	b.n	800a7c8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	69da      	ldr	r2, [r3, #28]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	0a5b      	lsrs	r3, r3, #9
 800a7ae:	441a      	add	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c0:	441a      	add	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3718      	adds	r7, #24
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	3320      	adds	r3, #32
 800a7e6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	69db      	ldr	r3, [r3, #28]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d003      	beq.n	800a7f8 <dir_next+0x28>
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7f6:	d301      	bcc.n	800a7fc <dir_next+0x2c>
 800a7f8:	2304      	movs	r3, #4
 800a7fa:	e0aa      	b.n	800a952 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a802:	2b00      	cmp	r3, #0
 800a804:	f040 8098 	bne.w	800a938 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	69db      	ldr	r3, [r3, #28]
 800a80c:	1c5a      	adds	r2, r3, #1
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d10b      	bne.n	800a832 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	095b      	lsrs	r3, r3, #5
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	8912      	ldrh	r2, [r2, #8]
 800a822:	4293      	cmp	r3, r2
 800a824:	f0c0 8088 	bcc.w	800a938 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	61da      	str	r2, [r3, #28]
 800a82e:	2304      	movs	r3, #4
 800a830:	e08f      	b.n	800a952 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	0a5b      	lsrs	r3, r3, #9
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	8952      	ldrh	r2, [r2, #10]
 800a83a:	3a01      	subs	r2, #1
 800a83c:	4013      	ands	r3, r2
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d17a      	bne.n	800a938 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	4619      	mov	r1, r3
 800a84a:	4610      	mov	r0, r2
 800a84c:	f7ff fc83 	bl	800a156 <get_fat>
 800a850:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d801      	bhi.n	800a85c <dir_next+0x8c>
 800a858:	2302      	movs	r3, #2
 800a85a:	e07a      	b.n	800a952 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a862:	d101      	bne.n	800a868 <dir_next+0x98>
 800a864:	2301      	movs	r3, #1
 800a866:	e074      	b.n	800a952 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	695b      	ldr	r3, [r3, #20]
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d358      	bcc.n	800a924 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d104      	bne.n	800a882 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	61da      	str	r2, [r3, #28]
 800a87e:	2304      	movs	r3, #4
 800a880:	e067      	b.n	800a952 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	4619      	mov	r1, r3
 800a88a:	4610      	mov	r0, r2
 800a88c:	f7ff fe59 	bl	800a542 <create_chain>
 800a890:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <dir_next+0xcc>
 800a898:	2307      	movs	r3, #7
 800a89a:	e05a      	b.n	800a952 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d101      	bne.n	800a8a6 <dir_next+0xd6>
 800a8a2:	2302      	movs	r3, #2
 800a8a4:	e055      	b.n	800a952 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ac:	d101      	bne.n	800a8b2 <dir_next+0xe2>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e04f      	b.n	800a952 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f7ff fb50 	bl	8009f58 <sync_window>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <dir_next+0xf2>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e047      	b.n	800a952 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3330      	adds	r3, #48	@ 0x30
 800a8c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7ff f97a 	bl	8009bc6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	613b      	str	r3, [r7, #16]
 800a8d6:	6979      	ldr	r1, [r7, #20]
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f7ff fc1d 	bl	800a118 <clust2sect>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a8e4:	e012      	b.n	800a90c <dir_next+0x13c>
						fs->wflag = 1;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f7ff fb33 	bl	8009f58 <sync_window>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d001      	beq.n	800a8fc <dir_next+0x12c>
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e02a      	b.n	800a952 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	3301      	adds	r3, #1
 800a900:	613b      	str	r3, [r7, #16]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a906:	1c5a      	adds	r2, r3, #1
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	895b      	ldrh	r3, [r3, #10]
 800a910:	461a      	mov	r2, r3
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	4293      	cmp	r3, r2
 800a916:	d3e6      	bcc.n	800a8e6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	1ad2      	subs	r2, r2, r3
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a92a:	6979      	ldr	r1, [r7, #20]
 800a92c:	68f8      	ldr	r0, [r7, #12]
 800a92e:	f7ff fbf3 	bl	800a118 <clust2sect>
 800a932:	4602      	mov	r2, r0
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68ba      	ldr	r2, [r7, #8]
 800a93c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a94a:	441a      	add	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3718      	adds	r7, #24
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}

0800a95a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b086      	sub	sp, #24
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a96a:	2100      	movs	r1, #0
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7ff feb4 	bl	800a6da <dir_sdi>
 800a972:	4603      	mov	r3, r0
 800a974:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a976:	7dfb      	ldrb	r3, [r7, #23]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d12b      	bne.n	800a9d4 <dir_alloc+0x7a>
		n = 0;
 800a97c:	2300      	movs	r3, #0
 800a97e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	69db      	ldr	r3, [r3, #28]
 800a984:	4619      	mov	r1, r3
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7ff fb2a 	bl	8009fe0 <move_window>
 800a98c:	4603      	mov	r3, r0
 800a98e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a990:	7dfb      	ldrb	r3, [r7, #23]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d11d      	bne.n	800a9d2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	2be5      	cmp	r3, #229	@ 0xe5
 800a99e:	d004      	beq.n	800a9aa <dir_alloc+0x50>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a1b      	ldr	r3, [r3, #32]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d107      	bne.n	800a9ba <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	613b      	str	r3, [r7, #16]
 800a9b0:	693a      	ldr	r2, [r7, #16]
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d102      	bne.n	800a9be <dir_alloc+0x64>
 800a9b8:	e00c      	b.n	800a9d4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a9be:	2101      	movs	r1, #1
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7ff ff05 	bl	800a7d0 <dir_next>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a9ca:	7dfb      	ldrb	r3, [r7, #23]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d0d7      	beq.n	800a980 <dir_alloc+0x26>
 800a9d0:	e000      	b.n	800a9d4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a9d2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a9d4:	7dfb      	ldrb	r3, [r7, #23]
 800a9d6:	2b04      	cmp	r3, #4
 800a9d8:	d101      	bne.n	800a9de <dir_alloc+0x84>
 800a9da:	2307      	movs	r3, #7
 800a9dc:	75fb      	strb	r3, [r7, #23]
	return res;
 800a9de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3718      	adds	r7, #24
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	331a      	adds	r3, #26
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7ff f842 	bl	8009a80 <ld_word>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	2b03      	cmp	r3, #3
 800aa06:	d109      	bne.n	800aa1c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	3314      	adds	r3, #20
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7ff f837 	bl	8009a80 <ld_word>
 800aa12:	4603      	mov	r3, r0
 800aa14:	041b      	lsls	r3, r3, #16
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b084      	sub	sp, #16
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	60f8      	str	r0, [r7, #12]
 800aa2e:	60b9      	str	r1, [r7, #8]
 800aa30:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	331a      	adds	r3, #26
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	b292      	uxth	r2, r2
 800aa3a:	4611      	mov	r1, r2
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7ff f85a 	bl	8009af6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d109      	bne.n	800aa5e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	f103 0214 	add.w	r2, r3, #20
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	0c1b      	lsrs	r3, r3, #16
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	4619      	mov	r1, r3
 800aa58:	4610      	mov	r0, r2
 800aa5a:	f7ff f84c 	bl	8009af6 <st_word>
	}
}
 800aa5e:	bf00      	nop
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b086      	sub	sp, #24
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800aa70:	2304      	movs	r3, #4
 800aa72:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800aa7a:	e03c      	b.n	800aaf6 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	69db      	ldr	r3, [r3, #28]
 800aa80:	4619      	mov	r1, r3
 800aa82:	6938      	ldr	r0, [r7, #16]
 800aa84:	f7ff faac 	bl	8009fe0 <move_window>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aa8c:	7dfb      	ldrb	r3, [r7, #23]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d136      	bne.n	800ab00 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800aa9a:	7bfb      	ldrb	r3, [r7, #15]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d102      	bne.n	800aaa6 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800aaa0:	2304      	movs	r3, #4
 800aaa2:	75fb      	strb	r3, [r7, #23]
 800aaa4:	e031      	b.n	800ab0a <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	330b      	adds	r3, #11
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aab2:	73bb      	strb	r3, [r7, #14]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	7bba      	ldrb	r2, [r7, #14]
 800aab8:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
 800aabc:	2be5      	cmp	r3, #229	@ 0xe5
 800aabe:	d011      	beq.n	800aae4 <dir_read+0x7e>
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	2b2e      	cmp	r3, #46	@ 0x2e
 800aac4:	d00e      	beq.n	800aae4 <dir_read+0x7e>
 800aac6:	7bbb      	ldrb	r3, [r7, #14]
 800aac8:	2b0f      	cmp	r3, #15
 800aaca:	d00b      	beq.n	800aae4 <dir_read+0x7e>
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
 800aace:	f023 0320 	bic.w	r3, r3, #32
 800aad2:	2b08      	cmp	r3, #8
 800aad4:	bf0c      	ite	eq
 800aad6:	2301      	moveq	r3, #1
 800aad8:	2300      	movne	r3, #0
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	461a      	mov	r2, r3
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d00f      	beq.n	800ab04 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800aae4:	2100      	movs	r1, #0
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7ff fe72 	bl	800a7d0 <dir_next>
 800aaec:	4603      	mov	r3, r0
 800aaee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aaf0:	7dfb      	ldrb	r3, [r7, #23]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d108      	bne.n	800ab08 <dir_read+0xa2>
	while (dp->sect) {
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	69db      	ldr	r3, [r3, #28]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1be      	bne.n	800aa7c <dir_read+0x16>
 800aafe:	e004      	b.n	800ab0a <dir_read+0xa4>
		if (res != FR_OK) break;
 800ab00:	bf00      	nop
 800ab02:	e002      	b.n	800ab0a <dir_read+0xa4>
				break;
 800ab04:	bf00      	nop
 800ab06:	e000      	b.n	800ab0a <dir_read+0xa4>
		if (res != FR_OK) break;
 800ab08:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ab0a:	7dfb      	ldrb	r3, [r7, #23]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d002      	beq.n	800ab16 <dir_read+0xb0>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	61da      	str	r2, [r3, #28]
	return res;
 800ab16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ab2e:	2100      	movs	r1, #0
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f7ff fdd2 	bl	800a6da <dir_sdi>
 800ab36:	4603      	mov	r3, r0
 800ab38:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <dir_find+0x24>
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
 800ab42:	e03e      	b.n	800abc2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	69db      	ldr	r3, [r3, #28]
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6938      	ldr	r0, [r7, #16]
 800ab4c:	f7ff fa48 	bl	8009fe0 <move_window>
 800ab50:	4603      	mov	r3, r0
 800ab52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ab54:	7dfb      	ldrb	r3, [r7, #23]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d12f      	bne.n	800abba <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ab62:	7bfb      	ldrb	r3, [r7, #15]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d102      	bne.n	800ab6e <dir_find+0x4e>
 800ab68:	2304      	movs	r3, #4
 800ab6a:	75fb      	strb	r3, [r7, #23]
 800ab6c:	e028      	b.n	800abc0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	330b      	adds	r3, #11
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a1b      	ldr	r3, [r3, #32]
 800ab84:	330b      	adds	r3, #11
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	f003 0308 	and.w	r3, r3, #8
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10a      	bne.n	800aba6 <dir_find+0x86>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6a18      	ldr	r0, [r3, #32]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	3324      	adds	r3, #36	@ 0x24
 800ab98:	220b      	movs	r2, #11
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	f7ff f82e 	bl	8009bfc <mem_cmp>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00b      	beq.n	800abbe <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800aba6:	2100      	movs	r1, #0
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff fe11 	bl	800a7d0 <dir_next>
 800abae:	4603      	mov	r3, r0
 800abb0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800abb2:	7dfb      	ldrb	r3, [r7, #23]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d0c5      	beq.n	800ab44 <dir_find+0x24>
 800abb8:	e002      	b.n	800abc0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800abba:	bf00      	nop
 800abbc:	e000      	b.n	800abc0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800abbe:	bf00      	nop

	return res;
 800abc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3718      	adds	r7, #24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b084      	sub	sp, #16
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800abd8:	2101      	movs	r1, #1
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7ff febd 	bl	800a95a <dir_alloc>
 800abe0:	4603      	mov	r3, r0
 800abe2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800abe4:	7bfb      	ldrb	r3, [r7, #15]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d11c      	bne.n	800ac24 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	69db      	ldr	r3, [r3, #28]
 800abee:	4619      	mov	r1, r3
 800abf0:	68b8      	ldr	r0, [r7, #8]
 800abf2:	f7ff f9f5 	bl	8009fe0 <move_window>
 800abf6:	4603      	mov	r3, r0
 800abf8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d111      	bne.n	800ac24 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a1b      	ldr	r3, [r3, #32]
 800ac04:	2220      	movs	r2, #32
 800ac06:	2100      	movs	r1, #0
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fe ffdc 	bl	8009bc6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a18      	ldr	r0, [r3, #32]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	3324      	adds	r3, #36	@ 0x24
 800ac16:	220b      	movs	r2, #11
 800ac18:	4619      	mov	r1, r3
 800ac1a:	f7fe ffb3 	bl	8009b84 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2201      	movs	r2, #1
 800ac22:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ac24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	69db      	ldr	r3, [r3, #28]
 800ac40:	4619      	mov	r1, r3
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f7ff f9cc 	bl	8009fe0 <move_window>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800ac4c:	7afb      	ldrb	r3, [r7, #11]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d106      	bne.n	800ac60 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a1b      	ldr	r3, [r3, #32]
 800ac56:	22e5      	movs	r2, #229	@ 0xe5
 800ac58:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800ac60:	7afb      	ldrb	r3, [r7, #11]
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	60fb      	str	r3, [r7, #12]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3324      	adds	r3, #36	@ 0x24
 800ac80:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ac82:	220b      	movs	r2, #11
 800ac84:	2120      	movs	r1, #32
 800ac86:	68b8      	ldr	r0, [r7, #8]
 800ac88:	f7fe ff9d 	bl	8009bc6 <mem_set>
	si = i = 0; ni = 8;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	613b      	str	r3, [r7, #16]
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	61fb      	str	r3, [r7, #28]
 800ac94:	2308      	movs	r3, #8
 800ac96:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	1c5a      	adds	r2, r3, #1
 800ac9c:	61fa      	str	r2, [r7, #28]
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	4413      	add	r3, r2
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aca6:	7efb      	ldrb	r3, [r7, #27]
 800aca8:	2b20      	cmp	r3, #32
 800acaa:	d94e      	bls.n	800ad4a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800acac:	7efb      	ldrb	r3, [r7, #27]
 800acae:	2b2f      	cmp	r3, #47	@ 0x2f
 800acb0:	d006      	beq.n	800acc0 <create_name+0x54>
 800acb2:	7efb      	ldrb	r3, [r7, #27]
 800acb4:	2b5c      	cmp	r3, #92	@ 0x5c
 800acb6:	d110      	bne.n	800acda <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800acb8:	e002      	b.n	800acc0 <create_name+0x54>
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	3301      	adds	r3, #1
 800acbe:	61fb      	str	r3, [r7, #28]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	4413      	add	r3, r2
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	2b2f      	cmp	r3, #47	@ 0x2f
 800acca:	d0f6      	beq.n	800acba <create_name+0x4e>
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	4413      	add	r3, r2
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	2b5c      	cmp	r3, #92	@ 0x5c
 800acd6:	d0f0      	beq.n	800acba <create_name+0x4e>
			break;
 800acd8:	e038      	b.n	800ad4c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800acda:	7efb      	ldrb	r3, [r7, #27]
 800acdc:	2b2e      	cmp	r3, #46	@ 0x2e
 800acde:	d003      	beq.n	800ace8 <create_name+0x7c>
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d30c      	bcc.n	800ad02 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	2b0b      	cmp	r3, #11
 800acec:	d002      	beq.n	800acf4 <create_name+0x88>
 800acee:	7efb      	ldrb	r3, [r7, #27]
 800acf0:	2b2e      	cmp	r3, #46	@ 0x2e
 800acf2:	d001      	beq.n	800acf8 <create_name+0x8c>
 800acf4:	2306      	movs	r3, #6
 800acf6:	e044      	b.n	800ad82 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800acf8:	2308      	movs	r3, #8
 800acfa:	613b      	str	r3, [r7, #16]
 800acfc:	230b      	movs	r3, #11
 800acfe:	617b      	str	r3, [r7, #20]
			continue;
 800ad00:	e022      	b.n	800ad48 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ad02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	da04      	bge.n	800ad14 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ad0a:	7efb      	ldrb	r3, [r7, #27]
 800ad0c:	3b80      	subs	r3, #128	@ 0x80
 800ad0e:	4a1f      	ldr	r2, [pc, #124]	@ (800ad8c <create_name+0x120>)
 800ad10:	5cd3      	ldrb	r3, [r2, r3]
 800ad12:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ad14:	7efb      	ldrb	r3, [r7, #27]
 800ad16:	4619      	mov	r1, r3
 800ad18:	481d      	ldr	r0, [pc, #116]	@ (800ad90 <create_name+0x124>)
 800ad1a:	f7fe ff96 	bl	8009c4a <chk_chr>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d001      	beq.n	800ad28 <create_name+0xbc>
 800ad24:	2306      	movs	r3, #6
 800ad26:	e02c      	b.n	800ad82 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ad28:	7efb      	ldrb	r3, [r7, #27]
 800ad2a:	2b60      	cmp	r3, #96	@ 0x60
 800ad2c:	d905      	bls.n	800ad3a <create_name+0xce>
 800ad2e:	7efb      	ldrb	r3, [r7, #27]
 800ad30:	2b7a      	cmp	r3, #122	@ 0x7a
 800ad32:	d802      	bhi.n	800ad3a <create_name+0xce>
 800ad34:	7efb      	ldrb	r3, [r7, #27]
 800ad36:	3b20      	subs	r3, #32
 800ad38:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	613a      	str	r2, [r7, #16]
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	4413      	add	r3, r2
 800ad44:	7efa      	ldrb	r2, [r7, #27]
 800ad46:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ad48:	e7a6      	b.n	800ac98 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ad4a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	441a      	add	r2, r3
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <create_name+0xf4>
 800ad5c:	2306      	movs	r3, #6
 800ad5e:	e010      	b.n	800ad82 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	2be5      	cmp	r3, #229	@ 0xe5
 800ad66:	d102      	bne.n	800ad6e <create_name+0x102>
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	2205      	movs	r2, #5
 800ad6c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ad6e:	7efb      	ldrb	r3, [r7, #27]
 800ad70:	2b20      	cmp	r3, #32
 800ad72:	d801      	bhi.n	800ad78 <create_name+0x10c>
 800ad74:	2204      	movs	r2, #4
 800ad76:	e000      	b.n	800ad7a <create_name+0x10e>
 800ad78:	2200      	movs	r2, #0
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	330b      	adds	r3, #11
 800ad7e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ad80:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3720      	adds	r7, #32
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	0800d9cc 	.word	0x0800d9cc
 800ad90:	0800cbf4 	.word	0x0800cbf4

0800ad94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b086      	sub	sp, #24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ada8:	e002      	b.n	800adb0 <follow_path+0x1c>
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	3301      	adds	r3, #1
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	2b2f      	cmp	r3, #47	@ 0x2f
 800adb6:	d0f8      	beq.n	800adaa <follow_path+0x16>
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2b5c      	cmp	r3, #92	@ 0x5c
 800adbe:	d0f4      	beq.n	800adaa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	2200      	movs	r2, #0
 800adc4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	2b1f      	cmp	r3, #31
 800adcc:	d80a      	bhi.n	800ade4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2280      	movs	r2, #128	@ 0x80
 800add2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800add6:	2100      	movs	r1, #0
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f7ff fc7e 	bl	800a6da <dir_sdi>
 800adde:	4603      	mov	r3, r0
 800ade0:	75fb      	strb	r3, [r7, #23]
 800ade2:	e043      	b.n	800ae6c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ade4:	463b      	mov	r3, r7
 800ade6:	4619      	mov	r1, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f7ff ff3f 	bl	800ac6c <create_name>
 800adee:	4603      	mov	r3, r0
 800adf0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d134      	bne.n	800ae62 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7ff fe91 	bl	800ab20 <dir_find>
 800adfe:	4603      	mov	r3, r0
 800ae00:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ae08:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00a      	beq.n	800ae26 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ae10:	7dfb      	ldrb	r3, [r7, #23]
 800ae12:	2b04      	cmp	r3, #4
 800ae14:	d127      	bne.n	800ae66 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ae16:	7afb      	ldrb	r3, [r7, #11]
 800ae18:	f003 0304 	and.w	r3, r3, #4
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d122      	bne.n	800ae66 <follow_path+0xd2>
 800ae20:	2305      	movs	r3, #5
 800ae22:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ae24:	e01f      	b.n	800ae66 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae26:	7afb      	ldrb	r3, [r7, #11]
 800ae28:	f003 0304 	and.w	r3, r3, #4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d11c      	bne.n	800ae6a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	799b      	ldrb	r3, [r3, #6]
 800ae34:	f003 0310 	and.w	r3, r3, #16
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d102      	bne.n	800ae42 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ae3c:	2305      	movs	r3, #5
 800ae3e:	75fb      	strb	r3, [r7, #23]
 800ae40:	e014      	b.n	800ae6c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae50:	4413      	add	r3, r2
 800ae52:	4619      	mov	r1, r3
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7ff fdc7 	bl	800a9e8 <ld_clust>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae60:	e7c0      	b.n	800ade4 <follow_path+0x50>
			if (res != FR_OK) break;
 800ae62:	bf00      	nop
 800ae64:	e002      	b.n	800ae6c <follow_path+0xd8>
				break;
 800ae66:	bf00      	nop
 800ae68:	e000      	b.n	800ae6c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae6a:	bf00      	nop
			}
		}
	}

	return res;
 800ae6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3718      	adds	r7, #24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ae76:	b480      	push	{r7}
 800ae78:	b087      	sub	sp, #28
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ae7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae82:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d031      	beq.n	800aef0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	617b      	str	r3, [r7, #20]
 800ae92:	e002      	b.n	800ae9a <get_ldnumber+0x24>
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	3301      	adds	r3, #1
 800ae98:	617b      	str	r3, [r7, #20]
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	2b20      	cmp	r3, #32
 800aea0:	d903      	bls.n	800aeaa <get_ldnumber+0x34>
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	2b3a      	cmp	r3, #58	@ 0x3a
 800aea8:	d1f4      	bne.n	800ae94 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	2b3a      	cmp	r3, #58	@ 0x3a
 800aeb0:	d11c      	bne.n	800aeec <get_ldnumber+0x76>
			tp = *path;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	1c5a      	adds	r2, r3, #1
 800aebc:	60fa      	str	r2, [r7, #12]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	3b30      	subs	r3, #48	@ 0x30
 800aec2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	2b09      	cmp	r3, #9
 800aec8:	d80e      	bhi.n	800aee8 <get_ldnumber+0x72>
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d10a      	bne.n	800aee8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d107      	bne.n	800aee8 <get_ldnumber+0x72>
					vol = (int)i;
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	3301      	adds	r3, #1
 800aee0:	617b      	str	r3, [r7, #20]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	e002      	b.n	800aef2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800aeec:	2300      	movs	r3, #0
 800aeee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800aef0:	693b      	ldr	r3, [r7, #16]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	371c      	adds	r7, #28
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
	...

0800af00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	70da      	strb	r2, [r3, #3]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f04f 32ff 	mov.w	r2, #4294967295
 800af16:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff f860 	bl	8009fe0 <move_window>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <check_fs+0x2a>
 800af26:	2304      	movs	r3, #4
 800af28:	e038      	b.n	800af9c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	3330      	adds	r3, #48	@ 0x30
 800af2e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800af32:	4618      	mov	r0, r3
 800af34:	f7fe fda4 	bl	8009a80 <ld_word>
 800af38:	4603      	mov	r3, r0
 800af3a:	461a      	mov	r2, r3
 800af3c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800af40:	429a      	cmp	r2, r3
 800af42:	d001      	beq.n	800af48 <check_fs+0x48>
 800af44:	2303      	movs	r3, #3
 800af46:	e029      	b.n	800af9c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800af4e:	2be9      	cmp	r3, #233	@ 0xe9
 800af50:	d009      	beq.n	800af66 <check_fs+0x66>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800af58:	2beb      	cmp	r3, #235	@ 0xeb
 800af5a:	d11e      	bne.n	800af9a <check_fs+0x9a>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800af62:	2b90      	cmp	r3, #144	@ 0x90
 800af64:	d119      	bne.n	800af9a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	3330      	adds	r3, #48	@ 0x30
 800af6a:	3336      	adds	r3, #54	@ 0x36
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fe fd9f 	bl	8009ab0 <ld_dword>
 800af72:	4603      	mov	r3, r0
 800af74:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800af78:	4a0a      	ldr	r2, [pc, #40]	@ (800afa4 <check_fs+0xa4>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d101      	bne.n	800af82 <check_fs+0x82>
 800af7e:	2300      	movs	r3, #0
 800af80:	e00c      	b.n	800af9c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	3330      	adds	r3, #48	@ 0x30
 800af86:	3352      	adds	r3, #82	@ 0x52
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fe fd91 	bl	8009ab0 <ld_dword>
 800af8e:	4603      	mov	r3, r0
 800af90:	4a05      	ldr	r2, [pc, #20]	@ (800afa8 <check_fs+0xa8>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d101      	bne.n	800af9a <check_fs+0x9a>
 800af96:	2300      	movs	r3, #0
 800af98:	e000      	b.n	800af9c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800af9a:	2302      	movs	r3, #2
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	00544146 	.word	0x00544146
 800afa8:	33544146 	.word	0x33544146

0800afac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b096      	sub	sp, #88	@ 0x58
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	4613      	mov	r3, r2
 800afb8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2200      	movs	r2, #0
 800afbe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f7ff ff58 	bl	800ae76 <get_ldnumber>
 800afc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800afc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afca:	2b00      	cmp	r3, #0
 800afcc:	da01      	bge.n	800afd2 <find_volume+0x26>
 800afce:	230b      	movs	r3, #11
 800afd0:	e22d      	b.n	800b42e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800afd2:	4aa1      	ldr	r2, [pc, #644]	@ (800b258 <find_volume+0x2ac>)
 800afd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afda:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800afdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <find_volume+0x3a>
 800afe2:	230c      	movs	r3, #12
 800afe4:	e223      	b.n	800b42e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800afea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800afec:	79fb      	ldrb	r3, [r7, #7]
 800afee:	f023 0301 	bic.w	r3, r3, #1
 800aff2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800aff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d01a      	beq.n	800b032 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800affc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affe:	785b      	ldrb	r3, [r3, #1]
 800b000:	4618      	mov	r0, r3
 800b002:	f7fe fc9d 	bl	8009940 <disk_status>
 800b006:	4603      	mov	r3, r0
 800b008:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b00c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10c      	bne.n	800b032 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b018:	79fb      	ldrb	r3, [r7, #7]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d007      	beq.n	800b02e <find_volume+0x82>
 800b01e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b022:	f003 0304 	and.w	r3, r3, #4
 800b026:	2b00      	cmp	r3, #0
 800b028:	d001      	beq.n	800b02e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b02a:	230a      	movs	r3, #10
 800b02c:	e1ff      	b.n	800b42e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b02e:	2300      	movs	r3, #0
 800b030:	e1fd      	b.n	800b42e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b034:	2200      	movs	r2, #0
 800b036:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b042:	785b      	ldrb	r3, [r3, #1]
 800b044:	4618      	mov	r0, r3
 800b046:	f7fe fc95 	bl	8009974 <disk_initialize>
 800b04a:	4603      	mov	r3, r0
 800b04c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b050:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b054:	f003 0301 	and.w	r3, r3, #1
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b05c:	2303      	movs	r3, #3
 800b05e:	e1e6      	b.n	800b42e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b060:	79fb      	ldrb	r3, [r7, #7]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d007      	beq.n	800b076 <find_volume+0xca>
 800b066:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b06a:	f003 0304 	and.w	r3, r3, #4
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d001      	beq.n	800b076 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b072:	230a      	movs	r3, #10
 800b074:	e1db      	b.n	800b42e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b076:	2300      	movs	r3, #0
 800b078:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b07a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b07c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b07e:	f7ff ff3f 	bl	800af00 <check_fs>
 800b082:	4603      	mov	r3, r0
 800b084:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b088:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	d149      	bne.n	800b124 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b090:	2300      	movs	r3, #0
 800b092:	643b      	str	r3, [r7, #64]	@ 0x40
 800b094:	e01e      	b.n	800b0d4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b098:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b09c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b09e:	011b      	lsls	r3, r3, #4
 800b0a0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b0a4:	4413      	add	r3, r2
 800b0a6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d006      	beq.n	800b0c0 <find_volume+0x114>
 800b0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fe fcfa 	bl	8009ab0 <ld_dword>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	e000      	b.n	800b0c2 <find_volume+0x116>
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	3358      	adds	r3, #88	@ 0x58
 800b0c8:	443b      	add	r3, r7
 800b0ca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b0ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0d6:	2b03      	cmp	r3, #3
 800b0d8:	d9dd      	bls.n	800b096 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b0da:	2300      	movs	r3, #0
 800b0dc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b0de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <find_volume+0x13e>
 800b0e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b0ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	3358      	adds	r3, #88	@ 0x58
 800b0f0:	443b      	add	r3, r7
 800b0f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b0f6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b0f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d005      	beq.n	800b10a <find_volume+0x15e>
 800b0fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b100:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b102:	f7ff fefd 	bl	800af00 <check_fs>
 800b106:	4603      	mov	r3, r0
 800b108:	e000      	b.n	800b10c <find_volume+0x160>
 800b10a:	2303      	movs	r3, #3
 800b10c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b110:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b114:	2b01      	cmp	r3, #1
 800b116:	d905      	bls.n	800b124 <find_volume+0x178>
 800b118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b11a:	3301      	adds	r3, #1
 800b11c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b11e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b120:	2b03      	cmp	r3, #3
 800b122:	d9e2      	bls.n	800b0ea <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b124:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b128:	2b04      	cmp	r3, #4
 800b12a:	d101      	bne.n	800b130 <find_volume+0x184>
 800b12c:	2301      	movs	r3, #1
 800b12e:	e17e      	b.n	800b42e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b130:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b134:	2b01      	cmp	r3, #1
 800b136:	d901      	bls.n	800b13c <find_volume+0x190>
 800b138:	230d      	movs	r3, #13
 800b13a:	e178      	b.n	800b42e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13e:	3330      	adds	r3, #48	@ 0x30
 800b140:	330b      	adds	r3, #11
 800b142:	4618      	mov	r0, r3
 800b144:	f7fe fc9c 	bl	8009a80 <ld_word>
 800b148:	4603      	mov	r3, r0
 800b14a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b14e:	d001      	beq.n	800b154 <find_volume+0x1a8>
 800b150:	230d      	movs	r3, #13
 800b152:	e16c      	b.n	800b42e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b156:	3330      	adds	r3, #48	@ 0x30
 800b158:	3316      	adds	r3, #22
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fe fc90 	bl	8009a80 <ld_word>
 800b160:	4603      	mov	r3, r0
 800b162:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b166:	2b00      	cmp	r3, #0
 800b168:	d106      	bne.n	800b178 <find_volume+0x1cc>
 800b16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16c:	3330      	adds	r3, #48	@ 0x30
 800b16e:	3324      	adds	r3, #36	@ 0x24
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe fc9d 	bl	8009ab0 <ld_dword>
 800b176:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b17c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b180:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b186:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18a:	789b      	ldrb	r3, [r3, #2]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d005      	beq.n	800b19c <find_volume+0x1f0>
 800b190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b192:	789b      	ldrb	r3, [r3, #2]
 800b194:	2b02      	cmp	r3, #2
 800b196:	d001      	beq.n	800b19c <find_volume+0x1f0>
 800b198:	230d      	movs	r3, #13
 800b19a:	e148      	b.n	800b42e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19e:	789b      	ldrb	r3, [r3, #2]
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1a4:	fb02 f303 	mul.w	r3, r2, r3
 800b1a8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b8:	895b      	ldrh	r3, [r3, #10]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d008      	beq.n	800b1d0 <find_volume+0x224>
 800b1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c0:	895b      	ldrh	r3, [r3, #10]
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1c6:	895b      	ldrh	r3, [r3, #10]
 800b1c8:	3b01      	subs	r3, #1
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d001      	beq.n	800b1d4 <find_volume+0x228>
 800b1d0:	230d      	movs	r3, #13
 800b1d2:	e12c      	b.n	800b42e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d6:	3330      	adds	r3, #48	@ 0x30
 800b1d8:	3311      	adds	r3, #17
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fe fc50 	bl	8009a80 <ld_word>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ea:	891b      	ldrh	r3, [r3, #8]
 800b1ec:	f003 030f 	and.w	r3, r3, #15
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <find_volume+0x24e>
 800b1f6:	230d      	movs	r3, #13
 800b1f8:	e119      	b.n	800b42e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fc:	3330      	adds	r3, #48	@ 0x30
 800b1fe:	3313      	adds	r3, #19
 800b200:	4618      	mov	r0, r3
 800b202:	f7fe fc3d 	bl	8009a80 <ld_word>
 800b206:	4603      	mov	r3, r0
 800b208:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b20a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d106      	bne.n	800b21e <find_volume+0x272>
 800b210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b212:	3330      	adds	r3, #48	@ 0x30
 800b214:	3320      	adds	r3, #32
 800b216:	4618      	mov	r0, r3
 800b218:	f7fe fc4a 	bl	8009ab0 <ld_dword>
 800b21c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b220:	3330      	adds	r3, #48	@ 0x30
 800b222:	330e      	adds	r3, #14
 800b224:	4618      	mov	r0, r3
 800b226:	f7fe fc2b 	bl	8009a80 <ld_word>
 800b22a:	4603      	mov	r3, r0
 800b22c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b22e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b230:	2b00      	cmp	r3, #0
 800b232:	d101      	bne.n	800b238 <find_volume+0x28c>
 800b234:	230d      	movs	r3, #13
 800b236:	e0fa      	b.n	800b42e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b238:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b23a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b23c:	4413      	add	r3, r2
 800b23e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b240:	8912      	ldrh	r2, [r2, #8]
 800b242:	0912      	lsrs	r2, r2, #4
 800b244:	b292      	uxth	r2, r2
 800b246:	4413      	add	r3, r2
 800b248:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b24a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24e:	429a      	cmp	r2, r3
 800b250:	d204      	bcs.n	800b25c <find_volume+0x2b0>
 800b252:	230d      	movs	r3, #13
 800b254:	e0eb      	b.n	800b42e <find_volume+0x482>
 800b256:	bf00      	nop
 800b258:	200005a0 	.word	0x200005a0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b25c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b264:	8952      	ldrh	r2, [r2, #10]
 800b266:	fbb3 f3f2 	udiv	r3, r3, r2
 800b26a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <find_volume+0x2ca>
 800b272:	230d      	movs	r3, #13
 800b274:	e0db      	b.n	800b42e <find_volume+0x482>
		fmt = FS_FAT32;
 800b276:	2303      	movs	r3, #3
 800b278:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b282:	4293      	cmp	r3, r2
 800b284:	d802      	bhi.n	800b28c <find_volume+0x2e0>
 800b286:	2302      	movs	r3, #2
 800b288:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b292:	4293      	cmp	r3, r2
 800b294:	d802      	bhi.n	800b29c <find_volume+0x2f0>
 800b296:	2301      	movs	r3, #1
 800b298:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29e:	1c9a      	adds	r2, r3, #2
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b2a8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b2aa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b2ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2ae:	441a      	add	r2, r3
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b2b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b8:	441a      	add	r2, r3
 800b2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2bc:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800b2be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b2c2:	2b03      	cmp	r3, #3
 800b2c4:	d11e      	bne.n	800b304 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c8:	3330      	adds	r3, #48	@ 0x30
 800b2ca:	332a      	adds	r3, #42	@ 0x2a
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7fe fbd7 	bl	8009a80 <ld_word>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <find_volume+0x330>
 800b2d8:	230d      	movs	r3, #13
 800b2da:	e0a8      	b.n	800b42e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2de:	891b      	ldrh	r3, [r3, #8]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d001      	beq.n	800b2e8 <find_volume+0x33c>
 800b2e4:	230d      	movs	r3, #13
 800b2e6:	e0a2      	b.n	800b42e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2ea:	3330      	adds	r3, #48	@ 0x30
 800b2ec:	332c      	adds	r3, #44	@ 0x2c
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe fbde 	bl	8009ab0 <ld_dword>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	647b      	str	r3, [r7, #68]	@ 0x44
 800b302:	e01f      	b.n	800b344 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b306:	891b      	ldrh	r3, [r3, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <find_volume+0x364>
 800b30c:	230d      	movs	r3, #13
 800b30e:	e08e      	b.n	800b42e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b312:	6a1a      	ldr	r2, [r3, #32]
 800b314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b316:	441a      	add	r2, r3
 800b318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b31c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b320:	2b02      	cmp	r3, #2
 800b322:	d103      	bne.n	800b32c <find_volume+0x380>
 800b324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b326:	695b      	ldr	r3, [r3, #20]
 800b328:	005b      	lsls	r3, r3, #1
 800b32a:	e00a      	b.n	800b342 <find_volume+0x396>
 800b32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32e:	695a      	ldr	r2, [r3, #20]
 800b330:	4613      	mov	r3, r2
 800b332:	005b      	lsls	r3, r3, #1
 800b334:	4413      	add	r3, r2
 800b336:	085a      	lsrs	r2, r3, #1
 800b338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b33a:	695b      	ldr	r3, [r3, #20]
 800b33c:	f003 0301 	and.w	r3, r3, #1
 800b340:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b342:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b346:	699a      	ldr	r2, [r3, #24]
 800b348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b34a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b34e:	0a5b      	lsrs	r3, r3, #9
 800b350:	429a      	cmp	r2, r3
 800b352:	d201      	bcs.n	800b358 <find_volume+0x3ac>
 800b354:	230d      	movs	r3, #13
 800b356:	e06a      	b.n	800b42e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b35a:	f04f 32ff 	mov.w	r2, #4294967295
 800b35e:	611a      	str	r2, [r3, #16]
 800b360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b362:	691a      	ldr	r2, [r3, #16]
 800b364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b366:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36a:	2280      	movs	r2, #128	@ 0x80
 800b36c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b36e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b372:	2b03      	cmp	r3, #3
 800b374:	d149      	bne.n	800b40a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b378:	3330      	adds	r3, #48	@ 0x30
 800b37a:	3330      	adds	r3, #48	@ 0x30
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7fe fb7f 	bl	8009a80 <ld_word>
 800b382:	4603      	mov	r3, r0
 800b384:	2b01      	cmp	r3, #1
 800b386:	d140      	bne.n	800b40a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b38a:	3301      	adds	r3, #1
 800b38c:	4619      	mov	r1, r3
 800b38e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b390:	f7fe fe26 	bl	8009fe0 <move_window>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d137      	bne.n	800b40a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39c:	2200      	movs	r2, #0
 800b39e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a2:	3330      	adds	r3, #48	@ 0x30
 800b3a4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7fe fb69 	bl	8009a80 <ld_word>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d127      	bne.n	800b40a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3bc:	3330      	adds	r3, #48	@ 0x30
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fe fb76 	bl	8009ab0 <ld_dword>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	4a1c      	ldr	r2, [pc, #112]	@ (800b438 <find_volume+0x48c>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d11e      	bne.n	800b40a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ce:	3330      	adds	r3, #48	@ 0x30
 800b3d0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe fb6b 	bl	8009ab0 <ld_dword>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	4a17      	ldr	r2, [pc, #92]	@ (800b43c <find_volume+0x490>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d113      	bne.n	800b40a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3e4:	3330      	adds	r3, #48	@ 0x30
 800b3e6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fe fb60 	bl	8009ab0 <ld_dword>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f8:	3330      	adds	r3, #48	@ 0x30
 800b3fa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7fe fb56 	bl	8009ab0 <ld_dword>
 800b404:	4602      	mov	r2, r0
 800b406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b408:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b40c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b410:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b412:	4b0b      	ldr	r3, [pc, #44]	@ (800b440 <find_volume+0x494>)
 800b414:	881b      	ldrh	r3, [r3, #0]
 800b416:	3301      	adds	r3, #1
 800b418:	b29a      	uxth	r2, r3
 800b41a:	4b09      	ldr	r3, [pc, #36]	@ (800b440 <find_volume+0x494>)
 800b41c:	801a      	strh	r2, [r3, #0]
 800b41e:	4b08      	ldr	r3, [pc, #32]	@ (800b440 <find_volume+0x494>)
 800b420:	881a      	ldrh	r2, [r3, #0]
 800b422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b424:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b426:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b428:	f7fe fd72 	bl	8009f10 <clear_lock>
#endif
	return FR_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3758      	adds	r7, #88	@ 0x58
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	41615252 	.word	0x41615252
 800b43c:	61417272 	.word	0x61417272
 800b440:	200005a4 	.word	0x200005a4

0800b444 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b44e:	2309      	movs	r3, #9
 800b450:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d01c      	beq.n	800b492 <validate+0x4e>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d018      	beq.n	800b492 <validate+0x4e>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d013      	beq.n	800b492 <validate+0x4e>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	889a      	ldrh	r2, [r3, #4]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	88db      	ldrh	r3, [r3, #6]
 800b474:	429a      	cmp	r2, r3
 800b476:	d10c      	bne.n	800b492 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	785b      	ldrb	r3, [r3, #1]
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe fa5e 	bl	8009940 <disk_status>
 800b484:	4603      	mov	r3, r0
 800b486:	f003 0301 	and.w	r3, r3, #1
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <validate+0x4e>
			res = FR_OK;
 800b48e:	2300      	movs	r3, #0
 800b490:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b492:	7bfb      	ldrb	r3, [r7, #15]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d102      	bne.n	800b49e <validate+0x5a>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	e000      	b.n	800b4a0 <validate+0x5c>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	6013      	str	r3, [r2, #0]
	return res;
 800b4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
	...

0800b4b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b088      	sub	sp, #32
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b4c2:	f107 0310 	add.w	r3, r7, #16
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7ff fcd5 	bl	800ae76 <get_ldnumber>
 800b4cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	da01      	bge.n	800b4d8 <f_mount+0x28>
 800b4d4:	230b      	movs	r3, #11
 800b4d6:	e02b      	b.n	800b530 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b4d8:	4a17      	ldr	r2, [pc, #92]	@ (800b538 <f_mount+0x88>)
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d005      	beq.n	800b4f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b4e8:	69b8      	ldr	r0, [r7, #24]
 800b4ea:	f7fe fd11 	bl	8009f10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d002      	beq.n	800b500 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	490d      	ldr	r1, [pc, #52]	@ (800b538 <f_mount+0x88>)
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <f_mount+0x66>
 800b510:	79fb      	ldrb	r3, [r7, #7]
 800b512:	2b01      	cmp	r3, #1
 800b514:	d001      	beq.n	800b51a <f_mount+0x6a>
 800b516:	2300      	movs	r3, #0
 800b518:	e00a      	b.n	800b530 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b51a:	f107 010c 	add.w	r1, r7, #12
 800b51e:	f107 0308 	add.w	r3, r7, #8
 800b522:	2200      	movs	r2, #0
 800b524:	4618      	mov	r0, r3
 800b526:	f7ff fd41 	bl	800afac <find_volume>
 800b52a:	4603      	mov	r3, r0
 800b52c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b52e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b530:	4618      	mov	r0, r3
 800b532:	3720      	adds	r7, #32
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	200005a0 	.word	0x200005a0

0800b53c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b098      	sub	sp, #96	@ 0x60
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	4613      	mov	r3, r2
 800b548:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d101      	bne.n	800b554 <f_open+0x18>
 800b550:	2309      	movs	r3, #9
 800b552:	e1a9      	b.n	800b8a8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b554:	79fb      	ldrb	r3, [r7, #7]
 800b556:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b55a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b55c:	79fa      	ldrb	r2, [r7, #7]
 800b55e:	f107 0110 	add.w	r1, r7, #16
 800b562:	f107 0308 	add.w	r3, r7, #8
 800b566:	4618      	mov	r0, r3
 800b568:	f7ff fd20 	bl	800afac <find_volume>
 800b56c:	4603      	mov	r3, r0
 800b56e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b572:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b576:	2b00      	cmp	r3, #0
 800b578:	f040 818d 	bne.w	800b896 <f_open+0x35a>
		dj.obj.fs = fs;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	f107 0314 	add.w	r3, r7, #20
 800b586:	4611      	mov	r1, r2
 800b588:	4618      	mov	r0, r3
 800b58a:	f7ff fc03 	bl	800ad94 <follow_path>
 800b58e:	4603      	mov	r3, r0
 800b590:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b594:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d118      	bne.n	800b5ce <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b59c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b5a0:	b25b      	sxtb	r3, r3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	da03      	bge.n	800b5ae <f_open+0x72>
				res = FR_INVALID_NAME;
 800b5a6:	2306      	movs	r3, #6
 800b5a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b5ac:	e00f      	b.n	800b5ce <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b5ae:	79fb      	ldrb	r3, [r7, #7]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	bf8c      	ite	hi
 800b5b4:	2301      	movhi	r3, #1
 800b5b6:	2300      	movls	r3, #0
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	f107 0314 	add.w	r3, r7, #20
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fe fb5c 	bl	8009c80 <chk_lock>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b5ce:	79fb      	ldrb	r3, [r7, #7]
 800b5d0:	f003 031c 	and.w	r3, r3, #28
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d07f      	beq.n	800b6d8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b5d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d017      	beq.n	800b610 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b5e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b5e4:	2b04      	cmp	r3, #4
 800b5e6:	d10e      	bne.n	800b606 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b5e8:	f7fe fba6 	bl	8009d38 <enq_lock>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d006      	beq.n	800b600 <f_open+0xc4>
 800b5f2:	f107 0314 	add.w	r3, r7, #20
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7ff fae7 	bl	800abca <dir_register>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	e000      	b.n	800b602 <f_open+0xc6>
 800b600:	2312      	movs	r3, #18
 800b602:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b606:	79fb      	ldrb	r3, [r7, #7]
 800b608:	f043 0308 	orr.w	r3, r3, #8
 800b60c:	71fb      	strb	r3, [r7, #7]
 800b60e:	e010      	b.n	800b632 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b610:	7ebb      	ldrb	r3, [r7, #26]
 800b612:	f003 0311 	and.w	r3, r3, #17
 800b616:	2b00      	cmp	r3, #0
 800b618:	d003      	beq.n	800b622 <f_open+0xe6>
					res = FR_DENIED;
 800b61a:	2307      	movs	r3, #7
 800b61c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b620:	e007      	b.n	800b632 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b622:	79fb      	ldrb	r3, [r7, #7]
 800b624:	f003 0304 	and.w	r3, r3, #4
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d002      	beq.n	800b632 <f_open+0xf6>
 800b62c:	2308      	movs	r3, #8
 800b62e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b632:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b636:	2b00      	cmp	r3, #0
 800b638:	d168      	bne.n	800b70c <f_open+0x1d0>
 800b63a:	79fb      	ldrb	r3, [r7, #7]
 800b63c:	f003 0308 	and.w	r3, r3, #8
 800b640:	2b00      	cmp	r3, #0
 800b642:	d063      	beq.n	800b70c <f_open+0x1d0>
				dw = GET_FATTIME();
 800b644:	f7fe f810 	bl	8009668 <get_fattime>
 800b648:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b64c:	330e      	adds	r3, #14
 800b64e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b650:	4618      	mov	r0, r3
 800b652:	f7fe fa6b 	bl	8009b2c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b658:	3316      	adds	r3, #22
 800b65a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe fa65 	bl	8009b2c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b664:	330b      	adds	r3, #11
 800b666:	2220      	movs	r2, #32
 800b668:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b66e:	4611      	mov	r1, r2
 800b670:	4618      	mov	r0, r3
 800b672:	f7ff f9b9 	bl	800a9e8 <ld_clust>
 800b676:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b67c:	2200      	movs	r2, #0
 800b67e:	4618      	mov	r0, r3
 800b680:	f7ff f9d1 	bl	800aa26 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b686:	331c      	adds	r3, #28
 800b688:	2100      	movs	r1, #0
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7fe fa4e 	bl	8009b2c <st_dword>
					fs->wflag = 1;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	2201      	movs	r2, #1
 800b694:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d037      	beq.n	800b70c <f_open+0x1d0>
						dw = fs->winsect;
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6a0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b6a2:	f107 0314 	add.w	r3, r7, #20
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fe fee4 	bl	800a478 <remove_chain>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b6b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d126      	bne.n	800b70c <f_open+0x1d0>
							res = move_window(fs, dw);
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7fe fc8c 	bl	8009fe0 <move_window>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b6d2:	3a01      	subs	r2, #1
 800b6d4:	60da      	str	r2, [r3, #12]
 800b6d6:	e019      	b.n	800b70c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b6d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d115      	bne.n	800b70c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b6e0:	7ebb      	ldrb	r3, [r7, #26]
 800b6e2:	f003 0310 	and.w	r3, r3, #16
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d003      	beq.n	800b6f2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800b6ea:	2304      	movs	r3, #4
 800b6ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b6f0:	e00c      	b.n	800b70c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b6f2:	79fb      	ldrb	r3, [r7, #7]
 800b6f4:	f003 0302 	and.w	r3, r3, #2
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d007      	beq.n	800b70c <f_open+0x1d0>
 800b6fc:	7ebb      	ldrb	r3, [r7, #26]
 800b6fe:	f003 0301 	and.w	r3, r3, #1
 800b702:	2b00      	cmp	r3, #0
 800b704:	d002      	beq.n	800b70c <f_open+0x1d0>
						res = FR_DENIED;
 800b706:	2307      	movs	r3, #7
 800b708:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b70c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b710:	2b00      	cmp	r3, #0
 800b712:	d126      	bne.n	800b762 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b714:	79fb      	ldrb	r3, [r7, #7]
 800b716:	f003 0308 	and.w	r3, r3, #8
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d003      	beq.n	800b726 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b71e:	79fb      	ldrb	r3, [r7, #7]
 800b720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b724:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b72e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b734:	79fb      	ldrb	r3, [r7, #7]
 800b736:	2b01      	cmp	r3, #1
 800b738:	bf8c      	ite	hi
 800b73a:	2301      	movhi	r3, #1
 800b73c:	2300      	movls	r3, #0
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	461a      	mov	r2, r3
 800b742:	f107 0314 	add.w	r3, r7, #20
 800b746:	4611      	mov	r1, r2
 800b748:	4618      	mov	r0, r3
 800b74a:	f7fe fb17 	bl	8009d7c <inc_lock>
 800b74e:	4602      	mov	r2, r0
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	691b      	ldr	r3, [r3, #16]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d102      	bne.n	800b762 <f_open+0x226>
 800b75c:	2302      	movs	r3, #2
 800b75e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b762:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b766:	2b00      	cmp	r3, #0
 800b768:	f040 8095 	bne.w	800b896 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b770:	4611      	mov	r1, r2
 800b772:	4618      	mov	r0, r3
 800b774:	f7ff f938 	bl	800a9e8 <ld_clust>
 800b778:	4602      	mov	r2, r0
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b77e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b780:	331c      	adds	r3, #28
 800b782:	4618      	mov	r0, r3
 800b784:	f7fe f994 	bl	8009ab0 <ld_dword>
 800b788:	4602      	mov	r2, r0
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	88da      	ldrh	r2, [r3, #6]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	79fa      	ldrb	r2, [r7, #7]
 800b7a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	3330      	adds	r3, #48	@ 0x30
 800b7be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7fe f9fe 	bl	8009bc6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b7ca:	79fb      	ldrb	r3, [r7, #7]
 800b7cc:	f003 0320 	and.w	r3, r3, #32
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d060      	beq.n	800b896 <f_open+0x35a>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	68db      	ldr	r3, [r3, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d05c      	beq.n	800b896 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	68da      	ldr	r2, [r3, #12]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	895b      	ldrh	r3, [r3, #10]
 800b7e8:	025b      	lsls	r3, r3, #9
 800b7ea:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b7f8:	e016      	b.n	800b828 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fe fca9 	bl	800a156 <get_fat>
 800b804:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b806:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d802      	bhi.n	800b812 <f_open+0x2d6>
 800b80c:	2302      	movs	r3, #2
 800b80e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b812:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b818:	d102      	bne.n	800b820 <f_open+0x2e4>
 800b81a:	2301      	movs	r3, #1
 800b81c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b820:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	657b      	str	r3, [r7, #84]	@ 0x54
 800b828:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d103      	bne.n	800b838 <f_open+0x2fc>
 800b830:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b834:	429a      	cmp	r2, r3
 800b836:	d8e0      	bhi.n	800b7fa <f_open+0x2be>
				}
				fp->clust = clst;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b83c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b83e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b842:	2b00      	cmp	r3, #0
 800b844:	d127      	bne.n	800b896 <f_open+0x35a>
 800b846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d022      	beq.n	800b896 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b854:	4618      	mov	r0, r3
 800b856:	f7fe fc5f 	bl	800a118 <clust2sect>
 800b85a:	6478      	str	r0, [r7, #68]	@ 0x44
 800b85c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d103      	bne.n	800b86a <f_open+0x32e>
						res = FR_INT_ERR;
 800b862:	2302      	movs	r3, #2
 800b864:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b868:	e015      	b.n	800b896 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b86a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b86c:	0a5a      	lsrs	r2, r3, #9
 800b86e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b870:	441a      	add	r2, r3
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	7858      	ldrb	r0, [r3, #1]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	6a1a      	ldr	r2, [r3, #32]
 800b884:	2301      	movs	r3, #1
 800b886:	f7fe f89d 	bl	80099c4 <disk_read>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <f_open+0x35a>
 800b890:	2301      	movs	r3, #1
 800b892:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b896:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d002      	beq.n	800b8a4 <f_open+0x368>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b8a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3760      	adds	r7, #96	@ 0x60
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b08e      	sub	sp, #56	@ 0x38
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
 800b8bc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f107 0214 	add.w	r2, r7, #20
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7ff fdb7 	bl	800b444 <validate>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b8dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d107      	bne.n	800b8f4 <f_read+0x44>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	7d5b      	ldrb	r3, [r3, #21]
 800b8e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b8ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <f_read+0x4a>
 800b8f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b8f8:	e115      	b.n	800bb26 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	7d1b      	ldrb	r3, [r3, #20]
 800b8fe:	f003 0301 	and.w	r3, r3, #1
 800b902:	2b00      	cmp	r3, #0
 800b904:	d101      	bne.n	800b90a <f_read+0x5a>
 800b906:	2307      	movs	r3, #7
 800b908:	e10d      	b.n	800bb26 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	68da      	ldr	r2, [r3, #12]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	699b      	ldr	r3, [r3, #24]
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	f240 80fe 	bls.w	800bb1c <f_read+0x26c>
 800b920:	6a3b      	ldr	r3, [r7, #32]
 800b922:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b924:	e0fa      	b.n	800bb1c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	699b      	ldr	r3, [r3, #24]
 800b92a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f040 80c6 	bne.w	800bac0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	699b      	ldr	r3, [r3, #24]
 800b938:	0a5b      	lsrs	r3, r3, #9
 800b93a:	697a      	ldr	r2, [r7, #20]
 800b93c:	8952      	ldrh	r2, [r2, #10]
 800b93e:	3a01      	subs	r2, #1
 800b940:	4013      	ands	r3, r2
 800b942:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d12f      	bne.n	800b9aa <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d103      	bne.n	800b95a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	633b      	str	r3, [r7, #48]	@ 0x30
 800b958:	e013      	b.n	800b982 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d007      	beq.n	800b972 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	4619      	mov	r1, r3
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f7fe fe82 	bl	800a672 <clmt_clust>
 800b96e:	6338      	str	r0, [r7, #48]	@ 0x30
 800b970:	e007      	b.n	800b982 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	69db      	ldr	r3, [r3, #28]
 800b978:	4619      	mov	r1, r3
 800b97a:	4610      	mov	r0, r2
 800b97c:	f7fe fbeb 	bl	800a156 <get_fat>
 800b980:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b984:	2b01      	cmp	r3, #1
 800b986:	d804      	bhi.n	800b992 <f_read+0xe2>
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2202      	movs	r2, #2
 800b98c:	755a      	strb	r2, [r3, #21]
 800b98e:	2302      	movs	r3, #2
 800b990:	e0c9      	b.n	800bb26 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b998:	d104      	bne.n	800b9a4 <f_read+0xf4>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2201      	movs	r2, #1
 800b99e:	755a      	strb	r2, [r3, #21]
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e0c0      	b.n	800bb26 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9a8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b9aa:	697a      	ldr	r2, [r7, #20]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	69db      	ldr	r3, [r3, #28]
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	4610      	mov	r0, r2
 800b9b4:	f7fe fbb0 	bl	800a118 <clust2sect>
 800b9b8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d104      	bne.n	800b9ca <f_read+0x11a>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	755a      	strb	r2, [r3, #21]
 800b9c6:	2302      	movs	r3, #2
 800b9c8:	e0ad      	b.n	800bb26 <f_read+0x276>
			sect += csect;
 800b9ca:	69ba      	ldr	r2, [r7, #24]
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	0a5b      	lsrs	r3, r3, #9
 800b9d6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d039      	beq.n	800ba52 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b9de:	69fa      	ldr	r2, [r7, #28]
 800b9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9e2:	4413      	add	r3, r2
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	8952      	ldrh	r2, [r2, #10]
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d905      	bls.n	800b9f8 <f_read+0x148>
					cc = fs->csize - csect;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	895b      	ldrh	r3, [r3, #10]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	7858      	ldrb	r0, [r3, #1]
 800b9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9fe:	69ba      	ldr	r2, [r7, #24]
 800ba00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba02:	f7fd ffdf 	bl	80099c4 <disk_read>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d004      	beq.n	800ba16 <f_read+0x166>
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	755a      	strb	r2, [r3, #21]
 800ba12:	2301      	movs	r3, #1
 800ba14:	e087      	b.n	800bb26 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	7d1b      	ldrb	r3, [r3, #20]
 800ba1a:	b25b      	sxtb	r3, r3
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	da14      	bge.n	800ba4a <f_read+0x19a>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6a1a      	ldr	r2, [r3, #32]
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	1ad3      	subs	r3, r2, r3
 800ba28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d90d      	bls.n	800ba4a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6a1a      	ldr	r2, [r3, #32]
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	025b      	lsls	r3, r3, #9
 800ba38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba3a:	18d0      	adds	r0, r2, r3
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	3330      	adds	r3, #48	@ 0x30
 800ba40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba44:	4619      	mov	r1, r3
 800ba46:	f7fe f89d 	bl	8009b84 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ba4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba4c:	025b      	lsls	r3, r3, #9
 800ba4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ba50:	e050      	b.n	800baf4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6a1b      	ldr	r3, [r3, #32]
 800ba56:	69ba      	ldr	r2, [r7, #24]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d02e      	beq.n	800baba <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	7d1b      	ldrb	r3, [r3, #20]
 800ba60:	b25b      	sxtb	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	da18      	bge.n	800ba98 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	7858      	ldrb	r0, [r3, #1]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6a1a      	ldr	r2, [r3, #32]
 800ba74:	2301      	movs	r3, #1
 800ba76:	f7fd ffc5 	bl	8009a04 <disk_write>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d004      	beq.n	800ba8a <f_read+0x1da>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2201      	movs	r2, #1
 800ba84:	755a      	strb	r2, [r3, #21]
 800ba86:	2301      	movs	r3, #1
 800ba88:	e04d      	b.n	800bb26 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	7d1b      	ldrb	r3, [r3, #20]
 800ba8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba92:	b2da      	uxtb	r2, r3
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	7858      	ldrb	r0, [r3, #1]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800baa2:	2301      	movs	r3, #1
 800baa4:	69ba      	ldr	r2, [r7, #24]
 800baa6:	f7fd ff8d 	bl	80099c4 <disk_read>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d004      	beq.n	800baba <f_read+0x20a>
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2201      	movs	r2, #1
 800bab4:	755a      	strb	r2, [r3, #21]
 800bab6:	2301      	movs	r3, #1
 800bab8:	e035      	b.n	800bb26 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	69ba      	ldr	r2, [r7, #24]
 800babe:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	699b      	ldr	r3, [r3, #24]
 800bac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bac8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bacc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d901      	bls.n	800bada <f_read+0x22a>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	699b      	ldr	r3, [r3, #24]
 800bae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bae8:	4413      	add	r3, r2
 800baea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800baec:	4619      	mov	r1, r3
 800baee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800baf0:	f7fe f848 	bl	8009b84 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800baf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800baf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf8:	4413      	add	r3, r2
 800bafa:	627b      	str	r3, [r7, #36]	@ 0x24
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	699a      	ldr	r2, [r3, #24]
 800bb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb02:	441a      	add	r2, r3
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	619a      	str	r2, [r3, #24]
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb0e:	441a      	add	r2, r3
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	601a      	str	r2, [r3, #0]
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	f47f af01 	bne.w	800b926 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3738      	adds	r7, #56	@ 0x38
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b08c      	sub	sp, #48	@ 0x30
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	60f8      	str	r0, [r7, #12]
 800bb36:	60b9      	str	r1, [r7, #8]
 800bb38:	607a      	str	r2, [r7, #4]
 800bb3a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	2200      	movs	r2, #0
 800bb44:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f107 0210 	add.w	r2, r7, #16
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7ff fc78 	bl	800b444 <validate>
 800bb54:	4603      	mov	r3, r0
 800bb56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bb5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d107      	bne.n	800bb72 <f_write+0x44>
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	7d5b      	ldrb	r3, [r3, #21]
 800bb66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800bb6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d002      	beq.n	800bb78 <f_write+0x4a>
 800bb72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb76:	e14b      	b.n	800be10 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	7d1b      	ldrb	r3, [r3, #20]
 800bb7c:	f003 0302 	and.w	r3, r3, #2
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d101      	bne.n	800bb88 <f_write+0x5a>
 800bb84:	2307      	movs	r3, #7
 800bb86:	e143      	b.n	800be10 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	699a      	ldr	r2, [r3, #24]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	441a      	add	r2, r3
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	699b      	ldr	r3, [r3, #24]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	f080 812d 	bcs.w	800bdf4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	699b      	ldr	r3, [r3, #24]
 800bb9e:	43db      	mvns	r3, r3
 800bba0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bba2:	e127      	b.n	800bdf4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f040 80e3 	bne.w	800bd78 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	699b      	ldr	r3, [r3, #24]
 800bbb6:	0a5b      	lsrs	r3, r3, #9
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	8952      	ldrh	r2, [r2, #10]
 800bbbc:	3a01      	subs	r2, #1
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d143      	bne.n	800bc50 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	699b      	ldr	r3, [r3, #24]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d10c      	bne.n	800bbea <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d11a      	bne.n	800bc12 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2100      	movs	r1, #0
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fe fcae 	bl	800a542 <create_chain>
 800bbe6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bbe8:	e013      	b.n	800bc12 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d007      	beq.n	800bc02 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f7fe fd3a 	bl	800a672 <clmt_clust>
 800bbfe:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bc00:	e007      	b.n	800bc12 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	69db      	ldr	r3, [r3, #28]
 800bc08:	4619      	mov	r1, r3
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	f7fe fc99 	bl	800a542 <create_chain>
 800bc10:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f000 80f2 	beq.w	800bdfe <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d104      	bne.n	800bc2a <f_write+0xfc>
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2202      	movs	r2, #2
 800bc24:	755a      	strb	r2, [r3, #21]
 800bc26:	2302      	movs	r3, #2
 800bc28:	e0f2      	b.n	800be10 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bc2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc30:	d104      	bne.n	800bc3c <f_write+0x10e>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2201      	movs	r2, #1
 800bc36:	755a      	strb	r2, [r3, #21]
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e0e9      	b.n	800be10 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc40:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d102      	bne.n	800bc50 <f_write+0x122>
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc4e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	7d1b      	ldrb	r3, [r3, #20]
 800bc54:	b25b      	sxtb	r3, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	da18      	bge.n	800bc8c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	7858      	ldrb	r0, [r3, #1]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6a1a      	ldr	r2, [r3, #32]
 800bc68:	2301      	movs	r3, #1
 800bc6a:	f7fd fecb 	bl	8009a04 <disk_write>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d004      	beq.n	800bc7e <f_write+0x150>
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2201      	movs	r2, #1
 800bc78:	755a      	strb	r2, [r3, #21]
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e0c8      	b.n	800be10 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	7d1b      	ldrb	r3, [r3, #20]
 800bc82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc86:	b2da      	uxtb	r2, r3
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	69db      	ldr	r3, [r3, #28]
 800bc92:	4619      	mov	r1, r3
 800bc94:	4610      	mov	r0, r2
 800bc96:	f7fe fa3f 	bl	800a118 <clust2sect>
 800bc9a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d104      	bne.n	800bcac <f_write+0x17e>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2202      	movs	r2, #2
 800bca6:	755a      	strb	r2, [r3, #21]
 800bca8:	2302      	movs	r3, #2
 800bcaa:	e0b1      	b.n	800be10 <f_write+0x2e2>
			sect += csect;
 800bcac:	697a      	ldr	r2, [r7, #20]
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	0a5b      	lsrs	r3, r3, #9
 800bcb8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d03c      	beq.n	800bd3a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bcc0:	69ba      	ldr	r2, [r7, #24]
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	4413      	add	r3, r2
 800bcc6:	693a      	ldr	r2, [r7, #16]
 800bcc8:	8952      	ldrh	r2, [r2, #10]
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d905      	bls.n	800bcda <f_write+0x1ac>
					cc = fs->csize - csect;
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	895b      	ldrh	r3, [r3, #10]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	7858      	ldrb	r0, [r3, #1]
 800bcde:	6a3b      	ldr	r3, [r7, #32]
 800bce0:	697a      	ldr	r2, [r7, #20]
 800bce2:	69f9      	ldr	r1, [r7, #28]
 800bce4:	f7fd fe8e 	bl	8009a04 <disk_write>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d004      	beq.n	800bcf8 <f_write+0x1ca>
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	755a      	strb	r2, [r3, #21]
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e08b      	b.n	800be10 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6a1a      	ldr	r2, [r3, #32]
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	6a3a      	ldr	r2, [r7, #32]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d915      	bls.n	800bd32 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6a1a      	ldr	r2, [r3, #32]
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	025b      	lsls	r3, r3, #9
 800bd16:	69fa      	ldr	r2, [r7, #28]
 800bd18:	4413      	add	r3, r2
 800bd1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd1e:	4619      	mov	r1, r3
 800bd20:	f7fd ff30 	bl	8009b84 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	7d1b      	ldrb	r3, [r3, #20]
 800bd28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bd32:	6a3b      	ldr	r3, [r7, #32]
 800bd34:	025b      	lsls	r3, r3, #9
 800bd36:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800bd38:	e03f      	b.n	800bdba <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6a1b      	ldr	r3, [r3, #32]
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d016      	beq.n	800bd72 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	699a      	ldr	r2, [r3, #24]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d210      	bcs.n	800bd72 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	7858      	ldrb	r0, [r3, #1]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	697a      	ldr	r2, [r7, #20]
 800bd5e:	f7fd fe31 	bl	80099c4 <disk_read>
 800bd62:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	755a      	strb	r2, [r3, #21]
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e04e      	b.n	800be10 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	697a      	ldr	r2, [r7, #20]
 800bd76:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	699b      	ldr	r3, [r3, #24]
 800bd7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd80:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bd84:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bd86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d901      	bls.n	800bd92 <f_write+0x264>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	699b      	ldr	r3, [r3, #24]
 800bd9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda0:	4413      	add	r3, r2
 800bda2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bda4:	69f9      	ldr	r1, [r7, #28]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fd feec 	bl	8009b84 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	7d1b      	ldrb	r3, [r3, #20]
 800bdb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bdb4:	b2da      	uxtb	r2, r3
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bdba:	69fa      	ldr	r2, [r7, #28]
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdbe:	4413      	add	r3, r2
 800bdc0:	61fb      	str	r3, [r7, #28]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	699a      	ldr	r2, [r3, #24]
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc8:	441a      	add	r2, r3
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	619a      	str	r2, [r3, #24]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	68da      	ldr	r2, [r3, #12]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	bf38      	it	cc
 800bdda:	461a      	movcc	r2, r3
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	60da      	str	r2, [r3, #12]
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde6:	441a      	add	r2, r3
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	601a      	str	r2, [r3, #0]
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f47f aed4 	bne.w	800bba4 <f_write+0x76>
 800bdfc:	e000      	b.n	800be00 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bdfe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	7d1b      	ldrb	r3, [r3, #20]
 800be04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3730      	adds	r7, #48	@ 0x30
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f107 0208 	add.w	r2, r7, #8
 800be26:	4611      	mov	r1, r2
 800be28:	4618      	mov	r0, r3
 800be2a:	f7ff fb0b 	bl	800b444 <validate>
 800be2e:	4603      	mov	r3, r0
 800be30:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d168      	bne.n	800bf0a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	7d1b      	ldrb	r3, [r3, #20]
 800be3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be40:	2b00      	cmp	r3, #0
 800be42:	d062      	beq.n	800bf0a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	7d1b      	ldrb	r3, [r3, #20]
 800be48:	b25b      	sxtb	r3, r3
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	da15      	bge.n	800be7a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	7858      	ldrb	r0, [r3, #1]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6a1a      	ldr	r2, [r3, #32]
 800be5c:	2301      	movs	r3, #1
 800be5e:	f7fd fdd1 	bl	8009a04 <disk_write>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d001      	beq.n	800be6c <f_sync+0x54>
 800be68:	2301      	movs	r3, #1
 800be6a:	e04f      	b.n	800bf0c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	7d1b      	ldrb	r3, [r3, #20]
 800be70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be74:	b2da      	uxtb	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800be7a:	f7fd fbf5 	bl	8009668 <get_fattime>
 800be7e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be86:	4619      	mov	r1, r3
 800be88:	4610      	mov	r0, r2
 800be8a:	f7fe f8a9 	bl	8009fe0 <move_window>
 800be8e:	4603      	mov	r3, r0
 800be90:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800be92:	7dfb      	ldrb	r3, [r7, #23]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d138      	bne.n	800bf0a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be9c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	330b      	adds	r3, #11
 800bea2:	781a      	ldrb	r2, [r3, #0]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	330b      	adds	r3, #11
 800bea8:	f042 0220 	orr.w	r2, r2, #32
 800beac:	b2d2      	uxtb	r2, r2
 800beae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6818      	ldr	r0, [r3, #0]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	461a      	mov	r2, r3
 800beba:	68f9      	ldr	r1, [r7, #12]
 800bebc:	f7fe fdb3 	bl	800aa26 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f103 021c 	add.w	r2, r3, #28
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	4619      	mov	r1, r3
 800becc:	4610      	mov	r0, r2
 800bece:	f7fd fe2d 	bl	8009b2c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3316      	adds	r3, #22
 800bed6:	6939      	ldr	r1, [r7, #16]
 800bed8:	4618      	mov	r0, r3
 800beda:	f7fd fe27 	bl	8009b2c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3312      	adds	r3, #18
 800bee2:	2100      	movs	r1, #0
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7fd fe06 	bl	8009af6 <st_word>
					fs->wflag = 1;
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2201      	movs	r2, #1
 800beee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fe f8a2 	bl	800a03c <sync_fs>
 800bef8:	4603      	mov	r3, r0
 800befa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	7d1b      	ldrb	r3, [r3, #20]
 800bf00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bf0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3718      	adds	r7, #24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f7ff ff7b 	bl	800be18 <f_sync>
 800bf22:	4603      	mov	r3, r0
 800bf24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d118      	bne.n	800bf5e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f107 0208 	add.w	r2, r7, #8
 800bf32:	4611      	mov	r1, r2
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7ff fa85 	bl	800b444 <validate>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bf3e:	7bfb      	ldrb	r3, [r7, #15]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10c      	bne.n	800bf5e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	691b      	ldr	r3, [r3, #16]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7fd ffa5 	bl	8009e98 <dec_lock>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bf52:	7bfb      	ldrb	r3, [r7, #15]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d102      	bne.n	800bf5e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bf5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3710      	adds	r7, #16
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b090      	sub	sp, #64	@ 0x40
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f107 0208 	add.w	r2, r7, #8
 800bf78:	4611      	mov	r1, r2
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7ff fa62 	bl	800b444 <validate>
 800bf80:	4603      	mov	r3, r0
 800bf82:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800bf86:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d103      	bne.n	800bf96 <f_lseek+0x2e>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	7d5b      	ldrb	r3, [r3, #21]
 800bf92:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800bf96:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d002      	beq.n	800bfa4 <f_lseek+0x3c>
 800bf9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bfa2:	e1e6      	b.n	800c372 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f000 80d1 	beq.w	800c150 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb4:	d15a      	bne.n	800c06c <f_lseek+0x104>
			tbl = fp->cltbl;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfba:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfbe:	1d1a      	adds	r2, r3, #4
 800bfc0:	627a      	str	r2, [r7, #36]	@ 0x24
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	617b      	str	r3, [r7, #20]
 800bfc6:	2302      	movs	r3, #2
 800bfc8:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800bfd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d03a      	beq.n	800c04c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800bfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd8:	613b      	str	r3, [r7, #16]
 800bfda:	2300      	movs	r3, #0
 800bfdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe0:	3302      	adds	r3, #2
 800bfe2:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800bfe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfe6:	60fb      	str	r3, [r7, #12]
 800bfe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfea:	3301      	adds	r3, #1
 800bfec:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7fe f8af 	bl	800a156 <get_fat>
 800bff8:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800bffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d804      	bhi.n	800c00a <f_lseek+0xa2>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2202      	movs	r2, #2
 800c004:	755a      	strb	r2, [r3, #21]
 800c006:	2302      	movs	r3, #2
 800c008:	e1b3      	b.n	800c372 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c010:	d104      	bne.n	800c01c <f_lseek+0xb4>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2201      	movs	r2, #1
 800c016:	755a      	strb	r2, [r3, #21]
 800c018:	2301      	movs	r3, #1
 800c01a:	e1aa      	b.n	800c372 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	3301      	adds	r3, #1
 800c020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c022:	429a      	cmp	r2, r3
 800c024:	d0de      	beq.n	800bfe4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c026:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d809      	bhi.n	800c042 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c030:	1d1a      	adds	r2, r3, #4
 800c032:	627a      	str	r2, [r7, #36]	@ 0x24
 800c034:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c036:	601a      	str	r2, [r3, #0]
 800c038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03a:	1d1a      	adds	r2, r3, #4
 800c03c:	627a      	str	r2, [r7, #36]	@ 0x24
 800c03e:	693a      	ldr	r2, [r7, #16]
 800c040:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c048:	429a      	cmp	r2, r3
 800c04a:	d3c4      	bcc.n	800bfd6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c050:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c052:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c054:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d803      	bhi.n	800c064 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05e:	2200      	movs	r2, #0
 800c060:	601a      	str	r2, [r3, #0]
 800c062:	e184      	b.n	800c36e <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c064:	2311      	movs	r3, #17
 800c066:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c06a:	e180      	b.n	800c36e <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	683a      	ldr	r2, [r7, #0]
 800c072:	429a      	cmp	r2, r3
 800c074:	d902      	bls.n	800c07c <f_lseek+0x114>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	f000 8172 	beq.w	800c36e <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	3b01      	subs	r3, #1
 800c08e:	4619      	mov	r1, r3
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7fe faee 	bl	800a672 <clmt_clust>
 800c096:	4602      	mov	r2, r0
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	69db      	ldr	r3, [r3, #28]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	4610      	mov	r0, r2
 800c0a6:	f7fe f837 	bl	800a118 <clust2sect>
 800c0aa:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d104      	bne.n	800c0bc <f_lseek+0x154>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2202      	movs	r2, #2
 800c0b6:	755a      	strb	r2, [r3, #21]
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	e15a      	b.n	800c372 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	0a5b      	lsrs	r3, r3, #9
 800c0c2:	68ba      	ldr	r2, [r7, #8]
 800c0c4:	8952      	ldrh	r2, [r2, #10]
 800c0c6:	3a01      	subs	r2, #1
 800c0c8:	4013      	ands	r3, r2
 800c0ca:	69ba      	ldr	r2, [r7, #24]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	699b      	ldr	r3, [r3, #24]
 800c0d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f000 8148 	beq.w	800c36e <f_lseek+0x406>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6a1b      	ldr	r3, [r3, #32]
 800c0e2:	69ba      	ldr	r2, [r7, #24]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	f000 8142 	beq.w	800c36e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	7d1b      	ldrb	r3, [r3, #20]
 800c0ee:	b25b      	sxtb	r3, r3
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	da18      	bge.n	800c126 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	7858      	ldrb	r0, [r3, #1]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a1a      	ldr	r2, [r3, #32]
 800c102:	2301      	movs	r3, #1
 800c104:	f7fd fc7e 	bl	8009a04 <disk_write>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d004      	beq.n	800c118 <f_lseek+0x1b0>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2201      	movs	r2, #1
 800c112:	755a      	strb	r2, [r3, #21]
 800c114:	2301      	movs	r3, #1
 800c116:	e12c      	b.n	800c372 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	7d1b      	ldrb	r3, [r3, #20]
 800c11c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c120:	b2da      	uxtb	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	7858      	ldrb	r0, [r3, #1]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c130:	2301      	movs	r3, #1
 800c132:	69ba      	ldr	r2, [r7, #24]
 800c134:	f7fd fc46 	bl	80099c4 <disk_read>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d004      	beq.n	800c148 <f_lseek+0x1e0>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2201      	movs	r2, #1
 800c142:	755a      	strb	r2, [r3, #21]
 800c144:	2301      	movs	r3, #1
 800c146:	e114      	b.n	800c372 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	69ba      	ldr	r2, [r7, #24]
 800c14c:	621a      	str	r2, [r3, #32]
 800c14e:	e10e      	b.n	800c36e <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	683a      	ldr	r2, [r7, #0]
 800c156:	429a      	cmp	r2, r3
 800c158:	d908      	bls.n	800c16c <f_lseek+0x204>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	7d1b      	ldrb	r3, [r3, #20]
 800c15e:	f003 0302 	and.w	r3, r3, #2
 800c162:	2b00      	cmp	r3, #0
 800c164:	d102      	bne.n	800c16c <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	699b      	ldr	r3, [r3, #24]
 800c170:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c172:	2300      	movs	r3, #0
 800c174:	637b      	str	r3, [r7, #52]	@ 0x34
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c17a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f000 80a7 	beq.w	800c2d2 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	895b      	ldrh	r3, [r3, #10]
 800c188:	025b      	lsls	r3, r3, #9
 800c18a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c18c:	6a3b      	ldr	r3, [r7, #32]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d01b      	beq.n	800c1ca <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	1e5a      	subs	r2, r3, #1
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	fbb2 f2f3 	udiv	r2, r2, r3
 800c19c:	6a3b      	ldr	r3, [r7, #32]
 800c19e:	1e59      	subs	r1, r3, #1
 800c1a0:	69fb      	ldr	r3, [r7, #28]
 800c1a2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d30f      	bcc.n	800c1ca <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c1aa:	6a3b      	ldr	r3, [r7, #32]
 800c1ac:	1e5a      	subs	r2, r3, #1
 800c1ae:	69fb      	ldr	r3, [r7, #28]
 800c1b0:	425b      	negs	r3, r3
 800c1b2:	401a      	ands	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	699b      	ldr	r3, [r3, #24]
 800c1bc:	683a      	ldr	r2, [r7, #0]
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	69db      	ldr	r3, [r3, #28]
 800c1c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c1c8:	e022      	b.n	800c210 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d119      	bne.n	800c20a <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2100      	movs	r1, #0
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fe f9b1 	bl	800a542 <create_chain>
 800c1e0:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d104      	bne.n	800c1f2 <f_lseek+0x28a>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2202      	movs	r2, #2
 800c1ec:	755a      	strb	r2, [r3, #21]
 800c1ee:	2302      	movs	r3, #2
 800c1f0:	e0bf      	b.n	800c372 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f8:	d104      	bne.n	800c204 <f_lseek+0x29c>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	755a      	strb	r2, [r3, #21]
 800c200:	2301      	movs	r3, #1
 800c202:	e0b6      	b.n	800c372 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c208:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c20e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c212:	2b00      	cmp	r3, #0
 800c214:	d05d      	beq.n	800c2d2 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c216:	e03a      	b.n	800c28e <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	1ad3      	subs	r3, r2, r3
 800c21e:	603b      	str	r3, [r7, #0]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	699a      	ldr	r2, [r3, #24]
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	441a      	add	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	7d1b      	ldrb	r3, [r3, #20]
 800c230:	f003 0302 	and.w	r3, r3, #2
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00b      	beq.n	800c250 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c23c:	4618      	mov	r0, r3
 800c23e:	f7fe f980 	bl	800a542 <create_chain>
 800c242:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c246:	2b00      	cmp	r3, #0
 800c248:	d108      	bne.n	800c25c <f_lseek+0x2f4>
							ofs = 0; break;
 800c24a:	2300      	movs	r3, #0
 800c24c:	603b      	str	r3, [r7, #0]
 800c24e:	e022      	b.n	800c296 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c254:	4618      	mov	r0, r3
 800c256:	f7fd ff7e 	bl	800a156 <get_fat>
 800c25a:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c262:	d104      	bne.n	800c26e <f_lseek+0x306>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2201      	movs	r2, #1
 800c268:	755a      	strb	r2, [r3, #21]
 800c26a:	2301      	movs	r3, #1
 800c26c:	e081      	b.n	800c372 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c270:	2b01      	cmp	r3, #1
 800c272:	d904      	bls.n	800c27e <f_lseek+0x316>
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	695b      	ldr	r3, [r3, #20]
 800c278:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d304      	bcc.n	800c288 <f_lseek+0x320>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2202      	movs	r2, #2
 800c282:	755a      	strb	r2, [r3, #21]
 800c284:	2302      	movs	r3, #2
 800c286:	e074      	b.n	800c372 <f_lseek+0x40a>
					fp->clust = clst;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c28c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c28e:	683a      	ldr	r2, [r7, #0]
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	429a      	cmp	r2, r3
 800c294:	d8c0      	bhi.n	800c218 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	699a      	ldr	r2, [r3, #24]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	441a      	add	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d012      	beq.n	800c2d2 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7fd ff31 	bl	800a118 <clust2sect>
 800c2b6:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c2b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d104      	bne.n	800c2c8 <f_lseek+0x360>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2202      	movs	r2, #2
 800c2c2:	755a      	strb	r2, [r3, #21]
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	e054      	b.n	800c372 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	0a5b      	lsrs	r3, r3, #9
 800c2cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2ce:	4413      	add	r3, r2
 800c2d0:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	699a      	ldr	r2, [r3, #24]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d90a      	bls.n	800c2f4 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	699a      	ldr	r2, [r3, #24]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	7d1b      	ldrb	r3, [r3, #20]
 800c2ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2ee:	b2da      	uxtb	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d036      	beq.n	800c36e <f_lseek+0x406>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6a1b      	ldr	r3, [r3, #32]
 800c304:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c306:	429a      	cmp	r2, r3
 800c308:	d031      	beq.n	800c36e <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	7d1b      	ldrb	r3, [r3, #20]
 800c30e:	b25b      	sxtb	r3, r3
 800c310:	2b00      	cmp	r3, #0
 800c312:	da18      	bge.n	800c346 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	7858      	ldrb	r0, [r3, #1]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6a1a      	ldr	r2, [r3, #32]
 800c322:	2301      	movs	r3, #1
 800c324:	f7fd fb6e 	bl	8009a04 <disk_write>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d004      	beq.n	800c338 <f_lseek+0x3d0>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2201      	movs	r2, #1
 800c332:	755a      	strb	r2, [r3, #21]
 800c334:	2301      	movs	r3, #1
 800c336:	e01c      	b.n	800c372 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	7d1b      	ldrb	r3, [r3, #20]
 800c33c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c340:	b2da      	uxtb	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	7858      	ldrb	r0, [r3, #1]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c350:	2301      	movs	r3, #1
 800c352:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c354:	f7fd fb36 	bl	80099c4 <disk_read>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d004      	beq.n	800c368 <f_lseek+0x400>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2201      	movs	r2, #1
 800c362:	755a      	strb	r2, [r3, #21]
 800c364:	2301      	movs	r3, #1
 800c366:	e004      	b.n	800c372 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c36c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c36e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c372:	4618      	mov	r0, r3
 800c374:	3740      	adds	r7, #64	@ 0x40
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b09e      	sub	sp, #120	@ 0x78
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800c386:	f107 010c 	add.w	r1, r7, #12
 800c38a:	1d3b      	adds	r3, r7, #4
 800c38c:	2202      	movs	r2, #2
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fe fe0c 	bl	800afac <find_volume>
 800c394:	4603      	mov	r3, r0
 800c396:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800c39e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f040 808e 	bne.w	800c4c4 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c3ae:	4611      	mov	r1, r2
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fe fcef 	bl	800ad94 <follow_path>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800c3bc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d108      	bne.n	800c3d6 <f_unlink+0x5c>
 800c3c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c3c8:	2102      	movs	r1, #2
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7fd fc58 	bl	8009c80 <chk_lock>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800c3d6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d172      	bne.n	800c4c4 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800c3de:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c3e2:	b25b      	sxtb	r3, r3
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	da03      	bge.n	800c3f0 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800c3e8:	2306      	movs	r3, #6
 800c3ea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800c3ee:	e008      	b.n	800c402 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800c3f0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c3f4:	f003 0301 	and.w	r3, r3, #1
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d002      	beq.n	800c402 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800c3fc:	2307      	movs	r3, #7
 800c3fe:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800c402:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c406:	2b00      	cmp	r3, #0
 800c408:	d134      	bne.n	800c474 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c40e:	4611      	mov	r1, r2
 800c410:	4618      	mov	r0, r3
 800c412:	f7fe fae9 	bl	800a9e8 <ld_clust>
 800c416:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800c418:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800c41c:	f003 0310 	and.w	r3, r3, #16
 800c420:	2b00      	cmp	r3, #0
 800c422:	d027      	beq.n	800c474 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800c428:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c42a:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800c42c:	f107 0310 	add.w	r3, r7, #16
 800c430:	2100      	movs	r1, #0
 800c432:	4618      	mov	r0, r3
 800c434:	f7fe f951 	bl	800a6da <dir_sdi>
 800c438:	4603      	mov	r3, r0
 800c43a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800c43e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c442:	2b00      	cmp	r3, #0
 800c444:	d116      	bne.n	800c474 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800c446:	f107 0310 	add.w	r3, r7, #16
 800c44a:	2100      	movs	r1, #0
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7fe fb0a 	bl	800aa66 <dir_read>
 800c452:	4603      	mov	r3, r0
 800c454:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800c458:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d102      	bne.n	800c466 <f_unlink+0xec>
 800c460:	2307      	movs	r3, #7
 800c462:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800c466:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c46a:	2b04      	cmp	r3, #4
 800c46c:	d102      	bne.n	800c474 <f_unlink+0xfa>
 800c46e:	2300      	movs	r3, #0
 800c470:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800c474:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d123      	bne.n	800c4c4 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800c47c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c480:	4618      	mov	r0, r3
 800c482:	f7fe fbd4 	bl	800ac2e <dir_remove>
 800c486:	4603      	mov	r3, r0
 800c488:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800c48c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10c      	bne.n	800c4ae <f_unlink+0x134>
 800c494:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c496:	2b00      	cmp	r3, #0
 800c498:	d009      	beq.n	800c4ae <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800c49a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800c49e:	2200      	movs	r2, #0
 800c4a0:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f7fd ffe8 	bl	800a478 <remove_chain>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800c4ae:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d106      	bne.n	800c4c4 <f_unlink+0x14a>
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7fd fdbf 	bl	800a03c <sync_fs>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c4c4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3778      	adds	r7, #120	@ 0x78
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800c4d0:	b590      	push	{r4, r7, lr}
 800c4d2:	b0a5      	sub	sp, #148	@ 0x94
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800c4da:	463b      	mov	r3, r7
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7fe fcca 	bl	800ae76 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800c4e2:	f107 0120 	add.w	r1, r7, #32
 800c4e6:	1d3b      	adds	r3, r7, #4
 800c4e8:	2202      	movs	r2, #2
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fe fd5e 	bl	800afac <find_volume>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800c4f6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f040 80db 	bne.w	800c6b6 <f_rename+0x1e6>
		djo.obj.fs = fs;
 800c500:	6a3b      	ldr	r3, [r7, #32]
 800c502:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c50a:	4611      	mov	r1, r2
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7fe fc41 	bl	800ad94 <follow_path>
 800c512:	4603      	mov	r3, r0
 800c514:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800c518:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d108      	bne.n	800c532 <f_rename+0x62>
 800c520:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800c524:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <f_rename+0x62>
 800c52c:	2306      	movs	r3, #6
 800c52e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800c532:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c536:	2b00      	cmp	r3, #0
 800c538:	d108      	bne.n	800c54c <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800c53a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c53e:	2102      	movs	r1, #2
 800c540:	4618      	mov	r0, r3
 800c542:	f7fd fb9d 	bl	8009c80 <chk_lock>
 800c546:	4603      	mov	r3, r0
 800c548:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800c54c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c550:	2b00      	cmp	r3, #0
 800c552:	f040 80b0 	bne.w	800c6b6 <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800c556:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c558:	f103 010b 	add.w	r1, r3, #11
 800c55c:	f107 0308 	add.w	r3, r7, #8
 800c560:	2215      	movs	r2, #21
 800c562:	4618      	mov	r0, r3
 800c564:	f7fd fb0e 	bl	8009b84 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800c568:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800c56c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c570:	2230      	movs	r2, #48	@ 0x30
 800c572:	4618      	mov	r0, r3
 800c574:	f7fd fb06 	bl	8009b84 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800c578:	683a      	ldr	r2, [r7, #0]
 800c57a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c57e:	4611      	mov	r1, r2
 800c580:	4618      	mov	r0, r3
 800c582:	f7fe fc07 	bl	800ad94 <follow_path>
 800c586:	4603      	mov	r3, r0
 800c588:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800c58c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10c      	bne.n	800c5ae <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800c594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c598:	429a      	cmp	r2, r3
 800c59a:	d105      	bne.n	800c5a8 <f_rename+0xd8>
 800c59c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c59e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d101      	bne.n	800c5a8 <f_rename+0xd8>
 800c5a4:	2304      	movs	r3, #4
 800c5a6:	e000      	b.n	800c5aa <f_rename+0xda>
 800c5a8:	2308      	movs	r3, #8
 800c5aa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800c5ae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c5b2:	2b04      	cmp	r3, #4
 800c5b4:	d168      	bne.n	800c688 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800c5b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fe fb05 	bl	800abca <dir_register>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 800c5c6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d15c      	bne.n	800c688 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800c5ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800c5d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c5d8:	f103 000d 	add.w	r0, r3, #13
 800c5dc:	f107 0308 	add.w	r3, r7, #8
 800c5e0:	3302      	adds	r3, #2
 800c5e2:	2213      	movs	r2, #19
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	f7fd facd 	bl	8009b84 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800c5ea:	7a3a      	ldrb	r2, [r7, #8]
 800c5ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c5f0:	330b      	adds	r3, #11
 800c5f2:	f042 0220 	orr.w	r2, r2, #32
 800c5f6:	b2d2      	uxtb	r2, r2
 800c5f8:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800c5fa:	6a3b      	ldr	r3, [r7, #32]
 800c5fc:	2201      	movs	r2, #1
 800c5fe:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800c600:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c604:	330b      	adds	r3, #11
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	f003 0310 	and.w	r3, r3, #16
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d03b      	beq.n	800c688 <f_rename+0x1b8>
 800c610:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c614:	429a      	cmp	r2, r3
 800c616:	d037      	beq.n	800c688 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800c618:	6a3c      	ldr	r4, [r7, #32]
 800c61a:	6a3b      	ldr	r3, [r7, #32]
 800c61c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c620:	4618      	mov	r0, r3
 800c622:	f7fe f9e1 	bl	800a9e8 <ld_clust>
 800c626:	4603      	mov	r3, r0
 800c628:	4619      	mov	r1, r3
 800c62a:	4620      	mov	r0, r4
 800c62c:	f7fd fd74 	bl	800a118 <clust2sect>
 800c630:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 800c634:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d103      	bne.n	800c644 <f_rename+0x174>
								res = FR_INT_ERR;
 800c63c:	2302      	movs	r3, #2
 800c63e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800c642:	e021      	b.n	800c688 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800c644:	6a3b      	ldr	r3, [r7, #32]
 800c646:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fd fcc8 	bl	8009fe0 <move_window>
 800c650:	4603      	mov	r3, r0
 800c652:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800c656:	6a3b      	ldr	r3, [r7, #32]
 800c658:	3330      	adds	r3, #48	@ 0x30
 800c65a:	3320      	adds	r3, #32
 800c65c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 800c660:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c664:	2b00      	cmp	r3, #0
 800c666:	d10f      	bne.n	800c688 <f_rename+0x1b8>
 800c668:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c66c:	3301      	adds	r3, #1
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2b2e      	cmp	r3, #46	@ 0x2e
 800c672:	d109      	bne.n	800c688 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800c674:	6a3b      	ldr	r3, [r7, #32]
 800c676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c678:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fe f9d2 	bl	800aa26 <st_clust>
									fs->wflag = 1;
 800c682:	6a3b      	ldr	r3, [r7, #32]
 800c684:	2201      	movs	r2, #1
 800c686:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800c688:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d112      	bne.n	800c6b6 <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800c690:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c694:	4618      	mov	r0, r3
 800c696:	f7fe faca 	bl	800ac2e <dir_remove>
 800c69a:	4603      	mov	r3, r0
 800c69c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 800c6a0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d106      	bne.n	800c6b6 <f_rename+0x1e6>
					res = sync_fs(fs);
 800c6a8:	6a3b      	ldr	r3, [r7, #32]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7fd fcc6 	bl	800a03c <sync_fs>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800c6b6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3794      	adds	r7, #148	@ 0x94
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd90      	pop	{r4, r7, pc}
	...

0800c6c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b087      	sub	sp, #28
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c6da:	4b1f      	ldr	r3, [pc, #124]	@ (800c758 <FATFS_LinkDriverEx+0x94>)
 800c6dc:	7a5b      	ldrb	r3, [r3, #9]
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d131      	bne.n	800c748 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c6e4:	4b1c      	ldr	r3, [pc, #112]	@ (800c758 <FATFS_LinkDriverEx+0x94>)
 800c6e6:	7a5b      	ldrb	r3, [r3, #9]
 800c6e8:	b2db      	uxtb	r3, r3
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	4b1a      	ldr	r3, [pc, #104]	@ (800c758 <FATFS_LinkDriverEx+0x94>)
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c6f2:	4b19      	ldr	r3, [pc, #100]	@ (800c758 <FATFS_LinkDriverEx+0x94>)
 800c6f4:	7a5b      	ldrb	r3, [r3, #9]
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	4a17      	ldr	r2, [pc, #92]	@ (800c758 <FATFS_LinkDriverEx+0x94>)
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	4413      	add	r3, r2
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c702:	4b15      	ldr	r3, [pc, #84]	@ (800c758 <FATFS_LinkDriverEx+0x94>)
 800c704:	7a5b      	ldrb	r3, [r3, #9]
 800c706:	b2db      	uxtb	r3, r3
 800c708:	461a      	mov	r2, r3
 800c70a:	4b13      	ldr	r3, [pc, #76]	@ (800c758 <FATFS_LinkDriverEx+0x94>)
 800c70c:	4413      	add	r3, r2
 800c70e:	79fa      	ldrb	r2, [r7, #7]
 800c710:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c712:	4b11      	ldr	r3, [pc, #68]	@ (800c758 <FATFS_LinkDriverEx+0x94>)
 800c714:	7a5b      	ldrb	r3, [r3, #9]
 800c716:	b2db      	uxtb	r3, r3
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	b2d1      	uxtb	r1, r2
 800c71c:	4a0e      	ldr	r2, [pc, #56]	@ (800c758 <FATFS_LinkDriverEx+0x94>)
 800c71e:	7251      	strb	r1, [r2, #9]
 800c720:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c722:	7dbb      	ldrb	r3, [r7, #22]
 800c724:	3330      	adds	r3, #48	@ 0x30
 800c726:	b2da      	uxtb	r2, r3
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	3301      	adds	r3, #1
 800c730:	223a      	movs	r2, #58	@ 0x3a
 800c732:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	3302      	adds	r3, #2
 800c738:	222f      	movs	r2, #47	@ 0x2f
 800c73a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	3303      	adds	r3, #3
 800c740:	2200      	movs	r2, #0
 800c742:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c744:	2300      	movs	r3, #0
 800c746:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c748:	7dfb      	ldrb	r3, [r7, #23]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	371c      	adds	r7, #28
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop
 800c758:	200005c8 	.word	0x200005c8

0800c75c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c766:	2200      	movs	r2, #0
 800c768:	6839      	ldr	r1, [r7, #0]
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f7ff ffaa 	bl	800c6c4 <FATFS_LinkDriverEx>
 800c770:	4603      	mov	r3, r0
}
 800c772:	4618      	mov	r0, r3
 800c774:	3708      	adds	r7, #8
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
	...

0800c77c <malloc>:
 800c77c:	4b02      	ldr	r3, [pc, #8]	@ (800c788 <malloc+0xc>)
 800c77e:	4601      	mov	r1, r0
 800c780:	6818      	ldr	r0, [r3, #0]
 800c782:	f000 b82d 	b.w	800c7e0 <_malloc_r>
 800c786:	bf00      	nop
 800c788:	20000018 	.word	0x20000018

0800c78c <free>:
 800c78c:	4b02      	ldr	r3, [pc, #8]	@ (800c798 <free+0xc>)
 800c78e:	4601      	mov	r1, r0
 800c790:	6818      	ldr	r0, [r3, #0]
 800c792:	f000 b949 	b.w	800ca28 <_free_r>
 800c796:	bf00      	nop
 800c798:	20000018 	.word	0x20000018

0800c79c <sbrk_aligned>:
 800c79c:	b570      	push	{r4, r5, r6, lr}
 800c79e:	4e0f      	ldr	r6, [pc, #60]	@ (800c7dc <sbrk_aligned+0x40>)
 800c7a0:	460c      	mov	r4, r1
 800c7a2:	6831      	ldr	r1, [r6, #0]
 800c7a4:	4605      	mov	r5, r0
 800c7a6:	b911      	cbnz	r1, 800c7ae <sbrk_aligned+0x12>
 800c7a8:	f000 f8f4 	bl	800c994 <_sbrk_r>
 800c7ac:	6030      	str	r0, [r6, #0]
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	f000 f8ef 	bl	800c994 <_sbrk_r>
 800c7b6:	1c43      	adds	r3, r0, #1
 800c7b8:	d103      	bne.n	800c7c2 <sbrk_aligned+0x26>
 800c7ba:	f04f 34ff 	mov.w	r4, #4294967295
 800c7be:	4620      	mov	r0, r4
 800c7c0:	bd70      	pop	{r4, r5, r6, pc}
 800c7c2:	1cc4      	adds	r4, r0, #3
 800c7c4:	f024 0403 	bic.w	r4, r4, #3
 800c7c8:	42a0      	cmp	r0, r4
 800c7ca:	d0f8      	beq.n	800c7be <sbrk_aligned+0x22>
 800c7cc:	1a21      	subs	r1, r4, r0
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	f000 f8e0 	bl	800c994 <_sbrk_r>
 800c7d4:	3001      	adds	r0, #1
 800c7d6:	d1f2      	bne.n	800c7be <sbrk_aligned+0x22>
 800c7d8:	e7ef      	b.n	800c7ba <sbrk_aligned+0x1e>
 800c7da:	bf00      	nop
 800c7dc:	200005d4 	.word	0x200005d4

0800c7e0 <_malloc_r>:
 800c7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7e4:	1ccd      	adds	r5, r1, #3
 800c7e6:	f025 0503 	bic.w	r5, r5, #3
 800c7ea:	3508      	adds	r5, #8
 800c7ec:	2d0c      	cmp	r5, #12
 800c7ee:	bf38      	it	cc
 800c7f0:	250c      	movcc	r5, #12
 800c7f2:	2d00      	cmp	r5, #0
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	db01      	blt.n	800c7fc <_malloc_r+0x1c>
 800c7f8:	42a9      	cmp	r1, r5
 800c7fa:	d904      	bls.n	800c806 <_malloc_r+0x26>
 800c7fc:	230c      	movs	r3, #12
 800c7fe:	6033      	str	r3, [r6, #0]
 800c800:	2000      	movs	r0, #0
 800c802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c806:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c8dc <_malloc_r+0xfc>
 800c80a:	f000 f869 	bl	800c8e0 <__malloc_lock>
 800c80e:	f8d8 3000 	ldr.w	r3, [r8]
 800c812:	461c      	mov	r4, r3
 800c814:	bb44      	cbnz	r4, 800c868 <_malloc_r+0x88>
 800c816:	4629      	mov	r1, r5
 800c818:	4630      	mov	r0, r6
 800c81a:	f7ff ffbf 	bl	800c79c <sbrk_aligned>
 800c81e:	1c43      	adds	r3, r0, #1
 800c820:	4604      	mov	r4, r0
 800c822:	d158      	bne.n	800c8d6 <_malloc_r+0xf6>
 800c824:	f8d8 4000 	ldr.w	r4, [r8]
 800c828:	4627      	mov	r7, r4
 800c82a:	2f00      	cmp	r7, #0
 800c82c:	d143      	bne.n	800c8b6 <_malloc_r+0xd6>
 800c82e:	2c00      	cmp	r4, #0
 800c830:	d04b      	beq.n	800c8ca <_malloc_r+0xea>
 800c832:	6823      	ldr	r3, [r4, #0]
 800c834:	4639      	mov	r1, r7
 800c836:	4630      	mov	r0, r6
 800c838:	eb04 0903 	add.w	r9, r4, r3
 800c83c:	f000 f8aa 	bl	800c994 <_sbrk_r>
 800c840:	4581      	cmp	r9, r0
 800c842:	d142      	bne.n	800c8ca <_malloc_r+0xea>
 800c844:	6821      	ldr	r1, [r4, #0]
 800c846:	1a6d      	subs	r5, r5, r1
 800c848:	4629      	mov	r1, r5
 800c84a:	4630      	mov	r0, r6
 800c84c:	f7ff ffa6 	bl	800c79c <sbrk_aligned>
 800c850:	3001      	adds	r0, #1
 800c852:	d03a      	beq.n	800c8ca <_malloc_r+0xea>
 800c854:	6823      	ldr	r3, [r4, #0]
 800c856:	442b      	add	r3, r5
 800c858:	6023      	str	r3, [r4, #0]
 800c85a:	f8d8 3000 	ldr.w	r3, [r8]
 800c85e:	685a      	ldr	r2, [r3, #4]
 800c860:	bb62      	cbnz	r2, 800c8bc <_malloc_r+0xdc>
 800c862:	f8c8 7000 	str.w	r7, [r8]
 800c866:	e00f      	b.n	800c888 <_malloc_r+0xa8>
 800c868:	6822      	ldr	r2, [r4, #0]
 800c86a:	1b52      	subs	r2, r2, r5
 800c86c:	d420      	bmi.n	800c8b0 <_malloc_r+0xd0>
 800c86e:	2a0b      	cmp	r2, #11
 800c870:	d917      	bls.n	800c8a2 <_malloc_r+0xc2>
 800c872:	1961      	adds	r1, r4, r5
 800c874:	42a3      	cmp	r3, r4
 800c876:	6025      	str	r5, [r4, #0]
 800c878:	bf18      	it	ne
 800c87a:	6059      	strne	r1, [r3, #4]
 800c87c:	6863      	ldr	r3, [r4, #4]
 800c87e:	bf08      	it	eq
 800c880:	f8c8 1000 	streq.w	r1, [r8]
 800c884:	5162      	str	r2, [r4, r5]
 800c886:	604b      	str	r3, [r1, #4]
 800c888:	4630      	mov	r0, r6
 800c88a:	f000 f82f 	bl	800c8ec <__malloc_unlock>
 800c88e:	f104 000b 	add.w	r0, r4, #11
 800c892:	1d23      	adds	r3, r4, #4
 800c894:	f020 0007 	bic.w	r0, r0, #7
 800c898:	1ac2      	subs	r2, r0, r3
 800c89a:	bf1c      	itt	ne
 800c89c:	1a1b      	subne	r3, r3, r0
 800c89e:	50a3      	strne	r3, [r4, r2]
 800c8a0:	e7af      	b.n	800c802 <_malloc_r+0x22>
 800c8a2:	6862      	ldr	r2, [r4, #4]
 800c8a4:	42a3      	cmp	r3, r4
 800c8a6:	bf0c      	ite	eq
 800c8a8:	f8c8 2000 	streq.w	r2, [r8]
 800c8ac:	605a      	strne	r2, [r3, #4]
 800c8ae:	e7eb      	b.n	800c888 <_malloc_r+0xa8>
 800c8b0:	4623      	mov	r3, r4
 800c8b2:	6864      	ldr	r4, [r4, #4]
 800c8b4:	e7ae      	b.n	800c814 <_malloc_r+0x34>
 800c8b6:	463c      	mov	r4, r7
 800c8b8:	687f      	ldr	r7, [r7, #4]
 800c8ba:	e7b6      	b.n	800c82a <_malloc_r+0x4a>
 800c8bc:	461a      	mov	r2, r3
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	42a3      	cmp	r3, r4
 800c8c2:	d1fb      	bne.n	800c8bc <_malloc_r+0xdc>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	6053      	str	r3, [r2, #4]
 800c8c8:	e7de      	b.n	800c888 <_malloc_r+0xa8>
 800c8ca:	230c      	movs	r3, #12
 800c8cc:	6033      	str	r3, [r6, #0]
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f000 f80c 	bl	800c8ec <__malloc_unlock>
 800c8d4:	e794      	b.n	800c800 <_malloc_r+0x20>
 800c8d6:	6005      	str	r5, [r0, #0]
 800c8d8:	e7d6      	b.n	800c888 <_malloc_r+0xa8>
 800c8da:	bf00      	nop
 800c8dc:	200005d8 	.word	0x200005d8

0800c8e0 <__malloc_lock>:
 800c8e0:	4801      	ldr	r0, [pc, #4]	@ (800c8e8 <__malloc_lock+0x8>)
 800c8e2:	f000 b891 	b.w	800ca08 <__retarget_lock_acquire_recursive>
 800c8e6:	bf00      	nop
 800c8e8:	20000718 	.word	0x20000718

0800c8ec <__malloc_unlock>:
 800c8ec:	4801      	ldr	r0, [pc, #4]	@ (800c8f4 <__malloc_unlock+0x8>)
 800c8ee:	f000 b88c 	b.w	800ca0a <__retarget_lock_release_recursive>
 800c8f2:	bf00      	nop
 800c8f4:	20000718 	.word	0x20000718

0800c8f8 <realloc>:
 800c8f8:	4b02      	ldr	r3, [pc, #8]	@ (800c904 <realloc+0xc>)
 800c8fa:	460a      	mov	r2, r1
 800c8fc:	4601      	mov	r1, r0
 800c8fe:	6818      	ldr	r0, [r3, #0]
 800c900:	f000 b802 	b.w	800c908 <_realloc_r>
 800c904:	20000018 	.word	0x20000018

0800c908 <_realloc_r>:
 800c908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c90c:	4680      	mov	r8, r0
 800c90e:	4615      	mov	r5, r2
 800c910:	460c      	mov	r4, r1
 800c912:	b921      	cbnz	r1, 800c91e <_realloc_r+0x16>
 800c914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c918:	4611      	mov	r1, r2
 800c91a:	f7ff bf61 	b.w	800c7e0 <_malloc_r>
 800c91e:	b92a      	cbnz	r2, 800c92c <_realloc_r+0x24>
 800c920:	f000 f882 	bl	800ca28 <_free_r>
 800c924:	2400      	movs	r4, #0
 800c926:	4620      	mov	r0, r4
 800c928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c92c:	f000 f8c6 	bl	800cabc <_malloc_usable_size_r>
 800c930:	4285      	cmp	r5, r0
 800c932:	4606      	mov	r6, r0
 800c934:	d802      	bhi.n	800c93c <_realloc_r+0x34>
 800c936:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c93a:	d8f4      	bhi.n	800c926 <_realloc_r+0x1e>
 800c93c:	4629      	mov	r1, r5
 800c93e:	4640      	mov	r0, r8
 800c940:	f7ff ff4e 	bl	800c7e0 <_malloc_r>
 800c944:	4607      	mov	r7, r0
 800c946:	2800      	cmp	r0, #0
 800c948:	d0ec      	beq.n	800c924 <_realloc_r+0x1c>
 800c94a:	42b5      	cmp	r5, r6
 800c94c:	462a      	mov	r2, r5
 800c94e:	4621      	mov	r1, r4
 800c950:	bf28      	it	cs
 800c952:	4632      	movcs	r2, r6
 800c954:	f000 f85a 	bl	800ca0c <memcpy>
 800c958:	4621      	mov	r1, r4
 800c95a:	4640      	mov	r0, r8
 800c95c:	f000 f864 	bl	800ca28 <_free_r>
 800c960:	463c      	mov	r4, r7
 800c962:	e7e0      	b.n	800c926 <_realloc_r+0x1e>

0800c964 <memset>:
 800c964:	4402      	add	r2, r0
 800c966:	4603      	mov	r3, r0
 800c968:	4293      	cmp	r3, r2
 800c96a:	d100      	bne.n	800c96e <memset+0xa>
 800c96c:	4770      	bx	lr
 800c96e:	f803 1b01 	strb.w	r1, [r3], #1
 800c972:	e7f9      	b.n	800c968 <memset+0x4>

0800c974 <strcat>:
 800c974:	b510      	push	{r4, lr}
 800c976:	4602      	mov	r2, r0
 800c978:	7814      	ldrb	r4, [r2, #0]
 800c97a:	4613      	mov	r3, r2
 800c97c:	3201      	adds	r2, #1
 800c97e:	2c00      	cmp	r4, #0
 800c980:	d1fa      	bne.n	800c978 <strcat+0x4>
 800c982:	3b01      	subs	r3, #1
 800c984:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c988:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c98c:	2a00      	cmp	r2, #0
 800c98e:	d1f9      	bne.n	800c984 <strcat+0x10>
 800c990:	bd10      	pop	{r4, pc}
	...

0800c994 <_sbrk_r>:
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	4d06      	ldr	r5, [pc, #24]	@ (800c9b0 <_sbrk_r+0x1c>)
 800c998:	2300      	movs	r3, #0
 800c99a:	4604      	mov	r4, r0
 800c99c:	4608      	mov	r0, r1
 800c99e:	602b      	str	r3, [r5, #0]
 800c9a0:	f7f6 ff30 	bl	8003804 <_sbrk>
 800c9a4:	1c43      	adds	r3, r0, #1
 800c9a6:	d102      	bne.n	800c9ae <_sbrk_r+0x1a>
 800c9a8:	682b      	ldr	r3, [r5, #0]
 800c9aa:	b103      	cbz	r3, 800c9ae <_sbrk_r+0x1a>
 800c9ac:	6023      	str	r3, [r4, #0]
 800c9ae:	bd38      	pop	{r3, r4, r5, pc}
 800c9b0:	20000714 	.word	0x20000714

0800c9b4 <__errno>:
 800c9b4:	4b01      	ldr	r3, [pc, #4]	@ (800c9bc <__errno+0x8>)
 800c9b6:	6818      	ldr	r0, [r3, #0]
 800c9b8:	4770      	bx	lr
 800c9ba:	bf00      	nop
 800c9bc:	20000018 	.word	0x20000018

0800c9c0 <__libc_init_array>:
 800c9c0:	b570      	push	{r4, r5, r6, lr}
 800c9c2:	4d0d      	ldr	r5, [pc, #52]	@ (800c9f8 <__libc_init_array+0x38>)
 800c9c4:	4c0d      	ldr	r4, [pc, #52]	@ (800c9fc <__libc_init_array+0x3c>)
 800c9c6:	1b64      	subs	r4, r4, r5
 800c9c8:	10a4      	asrs	r4, r4, #2
 800c9ca:	2600      	movs	r6, #0
 800c9cc:	42a6      	cmp	r6, r4
 800c9ce:	d109      	bne.n	800c9e4 <__libc_init_array+0x24>
 800c9d0:	4d0b      	ldr	r5, [pc, #44]	@ (800ca00 <__libc_init_array+0x40>)
 800c9d2:	4c0c      	ldr	r4, [pc, #48]	@ (800ca04 <__libc_init_array+0x44>)
 800c9d4:	f000 f87a 	bl	800cacc <_init>
 800c9d8:	1b64      	subs	r4, r4, r5
 800c9da:	10a4      	asrs	r4, r4, #2
 800c9dc:	2600      	movs	r6, #0
 800c9de:	42a6      	cmp	r6, r4
 800c9e0:	d105      	bne.n	800c9ee <__libc_init_array+0x2e>
 800c9e2:	bd70      	pop	{r4, r5, r6, pc}
 800c9e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9e8:	4798      	blx	r3
 800c9ea:	3601      	adds	r6, #1
 800c9ec:	e7ee      	b.n	800c9cc <__libc_init_array+0xc>
 800c9ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9f2:	4798      	blx	r3
 800c9f4:	3601      	adds	r6, #1
 800c9f6:	e7f2      	b.n	800c9de <__libc_init_array+0x1e>
 800c9f8:	0800da54 	.word	0x0800da54
 800c9fc:	0800da54 	.word	0x0800da54
 800ca00:	0800da54 	.word	0x0800da54
 800ca04:	0800da58 	.word	0x0800da58

0800ca08 <__retarget_lock_acquire_recursive>:
 800ca08:	4770      	bx	lr

0800ca0a <__retarget_lock_release_recursive>:
 800ca0a:	4770      	bx	lr

0800ca0c <memcpy>:
 800ca0c:	440a      	add	r2, r1
 800ca0e:	4291      	cmp	r1, r2
 800ca10:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca14:	d100      	bne.n	800ca18 <memcpy+0xc>
 800ca16:	4770      	bx	lr
 800ca18:	b510      	push	{r4, lr}
 800ca1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca22:	4291      	cmp	r1, r2
 800ca24:	d1f9      	bne.n	800ca1a <memcpy+0xe>
 800ca26:	bd10      	pop	{r4, pc}

0800ca28 <_free_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	4605      	mov	r5, r0
 800ca2c:	2900      	cmp	r1, #0
 800ca2e:	d041      	beq.n	800cab4 <_free_r+0x8c>
 800ca30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca34:	1f0c      	subs	r4, r1, #4
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	bfb8      	it	lt
 800ca3a:	18e4      	addlt	r4, r4, r3
 800ca3c:	f7ff ff50 	bl	800c8e0 <__malloc_lock>
 800ca40:	4a1d      	ldr	r2, [pc, #116]	@ (800cab8 <_free_r+0x90>)
 800ca42:	6813      	ldr	r3, [r2, #0]
 800ca44:	b933      	cbnz	r3, 800ca54 <_free_r+0x2c>
 800ca46:	6063      	str	r3, [r4, #4]
 800ca48:	6014      	str	r4, [r2, #0]
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca50:	f7ff bf4c 	b.w	800c8ec <__malloc_unlock>
 800ca54:	42a3      	cmp	r3, r4
 800ca56:	d908      	bls.n	800ca6a <_free_r+0x42>
 800ca58:	6820      	ldr	r0, [r4, #0]
 800ca5a:	1821      	adds	r1, r4, r0
 800ca5c:	428b      	cmp	r3, r1
 800ca5e:	bf01      	itttt	eq
 800ca60:	6819      	ldreq	r1, [r3, #0]
 800ca62:	685b      	ldreq	r3, [r3, #4]
 800ca64:	1809      	addeq	r1, r1, r0
 800ca66:	6021      	streq	r1, [r4, #0]
 800ca68:	e7ed      	b.n	800ca46 <_free_r+0x1e>
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	b10b      	cbz	r3, 800ca74 <_free_r+0x4c>
 800ca70:	42a3      	cmp	r3, r4
 800ca72:	d9fa      	bls.n	800ca6a <_free_r+0x42>
 800ca74:	6811      	ldr	r1, [r2, #0]
 800ca76:	1850      	adds	r0, r2, r1
 800ca78:	42a0      	cmp	r0, r4
 800ca7a:	d10b      	bne.n	800ca94 <_free_r+0x6c>
 800ca7c:	6820      	ldr	r0, [r4, #0]
 800ca7e:	4401      	add	r1, r0
 800ca80:	1850      	adds	r0, r2, r1
 800ca82:	4283      	cmp	r3, r0
 800ca84:	6011      	str	r1, [r2, #0]
 800ca86:	d1e0      	bne.n	800ca4a <_free_r+0x22>
 800ca88:	6818      	ldr	r0, [r3, #0]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	6053      	str	r3, [r2, #4]
 800ca8e:	4408      	add	r0, r1
 800ca90:	6010      	str	r0, [r2, #0]
 800ca92:	e7da      	b.n	800ca4a <_free_r+0x22>
 800ca94:	d902      	bls.n	800ca9c <_free_r+0x74>
 800ca96:	230c      	movs	r3, #12
 800ca98:	602b      	str	r3, [r5, #0]
 800ca9a:	e7d6      	b.n	800ca4a <_free_r+0x22>
 800ca9c:	6820      	ldr	r0, [r4, #0]
 800ca9e:	1821      	adds	r1, r4, r0
 800caa0:	428b      	cmp	r3, r1
 800caa2:	bf04      	itt	eq
 800caa4:	6819      	ldreq	r1, [r3, #0]
 800caa6:	685b      	ldreq	r3, [r3, #4]
 800caa8:	6063      	str	r3, [r4, #4]
 800caaa:	bf04      	itt	eq
 800caac:	1809      	addeq	r1, r1, r0
 800caae:	6021      	streq	r1, [r4, #0]
 800cab0:	6054      	str	r4, [r2, #4]
 800cab2:	e7ca      	b.n	800ca4a <_free_r+0x22>
 800cab4:	bd38      	pop	{r3, r4, r5, pc}
 800cab6:	bf00      	nop
 800cab8:	200005d8 	.word	0x200005d8

0800cabc <_malloc_usable_size_r>:
 800cabc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cac0:	1f18      	subs	r0, r3, #4
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	bfbc      	itt	lt
 800cac6:	580b      	ldrlt	r3, [r1, r0]
 800cac8:	18c0      	addlt	r0, r0, r3
 800caca:	4770      	bx	lr

0800cacc <_init>:
 800cacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cace:	bf00      	nop
 800cad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cad2:	bc08      	pop	{r3}
 800cad4:	469e      	mov	lr, r3
 800cad6:	4770      	bx	lr

0800cad8 <_fini>:
 800cad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cada:	bf00      	nop
 800cadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cade:	bc08      	pop	{r3}
 800cae0:	469e      	mov	lr, r3
 800cae2:	4770      	bx	lr
