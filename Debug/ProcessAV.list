
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef0c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000103c  0800f094  0800f094  00010094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100d0  080100d0  0001206c  2**0
                  CONTENTS
  4 .ARM          00000008  080100d0  080100d0  000110d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100d8  080100d8  0001206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100d8  080100d8  000110d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080100dc  080100dc  000110dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080100e0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001206c  2**0
                  CONTENTS
 10 .bss          0001484c  2000006c  2000006c  0001206c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200148b8  200148b8  0001206c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001206c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c708  00000000  00000000  0001209c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044be  00000000  00000000  0002e7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019a0  00000000  00000000  00032c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013c7  00000000  00000000  00034608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002642a  00000000  00000000  000359cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022267  00000000  00000000  0005bdf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6fb6  00000000  00000000  0007e060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00155016  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f28  00000000  00000000  0015505c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0015bf84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800f07c 	.word	0x0800f07c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	0800f07c 	.word	0x0800f07c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <controller_test>:
 */

uint8_t pback = 0;

static void controller_test()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
	ENTITY entity;
	entity.x0 = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 300;
 80004d2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80004d6:	813b      	strh	r3, [r7, #8]
	entity.x1 = 64;
 80004d8:	2340      	movs	r3, #64	@ 0x40
 80004da:	817b      	strh	r3, [r7, #10]
	entity.y1 = 64;
 80004dc:	2340      	movs	r3, #64	@ 0x40
 80004de:	81bb      	strh	r3, [r7, #12]
	entity.id = 0x80;
 80004e0:	2380      	movs	r3, #128	@ 0x80
 80004e2:	713b      	strb	r3, [r7, #4]
	entity.ST.color = 0xF100;
 80004e4:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80004e8:	823b      	strh	r3, [r7, #16]

	draw_entity(&entity);
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	4618      	mov	r0, r3
 80004ee:	f001 fb4d 	bl	8001b8c <draw_entity>

	while(1)
	{

		switch(currentDx)
 80004f2:	4b2b      	ldr	r3, [pc, #172]	@ (80005a0 <controller_test+0xd8>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b77      	cmp	r3, #119	@ 0x77
 80004f8:	d03a      	beq.n	8000570 <controller_test+0xa8>
 80004fa:	2b77      	cmp	r3, #119	@ 0x77
 80004fc:	dc48      	bgt.n	8000590 <controller_test+0xc8>
 80004fe:	2b55      	cmp	r3, #85	@ 0x55
 8000500:	d026      	beq.n	8000550 <controller_test+0x88>
 8000502:	2b55      	cmp	r3, #85	@ 0x55
 8000504:	dc44      	bgt.n	8000590 <controller_test+0xc8>
 8000506:	2b11      	cmp	r3, #17
 8000508:	d002      	beq.n	8000510 <controller_test+0x48>
 800050a:	2b33      	cmp	r3, #51	@ 0x33
 800050c:	d010      	beq.n	8000530 <controller_test+0x68>
 800050e:	e03f      	b.n	8000590 <controller_test+0xc8>
		{
			case DxRight:
				translation_entity(&entity, entity.x0+32, entity.y0, 1);
 8000510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000514:	b29b      	uxth	r3, r3
 8000516:	3320      	adds	r3, #32
 8000518:	b29b      	uxth	r3, r3
 800051a:	b219      	sxth	r1, r3
 800051c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000520:	1d38      	adds	r0, r7, #4
 8000522:	2301      	movs	r3, #1
 8000524:	f001 fc3e 	bl	8001da4 <translation_entity>
				currentDx = 0;
 8000528:	4b1d      	ldr	r3, [pc, #116]	@ (80005a0 <controller_test+0xd8>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
				break;
 800052e:	e033      	b.n	8000598 <controller_test+0xd0>
			case DxLeft:
				translation_entity(&entity, entity.x0-32, entity.y0, 1);
 8000530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000534:	b29b      	uxth	r3, r3
 8000536:	3b20      	subs	r3, #32
 8000538:	b29b      	uxth	r3, r3
 800053a:	b219      	sxth	r1, r3
 800053c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000540:	1d38      	adds	r0, r7, #4
 8000542:	2301      	movs	r3, #1
 8000544:	f001 fc2e 	bl	8001da4 <translation_entity>
				currentDx = 0;
 8000548:	4b15      	ldr	r3, [pc, #84]	@ (80005a0 <controller_test+0xd8>)
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
				break;
 800054e:	e023      	b.n	8000598 <controller_test+0xd0>
			case DxUp:
				translation_entity(&entity, entity.x0, entity.y0-32, 1);
 8000550:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000554:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000558:	b29b      	uxth	r3, r3
 800055a:	3b20      	subs	r3, #32
 800055c:	b29b      	uxth	r3, r3
 800055e:	b21a      	sxth	r2, r3
 8000560:	1d38      	adds	r0, r7, #4
 8000562:	2301      	movs	r3, #1
 8000564:	f001 fc1e 	bl	8001da4 <translation_entity>
				currentDx = 0;
 8000568:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <controller_test+0xd8>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
				break;
 800056e:	e013      	b.n	8000598 <controller_test+0xd0>
			case DxDown:
				translation_entity(&entity, entity.x0, entity.y0+32, 1);
 8000570:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000574:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000578:	b29b      	uxth	r3, r3
 800057a:	3320      	adds	r3, #32
 800057c:	b29b      	uxth	r3, r3
 800057e:	b21a      	sxth	r2, r3
 8000580:	1d38      	adds	r0, r7, #4
 8000582:	2301      	movs	r3, #1
 8000584:	f001 fc0e 	bl	8001da4 <translation_entity>
				currentDx = 0;
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <controller_test+0xd8>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
				break;
 800058e:	e003      	b.n	8000598 <controller_test+0xd0>
			default:
				currentDx = 0;
 8000590:	4b03      	ldr	r3, [pc, #12]	@ (80005a0 <controller_test+0xd8>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
				break;
 8000596:	bf00      	nop
		}

		kernel_delay(50);
 8000598:	2032      	movs	r0, #50	@ 0x32
 800059a:	f002 f9fb 	bl	8002994 <kernel_delay>
		switch(currentDx)
 800059e:	e7a8      	b.n	80004f2 <controller_test+0x2a>
 80005a0:	20000091 	.word	0x20000091

080005a4 <Task0>:
	}

}

static volatile void Task0()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0

	ENTITY entity;
	entity.x0 = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	813b      	strh	r3, [r7, #8]
	entity.x1 = 64;
 80005b2:	2340      	movs	r3, #64	@ 0x40
 80005b4:	817b      	strh	r3, [r7, #10]
	entity.y1 = 64;
 80005b6:	2340      	movs	r3, #64	@ 0x40
 80005b8:	81bb      	strh	r3, [r7, #12]
	entity.id = 0x80;
 80005ba:	2380      	movs	r3, #128	@ 0x80
 80005bc:	713b      	strb	r3, [r7, #4]
	entity.ST.color = 0xF100;
 80005be:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80005c2:	823b      	strh	r3, [r7, #16]
    {
        //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
        //mutex = 1;
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
        translation_test(&entity, 1, 0);
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	2101      	movs	r1, #1
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fd20 	bl	8002010 <translation_test>
 80005d0:	e7f8      	b.n	80005c4 <Task0+0x20>
	...

080005d4 <Task1>:
    	//mutex = 0;
    }
}

static volatile void Task1()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

    while(1)
    {
    	play_audio_file("Audio/acoustic.txt");
 80005d8:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <Task1+0x14>)
 80005da:	f000 fddb 	bl	8001194 <play_audio_file>
    	kernel_delay(20);
 80005de:	2014      	movs	r0, #20
 80005e0:	f002 f9d8 	bl	8002994 <kernel_delay>
    	play_audio_file("Audio/acoustic.txt");
 80005e4:	bf00      	nop
 80005e6:	e7f7      	b.n	80005d8 <Task1+0x4>
 80005e8:	0800f094 	.word	0x0800f094

080005ec <Task2>:
    }
}

static volatile void Task2()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
	ENTITY entity;
	entity.x0 = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 300;
 80005f6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80005fa:	813b      	strh	r3, [r7, #8]
	entity.x1 = 64;
 80005fc:	2340      	movs	r3, #64	@ 0x40
 80005fe:	817b      	strh	r3, [r7, #10]
	entity.y1 = 64;
 8000600:	2340      	movs	r3, #64	@ 0x40
 8000602:	81bb      	strh	r3, [r7, #12]
	entity.id = 0x80;
 8000604:	2380      	movs	r3, #128	@ 0x80
 8000606:	713b      	strb	r3, [r7, #4]
	entity.ST.color = 0xF100;
 8000608:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 800060c:	823b      	strh	r3, [r7, #16]

    	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
    	//flagg = 1;
    	//mutex = 1;
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
        translation_test(&entity, 1, 0);
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	2101      	movs	r1, #1
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fcfb 	bl	8002010 <translation_test>
 800061a:	e7f8      	b.n	800060e <Task2+0x22>

0800061c <Task3>:

    }
}

static volatile void Task3()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	while(1)
	{
		controller_test();
 8000620:	f7ff ff52 	bl	80004c8 <controller_test>
 8000624:	e7fc      	b.n	8000620 <Task3+0x4>
	...

08000628 <demo_os_1>:
	}
}


static void demo_os_1()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af02      	add	r7, sp, #8
	  BackGroundColor = 0xFFFF;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <demo_os_1+0x4c>)
 8000630:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000634:	801a      	strh	r2, [r3, #0]
	  fill_screen2(BackGroundColor);
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <demo_os_1+0x4c>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 ff74 	bl	8001528 <fill_screen2>
	  print_string(128, 128, "os demo",0xF100, BackGroundColor);
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <demo_os_1+0x4c>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 800064a:	4a0b      	ldr	r2, [pc, #44]	@ (8000678 <demo_os_1+0x50>)
 800064c:	2180      	movs	r1, #128	@ 0x80
 800064e:	2080      	movs	r0, #128	@ 0x80
 8000650:	f001 f8c6 	bl	80017e0 <print_string>

	  kernel_add_process(Task0);
 8000654:	4809      	ldr	r0, [pc, #36]	@ (800067c <demo_os_1+0x54>)
 8000656:	f002 f8a1 	bl	800279c <kernel_add_process>
	  kernel_add_process(Task1);
 800065a:	4809      	ldr	r0, [pc, #36]	@ (8000680 <demo_os_1+0x58>)
 800065c:	f002 f89e 	bl	800279c <kernel_add_process>
	  kernel_add_process(Task2);
 8000660:	4808      	ldr	r0, [pc, #32]	@ (8000684 <demo_os_1+0x5c>)
 8000662:	f002 f89b 	bl	800279c <kernel_add_process>
	  kernel_add_process(Task3);
 8000666:	4808      	ldr	r0, [pc, #32]	@ (8000688 <demo_os_1+0x60>)
 8000668:	f002 f898 	bl	800279c <kernel_add_process>
	  //kernel_add_process(Task4);
	  //kernel_add_process(Task5);
	  kernel_start();
 800066c:	f002 f974 	bl	8002958 <kernel_start>

	  while(1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <demo_os_1+0x48>
 8000674:	20000008 	.word	0x20000008
 8000678:	0800f0a8 	.word	0x0800f0a8
 800067c:	080005a5 	.word	0x080005a5
 8000680:	080005d5 	.word	0x080005d5
 8000684:	080005ed 	.word	0x080005ed
 8000688:	0800061d 	.word	0x0800061d

0800068c <scaling_test>:
	  }
}


static void scaling_test(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af02      	add	r7, sp, #8
	/*
	 * Functie pentru testarea operatiei de scalare
	 */

	fill_screen2(BackGroundColor);
 8000692:	4b5c      	ldr	r3, [pc, #368]	@ (8000804 <scaling_test+0x178>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	4618      	mov	r0, r3
 8000698:	f000 ff46 	bl	8001528 <fill_screen2>

	ENTITY entity;
	init_entity_sd(&entity);
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fa47 	bl	8001b32 <init_entity_sd>

	entity.x0 = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	813b      	strh	r3, [r7, #8]
	entity.id = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	713b      	strb	r3, [r7, #4]

	assign_file_path_entity(&entity, "graphic/multi2.bin");
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4955      	ldr	r1, [pc, #340]	@ (8000808 <scaling_test+0x17c>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f003 fbf4 	bl	8003ea2 <assign_file_path_entity>
	draw_entity(&entity);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fa65 	bl	8001b8c <draw_entity>

	while(1)
	{
		switch(currentDx)
 80006c2:	4b52      	ldr	r3, [pc, #328]	@ (800080c <scaling_test+0x180>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2bbb      	cmp	r3, #187	@ 0xbb
 80006c8:	d051      	beq.n	800076e <scaling_test+0xe2>
 80006ca:	2bbb      	cmp	r3, #187	@ 0xbb
 80006cc:	f300 808f 	bgt.w	80007ee <scaling_test+0x162>
 80006d0:	2b77      	cmp	r3, #119	@ 0x77
 80006d2:	d03c      	beq.n	800074e <scaling_test+0xc2>
 80006d4:	2b77      	cmp	r3, #119	@ 0x77
 80006d6:	f300 808a 	bgt.w	80007ee <scaling_test+0x162>
 80006da:	2b55      	cmp	r3, #85	@ 0x55
 80006dc:	d027      	beq.n	800072e <scaling_test+0xa2>
 80006de:	2b55      	cmp	r3, #85	@ 0x55
 80006e0:	f300 8085 	bgt.w	80007ee <scaling_test+0x162>
 80006e4:	2b11      	cmp	r3, #17
 80006e6:	d002      	beq.n	80006ee <scaling_test+0x62>
 80006e8:	2b33      	cmp	r3, #51	@ 0x33
 80006ea:	d010      	beq.n	800070e <scaling_test+0x82>
 80006ec:	e07f      	b.n	80007ee <scaling_test+0x162>
		{
			case DxRight:
				translation_entity(&entity, entity.x0+16, entity.y0, 0);
 80006ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	3310      	adds	r3, #16
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	b219      	sxth	r1, r3
 80006fa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80006fe:	1d38      	adds	r0, r7, #4
 8000700:	2300      	movs	r3, #0
 8000702:	f001 fb4f 	bl	8001da4 <translation_entity>
				currentDx = 0;
 8000706:	4b41      	ldr	r3, [pc, #260]	@ (800080c <scaling_test+0x180>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
				break;
 800070c:	e073      	b.n	80007f6 <scaling_test+0x16a>
			case DxLeft:
				translation_entity(&entity, entity.x0-16, entity.y0, 0);
 800070e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000712:	b29b      	uxth	r3, r3
 8000714:	3b10      	subs	r3, #16
 8000716:	b29b      	uxth	r3, r3
 8000718:	b219      	sxth	r1, r3
 800071a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800071e:	1d38      	adds	r0, r7, #4
 8000720:	2300      	movs	r3, #0
 8000722:	f001 fb3f 	bl	8001da4 <translation_entity>
				currentDx = 0;
 8000726:	4b39      	ldr	r3, [pc, #228]	@ (800080c <scaling_test+0x180>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
				break;
 800072c:	e063      	b.n	80007f6 <scaling_test+0x16a>
			case DxUp:
				translation_entity(&entity, entity.x0, entity.y0-16, 0);
 800072e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000732:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000736:	b29b      	uxth	r3, r3
 8000738:	3b10      	subs	r3, #16
 800073a:	b29b      	uxth	r3, r3
 800073c:	b21a      	sxth	r2, r3
 800073e:	1d38      	adds	r0, r7, #4
 8000740:	2300      	movs	r3, #0
 8000742:	f001 fb2f 	bl	8001da4 <translation_entity>
				currentDx = 0;
 8000746:	4b31      	ldr	r3, [pc, #196]	@ (800080c <scaling_test+0x180>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
				break;
 800074c:	e053      	b.n	80007f6 <scaling_test+0x16a>
			case DxDown:
				translation_entity(&entity, entity.x0, entity.y0+16, 0);
 800074e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000752:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000756:	b29b      	uxth	r3, r3
 8000758:	3310      	adds	r3, #16
 800075a:	b29b      	uxth	r3, r3
 800075c:	b21a      	sxth	r2, r3
 800075e:	1d38      	adds	r0, r7, #4
 8000760:	2300      	movs	r3, #0
 8000762:	f001 fb1f 	bl	8001da4 <translation_entity>
				currentDx = 0;
 8000766:	4b29      	ldr	r3, [pc, #164]	@ (800080c <scaling_test+0x180>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
				break;
 800076c:	e043      	b.n	80007f6 <scaling_test+0x16a>
			case DxSelect:
				while(currentDx == DxSelect);
 800076e:	bf00      	nop
 8000770:	4b26      	ldr	r3, [pc, #152]	@ (800080c <scaling_test+0x180>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2bbb      	cmp	r3, #187	@ 0xbb
 8000776:	d0fb      	beq.n	8000770 <scaling_test+0xe4>
					switch(currentDx)
 8000778:	4b24      	ldr	r3, [pc, #144]	@ (800080c <scaling_test+0x180>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b77      	cmp	r3, #119	@ 0x77
 800077e:	d016      	beq.n	80007ae <scaling_test+0x122>
 8000780:	2b77      	cmp	r3, #119	@ 0x77
 8000782:	dc33      	bgt.n	80007ec <scaling_test+0x160>
 8000784:	2b11      	cmp	r3, #17
 8000786:	d023      	beq.n	80007d0 <scaling_test+0x144>
 8000788:	2b55      	cmp	r3, #85	@ 0x55
 800078a:	d12f      	bne.n	80007ec <scaling_test+0x160>
					{
						case DxUp:
							erase_entity(entity);
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000794:	f001 ff8e 	bl	80026b4 <erase_entity>
							scaling_entity(&entity, 2);
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 fd0a 	bl	80021b8 <scaling_entity>
							draw_entity(&entity);
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 f9f0 	bl	8001b8c <draw_entity>
							break;
 80007ac:	e01f      	b.n	80007ee <scaling_test+0x162>
						case DxDown:
							erase_entity(entity);
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007b6:	f001 ff7d 	bl	80026b4 <erase_entity>
							scaling_entity(&entity, 0.5);
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fcf9 	bl	80021b8 <scaling_entity>
							draw_entity(&entity);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 f9df 	bl	8001b8c <draw_entity>
							break;
 80007ce:	e00e      	b.n	80007ee <scaling_test+0x162>
						case DxRight:
							free_entity_sd(&entity);
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 f9c8 	bl	8001b68 <free_entity_sd>
							pback = 1;
 80007d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <scaling_test+0x184>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
							currentDx = 0;
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <scaling_test+0x180>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
							HAL_Delay(50);
 80007e4:	2032      	movs	r0, #50	@ 0x32
 80007e6:	f004 fdcb 	bl	8005380 <HAL_Delay>
 80007ea:	e008      	b.n	80007fe <scaling_test+0x172>
							return;
						default:
							break;
 80007ec:	bf00      	nop
					}
			default:
				currentDx = 0;
 80007ee:	4b07      	ldr	r3, [pc, #28]	@ (800080c <scaling_test+0x180>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
				break;
 80007f4:	bf00      	nop
		}

		HAL_Delay(25);
 80007f6:	2019      	movs	r0, #25
 80007f8:	f004 fdc2 	bl	8005380 <HAL_Delay>
		switch(currentDx)
 80007fc:	e761      	b.n	80006c2 <scaling_test+0x36>

	}

	pback = 1;

}
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000008 	.word	0x20000008
 8000808:	0800f0b0 	.word	0x0800f0b0
 800080c:	20000091 	.word	0x20000091
 8000810:	20000088 	.word	0x20000088

08000814 <rotation_test>:


static void rotation_test(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af02      	add	r7, sp, #8
	/*
	 * Functie pentru testarea operatiei grafice
	 * de rotatie
	 */

	fill_screen2(BackGroundColor);
 800081a:	4b33      	ldr	r3, [pc, #204]	@ (80008e8 <rotation_test+0xd4>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fe82 	bl	8001528 <fill_screen2>

	ENTITY entity;
	init_entity_sd(&entity);
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	4618      	mov	r0, r3
 8000828:	f001 f983 	bl	8001b32 <init_entity_sd>

	entity.x0 = 80;
 800082c:	2350      	movs	r3, #80	@ 0x50
 800082e:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 80;
 8000830:	2350      	movs	r3, #80	@ 0x50
 8000832:	813b      	strh	r3, [r7, #8]
	entity.id = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	713b      	strb	r3, [r7, #4]

	assign_file_path_entity(&entity, "graphic/multi2.bin");
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	492c      	ldr	r1, [pc, #176]	@ (80008ec <rotation_test+0xd8>)
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fb30 	bl	8003ea2 <assign_file_path_entity>
	draw_entity(&entity);
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4618      	mov	r0, r3
 8000846:	f001 f9a1 	bl	8001b8c <draw_entity>
	scaling_entity(&entity, 60);
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 80008f0 <rotation_test+0xdc>
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fcb1 	bl	80021b8 <scaling_entity>
	erase_entity(entity);
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800085e:	f001 ff29 	bl	80026b4 <erase_entity>
	draw_entity(&entity);
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4618      	mov	r0, r3
 8000866:	f001 f991 	bl	8001b8c <draw_entity>

	while(1)
	{
		switch(currentDx)
 800086a:	4b22      	ldr	r3, [pc, #136]	@ (80008f4 <rotation_test+0xe0>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b77      	cmp	r3, #119	@ 0x77
 8000870:	d025      	beq.n	80008be <rotation_test+0xaa>
 8000872:	2b77      	cmp	r3, #119	@ 0x77
 8000874:	dc29      	bgt.n	80008ca <rotation_test+0xb6>
 8000876:	2b55      	cmp	r3, #85	@ 0x55
 8000878:	d01b      	beq.n	80008b2 <rotation_test+0x9e>
 800087a:	2b55      	cmp	r3, #85	@ 0x55
 800087c:	dc25      	bgt.n	80008ca <rotation_test+0xb6>
 800087e:	2b11      	cmp	r3, #17
 8000880:	d002      	beq.n	8000888 <rotation_test+0x74>
 8000882:	2b33      	cmp	r3, #51	@ 0x33
 8000884:	d00e      	beq.n	80008a4 <rotation_test+0x90>
 8000886:	e020      	b.n	80008ca <rotation_test+0xb6>
		{
			case DxRight:
				free_entity_sd(&entity);
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4618      	mov	r0, r3
 800088c:	f001 f96c 	bl	8001b68 <free_entity_sd>
				pback = 1;
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <rotation_test+0xe4>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
				currentDx = 0;
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <rotation_test+0xe0>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
				HAL_Delay(50);
 800089c:	2032      	movs	r0, #50	@ 0x32
 800089e:	f004 fd6f 	bl	8005380 <HAL_Delay>
				return;
 80008a2:	e01d      	b.n	80008e0 <rotation_test+0xcc>
			case DxLeft:
				rotate_entity(&entity, 270);
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fe08 	bl	80024c0 <rotate_entity>
				break;
 80008b0:	e00f      	b.n	80008d2 <rotation_test+0xbe>
			case DxUp:
				rotate_entity(&entity, 90);
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	215a      	movs	r1, #90	@ 0x5a
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 fe02 	bl	80024c0 <rotate_entity>
				break;
 80008bc:	e009      	b.n	80008d2 <rotation_test+0xbe>
			case DxDown:
				rotate_entity(&entity, 180);
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	21b4      	movs	r1, #180	@ 0xb4
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fdfc 	bl	80024c0 <rotate_entity>
				break;
 80008c8:	e003      	b.n	80008d2 <rotation_test+0xbe>
			default:
				currentDx = 0;
 80008ca:	4b0a      	ldr	r3, [pc, #40]	@ (80008f4 <rotation_test+0xe0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
				break;
 80008d0:	bf00      	nop
		}

		currentDx = 0;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <rotation_test+0xe0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(25);
 80008d8:	2019      	movs	r0, #25
 80008da:	f004 fd51 	bl	8005380 <HAL_Delay>
		switch(currentDx)
 80008de:	e7c4      	b.n	800086a <rotation_test+0x56>


	}


}
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000008 	.word	0x20000008
 80008ec:	0800f0b0 	.word	0x0800f0b0
 80008f0:	42700000 	.word	0x42700000
 80008f4:	20000091 	.word	0x20000091
 80008f8:	20000088 	.word	0x20000088

080008fc <graphics_test>:


static void graphics_test(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af02      	add	r7, sp, #8
	 * Aplicatie de testare grafica.
	 * Se vor testa functiile de scalare,
	 * translatie si rotatie
	 */

	fill_screen2(BackGroundColor);
 8000902:	4b54      	ldr	r3, [pc, #336]	@ (8000a54 <graphics_test+0x158>)
 8000904:	881b      	ldrh	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fe0e 	bl	8001528 <fill_screen2>

	ENTITY entity;
	init_entity_sd(&entity);
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	4618      	mov	r0, r3
 8000910:	f001 f90f 	bl	8001b32 <init_entity_sd>

	entity.x0 = 100;
 8000914:	2364      	movs	r3, #100	@ 0x64
 8000916:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 100;
 8000918:	2364      	movs	r3, #100	@ 0x64
 800091a:	813b      	strh	r3, [r7, #8]
	entity.id = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	713b      	strb	r3, [r7, #4]

	assign_file_path_entity(&entity, "graphic/multi2.bin");
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	494d      	ldr	r1, [pc, #308]	@ (8000a58 <graphics_test+0x15c>)
 8000924:	4618      	mov	r0, r3
 8000926:	f003 fabc 	bl	8003ea2 <assign_file_path_entity>
	draw_entity(&entity);
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4618      	mov	r0, r3
 800092e:	f001 f92d 	bl	8001b8c <draw_entity>

	HAL_Delay(1000);
 8000932:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000936:	f004 fd23 	bl	8005380 <HAL_Delay>

	erase_entity(entity);
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000942:	f001 feb7 	bl	80026b4 <erase_entity>
	scaling_entity(&entity, 38);
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8000a5c <graphics_test+0x160>
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fc33 	bl	80021b8 <scaling_entity>
	draw_entity(&entity);
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4618      	mov	r0, r3
 8000956:	f001 f919 	bl	8001b8c <draw_entity>

	HAL_Delay(1000);
 800095a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800095e:	f004 fd0f 	bl	8005380 <HAL_Delay>

	erase_entity(entity);
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800096a:	f001 fea3 	bl	80026b4 <erase_entity>
	rotate_entity(&entity, 90);
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	215a      	movs	r1, #90	@ 0x5a
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fda4 	bl	80024c0 <rotate_entity>

	HAL_Delay(1000);
 8000978:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800097c:	f004 fd00 	bl	8005380 <HAL_Delay>

	erase_entity(entity);
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000988:	f001 fe94 	bl	80026b4 <erase_entity>
	draw_entity(&entity);
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	4618      	mov	r0, r3
 8000990:	f001 f8fc 	bl	8001b8c <draw_entity>

	HAL_Delay(1000);
 8000994:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000998:	f004 fcf2 	bl	8005380 <HAL_Delay>

	erase_entity(entity);
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009a4:	f001 fe86 	bl	80026b4 <erase_entity>
	scaling_entity(&entity, 0.5);
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 fc02 	bl	80021b8 <scaling_entity>
	draw_entity(&entity);
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 f8e8 	bl	8001b8c <draw_entity>

	HAL_Delay(1000);
 80009bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009c0:	f004 fcde 	bl	8005380 <HAL_Delay>

	fill_screen2(BackGroundColor);
 80009c4:	4b23      	ldr	r3, [pc, #140]	@ (8000a54 <graphics_test+0x158>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 fdad 	bl	8001528 <fill_screen2>
	entity.x0 = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	813b      	strh	r3, [r7, #8]
	assign_file_path_entity(&entity, "graphic/img8.bin");
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	4921      	ldr	r1, [pc, #132]	@ (8000a60 <graphics_test+0x164>)
 80009da:	4618      	mov	r0, r3
 80009dc:	f003 fa61 	bl	8003ea2 <assign_file_path_entity>
	draw_entity(&entity);
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 f8d2 	bl	8001b8c <draw_entity>

	HAL_Delay(1000);
 80009e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009ec:	f004 fcc8 	bl	8005380 <HAL_Delay>

	fill_screen2(BackGroundColor);
 80009f0:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <graphics_test+0x158>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 fd97 	bl	8001528 <fill_screen2>
	scaling_entity(&entity, 0.5);
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 fbd9 	bl	80021b8 <scaling_entity>
	draw_entity(&entity);
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f001 f8bf 	bl	8001b8c <draw_entity>

	HAL_Delay(1000);
 8000a0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a12:	f004 fcb5 	bl	8005380 <HAL_Delay>

	scaling_entity(&entity, 2);
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 fbcb 	bl	80021b8 <scaling_entity>
	draw_entity(&entity);
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4618      	mov	r0, r3
 8000a26:	f001 f8b1 	bl	8001b8c <draw_entity>
	erase_entity(entity);
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a32:	f001 fe3f 	bl	80026b4 <erase_entity>

	HAL_Delay(1000);
 8000a36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a3a:	f004 fca1 	bl	8005380 <HAL_Delay>

	free_entity_sd(&entity);
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 f891 	bl	8001b68 <free_entity_sd>
	pback = 1;
 8000a46:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <graphics_test+0x168>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]

}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000008 	.word	0x20000008
 8000a58:	0800f0b0 	.word	0x0800f0b0
 8000a5c:	42180000 	.word	0x42180000
 8000a60:	0800f0c4 	.word	0x0800f0c4
 8000a64:	20000088 	.word	0x20000088

08000a68 <set_graphics_gui>:


static void set_graphics_gui(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af02      	add	r7, sp, #8
	init_cursor();
 8000a6e:	f000 fc25 	bl	80012bc <init_cursor>

	fill_screen1(BackGroundColor);
 8000a72:	4b3f      	ldr	r3, [pc, #252]	@ (8000b70 <set_graphics_gui+0x108>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 fcf6 	bl	8001468 <fill_screen1>
	cursor.y0 = 16;
 8000a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000a7e:	2210      	movs	r2, #16
 8000a80:	809a      	strh	r2, [r3, #4]
	cursor.x0 = 32;
 8000a82:	4b3c      	ldr	r3, [pc, #240]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000a84:	2220      	movs	r2, #32
 8000a86:	805a      	strh	r2, [r3, #2]

	print_string(cursor.x0, cursor.y0, "Graphics Player", BLACK, BackGroundColor);
 8000a88:	4b3a      	ldr	r3, [pc, #232]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000a8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a8e:	b298      	uxth	r0, r3
 8000a90:	4b38      	ldr	r3, [pc, #224]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000a92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a96:	b299      	uxth	r1, r3
 8000a98:	4b35      	ldr	r3, [pc, #212]	@ (8000b70 <set_graphics_gui+0x108>)
 8000a9a:	881b      	ldrh	r3, [r3, #0]
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	4a35      	ldr	r2, [pc, #212]	@ (8000b78 <set_graphics_gui+0x110>)
 8000aa2:	f000 fe9d 	bl	80017e0 <print_string>
	cursor.y0 += 32;
 8000aa6:	4b33      	ldr	r3, [pc, #204]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000aa8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	3320      	adds	r3, #32
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	b21a      	sxth	r2, r3
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000ab6:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Test Demo", BLACK, BackGroundColor);
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000aba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000abe:	b298      	uxth	r0, r3
 8000ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000ac2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ac6:	b299      	uxth	r1, r3
 8000ac8:	4b29      	ldr	r3, [pc, #164]	@ (8000b70 <set_graphics_gui+0x108>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8000b7c <set_graphics_gui+0x114>)
 8000ad2:	f000 fe85 	bl	80017e0 <print_string>
	cursor.y0 += 16;
 8000ad6:	4b27      	ldr	r3, [pc, #156]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000ad8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	3310      	adds	r3, #16
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	4b23      	ldr	r3, [pc, #140]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000ae6:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Scaling", BLACK, BackGroundColor);
 8000ae8:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000aea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aee:	b298      	uxth	r0, r3
 8000af0:	4b20      	ldr	r3, [pc, #128]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000af2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000af6:	b299      	uxth	r1, r3
 8000af8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <set_graphics_gui+0x108>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	9300      	str	r3, [sp, #0]
 8000afe:	2300      	movs	r3, #0
 8000b00:	4a1f      	ldr	r2, [pc, #124]	@ (8000b80 <set_graphics_gui+0x118>)
 8000b02:	f000 fe6d 	bl	80017e0 <print_string>
	cursor.y0 += 16;
 8000b06:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000b08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	3310      	adds	r3, #16
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b21a      	sxth	r2, r3
 8000b14:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000b16:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Translation", BLACK, BackGroundColor);
 8000b18:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000b1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b1e:	b298      	uxth	r0, r3
 8000b20:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000b22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b26:	b299      	uxth	r1, r3
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <set_graphics_gui+0x108>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2300      	movs	r3, #0
 8000b30:	4a14      	ldr	r2, [pc, #80]	@ (8000b84 <set_graphics_gui+0x11c>)
 8000b32:	f000 fe55 	bl	80017e0 <print_string>
	cursor.y0 += 16;
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000b38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	3310      	adds	r3, #16
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000b46:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Rotation", BLACK, BackGroundColor);
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000b4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b4e:	b298      	uxth	r0, r3
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <set_graphics_gui+0x10c>)
 8000b52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b56:	b299      	uxth	r1, r3
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <set_graphics_gui+0x108>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	4a09      	ldr	r2, [pc, #36]	@ (8000b88 <set_graphics_gui+0x120>)
 8000b62:	f000 fe3d 	bl	80017e0 <print_string>

	init_cursor();
 8000b66:	f000 fba9 	bl	80012bc <init_cursor>

}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000094 	.word	0x20000094
 8000b78:	0800f0d8 	.word	0x0800f0d8
 8000b7c:	0800f0e8 	.word	0x0800f0e8
 8000b80:	0800f0f4 	.word	0x0800f0f4
 8000b84:	0800f0fc 	.word	0x0800f0fc
 8000b88:	0800f108 	.word	0x0800f108

08000b8c <list_graphics>:


static void list_graphics(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
	/*
	 * Interfata pentru selectarea si redarea unor
	 * melodii alese de utilizator
	 */

	set_graphics_gui();
 8000b92:	f7ff ff69 	bl	8000a68 <set_graphics_gui>

	cursor.x0 = 0;
 8000b96:	4b54      	ldr	r3, [pc, #336]	@ (8000ce8 <list_graphics+0x15c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	805a      	strh	r2, [r3, #2]
	cursor.y0 = 48;
 8000b9c:	4b52      	ldr	r3, [pc, #328]	@ (8000ce8 <list_graphics+0x15c>)
 8000b9e:	2230      	movs	r2, #48	@ 0x30
 8000ba0:	809a      	strh	r2, [r3, #4]

	int16_t x = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	80fb      	strh	r3, [r7, #6]
	int16_t y = 48;
 8000ba6:	2330      	movs	r3, #48	@ 0x30
 8000ba8:	80bb      	strh	r3, [r7, #4]

	uint8_t Q = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	70fb      	strb	r3, [r7, #3]

	uint8_t nrOptions = 4;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	70bb      	strb	r3, [r7, #2]
	nrOptions--; /*0 inclus*/
 8000bb2:	78bb      	ldrb	r3, [r7, #2]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	70bb      	strb	r3, [r7, #2]

	draw_entity(&cursor);
 8000bb8:	484b      	ldr	r0, [pc, #300]	@ (8000ce8 <list_graphics+0x15c>)
 8000bba:	f000 ffe7 	bl	8001b8c <draw_entity>

	currentDx = 0;
 8000bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8000cec <list_graphics+0x160>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]

	while(1)
	{

		if(pback == 1)
 8000bc4:	4b4a      	ldr	r3, [pc, #296]	@ (8000cf0 <list_graphics+0x164>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d116      	bne.n	8000bfa <list_graphics+0x6e>
			/*
			 * Initializare gui si pt cazul in care ne intaorcem
			 * dintr-o interfata selectat
			 */

			set_graphics_gui();
 8000bcc:	f7ff ff4c 	bl	8000a68 <set_graphics_gui>

			cursor.x0 = 0;
 8000bd0:	4b45      	ldr	r3, [pc, #276]	@ (8000ce8 <list_graphics+0x15c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	805a      	strh	r2, [r3, #2]
			cursor.y0 = 48;
 8000bd6:	4b44      	ldr	r3, [pc, #272]	@ (8000ce8 <list_graphics+0x15c>)
 8000bd8:	2230      	movs	r2, #48	@ 0x30
 8000bda:	809a      	strh	r2, [r3, #4]

			x = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	80fb      	strh	r3, [r7, #6]
			y = 48;
 8000be0:	2330      	movs	r3, #48	@ 0x30
 8000be2:	80bb      	strh	r3, [r7, #4]

			Q = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	70fb      	strb	r3, [r7, #3]

			draw_entity(&cursor);
 8000be8:	483f      	ldr	r0, [pc, #252]	@ (8000ce8 <list_graphics+0x15c>)
 8000bea:	f000 ffcf 	bl	8001b8c <draw_entity>

			currentDx = 0;
 8000bee:	4b3f      	ldr	r3, [pc, #252]	@ (8000cec <list_graphics+0x160>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
			pback = 0;
 8000bf4:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf0 <list_graphics+0x164>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxDown)
 8000bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8000cec <list_graphics+0x160>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b77      	cmp	r3, #119	@ 0x77
 8000c00:	d11a      	bne.n	8000c38 <list_graphics+0xac>
		{
			if(Q == nrOptions)
 8000c02:	78fa      	ldrb	r2, [r7, #3]
 8000c04:	78bb      	ldrb	r3, [r7, #2]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d104      	bne.n	8000c14 <list_graphics+0x88>
			{
				Q = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	70fb      	strb	r3, [r7, #3]
				y = 48;
 8000c0e:	2330      	movs	r3, #48	@ 0x30
 8000c10:	80bb      	strh	r3, [r7, #4]
 8000c12:	e006      	b.n	8000c22 <list_graphics+0x96>
			}

			else
			{
				Q++;
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	3301      	adds	r3, #1
 8000c18:	70fb      	strb	r3, [r7, #3]
				y += 16;
 8000c1a:	88bb      	ldrh	r3, [r7, #4]
 8000c1c:	3310      	adds	r3, #16
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	80bb      	strh	r3, [r7, #4]
			}

			translation_entity(&cursor, x, y, 0);
 8000c22:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c26:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	482e      	ldr	r0, [pc, #184]	@ (8000ce8 <list_graphics+0x15c>)
 8000c2e:	f001 f8b9 	bl	8001da4 <translation_entity>
			currentDx = 0;
 8000c32:	4b2e      	ldr	r3, [pc, #184]	@ (8000cec <list_graphics+0x160>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxUp)
 8000c38:	4b2c      	ldr	r3, [pc, #176]	@ (8000cec <list_graphics+0x160>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b55      	cmp	r3, #85	@ 0x55
 8000c3e:	d11d      	bne.n	8000c7c <list_graphics+0xf0>
		{
			if(Q == 0)
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d108      	bne.n	8000c58 <list_graphics+0xcc>
			{
				Q = nrOptions;
 8000c46:	78bb      	ldrb	r3, [r7, #2]
 8000c48:	70fb      	strb	r3, [r7, #3]
				y = 48+16*nrOptions;
 8000c4a:	78bb      	ldrb	r3, [r7, #2]
 8000c4c:	3303      	adds	r3, #3
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	011b      	lsls	r3, r3, #4
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	80bb      	strh	r3, [r7, #4]
 8000c56:	e006      	b.n	8000c66 <list_graphics+0xda>
			}
			else
			{
				Q--;
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	70fb      	strb	r3, [r7, #3]
				y -= 16;
 8000c5e:	88bb      	ldrh	r3, [r7, #4]
 8000c60:	3b10      	subs	r3, #16
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	80bb      	strh	r3, [r7, #4]
			}

			translation_entity(&cursor, x, y, 0);
 8000c66:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c6a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	481d      	ldr	r0, [pc, #116]	@ (8000ce8 <list_graphics+0x15c>)
 8000c72:	f001 f897 	bl	8001da4 <translation_entity>
			currentDx = 0;
 8000c76:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <list_graphics+0x160>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxSelect)
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <list_graphics+0x160>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2bbb      	cmp	r3, #187	@ 0xbb
 8000c82:	d11e      	bne.n	8000cc2 <list_graphics+0x136>
		{
			currentDx = 0;
 8000c84:	4b19      	ldr	r3, [pc, #100]	@ (8000cec <list_graphics+0x160>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]

			switch(Q)
 8000c8a:	78fb      	ldrb	r3, [r7, #3]
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d814      	bhi.n	8000cba <list_graphics+0x12e>
 8000c90:	a201      	add	r2, pc, #4	@ (adr r2, 8000c98 <list_graphics+0x10c>)
 8000c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c96:	bf00      	nop
 8000c98:	08000ca9 	.word	0x08000ca9
 8000c9c:	08000caf 	.word	0x08000caf
 8000ca0:	08000cbb 	.word	0x08000cbb
 8000ca4:	08000cb5 	.word	0x08000cb5
			{
				case 0:
					graphics_test();
 8000ca8:	f7ff fe28 	bl	80008fc <graphics_test>
					break;
 8000cac:	e006      	b.n	8000cbc <list_graphics+0x130>
				case 1:
					scaling_test();
 8000cae:	f7ff fced 	bl	800068c <scaling_test>
					break;
 8000cb2:	e003      	b.n	8000cbc <list_graphics+0x130>
				case 2:
					break;
				case 3:
					rotation_test();
 8000cb4:	f7ff fdae 	bl	8000814 <rotation_test>
					break;
 8000cb8:	e000      	b.n	8000cbc <list_graphics+0x130>
				default:
					break;
 8000cba:	bf00      	nop

			}

			currentDx = 0;
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <list_graphics+0x160>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]

		}

		if(currentDx == DxRight)
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <list_graphics+0x160>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b11      	cmp	r3, #17
 8000cc8:	d106      	bne.n	8000cd8 <list_graphics+0x14c>
		{
			pback = 1;
 8000cca:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <list_graphics+0x164>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]
			currentDx = 0;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <list_graphics+0x160>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
			return;
 8000cd6:	e003      	b.n	8000ce0 <list_graphics+0x154>
		}


		HAL_Delay(25);
 8000cd8:	2019      	movs	r0, #25
 8000cda:	f004 fb51 	bl	8005380 <HAL_Delay>
		if(pback == 1)
 8000cde:	e771      	b.n	8000bc4 <list_graphics+0x38>


	}


}
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000094 	.word	0x20000094
 8000cec:	20000091 	.word	0x20000091
 8000cf0:	20000088 	.word	0x20000088

08000cf4 <list_songs>:


static void list_songs(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af02      	add	r7, sp, #8
	/*
	 * Interfata pentru selectarea si redarea unor
	 * melodii alese de utilizator
	 */

	fill_screen1(BackGroundColor);
 8000cfa:	4b83      	ldr	r3, [pc, #524]	@ (8000f08 <list_songs+0x214>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fbb2 	bl	8001468 <fill_screen1>
	cursor.y0 = 16;
 8000d04:	4b81      	ldr	r3, [pc, #516]	@ (8000f0c <list_songs+0x218>)
 8000d06:	2210      	movs	r2, #16
 8000d08:	809a      	strh	r2, [r3, #4]
	cursor.x0 = 32;
 8000d0a:	4b80      	ldr	r3, [pc, #512]	@ (8000f0c <list_songs+0x218>)
 8000d0c:	2220      	movs	r2, #32
 8000d0e:	805a      	strh	r2, [r3, #2]

	print_string(cursor.x0, cursor.y0, "Music PLayer", BLACK, BackGroundColor);
 8000d10:	4b7e      	ldr	r3, [pc, #504]	@ (8000f0c <list_songs+0x218>)
 8000d12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d16:	b298      	uxth	r0, r3
 8000d18:	4b7c      	ldr	r3, [pc, #496]	@ (8000f0c <list_songs+0x218>)
 8000d1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d1e:	b299      	uxth	r1, r3
 8000d20:	4b79      	ldr	r3, [pc, #484]	@ (8000f08 <list_songs+0x214>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2300      	movs	r3, #0
 8000d28:	4a79      	ldr	r2, [pc, #484]	@ (8000f10 <list_songs+0x21c>)
 8000d2a:	f000 fd59 	bl	80017e0 <print_string>
	cursor.y0 += 32;
 8000d2e:	4b77      	ldr	r3, [pc, #476]	@ (8000f0c <list_songs+0x218>)
 8000d30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	3320      	adds	r3, #32
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	4b73      	ldr	r3, [pc, #460]	@ (8000f0c <list_songs+0x218>)
 8000d3e:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Song1", BLACK, BackGroundColor);
 8000d40:	4b72      	ldr	r3, [pc, #456]	@ (8000f0c <list_songs+0x218>)
 8000d42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d46:	b298      	uxth	r0, r3
 8000d48:	4b70      	ldr	r3, [pc, #448]	@ (8000f0c <list_songs+0x218>)
 8000d4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d4e:	b299      	uxth	r1, r3
 8000d50:	4b6d      	ldr	r3, [pc, #436]	@ (8000f08 <list_songs+0x214>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2300      	movs	r3, #0
 8000d58:	4a6e      	ldr	r2, [pc, #440]	@ (8000f14 <list_songs+0x220>)
 8000d5a:	f000 fd41 	bl	80017e0 <print_string>
	cursor.y0 += 16;
 8000d5e:	4b6b      	ldr	r3, [pc, #428]	@ (8000f0c <list_songs+0x218>)
 8000d60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	3310      	adds	r3, #16
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	4b67      	ldr	r3, [pc, #412]	@ (8000f0c <list_songs+0x218>)
 8000d6e:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Song2", BLACK, BackGroundColor);
 8000d70:	4b66      	ldr	r3, [pc, #408]	@ (8000f0c <list_songs+0x218>)
 8000d72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d76:	b298      	uxth	r0, r3
 8000d78:	4b64      	ldr	r3, [pc, #400]	@ (8000f0c <list_songs+0x218>)
 8000d7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d7e:	b299      	uxth	r1, r3
 8000d80:	4b61      	ldr	r3, [pc, #388]	@ (8000f08 <list_songs+0x214>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2300      	movs	r3, #0
 8000d88:	4a63      	ldr	r2, [pc, #396]	@ (8000f18 <list_songs+0x224>)
 8000d8a:	f000 fd29 	bl	80017e0 <print_string>
	cursor.y0 += 16;
 8000d8e:	4b5f      	ldr	r3, [pc, #380]	@ (8000f0c <list_songs+0x218>)
 8000d90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	3310      	adds	r3, #16
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	b21a      	sxth	r2, r3
 8000d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8000f0c <list_songs+0x218>)
 8000d9e:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Song3", BLACK, BackGroundColor);
 8000da0:	4b5a      	ldr	r3, [pc, #360]	@ (8000f0c <list_songs+0x218>)
 8000da2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000da6:	b298      	uxth	r0, r3
 8000da8:	4b58      	ldr	r3, [pc, #352]	@ (8000f0c <list_songs+0x218>)
 8000daa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dae:	b299      	uxth	r1, r3
 8000db0:	4b55      	ldr	r3, [pc, #340]	@ (8000f08 <list_songs+0x214>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2300      	movs	r3, #0
 8000db8:	4a58      	ldr	r2, [pc, #352]	@ (8000f1c <list_songs+0x228>)
 8000dba:	f000 fd11 	bl	80017e0 <print_string>
	cursor.y0 += 16;
 8000dbe:	4b53      	ldr	r3, [pc, #332]	@ (8000f0c <list_songs+0x218>)
 8000dc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	3310      	adds	r3, #16
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	b21a      	sxth	r2, r3
 8000dcc:	4b4f      	ldr	r3, [pc, #316]	@ (8000f0c <list_songs+0x218>)
 8000dce:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Song4", BLACK, BackGroundColor);
 8000dd0:	4b4e      	ldr	r3, [pc, #312]	@ (8000f0c <list_songs+0x218>)
 8000dd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dd6:	b298      	uxth	r0, r3
 8000dd8:	4b4c      	ldr	r3, [pc, #304]	@ (8000f0c <list_songs+0x218>)
 8000dda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dde:	b299      	uxth	r1, r3
 8000de0:	4b49      	ldr	r3, [pc, #292]	@ (8000f08 <list_songs+0x214>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	4a4d      	ldr	r2, [pc, #308]	@ (8000f20 <list_songs+0x22c>)
 8000dea:	f000 fcf9 	bl	80017e0 <print_string>

	init_cursor();
 8000dee:	f000 fa65 	bl	80012bc <init_cursor>

	cursor.x0 = 0;
 8000df2:	4b46      	ldr	r3, [pc, #280]	@ (8000f0c <list_songs+0x218>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	805a      	strh	r2, [r3, #2]
	cursor.y0 = 48;
 8000df8:	4b44      	ldr	r3, [pc, #272]	@ (8000f0c <list_songs+0x218>)
 8000dfa:	2230      	movs	r2, #48	@ 0x30
 8000dfc:	809a      	strh	r2, [r3, #4]

	int16_t x = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	807b      	strh	r3, [r7, #2]
	int16_t y = 48;
 8000e02:	2330      	movs	r3, #48	@ 0x30
 8000e04:	80fb      	strh	r3, [r7, #6]

	uint8_t Q = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	717b      	strb	r3, [r7, #5]

	uint8_t nrOptions = 4;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	707b      	strb	r3, [r7, #1]
	nrOptions--; /*0 inclus*/
 8000e0e:	787b      	ldrb	r3, [r7, #1]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	707b      	strb	r3, [r7, #1]

	draw_entity(&cursor);
 8000e14:	483d      	ldr	r0, [pc, #244]	@ (8000f0c <list_songs+0x218>)
 8000e16:	f000 feb9 	bl	8001b8c <draw_entity>

	while(1)
	{
		if(currentDx == DxDown)
 8000e1a:	4b42      	ldr	r3, [pc, #264]	@ (8000f24 <list_songs+0x230>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b77      	cmp	r3, #119	@ 0x77
 8000e20:	d11a      	bne.n	8000e58 <list_songs+0x164>
		{
			if(Q == nrOptions)
 8000e22:	797a      	ldrb	r2, [r7, #5]
 8000e24:	787b      	ldrb	r3, [r7, #1]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d104      	bne.n	8000e34 <list_songs+0x140>
			{
				Q = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	717b      	strb	r3, [r7, #5]
				y = 48;
 8000e2e:	2330      	movs	r3, #48	@ 0x30
 8000e30:	80fb      	strh	r3, [r7, #6]
 8000e32:	e006      	b.n	8000e42 <list_songs+0x14e>
			}

			else
			{
				Q++;
 8000e34:	797b      	ldrb	r3, [r7, #5]
 8000e36:	3301      	adds	r3, #1
 8000e38:	717b      	strb	r3, [r7, #5]
				y += 16;
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	3310      	adds	r3, #16
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	80fb      	strh	r3, [r7, #6]
			}

			translation_entity(&cursor, x, y, 0);
 8000e42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e46:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	482f      	ldr	r0, [pc, #188]	@ (8000f0c <list_songs+0x218>)
 8000e4e:	f000 ffa9 	bl	8001da4 <translation_entity>
			currentDx = 0;
 8000e52:	4b34      	ldr	r3, [pc, #208]	@ (8000f24 <list_songs+0x230>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxUp)
 8000e58:	4b32      	ldr	r3, [pc, #200]	@ (8000f24 <list_songs+0x230>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b55      	cmp	r3, #85	@ 0x55
 8000e5e:	d11d      	bne.n	8000e9c <list_songs+0x1a8>
		{
			if(Q == 0)
 8000e60:	797b      	ldrb	r3, [r7, #5]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d108      	bne.n	8000e78 <list_songs+0x184>
			{
				Q = nrOptions;
 8000e66:	787b      	ldrb	r3, [r7, #1]
 8000e68:	717b      	strb	r3, [r7, #5]
				y = 48+16*nrOptions;
 8000e6a:	787b      	ldrb	r3, [r7, #1]
 8000e6c:	3303      	adds	r3, #3
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	011b      	lsls	r3, r3, #4
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	80fb      	strh	r3, [r7, #6]
 8000e76:	e006      	b.n	8000e86 <list_songs+0x192>
			}
			else
			{
				Q--;
 8000e78:	797b      	ldrb	r3, [r7, #5]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	717b      	strb	r3, [r7, #5]
				y -= 16;
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	3b10      	subs	r3, #16
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	80fb      	strh	r3, [r7, #6]
			}

			translation_entity(&cursor, x, y, 0);
 8000e86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e8a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	481e      	ldr	r0, [pc, #120]	@ (8000f0c <list_songs+0x218>)
 8000e92:	f000 ff87 	bl	8001da4 <translation_entity>
			currentDx = 0;
 8000e96:	4b23      	ldr	r3, [pc, #140]	@ (8000f24 <list_songs+0x230>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxSelect)
 8000e9c:	4b21      	ldr	r3, [pc, #132]	@ (8000f24 <list_songs+0x230>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2bbb      	cmp	r3, #187	@ 0xbb
 8000ea2:	d122      	bne.n	8000eea <list_songs+0x1f6>
		{
			currentDx = 0;
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f24 <list_songs+0x230>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]

			switch(Q)
 8000eaa:	797b      	ldrb	r3, [r7, #5]
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d81b      	bhi.n	8000ee8 <list_songs+0x1f4>
 8000eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb8 <list_songs+0x1c4>)
 8000eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb6:	bf00      	nop
 8000eb8:	08000ec9 	.word	0x08000ec9
 8000ebc:	08000ed1 	.word	0x08000ed1
 8000ec0:	08000ed9 	.word	0x08000ed9
 8000ec4:	08000ee1 	.word	0x08000ee1
			{
				case 0:
					play_audio_file("Audio/acoustic.txt");
 8000ec8:	4817      	ldr	r0, [pc, #92]	@ (8000f28 <list_songs+0x234>)
 8000eca:	f000 f963 	bl	8001194 <play_audio_file>
					break;
 8000ece:	e00c      	b.n	8000eea <list_songs+0x1f6>
				case 1:
					play_audio_file("Audio/king.txt");
 8000ed0:	4816      	ldr	r0, [pc, #88]	@ (8000f2c <list_songs+0x238>)
 8000ed2:	f000 f95f 	bl	8001194 <play_audio_file>
					break;
 8000ed6:	e008      	b.n	8000eea <list_songs+0x1f6>
				case 2:
					play_audio_file("Audio/acoustic.txt");
 8000ed8:	4813      	ldr	r0, [pc, #76]	@ (8000f28 <list_songs+0x234>)
 8000eda:	f000 f95b 	bl	8001194 <play_audio_file>
					break;
 8000ede:	e004      	b.n	8000eea <list_songs+0x1f6>
				case 3:
					play_audio_file("Audio/acoustic.txt");
 8000ee0:	4811      	ldr	r0, [pc, #68]	@ (8000f28 <list_songs+0x234>)
 8000ee2:	f000 f957 	bl	8001194 <play_audio_file>
					break;
 8000ee6:	e000      	b.n	8000eea <list_songs+0x1f6>
				default:
					break;
 8000ee8:	bf00      	nop

			}

		}

		if(currentDx == DxRight)
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <list_songs+0x230>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b11      	cmp	r3, #17
 8000ef0:	d193      	bne.n	8000e1a <list_songs+0x126>
		{
			pback = 1;
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <list_songs+0x23c>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
			currentDx = 0;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <list_songs+0x230>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
			return;
 8000efe:	bf00      	nop


	}


}
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000094 	.word	0x20000094
 8000f10:	0800f114 	.word	0x0800f114
 8000f14:	0800f124 	.word	0x0800f124
 8000f18:	0800f12c 	.word	0x0800f12c
 8000f1c:	0800f134 	.word	0x0800f134
 8000f20:	0800f13c 	.word	0x0800f13c
 8000f24:	20000091 	.word	0x20000091
 8000f28:	0800f094 	.word	0x0800f094
 8000f2c:	0800f144 	.word	0x0800f144
 8000f30:	20000088 	.word	0x20000088

08000f34 <set_main_gui>:


static void set_main_gui(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af02      	add	r7, sp, #8
	 * user.
	 * Input: void
	 * Output: void
	 */

	init_cursor();
 8000f3a:	f000 f9bf 	bl	80012bc <init_cursor>

	BackGroundColor = WHITE;
 8000f3e:	4b41      	ldr	r3, [pc, #260]	@ (8001044 <set_main_gui+0x110>)
 8000f40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f44:	801a      	strh	r2, [r3, #0]
	fill_screen1(BackGroundColor);
 8000f46:	4b3f      	ldr	r3, [pc, #252]	@ (8001044 <set_main_gui+0x110>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fa8c 	bl	8001468 <fill_screen1>
	cursor.y0 = 16;
 8000f50:	4b3d      	ldr	r3, [pc, #244]	@ (8001048 <set_main_gui+0x114>)
 8000f52:	2210      	movs	r2, #16
 8000f54:	809a      	strh	r2, [r3, #4]
	cursor.x0 = 32;
 8000f56:	4b3c      	ldr	r3, [pc, #240]	@ (8001048 <set_main_gui+0x114>)
 8000f58:	2220      	movs	r2, #32
 8000f5a:	805a      	strh	r2, [r3, #2]

	print_string(cursor.x0, cursor.y0, "My Menu", BLACK, BackGroundColor);
 8000f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001048 <set_main_gui+0x114>)
 8000f5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f62:	b298      	uxth	r0, r3
 8000f64:	4b38      	ldr	r3, [pc, #224]	@ (8001048 <set_main_gui+0x114>)
 8000f66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	4b35      	ldr	r3, [pc, #212]	@ (8001044 <set_main_gui+0x110>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2300      	movs	r3, #0
 8000f74:	4a35      	ldr	r2, [pc, #212]	@ (800104c <set_main_gui+0x118>)
 8000f76:	f000 fc33 	bl	80017e0 <print_string>
	cursor.y0 += 32;
 8000f7a:	4b33      	ldr	r3, [pc, #204]	@ (8001048 <set_main_gui+0x114>)
 8000f7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	3320      	adds	r3, #32
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	b21a      	sxth	r2, r3
 8000f88:	4b2f      	ldr	r3, [pc, #188]	@ (8001048 <set_main_gui+0x114>)
 8000f8a:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Operating Systems", BLACK, BackGroundColor);
 8000f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001048 <set_main_gui+0x114>)
 8000f8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f92:	b298      	uxth	r0, r3
 8000f94:	4b2c      	ldr	r3, [pc, #176]	@ (8001048 <set_main_gui+0x114>)
 8000f96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f9a:	b299      	uxth	r1, r3
 8000f9c:	4b29      	ldr	r3, [pc, #164]	@ (8001044 <set_main_gui+0x110>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8001050 <set_main_gui+0x11c>)
 8000fa6:	f000 fc1b 	bl	80017e0 <print_string>
	cursor.y0 += 16;
 8000faa:	4b27      	ldr	r3, [pc, #156]	@ (8001048 <set_main_gui+0x114>)
 8000fac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	3310      	adds	r3, #16
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <set_main_gui+0x114>)
 8000fba:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Graphics", BLACK, BackGroundColor);
 8000fbc:	4b22      	ldr	r3, [pc, #136]	@ (8001048 <set_main_gui+0x114>)
 8000fbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fc2:	b298      	uxth	r0, r3
 8000fc4:	4b20      	ldr	r3, [pc, #128]	@ (8001048 <set_main_gui+0x114>)
 8000fc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fca:	b299      	uxth	r1, r3
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <set_main_gui+0x110>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8001054 <set_main_gui+0x120>)
 8000fd6:	f000 fc03 	bl	80017e0 <print_string>
	cursor.y0 += 16;
 8000fda:	4b1b      	ldr	r3, [pc, #108]	@ (8001048 <set_main_gui+0x114>)
 8000fdc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	3310      	adds	r3, #16
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <set_main_gui+0x114>)
 8000fea:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Audio", BLACK, BackGroundColor);
 8000fec:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <set_main_gui+0x114>)
 8000fee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ff2:	b298      	uxth	r0, r3
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <set_main_gui+0x114>)
 8000ff6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ffa:	b299      	uxth	r1, r3
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <set_main_gui+0x110>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2300      	movs	r3, #0
 8001004:	4a14      	ldr	r2, [pc, #80]	@ (8001058 <set_main_gui+0x124>)
 8001006:	f000 fbeb 	bl	80017e0 <print_string>
	cursor.y0 += 16;
 800100a:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <set_main_gui+0x114>)
 800100c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001010:	b29b      	uxth	r3, r3
 8001012:	3310      	adds	r3, #16
 8001014:	b29b      	uxth	r3, r3
 8001016:	b21a      	sxth	r2, r3
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <set_main_gui+0x114>)
 800101a:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "App1", BLACK, BackGroundColor);
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <set_main_gui+0x114>)
 800101e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001022:	b298      	uxth	r0, r3
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <set_main_gui+0x114>)
 8001026:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800102a:	b299      	uxth	r1, r3
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <set_main_gui+0x110>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2300      	movs	r3, #0
 8001034:	4a09      	ldr	r2, [pc, #36]	@ (800105c <set_main_gui+0x128>)
 8001036:	f000 fbd3 	bl	80017e0 <print_string>

	init_cursor();
 800103a:	f000 f93f 	bl	80012bc <init_cursor>

}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000008 	.word	0x20000008
 8001048:	20000094 	.word	0x20000094
 800104c:	0800f154 	.word	0x0800f154
 8001050:	0800f15c 	.word	0x0800f15c
 8001054:	0800f170 	.word	0x0800f170
 8001058:	0800f17c 	.word	0x0800f17c
 800105c:	0800f184 	.word	0x0800f184

08001060 <main_app>:




void main_app()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	 * Meniul prinicpal al aplicatiei.
	 * Input: void
	 * Output: void
	 */

	pback = 1;
 8001066:	4b48      	ldr	r3, [pc, #288]	@ (8001188 <main_app+0x128>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]

	cursor.x0 = 0;
 800106c:	4b47      	ldr	r3, [pc, #284]	@ (800118c <main_app+0x12c>)
 800106e:	2200      	movs	r2, #0
 8001070:	805a      	strh	r2, [r3, #2]
	cursor.y0 = 48;
 8001072:	4b46      	ldr	r3, [pc, #280]	@ (800118c <main_app+0x12c>)
 8001074:	2230      	movs	r2, #48	@ 0x30
 8001076:	809a      	strh	r2, [r3, #4]

	int16_t x = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	80fb      	strh	r3, [r7, #6]
	int16_t y = 48;
 800107c:	2330      	movs	r3, #48	@ 0x30
 800107e:	80bb      	strh	r3, [r7, #4]

	uint8_t Q = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	70fb      	strb	r3, [r7, #3]

	uint8_t nrOptions = 4;
 8001084:	2304      	movs	r3, #4
 8001086:	70bb      	strb	r3, [r7, #2]

	nrOptions--; /*0 inclus*/
 8001088:	78bb      	ldrb	r3, [r7, #2]
 800108a:	3b01      	subs	r3, #1
 800108c:	70bb      	strb	r3, [r7, #2]

	while(1)
	{
		if(pback == 1)
 800108e:	4b3e      	ldr	r3, [pc, #248]	@ (8001188 <main_app+0x128>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d113      	bne.n	80010be <main_app+0x5e>
			/*
			 * Initializare gui si pt cazul in care ne intaorcem
			 * dintr-o interfata selectat
			 */

			set_main_gui();
 8001096:	f7ff ff4d 	bl	8000f34 <set_main_gui>

			cursor.x0 = 0;
 800109a:	4b3c      	ldr	r3, [pc, #240]	@ (800118c <main_app+0x12c>)
 800109c:	2200      	movs	r2, #0
 800109e:	805a      	strh	r2, [r3, #2]
			cursor.y0 = 48;
 80010a0:	4b3a      	ldr	r3, [pc, #232]	@ (800118c <main_app+0x12c>)
 80010a2:	2230      	movs	r2, #48	@ 0x30
 80010a4:	809a      	strh	r2, [r3, #4]

			x = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	80fb      	strh	r3, [r7, #6]
			y = 48;
 80010aa:	2330      	movs	r3, #48	@ 0x30
 80010ac:	80bb      	strh	r3, [r7, #4]

			Q = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	70fb      	strb	r3, [r7, #3]

			draw_entity(&cursor);
 80010b2:	4836      	ldr	r0, [pc, #216]	@ (800118c <main_app+0x12c>)
 80010b4:	f000 fd6a 	bl	8001b8c <draw_entity>

			pback = 0;
 80010b8:	4b33      	ldr	r3, [pc, #204]	@ (8001188 <main_app+0x128>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
		}


		if(currentDx == DxDown)
 80010be:	4b34      	ldr	r3, [pc, #208]	@ (8001190 <main_app+0x130>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b77      	cmp	r3, #119	@ 0x77
 80010c4:	d11a      	bne.n	80010fc <main_app+0x9c>
		{
			if(Q == nrOptions)
 80010c6:	78fa      	ldrb	r2, [r7, #3]
 80010c8:	78bb      	ldrb	r3, [r7, #2]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d104      	bne.n	80010d8 <main_app+0x78>
			{
				Q = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	70fb      	strb	r3, [r7, #3]
				y = 48;
 80010d2:	2330      	movs	r3, #48	@ 0x30
 80010d4:	80bb      	strh	r3, [r7, #4]
 80010d6:	e006      	b.n	80010e6 <main_app+0x86>
			}

			else
			{
				Q++;
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	3301      	adds	r3, #1
 80010dc:	70fb      	strb	r3, [r7, #3]
				y += 16;
 80010de:	88bb      	ldrh	r3, [r7, #4]
 80010e0:	3310      	adds	r3, #16
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	80bb      	strh	r3, [r7, #4]
			}

			translation_entity(&cursor, x, y, 0);
 80010e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010ea:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010ee:	2300      	movs	r3, #0
 80010f0:	4826      	ldr	r0, [pc, #152]	@ (800118c <main_app+0x12c>)
 80010f2:	f000 fe57 	bl	8001da4 <translation_entity>
			currentDx = 0;
 80010f6:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <main_app+0x130>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxUp)
 80010fc:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <main_app+0x130>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b55      	cmp	r3, #85	@ 0x55
 8001102:	d11d      	bne.n	8001140 <main_app+0xe0>
		{
			if(Q == 0)
 8001104:	78fb      	ldrb	r3, [r7, #3]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d108      	bne.n	800111c <main_app+0xbc>
			{
				Q = nrOptions;
 800110a:	78bb      	ldrb	r3, [r7, #2]
 800110c:	70fb      	strb	r3, [r7, #3]
				y = 48+16*nrOptions;
 800110e:	78bb      	ldrb	r3, [r7, #2]
 8001110:	3303      	adds	r3, #3
 8001112:	b29b      	uxth	r3, r3
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	b29b      	uxth	r3, r3
 8001118:	80bb      	strh	r3, [r7, #4]
 800111a:	e006      	b.n	800112a <main_app+0xca>
			}
			else
			{
				Q--;
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	3b01      	subs	r3, #1
 8001120:	70fb      	strb	r3, [r7, #3]
				y -= 16;
 8001122:	88bb      	ldrh	r3, [r7, #4]
 8001124:	3b10      	subs	r3, #16
 8001126:	b29b      	uxth	r3, r3
 8001128:	80bb      	strh	r3, [r7, #4]
			}

			translation_entity(&cursor, x, y, 0);
 800112a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800112e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001132:	2300      	movs	r3, #0
 8001134:	4815      	ldr	r0, [pc, #84]	@ (800118c <main_app+0x12c>)
 8001136:	f000 fe35 	bl	8001da4 <translation_entity>
			currentDx = 0;
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <main_app+0x130>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxSelect)
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <main_app+0x130>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2bbb      	cmp	r3, #187	@ 0xbb
 8001146:	d1a2      	bne.n	800108e <main_app+0x2e>
		{
			currentDx = 0;
 8001148:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <main_app+0x130>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]

			switch(Q)
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	2b03      	cmp	r3, #3
 8001152:	d814      	bhi.n	800117e <main_app+0x11e>
 8001154:	a201      	add	r2, pc, #4	@ (adr r2, 800115c <main_app+0xfc>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	0800116d 	.word	0x0800116d
 8001160:	08001173 	.word	0x08001173
 8001164:	08001179 	.word	0x08001179
 8001168:	0800117f 	.word	0x0800117f
			{
				case 0:
					demo_os_1();
 800116c:	f7ff fa5c 	bl	8000628 <demo_os_1>
					break;
 8001170:	e006      	b.n	8001180 <main_app+0x120>
				case 1:
					list_graphics();
 8001172:	f7ff fd0b 	bl	8000b8c <list_graphics>
					break;
 8001176:	e003      	b.n	8001180 <main_app+0x120>
				case 2:
					list_songs();
 8001178:	f7ff fdbc 	bl	8000cf4 <list_songs>
					break;
 800117c:	e000      	b.n	8001180 <main_app+0x120>
				case 3:
					break;
				default:
					break;
 800117e:	bf00      	nop
			}

			currentDx = 0;
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <main_app+0x130>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
		if(pback == 1)
 8001186:	e782      	b.n	800108e <main_app+0x2e>
 8001188:	20000088 	.word	0x20000088
 800118c:	20000094 	.word	0x20000094
 8001190:	20000091 	.word	0x20000091

08001194 <play_audio_file>:
static bool flagBuffer = 0; /*Flag pentru a indica bufferul curent de redare*/



void play_audio_file(char *path)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af02      	add	r7, sp, #8
 800119a:	6078      	str	r0, [r7, #4]
	 * se va iesi din while(1), resetand fisierul la 0 si oprind fluxul DMA
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 800119c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80011a0:	f00d fd98 	bl	800ecd4 <malloc>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b3f      	ldr	r3, [pc, #252]	@ (80012a8 <play_audio_file+0x114>)
 80011aa:	601a      	str	r2, [r3, #0]

	bool flagAudioDone = 1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]

	if(buffer == NULL)
 80011b0:	4b3d      	ldr	r3, [pc, #244]	@ (80012a8 <play_audio_file+0x114>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d073      	beq.n	80012a0 <play_audio_file+0x10c>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	mutex = 1;
 80011b8:	4b3c      	ldr	r3, [pc, #240]	@ (80012ac <play_audio_file+0x118>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]
	currentDx = 0;
 80011be:	4b3c      	ldr	r3, [pc, #240]	@ (80012b0 <play_audio_file+0x11c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
	read_audio_file(path, buffer, &flagAudioDone); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 80011c4:	4b38      	ldr	r3, [pc, #224]	@ (80012a8 <play_audio_file+0x114>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f107 020f 	add.w	r2, r7, #15
 80011cc:	4619      	mov	r1, r3
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f002 fe76 	bl	8003ec0 <read_audio_file>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 80011d4:	4b34      	ldr	r3, [pc, #208]	@ (80012a8 <play_audio_file+0x114>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011e0:	2100      	movs	r1, #0
 80011e2:	4834      	ldr	r0, [pc, #208]	@ (80012b4 <play_audio_file+0x120>)
 80011e4:	f004 fa24 	bl	8005630 <HAL_DAC_Start_DMA>

	while(!flagAudioDone && currentDx!=DxSelect)
 80011e8:	e035      	b.n	8001256 <play_audio_file+0xc2>
	{
		mutex = 1;
 80011ea:	4b30      	ldr	r3, [pc, #192]	@ (80012ac <play_audio_file+0x118>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
		read_audio_file(path, buffer+1024, &flagAudioDone);
 80011f0:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <play_audio_file+0x114>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011f8:	f107 020f 	add.w	r2, r7, #15
 80011fc:	4619      	mov	r1, r3
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f002 fe5e 	bl	8003ec0 <read_audio_file>
		mutex = 0;
 8001204:	4b29      	ldr	r3, [pc, #164]	@ (80012ac <play_audio_file+0x118>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
		while(flagDmaDAC == 0);
 800120a:	bf00      	nop
 800120c:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <play_audio_file+0x124>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f083 0301 	eor.w	r3, r3, #1
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1f7      	bne.n	800120c <play_audio_file+0x78>
		flagDmaDAC = 0;
 800121c:	4b26      	ldr	r3, [pc, #152]	@ (80012b8 <play_audio_file+0x124>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
		mutex = 1;
 8001222:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <play_audio_file+0x118>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]
		read_audio_file(path, buffer, &flagAudioDone);
 8001228:	4b1f      	ldr	r3, [pc, #124]	@ (80012a8 <play_audio_file+0x114>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f107 020f 	add.w	r2, r7, #15
 8001230:	4619      	mov	r1, r3
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f002 fe44 	bl	8003ec0 <read_audio_file>
		mutex = 0;
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <play_audio_file+0x118>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
		while(flagDmaDAC == 0);
 800123e:	bf00      	nop
 8001240:	4b1d      	ldr	r3, [pc, #116]	@ (80012b8 <play_audio_file+0x124>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f083 0301 	eor.w	r3, r3, #1
 800124a:	b2db      	uxtb	r3, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f7      	bne.n	8001240 <play_audio_file+0xac>
		flagDmaDAC = 0;
 8001250:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <play_audio_file+0x124>)
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
	while(!flagAudioDone && currentDx!=DxSelect)
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	f083 0301 	eor.w	r3, r3, #1
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <play_audio_file+0xd6>
 8001262:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <play_audio_file+0x11c>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2bbb      	cmp	r3, #187	@ 0xbb
 8001268:	d1bf      	bne.n	80011ea <play_audio_file+0x56>

	}

	while(flagDmaDAC == 0);
 800126a:	bf00      	nop
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <play_audio_file+0x124>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f083 0301 	eor.w	r3, r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f7      	bne.n	800126c <play_audio_file+0xd8>
	flagDmaDAC = 0;
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <play_audio_file+0x124>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
	currentDx = 0;
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <play_audio_file+0x11c>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
	flagAudioDone = 1;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800128c:	2100      	movs	r1, #0
 800128e:	4809      	ldr	r0, [pc, #36]	@ (80012b4 <play_audio_file+0x120>)
 8001290:	f004 fa90 	bl	80057b4 <HAL_DAC_Stop_DMA>

	free(buffer);
 8001294:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <play_audio_file+0x114>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f00d fd23 	bl	800ece4 <free>
 800129e:	e000      	b.n	80012a2 <play_audio_file+0x10e>
		return;
 80012a0:	bf00      	nop

}
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000008c 	.word	0x2000008c
 80012ac:	200000ac 	.word	0x200000ac
 80012b0:	20000091 	.word	0x20000091
 80012b4:	20014184 	.word	0x20014184
 80012b8:	200144c6 	.word	0x200144c6

080012bc <init_cursor>:
uint16_t BackGroundColor = 0xFFFF; /*Variabila globala pentru culoarea de fundal curenta*/

ENTITY cursor;

void init_cursor()
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	cursor.id = 0x88;
 80012c0:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <init_cursor+0x34>)
 80012c2:	2288      	movs	r2, #136	@ 0x88
 80012c4:	701a      	strb	r2, [r3, #0]
	cursor.x0 = 0;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <init_cursor+0x34>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	805a      	strh	r2, [r3, #2]
	cursor.y0 = 0;
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <init_cursor+0x34>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	809a      	strh	r2, [r3, #4]
	cursor.x1 = 16;
 80012d2:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <init_cursor+0x34>)
 80012d4:	2210      	movs	r2, #16
 80012d6:	80da      	strh	r2, [r3, #6]
	cursor.y1 = 16;
 80012d8:	4b05      	ldr	r3, [pc, #20]	@ (80012f0 <init_cursor+0x34>)
 80012da:	2210      	movs	r2, #16
 80012dc:	811a      	strh	r2, [r3, #8]
	cursor.ST.color = RED;
 80012de:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <init_cursor+0x34>)
 80012e0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80012e4:	819a      	strh	r2, [r3, #12]
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	20000094 	.word	0x20000094

080012f4 <convert_color_16_to_18>:


void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	0adb      	lsrs	r3, r3, #11
 8001304:	b29b      	uxth	r3, r3
 8001306:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	115b      	asrs	r3, r3, #5
 800130c:	b2db      	uxtb	r3, r3
 800130e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001312:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	f003 031f 	and.w	r3, r3, #31
 800131c:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 800131e:	7bfa      	ldrb	r2, [r7, #15]
 8001320:	4613      	mov	r3, r2
 8001322:	019b      	lsls	r3, r3, #6
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	4a16      	ldr	r2, [pc, #88]	@ (8001380 <convert_color_16_to_18+0x8c>)
 8001328:	fb82 1203 	smull	r1, r2, r2, r3
 800132c:	441a      	add	r2, r3
 800132e:	1112      	asrs	r2, r2, #4
 8001330:	17db      	asrs	r3, r3, #31
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 800133a:	7bbb      	ldrb	r3, [r7, #14]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 8001340:	7b7a      	ldrb	r2, [r7, #13]
 8001342:	4613      	mov	r3, r2
 8001344:	019b      	lsls	r3, r3, #6
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	4a0d      	ldr	r2, [pc, #52]	@ (8001380 <convert_color_16_to_18+0x8c>)
 800134a:	fb82 1203 	smull	r1, r2, r2, r3
 800134e:	441a      	add	r2, r3
 8001350:	1112      	asrs	r2, r2, #4
 8001352:	17db      	asrs	r3, r3, #31
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	7bba      	ldrb	r2, [r7, #14]
 8001368:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	3302      	adds	r3, #2
 800136e:	7b7a      	ldrb	r2, [r7, #13]
 8001370:	701a      	strb	r2, [r3, #0]

}
 8001372:	bf00      	nop
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	84210843 	.word	0x84210843

08001384 <write_color>:


void write_color(uint16_t color)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 800138e:	f107 020c 	add.w	r2, r7, #12
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ffac 	bl	80012f4 <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 800139c:	f107 010c 	add.w	r1, r7, #12
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
 80013a4:	2203      	movs	r2, #3
 80013a6:	4803      	ldr	r0, [pc, #12]	@ (80013b4 <write_color+0x30>)
 80013a8:	f006 fdb9 	bl	8007f1e <HAL_SPI_Transmit>


}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2001427c 	.word	0x2001427c

080013b8 <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af02      	add	r7, sp, #8
 80013be:	4603      	mov	r3, r0
 80013c0:	80fb      	strh	r3, [r7, #6]
 80013c2:	460b      	mov	r3, r1
 80013c4:	80bb      	strh	r3, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 80013ca:	88bb      	ldrh	r3, [r7, #4]
 80013cc:	88fa      	ldrh	r2, [r7, #6]
 80013ce:	88b9      	ldrh	r1, [r7, #4]
 80013d0:	88f8      	ldrh	r0, [r7, #6]
 80013d2:	2477      	movs	r4, #119	@ 0x77
 80013d4:	9400      	str	r4, [sp, #0]
 80013d6:	f001 fd4b 	bl	8002e70 <set_adress_window>

	DC_DATA();
 80013da:	2201      	movs	r2, #1
 80013dc:	2108      	movs	r1, #8
 80013de:	480a      	ldr	r0, [pc, #40]	@ (8001408 <draw_pixel+0x50>)
 80013e0:	f005 f8ca 	bl	8006578 <HAL_GPIO_WritePin>
	CS_A();
 80013e4:	2200      	movs	r2, #0
 80013e6:	2110      	movs	r1, #16
 80013e8:	4807      	ldr	r0, [pc, #28]	@ (8001408 <draw_pixel+0x50>)
 80013ea:	f005 f8c5 	bl	8006578 <HAL_GPIO_WritePin>

	write_color(color);
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ffc7 	bl	8001384 <write_color>

	CS_D();
 80013f6:	2201      	movs	r2, #1
 80013f8:	2110      	movs	r1, #16
 80013fa:	4803      	ldr	r0, [pc, #12]	@ (8001408 <draw_pixel+0x50>)
 80013fc:	f005 f8bc 	bl	8006578 <HAL_GPIO_WritePin>

}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bd90      	pop	{r4, r7, pc}
 8001408:	40020c00 	.word	0x40020c00

0800140c <draw_pixel_data>:


static inline void draw_pixel_data(uint16_t x, uint16_t y, uint8_t *data)
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b085      	sub	sp, #20
 8001410:	af02      	add	r7, sp, #8
 8001412:	4603      	mov	r3, r0
 8001414:	603a      	str	r2, [r7, #0]
 8001416:	80fb      	strh	r3, [r7, #6]
 8001418:	460b      	mov	r3, r1
 800141a:	80bb      	strh	r3, [r7, #4]
	set_adress_window(x,y,x,y, 'w');
 800141c:	88bb      	ldrh	r3, [r7, #4]
 800141e:	88fa      	ldrh	r2, [r7, #6]
 8001420:	88b9      	ldrh	r1, [r7, #4]
 8001422:	88f8      	ldrh	r0, [r7, #6]
 8001424:	2477      	movs	r4, #119	@ 0x77
 8001426:	9400      	str	r4, [sp, #0]
 8001428:	f001 fd22 	bl	8002e70 <set_adress_window>

	DC_DATA();
 800142c:	2201      	movs	r2, #1
 800142e:	2108      	movs	r1, #8
 8001430:	480b      	ldr	r0, [pc, #44]	@ (8001460 <draw_pixel_data+0x54>)
 8001432:	f005 f8a1 	bl	8006578 <HAL_GPIO_WritePin>
	CS_A();
 8001436:	2200      	movs	r2, #0
 8001438:	2110      	movs	r1, #16
 800143a:	4809      	ldr	r0, [pc, #36]	@ (8001460 <draw_pixel_data+0x54>)
 800143c:	f005 f89c 	bl	8006578 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	2203      	movs	r2, #3
 8001446:	6839      	ldr	r1, [r7, #0]
 8001448:	4806      	ldr	r0, [pc, #24]	@ (8001464 <draw_pixel_data+0x58>)
 800144a:	f006 fd68 	bl	8007f1e <HAL_SPI_Transmit>

	CS_D();
 800144e:	2201      	movs	r2, #1
 8001450:	2110      	movs	r1, #16
 8001452:	4803      	ldr	r0, [pc, #12]	@ (8001460 <draw_pixel_data+0x54>)
 8001454:	f005 f890 	bl	8006578 <HAL_GPIO_WritePin>

}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	40020c00 	.word	0x40020c00
 8001464:	2001427c 	.word	0x2001427c

08001468 <fill_screen1>:



void fill_screen1(uint16_t color)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af02      	add	r7, sp, #8
 800146e:	4603      	mov	r3, r0
 8001470:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8001472:	f107 020c 	add.w	r2, r7, #12
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	4611      	mov	r1, r2
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff3a 	bl	80012f4 <convert_color_16_to_18>

	uint8_t *line = malloc(320*sizeof(pixel));
 8001480:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8001484:	f00d fc26 	bl	800ecd4 <malloc>
 8001488:	4603      	mov	r3, r0
 800148a:	613b      	str	r3, [r7, #16]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 800148c:	2377      	movs	r3, #119	@ 0x77
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	f240 13df 	movw	r3, #479	@ 0x1df
 8001494:	f240 123f 	movw	r2, #319	@ 0x13f
 8001498:	2100      	movs	r1, #0
 800149a:	2000      	movs	r0, #0
 800149c:	f001 fce8 	bl	8002e70 <set_adress_window>

	DC_DATA();
 80014a0:	2201      	movs	r2, #1
 80014a2:	2108      	movs	r1, #8
 80014a4:	481e      	ldr	r0, [pc, #120]	@ (8001520 <fill_screen1+0xb8>)
 80014a6:	f005 f867 	bl	8006578 <HAL_GPIO_WritePin>
	CS_A();
 80014aa:	2200      	movs	r2, #0
 80014ac:	2110      	movs	r1, #16
 80014ae:	481c      	ldr	r0, [pc, #112]	@ (8001520 <fill_screen1+0xb8>)
 80014b0:	f005 f862 	bl	8006578 <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	82fb      	strh	r3, [r7, #22]
 80014b8:	e00f      	b.n	80014da <fill_screen1+0x72>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 80014ba:	8afa      	ldrh	r2, [r7, #22]
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4413      	add	r3, r2
 80014c6:	461a      	mov	r2, r3
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	8819      	ldrh	r1, [r3, #0]
 80014ce:	789b      	ldrb	r3, [r3, #2]
 80014d0:	8011      	strh	r1, [r2, #0]
 80014d2:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 80014d4:	8afb      	ldrh	r3, [r7, #22]
 80014d6:	3301      	adds	r3, #1
 80014d8:	82fb      	strh	r3, [r7, #22]
 80014da:	8afb      	ldrh	r3, [r7, #22]
 80014dc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80014e0:	d3eb      	bcc.n	80014ba <fill_screen1+0x52>
	}

	for(uint16_t y=0; y<480; y++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	82bb      	strh	r3, [r7, #20]
 80014e6:	e00a      	b.n	80014fe <fill_screen1+0x96>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ec:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80014f0:	6939      	ldr	r1, [r7, #16]
 80014f2:	480c      	ldr	r0, [pc, #48]	@ (8001524 <fill_screen1+0xbc>)
 80014f4:	f006 fd13 	bl	8007f1e <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 80014f8:	8abb      	ldrh	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	82bb      	strh	r3, [r7, #20]
 80014fe:	8abb      	ldrh	r3, [r7, #20]
 8001500:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001504:	d3f0      	bcc.n	80014e8 <fill_screen1+0x80>

	}

	free(line);
 8001506:	6938      	ldr	r0, [r7, #16]
 8001508:	f00d fbec 	bl	800ece4 <free>

	CS_D();
 800150c:	2201      	movs	r2, #1
 800150e:	2110      	movs	r1, #16
 8001510:	4803      	ldr	r0, [pc, #12]	@ (8001520 <fill_screen1+0xb8>)
 8001512:	f005 f831 	bl	8006578 <HAL_GPIO_WritePin>

}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40020c00 	.word	0x40020c00
 8001524:	2001427c 	.word	0x2001427c

08001528 <fill_screen2>:


void fill_screen2(uint16_t color)
{
 8001528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800152c:	b08f      	sub	sp, #60	@ 0x3c
 800152e:	af02      	add	r7, sp, #8
 8001530:	4603      	mov	r3, r0
 8001532:	80fb      	strh	r3, [r7, #6]
 8001534:	466b      	mov	r3, sp
 8001536:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8001538:	2377      	movs	r3, #119	@ 0x77
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	f240 13df 	movw	r3, #479	@ 0x1df
 8001540:	f240 123f 	movw	r2, #319	@ 0x13f
 8001544:	2100      	movs	r1, #0
 8001546:	2000      	movs	r0, #0
 8001548:	f001 fc92 	bl	8002e70 <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 800154c:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 8001552:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8001556:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8001558:	88fb      	ldrh	r3, [r7, #6]
 800155a:	0adb      	lsrs	r3, r3, #11
 800155c:	b29b      	uxth	r3, r3
 800155e:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	115b      	asrs	r3, r3, #5
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800156a:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f003 031f 	and.w	r3, r3, #31
 8001574:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 8001576:	7ffa      	ldrb	r2, [r7, #31]
 8001578:	4613      	mov	r3, r2
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	1a9b      	subs	r3, r3, r2
 800157e:	4a4f      	ldr	r2, [pc, #316]	@ (80016bc <fill_screen2+0x194>)
 8001580:	fb82 1203 	smull	r1, r2, r2, r3
 8001584:	441a      	add	r2, r3
 8001586:	1112      	asrs	r2, r2, #4
 8001588:	17db      	asrs	r3, r3, #31
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 800158e:	7fba      	ldrb	r2, [r7, #30]
 8001590:	4613      	mov	r3, r2
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	4a4a      	ldr	r2, [pc, #296]	@ (80016c0 <fill_screen2+0x198>)
 8001598:	fb82 1203 	smull	r1, r2, r2, r3
 800159c:	441a      	add	r2, r3
 800159e:	1152      	asrs	r2, r2, #5
 80015a0:	17db      	asrs	r3, r3, #31
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 80015a6:	7f7a      	ldrb	r2, [r7, #29]
 80015a8:	4613      	mov	r3, r2
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	4a43      	ldr	r2, [pc, #268]	@ (80016bc <fill_screen2+0x194>)
 80015b0:	fb82 1203 	smull	r1, r2, r2, r3
 80015b4:	441a      	add	r2, r3
 80015b6:	1112      	asrs	r2, r2, #4
 80015b8:	17db      	asrs	r3, r3, #31
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 80015be:	2201      	movs	r2, #1
 80015c0:	2108      	movs	r1, #8
 80015c2:	4840      	ldr	r0, [pc, #256]	@ (80016c4 <fill_screen2+0x19c>)
 80015c4:	f004 ffd8 	bl	8006578 <HAL_GPIO_WritePin>
	CS_A();
 80015c8:	2200      	movs	r2, #0
 80015ca:	2110      	movs	r1, #16
 80015cc:	483d      	ldr	r0, [pc, #244]	@ (80016c4 <fill_screen2+0x19c>)
 80015ce:	f004 ffd3 	bl	8006578 <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 80015d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015d4:	460b      	mov	r3, r1
 80015d6:	3b01      	subs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	2300      	movs	r3, #0
 80015dc:	4688      	mov	r8, r1
 80015de:	4699      	mov	r9, r3
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015f4:	2300      	movs	r3, #0
 80015f6:	460c      	mov	r4, r1
 80015f8:	461d      	mov	r5, r3
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	00eb      	lsls	r3, r5, #3
 8001604:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001608:	00e2      	lsls	r2, r4, #3
 800160a:	1dcb      	adds	r3, r1, #7
 800160c:	08db      	lsrs	r3, r3, #3
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	ebad 0d03 	sub.w	sp, sp, r3
 8001614:	ab02      	add	r3, sp, #8
 8001616:	3300      	adds	r3, #0
 8001618:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800161e:	e011      	b.n	8001644 <fill_screen2+0x11c>
	{
		frame[j] = r;
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001624:	4413      	add	r3, r2
 8001626:	7ffa      	ldrb	r2, [r7, #31]
 8001628:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 800162a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162c:	3301      	adds	r3, #1
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	7fb9      	ldrb	r1, [r7, #30]
 8001632:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 8001634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001636:	3302      	adds	r3, #2
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	7f79      	ldrb	r1, [r7, #29]
 800163c:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 800163e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001640:	3303      	adds	r3, #3
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001644:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	429a      	cmp	r2, r3
 800164a:	d3e9      	bcc.n	8001620 <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 800164c:	6a3a      	ldr	r2, [r7, #32]
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 8001660:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <fill_screen2+0x1a0>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	@ 0x28
 800166a:	e012      	b.n	8001692 <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 800166c:	bf00      	nop
 800166e:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <fill_screen2+0x1a0>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0fa      	beq.n	800166e <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <fill_screen2+0x1a0>)
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 800167e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001680:	b29b      	uxth	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	6979      	ldr	r1, [r7, #20]
 8001686:	4811      	ldr	r0, [pc, #68]	@ (80016cc <fill_screen2+0x1a4>)
 8001688:	f007 f976 	bl	8008978 <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 800168c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800168e:	3301      	adds	r3, #1
 8001690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	429a      	cmp	r2, r3
 8001698:	d3e8      	bcc.n	800166c <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 800169a:	bf00      	nop
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <fill_screen2+0x1a0>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0fa      	beq.n	800169c <fill_screen2+0x174>
	CS_D();
 80016a6:	2201      	movs	r2, #1
 80016a8:	2110      	movs	r1, #16
 80016aa:	4806      	ldr	r0, [pc, #24]	@ (80016c4 <fill_screen2+0x19c>)
 80016ac:	f004 ff64 	bl	8006578 <HAL_GPIO_WritePin>
 80016b0:	46b5      	mov	sp, r6
}
 80016b2:	bf00      	nop
 80016b4:	3734      	adds	r7, #52	@ 0x34
 80016b6:	46bd      	mov	sp, r7
 80016b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016bc:	84210843 	.word	0x84210843
 80016c0:	82082083 	.word	0x82082083
 80016c4:	40020c00 	.word	0x40020c00
 80016c8:	200144c4 	.word	0x200144c4
 80016cc:	2001427c 	.word	0x2001427c

080016d0 <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b089      	sub	sp, #36	@ 0x24
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	4604      	mov	r4, r0
 80016d8:	4608      	mov	r0, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	4623      	mov	r3, r4
 80016e0:	80fb      	strh	r3, [r7, #6]
 80016e2:	4603      	mov	r3, r0
 80016e4:	80bb      	strh	r3, [r7, #4]
 80016e6:	460b      	mov	r3, r1
 80016e8:	70fb      	strb	r3, [r7, #3]
 80016ea:	4613      	mov	r3, r2
 80016ec:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 80016ee:	4b3a      	ldr	r3, [pc, #232]	@ (80017d8 <print_character+0x108>)
 80016f0:	889a      	ldrh	r2, [r3, #4]
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4413      	add	r3, r2
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29c      	uxth	r4, r3
 80016fc:	4b36      	ldr	r3, [pc, #216]	@ (80017d8 <print_character+0x108>)
 80016fe:	88da      	ldrh	r2, [r3, #6]
 8001700:	88bb      	ldrh	r3, [r7, #4]
 8001702:	4413      	add	r3, r2
 8001704:	b29b      	uxth	r3, r3
 8001706:	3b01      	subs	r3, #1
 8001708:	b29b      	uxth	r3, r3
 800170a:	88b9      	ldrh	r1, [r7, #4]
 800170c:	88f8      	ldrh	r0, [r7, #6]
 800170e:	2277      	movs	r2, #119	@ 0x77
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	4622      	mov	r2, r4
 8001714:	f001 fbac 	bl	8002e70 <set_adress_window>

	uint16_t mask = 0x8000;
 8001718:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800171c:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 8001722:	f107 020c 	add.w	r2, r7, #12
 8001726:	883b      	ldrh	r3, [r7, #0]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fde2 	bl	80012f4 <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 8001730:	f107 0208 	add.w	r2, r7, #8
 8001734:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fddb 	bl	80012f4 <convert_color_16_to_18>


	DC_DATA();
 800173e:	2201      	movs	r2, #1
 8001740:	2108      	movs	r1, #8
 8001742:	4826      	ldr	r0, [pc, #152]	@ (80017dc <print_character+0x10c>)
 8001744:	f004 ff18 	bl	8006578 <HAL_GPIO_WritePin>
	CS_A();
 8001748:	2200      	movs	r2, #0
 800174a:	2110      	movs	r1, #16
 800174c:	4823      	ldr	r0, [pc, #140]	@ (80017dc <print_character+0x10c>)
 800174e:	f004 ff13 	bl	8006578 <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 8001752:	2300      	movs	r3, #0
 8001754:	75fb      	strb	r3, [r7, #23]
 8001756:	e030      	b.n	80017ba <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 8001758:	4b1f      	ldr	r3, [pc, #124]	@ (80017d8 <print_character+0x108>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	3b20      	subs	r3, #32
 8001760:	491d      	ldr	r1, [pc, #116]	@ (80017d8 <print_character+0x108>)
 8001762:	88c9      	ldrh	r1, [r1, #6]
 8001764:	fb03 f101 	mul.w	r1, r3, r1
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	440b      	add	r3, r1
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8001774:	2300      	movs	r3, #0
 8001776:	75bb      	strb	r3, [r7, #22]
 8001778:	e016      	b.n	80017a8 <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 800177a:	8a7a      	ldrh	r2, [r7, #18]
 800177c:	7dbb      	ldrb	r3, [r7, #22]
 800177e:	409a      	lsls	r2, r3
 8001780:	8abb      	ldrh	r3, [r7, #20]
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2103      	movs	r1, #3
 800178e:	4618      	mov	r0, r3
 8001790:	f001 f9d6 	bl	8002b40 <LCD_send_data_multi>
 8001794:	e005      	b.n	80017a2 <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	2103      	movs	r1, #3
 800179c:	4618      	mov	r0, r3
 800179e:	f001 f9cf 	bl	8002b40 <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 80017a2:	7dbb      	ldrb	r3, [r7, #22]
 80017a4:	3301      	adds	r3, #1
 80017a6:	75bb      	strb	r3, [r7, #22]
 80017a8:	7dbb      	ldrb	r3, [r7, #22]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <print_character+0x108>)
 80017ae:	889b      	ldrh	r3, [r3, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d3e2      	bcc.n	800177a <print_character+0xaa>
	for(i=0; i<font.height; i++)
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	3301      	adds	r3, #1
 80017b8:	75fb      	strb	r3, [r7, #23]
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <print_character+0x108>)
 80017c0:	88db      	ldrh	r3, [r3, #6]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d3c8      	bcc.n	8001758 <print_character+0x88>
			}
		}
	}

	CS_D();
 80017c6:	2201      	movs	r2, #1
 80017c8:	2110      	movs	r1, #16
 80017ca:	4804      	ldr	r0, [pc, #16]	@ (80017dc <print_character+0x10c>)
 80017cc:	f004 fed4 	bl	8006578 <HAL_GPIO_WritePin>

}
 80017d0:	bf00      	nop
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}
 80017d8:	20000000 	.word	0x20000000
 80017dc:	40020c00 	.word	0x40020c00

080017e0 <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint16_t fontColor, uint16_t backColor)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b089      	sub	sp, #36	@ 0x24
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	60ba      	str	r2, [r7, #8]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	81fb      	strh	r3, [r7, #14]
 80017ee:	460b      	mov	r3, r1
 80017f0:	81bb      	strh	r3, [r7, #12]
 80017f2:	4613      	mov	r3, r2
 80017f4:	80fb      	strh	r3, [r7, #6]

	char *temp = string;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	617b      	str	r3, [r7, #20]

	while((*string)!='\0')
 80017fa:	e027      	b.n	800184c <print_string+0x6c>
	{
		if(x + font.width > 320)
 80017fc:	89fb      	ldrh	r3, [r7, #14]
 80017fe:	4a18      	ldr	r2, [pc, #96]	@ (8001860 <print_string+0x80>)
 8001800:	8892      	ldrh	r2, [r2, #4]
 8001802:	4413      	add	r3, r2
 8001804:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001808:	dd07      	ble.n	800181a <print_string+0x3a>
		{
			x = font.width;
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <print_string+0x80>)
 800180c:	889b      	ldrh	r3, [r3, #4]
 800180e:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 8001810:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <print_string+0x80>)
 8001812:	88da      	ldrh	r2, [r3, #6]
 8001814:	89bb      	ldrh	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 800181a:	89bb      	ldrh	r3, [r7, #12]
 800181c:	4a10      	ldr	r2, [pc, #64]	@ (8001860 <print_string+0x80>)
 800181e:	88d2      	ldrh	r2, [r2, #6]
 8001820:	4413      	add	r3, r2
 8001822:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001826:	dc16      	bgt.n	8001856 <print_string+0x76>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	88fc      	ldrh	r4, [r7, #6]
 800182e:	89b9      	ldrh	r1, [r7, #12]
 8001830:	89f8      	ldrh	r0, [r7, #14]
 8001832:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	4623      	mov	r3, r4
 8001838:	f7ff ff4a 	bl	80016d0 <print_character>
		string++;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	3301      	adds	r3, #1
 8001840:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8001842:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <print_string+0x80>)
 8001844:	889a      	ldrh	r2, [r3, #4]
 8001846:	89fb      	ldrh	r3, [r7, #14]
 8001848:	4413      	add	r3, r2
 800184a:	81fb      	strh	r3, [r7, #14]
	while((*string)!='\0')
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1d3      	bne.n	80017fc <print_string+0x1c>
 8001854:	e000      	b.n	8001858 <print_string+0x78>
			return;
 8001856:	bf00      	nop
	}

}
 8001858:	371c      	adds	r7, #28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd90      	pop	{r4, r7, pc}
 800185e:	bf00      	nop
 8001860:	20000000 	.word	0x20000000

08001864 <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b087      	sub	sp, #28
 8001868:	af02      	add	r7, sp, #8
 800186a:	4604      	mov	r4, r0
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4623      	mov	r3, r4
 8001874:	80fb      	strh	r3, [r7, #6]
 8001876:	4603      	mov	r3, r0
 8001878:	80bb      	strh	r3, [r7, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	807b      	strh	r3, [r7, #2]
 800187e:	4613      	mov	r3, r2
 8001880:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8001882:	88fa      	ldrh	r2, [r7, #6]
 8001884:	887b      	ldrh	r3, [r7, #2]
 8001886:	4413      	add	r3, r2
 8001888:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	3b01      	subs	r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	88bb      	ldrh	r3, [r7, #4]
 8001892:	88b9      	ldrh	r1, [r7, #4]
 8001894:	88f8      	ldrh	r0, [r7, #6]
 8001896:	2477      	movs	r4, #119	@ 0x77
 8001898:	9400      	str	r4, [sp, #0]
 800189a:	f001 fae9 	bl	8002e70 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 800189e:	f107 0208 	add.w	r2, r7, #8
 80018a2:	883b      	ldrh	r3, [r7, #0]
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fd24 	bl	80012f4 <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	81fb      	strh	r3, [r7, #14]
 80018b0:	e008      	b.n	80018c4 <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	2103      	movs	r1, #3
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 f941 	bl	8002b40 <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	3301      	adds	r3, #1
 80018c2:	81fb      	strh	r3, [r7, #14]
 80018c4:	89fa      	ldrh	r2, [r7, #14]
 80018c6:	8879      	ldrh	r1, [r7, #2]
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	1acb      	subs	r3, r1, r3
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbf0      	blt.n	80018b2 <draw_horizontal_line+0x4e>
	}


}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd90      	pop	{r4, r7, pc}

080018da <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 80018da:	b590      	push	{r4, r7, lr}
 80018dc:	b087      	sub	sp, #28
 80018de:	af02      	add	r7, sp, #8
 80018e0:	4604      	mov	r4, r0
 80018e2:	4608      	mov	r0, r1
 80018e4:	4611      	mov	r1, r2
 80018e6:	461a      	mov	r2, r3
 80018e8:	4623      	mov	r3, r4
 80018ea:	80fb      	strh	r3, [r7, #6]
 80018ec:	4603      	mov	r3, r0
 80018ee:	80bb      	strh	r3, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
 80018f4:	4613      	mov	r3, r2
 80018f6:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 80018f8:	88ba      	ldrh	r2, [r7, #4]
 80018fa:	887b      	ldrh	r3, [r7, #2]
 80018fc:	4413      	add	r3, r2
 80018fe:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8001900:	887b      	ldrh	r3, [r7, #2]
 8001902:	3b01      	subs	r3, #1
 8001904:	b29b      	uxth	r3, r3
 8001906:	88fa      	ldrh	r2, [r7, #6]
 8001908:	88b9      	ldrh	r1, [r7, #4]
 800190a:	88f8      	ldrh	r0, [r7, #6]
 800190c:	2477      	movs	r4, #119	@ 0x77
 800190e:	9400      	str	r4, [sp, #0]
 8001910:	f001 faae 	bl	8002e70 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8001914:	f107 0208 	add.w	r2, r7, #8
 8001918:	883b      	ldrh	r3, [r7, #0]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fce9 	bl	80012f4 <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8001922:	2300      	movs	r3, #0
 8001924:	81fb      	strh	r3, [r7, #14]
 8001926:	e008      	b.n	800193a <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	2103      	movs	r1, #3
 800192e:	4618      	mov	r0, r3
 8001930:	f001 f906 	bl	8002b40 <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8001934:	89fb      	ldrh	r3, [r7, #14]
 8001936:	3301      	adds	r3, #1
 8001938:	81fb      	strh	r3, [r7, #14]
 800193a:	89fa      	ldrh	r2, [r7, #14]
 800193c:	8879      	ldrh	r1, [r7, #2]
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	1acb      	subs	r3, r1, r3
 8001942:	429a      	cmp	r2, r3
 8001944:	dbf0      	blt.n	8001928 <draw_vertical_line+0x4e>
	}


}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}

08001950 <draw_rectangle_slow>:


void draw_rectangle_slow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b08b      	sub	sp, #44	@ 0x2c
 8001954:	af02      	add	r7, sp, #8
 8001956:	4604      	mov	r4, r0
 8001958:	4608      	mov	r0, r1
 800195a:	4611      	mov	r1, r2
 800195c:	461a      	mov	r2, r3
 800195e:	4623      	mov	r3, r4
 8001960:	80fb      	strh	r3, [r7, #6]
 8001962:	4603      	mov	r3, r0
 8001964:	80bb      	strh	r3, [r7, #4]
 8001966:	460b      	mov	r3, r1
 8001968:	807b      	strh	r3, [r7, #2]
 800196a:	4613      	mov	r3, r2
 800196c:	803b      	strh	r3, [r7, #0]
	 * 		  (x1,y1) offseturile fata de coordonatele initiale (numarul de pixeli)
	 * Output: Void
	 */


	uint16_t frameSize = 1024; /*nr de pixel dintr-un frame*/
 800196e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001972:	833b      	strh	r3, [r7, #24]
	uint8_t pixel[3];
	unsigned int pixelNr = x1*y1;
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	883a      	ldrh	r2, [r7, #0]
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	617b      	str	r3, [r7, #20]
	uint16_t frameNr = pixelNr/frameSize;
 800197e:	8b3b      	ldrh	r3, [r7, #24]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	83fb      	strh	r3, [r7, #30]
	uint16_t reaminder = pixelNr%frameSize;
 8001988:	8b3a      	ldrh	r2, [r7, #24]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001990:	fb01 f202 	mul.w	r2, r1, r2
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	827b      	strh	r3, [r7, #18]

	if(pixelNr%frameSize != 0)
 8001998:	8b3a      	ldrh	r2, [r7, #24]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fbb3 f1f2 	udiv	r1, r3, r2
 80019a0:	fb01 f202 	mul.w	r2, r1, r2
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <draw_rectangle_slow+0x60>
	{
		frameNr++;
 80019aa:	8bfb      	ldrh	r3, [r7, #30]
 80019ac:	3301      	adds	r3, #1
 80019ae:	83fb      	strh	r3, [r7, #30]
	}

	convert_color_16_to_18(color, pixel);
 80019b0:	f107 0208 	add.w	r2, r7, #8
 80019b4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fc9b 	bl	80012f4 <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*frameSize);
 80019be:	8b3a      	ldrh	r2, [r7, #24]
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f00d f984 	bl	800ecd4 <malloc>
 80019cc:	4603      	mov	r3, r0
 80019ce:	60fb      	str	r3, [r7, #12]

	for(uint16_t i=0; i<frameSize; i++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	83bb      	strh	r3, [r7, #28]
 80019d4:	e00f      	b.n	80019f6 <draw_rectangle_slow+0xa6>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 80019d6:	8bba      	ldrh	r2, [r7, #28]
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4413      	add	r3, r2
 80019e2:	461a      	mov	r2, r3
 80019e4:	f107 0308 	add.w	r3, r7, #8
 80019e8:	8819      	ldrh	r1, [r3, #0]
 80019ea:	789b      	ldrb	r3, [r3, #2]
 80019ec:	8011      	strh	r1, [r2, #0]
 80019ee:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<frameSize; i++)
 80019f0:	8bbb      	ldrh	r3, [r7, #28]
 80019f2:	3301      	adds	r3, #1
 80019f4:	83bb      	strh	r3, [r7, #28]
 80019f6:	8bba      	ldrh	r2, [r7, #28]
 80019f8:	8b3b      	ldrh	r3, [r7, #24]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d3eb      	bcc.n	80019d6 <draw_rectangle_slow+0x86>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 80019fe:	88fa      	ldrh	r2, [r7, #6]
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	4413      	add	r3, r2
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3b01      	subs	r3, #1
 8001a08:	b29c      	uxth	r4, r3
 8001a0a:	88ba      	ldrh	r2, [r7, #4]
 8001a0c:	883b      	ldrh	r3, [r7, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	3b01      	subs	r3, #1
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	88b9      	ldrh	r1, [r7, #4]
 8001a18:	88f8      	ldrh	r0, [r7, #6]
 8001a1a:	2277      	movs	r2, #119	@ 0x77
 8001a1c:	9200      	str	r2, [sp, #0]
 8001a1e:	4622      	mov	r2, r4
 8001a20:	f001 fa26 	bl	8002e70 <set_adress_window>

	for (uint16_t i=0; i<frameNr; i++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	837b      	strh	r3, [r7, #26]
 8001a28:	e01b      	b.n	8001a62 <draw_rectangle_slow+0x112>
	{
		if (i==frameNr-1 && reaminder!=0)
 8001a2a:	8b7a      	ldrh	r2, [r7, #26]
 8001a2c:	8bfb      	ldrh	r3, [r7, #30]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d10b      	bne.n	8001a4c <draw_rectangle_slow+0xfc>
 8001a34:	8a7b      	ldrh	r3, [r7, #18]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d008      	beq.n	8001a4c <draw_rectangle_slow+0xfc>
		{
			LCD_send_data_multi(data, reaminder*sizeof(pixel));
 8001a3a:	8a7a      	ldrh	r2, [r7, #18]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f001 f87b 	bl	8002b40 <LCD_send_data_multi>
 8001a4a:	e007      	b.n	8001a5c <draw_rectangle_slow+0x10c>
		}

		else
		{
			LCD_send_data_multi(data, frameSize*sizeof(pixel));
 8001a4c:	8b3a      	ldrh	r2, [r7, #24]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f001 f872 	bl	8002b40 <LCD_send_data_multi>
	for (uint16_t i=0; i<frameNr; i++)
 8001a5c:	8b7b      	ldrh	r3, [r7, #26]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	837b      	strh	r3, [r7, #26]
 8001a62:	8b7a      	ldrh	r2, [r7, #26]
 8001a64:	8bfb      	ldrh	r3, [r7, #30]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d3df      	bcc.n	8001a2a <draw_rectangle_slow+0xda>
		}

	}

	free(data);
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f00d f93a 	bl	800ece4 <free>

}
 8001a70:	bf00      	nop
 8001a72:	3724      	adds	r7, #36	@ 0x24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd90      	pop	{r4, r7, pc}

08001a78 <draw_rectangle>:


void draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b089      	sub	sp, #36	@ 0x24
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	4604      	mov	r4, r0
 8001a80:	4608      	mov	r0, r1
 8001a82:	4611      	mov	r1, r2
 8001a84:	461a      	mov	r2, r3
 8001a86:	4623      	mov	r3, r4
 8001a88:	80fb      	strh	r3, [r7, #6]
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80bb      	strh	r3, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	807b      	strh	r3, [r7, #2]
 8001a92:	4613      	mov	r3, r2
 8001a94:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */


	uint8_t pixel[3];
	uint16_t pixelNr = x1*y1;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	883b      	ldrh	r3, [r7, #0]
 8001a9a:	fb12 f303 	smulbb	r3, r2, r3
 8001a9e:	82bb      	strh	r3, [r7, #20]
	convert_color_16_to_18(color, pixel);
 8001aa0:	f107 020c 	add.w	r2, r7, #12
 8001aa4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fc23 	bl	80012f4 <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*pixelNr);
 8001aae:	8aba      	ldrh	r2, [r7, #20]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f00d f90c 	bl	800ecd4 <malloc>
 8001abc:	4603      	mov	r3, r0
 8001abe:	613b      	str	r3, [r7, #16]

	for(uint16_t i=0; i<pixelNr; i++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	82fb      	strh	r3, [r7, #22]
 8001ac4:	e00f      	b.n	8001ae6 <draw_rectangle+0x6e>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8001ac6:	8afa      	ldrh	r2, [r7, #22]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	4413      	add	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	8819      	ldrh	r1, [r3, #0]
 8001ada:	789b      	ldrb	r3, [r3, #2]
 8001adc:	8011      	strh	r1, [r2, #0]
 8001ade:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<pixelNr; i++)
 8001ae0:	8afb      	ldrh	r3, [r7, #22]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	82fb      	strh	r3, [r7, #22]
 8001ae6:	8afa      	ldrh	r2, [r7, #22]
 8001ae8:	8abb      	ldrh	r3, [r7, #20]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d3eb      	bcc.n	8001ac6 <draw_rectangle+0x4e>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 8001aee:	88fa      	ldrh	r2, [r7, #6]
 8001af0:	887b      	ldrh	r3, [r7, #2]
 8001af2:	4413      	add	r3, r2
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b29c      	uxth	r4, r3
 8001afa:	88ba      	ldrh	r2, [r7, #4]
 8001afc:	883b      	ldrh	r3, [r7, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	88b9      	ldrh	r1, [r7, #4]
 8001b08:	88f8      	ldrh	r0, [r7, #6]
 8001b0a:	2277      	movs	r2, #119	@ 0x77
 8001b0c:	9200      	str	r2, [sp, #0]
 8001b0e:	4622      	mov	r2, r4
 8001b10:	f001 f9ae 	bl	8002e70 <set_adress_window>
	LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8001b14:	8aba      	ldrh	r2, [r7, #20]
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6938      	ldr	r0, [r7, #16]
 8001b20:	f001 f80e 	bl	8002b40 <LCD_send_data_multi>

	free(data);
 8001b24:	6938      	ldr	r0, [r7, #16]
 8001b26:	f00d f8dd 	bl	800ece4 <free>

}
 8001b2a:	bf00      	nop
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd90      	pop	{r4, r7, pc}

08001b32 <init_entity_sd>:



void init_entity_sd(ENTITY *entity)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
	entity->x0 = 0;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	805a      	strh	r2, [r3, #2]
	entity->y0 = 0;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	809a      	strh	r2, [r3, #4]
	entity->y1 = 0;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	811a      	strh	r2, [r3, #8]
	entity->x1 = 0;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	80da      	strh	r2, [r3, #6]

	entity->ST.SD.filePathName = malloc(sizeof(char)*20);
 8001b52:	2014      	movs	r0, #20
 8001b54:	f00d f8be 	bl	800ecd4 <malloc>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	611a      	str	r2, [r3, #16]
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <free_entity_sd>:


void free_entity_sd(ENTITY *entity)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	free(entity->ST.SD.filePathName);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00d f8b5 	bl	800ece4 <free>
	free(entity->ST.SD.data);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00d f8b0 	bl	800ece4 <free>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <draw_entity>:


void draw_entity(ENTITY *entity)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b089      	sub	sp, #36	@ 0x24
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	6078      	str	r0, [r7, #4]
	 * Feature: De dat ca parametru numele unui fisier ce contine datele imaginii
	 * de afisat si nu culoarea, parametrul color e doar de test
	 */

	uint8_t *data;
	bool flagImgDone = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

	if(((entity->id & 1<<7) != 0))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	da72      	bge.n	8001c88 <draw_entity+0xfc>
	{
		/*Avem imagine monocolor <= 32x32 -> imagine nu se afla pe cardul SD!*/

		if((entity->id & (0xC0)) == 0xC0)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001baa:	2bc0      	cmp	r3, #192	@ 0xc0
 8001bac:	d108      	bne.n	8001bc0 <draw_entity+0x34>
		{
			/*
			 * Imagine stocata local in bufferul *data din afara structurii
			 */

			LCD_send_data_multi(entity->ST.LC.data, entity->ST.LC.size);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f000 ffc1 	bl	8002b40 <LCD_send_data_multi>
 8001bbe:	e0e8      	b.n	8001d92 <draw_entity+0x206>
			return;

		}

		uint16_t pixelNr = (entity->x1)*(entity->y1);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	fb12 f303 	smulbb	r3, r2, r3
 8001bd4:	82bb      	strh	r3, [r7, #20]

		uint8_t pixel[3];
		convert_color_16_to_18(entity->ST.color, pixel);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	899b      	ldrh	r3, [r3, #12]
 8001bda:	f107 020c 	add.w	r2, r7, #12
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fb87 	bl	80012f4 <convert_color_16_to_18>

		data = malloc(sizeof(pixel)*pixelNr);
 8001be6:	8aba      	ldrh	r2, [r7, #20]
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00d f870 	bl	800ecd4 <malloc>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	613b      	str	r3, [r7, #16]

		for(uint16_t i=0;i<pixelNr;i++ )
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	82fb      	strh	r3, [r7, #22]
 8001bfc:	e00f      	b.n	8001c1e <draw_entity+0x92>
		{
			memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8001bfe:	8afa      	ldrh	r2, [r7, #22]
 8001c00:	4613      	mov	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4413      	add	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4413      	add	r3, r2
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f107 030c 	add.w	r3, r7, #12
 8001c10:	8819      	ldrh	r1, [r3, #0]
 8001c12:	789b      	ldrb	r3, [r3, #2]
 8001c14:	8011      	strh	r1, [r2, #0]
 8001c16:	7093      	strb	r3, [r2, #2]
		for(uint16_t i=0;i<pixelNr;i++ )
 8001c18:	8afb      	ldrh	r3, [r7, #22]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	82fb      	strh	r3, [r7, #22]
 8001c1e:	8afa      	ldrh	r2, [r7, #22]
 8001c20:	8abb      	ldrh	r3, [r7, #20]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d3eb      	bcc.n	8001bfe <draw_entity+0x72>
		}

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c2c:	b298      	uxth	r0, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c34:	b299      	uxth	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29c      	uxth	r4, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	3b01      	subs	r3, #1
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	2277      	movs	r2, #119	@ 0x77
 8001c68:	9200      	str	r2, [sp, #0]
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	f001 f900 	bl	8002e70 <set_adress_window>
		LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8001c70:	8aba      	ldrh	r2, [r7, #20]
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	6938      	ldr	r0, [r7, #16]
 8001c7c:	f000 ff60 	bl	8002b40 <LCD_send_data_multi>

		free(data);
 8001c80:	6938      	ldr	r0, [r7, #16]
 8001c82:	f00d f82f 	bl	800ece4 <free>
 8001c86:	e084      	b.n	8001d92 <draw_entity+0x206>

	else
	{
		/*Imagine stocata in bufferul *data din cardul SD*/

		uint16_t byteNr = 0; /*index*/
 8001c88:	2300      	movs	r3, #0
 8001c8a:	817b      	strh	r3, [r7, #10]

		read_image_file(entity, &byteNr, &flagImgDone);
 8001c8c:	f107 020f 	add.w	r2, r7, #15
 8001c90:	f107 030a 	add.w	r3, r7, #10
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f002 fa58 	bl	800414c <read_image_file>

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ca2:	b298      	uxth	r0, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001caa:	b299      	uxth	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29c      	uxth	r4, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	2277      	movs	r2, #119	@ 0x77
 8001cde:	9200      	str	r2, [sp, #0]
 8001ce0:	4622      	mov	r2, r4
 8001ce2:	f001 f8c5 	bl	8002e70 <set_adress_window>

		DC_DATA();
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2108      	movs	r1, #8
 8001cea:	482b      	ldr	r0, [pc, #172]	@ (8001d98 <draw_entity+0x20c>)
 8001cec:	f004 fc44 	bl	8006578 <HAL_GPIO_WritePin>
		CS_A();
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2110      	movs	r1, #16
 8001cf4:	4828      	ldr	r0, [pc, #160]	@ (8001d98 <draw_entity+0x20c>)
 8001cf6:	f004 fc3f 	bl	8006578 <HAL_GPIO_WritePin>

		if(byteNr < 3072)
 8001cfa:	897b      	ldrh	r3, [r7, #10]
 8001cfc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001d00:	d20c      	bcs.n	8001d1c <draw_entity+0x190>
		{
			/*
			 * Pentru cazul unui singur frame de transmis
			 */

			LCD_send_data_multi(entity->ST.SD.data, byteNr);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	897a      	ldrh	r2, [r7, #10]
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 ff18 	bl	8002b40 <LCD_send_data_multi>
			free(entity->ST.SD.data);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f00c ffe5 	bl	800ece4 <free>
 8001d1a:	e03a      	b.n	8001d92 <draw_entity+0x206>
		else
		{
			/*
			 * Pentru cazul mai multor frameuri
			 */
			flagDmaSpiTx = 0;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <draw_entity+0x210>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]

			//LCD_send_data_multi(entity->data, byteNr);
			HAL_SPI_Transmit_DMA(&hspi1, entity->ST.SD.data, byteNr);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	897a      	ldrh	r2, [r7, #10]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	481d      	ldr	r0, [pc, #116]	@ (8001da0 <draw_entity+0x214>)
 8001d2c:	f006 fe24 	bl	8008978 <HAL_SPI_Transmit_DMA>

			do
			{
				if(flagImgDone == 1)
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d11c      	bne.n	8001d70 <draw_entity+0x1e4>
				{
					break;
				}

				read_image_file(entity, &byteNr, &flagImgDone);
 8001d36:	f107 020f 	add.w	r2, r7, #15
 8001d3a:	f107 030a 	add.w	r3, r7, #10
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f002 fa03 	bl	800414c <read_image_file>

				while(flagDmaSpiTx == 0);
 8001d46:	bf00      	nop
 8001d48:	4b14      	ldr	r3, [pc, #80]	@ (8001d9c <draw_entity+0x210>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0fa      	beq.n	8001d48 <draw_entity+0x1bc>
				flagDmaSpiTx = 0;
 8001d52:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <draw_entity+0x210>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, entity->ST.SD.data, byteNr);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	897a      	ldrh	r2, [r7, #10]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480f      	ldr	r0, [pc, #60]	@ (8001da0 <draw_entity+0x214>)
 8001d62:	f006 fe09 	bl	8008978 <HAL_SPI_Transmit_DMA>

			}while(byteNr >= 3072);
 8001d66:	897b      	ldrh	r3, [r7, #10]
 8001d68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001d6c:	d2e0      	bcs.n	8001d30 <draw_entity+0x1a4>
 8001d6e:	e000      	b.n	8001d72 <draw_entity+0x1e6>
					break;
 8001d70:	bf00      	nop

		}

		while(flagDmaSpiTx == 0);
 8001d72:	bf00      	nop
 8001d74:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <draw_entity+0x210>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0fa      	beq.n	8001d74 <draw_entity+0x1e8>
		free(entity->ST.SD.data);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f00c ffae 	bl	800ece4 <free>
		CS_D();
 8001d88:	2201      	movs	r2, #1
 8001d8a:	2110      	movs	r1, #16
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <draw_entity+0x20c>)
 8001d8e:	f004 fbf3 	bl	8006578 <HAL_GPIO_WritePin>

	}


}
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	200144c4 	.word	0x200144c4
 8001da0:	2001427c 	.word	0x2001427c

08001da4 <translation_entity>:



void translation_entity(ENTITY *const restrict entity, int16_t x, int16_t y, bool TurnOnStep)
{
 8001da4:	b5b0      	push	{r4, r5, r7, lr}
 8001da6:	b08c      	sub	sp, #48	@ 0x30
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	4608      	mov	r0, r1
 8001dae:	4611      	mov	r1, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	4603      	mov	r3, r0
 8001db4:	817b      	strh	r3, [r7, #10]
 8001db6:	460b      	mov	r3, r1
 8001db8:	813b      	strh	r3, [r7, #8]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	71fb      	strb	r3, [r7, #7]
	 * 		  Modul de Step activ 1, neactiv 0 (deplasare in interiorul ferestrei initiale)
	 * Output: Void
	 */


	if((x)<0 || (x+entity->x1)>LCD_Width || (y)<0 || (y+entity->y1)> LCD_Length)
 8001dbe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f2c0 8117 	blt.w	8001ff6 <translation_entity+0x252>
 8001dc8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001dd8:	f300 810d 	bgt.w	8001ff6 <translation_entity+0x252>
 8001ddc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f2c0 8108 	blt.w	8001ff6 <translation_entity+0x252>
 8001de6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001df0:	4413      	add	r3, r2
 8001df2:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001df6:	f300 80fe 	bgt.w	8001ff6 <translation_entity+0x252>

		return;
	}


	ENTITY temp = *entity;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f107 0414 	add.w	r4, r7, #20
 8001e00:	461d      	mov	r5, r3
 8001e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e06:	682b      	ldr	r3, [r5, #0]
 8001e08:	6023      	str	r3, [r4, #0]

	entity->x0 = x;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	897a      	ldrh	r2, [r7, #10]
 8001e0e:	805a      	strh	r2, [r3, #2]
	entity->y0 = y;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	893a      	ldrh	r2, [r7, #8]
 8001e14:	809a      	strh	r2, [r3, #4]


	if((temp.y0 == y) && (TurnOnStep==1))
 8001e16:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e1a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d163      	bne.n	8001eea <translation_entity+0x146>
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d060      	beq.n	8001eea <translation_entity+0x146>
	{
		/*Pentru cazul unui Step cuprins in cadrul anterior pe axa x*/

		if((x < (temp.x0+temp.x1)) && (x > (temp.x0)))
 8001e28:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e30:	4619      	mov	r1, r3
 8001e32:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e36:	440b      	add	r3, r1
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	da23      	bge.n	8001e84 <translation_entity+0xe0>
 8001e3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e40:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dd1d      	ble.n	8001e84 <translation_entity+0xe0>
		{
			/*Pentru cazul deplasarii pe +x*/
			mutex = 1;
 8001e48:	4b6f      	ldr	r3, [pc, #444]	@ (8002008 <translation_entity+0x264>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
			draw_entity(entity);
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f7ff fe9c 	bl	8001b8c <draw_entity>
			draw_rectangle(temp.x0, temp.y0, x-temp.x0, temp.y1, BackGroundColor); /*Culoare background*/
 8001e54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e58:	b298      	uxth	r0, r3
 8001e5a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e5e:	b299      	uxth	r1, r3
 8001e60:	897a      	ldrh	r2, [r7, #10]
 8001e62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e70:	b29c      	uxth	r4, r3
 8001e72:	4b66      	ldr	r3, [pc, #408]	@ (800200c <translation_entity+0x268>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	4623      	mov	r3, r4
 8001e7a:	f7ff fdfd 	bl	8001a78 <draw_rectangle>
			mutex = 0;
 8001e7e:	4b62      	ldr	r3, [pc, #392]	@ (8002008 <translation_entity+0x264>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
		}

		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8001e84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e88:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f280 80b4 	bge.w	8001ffa <translation_entity+0x256>
 8001e92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e96:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	f340 80aa 	ble.w	8001ffa <translation_entity+0x256>
		{
			/*Pentru cazul deplasarii pe -x*/
			mutex = 1;
 8001ea6:	4b58      	ldr	r3, [pc, #352]	@ (8002008 <translation_entity+0x264>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
			draw_entity(entity);
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f7ff fe6d 	bl	8001b8c <draw_entity>
			draw_rectangle(temp.x0+temp.x1-(temp.x0-x), temp.y0, temp.x0-x, temp.y1, BackGroundColor); /*Culoare background*/
 8001eb2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	897b      	ldrh	r3, [r7, #10]
 8001eba:	4413      	add	r3, r2
 8001ebc:	b298      	uxth	r0, r3
 8001ebe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ec2:	b299      	uxth	r1, r3
 8001ec4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	897b      	ldrh	r3, [r7, #10]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ed4:	b29c      	uxth	r4, r3
 8001ed6:	4b4d      	ldr	r3, [pc, #308]	@ (800200c <translation_entity+0x268>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	4623      	mov	r3, r4
 8001ede:	f7ff fdcb 	bl	8001a78 <draw_rectangle>
			mutex = 0;
 8001ee2:	4b49      	ldr	r3, [pc, #292]	@ (8002008 <translation_entity+0x264>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8001ee8:	e087      	b.n	8001ffa <translation_entity+0x256>

	}

	else

		if((temp.x0==x) && (TurnOnStep==1))
 8001eea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001eee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d163      	bne.n	8001fbe <translation_entity+0x21a>
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d060      	beq.n	8001fbe <translation_entity+0x21a>
		{
			if((y < (temp.y0+temp.y1)) && (y > (temp.y0)))
 8001efc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f00:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f0a:	440b      	add	r3, r1
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	da24      	bge.n	8001f5a <translation_entity+0x1b6>
 8001f10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f14:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	dd1e      	ble.n	8001f5a <translation_entity+0x1b6>
			{
				/*Pentru cazul deplasarii pe +y*/
				mutex = 1;
 8001f1c:	4b3a      	ldr	r3, [pc, #232]	@ (8002008 <translation_entity+0x264>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
				draw_entity(entity);
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7ff fe32 	bl	8001b8c <draw_entity>
				draw_rectangle(temp.x0, temp.y0, temp.x1, y-temp.y0, BackGroundColor);
 8001f28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f2c:	b298      	uxth	r0, r3
 8001f2e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f32:	b299      	uxth	r1, r3
 8001f34:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f38:	b29c      	uxth	r4, r3
 8001f3a:	893a      	ldrh	r2, [r7, #8]
 8001f3c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	4b31      	ldr	r3, [pc, #196]	@ (800200c <translation_entity+0x268>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	4622      	mov	r2, r4
 8001f50:	f7ff fd92 	bl	8001a78 <draw_rectangle>
				mutex = 0;
 8001f54:	4b2c      	ldr	r3, [pc, #176]	@ (8002008 <translation_entity+0x264>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
			}

			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001f5a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001f5e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	da4b      	bge.n	8001ffe <translation_entity+0x25a>
 8001f66:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001f6a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001f74:	4293      	cmp	r3, r2
 8001f76:	dd42      	ble.n	8001ffe <translation_entity+0x25a>
			{
				/*Pentru cazul deplasarii pe -y*/
				mutex = 1;
 8001f78:	4b23      	ldr	r3, [pc, #140]	@ (8002008 <translation_entity+0x264>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
				draw_entity(entity);
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f7ff fe04 	bl	8001b8c <draw_entity>
				draw_rectangle(temp.x0, temp.y0+temp.y1-(temp.y0-y), temp.x1, temp.y0-y, BackGroundColor);
 8001f84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f88:	b298      	uxth	r0, r3
 8001f8a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	893b      	ldrh	r3, [r7, #8]
 8001f92:	4413      	add	r3, r2
 8001f94:	b299      	uxth	r1, r3
 8001f96:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f9a:	b29c      	uxth	r4, r3
 8001f9c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	893b      	ldrh	r3, [r7, #8]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b18      	ldr	r3, [pc, #96]	@ (800200c <translation_entity+0x268>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	4622      	mov	r2, r4
 8001fb2:	f7ff fd61 	bl	8001a78 <draw_rectangle>
				mutex = 0;
 8001fb6:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <translation_entity+0x264>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001fbc:	e01f      	b.n	8001ffe <translation_entity+0x25a>
		}

		else
		{
			/*Pentru orice alt caz (deplasare pe diagonala sau aleatoriu)*/
			mutex = 1;
 8001fbe:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <translation_entity+0x264>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
			draw_rectangle(temp.x0, temp.y0, temp.x1, temp.y1, BackGroundColor);
 8001fc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fc8:	b298      	uxth	r0, r3
 8001fca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001fce:	b299      	uxth	r1, r3
 8001fd0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fda:	b29c      	uxth	r4, r3
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <translation_entity+0x268>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	4623      	mov	r3, r4
 8001fe4:	f7ff fd48 	bl	8001a78 <draw_rectangle>
			draw_entity(entity);
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f7ff fdcf 	bl	8001b8c <draw_entity>
			mutex = 0;
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <translation_entity+0x264>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	e004      	b.n	8002000 <translation_entity+0x25c>
		return;
 8001ff6:	bf00      	nop
 8001ff8:	e002      	b.n	8002000 <translation_entity+0x25c>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8001ffa:	bf00      	nop
 8001ffc:	e000      	b.n	8002000 <translation_entity+0x25c>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8001ffe:	bf00      	nop
		}


}
 8002000:	3728      	adds	r7, #40	@ 0x28
 8002002:	46bd      	mov	sp, r7
 8002004:	bdb0      	pop	{r4, r5, r7, pc}
 8002006:	bf00      	nop
 8002008:	200000ac 	.word	0x200000ac
 800200c:	20000008 	.word	0x20000008

08002010 <translation_test>:


void translation_test(ENTITY *entity, uint8_t step, uint16_t delay)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	70fb      	strb	r3, [r7, #3]
 800201c:	4613      	mov	r3, r2
 800201e:	803b      	strh	r3, [r7, #0]


	while(1)
	{
		while((entity->x0 + entity->x1) < LCD_Width)
 8002020:	e013      	b.n	800204a <translation_test+0x3a>
		{
			translation_entity(entity, entity->x0+step, entity->y0, 1);//, color);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002028:	b29a      	uxth	r2, r3
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	b29b      	uxth	r3, r3
 800202e:	4413      	add	r3, r2
 8002030:	b29b      	uxth	r3, r3
 8002032:	b219      	sxth	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800203a:	2301      	movs	r3, #1
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff feb1 	bl	8001da4 <translation_entity>
			HAL_Delay(delay);
 8002042:	883b      	ldrh	r3, [r7, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f003 f99b 	bl	8005380 <HAL_Delay>
		while((entity->x0 + entity->x1) < LCD_Width)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002050:	461a      	mov	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002058:	4413      	add	r3, r2
 800205a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800205e:	dbe0      	blt.n	8002022 <translation_test+0x12>
		}
		mutex = 1;
 8002060:	4b54      	ldr	r3, [pc, #336]	@ (80021b4 <translation_test+0x1a4>)
 8002062:	2201      	movs	r2, #1
 8002064:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fd90 	bl	8001b8c <draw_entity>
		mutex = 0;
 800206c:	4b51      	ldr	r3, [pc, #324]	@ (80021b4 <translation_test+0x1a4>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
		entity->x0 = LCD_Width - entity->x1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002078:	b29b      	uxth	r3, r3
 800207a:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800207e:	b29b      	uxth	r3, r3
 8002080:	b21a      	sxth	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	805a      	strh	r2, [r3, #2]

		while((entity->y0 + entity->y1) < LCD_Length)
 8002086:	e013      	b.n	80020b0 <translation_test+0xa0>
		{

			translation_entity(entity, entity->x0, entity->y0+step, 1);//, color);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002094:	b29a      	uxth	r2, r3
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	b29b      	uxth	r3, r3
 800209a:	4413      	add	r3, r2
 800209c:	b29b      	uxth	r3, r3
 800209e:	b21a      	sxth	r2, r3
 80020a0:	2301      	movs	r3, #1
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff fe7e 	bl	8001da4 <translation_entity>
			HAL_Delay(delay);
 80020a8:	883b      	ldrh	r3, [r7, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 f968 	bl	8005380 <HAL_Delay>
		while((entity->y0 + entity->y1) < LCD_Length)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020b6:	461a      	mov	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020be:	4413      	add	r3, r2
 80020c0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80020c4:	dbe0      	blt.n	8002088 <translation_test+0x78>
		}

		mutex = 1;
 80020c6:	4b3b      	ldr	r3, [pc, #236]	@ (80021b4 <translation_test+0x1a4>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff fd5d 	bl	8001b8c <draw_entity>
		mutex = 0;
 80020d2:	4b38      	ldr	r3, [pc, #224]	@ (80021b4 <translation_test+0x1a4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
		entity->y0 = LCD_Length - entity->y1;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	b21a      	sxth	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	809a      	strh	r2, [r3, #4]

		while((entity->x0 - step) > 0)
 80020ec:	e013      	b.n	8002116 <translation_test+0x106>
		{
			translation_entity(entity, entity->x0-step, entity->y0, 1);//, color);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	b219      	sxth	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8002106:	2301      	movs	r3, #1
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff fe4b 	bl	8001da4 <translation_entity>
			HAL_Delay(delay);
 800210e:	883b      	ldrh	r3, [r7, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f003 f935 	bl	8005380 <HAL_Delay>
		while((entity->x0 - step) > 0)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800211c:	461a      	mov	r2, r3
 800211e:	78fb      	ldrb	r3, [r7, #3]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	dce3      	bgt.n	80020ee <translation_test+0xde>
		}

		entity->ST.color = 0xFFFF;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800212c:	819a      	strh	r2, [r3, #12]
		mutex = 1;
 800212e:	4b21      	ldr	r3, [pc, #132]	@ (80021b4 <translation_test+0x1a4>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff fd29 	bl	8001b8c <draw_entity>
		mutex = 0;
 800213a:	4b1e      	ldr	r3, [pc, #120]	@ (80021b4 <translation_test+0x1a4>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
		entity->ST.color = 0xF100;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8002146:	819a      	strh	r2, [r3, #12]
		entity->x0 = 0;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	805a      	strh	r2, [r3, #2]

		while((entity->y0 - step) > 0)
 800214e:	e013      	b.n	8002178 <translation_test+0x168>
		{
			translation_entity(entity, entity->x0, entity->y0-step, 1);//, color);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800215c:	b29a      	uxth	r2, r3
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	b29b      	uxth	r3, r3
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	b29b      	uxth	r3, r3
 8002166:	b21a      	sxth	r2, r3
 8002168:	2301      	movs	r3, #1
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff fe1a 	bl	8001da4 <translation_entity>
			HAL_Delay(delay);
 8002170:	883b      	ldrh	r3, [r7, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f003 f904 	bl	8005380 <HAL_Delay>
		while((entity->y0 - step) > 0)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800217e:	461a      	mov	r2, r3
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	dce3      	bgt.n	8002150 <translation_test+0x140>
		}
		entity->ST.color = 0xFFFF;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800218e:	819a      	strh	r2, [r3, #12]
		mutex = 1;
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <translation_test+0x1a4>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fcf8 	bl	8001b8c <draw_entity>
		mutex = 0;
 800219c:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <translation_test+0x1a4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
		entity->ST.color = 0xF100;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 80021a8:	819a      	strh	r2, [r3, #12]
		entity->y0 = 0;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	809a      	strh	r2, [r3, #4]
		while((entity->x0 + entity->x1) < LCD_Width)
 80021b0:	e74b      	b.n	800204a <translation_test+0x3a>
 80021b2:	bf00      	nop
 80021b4:	200000ac 	.word	0x200000ac

080021b8 <scaling_entity>:
	}
}


void scaling_entity(ENTITY *entity, const float factor)
{
 80021b8:	b590      	push	{r4, r7, lr}
 80021ba:	b093      	sub	sp, #76	@ 0x4c
 80021bc:	af02      	add	r7, sp, #8
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	ed87 0a00 	vstr	s0, [r7]
	/*
	 * Initial vom afla noile marimi pentru imaginea
	 * de scalat
	 */

	int16_t x1 = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int16_t y1 = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	x1 = (int16_t)((entity->x1)*factor);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021da:	edd7 7a00 	vldr	s15, [r7]
 80021de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021e6:	ee17 3a90 	vmov	r3, s15
 80021ea:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	y1 = (int16_t)((entity->y1)*factor);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021fa:	edd7 7a00 	vldr	s15, [r7]
 80021fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002206:	ee17 3a90 	vmov	r3, s15
 800220a:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	if((entity->x0+x1) > 320 || (entity->y0+y1)>480)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002212:	461a      	mov	r2, r3
 8002214:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8002218:	4413      	add	r3, r2
 800221a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800221e:	f300 8141 	bgt.w	80024a4 <scaling_entity+0x2ec>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002228:	461a      	mov	r2, r3
 800222a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800222e:	4413      	add	r3, r2
 8002230:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8002234:	f300 8136 	bgt.w	80024a4 <scaling_entity+0x2ec>
		return;
	}

	FRESULT res;
	char *scalFilePath;
	char *tempFile = "graphic/scalare/temp.bin";
 8002238:	4b9e      	ldr	r3, [pc, #632]	@ (80024b4 <scaling_entity+0x2fc>)
 800223a:	62bb      	str	r3, [r7, #40]	@ 0x28
	char *fileName = return_file_name_current_path(entity->ST.SD.filePathName);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	4618      	mov	r0, r3
 8002242:	f001 fe08 	bl	8003e56 <return_file_name_current_path>
 8002246:	6278      	str	r0, [r7, #36]	@ 0x24

	scalFilePath = assign_filePath("graphic/scalare/");
 8002248:	489b      	ldr	r0, [pc, #620]	@ (80024b8 <scaling_entity+0x300>)
 800224a:	f001 fde0 	bl	8003e0e <assign_filePath>
 800224e:	6238      	str	r0, [r7, #32]
	scalFilePath = realloc(scalFilePath, strlen(scalFilePath)+ strlen(fileName) +1 );
 8002250:	6a38      	ldr	r0, [r7, #32]
 8002252:	f7fd ffb9 	bl	80001c8 <strlen>
 8002256:	4604      	mov	r4, r0
 8002258:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800225a:	f7fd ffb5 	bl	80001c8 <strlen>
 800225e:	4603      	mov	r3, r0
 8002260:	4423      	add	r3, r4
 8002262:	3301      	adds	r3, #1
 8002264:	4619      	mov	r1, r3
 8002266:	6a38      	ldr	r0, [r7, #32]
 8002268:	f00c fdf2 	bl	800ee50 <realloc>
 800226c:	6238      	str	r0, [r7, #32]
	strcat(scalFilePath, fileName);
 800226e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002270:	6a38      	ldr	r0, [r7, #32]
 8002272:	f00c fe2b 	bl	800eecc <strcat>

	uint16_t x = 0; /*nr d elinii de prelucrat din M1 ai sa avem 32x32 pixeli de prelucrat in M2*/
 8002276:	2300      	movs	r3, #0
 8002278:	81fb      	strh	r3, [r7, #14]
	bool flagTerm = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	737b      	strb	r3, [r7, #13]

	int i = 0; /*indexi de referinta in M2*/
 800227e:	2300      	movs	r3, #0
 8002280:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int j = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	63bb      	str	r3, [r7, #56]	@ 0x38
	int ik = 0; /*indexi de referinta in M1*/
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
	int jk = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]

	bool flagPixel = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37


	uint8_t *data = malloc(sizeof(uint8_t)*3072);
 8002294:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8002298:	f00c fd1c 	bl	800ecd4 <malloc>
 800229c:	4603      	mov	r3, r0
 800229e:	617b      	str	r3, [r7, #20]
	int16_t index = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	827b      	strh	r3, [r7, #18]



	while(!flagTerm)
 80022a4:	e0d2      	b.n	800244c <scaling_entity+0x294>
	{
		read_image_file_scaling(entity->ST.SD.filePathName, entity, factor, &x, &flagTerm);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6918      	ldr	r0, [r3, #16]
 80022aa:	f107 030d 	add.w	r3, r7, #13
 80022ae:	f107 020e 	add.w	r2, r7, #14
 80022b2:	ed97 0a00 	vldr	s0, [r7]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	f002 f9b4 	bl	8004624 <read_image_file_scaling>

		i = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		j = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	63bb      	str	r3, [r7, #56]	@ 0x38

		ik = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
		jk = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]

		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80022d0:	e07d      	b.n	80023ce <scaling_entity+0x216>
		{
			/*
			 * Parcurgem frameul asociat matricei scalate M2
			 */

			if((k%(x1*3)==0) && (k!=0))
 80022d2:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	441a      	add	r2, r3
 80022dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022de:	fb93 f1f2 	sdiv	r1, r3, r2
 80022e2:	fb01 f202 	mul.w	r2, r1, r2
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d107      	bne.n	80022fc <scaling_entity+0x144>
 80022ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d004      	beq.n	80022fc <scaling_entity+0x144>
			{
				/*
				 * new line
				 */

				i++;
 80022f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f4:	3301      	adds	r3, #1
 80022f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
				j = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			if(k%3 == 0)
 80022fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022fe:	4b6f      	ldr	r3, [pc, #444]	@ (80024bc <scaling_entity+0x304>)
 8002300:	fb83 3201 	smull	r3, r2, r3, r1
 8002304:	17cb      	asrs	r3, r1, #31
 8002306:	1ad2      	subs	r2, r2, r3
 8002308:	4613      	mov	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4413      	add	r3, r2
 800230e:	1aca      	subs	r2, r1, r3
 8002310:	2a00      	cmp	r2, #0
 8002312:	d102      	bne.n	800231a <scaling_entity+0x162>
			{
				flagPixel = 1;
 8002314:	2301      	movs	r3, #1
 8002316:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			}

			if(flagPixel == 1)
 800231a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800231e:	2b00      	cmp	r3, #0
 8002320:	d052      	beq.n	80023c8 <scaling_entity+0x210>
			{
				ik = (int)i/factor;
 8002322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800232c:	ed97 7a00 	vldr	s14, [r7]
 8002330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002334:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002338:	ee17 3a90 	vmov	r3, s15
 800233c:	61fb      	str	r3, [r7, #28]
				jk = (int)j/factor;
 800233e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002340:	ee07 3a90 	vmov	s15, r3
 8002344:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002348:	ed97 7a00 	vldr	s14, [r7]
 800234c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002354:	ee17 3a90 	vmov	r3, s15
 8002358:	61bb      	str	r3, [r7, #24]

				index = ik*(entity->x1)*3 + jk*3; /*index normat la M1*/
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002360:	461a      	mov	r2, r3
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fb03 f202 	mul.w	r2, r3, r2
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	4413      	add	r3, r2
 800236c:	b29b      	uxth	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	0052      	lsls	r2, r2, #1
 8002372:	4413      	add	r3, r2
 8002374:	b29b      	uxth	r3, r3
 8002376:	827b      	strh	r3, [r7, #18]

				data[k] = entity->ST.SD.data[index];
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002380:	441a      	add	r2, r3
 8002382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002384:	6979      	ldr	r1, [r7, #20]
 8002386:	440b      	add	r3, r1
 8002388:	7812      	ldrb	r2, [r2, #0]
 800238a:	701a      	strb	r2, [r3, #0]
				data[k+1] = entity->ST.SD.data[index + 1];
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002394:	3301      	adds	r3, #1
 8002396:	441a      	add	r2, r3
 8002398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239a:	3301      	adds	r3, #1
 800239c:	6979      	ldr	r1, [r7, #20]
 800239e:	440b      	add	r3, r1
 80023a0:	7812      	ldrb	r2, [r2, #0]
 80023a2:	701a      	strb	r2, [r3, #0]
				data[k+2] = entity->ST.SD.data[index + 2];
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023ac:	3302      	adds	r3, #2
 80023ae:	441a      	add	r2, r3
 80023b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b2:	3302      	adds	r3, #2
 80023b4:	6979      	ldr	r1, [r7, #20]
 80023b6:	440b      	add	r3, r1
 80023b8:	7812      	ldrb	r2, [r2, #0]
 80023ba:	701a      	strb	r2, [r3, #0]

				j++;
 80023bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023be:	3301      	adds	r3, #1
 80023c0:	63bb      	str	r3, [r7, #56]	@ 0x38
				flagPixel = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 80023c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ca:	3301      	adds	r3, #1
 80023cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80023ce:	89fb      	ldrh	r3, [r7, #14]
 80023d0:	ee07 3a90 	vmov	s15, r3
 80023d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d8:	edd7 7a00 	vldr	s15, [r7]
 80023dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80023e4:	ee07 3a90 	vmov	s15, r3
 80023e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f0:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80023f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023fc:	ee17 2a90 	vmov	r2, s15
 8002400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002402:	4293      	cmp	r3, r2
 8002404:	f6ff af65 	blt.w	80022d2 <scaling_entity+0x11a>
		/*
		 * Scriem in fisier datele obitnute din frame-ul curent in fisiserul aferent.
		 * Fisiserul va fi salvat in folderul de scalare
		 */

		write_image_file(tempFile, data, (int)(x1*factor)*x*3, x1, y1, flagTerm);
 8002408:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800240c:	ee07 3a90 	vmov	s15, r3
 8002410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002414:	edd7 7a00 	vldr	s15, [r7]
 8002418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002420:	ee17 2a90 	vmov	r2, s15
 8002424:	89fb      	ldrh	r3, [r7, #14]
 8002426:	fb03 f202 	mul.w	r2, r3, r2
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	4619      	mov	r1, r3
 8002432:	7b7b      	ldrb	r3, [r7, #13]
 8002434:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	4613      	mov	r3, r2
 8002442:	460a      	mov	r2, r1
 8002444:	6979      	ldr	r1, [r7, #20]
 8002446:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002448:	f002 faea 	bl	8004a20 <write_image_file>
	while(!flagTerm)
 800244c:	7b7b      	ldrb	r3, [r7, #13]
 800244e:	f083 0301 	eor.w	r3, r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	f47f af26 	bne.w	80022a6 <scaling_entity+0xee>
	 * renumind fisiserul tempFile in care ne-am scris datele din temp.bin in
	 * numele aferent acestuia stocat in scalFilePath
	 */


	res = f_unlink(scalFilePath);
 800245a:	6a38      	ldr	r0, [r7, #32]
 800245c:	f00c fa39 	bl	800e8d2 <f_unlink>
 8002460:	4603      	mov	r3, r0
 8002462:	747b      	strb	r3, [r7, #17]

	if((res != FR_OK) && (res != FR_NO_FILE))
 8002464:	7c7b      	ldrb	r3, [r7, #17]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <scaling_entity+0x2b8>
 800246a:	7c7b      	ldrb	r3, [r7, #17]
 800246c:	2b04      	cmp	r3, #4
 800246e:	d11b      	bne.n	80024a8 <scaling_entity+0x2f0>
	{
		return;
	}

	res = f_rename(tempFile, scalFilePath);
 8002470:	6a39      	ldr	r1, [r7, #32]
 8002472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002474:	f00c fad8 	bl	800ea28 <f_rename>
 8002478:	4603      	mov	r3, r0
 800247a:	747b      	strb	r3, [r7, #17]

	if(res != FR_OK)
 800247c:	7c7b      	ldrb	r3, [r7, #17]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d114      	bne.n	80024ac <scaling_entity+0x2f4>
	 * Atribuim noile valori entitatii prelucrate
	 */

	//free(entity->filePathName);

	entity->x1=x1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8002486:	80da      	strh	r2, [r3, #6]
	entity->y1=y1;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800248c:	811a      	strh	r2, [r3, #8]
	assign_file_path_entity(entity, scalFilePath);
 800248e:	6a39      	ldr	r1, [r7, #32]
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f001 fd06 	bl	8003ea2 <assign_file_path_entity>

	free(data);
 8002496:	6978      	ldr	r0, [r7, #20]
 8002498:	f00c fc24 	bl	800ece4 <free>
	free(scalFilePath);
 800249c:	6a38      	ldr	r0, [r7, #32]
 800249e:	f00c fc21 	bl	800ece4 <free>
 80024a2:	e004      	b.n	80024ae <scaling_entity+0x2f6>
		return;
 80024a4:	bf00      	nop
 80024a6:	e002      	b.n	80024ae <scaling_entity+0x2f6>
		return;
 80024a8:	bf00      	nop
 80024aa:	e000      	b.n	80024ae <scaling_entity+0x2f6>
		return;
 80024ac:	bf00      	nop
	//free(entity->data);

}
 80024ae:	3744      	adds	r7, #68	@ 0x44
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd90      	pop	{r4, r7, pc}
 80024b4:	0800f18c 	.word	0x0800f18c
 80024b8:	0800f1a8 	.word	0x0800f1a8
 80024bc:	55555556 	.word	0x55555556

080024c0 <rotate_entity>:


void rotate_entity(ENTITY *entity, int theta)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
	 */


	/*Vom elimina din campul vizual imaginea curenta*/

	erase_entity(*entity);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691a      	ldr	r2, [r3, #16]
 80024ce:	9200      	str	r2, [sp, #0]
 80024d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d2:	f000 f8ef 	bl	80026b4 <erase_entity>

	/*Aflam initial coordonatele pivotului de referinta*/

	const int16_t pivotX = entity->x0 + (int16_t)(entity->x1/2);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80024e4:	0fd9      	lsrs	r1, r3, #31
 80024e6:	440b      	add	r3, r1
 80024e8:	105b      	asrs	r3, r3, #1
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	827b      	strh	r3, [r7, #18]
	const int16_t pivotY = entity->y0 + (int16_t)(entity->y1/2);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002502:	0fd9      	lsrs	r1, r3, #31
 8002504:	440b      	add	r3, r1
 8002506:	105b      	asrs	r3, r3, #1
 8002508:	b21b      	sxth	r3, r3
 800250a:	b29b      	uxth	r3, r3
 800250c:	4413      	add	r3, r2
 800250e:	b29b      	uxth	r3, r3
 8002510:	823b      	strh	r3, [r7, #16]

	int16_t i = (int16_t)(-(entity->y1/2));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002518:	0fda      	lsrs	r2, r3, #31
 800251a:	4413      	add	r3, r2
 800251c:	105b      	asrs	r3, r3, #1
 800251e:	b21b      	sxth	r3, r3
 8002520:	b29b      	uxth	r3, r3
 8002522:	425b      	negs	r3, r3
 8002524:	b29b      	uxth	r3, r3
 8002526:	83fb      	strh	r3, [r7, #30]
	int16_t j = (int16_t)(-(entity->x1/2));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800252e:	0fda      	lsrs	r2, r3, #31
 8002530:	4413      	add	r3, r2
 8002532:	105b      	asrs	r3, r3, #1
 8002534:	b21b      	sxth	r3, r3
 8002536:	b29b      	uxth	r3, r3
 8002538:	425b      	negs	r3, r3
 800253a:	b29b      	uxth	r3, r3
 800253c:	83bb      	strh	r3, [r7, #28]

	int16_t rotPosX = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	837b      	strh	r3, [r7, #26]
	int16_t rotPosY = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	833b      	strh	r3, [r7, #24]

	bool flagImgDone = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
	bool flagPixel = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	75fb      	strb	r3, [r7, #23]
	uint16_t byteNr = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	81bb      	strh	r3, [r7, #12]

	uint8_t pixel[3];


	while(!flagImgDone)
 8002552:	e09c      	b.n	800268e <rotate_entity+0x1ce>
	{
		read_image_file(entity, &byteNr, &flagImgDone);
 8002554:	f107 020f 	add.w	r2, r7, #15
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	4619      	mov	r1, r3
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f001 fdf4 	bl	800414c <read_image_file>


		for(int16_t k = 0; k<byteNr; k++)
 8002564:	2300      	movs	r3, #0
 8002566:	82bb      	strh	r3, [r7, #20]
 8002568:	e08b      	b.n	8002682 <rotate_entity+0x1c2>
		{
			if(j == (entity->x1/2))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002570:	0fda      	lsrs	r2, r3, #31
 8002572:	4413      	add	r3, r2
 8002574:	105b      	asrs	r3, r3, #1
 8002576:	b21b      	sxth	r3, r3
 8002578:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800257c:	429a      	cmp	r2, r3
 800257e:	d110      	bne.n	80025a2 <rotate_entity+0xe2>
			{
				i++;
 8002580:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002584:	b29b      	uxth	r3, r3
 8002586:	3301      	adds	r3, #1
 8002588:	b29b      	uxth	r3, r3
 800258a:	83fb      	strh	r3, [r7, #30]
				j = (int16_t)(-(entity->x1/2));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002592:	0fda      	lsrs	r2, r3, #31
 8002594:	4413      	add	r3, r2
 8002596:	105b      	asrs	r3, r3, #1
 8002598:	b21b      	sxth	r3, r3
 800259a:	b29b      	uxth	r3, r3
 800259c:	425b      	negs	r3, r3
 800259e:	b29b      	uxth	r3, r3
 80025a0:	83bb      	strh	r3, [r7, #28]

			}

			if(k%3 == 0)
 80025a2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80025a6:	4b42      	ldr	r3, [pc, #264]	@ (80026b0 <rotate_entity+0x1f0>)
 80025a8:	fb83 3102 	smull	r3, r1, r3, r2
 80025ac:	17d3      	asrs	r3, r2, #31
 80025ae:	1ac9      	subs	r1, r1, r3
 80025b0:	460b      	mov	r3, r1
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	440b      	add	r3, r1
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <rotate_entity+0x102>
			{
				flagPixel = 1;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
			}

			if(flagPixel == 1)
 80025c2:	7dfb      	ldrb	r3, [r7, #23]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d056      	beq.n	8002676 <rotate_entity+0x1b6>
			{
				pixel[0] = entity->ST.SD.data[k];
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025d0:	4413      	add	r3, r2
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	723b      	strb	r3, [r7, #8]
				pixel[1] = entity->ST.SD.data[k+1];
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025de:	3301      	adds	r3, #1
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	727b      	strb	r3, [r7, #9]
				pixel[2] = entity->ST.SD.data[k+2];
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80025ee:	3302      	adds	r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	72bb      	strb	r3, [r7, #10]


				switch(theta)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80025fc:	d020      	beq.n	8002640 <rotate_entity+0x180>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8002604:	dc27      	bgt.n	8002656 <rotate_entity+0x196>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b5a      	cmp	r3, #90	@ 0x5a
 800260a:	d003      	beq.n	8002614 <rotate_entity+0x154>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2bb4      	cmp	r3, #180	@ 0xb4
 8002610:	d00b      	beq.n	800262a <rotate_entity+0x16a>
					case 270:
						rotPosX = i + pivotX;
						rotPosY = j + pivotY;
						break;
					default:
						break;
 8002612:	e020      	b.n	8002656 <rotate_entity+0x196>
						rotPosX = -i + pivotX;
 8002614:	8a7a      	ldrh	r2, [r7, #18]
 8002616:	8bfb      	ldrh	r3, [r7, #30]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	b29b      	uxth	r3, r3
 800261c:	837b      	strh	r3, [r7, #26]
						rotPosY =  j + pivotY;
 800261e:	8bba      	ldrh	r2, [r7, #28]
 8002620:	8a3b      	ldrh	r3, [r7, #16]
 8002622:	4413      	add	r3, r2
 8002624:	b29b      	uxth	r3, r3
 8002626:	833b      	strh	r3, [r7, #24]
						break;
 8002628:	e016      	b.n	8002658 <rotate_entity+0x198>
						rotPosX = -i + pivotX;
 800262a:	8a7a      	ldrh	r2, [r7, #18]
 800262c:	8bfb      	ldrh	r3, [r7, #30]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	b29b      	uxth	r3, r3
 8002632:	837b      	strh	r3, [r7, #26]
						rotPosY = -j + pivotY;
 8002634:	8a3a      	ldrh	r2, [r7, #16]
 8002636:	8bbb      	ldrh	r3, [r7, #28]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	b29b      	uxth	r3, r3
 800263c:	833b      	strh	r3, [r7, #24]
						break;
 800263e:	e00b      	b.n	8002658 <rotate_entity+0x198>
						rotPosX = i + pivotX;
 8002640:	8bfa      	ldrh	r2, [r7, #30]
 8002642:	8a7b      	ldrh	r3, [r7, #18]
 8002644:	4413      	add	r3, r2
 8002646:	b29b      	uxth	r3, r3
 8002648:	837b      	strh	r3, [r7, #26]
						rotPosY = j + pivotY;
 800264a:	8bba      	ldrh	r2, [r7, #28]
 800264c:	8a3b      	ldrh	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	b29b      	uxth	r3, r3
 8002652:	833b      	strh	r3, [r7, #24]
						break;
 8002654:	e000      	b.n	8002658 <rotate_entity+0x198>
						break;
 8002656:	bf00      	nop
				}

				draw_pixel_data(rotPosX, rotPosY, pixel); /*i->Y si j->X*/
 8002658:	8b7b      	ldrh	r3, [r7, #26]
 800265a:	8b39      	ldrh	r1, [r7, #24]
 800265c:	f107 0208 	add.w	r2, r7, #8
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe fed3 	bl	800140c <draw_pixel_data>

				j++;
 8002666:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800266a:	b29b      	uxth	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	b29b      	uxth	r3, r3
 8002670:	83bb      	strh	r3, [r7, #28]
				flagPixel = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	75fb      	strb	r3, [r7, #23]
		for(int16_t k = 0; k<byteNr; k++)
 8002676:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800267a:	b29b      	uxth	r3, r3
 800267c:	3301      	adds	r3, #1
 800267e:	b29b      	uxth	r3, r3
 8002680:	82bb      	strh	r3, [r7, #20]
 8002682:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002686:	89ba      	ldrh	r2, [r7, #12]
 8002688:	4293      	cmp	r3, r2
 800268a:	f6ff af6e 	blt.w	800256a <rotate_entity+0xaa>
	while(!flagImgDone)
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	f47f af5c 	bne.w	8002554 <rotate_entity+0x94>

		}
	}


	free(entity->ST.SD.data);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f00c fb1f 	bl	800ece4 <free>

}
 80026a6:	bf00      	nop
 80026a8:	3720      	adds	r7, #32
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	55555556 	.word	0x55555556

080026b4 <erase_entity>:


void erase_entity(ENTITY entity)
{
 80026b4:	b084      	sub	sp, #16
 80026b6:	b590      	push	{r4, r7, lr}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af02      	add	r7, sp, #8
 80026bc:	f107 0410 	add.w	r4, r7, #16
 80026c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/*
	 * Fucntie pentru a sterge entitatea din campul vizual
	 */

	draw_rectangle_slow(entity.x0, entity.y0, entity.x1+1, entity.y1, BackGroundColor);
 80026c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026c8:	b298      	uxth	r0, r3
 80026ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80026ce:	b299      	uxth	r1, r3
 80026d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80026de:	b29c      	uxth	r4, r3
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <erase_entity+0x48>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	4623      	mov	r3, r4
 80026e8:	f7ff f932 	bl	8001950 <draw_rectangle_slow>
}
 80026ec:	bf00      	nop
 80026ee:	3704      	adds	r7, #4
 80026f0:	46bd      	mov	sp, r7
 80026f2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80026f6:	b004      	add	sp, #16
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000008 	.word	0x20000008

08002700 <HAL_TIM_PeriodElapsedCallback>:
TCB tcb[MAXPR];
TCB *currentProcess;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	/*
	 * ISR aferent timerului sistemului de operare.
	 * Perioada: Ts = 1ms
	 */

	kernel_count_sleep(); /*modifica flagAllSleep in 1 sau 0*/
 8002708:	f000 f988 	bl	8002a1c <kernel_count_sleep>

    if (htim->Instance == TIM4)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0c      	ldr	r2, [pc, #48]	@ (8002744 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d111      	bne.n	800273a <HAL_TIM_PeriodElapsedCallback+0x3a>
    {

    	if(startOS == 1 && mutex==0 && flagAllSleep==0)
 8002716:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d10d      	bne.n	800273a <HAL_TIM_PeriodElapsedCallback+0x3a>
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_TIM_PeriodElapsedCallback+0x3a>
 8002726:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d105      	bne.n	800273a <HAL_TIM_PeriodElapsedCallback+0x3a>
    	{
    		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; /*comutare de context cu ISR PendSV*/
 800272e:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4a08      	ldr	r2, [pc, #32]	@ (8002754 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002738:	6053      	str	r3, [r2, #4]
    	}
    }


}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40000800 	.word	0x40000800
 8002748:	200000a9 	.word	0x200000a9
 800274c:	200000ac 	.word	0x200000ac
 8002750:	200000b0 	.word	0x200000b0
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <PendSV_Handler>:
	 * citirea datelor de pe cardul SD prin SDIO)
	 * Feature: De comutat in functie de o politica de planificare,
	 * momentan se comuta circular intre 2 procese de test!
	 */

    __asm("CPSID I");
 8002758:	b672      	cpsid	i

    /*salvare context curent*/
    __asm("PUSH {R4-R7}");
 800275a:	b4f0      	push	{r4, r5, r6, r7}
    __asm("MOV R4, R8");
 800275c:	4644      	mov	r4, r8
    __asm("MOV R5, R9");
 800275e:	464d      	mov	r5, r9
    __asm("MOV R6, R10");
 8002760:	4656      	mov	r6, sl
    __asm("MOV R7, R11");
 8002762:	465f      	mov	r7, fp
    __asm("PUSH {R4-R7}");
 8002764:	b4f0      	push	{r4, r5, r6, r7}
    __asm("LDR R4, =currentProcess");
 8002766:	4c0b      	ldr	r4, [pc, #44]	@ (8002794 <PendSV_Handler+0x3c>)
    __asm("LDR R5, [R4]"); /*R5->pstack*/
 8002768:	6825      	ldr	r5, [r4, #0]
    __asm("MOV R6, SP");
 800276a:	466e      	mov	r6, sp
    __asm("STR R6, [R5]"); /*salvam PS curent in pstack*/
 800276c:	602e      	str	r6, [r5, #0]

    /*apel scheduler pentru adresa next proces*/
    __asm("PUSH {R0-R3, LR}");
 800276e:	b50f      	push	{r0, r1, r2, r3, lr}
    __asm("LDR R0, =kernel_scheduler");
 8002770:	4809      	ldr	r0, [pc, #36]	@ (8002798 <PendSV_Handler+0x40>)
    __asm("BLX R0");
 8002772:	4780      	blx	r0
    __asm("POP {R1-R3, R12, LR}");
 8002774:	e8bd 500e 	ldmia.w	sp!, {r1, r2, r3, ip, lr}

    /*restaurare context al proc ales de scheduler*/
    __asm("LDR R4, =currentProcess");
 8002778:	4c06      	ldr	r4, [pc, #24]	@ (8002794 <PendSV_Handler+0x3c>)
    __asm("STR R0, [R4]");
 800277a:	6020      	str	r0, [r4, #0]
    __asm("LDR R5, [R0]");
 800277c:	6805      	ldr	r5, [r0, #0]
    __asm("MOV SP, R5");
 800277e:	46ad      	mov	sp, r5
    __asm("POP {R4-R7}");
 8002780:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV R8, R4");
 8002782:	46a0      	mov	r8, r4
    __asm("MOV R9, R5");
 8002784:	46a9      	mov	r9, r5
    __asm("MOV R10, R6");
 8002786:	46b2      	mov	sl, r6
    __asm("MOV R11, R7");
 8002788:	46bb      	mov	fp, r7
    __asm("POP {R4-R7}");
 800278a:	bcf0      	pop	{r4, r5, r6, r7}

    __asm("CPSIE I");
 800278c:	b662      	cpsie	i
    __asm("BX LR");
 800278e:	4770      	bx	lr
}
 8002790:	bf00      	nop
 8002792:	0000      	.short	0x0000
 8002794:	2001417c 	.word	0x2001417c
 8002798:	080029d9 	.word	0x080029d9

0800279c <kernel_add_process>:


void kernel_add_process(void (*adrFunction)(void))
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

	__asm("CPSID   I");
 80027a4:	b672      	cpsid	i

	if(nrProc==MAXPR)
 80027a6:	4b68      	ldr	r3, [pc, #416]	@ (8002948 <kernel_add_process+0x1ac>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b0a      	cmp	r3, #10
 80027ac:	d101      	bne.n	80027b2 <kernel_add_process+0x16>
	{
	    __asm("CPSIE   I ");
 80027ae:	b662      	cpsie	i
		return;
 80027b0:	e0c4      	b.n	800293c <kernel_add_process+0x1a0>
	}

	if(nrProc == 0)
 80027b2:	4b65      	ldr	r3, [pc, #404]	@ (8002948 <kernel_add_process+0x1ac>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d126      	bne.n	8002808 <kernel_add_process+0x6c>
	{
		tcb[0].pnext = &tcb[0];
 80027ba:	4b64      	ldr	r3, [pc, #400]	@ (800294c <kernel_add_process+0x1b0>)
 80027bc:	4a63      	ldr	r2, [pc, #396]	@ (800294c <kernel_add_process+0x1b0>)
 80027be:	605a      	str	r2, [r3, #4]

		tcb[0].pstack = &tcb[0].stack[STACKSIZE-16];            /*Atribuire SP*/
 80027c0:	4b62      	ldr	r3, [pc, #392]	@ (800294c <kernel_add_process+0x1b0>)
 80027c2:	4a63      	ldr	r2, [pc, #396]	@ (8002950 <kernel_add_process+0x1b4>)
 80027c4:	601a      	str	r2, [r3, #0]
		tcb[0].pfunction = adrFunction;                         /*Atribuire adr task in TCB*/
 80027c6:	4a61      	ldr	r2, [pc, #388]	@ (800294c <kernel_add_process+0x1b0>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6093      	str	r3, [r2, #8]
		tcb[0].stack[STACKSIZE-1] = 0x01000000;                 /*Atribuire thumb mod operare reg*/
 80027cc:	4b5f      	ldr	r3, [pc, #380]	@ (800294c <kernel_add_process+0x1b0>)
 80027ce:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027d2:	461a      	mov	r2, r3
 80027d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027d8:	6093      	str	r3, [r2, #8]
		tcb[0].stack[STACKSIZE-2] = (int32_t)tcb[0].pfunction;  /*Atribuire reg PC catre adr incep Task/functie*/
 80027da:	4b5c      	ldr	r3, [pc, #368]	@ (800294c <kernel_add_process+0x1b0>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	461a      	mov	r2, r3
 80027e0:	4b5a      	ldr	r3, [pc, #360]	@ (800294c <kernel_add_process+0x1b0>)
 80027e2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80027e6:	605a      	str	r2, [r3, #4]
		tcb[0].pID = nrProc++;
 80027e8:	4b57      	ldr	r3, [pc, #348]	@ (8002948 <kernel_add_process+0x1ac>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	b2d1      	uxtb	r1, r2
 80027f0:	4a55      	ldr	r2, [pc, #340]	@ (8002948 <kernel_add_process+0x1ac>)
 80027f2:	7011      	strb	r1, [r2, #0]
 80027f4:	4a55      	ldr	r2, [pc, #340]	@ (800294c <kernel_add_process+0x1b0>)
 80027f6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80027fa:	7313      	strb	r3, [r2, #12]
		tcb[0].state = awake;
 80027fc:	4b53      	ldr	r3, [pc, #332]	@ (800294c <kernel_add_process+0x1b0>)
 80027fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002802:	2201      	movs	r2, #1
 8002804:	735a      	strb	r2, [r3, #13]
 8002806:	e098      	b.n	800293a <kernel_add_process+0x19e>

	}

	else
	{
		tcb[nrProc].pnext = &tcb[nrProc-1];
 8002808:	4b4f      	ldr	r3, [pc, #316]	@ (8002948 <kernel_add_process+0x1ac>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	3b01      	subs	r3, #1
 800280e:	4a4e      	ldr	r2, [pc, #312]	@ (8002948 <kernel_add_process+0x1ac>)
 8002810:	7812      	ldrb	r2, [r2, #0]
 8002812:	4610      	mov	r0, r2
 8002814:	f242 0214 	movw	r2, #8212	@ 0x2014
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	4a4b      	ldr	r2, [pc, #300]	@ (800294c <kernel_add_process+0x1b0>)
 800281e:	441a      	add	r2, r3
 8002820:	494a      	ldr	r1, [pc, #296]	@ (800294c <kernel_add_process+0x1b0>)
 8002822:	f242 0314 	movw	r3, #8212	@ 0x2014
 8002826:	fb00 f303 	mul.w	r3, r0, r3
 800282a:	440b      	add	r3, r1
 800282c:	3304      	adds	r3, #4
 800282e:	601a      	str	r2, [r3, #0]
		tcb[0].pnext = &tcb[nrProc];
 8002830:	4b45      	ldr	r3, [pc, #276]	@ (8002948 <kernel_add_process+0x1ac>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	461a      	mov	r2, r3
 8002836:	f242 0314 	movw	r3, #8212	@ 0x2014
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	4a43      	ldr	r2, [pc, #268]	@ (800294c <kernel_add_process+0x1b0>)
 8002840:	4413      	add	r3, r2
 8002842:	4a42      	ldr	r2, [pc, #264]	@ (800294c <kernel_add_process+0x1b0>)
 8002844:	6053      	str	r3, [r2, #4]

		tcb[nrProc].pstack = &tcb[nrProc].stack[STACKSIZE-16];           /*Atribuire SP*/
 8002846:	4b40      	ldr	r3, [pc, #256]	@ (8002948 <kernel_add_process+0x1ac>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	4b3e      	ldr	r3, [pc, #248]	@ (8002948 <kernel_add_process+0x1ac>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f242 0314 	movw	r3, #8212	@ 0x2014
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	f503 53fe 	add.w	r3, r3, #8128	@ 0x1fc0
 800285e:	3308      	adds	r3, #8
 8002860:	4a3a      	ldr	r2, [pc, #232]	@ (800294c <kernel_add_process+0x1b0>)
 8002862:	4413      	add	r3, r2
 8002864:	1d1a      	adds	r2, r3, #4
 8002866:	4939      	ldr	r1, [pc, #228]	@ (800294c <kernel_add_process+0x1b0>)
 8002868:	f242 0314 	movw	r3, #8212	@ 0x2014
 800286c:	fb00 f303 	mul.w	r3, r0, r3
 8002870:	440b      	add	r3, r1
 8002872:	601a      	str	r2, [r3, #0]
		tcb[nrProc].pfunction = adrFunction;                             /*Atribuire adr task in TCB*/
 8002874:	4b34      	ldr	r3, [pc, #208]	@ (8002948 <kernel_add_process+0x1ac>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	4619      	mov	r1, r3
 800287a:	4a34      	ldr	r2, [pc, #208]	@ (800294c <kernel_add_process+0x1b0>)
 800287c:	f242 0314 	movw	r3, #8212	@ 0x2014
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	3308      	adds	r3, #8
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	601a      	str	r2, [r3, #0]
		tcb[nrProc].stack[STACKSIZE-1] = 0x01000000;                     /*Atribuire thumb mod operare reg*/
 800288c:	4b2e      	ldr	r3, [pc, #184]	@ (8002948 <kernel_add_process+0x1ac>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	4a2e      	ldr	r2, [pc, #184]	@ (800294c <kernel_add_process+0x1b0>)
 8002894:	f242 0314 	movw	r3, #8212	@ 0x2014
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028a2:	3308      	adds	r3, #8
 80028a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028a8:	601a      	str	r2, [r3, #0]
		tcb[nrProc].stack[STACKSIZE-2] = (int32_t)tcb[nrProc].pfunction; /*Atribuire reg PC catre adr incep Task/functie*/
 80028aa:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <kernel_add_process+0x1ac>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	4619      	mov	r1, r3
 80028b0:	4a26      	ldr	r2, [pc, #152]	@ (800294c <kernel_add_process+0x1b0>)
 80028b2:	f242 0314 	movw	r3, #8212	@ 0x2014
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3308      	adds	r3, #8
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b21      	ldr	r3, [pc, #132]	@ (8002948 <kernel_add_process+0x1ac>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	4611      	mov	r1, r2
 80028c8:	4a20      	ldr	r2, [pc, #128]	@ (800294c <kernel_add_process+0x1b0>)
 80028ca:	f242 0314 	movw	r3, #8212	@ 0x2014
 80028ce:	fb00 f303 	mul.w	r3, r0, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028d8:	3304      	adds	r3, #4
 80028da:	6019      	str	r1, [r3, #0]
		tcb[nrProc].pID = nrProc;
 80028dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002948 <kernel_add_process+0x1ac>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	4b19      	ldr	r3, [pc, #100]	@ (8002948 <kernel_add_process+0x1ac>)
 80028e4:	7819      	ldrb	r1, [r3, #0]
 80028e6:	4a19      	ldr	r2, [pc, #100]	@ (800294c <kernel_add_process+0x1b0>)
 80028e8:	f242 0314 	movw	r3, #8212	@ 0x2014
 80028ec:	fb00 f303 	mul.w	r3, r0, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80028f6:	330c      	adds	r3, #12
 80028f8:	460a      	mov	r2, r1
 80028fa:	701a      	strb	r2, [r3, #0]
		tcb[nrProc].state = awake;
 80028fc:	4b12      	ldr	r3, [pc, #72]	@ (8002948 <kernel_add_process+0x1ac>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	4619      	mov	r1, r3
 8002902:	4a12      	ldr	r2, [pc, #72]	@ (800294c <kernel_add_process+0x1b0>)
 8002904:	f242 0314 	movw	r3, #8212	@ 0x2014
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002912:	330d      	adds	r3, #13
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]

	    currentProcess = &tcb[nrProc];
 8002918:	4b0b      	ldr	r3, [pc, #44]	@ (8002948 <kernel_add_process+0x1ac>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	f242 0314 	movw	r3, #8212	@ 0x2014
 8002922:	fb02 f303 	mul.w	r3, r2, r3
 8002926:	4a09      	ldr	r2, [pc, #36]	@ (800294c <kernel_add_process+0x1b0>)
 8002928:	4413      	add	r3, r2
 800292a:	4a0a      	ldr	r2, [pc, #40]	@ (8002954 <kernel_add_process+0x1b8>)
 800292c:	6013      	str	r3, [r2, #0]
	    nrProc++;
 800292e:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <kernel_add_process+0x1ac>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	3301      	adds	r3, #1
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <kernel_add_process+0x1ac>)
 8002938:	701a      	strb	r2, [r3, #0]
	}

    __asm("CPSIE   I ");
 800293a:	b662      	cpsie	i

}
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	200000a8 	.word	0x200000a8
 800294c:	200000b4 	.word	0x200000b4
 8002950:	20002080 	.word	0x20002080
 8002954:	2001417c 	.word	0x2001417c

08002958 <kernel_start>:
{
	/*
	 * Functie de start a kernelului.
	 */

	__asm("CPSID   I");
 8002958:	b672      	cpsid	i

	__asm("LDR     R0, =startOS");
 800295a:	480c      	ldr	r0, [pc, #48]	@ (800298c <kernel_start+0x34>)
	__asm("MOV     R1, 1");
 800295c:	f04f 0101 	mov.w	r1, #1
	__asm("STR     R1, [R0]");
 8002960:	6001      	str	r1, [r0, #0]
    __asm("LDR     R0, =currentProcess");
 8002962:	480b      	ldr	r0, [pc, #44]	@ (8002990 <kernel_start+0x38>)
    __asm("LDR     R2, [R0]");
 8002964:	6802      	ldr	r2, [r0, #0]
    __asm("LDR     R4, [R2]");
 8002966:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4"); /*punem in SP procesorului pstack al &curentProc*/
 8002968:	46a5      	mov	sp, r4
    /*restauram contextul initial, emuland o intr*/
    __asm("POP     {R4-R7}");
 800296a:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 800296c:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 800296e:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8002970:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 8002972:	46bb      	mov	fp, r7
    __asm("POP     {R4-R7}");
 8002974:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("POP     {R0-R3}");
 8002976:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 8002978:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 800297a:	46a4      	mov	ip, r4
    __asm("ADD     SP,SP,#4"); /*restauram registrul LR sarind peste R12*/
 800297c:	b001      	add	sp, #4
    __asm("POP     {R4}");		/*deaorece nu se poate face pop pentru R12*/
 800297e:	bc10      	pop	{r4}

    __asm("MOV     LR, R4");
 8002980:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4"); /*simulam comportamentul procesorului sarind la PC*/
 8002982:	b001      	add	sp, #4

    __asm("CPSIE   I ");
 8002984:	b662      	cpsie	i
    __asm("BX      LR");
 8002986:	4770      	bx	lr

}
 8002988:	bf00      	nop
 800298a:	0000      	.short	0x0000
 800298c:	200000a9 	.word	0x200000a9
 8002990:	2001417c 	.word	0x2001417c

08002994 <kernel_delay>:


void kernel_delay(unsigned int delay)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	 * currentProcess.
	 * Input: void
	 * Output: void
	 */

	currentProcess->state = sleep;
 800299c:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <kernel_delay+0x3c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80029a4:	2200      	movs	r2, #0
 80029a6:	735a      	strb	r2, [r3, #13]
	currentProcess->n = delay;
 80029a8:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <kernel_delay+0x3c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80029b0:	461a      	mov	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6113      	str	r3, [r2, #16]

	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; /*comutare de context cu ISR PendSV*/
 80029b6:	4b07      	ldr	r3, [pc, #28]	@ (80029d4 <kernel_delay+0x40>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	4a06      	ldr	r2, [pc, #24]	@ (80029d4 <kernel_delay+0x40>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c0:	6053      	str	r3, [r2, #4]

}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	2001417c 	.word	0x2001417c
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <kernel_scheduler>:


static TCB* kernel_scheduler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
	 * Input: void
	 * Output: TCB*(adresa TCB al procesului)
	 */


	TCB *temp = currentProcess->pnext;
 80029de:	4b0e      	ldr	r3, [pc, #56]	@ (8002a18 <kernel_scheduler+0x40>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	607b      	str	r3, [r7, #4]

	while(temp!=currentProcess)
 80029e6:	e00a      	b.n	80029fe <kernel_scheduler+0x26>
	{
		if(temp->state == awake)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80029ee:	7b5b      	ldrb	r3, [r3, #13]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <kernel_scheduler+0x20>
		{
			return temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	e009      	b.n	8002a0c <kernel_scheduler+0x34>
		}

		else
		{
			temp = temp->pnext;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	607b      	str	r3, [r7, #4]
	while(temp!=currentProcess)
 80029fe:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <kernel_scheduler+0x40>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1ef      	bne.n	80029e8 <kernel_scheduler+0x10>
	}

	/*In cazul in care toate procesele sunt in sleep
	 * Se va returna adresa procesului curent*/

	return currentProcess;
 8002a08:	4b03      	ldr	r3, [pc, #12]	@ (8002a18 <kernel_scheduler+0x40>)
 8002a0a:	681b      	ldr	r3, [r3, #0]

}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	2001417c 	.word	0x2001417c

08002a1c <kernel_count_sleep>:



void kernel_count_sleep(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
	 * Output: void
	 */

	static uint8_t nrProcSleep = 0;

	nrProcSleep = 0;
 8002a22:	4b31      	ldr	r3, [pc, #196]	@ (8002ae8 <kernel_count_sleep+0xcc>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
	flagAllSleep = 0;
 8002a28:	4b30      	ldr	r3, [pc, #192]	@ (8002aec <kernel_count_sleep+0xd0>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<nrProc; i++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	71fb      	strb	r3, [r7, #7]
 8002a32:	e044      	b.n	8002abe <kernel_count_sleep+0xa2>
	{
		if(tcb[i].state == sleep)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	4a2e      	ldr	r2, [pc, #184]	@ (8002af0 <kernel_count_sleep+0xd4>)
 8002a38:	f242 0114 	movw	r1, #8212	@ 0x2014
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a46:	330d      	adds	r3, #13
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d134      	bne.n	8002ab8 <kernel_count_sleep+0x9c>
		{
			nrProcSleep++;
 8002a4e:	4b26      	ldr	r3, [pc, #152]	@ (8002ae8 <kernel_count_sleep+0xcc>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b24      	ldr	r3, [pc, #144]	@ (8002ae8 <kernel_count_sleep+0xcc>)
 8002a58:	701a      	strb	r2, [r3, #0]

			tcb[i].n--;
 8002a5a:	79fa      	ldrb	r2, [r7, #7]
 8002a5c:	4924      	ldr	r1, [pc, #144]	@ (8002af0 <kernel_count_sleep+0xd4>)
 8002a5e:	f242 0314 	movw	r3, #8212	@ 0x2014
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	440b      	add	r3, r1
 8002a68:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a6c:	3310      	adds	r3, #16
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	1e59      	subs	r1, r3, #1
 8002a72:	481f      	ldr	r0, [pc, #124]	@ (8002af0 <kernel_count_sleep+0xd4>)
 8002a74:	f242 0314 	movw	r3, #8212	@ 0x2014
 8002a78:	fb02 f303 	mul.w	r3, r2, r3
 8002a7c:	4403      	add	r3, r0
 8002a7e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a82:	3310      	adds	r3, #16
 8002a84:	6019      	str	r1, [r3, #0]

			if(tcb[i].n == 0)
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	4a19      	ldr	r2, [pc, #100]	@ (8002af0 <kernel_count_sleep+0xd4>)
 8002a8a:	f242 0114 	movw	r1, #8212	@ 0x2014
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002a98:	3310      	adds	r3, #16
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10b      	bne.n	8002ab8 <kernel_count_sleep+0x9c>
			{
				tcb[i].state = awake;
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	4a13      	ldr	r2, [pc, #76]	@ (8002af0 <kernel_count_sleep+0xd4>)
 8002aa4:	f242 0114 	movw	r1, #8212	@ 0x2014
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002ab2:	330d      	adds	r3, #13
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<nrProc; i++)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	3301      	adds	r3, #1
 8002abc:	71fb      	strb	r3, [r7, #7]
 8002abe:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <kernel_count_sleep+0xd8>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	79fa      	ldrb	r2, [r7, #7]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d3b5      	bcc.n	8002a34 <kernel_count_sleep+0x18>
			}
		}
	}

	if(nrProcSleep == nrProc)
 8002ac8:	4b07      	ldr	r3, [pc, #28]	@ (8002ae8 <kernel_count_sleep+0xcc>)
 8002aca:	781a      	ldrb	r2, [r3, #0]
 8002acc:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <kernel_count_sleep+0xd8>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d102      	bne.n	8002ada <kernel_count_sleep+0xbe>
	{
		flagAllSleep = 1;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <kernel_count_sleep+0xd0>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
	}


}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20014180 	.word	0x20014180
 8002aec:	200000b0 	.word	0x200000b0
 8002af0:	200000b4 	.word	0x200000b4
 8002af4:	200000a8 	.word	0x200000a8

08002af8 <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 8002b02:	2200      	movs	r2, #0
 8002b04:	2108      	movs	r1, #8
 8002b06:	480c      	ldr	r0, [pc, #48]	@ (8002b38 <LCD_send_command+0x40>)
 8002b08:	f003 fd36 	bl	8006578 <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2110      	movs	r1, #16
 8002b10:	4809      	ldr	r0, [pc, #36]	@ (8002b38 <LCD_send_command+0x40>)
 8002b12:	f003 fd31 	bl	8006578 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 8002b16:	1df9      	adds	r1, r7, #7
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4807      	ldr	r0, [pc, #28]	@ (8002b3c <LCD_send_command+0x44>)
 8002b20:	f005 f9fd 	bl	8007f1e <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 8002b24:	2201      	movs	r2, #1
 8002b26:	2110      	movs	r1, #16
 8002b28:	4803      	ldr	r0, [pc, #12]	@ (8002b38 <LCD_send_command+0x40>)
 8002b2a:	f003 fd25 	bl	8006578 <HAL_GPIO_WritePin>


}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40020c00 	.word	0x40020c00
 8002b3c:	2001427c 	.word	0x2001427c

08002b40 <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 8002b4a:	4b34      	ldr	r3, [pc, #208]	@ (8002c1c <LCD_send_data_multi+0xdc>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 8002b50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002b54:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5e:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b68:	6939      	ldr	r1, [r7, #16]
 8002b6a:	fb01 f202 	mul.w	r2, r1, r2
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 8002b72:	2201      	movs	r2, #1
 8002b74:	2108      	movs	r1, #8
 8002b76:	482a      	ldr	r0, [pc, #168]	@ (8002c20 <LCD_send_data_multi+0xe0>)
 8002b78:	f003 fcfe 	bl	8006578 <HAL_GPIO_WritePin>
	CS_A();
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2110      	movs	r1, #16
 8002b80:	4827      	ldr	r0, [pc, #156]	@ (8002c20 <LCD_send_data_multi+0xe0>)
 8002b82:	f003 fcf9 	bl	8006578 <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d821      	bhi.n	8002bd2 <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 8002b8e:	4b23      	ldr	r3, [pc, #140]	@ (8002c1c <LCD_send_data_multi+0xdc>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4821      	ldr	r0, [pc, #132]	@ (8002c24 <LCD_send_data_multi+0xe4>)
 8002b9e:	f005 feeb 	bl	8008978 <HAL_SPI_Transmit_DMA>
 8002ba2:	e02c      	b.n	8002bfe <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 8002ba4:	bf00      	nop
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c1c <LCD_send_data_multi+0xdc>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0fa      	beq.n	8002ba6 <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <LCD_send_data_multi+0xdc>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4819      	ldr	r0, [pc, #100]	@ (8002c24 <LCD_send_data_multi+0xe4>)
 8002bc0:	f005 feda 	bl	8008978 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4413      	add	r3, r2
 8002bca:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1e5      	bne.n	8002ba4 <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00f      	beq.n	8002bfe <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 8002bde:	bf00      	nop
 8002be0:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <LCD_send_data_multi+0xdc>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0fa      	beq.n	8002be0 <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 8002bea:	4b0c      	ldr	r3, [pc, #48]	@ (8002c1c <LCD_send_data_multi+0xdc>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	480a      	ldr	r0, [pc, #40]	@ (8002c24 <LCD_send_data_multi+0xe4>)
 8002bfa:	f005 febd 	bl	8008978 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 8002bfe:	bf00      	nop
 8002c00:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <LCD_send_data_multi+0xdc>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0fa      	beq.n	8002c00 <LCD_send_data_multi+0xc0>
	CS_D();
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	2110      	movs	r1, #16
 8002c0e:	4804      	ldr	r0, [pc, #16]	@ (8002c20 <LCD_send_data_multi+0xe0>)
 8002c10:	f003 fcb2 	bl	8006578 <HAL_GPIO_WritePin>

}
 8002c14:	bf00      	nop
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	200144c4 	.word	0x200144c4
 8002c20:	40020c00 	.word	0x40020c00
 8002c24:	2001427c 	.word	0x2001427c

08002c28 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 8002c32:	2201      	movs	r2, #1
 8002c34:	2108      	movs	r1, #8
 8002c36:	480c      	ldr	r0, [pc, #48]	@ (8002c68 <LCD_send_data+0x40>)
 8002c38:	f003 fc9e 	bl	8006578 <HAL_GPIO_WritePin>
	CS_A();
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2110      	movs	r1, #16
 8002c40:	4809      	ldr	r0, [pc, #36]	@ (8002c68 <LCD_send_data+0x40>)
 8002c42:	f003 fc99 	bl	8006578 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8002c46:	1df9      	adds	r1, r7, #7
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4807      	ldr	r0, [pc, #28]	@ (8002c6c <LCD_send_data+0x44>)
 8002c50:	f005 f965 	bl	8007f1e <HAL_SPI_Transmit>

	CS_D();
 8002c54:	2201      	movs	r2, #1
 8002c56:	2110      	movs	r1, #16
 8002c58:	4803      	ldr	r0, [pc, #12]	@ (8002c68 <LCD_send_data+0x40>)
 8002c5a:	f003 fc8d 	bl	8006578 <HAL_GPIO_WritePin>

}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40020c00 	.word	0x40020c00
 8002c6c:	2001427c 	.word	0x2001427c

08002c70 <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 8002c74:	2200      	movs	r2, #0
 8002c76:	2140      	movs	r1, #64	@ 0x40
 8002c78:	487c      	ldr	r0, [pc, #496]	@ (8002e6c <ILI9488_driver_init+0x1fc>)
 8002c7a:	f003 fc7d 	bl	8006578 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002c7e:	200a      	movs	r0, #10
 8002c80:	f002 fb7e 	bl	8005380 <HAL_Delay>
	RST_D();
 8002c84:	2201      	movs	r2, #1
 8002c86:	2140      	movs	r1, #64	@ 0x40
 8002c88:	4878      	ldr	r0, [pc, #480]	@ (8002e6c <ILI9488_driver_init+0x1fc>)
 8002c8a:	f003 fc75 	bl	8006578 <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f7ff ff32 	bl	8002af8 <LCD_send_command>
	HAL_Delay(150);
 8002c94:	2096      	movs	r0, #150	@ 0x96
 8002c96:	f002 fb73 	bl	8005380 <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 8002c9a:	2011      	movs	r0, #17
 8002c9c:	f7ff ff2c 	bl	8002af8 <LCD_send_command>
	HAL_Delay(255);
 8002ca0:	20ff      	movs	r0, #255	@ 0xff
 8002ca2:	f002 fb6d 	bl	8005380 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 8002ca6:	20e0      	movs	r0, #224	@ 0xe0
 8002ca8:	f7ff ff26 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7ff ffbb 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x0C);
 8002cb2:	200c      	movs	r0, #12
 8002cb4:	f7ff ffb8 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x05);
 8002cb8:	2005      	movs	r0, #5
 8002cba:	f7ff ffb5 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x04);
 8002cbe:	2004      	movs	r0, #4
 8002cc0:	f7ff ffb2 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x0F);
 8002cc4:	200f      	movs	r0, #15
 8002cc6:	f7ff ffaf 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x06);
 8002cca:	2006      	movs	r0, #6
 8002ccc:	f7ff ffac 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x3A);
 8002cd0:	203a      	movs	r0, #58	@ 0x3a
 8002cd2:	f7ff ffa9 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x56);
 8002cd6:	2056      	movs	r0, #86	@ 0x56
 8002cd8:	f7ff ffa6 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x4D);
 8002cdc:	204d      	movs	r0, #77	@ 0x4d
 8002cde:	f7ff ffa3 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x03);
 8002ce2:	2003      	movs	r0, #3
 8002ce4:	f7ff ffa0 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x0A);
 8002ce8:	200a      	movs	r0, #10
 8002cea:	f7ff ff9d 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x06);
 8002cee:	2006      	movs	r0, #6
 8002cf0:	f7ff ff9a 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x30);
 8002cf4:	2030      	movs	r0, #48	@ 0x30
 8002cf6:	f7ff ff97 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x3E);
 8002cfa:	203e      	movs	r0, #62	@ 0x3e
 8002cfc:	f7ff ff94 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x0F);
 8002d00:	200f      	movs	r0, #15
 8002d02:	f7ff ff91 	bl	8002c28 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 8002d06:	20e1      	movs	r0, #225	@ 0xe1
 8002d08:	f7ff fef6 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0x00);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7ff ff8b 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x13);
 8002d12:	2013      	movs	r0, #19
 8002d14:	f7ff ff88 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x18);
 8002d18:	2018      	movs	r0, #24
 8002d1a:	f7ff ff85 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x01);
 8002d1e:	2001      	movs	r0, #1
 8002d20:	f7ff ff82 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x11);
 8002d24:	2011      	movs	r0, #17
 8002d26:	f7ff ff7f 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x06);
 8002d2a:	2006      	movs	r0, #6
 8002d2c:	f7ff ff7c 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x38);
 8002d30:	2038      	movs	r0, #56	@ 0x38
 8002d32:	f7ff ff79 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x34);
 8002d36:	2034      	movs	r0, #52	@ 0x34
 8002d38:	f7ff ff76 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x4D);
 8002d3c:	204d      	movs	r0, #77	@ 0x4d
 8002d3e:	f7ff ff73 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x06);
 8002d42:	2006      	movs	r0, #6
 8002d44:	f7ff ff70 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x0D);
 8002d48:	200d      	movs	r0, #13
 8002d4a:	f7ff ff6d 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x0B);
 8002d4e:	200b      	movs	r0, #11
 8002d50:	f7ff ff6a 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x31);
 8002d54:	2031      	movs	r0, #49	@ 0x31
 8002d56:	f7ff ff67 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x37);
 8002d5a:	2037      	movs	r0, #55	@ 0x37
 8002d5c:	f7ff ff64 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x0F);
 8002d60:	200f      	movs	r0, #15
 8002d62:	f7ff ff61 	bl	8002c28 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 8002d66:	20c0      	movs	r0, #192	@ 0xc0
 8002d68:	f7ff fec6 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0x18);
 8002d6c:	2018      	movs	r0, #24
 8002d6e:	f7ff ff5b 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x16);
 8002d72:	2016      	movs	r0, #22
 8002d74:	f7ff ff58 	bl	8002c28 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 8002d78:	20c1      	movs	r0, #193	@ 0xc1
 8002d7a:	f7ff febd 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0x45);
 8002d7e:	2045      	movs	r0, #69	@ 0x45
 8002d80:	f7ff ff52 	bl	8002c28 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 8002d84:	20c2      	movs	r0, #194	@ 0xc2
 8002d86:	f7ff feb7 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0x33);
 8002d8a:	2033      	movs	r0, #51	@ 0x33
 8002d8c:	f7ff ff4c 	bl	8002c28 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 8002d90:	20c3      	movs	r0, #195	@ 0xc3
 8002d92:	f7ff feb1 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0x33);
 8002d96:	2033      	movs	r0, #51	@ 0x33
 8002d98:	f7ff ff46 	bl	8002c28 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 8002d9c:	2036      	movs	r0, #54	@ 0x36
 8002d9e:	f7ff feab 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 8002da2:	205c      	movs	r0, #92	@ 0x5c
 8002da4:	f7ff ff40 	bl	8002c28 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 8002da8:	203a      	movs	r0, #58	@ 0x3a
 8002daa:	f7ff fea5 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 8002dae:	2006      	movs	r0, #6
 8002db0:	f7ff ff3a 	bl	8002c28 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7ff fe9f 	bl	8002af8 <LCD_send_command>
	LCD_send_command(0x00);
 8002dba:	2000      	movs	r0, #0
 8002dbc:	f7ff fe9c 	bl	8002af8 <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 8002dc0:	20b0      	movs	r0, #176	@ 0xb0
 8002dc2:	f7ff fe99 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f7ff ff2e 	bl	8002c28 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 8002dcc:	20b1      	movs	r0, #177	@ 0xb1
 8002dce:	f7ff fe93 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 8002dd2:	20a0      	movs	r0, #160	@ 0xa0
 8002dd4:	f7ff ff28 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 8002dd8:	2011      	movs	r0, #17
 8002dda:	f7ff ff25 	bl	8002c28 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 8002dde:	20b4      	movs	r0, #180	@ 0xb4
 8002de0:	f7ff fe8a 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 8002de4:	2002      	movs	r0, #2
 8002de6:	f7ff ff1f 	bl	8002c28 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 8002dea:	20b5      	movs	r0, #181	@ 0xb5
 8002dec:	f7ff fe84 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0x02);
 8002df0:	2002      	movs	r0, #2
 8002df2:	f7ff ff19 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x02);
 8002df6:	2002      	movs	r0, #2
 8002df8:	f7ff ff16 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x0A);
 8002dfc:	200a      	movs	r0, #10
 8002dfe:	f7ff ff13 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x04);
 8002e02:	2004      	movs	r0, #4
 8002e04:	f7ff ff10 	bl	8002c28 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 8002e08:	20b6      	movs	r0, #182	@ 0xb6
 8002e0a:	f7ff fe75 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0x02);
 8002e0e:	2002      	movs	r0, #2
 8002e10:	f7ff ff0a 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x02);
 8002e14:	2002      	movs	r0, #2
 8002e16:	f7ff ff07 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x3B);
 8002e1a:	203b      	movs	r0, #59	@ 0x3b
 8002e1c:	f7ff ff04 	bl	8002c28 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 8002e20:	20e9      	movs	r0, #233	@ 0xe9
 8002e22:	f7ff fe69 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7ff fefe 	bl	8002c28 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8002e2c:	20f7      	movs	r0, #247	@ 0xf7
 8002e2e:	f7ff fe63 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0xA9);
 8002e32:	20a9      	movs	r0, #169	@ 0xa9
 8002e34:	f7ff fef8 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x51);
 8002e38:	2051      	movs	r0, #81	@ 0x51
 8002e3a:	f7ff fef5 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x2C);
 8002e3e:	202c      	movs	r0, #44	@ 0x2c
 8002e40:	f7ff fef2 	bl	8002c28 <LCD_send_data>
	LCD_send_data(0x82);
 8002e44:	2082      	movs	r0, #130	@ 0x82
 8002e46:	f7ff feef 	bl	8002c28 <LCD_send_data>


	LCD_send_command(0x11);
 8002e4a:	2011      	movs	r0, #17
 8002e4c:	f7ff fe54 	bl	8002af8 <LCD_send_command>
	HAL_Delay(255);
 8002e50:	20ff      	movs	r0, #255	@ 0xff
 8002e52:	f002 fa95 	bl	8005380 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 8002e56:	2051      	movs	r0, #81	@ 0x51
 8002e58:	f7ff fe4e 	bl	8002af8 <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 8002e5c:	20ff      	movs	r0, #255	@ 0xff
 8002e5e:	f7ff fee3 	bl	8002c28 <LCD_send_data>
	LCD_send_command(0x29); //Display on
 8002e62:	2029      	movs	r0, #41	@ 0x29
 8002e64:	f7ff fe48 	bl	8002af8 <LCD_send_command>


}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40020c00 	.word	0x40020c00

08002e70 <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4604      	mov	r4, r0
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4623      	mov	r3, r4
 8002e80:	80fb      	strh	r3, [r7, #6]
 8002e82:	4603      	mov	r3, r0
 8002e84:	80bb      	strh	r3, [r7, #4]
 8002e86:	460b      	mov	r3, r1
 8002e88:	807b      	strh	r3, [r7, #2]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 8002e8e:	202a      	movs	r0, #42	@ 0x2a
 8002e90:	f7ff fe32 	bl	8002af8 <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	733b      	strb	r3, [r7, #12]
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 8002ea4:	887b      	ldrh	r3, [r7, #2]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	73bb      	strb	r3, [r7, #14]
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8002eb4:	f107 030c 	add.w	r3, r7, #12
 8002eb8:	2104      	movs	r1, #4
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fe40 	bl	8002b40 <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 8002ec0:	202b      	movs	r0, #43	@ 0x2b
 8002ec2:	f7ff fe19 	bl	8002af8 <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 8002ec6:	88bb      	ldrh	r3, [r7, #4]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	733b      	strb	r3, [r7, #12]
 8002ed0:	88bb      	ldrh	r3, [r7, #4]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 8002ed6:	883b      	ldrh	r3, [r7, #0]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	73bb      	strb	r3, [r7, #14]
 8002ee0:	883b      	ldrh	r3, [r7, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8002ee6:	f107 030c 	add.w	r3, r7, #12
 8002eea:	2104      	movs	r1, #4
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fe27 	bl	8002b40 <LCD_send_data_multi>

	if(x == 'w')
 8002ef2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ef6:	2b77      	cmp	r3, #119	@ 0x77
 8002ef8:	d102      	bne.n	8002f00 <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 8002efa:	202c      	movs	r0, #44	@ 0x2c
 8002efc:	f7ff fdfc 	bl	8002af8 <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 8002f00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f04:	2b72      	cmp	r3, #114	@ 0x72
 8002f06:	d102      	bne.n	8002f0e <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 8002f08:	202e      	movs	r0, #46	@ 0x2e
 8002f0a:	f7ff fdf5 	bl	8002af8 <LCD_send_command>
	}


}
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd90      	pop	{r4, r7, pc}
	...

08002f18 <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4604      	mov	r4, r0
 8002f20:	4608      	mov	r0, r1
 8002f22:	4611      	mov	r1, r2
 8002f24:	461a      	mov	r2, r3
 8002f26:	4623      	mov	r3, r4
 8002f28:	80fb      	strh	r3, [r7, #6]
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	80bb      	strh	r3, [r7, #4]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	807b      	strh	r3, [r7, #2]
 8002f32:	4613      	mov	r3, r2
 8002f34:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 8002f36:	4b7d      	ldr	r3, [pc, #500]	@ (800312c <read_pixel_frame+0x214>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b7b      	ldr	r3, [pc, #492]	@ (800312c <read_pixel_frame+0x214>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f44:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 8002f46:	4b79      	ldr	r3, [pc, #484]	@ (800312c <read_pixel_frame+0x214>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b77      	ldr	r3, [pc, #476]	@ (800312c <read_pixel_frame+0x214>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8002f54:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 8002f56:	4b75      	ldr	r3, [pc, #468]	@ (800312c <read_pixel_frame+0x214>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4b73      	ldr	r3, [pc, #460]	@ (800312c <read_pixel_frame+0x214>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0210 	orr.w	r2, r2, #16
 8002f64:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8002f66:	4b71      	ldr	r3, [pc, #452]	@ (800312c <read_pixel_frame+0x214>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800312c <read_pixel_frame+0x214>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f74:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 8002f76:	4b6e      	ldr	r3, [pc, #440]	@ (8003130 <read_pixel_frame+0x218>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 8002f80:	887a      	ldrh	r2, [r7, #2]
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bfb8      	it	lt
 8002f8a:	425b      	neglt	r3, r3
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	8839      	ldrh	r1, [r7, #0]
 8002f90:	88bb      	ldrh	r3, [r7, #4]
 8002f92:	1acb      	subs	r3, r1, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bfb8      	it	lt
 8002f98:	425b      	neglt	r3, r3
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	fb12 f303 	smulbb	r3, r2, r3
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	0052      	lsls	r2, r2, #1
 8002fa6:	4413      	add	r3, r2
 8002fa8:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 8002faa:	2300      	movs	r3, #0
 8002fac:	753b      	strb	r3, [r7, #20]

    free(data);
 8002fae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002fb0:	f00b fe98 	bl	800ece4 <free>
    data = malloc(byteNr);
 8002fb4:	8afb      	ldrh	r3, [r7, #22]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f00b fe8c 	bl	800ecd4 <malloc>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	807b      	strh	r3, [r7, #2]
    y--;
 8002fc6:	883b      	ldrh	r3, [r7, #0]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	743b      	strb	r3, [r7, #16]
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	747b      	strb	r3, [r7, #17]
 8002fdc:	887b      	ldrh	r3, [r7, #2]
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	74bb      	strb	r3, [r7, #18]
 8002fe6:	887b      	ldrh	r3, [r7, #2]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 8002fec:	88bb      	ldrh	r3, [r7, #4]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	733b      	strb	r3, [r7, #12]
 8002ff6:	88bb      	ldrh	r3, [r7, #4]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	737b      	strb	r3, [r7, #13]
 8002ffc:	883b      	ldrh	r3, [r7, #0]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	b29b      	uxth	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	73bb      	strb	r3, [r7, #14]
 8003006:	883b      	ldrh	r3, [r7, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	73fb      	strb	r3, [r7, #15]

    CS_A();
 800300c:	2200      	movs	r2, #0
 800300e:	2110      	movs	r1, #16
 8003010:	4848      	ldr	r0, [pc, #288]	@ (8003134 <read_pixel_frame+0x21c>)
 8003012:	f003 fab1 	bl	8006578 <HAL_GPIO_WritePin>

    DC_COMMAND();
 8003016:	2200      	movs	r2, #0
 8003018:	2108      	movs	r1, #8
 800301a:	4846      	ldr	r0, [pc, #280]	@ (8003134 <read_pixel_frame+0x21c>)
 800301c:	f003 faac 	bl	8006578 <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 8003020:	232a      	movs	r3, #42	@ 0x2a
 8003022:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 8003024:	f107 010b 	add.w	r1, r7, #11
 8003028:	f04f 33ff 	mov.w	r3, #4294967295
 800302c:	2201      	movs	r2, #1
 800302e:	483f      	ldr	r0, [pc, #252]	@ (800312c <read_pixel_frame+0x214>)
 8003030:	f004 ff75 	bl	8007f1e <HAL_SPI_Transmit>
    DC_DATA();
 8003034:	2201      	movs	r2, #1
 8003036:	2108      	movs	r1, #8
 8003038:	483e      	ldr	r0, [pc, #248]	@ (8003134 <read_pixel_frame+0x21c>)
 800303a:	f003 fa9d 	bl	8006578 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 800303e:	f107 0110 	add.w	r1, r7, #16
 8003042:	f04f 33ff 	mov.w	r3, #4294967295
 8003046:	2204      	movs	r2, #4
 8003048:	4838      	ldr	r0, [pc, #224]	@ (800312c <read_pixel_frame+0x214>)
 800304a:	f004 ff68 	bl	8007f1e <HAL_SPI_Transmit>

    DC_COMMAND();
 800304e:	2200      	movs	r2, #0
 8003050:	2108      	movs	r1, #8
 8003052:	4838      	ldr	r0, [pc, #224]	@ (8003134 <read_pixel_frame+0x21c>)
 8003054:	f003 fa90 	bl	8006578 <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 8003058:	232b      	movs	r3, #43	@ 0x2b
 800305a:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 800305c:	f107 010a 	add.w	r1, r7, #10
 8003060:	f04f 33ff 	mov.w	r3, #4294967295
 8003064:	2201      	movs	r2, #1
 8003066:	4831      	ldr	r0, [pc, #196]	@ (800312c <read_pixel_frame+0x214>)
 8003068:	f004 ff59 	bl	8007f1e <HAL_SPI_Transmit>
    DC_DATA();
 800306c:	2201      	movs	r2, #1
 800306e:	2108      	movs	r1, #8
 8003070:	4830      	ldr	r0, [pc, #192]	@ (8003134 <read_pixel_frame+0x21c>)
 8003072:	f003 fa81 	bl	8006578 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 8003076:	f107 010c 	add.w	r1, r7, #12
 800307a:	f04f 33ff 	mov.w	r3, #4294967295
 800307e:	2204      	movs	r2, #4
 8003080:	482a      	ldr	r0, [pc, #168]	@ (800312c <read_pixel_frame+0x214>)
 8003082:	f004 ff4c 	bl	8007f1e <HAL_SPI_Transmit>

    DC_COMMAND();
 8003086:	2200      	movs	r2, #0
 8003088:	2108      	movs	r1, #8
 800308a:	482a      	ldr	r0, [pc, #168]	@ (8003134 <read_pixel_frame+0x21c>)
 800308c:	f003 fa74 	bl	8006578 <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 8003090:	232e      	movs	r3, #46	@ 0x2e
 8003092:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 8003094:	f107 0109 	add.w	r1, r7, #9
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
 800309c:	2201      	movs	r2, #1
 800309e:	4823      	ldr	r0, [pc, #140]	@ (800312c <read_pixel_frame+0x214>)
 80030a0:	f004 ff3d 	bl	8007f1e <HAL_SPI_Transmit>
    DC_DATA();
 80030a4:	2201      	movs	r2, #1
 80030a6:	2108      	movs	r1, #8
 80030a8:	4822      	ldr	r0, [pc, #136]	@ (8003134 <read_pixel_frame+0x21c>)
 80030aa:	f003 fa65 	bl	8006578 <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 80030ae:	f107 0114 	add.w	r1, r7, #20
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
 80030b6:	2201      	movs	r2, #1
 80030b8:	481c      	ldr	r0, [pc, #112]	@ (800312c <read_pixel_frame+0x214>)
 80030ba:	f005 f874 	bl	80081a6 <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 80030be:	8afb      	ldrh	r3, [r7, #22]
 80030c0:	461a      	mov	r2, r3
 80030c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030c4:	4819      	ldr	r0, [pc, #100]	@ (800312c <read_pixel_frame+0x214>)
 80030c6:	f005 fd09 	bl	8008adc <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 80030ca:	bf00      	nop
 80030cc:	4b18      	ldr	r3, [pc, #96]	@ (8003130 <read_pixel_frame+0x218>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0fa      	beq.n	80030cc <read_pixel_frame+0x1b4>
    CS_D();
 80030d6:	2201      	movs	r2, #1
 80030d8:	2110      	movs	r1, #16
 80030da:	4816      	ldr	r0, [pc, #88]	@ (8003134 <read_pixel_frame+0x21c>)
 80030dc:	f003 fa4c 	bl	8006578 <HAL_GPIO_WritePin>

    free(data);
 80030e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030e2:	f00b fdff 	bl	800ece4 <free>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 80030e6:	4b11      	ldr	r3, [pc, #68]	@ (800312c <read_pixel_frame+0x214>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b0f      	ldr	r3, [pc, #60]	@ (800312c <read_pixel_frame+0x214>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030f4:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 80030f6:	4b0d      	ldr	r3, [pc, #52]	@ (800312c <read_pixel_frame+0x214>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b0b      	ldr	r3, [pc, #44]	@ (800312c <read_pixel_frame+0x214>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8003104:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 8003106:	4b09      	ldr	r3, [pc, #36]	@ (800312c <read_pixel_frame+0x214>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4b08      	ldr	r3, [pc, #32]	@ (800312c <read_pixel_frame+0x214>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8003112:	4b06      	ldr	r3, [pc, #24]	@ (800312c <read_pixel_frame+0x214>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b04      	ldr	r3, [pc, #16]	@ (800312c <read_pixel_frame+0x214>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003120:	601a      	str	r2, [r3, #0]

}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	bd90      	pop	{r4, r7, pc}
 800312a:	bf00      	nop
 800312c:	2001427c 	.word	0x2001427c
 8003130:	200144c5 	.word	0x200144c5
 8003134:	40020c00 	.word	0x40020c00

08003138 <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	 * folosind DMA. Odata terminat transferul SPI prin DMA,
	 * aceasta functia de CallBack se va apela, setandu-ne un flag
	 * pentru a indica starea acestui transfer de date.
	 */

	if(hspi->Instance == SPI1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a05      	ldr	r2, [pc, #20]	@ (800315c <HAL_SPI_TxCpltCallback+0x24>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d102      	bne.n	8003150 <HAL_SPI_TxCpltCallback+0x18>
	{
		flagDmaSpiTx = 1;
 800314a:	4b05      	ldr	r3, [pc, #20]	@ (8003160 <HAL_SPI_TxCpltCallback+0x28>)
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]
	}



}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	40013000 	.word	0x40013000
 8003160:	200144c4 	.word	0x200144c4

08003164 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	/*
	 * Functie de CallBack pentru terminarea receptiei datelor
	 * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	 */

	if(hspi->Instance == SPI1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a23      	ldr	r2, [pc, #140]	@ (8003200 <HAL_SPI_RxCpltCallback+0x9c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d102      	bne.n	800317c <HAL_SPI_RxCpltCallback+0x18>
	{
		/*
		 * SPI1 folosit pentru LCD
		 */

		flagDmaSpiRx = 1;
 8003176:	4b23      	ldr	r3, [pc, #140]	@ (8003204 <HAL_SPI_RxCpltCallback+0xa0>)
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]

	}


	if(hspi->Instance == SPI2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a21      	ldr	r2, [pc, #132]	@ (8003208 <HAL_SPI_RxCpltCallback+0xa4>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d137      	bne.n	80031f6 <HAL_SPI_RxCpltCallback+0x92>
	{
		/*
		 * Receptionare comenzi controller
		 */

		switch(dataController)
 8003186:	4b21      	ldr	r3, [pc, #132]	@ (800320c <HAL_SPI_RxCpltCallback+0xa8>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2bbb      	cmp	r3, #187	@ 0xbb
 800318c:	d026      	beq.n	80031dc <HAL_SPI_RxCpltCallback+0x78>
 800318e:	2bbb      	cmp	r3, #187	@ 0xbb
 8003190:	dc28      	bgt.n	80031e4 <HAL_SPI_RxCpltCallback+0x80>
 8003192:	2b99      	cmp	r3, #153	@ 0x99
 8003194:	d01e      	beq.n	80031d4 <HAL_SPI_RxCpltCallback+0x70>
 8003196:	2b99      	cmp	r3, #153	@ 0x99
 8003198:	dc24      	bgt.n	80031e4 <HAL_SPI_RxCpltCallback+0x80>
 800319a:	2b77      	cmp	r3, #119	@ 0x77
 800319c:	d016      	beq.n	80031cc <HAL_SPI_RxCpltCallback+0x68>
 800319e:	2b77      	cmp	r3, #119	@ 0x77
 80031a0:	dc20      	bgt.n	80031e4 <HAL_SPI_RxCpltCallback+0x80>
 80031a2:	2b55      	cmp	r3, #85	@ 0x55
 80031a4:	d00e      	beq.n	80031c4 <HAL_SPI_RxCpltCallback+0x60>
 80031a6:	2b55      	cmp	r3, #85	@ 0x55
 80031a8:	dc1c      	bgt.n	80031e4 <HAL_SPI_RxCpltCallback+0x80>
 80031aa:	2b11      	cmp	r3, #17
 80031ac:	d002      	beq.n	80031b4 <HAL_SPI_RxCpltCallback+0x50>
 80031ae:	2b33      	cmp	r3, #51	@ 0x33
 80031b0:	d004      	beq.n	80031bc <HAL_SPI_RxCpltCallback+0x58>
 80031b2:	e017      	b.n	80031e4 <HAL_SPI_RxCpltCallback+0x80>
		{
		  	case DxRight:
		  	  currentDx = DxRight;
 80031b4:	4b16      	ldr	r3, [pc, #88]	@ (8003210 <HAL_SPI_RxCpltCallback+0xac>)
 80031b6:	2211      	movs	r2, #17
 80031b8:	701a      	strb	r2, [r3, #0]
		  	  break;
 80031ba:	e017      	b.n	80031ec <HAL_SPI_RxCpltCallback+0x88>
		  	case DxLeft:
		  	  currentDx = DxLeft;
 80031bc:	4b14      	ldr	r3, [pc, #80]	@ (8003210 <HAL_SPI_RxCpltCallback+0xac>)
 80031be:	2233      	movs	r2, #51	@ 0x33
 80031c0:	701a      	strb	r2, [r3, #0]
		  	  break;
 80031c2:	e013      	b.n	80031ec <HAL_SPI_RxCpltCallback+0x88>
		  	case DxUp:
		  	  currentDx = DxUp;
 80031c4:	4b12      	ldr	r3, [pc, #72]	@ (8003210 <HAL_SPI_RxCpltCallback+0xac>)
 80031c6:	2255      	movs	r2, #85	@ 0x55
 80031c8:	701a      	strb	r2, [r3, #0]
		  	  break;
 80031ca:	e00f      	b.n	80031ec <HAL_SPI_RxCpltCallback+0x88>
		  	case DxDown:
		  	  currentDx = DxDown;
 80031cc:	4b10      	ldr	r3, [pc, #64]	@ (8003210 <HAL_SPI_RxCpltCallback+0xac>)
 80031ce:	2277      	movs	r2, #119	@ 0x77
 80031d0:	701a      	strb	r2, [r3, #0]
		  	  break;
 80031d2:	e00b      	b.n	80031ec <HAL_SPI_RxCpltCallback+0x88>
		  	case DxStart:
		  	  currentDx = DxStart;
 80031d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <HAL_SPI_RxCpltCallback+0xac>)
 80031d6:	2299      	movs	r2, #153	@ 0x99
 80031d8:	701a      	strb	r2, [r3, #0]
		  	  break;
 80031da:	e007      	b.n	80031ec <HAL_SPI_RxCpltCallback+0x88>
		  	case DxSelect:
		  	  currentDx = DxSelect;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <HAL_SPI_RxCpltCallback+0xac>)
 80031de:	22bb      	movs	r2, #187	@ 0xbb
 80031e0:	701a      	strb	r2, [r3, #0]
		  	  break;
 80031e2:	e003      	b.n	80031ec <HAL_SPI_RxCpltCallback+0x88>
		  	default:
		  	  currentDx = 0x00;
 80031e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <HAL_SPI_RxCpltCallback+0xac>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	701a      	strb	r2, [r3, #0]
		  	  break;
 80031ea:	bf00      	nop
		}

		/*Reinitializare intrerupere rcpt SPI2 intr Controller*/

		HAL_SPI_Receive_IT(&hspi2, &dataController, sizeof(dataController));
 80031ec:	2201      	movs	r2, #1
 80031ee:	4907      	ldr	r1, [pc, #28]	@ (800320c <HAL_SPI_RxCpltCallback+0xa8>)
 80031f0:	4808      	ldr	r0, [pc, #32]	@ (8003214 <HAL_SPI_RxCpltCallback+0xb0>)
 80031f2:	f005 fa9b 	bl	800872c <HAL_SPI_Receive_IT>

	}

}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40013000 	.word	0x40013000
 8003204:	200144c5 	.word	0x200144c5
 8003208:	40003800 	.word	0x40003800
 800320c:	20000090 	.word	0x20000090
 8003210:	20000091 	.word	0x20000091
 8003214:	200142d4 	.word	0x200142d4

08003218 <HAL_DAC_ConvHalfCpltCallbackCh1>:


void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
    /*
     * Functie de CallBack pentru finalizare 1/2 din transfer DMA pe DAC
     */

	flagDmaDAC = 1;
 8003220:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]

}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	200144c6 	.word	0x200144c6

08003238 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b093      	sub	sp, #76	@ 0x4c
 800323c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800323e:	f002 f82d 	bl	800529c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003242:	2200      	movs	r2, #0
 8003244:	210f      	movs	r1, #15
 8003246:	f06f 0001 	mvn.w	r0, #1
 800324a:	f002 f998 	bl	800557e <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM4_IRQn, 14, 0);
 800324e:	2200      	movs	r2, #0
 8003250:	210e      	movs	r1, #14
 8003252:	201e      	movs	r0, #30
 8003254:	f002 f993 	bl	800557e <HAL_NVIC_SetPriority>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003258:	f000 faec 	bl	8003834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800325c:	f000 fd0a 	bl	8003c74 <MX_GPIO_Init>
  MX_DMA_Init();
 8003260:	f000 fcca 	bl	8003bf8 <MX_DMA_Init>
  MX_SPI1_Init();
 8003264:	f000 fb9a 	bl	800399c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003268:	f000 fc9c 	bl	8003ba4 <MX_USART1_UART_Init>
  MX_DAC_Init();
 800326c:	f000 fb4c 	bl	8003908 <MX_DAC_Init>
  MX_TIM2_Init();
 8003270:	f000 fbfe 	bl	8003a70 <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 8003274:	f000 fb72 	bl	800395c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003278:	f008 fc90 	bl	800bb9c <MX_FATFS_Init>
  MX_SPI2_Init();
 800327c:	f000 fbc4 	bl	8003a08 <MX_SPI2_Init>
  MX_TIM4_Init();
 8003280:	f000 fc42 	bl	8003b08 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 8003284:	f000 fd8c 	bl	8003da0 <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 8003288:	f7ff fcf2 	bl	8002c70 <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 800328c:	48dc      	ldr	r0, [pc, #880]	@ (8003600 <main+0x3c8>)
 800328e:	f006 fba7 	bl	80099e0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8003292:	48dc      	ldr	r0, [pc, #880]	@ (8003604 <main+0x3cc>)
 8003294:	f006 fc0c 	bl	8009ab0 <HAL_TIM_Base_Start_IT>
  HAL_SPI_Receive_IT(&hspi2, &dataController, sizeof(dataController)); /*Initializare SPI2 intr Controller*/
 8003298:	2201      	movs	r2, #1
 800329a:	49db      	ldr	r1, [pc, #876]	@ (8003608 <main+0x3d0>)
 800329c:	48db      	ldr	r0, [pc, #876]	@ (800360c <main+0x3d4>)
 800329e:	f005 fa45 	bl	800872c <HAL_SPI_Receive_IT>

  main_app(); /*FSM principal al sistemului*/
 80032a2:	f7fd fedd 	bl	8001060 <main_app>

  fill_screen1(0xFFFF);
 80032a6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80032aa:	f7fe f8dd 	bl	8001468 <fill_screen1>

  //fill_screen1(0xF100);
  //HAL_Delay(1000);
  //fill_screen2(0xF00F);
  //HAL_Delay(1000);
  fill_screen2(0xFFFF);
 80032ae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80032b2:	f7fe f939 	bl	8001528 <fill_screen2>
  //HAL_Delay(1000);

  unsigned int startTick = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int endTick = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned int getTime = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	633b      	str	r3, [r7, #48]	@ 0x30

  ENTITY entity;
  init_entity_sd(&entity);
 80032c2:	f107 0318 	add.w	r3, r7, #24
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fc33 	bl	8001b32 <init_entity_sd>

  /*Test SCALARE*/

  fill_screen2(0xFFFF);
 80032cc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80032d0:	f7fe f92a 	bl	8001528 <fill_screen2>

  BackGroundColor = 0xFFFF;
 80032d4:	4bce      	ldr	r3, [pc, #824]	@ (8003610 <main+0x3d8>)
 80032d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032da:	801a      	strh	r2, [r3, #0]


  entity.x0 = 100;
 80032dc:	2364      	movs	r3, #100	@ 0x64
 80032de:	837b      	strh	r3, [r7, #26]
  entity.y0 = 100;
 80032e0:	2364      	movs	r3, #100	@ 0x64
 80032e2:	83bb      	strh	r3, [r7, #28]
  entity.id = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	763b      	strb	r3, [r7, #24]
  assign_file_path_entity(&entity, "graphic/multi2.bin");
 80032e8:	f107 0318 	add.w	r3, r7, #24
 80032ec:	49c9      	ldr	r1, [pc, #804]	@ (8003614 <main+0x3dc>)
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fdd7 	bl	8003ea2 <assign_file_path_entity>
  draw_entity(&entity);
 80032f4:	f107 0318 	add.w	r3, r7, #24
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe fc47 	bl	8001b8c <draw_entity>
  HAL_Delay(1000);
 80032fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003302:	f002 f83d 	bl	8005380 <HAL_Delay>
  scaling_entity(&entity, 38);
 8003306:	f107 0318 	add.w	r3, r7, #24
 800330a:	ed9f 0ac3 	vldr	s0, [pc, #780]	@ 8003618 <main+0x3e0>
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe ff52 	bl	80021b8 <scaling_entity>
  erase_entity(entity);
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	f107 0318 	add.w	r3, r7, #24
 800331c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800331e:	f7ff f9c9 	bl	80026b4 <erase_entity>
  draw_entity(&entity);
 8003322:	f107 0318 	add.w	r3, r7, #24
 8003326:	4618      	mov	r0, r3
 8003328:	f7fe fc30 	bl	8001b8c <draw_entity>
  HAL_Delay(1000);
 800332c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003330:	f002 f826 	bl	8005380 <HAL_Delay>

  //--------------------------------------------

  HAL_Delay(1000);
 8003334:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003338:	f002 f822 	bl	8005380 <HAL_Delay>
  fill_screen2(0xFFFF);
 800333c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003340:	f7fe f8f2 	bl	8001528 <fill_screen2>
  rotate_entity(&entity, 90);
 8003344:	f107 0318 	add.w	r3, r7, #24
 8003348:	215a      	movs	r1, #90	@ 0x5a
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff f8b8 	bl	80024c0 <rotate_entity>
  HAL_Delay(5000);
 8003350:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003354:	f002 f814 	bl	8005380 <HAL_Delay>
  rotate_entity(&entity, 180);
 8003358:	f107 0318 	add.w	r3, r7, #24
 800335c:	21b4      	movs	r1, #180	@ 0xb4
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff f8ae 	bl	80024c0 <rotate_entity>
  HAL_Delay(5000);
 8003364:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003368:	f002 f80a 	bl	8005380 <HAL_Delay>
  rotate_entity(&entity, 270);
 800336c:	f107 0318 	add.w	r3, r7, #24
 8003370:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff f8a3 	bl	80024c0 <rotate_entity>
  HAL_Delay(5000);
 800337a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800337e:	f001 ffff 	bl	8005380 <HAL_Delay>

  //---------------------------------------------

  HAL_Delay(1000);
 8003382:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003386:	f001 fffb 	bl	8005380 <HAL_Delay>

  //fill_screen2(0xFFFF);
  draw_rectangle(entity.x0, entity.y0, entity.x1, entity.y1, BackGroundColor);
 800338a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800338e:	b298      	uxth	r0, r3
 8003390:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003394:	b299      	uxth	r1, r3
 8003396:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800339a:	b29a      	uxth	r2, r3
 800339c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80033a0:	b29c      	uxth	r4, r3
 80033a2:	4b9b      	ldr	r3, [pc, #620]	@ (8003610 <main+0x3d8>)
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	4623      	mov	r3, r4
 80033aa:	f7fe fb65 	bl	8001a78 <draw_rectangle>
  draw_entity(&entity);
 80033ae:	f107 0318 	add.w	r3, r7, #24
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fbea 	bl	8001b8c <draw_entity>
  HAL_Delay(1000);
 80033b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033bc:	f001 ffe0 	bl	8005380 <HAL_Delay>
  //fill_screen2(0xFFFF);
  scaling_entity(&entity, 0.5);
 80033c0:	f107 0318 	add.w	r3, r7, #24
 80033c4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe fef5 	bl	80021b8 <scaling_entity>
  HAL_Delay(1000);
 80033ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033d2:	f001 ffd5 	bl	8005380 <HAL_Delay>
  draw_rectangle(entity.x0, entity.y0, entity.x1, entity.y1, BackGroundColor);
 80033d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80033da:	b298      	uxth	r0, r3
 80033dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80033e0:	b299      	uxth	r1, r3
 80033e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80033ec:	b29c      	uxth	r4, r3
 80033ee:	4b88      	ldr	r3, [pc, #544]	@ (8003610 <main+0x3d8>)
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	4623      	mov	r3, r4
 80033f6:	f7fe fb3f 	bl	8001a78 <draw_rectangle>
  draw_entity(&entity);
 80033fa:	f107 0318 	add.w	r3, r7, #24
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe fbc4 	bl	8001b8c <draw_entity>
  HAL_Delay(1000);
 8003404:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003408:	f001 ffba 	bl	8005380 <HAL_Delay>

  fill_screen2(0xFFFF);
 800340c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003410:	f7fe f88a 	bl	8001528 <fill_screen2>
  entity.x0 = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	837b      	strh	r3, [r7, #26]
  entity.y0 = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	83bb      	strh	r3, [r7, #28]
  assign_file_path_entity(&entity, "graphic/img9.bin");
 800341c:	f107 0318 	add.w	r3, r7, #24
 8003420:	497e      	ldr	r1, [pc, #504]	@ (800361c <main+0x3e4>)
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fd3d 	bl	8003ea2 <assign_file_path_entity>
  draw_entity(&entity);
 8003428:	f107 0318 	add.w	r3, r7, #24
 800342c:	4618      	mov	r0, r3
 800342e:	f7fe fbad 	bl	8001b8c <draw_entity>
  HAL_Delay(1000);
 8003432:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003436:	f001 ffa3 	bl	8005380 <HAL_Delay>
  fill_screen2(0xFFFF);
 800343a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800343e:	f7fe f873 	bl	8001528 <fill_screen2>
  scaling_entity(&entity, 0.5);
 8003442:	f107 0318 	add.w	r3, r7, #24
 8003446:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe feb4 	bl	80021b8 <scaling_entity>
  draw_entity(&entity);
 8003450:	f107 0318 	add.w	r3, r7, #24
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fb99 	bl	8001b8c <draw_entity>
  HAL_Delay(1000);
 800345a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800345e:	f001 ff8f 	bl	8005380 <HAL_Delay>
  scaling_entity(&entity, 2);
 8003462:	f107 0318 	add.w	r3, r7, #24
 8003466:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe fea4 	bl	80021b8 <scaling_entity>
  draw_entity(&entity);
 8003470:	f107 0318 	add.w	r3, r7, #24
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe fb89 	bl	8001b8c <draw_entity>
  HAL_Delay(1000);
 800347a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800347e:	f001 ff7f 	bl	8005380 <HAL_Delay>

  //free(dataRec1);

  //Test image print from SD card
  ENTITY ent;
  ent.x0 = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	80fb      	strh	r3, [r7, #6]
  ent.y0 = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	813b      	strh	r3, [r7, #8]
  ent.id = 0x00;
 800348a:	2300      	movs	r3, #0
 800348c:	713b      	strb	r3, [r7, #4]
  init_entity_sd(&ent);
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe fb4e 	bl	8001b32 <init_entity_sd>
  assign_file_path_entity(&ent, "graphic/img5.bin");
 8003496:	1d3b      	adds	r3, r7, #4
 8003498:	4961      	ldr	r1, [pc, #388]	@ (8003620 <main+0x3e8>)
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fd01 	bl	8003ea2 <assign_file_path_entity>
  draw_entity(&ent);
 80034a0:	1d3b      	adds	r3, r7, #4
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fb72 	bl	8001b8c <draw_entity>
  HAL_Delay(2000);
 80034a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80034ac:	f001 ff68 	bl	8005380 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img6.bin");
 80034b0:	1d3b      	adds	r3, r7, #4
 80034b2:	495c      	ldr	r1, [pc, #368]	@ (8003624 <main+0x3ec>)
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fcf4 	bl	8003ea2 <assign_file_path_entity>
  draw_entity(&ent);
 80034ba:	1d3b      	adds	r3, r7, #4
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe fb65 	bl	8001b8c <draw_entity>
  HAL_Delay(2000);
 80034c2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80034c6:	f001 ff5b 	bl	8005380 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img8.bin");
 80034ca:	1d3b      	adds	r3, r7, #4
 80034cc:	4956      	ldr	r1, [pc, #344]	@ (8003628 <main+0x3f0>)
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fce7 	bl	8003ea2 <assign_file_path_entity>
  draw_entity(&ent);
 80034d4:	1d3b      	adds	r3, r7, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fb58 	bl	8001b8c <draw_entity>
  HAL_Delay(2000);
 80034dc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80034e0:	f001 ff4e 	bl	8005380 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img9.bin");
 80034e4:	1d3b      	adds	r3, r7, #4
 80034e6:	494d      	ldr	r1, [pc, #308]	@ (800361c <main+0x3e4>)
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fcda 	bl	8003ea2 <assign_file_path_entity>
  draw_entity(&ent);
 80034ee:	1d3b      	adds	r3, r7, #4
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fe fb4b 	bl	8001b8c <draw_entity>
  HAL_Delay(2000);
 80034f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80034fa:	f001 ff41 	bl	8005380 <HAL_Delay>
  startTick = HAL_GetTick();
 80034fe:	f001 ff33 	bl	8005368 <HAL_GetTick>
 8003502:	63b8      	str	r0, [r7, #56]	@ 0x38
  assign_file_path_entity(&ent, "graphic/img92.bin");
 8003504:	1d3b      	adds	r3, r7, #4
 8003506:	4949      	ldr	r1, [pc, #292]	@ (800362c <main+0x3f4>)
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fcca 	bl	8003ea2 <assign_file_path_entity>
  draw_entity(&ent);
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe fb3b 	bl	8001b8c <draw_entity>
  endTick = HAL_GetTick();
 8003516:	f001 ff27 	bl	8005368 <HAL_GetTick>
 800351a:	6378      	str	r0, [r7, #52]	@ 0x34
  getTime = endTick - startTick;
 800351c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800351e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	633b      	str	r3, [r7, #48]	@ 0x30

  fill_screen2(0x0000);
 8003524:	2000      	movs	r0, #0
 8003526:	f7fd ffff 	bl	8001528 <fill_screen2>
  assign_file_path_entity(&ent, "graphic/pixel1.bin");
 800352a:	1d3b      	adds	r3, r7, #4
 800352c:	4940      	ldr	r1, [pc, #256]	@ (8003630 <main+0x3f8>)
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fcb7 	bl	8003ea2 <assign_file_path_entity>
  draw_entity(&ent);
 8003534:	1d3b      	adds	r3, r7, #4
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fb28 	bl	8001b8c <draw_entity>
  HAL_Delay(3000);
 800353c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003540:	f001 ff1e 	bl	8005380 <HAL_Delay>

  //Test translation

  //ENTITY entity;

  free_entity_sd(&entity);
 8003544:	f107 0318 	add.w	r3, r7, #24
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe fb0d 	bl	8001b68 <free_entity_sd>

  entity.x0 = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	837b      	strh	r3, [r7, #26]
  entity.y0 = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	83bb      	strh	r3, [r7, #28]
  entity.x1 = 64;
 8003556:	2340      	movs	r3, #64	@ 0x40
 8003558:	83fb      	strh	r3, [r7, #30]
  entity.y1 = 64;
 800355a:	2340      	movs	r3, #64	@ 0x40
 800355c:	843b      	strh	r3, [r7, #32]
  entity.id = 0x80;
 800355e:	2380      	movs	r3, #128	@ 0x80
 8003560:	763b      	strb	r3, [r7, #24]
  entity.ST.color = 0xF100;
 8003562:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8003566:	84bb      	strh	r3, [r7, #36]	@ 0x24

  //draw_entity(&entity,NULL);

  translation_test(&entity, 1, 0);
 8003568:	f107 0318 	add.w	r3, r7, #24
 800356c:	2200      	movs	r2, #0
 800356e:	2101      	movs	r1, #1
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe fd4d 	bl	8002010 <translation_test>

  HAL_Delay(500);
 8003576:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800357a:	f001 ff01 	bl	8005380 <HAL_Delay>
  translation_entity(&entity, entity.x0+100, entity.y0+100, 0);//, 0xF100);
 800357e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003582:	b29b      	uxth	r3, r3
 8003584:	3364      	adds	r3, #100	@ 0x64
 8003586:	b29b      	uxth	r3, r3
 8003588:	b219      	sxth	r1, r3
 800358a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800358e:	b29b      	uxth	r3, r3
 8003590:	3364      	adds	r3, #100	@ 0x64
 8003592:	b29b      	uxth	r3, r3
 8003594:	b21a      	sxth	r2, r3
 8003596:	f107 0018 	add.w	r0, r7, #24
 800359a:	2300      	movs	r3, #0
 800359c:	f7fe fc02 	bl	8001da4 <translation_entity>
  HAL_Delay(2000);
 80035a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80035a4:	f001 feec 	bl	8005380 <HAL_Delay>
  translation_entity(&entity, entity.x0+32, entity.y0+32, 0);//, 0xF100);
 80035a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3320      	adds	r3, #32
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	b219      	sxth	r1, r3
 80035b4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3320      	adds	r3, #32
 80035bc:	b29b      	uxth	r3, r3
 80035be:	b21a      	sxth	r2, r3
 80035c0:	f107 0018 	add.w	r0, r7, #24
 80035c4:	2300      	movs	r3, #0
 80035c6:	f7fe fbed 	bl	8001da4 <translation_entity>
  HAL_Delay(500);
 80035ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80035ce:	f001 fed7 	bl	8005380 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0+32, 0);//, 0xF100);
 80035d2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	330c      	adds	r3, #12
 80035da:	b29b      	uxth	r3, r3
 80035dc:	b219      	sxth	r1, r3
 80035de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3320      	adds	r3, #32
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	b21a      	sxth	r2, r3
 80035ea:	f107 0018 	add.w	r0, r7, #24
 80035ee:	2300      	movs	r3, #0
 80035f0:	f7fe fbd8 	bl	8001da4 <translation_entity>
  HAL_Delay(500);
 80035f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80035f8:	f001 fec2 	bl	8005380 <HAL_Delay>
 80035fc:	e01a      	b.n	8003634 <main+0x3fc>
 80035fe:	bf00      	nop
 8003600:	200143ec 	.word	0x200143ec
 8003604:	20014434 	.word	0x20014434
 8003608:	20000090 	.word	0x20000090
 800360c:	200142d4 	.word	0x200142d4
 8003610:	20000008 	.word	0x20000008
 8003614:	0800f1d8 	.word	0x0800f1d8
 8003618:	42180000 	.word	0x42180000
 800361c:	0800f1ec 	.word	0x0800f1ec
 8003620:	0800f200 	.word	0x0800f200
 8003624:	0800f214 	.word	0x0800f214
 8003628:	0800f228 	.word	0x0800f228
 800362c:	0800f23c 	.word	0x0800f23c
 8003630:	0800f250 	.word	0x0800f250
  translation_entity(&entity, entity.x0+12, entity.y0, 0);//, 0xF100);
 8003634:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003638:	b29b      	uxth	r3, r3
 800363a:	330c      	adds	r3, #12
 800363c:	b29b      	uxth	r3, r3
 800363e:	b219      	sxth	r1, r3
 8003640:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003644:	f107 0018 	add.w	r0, r7, #24
 8003648:	2300      	movs	r3, #0
 800364a:	f7fe fbab 	bl	8001da4 <translation_entity>
  HAL_Delay(500);
 800364e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003652:	f001 fe95 	bl	8005380 <HAL_Delay>

  //Test_SD_Card();

  //play_audio_file("audio/mine.txt"); //doremi mine songita song22

  fill_screen2(0xF100);
 8003656:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 800365a:	f7fd ff65 	bl	8001528 <fill_screen2>
  //startTick = HAL_GetTick();
  //read_audio_file("audio/random.txt", sampleData);
  //endTick = HAL_GetTick();
  //getTime = endTick - startTick;

  HAL_Delay(100);
 800365e:	2064      	movs	r0, #100	@ 0x64
 8003660:	f001 fe8e 	bl	8005380 <HAL_Delay>


  for(uint8_t i=0;i<100;i++)
 8003664:	2300      	movs	r3, #0
 8003666:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800366a:	e059      	b.n	8003720 <main+0x4e8>
  {
	  for(uint8_t j=0; j<100;j++)
 800366c:	2300      	movs	r3, #0
 800366e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8003672:	e04c      	b.n	800370e <main+0x4d6>
	  {

		  if(i==j)
 8003674:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8003678:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800367c:	429a      	cmp	r2, r3
 800367e:	d10b      	bne.n	8003698 <main+0x460>
		  {
			  draw_pixel(i,j,0xF100);
 8003680:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003684:	b29b      	uxth	r3, r3
 8003686:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800368a:	b291      	uxth	r1, r2
 800368c:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8003690:	4618      	mov	r0, r3
 8003692:	f7fd fe91 	bl	80013b8 <draw_pixel>
			  continue;
 8003696:	e035      	b.n	8003704 <main+0x4cc>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 8003698:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800369c:	2b50      	cmp	r3, #80	@ 0x50
 800369e:	d103      	bne.n	80036a8 <main+0x470>
 80036a0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80036a4:	2b14      	cmp	r3, #20
 80036a6:	d017      	beq.n	80036d8 <main+0x4a0>
 80036a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80036ac:	2b50      	cmp	r3, #80	@ 0x50
 80036ae:	d103      	bne.n	80036b8 <main+0x480>
 80036b0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80036b4:	2b13      	cmp	r3, #19
 80036b6:	d00f      	beq.n	80036d8 <main+0x4a0>
 80036b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80036bc:	2b51      	cmp	r3, #81	@ 0x51
 80036be:	d103      	bne.n	80036c8 <main+0x490>
 80036c0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80036c4:	2b14      	cmp	r3, #20
 80036c6:	d007      	beq.n	80036d8 <main+0x4a0>
 80036c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80036cc:	2b51      	cmp	r3, #81	@ 0x51
 80036ce:	d10e      	bne.n	80036ee <main+0x4b6>
 80036d0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80036d4:	2b13      	cmp	r3, #19
 80036d6:	d10a      	bne.n	80036ee <main+0x4b6>
		  {
			  draw_pixel(i,j,0x001F);
 80036d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80036e2:	b291      	uxth	r1, r2
 80036e4:	221f      	movs	r2, #31
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fe66 	bl	80013b8 <draw_pixel>
			  continue;
 80036ec:	e00a      	b.n	8003704 <main+0x4cc>
		  }


		  draw_pixel(i,j,0xFFFF);
 80036ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80036f8:	b291      	uxth	r1, r2
 80036fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd fe5a 	bl	80013b8 <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 8003704:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003708:	3301      	adds	r3, #1
 800370a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800370e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8003712:	2b63      	cmp	r3, #99	@ 0x63
 8003714:	d9ae      	bls.n	8003674 <main+0x43c>
  for(uint8_t i=0;i<100;i++)
 8003716:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800371a:	3301      	adds	r3, #1
 800371c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8003720:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003724:	2b63      	cmp	r3, #99	@ 0x63
 8003726:	d9a1      	bls.n	800366c <main+0x434>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 8003728:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 800372c:	f7fd fefc 	bl	8001528 <fill_screen2>
  HAL_Delay(1000);
 8003730:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003734:	f001 fe24 	bl	8005380 <HAL_Delay>
  fill_screen2(0xF150);
 8003738:	f24f 1050 	movw	r0, #61776	@ 0xf150
 800373c:	f7fd fef4 	bl	8001528 <fill_screen2>
  HAL_Delay(1000);
 8003740:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003744:	f001 fe1c 	bl	8005380 <HAL_Delay>
  fill_screen2(0xF111);
 8003748:	f24f 1011 	movw	r0, #61713	@ 0xf111
 800374c:	f7fd feec 	bl	8001528 <fill_screen2>
  HAL_Delay(1000);
 8003750:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003754:	f001 fe14 	bl	8005380 <HAL_Delay>
  fill_screen2(0xF10F);
 8003758:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 800375c:	f7fd fee4 	bl	8001528 <fill_screen2>
  HAL_Delay(1000);
 8003760:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003764:	f001 fe0c 	bl	8005380 <HAL_Delay>
  fill_screen2(0xFFFF);
 8003768:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800376c:	f7fd fedc 	bl	8001528 <fill_screen2>
  HAL_Delay(1000);
 8003770:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003774:	f001 fe04 	bl	8005380 <HAL_Delay>
  fill_screen2(0xFFFF);
 8003778:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800377c:	f7fd fed4 	bl	8001528 <fill_screen2>

  print_string(36, 200, "Licenta 2025", 0x1F00, 0x001F);
 8003780:	231f      	movs	r3, #31
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003788:	4a26      	ldr	r2, [pc, #152]	@ (8003824 <main+0x5ec>)
 800378a:	21c8      	movs	r1, #200	@ 0xc8
 800378c:	2024      	movs	r0, #36	@ 0x24
 800378e:	f7fe f827 	bl	80017e0 <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 8003792:	4b25      	ldr	r3, [pc, #148]	@ (8003828 <main+0x5f0>)
 8003794:	603b      	str	r3, [r7, #0]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 8003796:	463b      	mov	r3, r7
 8003798:	2204      	movs	r2, #4
 800379a:	4619      	mov	r1, r3
 800379c:	4823      	ldr	r0, [pc, #140]	@ (800382c <main+0x5f4>)
 800379e:	f005 f8eb 	bl	8008978 <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 80037a2:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80037a6:	2250      	movs	r2, #80	@ 0x50
 80037a8:	2114      	movs	r1, #20
 80037aa:	2014      	movs	r0, #20
 80037ac:	f7fe f85a 	bl	8001864 <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 80037b0:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80037b4:	2250      	movs	r2, #80	@ 0x50
 80037b6:	2114      	movs	r1, #20
 80037b8:	2014      	movs	r0, #20
 80037ba:	f7fe f88e 	bl	80018da <draw_vertical_line>

  flagDmaSpiTx = 0;
 80037be:	4b1c      	ldr	r3, [pc, #112]	@ (8003830 <main+0x5f8>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 80037c4:	221f      	movs	r2, #31
 80037c6:	2100      	movs	r1, #0
 80037c8:	2000      	movs	r0, #0
 80037ca:	f7fd fdf5 	bl	80013b8 <draw_pixel>
  draw_pixel(1,0,0xF800);
 80037ce:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80037d2:	2100      	movs	r1, #0
 80037d4:	2001      	movs	r0, #1
 80037d6:	f7fd fdef 	bl	80013b8 <draw_pixel>
  draw_pixel(0,1,0x001F);
 80037da:	221f      	movs	r2, #31
 80037dc:	2101      	movs	r1, #1
 80037de:	2000      	movs	r0, #0
 80037e0:	f7fd fdea 	bl	80013b8 <draw_pixel>
  draw_pixel(1,1,0xF800);
 80037e4:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80037e8:	2101      	movs	r1, #1
 80037ea:	2001      	movs	r0, #1
 80037ec:	f7fd fde4 	bl	80013b8 <draw_pixel>

  HAL_Delay(50);
 80037f0:	2032      	movs	r0, #50	@ 0x32
 80037f2:	f001 fdc5 	bl	8005380 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 80037f6:	2001      	movs	r0, #1
 80037f8:	f00b fa6c 	bl	800ecd4 <malloc>
 80037fc:	4603      	mov	r3, r0
 80037fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 8003800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	2302      	movs	r3, #2
 8003806:	2202      	movs	r2, #2
 8003808:	2100      	movs	r1, #0
 800380a:	2000      	movs	r0, #0
 800380c:	f7ff fb84 	bl	8002f18 <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 8003810:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003812:	f00b fa67 	bl	800ece4 <free>

  HAL_Delay(3000);
 8003816:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800381a:	f001 fdb1 	bl	8005380 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800381e:	bf00      	nop
 8003820:	e7fd      	b.n	800381e <main+0x5e6>
 8003822:	bf00      	nop
 8003824:	0800f264 	.word	0x0800f264
 8003828:	04030201 	.word	0x04030201
 800382c:	2001427c 	.word	0x2001427c
 8003830:	200144c4 	.word	0x200144c4

08003834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b094      	sub	sp, #80	@ 0x50
 8003838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800383a:	f107 0320 	add.w	r3, r7, #32
 800383e:	2230      	movs	r2, #48	@ 0x30
 8003840:	2100      	movs	r1, #0
 8003842:	4618      	mov	r0, r3
 8003844:	f00b fb3a 	bl	800eebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003848:	f107 030c 	add.w	r3, r7, #12
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003858:	2300      	movs	r3, #0
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	4b28      	ldr	r3, [pc, #160]	@ (8003900 <SystemClock_Config+0xcc>)
 800385e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003860:	4a27      	ldr	r2, [pc, #156]	@ (8003900 <SystemClock_Config+0xcc>)
 8003862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003866:	6413      	str	r3, [r2, #64]	@ 0x40
 8003868:	4b25      	ldr	r3, [pc, #148]	@ (8003900 <SystemClock_Config+0xcc>)
 800386a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003874:	2300      	movs	r3, #0
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	4b22      	ldr	r3, [pc, #136]	@ (8003904 <SystemClock_Config+0xd0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a21      	ldr	r2, [pc, #132]	@ (8003904 <SystemClock_Config+0xd0>)
 800387e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	4b1f      	ldr	r3, [pc, #124]	@ (8003904 <SystemClock_Config+0xd0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003890:	2301      	movs	r3, #1
 8003892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800389a:	2302      	movs	r3, #2
 800389c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800389e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80038a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80038a4:	2304      	movs	r3, #4
 80038a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80038a8:	23a8      	movs	r3, #168	@ 0xa8
 80038aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038ac:	2302      	movs	r3, #2
 80038ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80038b0:	2307      	movs	r3, #7
 80038b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038b4:	f107 0320 	add.w	r3, r7, #32
 80038b8:	4618      	mov	r0, r3
 80038ba:	f002 fe77 	bl	80065ac <HAL_RCC_OscConfig>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80038c4:	f000 fa66 	bl	8003d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038c8:	230f      	movs	r3, #15
 80038ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038cc:	2302      	movs	r3, #2
 80038ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80038d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80038e0:	f107 030c 	add.w	r3, r7, #12
 80038e4:	2105      	movs	r1, #5
 80038e6:	4618      	mov	r0, r3
 80038e8:	f003 f8d8 	bl	8006a9c <HAL_RCC_ClockConfig>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80038f2:	f000 fa4f 	bl	8003d94 <Error_Handler>
  }
}
 80038f6:	bf00      	nop
 80038f8:	3750      	adds	r7, #80	@ 0x50
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023800 	.word	0x40023800
 8003904:	40007000 	.word	0x40007000

08003908 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800390e:	463b      	mov	r3, r7
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003916:	4b0f      	ldr	r3, [pc, #60]	@ (8003954 <MX_DAC_Init+0x4c>)
 8003918:	4a0f      	ldr	r2, [pc, #60]	@ (8003958 <MX_DAC_Init+0x50>)
 800391a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800391c:	480d      	ldr	r0, [pc, #52]	@ (8003954 <MX_DAC_Init+0x4c>)
 800391e:	f001 fe64 	bl	80055ea <HAL_DAC_Init>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003928:	f000 fa34 	bl	8003d94 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800392c:	2324      	movs	r3, #36	@ 0x24
 800392e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003930:	2300      	movs	r3, #0
 8003932:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003934:	463b      	mov	r3, r7
 8003936:	2200      	movs	r2, #0
 8003938:	4619      	mov	r1, r3
 800393a:	4806      	ldr	r0, [pc, #24]	@ (8003954 <MX_DAC_Init+0x4c>)
 800393c:	f001 ff9b 	bl	8005876 <HAL_DAC_ConfigChannel>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003946:	f000 fa25 	bl	8003d94 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20014184 	.word	0x20014184
 8003958:	40007400 	.word	0x40007400

0800395c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003960:	4b0c      	ldr	r3, [pc, #48]	@ (8003994 <MX_SDIO_SD_Init+0x38>)
 8003962:	4a0d      	ldr	r2, [pc, #52]	@ (8003998 <MX_SDIO_SD_Init+0x3c>)
 8003964:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003966:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <MX_SDIO_SD_Init+0x38>)
 8003968:	2200      	movs	r2, #0
 800396a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800396c:	4b09      	ldr	r3, [pc, #36]	@ (8003994 <MX_SDIO_SD_Init+0x38>)
 800396e:	2200      	movs	r2, #0
 8003970:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003972:	4b08      	ldr	r3, [pc, #32]	@ (8003994 <MX_SDIO_SD_Init+0x38>)
 8003974:	2200      	movs	r2, #0
 8003976:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003978:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <MX_SDIO_SD_Init+0x38>)
 800397a:	2200      	movs	r2, #0
 800397c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800397e:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <MX_SDIO_SD_Init+0x38>)
 8003980:	2200      	movs	r2, #0
 8003982:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8003984:	4b03      	ldr	r3, [pc, #12]	@ (8003994 <MX_SDIO_SD_Init+0x38>)
 8003986:	2208      	movs	r2, #8
 8003988:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800398a:	bf00      	nop
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	200141f8 	.word	0x200141f8
 8003998:	40012c00 	.word	0x40012c00

0800399c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80039a0:	4b17      	ldr	r3, [pc, #92]	@ (8003a00 <MX_SPI1_Init+0x64>)
 80039a2:	4a18      	ldr	r2, [pc, #96]	@ (8003a04 <MX_SPI1_Init+0x68>)
 80039a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039a6:	4b16      	ldr	r3, [pc, #88]	@ (8003a00 <MX_SPI1_Init+0x64>)
 80039a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039ae:	4b14      	ldr	r3, [pc, #80]	@ (8003a00 <MX_SPI1_Init+0x64>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039b4:	4b12      	ldr	r3, [pc, #72]	@ (8003a00 <MX_SPI1_Init+0x64>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ba:	4b11      	ldr	r3, [pc, #68]	@ (8003a00 <MX_SPI1_Init+0x64>)
 80039bc:	2200      	movs	r2, #0
 80039be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a00 <MX_SPI1_Init+0x64>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a00 <MX_SPI1_Init+0x64>)
 80039c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003a00 <MX_SPI1_Init+0x64>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003a00 <MX_SPI1_Init+0x64>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039da:	4b09      	ldr	r3, [pc, #36]	@ (8003a00 <MX_SPI1_Init+0x64>)
 80039dc:	2200      	movs	r2, #0
 80039de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039e0:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <MX_SPI1_Init+0x64>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80039e6:	4b06      	ldr	r3, [pc, #24]	@ (8003a00 <MX_SPI1_Init+0x64>)
 80039e8:	220a      	movs	r2, #10
 80039ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039ec:	4804      	ldr	r0, [pc, #16]	@ (8003a00 <MX_SPI1_Init+0x64>)
 80039ee:	f004 fa0d 	bl	8007e0c <HAL_SPI_Init>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80039f8:	f000 f9cc 	bl	8003d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039fc:	bf00      	nop
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	2001427c 	.word	0x2001427c
 8003a04:	40013000 	.word	0x40013000

08003a08 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003a0c:	4b16      	ldr	r3, [pc, #88]	@ (8003a68 <MX_SPI2_Init+0x60>)
 8003a0e:	4a17      	ldr	r2, [pc, #92]	@ (8003a6c <MX_SPI2_Init+0x64>)
 8003a10:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8003a12:	4b15      	ldr	r3, [pc, #84]	@ (8003a68 <MX_SPI2_Init+0x60>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003a18:	4b13      	ldr	r3, [pc, #76]	@ (8003a68 <MX_SPI2_Init+0x60>)
 8003a1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a1e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a20:	4b11      	ldr	r3, [pc, #68]	@ (8003a68 <MX_SPI2_Init+0x60>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a26:	4b10      	ldr	r3, [pc, #64]	@ (8003a68 <MX_SPI2_Init+0x60>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a68 <MX_SPI2_Init+0x60>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a32:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <MX_SPI2_Init+0x60>)
 8003a34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a38:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <MX_SPI2_Init+0x60>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a40:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <MX_SPI2_Init+0x60>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a46:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <MX_SPI2_Init+0x60>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003a4c:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <MX_SPI2_Init+0x60>)
 8003a4e:	220a      	movs	r2, #10
 8003a50:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a52:	4805      	ldr	r0, [pc, #20]	@ (8003a68 <MX_SPI2_Init+0x60>)
 8003a54:	f004 f9da 	bl	8007e0c <HAL_SPI_Init>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8003a5e:	f000 f999 	bl	8003d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	200142d4 	.word	0x200142d4
 8003a6c:	40003800 	.word	0x40003800

08003a70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a76:	f107 0308 	add.w	r3, r7, #8
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	609a      	str	r2, [r3, #8]
 8003a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a84:	463b      	mov	r3, r7
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b04 <MX_TIM2_Init+0x94>)
 8003a8e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;
 8003a94:	4b1b      	ldr	r3, [pc, #108]	@ (8003b04 <MX_TIM2_Init+0x94>)
 8003a96:	2229      	movs	r2, #41	@ 0x29
 8003a98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b04 <MX_TIM2_Init+0x94>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 27;
 8003aa0:	4b18      	ldr	r3, [pc, #96]	@ (8003b04 <MX_TIM2_Init+0x94>)
 8003aa2:	221b      	movs	r2, #27
 8003aa4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aa6:	4b17      	ldr	r3, [pc, #92]	@ (8003b04 <MX_TIM2_Init+0x94>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aac:	4b15      	ldr	r3, [pc, #84]	@ (8003b04 <MX_TIM2_Init+0x94>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ab2:	4814      	ldr	r0, [pc, #80]	@ (8003b04 <MX_TIM2_Init+0x94>)
 8003ab4:	f005 ff45 	bl	8009942 <HAL_TIM_Base_Init>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8003abe:	f000 f969 	bl	8003d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ac8:	f107 0308 	add.w	r3, r7, #8
 8003acc:	4619      	mov	r1, r3
 8003ace:	480d      	ldr	r0, [pc, #52]	@ (8003b04 <MX_TIM2_Init+0x94>)
 8003ad0:	f006 f94e 	bl	8009d70 <HAL_TIM_ConfigClockSource>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8003ada:	f000 f95b 	bl	8003d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ade:	2320      	movs	r3, #32
 8003ae0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ae6:	463b      	mov	r3, r7
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4806      	ldr	r0, [pc, #24]	@ (8003b04 <MX_TIM2_Init+0x94>)
 8003aec:	f006 fb76 	bl	800a1dc <HAL_TIMEx_MasterConfigSynchronization>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8003af6:	f000 f94d 	bl	8003d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003afa:	bf00      	nop
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200143ec 	.word	0x200143ec

08003b08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b0e:	f107 0308 	add.w	r3, r7, #8
 8003b12:	2200      	movs	r2, #0
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	609a      	str	r2, [r3, #8]
 8003b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b1c:	463b      	mov	r3, r7
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b24:	4b1d      	ldr	r3, [pc, #116]	@ (8003b9c <MX_TIM4_Init+0x94>)
 8003b26:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba0 <MX_TIM4_Init+0x98>)
 8003b28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8003b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b9c <MX_TIM4_Init+0x94>)
 8003b2c:	2254      	movs	r2, #84	@ 0x54
 8003b2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b30:	4b1a      	ldr	r3, [pc, #104]	@ (8003b9c <MX_TIM4_Init+0x94>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8003b36:	4b19      	ldr	r3, [pc, #100]	@ (8003b9c <MX_TIM4_Init+0x94>)
 8003b38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b3e:	4b17      	ldr	r3, [pc, #92]	@ (8003b9c <MX_TIM4_Init+0x94>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b44:	4b15      	ldr	r3, [pc, #84]	@ (8003b9c <MX_TIM4_Init+0x94>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003b4a:	4814      	ldr	r0, [pc, #80]	@ (8003b9c <MX_TIM4_Init+0x94>)
 8003b4c:	f005 fef9 	bl	8009942 <HAL_TIM_Base_Init>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003b56:	f000 f91d 	bl	8003d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003b60:	f107 0308 	add.w	r3, r7, #8
 8003b64:	4619      	mov	r1, r3
 8003b66:	480d      	ldr	r0, [pc, #52]	@ (8003b9c <MX_TIM4_Init+0x94>)
 8003b68:	f006 f902 	bl	8009d70 <HAL_TIM_ConfigClockSource>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003b72:	f000 f90f 	bl	8003d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b76:	2300      	movs	r3, #0
 8003b78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b7e:	463b      	mov	r3, r7
 8003b80:	4619      	mov	r1, r3
 8003b82:	4806      	ldr	r0, [pc, #24]	@ (8003b9c <MX_TIM4_Init+0x94>)
 8003b84:	f006 fb2a 	bl	800a1dc <HAL_TIMEx_MasterConfigSynchronization>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003b8e:	f000 f901 	bl	8003d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b92:	bf00      	nop
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20014434 	.word	0x20014434
 8003ba0:	40000800 	.word	0x40000800

08003ba4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ba8:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003baa:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <MX_USART1_UART_Init+0x50>)
 8003bac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003bae:	4b10      	ldr	r3, [pc, #64]	@ (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bb0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003bb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bca:	220c      	movs	r2, #12
 8003bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bce:	4b08      	ldr	r3, [pc, #32]	@ (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bd4:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bda:	4805      	ldr	r0, [pc, #20]	@ (8003bf0 <MX_USART1_UART_Init+0x4c>)
 8003bdc:	f006 fb8e 	bl	800a2fc <HAL_UART_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003be6:	f000 f8d5 	bl	8003d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	2001447c 	.word	0x2001447c
 8003bf4:	40011000 	.word	0x40011000

08003bf8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	4b1b      	ldr	r3, [pc, #108]	@ (8003c70 <MX_DMA_Init+0x78>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	4a1a      	ldr	r2, [pc, #104]	@ (8003c70 <MX_DMA_Init+0x78>)
 8003c08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c0e:	4b18      	ldr	r3, [pc, #96]	@ (8003c70 <MX_DMA_Init+0x78>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c16:	607b      	str	r3, [r7, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	4b14      	ldr	r3, [pc, #80]	@ (8003c70 <MX_DMA_Init+0x78>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c22:	4a13      	ldr	r2, [pc, #76]	@ (8003c70 <MX_DMA_Init+0x78>)
 8003c24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c2a:	4b11      	ldr	r3, [pc, #68]	@ (8003c70 <MX_DMA_Init+0x78>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003c36:	2200      	movs	r2, #0
 8003c38:	2100      	movs	r1, #0
 8003c3a:	2010      	movs	r0, #16
 8003c3c:	f001 fc9f 	bl	800557e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003c40:	2010      	movs	r0, #16
 8003c42:	f001 fcb8 	bl	80055b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	2100      	movs	r1, #0
 8003c4a:	2038      	movs	r0, #56	@ 0x38
 8003c4c:	f001 fc97 	bl	800557e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003c50:	2038      	movs	r0, #56	@ 0x38
 8003c52:	f001 fcb0 	bl	80055b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	203b      	movs	r0, #59	@ 0x3b
 8003c5c:	f001 fc8f 	bl	800557e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003c60:	203b      	movs	r0, #59	@ 0x3b
 8003c62:	f001 fca8 	bl	80055b6 <HAL_NVIC_EnableIRQ>

}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40023800 	.word	0x40023800

08003c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08c      	sub	sp, #48	@ 0x30
 8003c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c7a:	f107 031c 	add.w	r3, r7, #28
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	605a      	str	r2, [r3, #4]
 8003c84:	609a      	str	r2, [r3, #8]
 8003c86:	60da      	str	r2, [r3, #12]
 8003c88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	4a3d      	ldr	r2, [pc, #244]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003c94:	f043 0310 	orr.w	r3, r3, #16
 8003c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	4b37      	ldr	r3, [pc, #220]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cae:	4a36      	ldr	r2, [pc, #216]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb6:	4b34      	ldr	r3, [pc, #208]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	4b30      	ldr	r3, [pc, #192]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	4a2f      	ldr	r2, [pc, #188]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003ccc:	f043 0304 	orr.w	r3, r3, #4
 8003cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	4b29      	ldr	r3, [pc, #164]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	4a28      	ldr	r2, [pc, #160]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cee:	4b26      	ldr	r3, [pc, #152]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	4b22      	ldr	r3, [pc, #136]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	4a21      	ldr	r2, [pc, #132]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	607b      	str	r3, [r7, #4]
 8003d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003d20:	f043 0308 	orr.w	r3, r3, #8
 8003d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d26:	4b18      	ldr	r3, [pc, #96]	@ (8003d88 <MX_GPIO_Init+0x114>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8003d32:	2200      	movs	r2, #0
 8003d34:	2110      	movs	r1, #16
 8003d36:	4815      	ldr	r0, [pc, #84]	@ (8003d8c <MX_GPIO_Init+0x118>)
 8003d38:	f002 fc1e 	bl	8006578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2158      	movs	r1, #88	@ 0x58
 8003d40:	4813      	ldr	r0, [pc, #76]	@ (8003d90 <MX_GPIO_Init+0x11c>)
 8003d42:	f002 fc19 	bl	8006578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003d46:	2310      	movs	r3, #16
 8003d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d52:	2300      	movs	r3, #0
 8003d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d56:	f107 031c 	add.w	r3, r7, #28
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	480b      	ldr	r0, [pc, #44]	@ (8003d8c <MX_GPIO_Init+0x118>)
 8003d5e:	f002 fa6f 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8003d62:	2358      	movs	r3, #88	@ 0x58
 8003d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d66:	2301      	movs	r3, #1
 8003d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d72:	f107 031c 	add.w	r3, r7, #28
 8003d76:	4619      	mov	r1, r3
 8003d78:	4805      	ldr	r0, [pc, #20]	@ (8003d90 <MX_GPIO_Init+0x11c>)
 8003d7a:	f002 fa61 	bl	8006240 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d7e:	bf00      	nop
 8003d80:	3730      	adds	r7, #48	@ 0x30
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40020c00 	.word	0x40020c00

08003d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d98:	b672      	cpsid	i
}
 8003d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d9c:	bf00      	nop
 8003d9e:	e7fd      	b.n	8003d9c <Error_Handler+0x8>

08003da0 <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 8003da4:	2201      	movs	r2, #1
 8003da6:	4903      	ldr	r1, [pc, #12]	@ (8003db4 <init_cardSD+0x14>)
 8003da8:	4803      	ldr	r0, [pc, #12]	@ (8003db8 <init_cardSD+0x18>)
 8003daa:	f009 fe2d 	bl	800da08 <f_mount>

}
 8003dae:	bf00      	nop
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	0800f274 	.word	0x0800f274
 8003db8:	200144c8 	.word	0x200144c8

08003dbc <string_to_int>:
}



inline static uint16_t string_to_int(char *string)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]

	while((*string) != '\n')
 8003dc8:	e015      	b.n	8003df6 <string_to_int+0x3a>
	{
		if(((*string) >= '0') && ((*string)<='9'))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b2f      	cmp	r3, #47	@ 0x2f
 8003dd0:	d90e      	bls.n	8003df0 <string_to_int+0x34>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b39      	cmp	r3, #57	@ 0x39
 8003dd8:	d80a      	bhi.n	8003df0 <string_to_int+0x34>
		{
			number = number * 10 + ((*string) - '0');
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	461a      	mov	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	4413      	add	r3, r2
 8003dec:	3b30      	subs	r3, #48	@ 0x30
 8003dee:	60fb      	str	r3, [r7, #12]
		}

		string++;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3301      	adds	r3, #1
 8003df4:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b0a      	cmp	r3, #10
 8003dfc:	d1e5      	bne.n	8003dca <string_to_int+0xe>
	}

	return number;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	b29b      	uxth	r3, r3
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <assign_filePath>:

}


char* assign_filePath(const char *filePathName)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
	 * Output: adresa char* catre calea
	 * ! alocat dinamic
	 */

	char *string;
	uint8_t i = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	73fb      	strb	r3, [r7, #15]


	while(filePathName[i] != '\0')
 8003e1a:	e002      	b.n	8003e22 <assign_filePath+0x14>
	{
		i++;
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
	while(filePathName[i] != '\0')
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	4413      	add	r3, r2
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f6      	bne.n	8003e1c <assign_filePath+0xe>
	}

	i++;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	3301      	adds	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]

	string = (char*)malloc(sizeof(char)*i);
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f00a ff4c 	bl	800ecd4 <malloc>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	60bb      	str	r3, [r7, #8]
	memcpy(string, filePathName, i);
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	461a      	mov	r2, r3
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	68b8      	ldr	r0, [r7, #8]
 8003e48:	f00b f8aa 	bl	800efa0 <memcpy>

	return string;
 8003e4c:	68bb      	ldr	r3, [r7, #8]


}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <return_file_name_current_path>:


char* return_file_name_current_path(char *filePathName)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
	 * Input: calea fisierului
	 * Output: pointer catre nume
	 */


	char *fileName = strrchr(filePathName, '/');
 8003e5e:	212f      	movs	r1, #47	@ 0x2f
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f00b f842 	bl	800eeea <strrchr>
 8003e66:	60f8      	str	r0, [r7, #12]

	if(fileName == NULL)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d103      	bne.n	8003e76 <return_file_name_current_path+0x20>
	{
		fileName = filePathName;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	60fb      	str	r3, [r7, #12]
		return fileName;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	e011      	b.n	8003e9a <return_file_name_current_path+0x44>
	}

	else
	{
		fileName++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	60fb      	str	r3, [r7, #12]
	}

	char *string = malloc(strlen(fileName) + 1);
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7fc f9a3 	bl	80001c8 <strlen>
 8003e82:	4603      	mov	r3, r0
 8003e84:	3301      	adds	r3, #1
 8003e86:	4618      	mov	r0, r3
 8003e88:	f00a ff24 	bl	800ecd4 <malloc>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	60bb      	str	r3, [r7, #8]
	strcpy(string, fileName);
 8003e90:	68f9      	ldr	r1, [r7, #12]
 8003e92:	68b8      	ldr	r0, [r7, #8]
 8003e94:	f00b f87c 	bl	800ef90 <strcpy>

	return string;
 8003e98:	68bb      	ldr	r3, [r7, #8]

}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <assign_file_path_entity>:


void assign_file_path_entity(ENTITY *entity, const char *filePathName)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]
	 * Input: adresa entitatii si calea literara
	 * Output: Void
	 */


	strcpy(entity->ST.SD.filePathName, filePathName);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	6839      	ldr	r1, [r7, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f00b f86c 	bl	800ef90 <strcpy>

}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <read_audio_file>:


void read_audio_file(char *filePathName, uint32_t *buffer, bool *flagAudioDone)
{
 8003ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ec4:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003ece:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8003ed2:	6018      	str	r0, [r3, #0]
 8003ed4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003ed8:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003edc:	6019      	str	r1, [r3, #0]
 8003ede:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003ee2:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	466b      	mov	r3, sp
 8003eea:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8003eec:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003ef0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8003ef4:	f107 0020 	add.w	r0, r7, #32
 8003ef8:	2201      	movs	r2, #1
 8003efa:	6819      	ldr	r1, [r3, #0]
 8003efc:	f009 fdca 	bl	800da94 <f_open>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f

	if(res != FR_OK)
 8003f06:	f897 325f 	ldrb.w	r3, [r7, #607]	@ 0x25f
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f040 8110 	bne.w	8004130 <read_audio_file+0x270>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8003f10:	4b8a      	ldr	r3, [pc, #552]	@ (800413c <read_audio_file+0x27c>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	f107 0320 	add.w	r3, r7, #32
 8003f18:	4611      	mov	r1, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f00a fad0 	bl	800e4c0 <f_lseek>


	if(flagNewAudioFile == 1 || *flagAudioDone==1)
 8003f20:	4b87      	ldr	r3, [pc, #540]	@ (8004140 <read_audio_file+0x280>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d107      	bne.n	8003f38 <read_audio_file+0x78>
 8003f28:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003f2c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01e      	beq.n	8003f76 <read_audio_file+0xb6>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		*/

		*flagAudioDone=0;
 8003f38:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003f3c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
		flagNewAudioFile = 0;
 8003f46:	4b7e      	ldr	r3, [pc, #504]	@ (8004140 <read_audio_file+0x280>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8003f4c:	4b7d      	ldr	r3, [pc, #500]	@ (8004144 <read_audio_file+0x284>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	801a      	strh	r2, [r3, #0]

		currentPosition = 0;
 8003f52:	4b7a      	ldr	r3, [pc, #488]	@ (800413c <read_audio_file+0x27c>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul la inceputul fisierului*/
 8003f58:	4b78      	ldr	r3, [pc, #480]	@ (800413c <read_audio_file+0x27c>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	f107 0320 	add.w	r3, r7, #32
 8003f60:	4611      	mov	r1, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f00a faac 	bl	800e4c0 <f_lseek>

		fileSize = f_size(&file); /*Aflam dimensiune in octeti a fisierului*/
 8003f68:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003f6c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	4a75      	ldr	r2, [pc, #468]	@ (8004148 <read_audio_file+0x288>)
 8003f74:	6013      	str	r3, [r2, #0]
	}

	const int n = 5120; /*1024 *5 caractere de prelucrat*/
 8003f76:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003f7a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
	unsigned int nrFrames = fileSize / n;
 8003f7e:	4b72      	ldr	r3, [pc, #456]	@ (8004148 <read_audio_file+0x288>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8a:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

	if(fileSize%n != 0)
 8003f8e:	4b6e      	ldr	r3, [pc, #440]	@ (8004148 <read_audio_file+0x288>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8003f96:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f9a:	fb01 f202 	mul.w	r2, r1, r2
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <read_audio_file+0xee>
	{
		nrFrames++;
 8003fa4:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8003fa8:	3301      	adds	r3, #1
 8003faa:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
	}

	uint8_t index = 0;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	char tempBuffer[n];
 8003fb4:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 8003fbe:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	4698      	mov	r8, r3
 8003fc6:	4691      	mov	r9, r2
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fd4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fd8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fdc:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	461c      	mov	r4, r3
 8003fe4:	4615      	mov	r5, r2
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	00eb      	lsls	r3, r5, #3
 8003ff0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ff4:	00e2      	lsls	r2, r4, #3
 8003ff6:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003ffa:	3307      	adds	r3, #7
 8003ffc:	08db      	lsrs	r3, r3, #3
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	ebad 0d03 	sub.w	sp, sp, r3
 8004004:	466b      	mov	r3, sp
 8004006:	3300      	adds	r3, #0
 8004008:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	char nrCharBuffer[5];

	f_read(&file, tempBuffer, (sizeof(char)*n)-1, &byteRead);
 800400c:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8004010:	1e5a      	subs	r2, r3, #1
 8004012:	f107 031c 	add.w	r3, r7, #28
 8004016:	f107 0020 	add.w	r0, r7, #32
 800401a:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 800401e:	f009 fef3 	bl	800de08 <f_read>
	tempBuffer[byteRead] = '\n';
 8004022:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8004026:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8004030:	210a      	movs	r1, #10
 8004032:	54d1      	strb	r1, [r2, r3]


	for(uint16_t i=0; i< byteRead; i++)
 8004034:	2300      	movs	r3, #0
 8004036:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 800403a:	e040      	b.n	80040be <read_audio_file+0x1fe>
		/*
		 * Vom parcurge tempBuffer si vom transforma caracterele citite
		 * in numere zecimale de interes
		 */

		if(tempBuffer[i] != '\n')
 800403c:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 8004040:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8004044:	5cd3      	ldrb	r3, [r2, r3]
 8004046:	2b0a      	cmp	r3, #10
 8004048:	d011      	beq.n	800406e <read_audio_file+0x1ae>
		{
			nrCharBuffer[index] = tempBuffer[i];
 800404a:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 800404e:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8004052:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8004056:	5c89      	ldrb	r1, [r1, r2]
 8004058:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800405c:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8004060:	54d1      	strb	r1, [r2, r3]
			index++;
 8004062:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8004066:	3301      	adds	r3, #1
 8004068:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
 800406c:	e022      	b.n	80040b4 <read_audio_file+0x1f4>
		else
		{
			/*Vom avea in nrCharBuffer esantionul in char si il vom
			 * converti la int*/

			nrCharBuffer[index] = '\n';
 800406e:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8004072:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8004076:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 800407a:	210a      	movs	r1, #10
 800407c:	54d1      	strb	r1, [r2, r3]
			*buffer = string_to_int(nrCharBuffer);
 800407e:	f107 0314 	add.w	r3, r7, #20
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff fe9a 	bl	8003dbc <string_to_int>
 8004088:	4603      	mov	r3, r0
 800408a:	461a      	mov	r2, r3
 800408c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8004090:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	601a      	str	r2, [r3, #0]
			buffer++;
 8004098:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800409c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80040a0:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80040a4:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	3204      	adds	r2, #4
 80040ac:	601a      	str	r2, [r3, #0]

			index = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	for(uint16_t i=0; i< byteRead; i++)
 80040b4:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 80040b8:	3301      	adds	r3, #1
 80040ba:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 80040be:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 80040c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80040c6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d3b5      	bcc.n	800403c <read_audio_file+0x17c>


	}


	if(currentFrame == nrFrames)
 80040d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004144 <read_audio_file+0x284>)
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10f      	bne.n	80040fe <read_audio_file+0x23e>
	{
		/*Resetare flag pentru reinitializare*/

		flagNewAudioFile = 1;
 80040de:	4b18      	ldr	r3, [pc, #96]	@ (8004140 <read_audio_file+0x280>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	701a      	strb	r2, [r3, #0]
		*flagAudioDone = 1;
 80040e4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80040e8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]

		f_close(&file);
 80040f2:	f107 0320 	add.w	r3, r7, #32
 80040f6:	4618      	mov	r0, r3
 80040f8:	f00a f9b8 	bl	800e46c <f_close>
		return;
 80040fc:	e018      	b.n	8004130 <read_audio_file+0x270>
	}

	currentFrame++;
 80040fe:	4b11      	ldr	r3, [pc, #68]	@ (8004144 <read_audio_file+0x284>)
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	4b0f      	ldr	r3, [pc, #60]	@ (8004144 <read_audio_file+0x284>)
 8004108:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 800410a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800410e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	4a09      	ldr	r2, [pc, #36]	@ (800413c <read_audio_file+0x27c>)
 8004116:	6013      	str	r3, [r2, #0]
	currentPosition++;
 8004118:	4b08      	ldr	r3, [pc, #32]	@ (800413c <read_audio_file+0x27c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3301      	adds	r3, #1
 800411e:	4a07      	ldr	r2, [pc, #28]	@ (800413c <read_audio_file+0x27c>)
 8004120:	6013      	str	r3, [r2, #0]

	f_close(&file);
 8004122:	f107 0320 	add.w	r3, r7, #32
 8004126:	4618      	mov	r0, r3
 8004128:	f00a f9a0 	bl	800e46c <f_close>
 800412c:	46b5      	mov	sp, r6
 800412e:	e000      	b.n	8004132 <read_audio_file+0x272>
		return;
 8004130:	46b5      	mov	sp, r6


}
 8004132:	f507 771b 	add.w	r7, r7, #620	@ 0x26c
 8004136:	46bd      	mov	sp, r7
 8004138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800413c:	200146f8 	.word	0x200146f8
 8004140:	2000000a 	.word	0x2000000a
 8004144:	200146fc 	.word	0x200146fc
 8004148:	20014700 	.word	0x20014700

0800414c <read_image_file>:


void read_image_file(ENTITY *entity, uint16_t *indexFlag, bool *flagImgDone)
{
 800414c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004150:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8004154:	af00      	add	r7, sp, #0
 8004156:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800415a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800415e:	6018      	str	r0, [r3, #0]
 8004160:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004164:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8004168:	6019      	str	r1, [r3, #0]
 800416a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800416e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	466b      	mov	r3, sp
 8004176:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, entity->ST.SD.filePathName, FA_READ);
 8004178:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800417c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6919      	ldr	r1, [r3, #16]
 8004184:	f107 031c 	add.w	r3, r7, #28
 8004188:	2201      	movs	r2, #1
 800418a:	4618      	mov	r0, r3
 800418c:	f009 fc82 	bl	800da94 <f_open>
 8004190:	4603      	mov	r3, r0
 8004192:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255

	if(res != FR_OK)
 8004196:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 800419a:	2b00      	cmp	r3, #0
 800419c:	f040 81af 	bne.w	80044fe <read_image_file+0x3b2>
	static const int n = 3072;
	static unsigned int nrFrames = 0;



	if(flagNewImageFile == 1)
 80041a0:	4ba8      	ldr	r3, [pc, #672]	@ (8004444 <read_image_file+0x2f8>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80d6 	beq.w	8004356 <read_image_file+0x20a>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 80041aa:	4ba7      	ldr	r3, [pc, #668]	@ (8004448 <read_image_file+0x2fc>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 80041b0:	4ba5      	ldr	r3, [pc, #660]	@ (8004448 <read_image_file+0x2fc>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	f107 031c 	add.w	r3, r7, #28
 80041b8:	4611      	mov	r1, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f00a f980 	bl	800e4c0 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 80041c0:	f107 0318 	add.w	r3, r7, #24
 80041c4:	f107 0114 	add.w	r1, r7, #20
 80041c8:	f107 001c 	add.w	r0, r7, #28
 80041cc:	2204      	movs	r2, #4
 80041ce:	f009 fe1b 	bl	800de08 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 80041d2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80041d6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2200      	movs	r2, #0
 80041de:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 80041e0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80041e4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2200      	movs	r2, #0
 80041ec:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 80041ee:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80041f2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80041fc:	461a      	mov	r2, r3
 80041fe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004202:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8004206:	785b      	ldrb	r3, [r3, #1]
 8004208:	4313      	orrs	r3, r2
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	b21a      	sxth	r2, r3
 800420e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004212:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800421c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004220:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	b21b      	sxth	r3, r3
 8004228:	430b      	orrs	r3, r1
 800422a:	b21b      	sxth	r3, r3
 800422c:	4313      	orrs	r3, r2
 800422e:	b21a      	sxth	r2, r3
 8004230:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004234:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 800423c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004240:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800424a:	461a      	mov	r2, r3
 800424c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004250:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8004254:	78db      	ldrb	r3, [r3, #3]
 8004256:	4313      	orrs	r3, r2
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	b21a      	sxth	r2, r3
 800425c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004260:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800426a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800426e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8004272:	789b      	ldrb	r3, [r3, #2]
 8004274:	b21b      	sxth	r3, r3
 8004276:	430b      	orrs	r3, r1
 8004278:	b21b      	sxth	r3, r3
 800427a:	4313      	orrs	r3, r2
 800427c:	b21a      	sxth	r2, r3
 800427e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004282:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	811a      	strh	r2, [r3, #8]


		if((entity->x1)*(entity->y1) < 1024)
 800428a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800428e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004298:	461a      	mov	r2, r3
 800429a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800429e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042a8:	fb02 f303 	mul.w	r3, r2, r3
 80042ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b0:	da1f      	bge.n	80042f2 <read_image_file+0x1a6>
		{
			/*Pentru un singur frame alocam exact cat trebuie */
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 80042b2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80042b6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80042c0:	461a      	mov	r2, r3
 80042c2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80042c6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042d0:	fb03 f202 	mul.w	r2, r3, r2
 80042d4:	4613      	mov	r3, r2
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	4413      	add	r3, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f00a fcfa 	bl	800ecd4 <malloc>
 80042e0:	4603      	mov	r3, r0
 80042e2:	461a      	mov	r2, r3
 80042e4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80042e8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60da      	str	r2, [r3, #12]
 80042f0:	e00b      	b.n	800430a <read_image_file+0x1be>
		}

		else
		{
			/*Alocam maxim 3072 de octeti per frame*/
			entity->ST.SD.data = malloc(sizeof(char)*3072);
 80042f2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80042f6:	f00a fced 	bl	800ecd4 <malloc>
 80042fa:	4603      	mov	r3, r0
 80042fc:	461a      	mov	r2, r3
 80042fe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004302:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60da      	str	r2, [r3, #12]
		}

		flagNewImageFile = 0;
 800430a:	4b4e      	ldr	r3, [pc, #312]	@ (8004444 <read_image_file+0x2f8>)
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8004310:	4b4e      	ldr	r3, [pc, #312]	@ (800444c <read_image_file+0x300>)
 8004312:	2200      	movs	r2, #0
 8004314:	801a      	strh	r2, [r3, #0]

		currentPosition = byteRead;
 8004316:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800431a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a49      	ldr	r2, [pc, #292]	@ (8004448 <read_image_file+0x2fc>)
 8004322:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8004324:	4b48      	ldr	r3, [pc, #288]	@ (8004448 <read_image_file+0x2fc>)
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	f107 031c 	add.w	r3, r7, #28
 800432c:	4611      	mov	r1, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f00a f8c6 	bl	800e4c0 <f_lseek>

		/*Aflam dimensiune in octeti a imaginii de citit (scadem dimensiunea headerului)*/
		fileSize = f_size(&file) - 4;
 8004334:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004338:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	3b04      	subs	r3, #4
 8004340:	4a43      	ldr	r2, [pc, #268]	@ (8004450 <read_image_file+0x304>)
 8004342:	6013      	str	r3, [r2, #0]

		/*calculam numarul de frameuri*/

		nrFrames = fileSize / n;
 8004344:	4b42      	ldr	r3, [pc, #264]	@ (8004450 <read_image_file+0x304>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a42      	ldr	r2, [pc, #264]	@ (8004454 <read_image_file+0x308>)
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004350:	4a41      	ldr	r2, [pc, #260]	@ (8004458 <read_image_file+0x30c>)
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	e007      	b.n	8004366 <read_image_file+0x21a>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8004356:	4b3c      	ldr	r3, [pc, #240]	@ (8004448 <read_image_file+0x2fc>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	f107 031c 	add.w	r3, r7, #28
 800435e:	4611      	mov	r1, r2
 8004360:	4618      	mov	r0, r3
 8004362:	f00a f8ad 	bl	800e4c0 <f_lseek>
	}



	if(fileSize == n)
 8004366:	4b3a      	ldr	r3, [pc, #232]	@ (8004450 <read_image_file+0x304>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a3a      	ldr	r2, [pc, #232]	@ (8004454 <read_image_file+0x308>)
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	4293      	cmp	r3, r2
 8004370:	d104      	bne.n	800437c <read_image_file+0x230>
	{
		nrFrames--; /*pastram logica primului frame pana la n*/
 8004372:	4b39      	ldr	r3, [pc, #228]	@ (8004458 <read_image_file+0x30c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3b01      	subs	r3, #1
 8004378:	4a37      	ldr	r2, [pc, #220]	@ (8004458 <read_image_file+0x30c>)
 800437a:	6013      	str	r3, [r2, #0]
	}

	if(fileSize%n != 0 && nrFrames!=0)
 800437c:	4b34      	ldr	r3, [pc, #208]	@ (8004450 <read_image_file+0x304>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a34      	ldr	r2, [pc, #208]	@ (8004454 <read_image_file+0x308>)
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	fbb3 f1f2 	udiv	r1, r3, r2
 8004388:	fb01 f202 	mul.w	r2, r1, r2
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d008      	beq.n	80043a4 <read_image_file+0x258>
 8004392:	4b31      	ldr	r3, [pc, #196]	@ (8004458 <read_image_file+0x30c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d004      	beq.n	80043a4 <read_image_file+0x258>
	{
		nrFrames++;
 800439a:	4b2f      	ldr	r3, [pc, #188]	@ (8004458 <read_image_file+0x30c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3301      	adds	r3, #1
 80043a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004458 <read_image_file+0x30c>)
 80043a2:	6013      	str	r3, [r2, #0]
	}

	*indexFlag = 0;
 80043a4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80043a8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2200      	movs	r2, #0
 80043b0:	801a      	strh	r2, [r3, #0]
	char tempBuffer[n];
 80043b2:	4b28      	ldr	r3, [pc, #160]	@ (8004454 <read_image_file+0x308>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 80043bc:	4b25      	ldr	r3, [pc, #148]	@ (8004454 <read_image_file+0x308>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	2300      	movs	r3, #0
 80043c4:	4690      	mov	r8, r2
 80043c6:	4699      	mov	r9, r3
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043d4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043d8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004454 <read_image_file+0x308>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	2300      	movs	r3, #0
 80043e4:	4614      	mov	r4, r2
 80043e6:	461d      	mov	r5, r3
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	00eb      	lsls	r3, r5, #3
 80043f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043f6:	00e2      	lsls	r2, r4, #3
 80043f8:	4b16      	ldr	r3, [pc, #88]	@ (8004454 <read_image_file+0x308>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3307      	adds	r3, #7
 80043fe:	08db      	lsrs	r3, r3, #3
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	ebad 0d03 	sub.w	sp, sp, r3
 8004406:	466b      	mov	r3, sp
 8004408:	3300      	adds	r3, #0
 800440a:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

	f_read(&file, tempBuffer, (sizeof(char)*n), &byteRead);
 800440e:	4b11      	ldr	r3, [pc, #68]	@ (8004454 <read_image_file+0x308>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	f107 0318 	add.w	r3, r7, #24
 8004418:	f107 001c 	add.w	r0, r7, #28
 800441c:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8004420:	f009 fcf2 	bl	800de08 <f_read>
	(*indexFlag) = byteRead;
 8004424:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004428:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	b29a      	uxth	r2, r3
 8004430:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004434:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	801a      	strh	r2, [r3, #0]

	for(uint16_t i=0; i<byteRead; i++)
 800443c:	2300      	movs	r3, #0
 800443e:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8004442:	e01f      	b.n	8004484 <read_image_file+0x338>
 8004444:	2000000b 	.word	0x2000000b
 8004448:	20014704 	.word	0x20014704
 800444c:	20014708 	.word	0x20014708
 8004450:	2001470c 	.word	0x2001470c
 8004454:	08010018 	.word	0x08010018
 8004458:	20014710 	.word	0x20014710
	{
		/*Vom parcurge bufferul la intervale de 2 valori HEXA, preluand caracterele ascii
		 * pe care le vom transforma in zecimal ex: FF1200FE3000...*/

		entity->ST.SD.data[i] = tempBuffer[i];
 800445c:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8004460:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004464:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68d9      	ldr	r1, [r3, #12]
 800446c:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8004470:	440b      	add	r3, r1
 8004472:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8004476:	5c8a      	ldrb	r2, [r1, r2]
 8004478:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<byteRead; i++)
 800447a:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 800447e:	3301      	adds	r3, #1
 8004480:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8004484:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8004488:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800448c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d3e2      	bcc.n	800445c <read_image_file+0x310>

	}


	currentFrame++;
 8004496:	4b1d      	ldr	r3, [pc, #116]	@ (800450c <read_image_file+0x3c0>)
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	3301      	adds	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	4b1b      	ldr	r3, [pc, #108]	@ (800450c <read_image_file+0x3c0>)
 80044a0:	801a      	strh	r2, [r3, #0]

	if((currentFrame >= nrFrames) || ((*(indexFlag)) < 3072))
 80044a2:	4b1a      	ldr	r3, [pc, #104]	@ (800450c <read_image_file+0x3c0>)
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	4b19      	ldr	r3, [pc, #100]	@ (8004510 <read_image_file+0x3c4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d208      	bcs.n	80044c2 <read_image_file+0x376>
 80044b0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80044b4:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044c0:	d20f      	bcs.n	80044e2 <read_image_file+0x396>
	{
		/*Resetare flag pentru reinitializare*/

		*flagImgDone = 1;
 80044c2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80044c6:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]

		flagNewImageFile = 1;
 80044d0:	4b10      	ldr	r3, [pc, #64]	@ (8004514 <read_image_file+0x3c8>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 80044d6:	f107 031c 	add.w	r3, r7, #28
 80044da:	4618      	mov	r0, r3
 80044dc:	f009 ffc6 	bl	800e46c <f_close>
		return;
 80044e0:	e00d      	b.n	80044fe <read_image_file+0x3b2>
	}


	currentPosition = f_tell(&file);
 80044e2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80044e6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004518 <read_image_file+0x3cc>)
 80044ee:	6013      	str	r3, [r2, #0]


	f_close(&file);
 80044f0:	f107 031c 	add.w	r3, r7, #28
 80044f4:	4618      	mov	r0, r3
 80044f6:	f009 ffb9 	bl	800e46c <f_close>
 80044fa:	46b5      	mov	sp, r6
 80044fc:	e000      	b.n	8004500 <read_image_file+0x3b4>
		return;
 80044fe:	46b5      	mov	sp, r6


}
 8004500:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8004504:	46bd      	mov	sp, r7
 8004506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800450a:	bf00      	nop
 800450c:	20014708 	.word	0x20014708
 8004510:	20014710 	.word	0x20014710
 8004514:	2000000b 	.word	0x2000000b
 8004518:	20014704 	.word	0x20014704

0800451c <frame_number_x>:



static uint16_t frame_number_x(ENTITY *entity, const float factor)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	ed87 0a02 	vstr	s0, [r7, #8]

	uint8_t x = 1;
 8004528:	2301      	movs	r3, #1
 800452a:	75fb      	strb	r3, [r7, #23]

	if(factor > 1)
 800452c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453c:	dd33      	ble.n	80045a6 <frame_number_x+0x8a>
	{
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 800453e:	e00b      	b.n	8004558 <frame_number_x+0x3c>
		{
			if(x == entity->y1)
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8004548:	4293      	cmp	r3, r2
 800454a:	d102      	bne.n	8004552 <frame_number_x+0x36>
			{
				return x;
 800454c:	7dfb      	ldrb	r3, [r7, #23]
 800454e:	b29b      	uxth	r3, r3
 8004550:	e05f      	b.n	8004612 <frame_number_x+0xf6>
			}

			x++;
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	3301      	adds	r3, #1
 8004556:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800455e:	ee07 3a90 	vmov	s15, r3
 8004562:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004566:	edd7 7a02 	vldr	s15, [r7, #8]
 800456a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800456e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004572:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004576:	7dfb      	ldrb	r3, [r7, #23]
 8004578:	ee07 3a90 	vmov	s15, r3
 800457c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004584:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004620 <frame_number_x+0x104>
 8004588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800458c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004590:	d9d6      	bls.n	8004540 <frame_number_x+0x24>
		}


		if(x==1)
 8004592:	7dfb      	ldrb	r3, [r7, #23]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <frame_number_x+0x80>
		{
			return 1;
 8004598:	2301      	movs	r3, #1
 800459a:	e03a      	b.n	8004612 <frame_number_x+0xf6>
		}

		else
		{
			return (x-1);
 800459c:	7dfb      	ldrb	r3, [r7, #23]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	e035      	b.n	8004612 <frame_number_x+0xf6>
	}


	else
	{
		x = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	75fb      	strb	r3, [r7, #23]

		while((((int)(entity->x1)*x) <= (32*32)))
 80045aa:	e016      	b.n	80045da <frame_number_x+0xbe>
		{
			if(x == entity->y1)
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d102      	bne.n	80045be <frame_number_x+0xa2>
			{
				return x;
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	e029      	b.n	8004612 <frame_number_x+0xf6>
			}

			x = x + (int)(1/factor);
 80045be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80045c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80045d2:	793a      	ldrb	r2, [r7, #4]
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
 80045d6:	4413      	add	r3, r2
 80045d8:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*x) <= (32*32)))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80045e0:	461a      	mov	r2, r3
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
 80045e4:	fb02 f303 	mul.w	r3, r2, r3
 80045e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ec:	ddde      	ble.n	80045ac <frame_number_x+0x90>
		}


		return (x-(1/factor));
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045f8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80045fc:	edd7 6a02 	vldr	s13, [r7, #8]
 8004600:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800460c:	ee17 3a90 	vmov	r3, s15
 8004610:	b29b      	uxth	r3, r3

	}


}
 8004612:	4618      	mov	r0, r3
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	44800000 	.word	0x44800000

08004624 <read_image_file_scaling>:



void read_image_file_scaling(char *filePathName, ENTITY *entity, const float factor, uint16_t *px, bool *flagTerm)
{
 8004624:	b590      	push	{r4, r7, lr}
 8004626:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 800462a:	af00      	add	r7, sp, #0
 800462c:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8004630:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8004634:	6020      	str	r0, [r4, #0]
 8004636:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 800463a:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 800463e:	6001      	str	r1, [r0, #0]
 8004640:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8004644:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8004648:	ed81 0a00 	vstr	s0, [r1]
 800464c:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8004650:	f5a1 7114 	sub.w	r1, r1, #592	@ 0x250
 8004654:	600a      	str	r2, [r1, #0]
 8004656:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800465a:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 800465e:	6013      	str	r3, [r2, #0]

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8004660:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004664:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8004668:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800466c:	2201      	movs	r2, #1
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	f009 fa10 	bl	800da94 <f_open>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 800467a:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 800467e:	2b00      	cmp	r3, #0
 8004680:	f040 81be 	bne.w	8004a00 <read_image_file_scaling+0x3dc>
	static FSIZE_t currentPosition = 0;

	static uint16_t x = 0; /*Numarul de linii din M1 ai sa avem sub 32x32 pixeli de prelucrat in M2*/
	static unsigned int nrFrames = 0;

	if(flagNewImageFile == 1)
 8004684:	4ba9      	ldr	r3, [pc, #676]	@ (800492c <read_image_file_scaling+0x308>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 8112 	beq.w	80048b2 <read_image_file_scaling+0x28e>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 800468e:	4ba8      	ldr	r3, [pc, #672]	@ (8004930 <read_image_file_scaling+0x30c>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 8004694:	4ba6      	ldr	r3, [pc, #664]	@ (8004930 <read_image_file_scaling+0x30c>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800469c:	4611      	mov	r1, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f009 ff0e 	bl	800e4c0 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 80046a4:	f107 0320 	add.w	r3, r7, #32
 80046a8:	f107 011c 	add.w	r1, r7, #28
 80046ac:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80046b0:	2204      	movs	r2, #4
 80046b2:	f009 fba9 	bl	800de08 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 80046b6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80046ba:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2200      	movs	r2, #0
 80046c2:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 80046c4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80046c8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2200      	movs	r2, #0
 80046d0:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 80046d2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80046d6:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80046e0:	461a      	mov	r2, r3
 80046e2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80046e6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	021b      	lsls	r3, r3, #8
 80046f0:	b21a      	sxth	r2, r3
 80046f2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80046f6:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8004700:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004704:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	b21b      	sxth	r3, r3
 800470c:	430b      	orrs	r3, r1
 800470e:	b21b      	sxth	r3, r3
 8004710:	4313      	orrs	r3, r2
 8004712:	b21a      	sxth	r2, r3
 8004714:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004718:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8004720:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004724:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800472e:	461a      	mov	r2, r3
 8004730:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004734:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8004738:	78db      	ldrb	r3, [r3, #3]
 800473a:	4313      	orrs	r3, r2
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	b21a      	sxth	r2, r3
 8004740:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004744:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800474e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004752:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8004756:	789b      	ldrb	r3, [r3, #2]
 8004758:	b21b      	sxth	r3, r3
 800475a:	430b      	orrs	r3, r1
 800475c:	b21b      	sxth	r3, r3
 800475e:	4313      	orrs	r3, r2
 8004760:	b21a      	sxth	r2, r3
 8004762:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004766:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	811a      	strh	r2, [r3, #8]


		flagNewImageFile = 0;
 800476e:	4b6f      	ldr	r3, [pc, #444]	@ (800492c <read_image_file_scaling+0x308>)
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8004774:	4b6f      	ldr	r3, [pc, #444]	@ (8004934 <read_image_file_scaling+0x310>)
 8004776:	2200      	movs	r2, #0
 8004778:	801a      	strh	r2, [r3, #0]
		flagOneFrame = 0;
 800477a:	4b6f      	ldr	r3, [pc, #444]	@ (8004938 <read_image_file_scaling+0x314>)
 800477c:	2200      	movs	r2, #0
 800477e:	701a      	strb	r2, [r3, #0]

		currentPosition = byteRead;
 8004780:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004784:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a69      	ldr	r2, [pc, #420]	@ (8004930 <read_image_file_scaling+0x30c>)
 800478c:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 800478e:	4b68      	ldr	r3, [pc, #416]	@ (8004930 <read_image_file_scaling+0x30c>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004796:	4611      	mov	r1, r2
 8004798:	4618      	mov	r0, r3
 800479a:	f009 fe91 	bl	800e4c0 <f_lseek>


		x = frame_number_x(entity, factor); /*numarul de linii cuprins in fiecare frame al matricei M1*/
 800479e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80047a2:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 80047a6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80047aa:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80047ae:	ed92 0a00 	vldr	s0, [r2]
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	f7ff feb2 	bl	800451c <frame_number_x>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	4b5f      	ldr	r3, [pc, #380]	@ (800493c <read_image_file_scaling+0x318>)
 80047be:	801a      	strh	r2, [r3, #0]
		*px = x;
 80047c0:	4b5e      	ldr	r3, [pc, #376]	@ (800493c <read_image_file_scaling+0x318>)
 80047c2:	881a      	ldrh	r2, [r3, #0]
 80047c4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80047c8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	801a      	strh	r2, [r3, #0]

		if(x == entity->y1)
 80047d0:	4b5a      	ldr	r3, [pc, #360]	@ (800493c <read_image_file_scaling+0x318>)
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80047da:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d125      	bne.n	8004834 <read_image_file_scaling+0x210>
		{
			flagOneFrame = 1;
 80047e8:	4b53      	ldr	r3, [pc, #332]	@ (8004938 <read_image_file_scaling+0x314>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	701a      	strb	r2, [r3, #0]
			nrFrames = 1; /*Avem o imagine care scalata are mai putini de 32x32 pixeli*/
 80047ee:	4b54      	ldr	r3, [pc, #336]	@ (8004940 <read_image_file_scaling+0x31c>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 80047f4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80047f8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004802:	461a      	mov	r2, r3
 8004804:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004808:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004812:	fb03 f202 	mul.w	r2, r3, r2
 8004816:	4613      	mov	r3, r2
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	4413      	add	r3, r2
 800481c:	4618      	mov	r0, r3
 800481e:	f00a fa59 	bl	800ecd4 <malloc>
 8004822:	4603      	mov	r3, r0
 8004824:	461a      	mov	r2, r3
 8004826:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800482a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	e046      	b.n	80048c2 <read_image_file_scaling+0x29e>

		}

		else
		{
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*x);
 8004834:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004838:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004842:	461a      	mov	r2, r3
 8004844:	4b3d      	ldr	r3, [pc, #244]	@ (800493c <read_image_file_scaling+0x318>)
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	fb03 f202 	mul.w	r2, r3, r2
 800484c:	4613      	mov	r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4413      	add	r3, r2
 8004852:	4618      	mov	r0, r3
 8004854:	f00a fa3e 	bl	800ecd4 <malloc>
 8004858:	4603      	mov	r3, r0
 800485a:	461a      	mov	r2, r3
 800485c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004860:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60da      	str	r2, [r3, #12]

			nrFrames = (entity->y1) / x;
 8004868:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800486c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004876:	461a      	mov	r2, r3
 8004878:	4b30      	ldr	r3, [pc, #192]	@ (800493c <read_image_file_scaling+0x318>)
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004880:	461a      	mov	r2, r3
 8004882:	4b2f      	ldr	r3, [pc, #188]	@ (8004940 <read_image_file_scaling+0x31c>)
 8004884:	601a      	str	r2, [r3, #0]

			if((entity->y1) % x != 0)
 8004886:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800488a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004894:	4a29      	ldr	r2, [pc, #164]	@ (800493c <read_image_file_scaling+0x318>)
 8004896:	8812      	ldrh	r2, [r2, #0]
 8004898:	fb93 f1f2 	sdiv	r1, r3, r2
 800489c:	fb01 f202 	mul.w	r2, r1, r2
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00d      	beq.n	80048c2 <read_image_file_scaling+0x29e>
			{
				nrFrames++;
 80048a6:	4b26      	ldr	r3, [pc, #152]	@ (8004940 <read_image_file_scaling+0x31c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3301      	adds	r3, #1
 80048ac:	4a24      	ldr	r2, [pc, #144]	@ (8004940 <read_image_file_scaling+0x31c>)
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	e007      	b.n	80048c2 <read_image_file_scaling+0x29e>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 80048b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004930 <read_image_file_scaling+0x30c>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048ba:	4611      	mov	r1, r2
 80048bc:	4618      	mov	r0, r3
 80048be:	f009 fdff 	bl	800e4c0 <f_lseek>
	}


	/*Vom pune in entity->data primele valori*/

	if(flagOneFrame == 1)
 80048c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004938 <read_image_file_scaling+0x314>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d03c      	beq.n	8004944 <read_image_file_scaling+0x320>
	{
		f_read(&file, entity->ST.SD.data, (3*sizeof(char)*(entity->x1)*(entity->y1)), &byteRead);
 80048ca:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80048ce:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68d9      	ldr	r1, [r3, #12]
 80048d6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80048da:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80048e4:	461a      	mov	r2, r3
 80048e6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80048ea:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80048f4:	fb03 f202 	mul.w	r2, r3, r2
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	441a      	add	r2, r3
 80048fe:	f107 0320 	add.w	r3, r7, #32
 8004902:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004906:	f009 fa7f 	bl	800de08 <f_read>

		*flagTerm = 1;
 800490a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800490e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2201      	movs	r2, #1
 8004916:	701a      	strb	r2, [r3, #0]
		flagNewImageFile = 1;
 8004918:	4b04      	ldr	r3, [pc, #16]	@ (800492c <read_image_file_scaling+0x308>)
 800491a:	2201      	movs	r2, #1
 800491c:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 800491e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004922:	4618      	mov	r0, r3
 8004924:	f009 fda2 	bl	800e46c <f_close>
		return;
 8004928:	e06b      	b.n	8004a02 <read_image_file_scaling+0x3de>
 800492a:	bf00      	nop
 800492c:	2000000c 	.word	0x2000000c
 8004930:	20014714 	.word	0x20014714
 8004934:	20014718 	.word	0x20014718
 8004938:	2001471a 	.word	0x2001471a
 800493c:	2001471c 	.word	0x2001471c
 8004940:	20014720 	.word	0x20014720

	}

	else
	{
		f_read(&file, entity->ST.SD.data, (3*sizeof(char)*(entity->x1)*x), &byteRead);
 8004944:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004948:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68d9      	ldr	r1, [r3, #12]
 8004950:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004954:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800495e:	461a      	mov	r2, r3
 8004960:	4b2a      	ldr	r3, [pc, #168]	@ (8004a0c <read_image_file_scaling+0x3e8>)
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	fb03 f202 	mul.w	r2, r3, r2
 8004968:	4613      	mov	r3, r2
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	441a      	add	r2, r3
 800496e:	f107 0320 	add.w	r3, r7, #32
 8004972:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004976:	f009 fa47 	bl	800de08 <f_read>

		currentFrame++;
 800497a:	4b25      	ldr	r3, [pc, #148]	@ (8004a10 <read_image_file_scaling+0x3ec>)
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	3301      	adds	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	4b23      	ldr	r3, [pc, #140]	@ (8004a10 <read_image_file_scaling+0x3ec>)
 8004984:	801a      	strh	r2, [r3, #0]

		if((currentFrame >= nrFrames))
 8004986:	4b22      	ldr	r3, [pc, #136]	@ (8004a10 <read_image_file_scaling+0x3ec>)
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	4b21      	ldr	r3, [pc, #132]	@ (8004a14 <read_image_file_scaling+0x3f0>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d328      	bcc.n	80049e6 <read_image_file_scaling+0x3c2>
		{
			*px = (entity->y1) - x*(nrFrames-1); /*recalculam ultimul numar de linii de citit*/
 8004994:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8004998:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a14 <read_image_file_scaling+0x3f0>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b299      	uxth	r1, r3
 80049ac:	4b17      	ldr	r3, [pc, #92]	@ (8004a0c <read_image_file_scaling+0x3e8>)
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	fb11 f303 	smulbb	r3, r1, r3
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80049be:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	801a      	strh	r2, [r3, #0]
			*flagTerm = 1;
 80049c6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80049ca:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2201      	movs	r2, #1
 80049d2:	701a      	strb	r2, [r3, #0]
			flagNewImageFile = 1;
 80049d4:	4b10      	ldr	r3, [pc, #64]	@ (8004a18 <read_image_file_scaling+0x3f4>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	701a      	strb	r2, [r3, #0]
			f_close(&file);
 80049da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049de:	4618      	mov	r0, r3
 80049e0:	f009 fd44 	bl	800e46c <f_close>
			return;
 80049e4:	e00d      	b.n	8004a02 <read_image_file_scaling+0x3de>
		}



		currentPosition = f_tell(&file);
 80049e6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80049ea:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	4a0a      	ldr	r2, [pc, #40]	@ (8004a1c <read_image_file_scaling+0x3f8>)
 80049f2:	6013      	str	r3, [r2, #0]
		f_close(&file);
 80049f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049f8:	4618      	mov	r0, r3
 80049fa:	f009 fd37 	bl	800e46c <f_close>
 80049fe:	e000      	b.n	8004a02 <read_image_file_scaling+0x3de>
		return;
 8004a00:	bf00      	nop

	}



}
 8004a02:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd90      	pop	{r4, r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	2001471c 	.word	0x2001471c
 8004a10:	20014718 	.word	0x20014718
 8004a14:	20014720 	.word	0x20014720
 8004a18:	2000000c 	.word	0x2000000c
 8004a1c:	20014714 	.word	0x20014714

08004a20 <write_image_file>:



void write_image_file(char *filePathName, uint8_t *data, size_t nrBytesData, int16_t x1, int16_t y1, bool flagTerm)
{
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8004a2c:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8004a30:	6020      	str	r0, [r4, #0]
 8004a32:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8004a36:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8004a3a:	6001      	str	r1, [r0, #0]
 8004a3c:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8004a40:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8004a44:	600a      	str	r2, [r1, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004a4c:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8004a50:	801a      	strh	r2, [r3, #0]


	static bool flagStart = 0;
	static FSIZE_t currentPosition = 0;

	if(flagStart == 0)
 8004a52:	4b4b      	ldr	r3, [pc, #300]	@ (8004b80 <write_image_file+0x160>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	f083 0301 	eor.w	r3, r3, #1
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d04b      	beq.n	8004af8 <write_image_file+0xd8>
	{

		res = f_open(&file, filePathName, FA_WRITE | FA_CREATE_ALWAYS);
 8004a60:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004a64:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8004a68:	f107 001c 	add.w	r0, r7, #28
 8004a6c:	220a      	movs	r2, #10
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	f009 f810 	bl	800da94 <f_open>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f


		if (res != FR_OK)
 8004a7a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d177      	bne.n	8004b72 <write_image_file+0x152>
		{
		    return;
		}


		currentPosition = 0;
 8004a82:	4b40      	ldr	r3, [pc, #256]	@ (8004b84 <write_image_file+0x164>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
		/*
		 * Scriem mai intai headerul anume
		 * dimensiunea imaginii asociate
		 */

		header[0] = (int8_t)(x1);
 8004a88:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004a8c:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	b2da      	uxtb	r2, r3
 8004a94:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004a98:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8004a9c:	701a      	strb	r2, [r3, #0]
		header[1] = (int8_t)(x1>>8);
 8004a9e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004aa2:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8004aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aaa:	121b      	asrs	r3, r3, #8
 8004aac:	b21b      	sxth	r3, r3
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004ab4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8004ab8:	705a      	strb	r2, [r3, #1]
		header[2] = (int8_t)(y1);
 8004aba:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004ac4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8004ac8:	709a      	strb	r2, [r3, #2]
		header[3] = (int8_t)(y1>>8);
 8004aca:	f9b7 3260 	ldrsh.w	r3, [r7, #608]	@ 0x260
 8004ace:	121b      	asrs	r3, r3, #8
 8004ad0:	b21b      	sxth	r3, r3
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004ad8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8004adc:	70da      	strb	r2, [r3, #3]

		f_write(&file, header, 4, &byteWr);
 8004ade:	f107 0318 	add.w	r3, r7, #24
 8004ae2:	f107 0114 	add.w	r1, r7, #20
 8004ae6:	f107 001c 	add.w	r0, r7, #28
 8004aea:	2204      	movs	r2, #4
 8004aec:	f009 facb 	bl	800e086 <f_write>

		flagStart = 1;
 8004af0:	4b23      	ldr	r3, [pc, #140]	@ (8004b80 <write_image_file+0x160>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e018      	b.n	8004b2a <write_image_file+0x10a>
	}


	else
	{
		res = f_open(&file, filePathName, FA_WRITE | FA_OPEN_ALWAYS);
 8004af8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004afc:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8004b00:	f107 001c 	add.w	r0, r7, #28
 8004b04:	2212      	movs	r2, #18
 8004b06:	6819      	ldr	r1, [r3, #0]
 8004b08:	f008 ffc4 	bl	800da94 <f_open>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f

		if (res != FR_OK)
 8004b12:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d12d      	bne.n	8004b76 <write_image_file+0x156>
		{
		    return;
		}

		f_lseek(&file, currentPosition);
 8004b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b84 <write_image_file+0x164>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	f107 031c 	add.w	r3, r7, #28
 8004b22:	4611      	mov	r1, r2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f009 fccb 	bl	800e4c0 <f_lseek>

	}


	if(flagTerm == 1)
 8004b2a:	f897 3264 	ldrb.w	r3, [r7, #612]	@ 0x264
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <write_image_file+0x118>
	{
		flagStart = 0;
 8004b32:	4b13      	ldr	r3, [pc, #76]	@ (8004b80 <write_image_file+0x160>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]

	}


	f_write(&file, data, nrBytesData, &byteWr);
 8004b38:	f107 0318 	add.w	r3, r7, #24
 8004b3c:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8004b40:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8004b44:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8004b48:	f5a1 7112 	sub.w	r1, r1, #584	@ 0x248
 8004b4c:	f107 001c 	add.w	r0, r7, #28
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	6809      	ldr	r1, [r1, #0]
 8004b54:	f009 fa97 	bl	800e086 <f_write>
	currentPosition = f_tell(&file);
 8004b58:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8004b5c:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	4a08      	ldr	r2, [pc, #32]	@ (8004b84 <write_image_file+0x164>)
 8004b64:	6013      	str	r3, [r2, #0]

	f_close(&file);
 8004b66:	f107 031c 	add.w	r3, r7, #28
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f009 fc7e 	bl	800e46c <f_close>
 8004b70:	e002      	b.n	8004b78 <write_image_file+0x158>
		    return;
 8004b72:	bf00      	nop
 8004b74:	e000      	b.n	8004b78 <write_image_file+0x158>
		    return;
 8004b76:	bf00      	nop

}
 8004b78:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd90      	pop	{r4, r7, pc}
 8004b80:	20014724 	.word	0x20014724
 8004b84:	20014728 	.word	0x20014728

08004b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	4b10      	ldr	r3, [pc, #64]	@ (8004bd4 <HAL_MspInit+0x4c>)
 8004b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b96:	4a0f      	ldr	r2, [pc, #60]	@ (8004bd4 <HAL_MspInit+0x4c>)
 8004b98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd4 <HAL_MspInit+0x4c>)
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ba6:	607b      	str	r3, [r7, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	4b09      	ldr	r3, [pc, #36]	@ (8004bd4 <HAL_MspInit+0x4c>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	4a08      	ldr	r2, [pc, #32]	@ (8004bd4 <HAL_MspInit+0x4c>)
 8004bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bba:	4b06      	ldr	r3, [pc, #24]	@ (8004bd4 <HAL_MspInit+0x4c>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800

08004bd8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	@ 0x28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be0:	f107 0314 	add.w	r3, r7, #20
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	60da      	str	r2, [r3, #12]
 8004bee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a30      	ldr	r2, [pc, #192]	@ (8004cb8 <HAL_DAC_MspInit+0xe0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d159      	bne.n	8004cae <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8004cbc <HAL_DAC_MspInit+0xe4>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	4a2e      	ldr	r2, [pc, #184]	@ (8004cbc <HAL_DAC_MspInit+0xe4>)
 8004c04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8004cbc <HAL_DAC_MspInit+0xe4>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	4b28      	ldr	r3, [pc, #160]	@ (8004cbc <HAL_DAC_MspInit+0xe4>)
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1e:	4a27      	ldr	r2, [pc, #156]	@ (8004cbc <HAL_DAC_MspInit+0xe4>)
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c26:	4b25      	ldr	r3, [pc, #148]	@ (8004cbc <HAL_DAC_MspInit+0xe4>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004c32:	2310      	movs	r3, #16
 8004c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c36:	2303      	movs	r3, #3
 8004c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3e:	f107 0314 	add.w	r3, r7, #20
 8004c42:	4619      	mov	r1, r3
 8004c44:	481e      	ldr	r0, [pc, #120]	@ (8004cc0 <HAL_DAC_MspInit+0xe8>)
 8004c46:	f001 fafb 	bl	8006240 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8004c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc4 <HAL_DAC_MspInit+0xec>)
 8004c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc8 <HAL_DAC_MspInit+0xf0>)
 8004c4e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8004c50:	4b1c      	ldr	r3, [pc, #112]	@ (8004cc4 <HAL_DAC_MspInit+0xec>)
 8004c52:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8004c56:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c58:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc4 <HAL_DAC_MspInit+0xec>)
 8004c5a:	2240      	movs	r2, #64	@ 0x40
 8004c5c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c5e:	4b19      	ldr	r3, [pc, #100]	@ (8004cc4 <HAL_DAC_MspInit+0xec>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8004c64:	4b17      	ldr	r3, [pc, #92]	@ (8004cc4 <HAL_DAC_MspInit+0xec>)
 8004c66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c6a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004c6c:	4b15      	ldr	r3, [pc, #84]	@ (8004cc4 <HAL_DAC_MspInit+0xec>)
 8004c6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c72:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004c74:	4b13      	ldr	r3, [pc, #76]	@ (8004cc4 <HAL_DAC_MspInit+0xec>)
 8004c76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004c7a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8004c7c:	4b11      	ldr	r3, [pc, #68]	@ (8004cc4 <HAL_DAC_MspInit+0xec>)
 8004c7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c82:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004c84:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc4 <HAL_DAC_MspInit+0xec>)
 8004c86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004c8a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc4 <HAL_DAC_MspInit+0xec>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8004c92:	480c      	ldr	r0, [pc, #48]	@ (8004cc4 <HAL_DAC_MspInit+0xec>)
 8004c94:	f000 fed2 	bl	8005a3c <HAL_DMA_Init>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8004c9e:	f7ff f879 	bl	8003d94 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a07      	ldr	r2, [pc, #28]	@ (8004cc4 <HAL_DAC_MspInit+0xec>)
 8004ca6:	609a      	str	r2, [r3, #8]
 8004ca8:	4a06      	ldr	r2, [pc, #24]	@ (8004cc4 <HAL_DAC_MspInit+0xec>)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004cae:	bf00      	nop
 8004cb0:	3728      	adds	r7, #40	@ 0x28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40007400 	.word	0x40007400
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	40020000 	.word	0x40020000
 8004cc4:	20014198 	.word	0x20014198
 8004cc8:	40026088 	.word	0x40026088

08004ccc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b08a      	sub	sp, #40	@ 0x28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd4:	f107 0314 	add.w	r3, r7, #20
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	605a      	str	r2, [r3, #4]
 8004cde:	609a      	str	r2, [r3, #8]
 8004ce0:	60da      	str	r2, [r3, #12]
 8004ce2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a31      	ldr	r2, [pc, #196]	@ (8004db0 <HAL_SD_MspInit+0xe4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d15b      	bne.n	8004da6 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004cee:	2300      	movs	r3, #0
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	4b30      	ldr	r3, [pc, #192]	@ (8004db4 <HAL_SD_MspInit+0xe8>)
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf6:	4a2f      	ldr	r2, [pc, #188]	@ (8004db4 <HAL_SD_MspInit+0xe8>)
 8004cf8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8004db4 <HAL_SD_MspInit+0xe8>)
 8004d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	4b29      	ldr	r3, [pc, #164]	@ (8004db4 <HAL_SD_MspInit+0xe8>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d12:	4a28      	ldr	r2, [pc, #160]	@ (8004db4 <HAL_SD_MspInit+0xe8>)
 8004d14:	f043 0304 	orr.w	r3, r3, #4
 8004d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d1a:	4b26      	ldr	r3, [pc, #152]	@ (8004db4 <HAL_SD_MspInit+0xe8>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	4b22      	ldr	r3, [pc, #136]	@ (8004db4 <HAL_SD_MspInit+0xe8>)
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2e:	4a21      	ldr	r2, [pc, #132]	@ (8004db4 <HAL_SD_MspInit+0xe8>)
 8004d30:	f043 0308 	orr.w	r3, r3, #8
 8004d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d36:	4b1f      	ldr	r3, [pc, #124]	@ (8004db4 <HAL_SD_MspInit+0xe8>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d50:	2303      	movs	r3, #3
 8004d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004d54:	230c      	movs	r3, #12
 8004d56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d58:	f107 0314 	add.w	r3, r7, #20
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4816      	ldr	r0, [pc, #88]	@ (8004db8 <HAL_SD_MspInit+0xec>)
 8004d60:	f001 fa6e 	bl	8006240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004d64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d72:	2303      	movs	r3, #3
 8004d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004d76:	230c      	movs	r3, #12
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d7a:	f107 0314 	add.w	r3, r7, #20
 8004d7e:	4619      	mov	r1, r3
 8004d80:	480d      	ldr	r0, [pc, #52]	@ (8004db8 <HAL_SD_MspInit+0xec>)
 8004d82:	f001 fa5d 	bl	8006240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004d86:	2304      	movs	r3, #4
 8004d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d92:	2303      	movs	r3, #3
 8004d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004d96:	230c      	movs	r3, #12
 8004d98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d9a:	f107 0314 	add.w	r3, r7, #20
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4806      	ldr	r0, [pc, #24]	@ (8004dbc <HAL_SD_MspInit+0xf0>)
 8004da2:	f001 fa4d 	bl	8006240 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004da6:	bf00      	nop
 8004da8:	3728      	adds	r7, #40	@ 0x28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40023800 	.word	0x40023800
 8004db8:	40020800 	.word	0x40020800
 8004dbc:	40020c00 	.word	0x40020c00

08004dc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08c      	sub	sp, #48	@ 0x30
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dc8:	f107 031c 	add.w	r3, r7, #28
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	605a      	str	r2, [r3, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
 8004dd4:	60da      	str	r2, [r3, #12]
 8004dd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a74      	ldr	r2, [pc, #464]	@ (8004fb0 <HAL_SPI_MspInit+0x1f0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	f040 8089 	bne.w	8004ef6 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004de4:	2300      	movs	r3, #0
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	4b72      	ldr	r3, [pc, #456]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dec:	4a71      	ldr	r2, [pc, #452]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004dee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004df2:	6453      	str	r3, [r2, #68]	@ 0x44
 8004df4:	4b6f      	ldr	r3, [pc, #444]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dfc:	61bb      	str	r3, [r7, #24]
 8004dfe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	4b6b      	ldr	r3, [pc, #428]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e08:	4a6a      	ldr	r2, [pc, #424]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e10:	4b68      	ldr	r3, [pc, #416]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004e1c:	23e0      	movs	r3, #224	@ 0xe0
 8004e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e20:	2302      	movs	r3, #2
 8004e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e2c:	2305      	movs	r3, #5
 8004e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e30:	f107 031c 	add.w	r3, r7, #28
 8004e34:	4619      	mov	r1, r3
 8004e36:	4860      	ldr	r0, [pc, #384]	@ (8004fb8 <HAL_SPI_MspInit+0x1f8>)
 8004e38:	f001 fa02 	bl	8006240 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8004e3c:	4b5f      	ldr	r3, [pc, #380]	@ (8004fbc <HAL_SPI_MspInit+0x1fc>)
 8004e3e:	4a60      	ldr	r2, [pc, #384]	@ (8004fc0 <HAL_SPI_MspInit+0x200>)
 8004e40:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004e42:	4b5e      	ldr	r3, [pc, #376]	@ (8004fbc <HAL_SPI_MspInit+0x1fc>)
 8004e44:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8004e48:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e4a:	4b5c      	ldr	r3, [pc, #368]	@ (8004fbc <HAL_SPI_MspInit+0x1fc>)
 8004e4c:	2240      	movs	r2, #64	@ 0x40
 8004e4e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e50:	4b5a      	ldr	r3, [pc, #360]	@ (8004fbc <HAL_SPI_MspInit+0x1fc>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e56:	4b59      	ldr	r3, [pc, #356]	@ (8004fbc <HAL_SPI_MspInit+0x1fc>)
 8004e58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e5c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e5e:	4b57      	ldr	r3, [pc, #348]	@ (8004fbc <HAL_SPI_MspInit+0x1fc>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e64:	4b55      	ldr	r3, [pc, #340]	@ (8004fbc <HAL_SPI_MspInit+0x1fc>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004e6a:	4b54      	ldr	r3, [pc, #336]	@ (8004fbc <HAL_SPI_MspInit+0x1fc>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e70:	4b52      	ldr	r3, [pc, #328]	@ (8004fbc <HAL_SPI_MspInit+0x1fc>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e76:	4b51      	ldr	r3, [pc, #324]	@ (8004fbc <HAL_SPI_MspInit+0x1fc>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004e7c:	484f      	ldr	r0, [pc, #316]	@ (8004fbc <HAL_SPI_MspInit+0x1fc>)
 8004e7e:	f000 fddd 	bl	8005a3c <HAL_DMA_Init>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8004e88:	f7fe ff84 	bl	8003d94 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a4b      	ldr	r2, [pc, #300]	@ (8004fbc <HAL_SPI_MspInit+0x1fc>)
 8004e90:	649a      	str	r2, [r3, #72]	@ 0x48
 8004e92:	4a4a      	ldr	r2, [pc, #296]	@ (8004fbc <HAL_SPI_MspInit+0x1fc>)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8004e98:	4b4a      	ldr	r3, [pc, #296]	@ (8004fc4 <HAL_SPI_MspInit+0x204>)
 8004e9a:	4a4b      	ldr	r2, [pc, #300]	@ (8004fc8 <HAL_SPI_MspInit+0x208>)
 8004e9c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8004e9e:	4b49      	ldr	r3, [pc, #292]	@ (8004fc4 <HAL_SPI_MspInit+0x204>)
 8004ea0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8004ea4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ea6:	4b47      	ldr	r3, [pc, #284]	@ (8004fc4 <HAL_SPI_MspInit+0x204>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004eac:	4b45      	ldr	r3, [pc, #276]	@ (8004fc4 <HAL_SPI_MspInit+0x204>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004eb2:	4b44      	ldr	r3, [pc, #272]	@ (8004fc4 <HAL_SPI_MspInit+0x204>)
 8004eb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004eb8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004eba:	4b42      	ldr	r3, [pc, #264]	@ (8004fc4 <HAL_SPI_MspInit+0x204>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ec0:	4b40      	ldr	r3, [pc, #256]	@ (8004fc4 <HAL_SPI_MspInit+0x204>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fc4 <HAL_SPI_MspInit+0x204>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004ecc:	4b3d      	ldr	r3, [pc, #244]	@ (8004fc4 <HAL_SPI_MspInit+0x204>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8004fc4 <HAL_SPI_MspInit+0x204>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004ed8:	483a      	ldr	r0, [pc, #232]	@ (8004fc4 <HAL_SPI_MspInit+0x204>)
 8004eda:	f000 fdaf 	bl	8005a3c <HAL_DMA_Init>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8004ee4:	f7fe ff56 	bl	8003d94 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a36      	ldr	r2, [pc, #216]	@ (8004fc4 <HAL_SPI_MspInit+0x204>)
 8004eec:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004eee:	4a35      	ldr	r2, [pc, #212]	@ (8004fc4 <HAL_SPI_MspInit+0x204>)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004ef4:	e057      	b.n	8004fa6 <HAL_SPI_MspInit+0x1e6>
  else if(hspi->Instance==SPI2)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a34      	ldr	r2, [pc, #208]	@ (8004fcc <HAL_SPI_MspInit+0x20c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d152      	bne.n	8004fa6 <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004f00:	2300      	movs	r3, #0
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f08:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004f0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f10:	4b28      	ldr	r3, [pc, #160]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	4b24      	ldr	r3, [pc, #144]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f24:	4a23      	ldr	r2, [pc, #140]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004f26:	f043 0304 	orr.w	r3, r3, #4
 8004f2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f2c:	4b21      	ldr	r3, [pc, #132]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f40:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004f42:	f043 0302 	orr.w	r3, r3, #2
 8004f46:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f48:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb4 <HAL_SPI_MspInit+0x1f4>)
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004f54:	2308      	movs	r3, #8
 8004f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f60:	2303      	movs	r3, #3
 8004f62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004f64:	2305      	movs	r3, #5
 8004f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f68:	f107 031c 	add.w	r3, r7, #28
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4818      	ldr	r0, [pc, #96]	@ (8004fd0 <HAL_SPI_MspInit+0x210>)
 8004f70:	f001 f966 	bl	8006240 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004f74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f82:	2303      	movs	r3, #3
 8004f84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004f86:	2305      	movs	r3, #5
 8004f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f8a:	f107 031c 	add.w	r3, r7, #28
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4810      	ldr	r0, [pc, #64]	@ (8004fd4 <HAL_SPI_MspInit+0x214>)
 8004f92:	f001 f955 	bl	8006240 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004f96:	2200      	movs	r2, #0
 8004f98:	2100      	movs	r1, #0
 8004f9a:	2024      	movs	r0, #36	@ 0x24
 8004f9c:	f000 faef 	bl	800557e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004fa0:	2024      	movs	r0, #36	@ 0x24
 8004fa2:	f000 fb08 	bl	80055b6 <HAL_NVIC_EnableIRQ>
}
 8004fa6:	bf00      	nop
 8004fa8:	3730      	adds	r7, #48	@ 0x30
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40013000 	.word	0x40013000
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	40020000 	.word	0x40020000
 8004fbc:	2001432c 	.word	0x2001432c
 8004fc0:	40026458 	.word	0x40026458
 8004fc4:	2001438c 	.word	0x2001438c
 8004fc8:	40026410 	.word	0x40026410
 8004fcc:	40003800 	.word	0x40003800
 8004fd0:	40020800 	.word	0x40020800
 8004fd4:	40020400 	.word	0x40020400

08004fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe8:	d10e      	bne.n	8005008 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	4b16      	ldr	r3, [pc, #88]	@ (8005048 <HAL_TIM_Base_MspInit+0x70>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	4a15      	ldr	r2, [pc, #84]	@ (8005048 <HAL_TIM_Base_MspInit+0x70>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ffa:	4b13      	ldr	r3, [pc, #76]	@ (8005048 <HAL_TIM_Base_MspInit+0x70>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005006:	e01a      	b.n	800503e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a0f      	ldr	r2, [pc, #60]	@ (800504c <HAL_TIM_Base_MspInit+0x74>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d115      	bne.n	800503e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005012:	2300      	movs	r3, #0
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	4b0c      	ldr	r3, [pc, #48]	@ (8005048 <HAL_TIM_Base_MspInit+0x70>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	4a0b      	ldr	r2, [pc, #44]	@ (8005048 <HAL_TIM_Base_MspInit+0x70>)
 800501c:	f043 0304 	orr.w	r3, r3, #4
 8005020:	6413      	str	r3, [r2, #64]	@ 0x40
 8005022:	4b09      	ldr	r3, [pc, #36]	@ (8005048 <HAL_TIM_Base_MspInit+0x70>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	f003 0304 	and.w	r3, r3, #4
 800502a:	60bb      	str	r3, [r7, #8]
 800502c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800502e:	2200      	movs	r2, #0
 8005030:	2100      	movs	r1, #0
 8005032:	201e      	movs	r0, #30
 8005034:	f000 faa3 	bl	800557e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005038:	201e      	movs	r0, #30
 800503a:	f000 fabc 	bl	80055b6 <HAL_NVIC_EnableIRQ>
}
 800503e:	bf00      	nop
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40023800 	.word	0x40023800
 800504c:	40000800 	.word	0x40000800

08005050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08a      	sub	sp, #40	@ 0x28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	60da      	str	r2, [r3, #12]
 8005066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1d      	ldr	r2, [pc, #116]	@ (80050e4 <HAL_UART_MspInit+0x94>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d134      	bne.n	80050dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	4b1c      	ldr	r3, [pc, #112]	@ (80050e8 <HAL_UART_MspInit+0x98>)
 8005078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507a:	4a1b      	ldr	r2, [pc, #108]	@ (80050e8 <HAL_UART_MspInit+0x98>)
 800507c:	f043 0310 	orr.w	r3, r3, #16
 8005080:	6453      	str	r3, [r2, #68]	@ 0x44
 8005082:	4b19      	ldr	r3, [pc, #100]	@ (80050e8 <HAL_UART_MspInit+0x98>)
 8005084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	4b15      	ldr	r3, [pc, #84]	@ (80050e8 <HAL_UART_MspInit+0x98>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005096:	4a14      	ldr	r2, [pc, #80]	@ (80050e8 <HAL_UART_MspInit+0x98>)
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	6313      	str	r3, [r2, #48]	@ 0x30
 800509e:	4b12      	ldr	r3, [pc, #72]	@ (80050e8 <HAL_UART_MspInit+0x98>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80050aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80050ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b0:	2302      	movs	r3, #2
 80050b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b8:	2303      	movs	r3, #3
 80050ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050bc:	2307      	movs	r3, #7
 80050be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c0:	f107 0314 	add.w	r3, r7, #20
 80050c4:	4619      	mov	r1, r3
 80050c6:	4809      	ldr	r0, [pc, #36]	@ (80050ec <HAL_UART_MspInit+0x9c>)
 80050c8:	f001 f8ba 	bl	8006240 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80050cc:	2200      	movs	r2, #0
 80050ce:	2100      	movs	r1, #0
 80050d0:	2025      	movs	r0, #37	@ 0x25
 80050d2:	f000 fa54 	bl	800557e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050d6:	2025      	movs	r0, #37	@ 0x25
 80050d8:	f000 fa6d 	bl	80055b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80050dc:	bf00      	nop
 80050de:	3728      	adds	r7, #40	@ 0x28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40011000 	.word	0x40011000
 80050e8:	40023800 	.word	0x40023800
 80050ec:	40020000 	.word	0x40020000

080050f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <NMI_Handler+0x4>

080050f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050fc:	bf00      	nop
 80050fe:	e7fd      	b.n	80050fc <HardFault_Handler+0x4>

08005100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005104:	bf00      	nop
 8005106:	e7fd      	b.n	8005104 <MemManage_Handler+0x4>

08005108 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800510c:	bf00      	nop
 800510e:	e7fd      	b.n	800510c <BusFault_Handler+0x4>

08005110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005114:	bf00      	nop
 8005116:	e7fd      	b.n	8005114 <UsageFault_Handler+0x4>

08005118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800511c:	bf00      	nop
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005126:	b480      	push	{r7}
 8005128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800512a:	bf00      	nop
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005138:	f000 f902 	bl	8005340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800513c:	bf00      	nop
 800513e:	bd80      	pop	{r7, pc}

08005140 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8005144:	4802      	ldr	r0, [pc, #8]	@ (8005150 <DMA1_Stream5_IRQHandler+0x10>)
 8005146:	f000 fe11 	bl	8005d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20014198 	.word	0x20014198

08005154 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005158:	4802      	ldr	r0, [pc, #8]	@ (8005164 <TIM4_IRQHandler+0x10>)
 800515a:	f004 fd19 	bl	8009b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20014434 	.word	0x20014434

08005168 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800516c:	4802      	ldr	r0, [pc, #8]	@ (8005178 <SPI2_IRQHandler+0x10>)
 800516e:	f003 fe75 	bl	8008e5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005172:	bf00      	nop
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	200142d4 	.word	0x200142d4

0800517c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005180:	4802      	ldr	r0, [pc, #8]	@ (800518c <USART1_IRQHandler+0x10>)
 8005182:	f005 f90b 	bl	800a39c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005186:	bf00      	nop
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	2001447c 	.word	0x2001447c

08005190 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005194:	4802      	ldr	r0, [pc, #8]	@ (80051a0 <DMA2_Stream0_IRQHandler+0x10>)
 8005196:	f000 fde9 	bl	8005d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800519a:	bf00      	nop
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	2001438c 	.word	0x2001438c

080051a4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80051a8:	4802      	ldr	r0, [pc, #8]	@ (80051b4 <DMA2_Stream3_IRQHandler+0x10>)
 80051aa:	f000 fddf 	bl	8005d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80051ae:	bf00      	nop
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	2001432c 	.word	0x2001432c

080051b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051c0:	4a14      	ldr	r2, [pc, #80]	@ (8005214 <_sbrk+0x5c>)
 80051c2:	4b15      	ldr	r3, [pc, #84]	@ (8005218 <_sbrk+0x60>)
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051cc:	4b13      	ldr	r3, [pc, #76]	@ (800521c <_sbrk+0x64>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d102      	bne.n	80051da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051d4:	4b11      	ldr	r3, [pc, #68]	@ (800521c <_sbrk+0x64>)
 80051d6:	4a12      	ldr	r2, [pc, #72]	@ (8005220 <_sbrk+0x68>)
 80051d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051da:	4b10      	ldr	r3, [pc, #64]	@ (800521c <_sbrk+0x64>)
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4413      	add	r3, r2
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d207      	bcs.n	80051f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051e8:	f009 fea6 	bl	800ef38 <__errno>
 80051ec:	4603      	mov	r3, r0
 80051ee:	220c      	movs	r2, #12
 80051f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051f2:	f04f 33ff 	mov.w	r3, #4294967295
 80051f6:	e009      	b.n	800520c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051f8:	4b08      	ldr	r3, [pc, #32]	@ (800521c <_sbrk+0x64>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051fe:	4b07      	ldr	r3, [pc, #28]	@ (800521c <_sbrk+0x64>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4413      	add	r3, r2
 8005206:	4a05      	ldr	r2, [pc, #20]	@ (800521c <_sbrk+0x64>)
 8005208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800520a:	68fb      	ldr	r3, [r7, #12]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20020000 	.word	0x20020000
 8005218:	00000400 	.word	0x00000400
 800521c:	2001472c 	.word	0x2001472c
 8005220:	200148b8 	.word	0x200148b8

08005224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005228:	4b06      	ldr	r3, [pc, #24]	@ (8005244 <SystemInit+0x20>)
 800522a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522e:	4a05      	ldr	r2, [pc, #20]	@ (8005244 <SystemInit+0x20>)
 8005230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005238:	bf00      	nop
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	e000ed00 	.word	0xe000ed00

08005248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005248:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005280 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800524c:	f7ff ffea 	bl	8005224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005250:	480c      	ldr	r0, [pc, #48]	@ (8005284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005252:	490d      	ldr	r1, [pc, #52]	@ (8005288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005254:	4a0d      	ldr	r2, [pc, #52]	@ (800528c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005258:	e002      	b.n	8005260 <LoopCopyDataInit>

0800525a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800525a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800525c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800525e:	3304      	adds	r3, #4

08005260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005264:	d3f9      	bcc.n	800525a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005266:	4a0a      	ldr	r2, [pc, #40]	@ (8005290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005268:	4c0a      	ldr	r4, [pc, #40]	@ (8005294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800526a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800526c:	e001      	b.n	8005272 <LoopFillZerobss>

0800526e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800526e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005270:	3204      	adds	r2, #4

08005272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005274:	d3fb      	bcc.n	800526e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005276:	f009 fe65 	bl	800ef44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800527a:	f7fd ffdd 	bl	8003238 <main>
  bx  lr    
 800527e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005288:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800528c:	080100e0 	.word	0x080100e0
  ldr r2, =_sbss
 8005290:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8005294:	200148b8 	.word	0x200148b8

08005298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005298:	e7fe      	b.n	8005298 <ADC_IRQHandler>
	...

0800529c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80052a0:	4b0e      	ldr	r3, [pc, #56]	@ (80052dc <HAL_Init+0x40>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a0d      	ldr	r2, [pc, #52]	@ (80052dc <HAL_Init+0x40>)
 80052a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052ac:	4b0b      	ldr	r3, [pc, #44]	@ (80052dc <HAL_Init+0x40>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0a      	ldr	r2, [pc, #40]	@ (80052dc <HAL_Init+0x40>)
 80052b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052b8:	4b08      	ldr	r3, [pc, #32]	@ (80052dc <HAL_Init+0x40>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a07      	ldr	r2, [pc, #28]	@ (80052dc <HAL_Init+0x40>)
 80052be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052c4:	2003      	movs	r0, #3
 80052c6:	f000 f94f 	bl	8005568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052ca:	200f      	movs	r0, #15
 80052cc:	f000 f808 	bl	80052e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052d0:	f7ff fc5a 	bl	8004b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40023c00 	.word	0x40023c00

080052e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052e8:	4b12      	ldr	r3, [pc, #72]	@ (8005334 <HAL_InitTick+0x54>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <HAL_InitTick+0x58>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	4619      	mov	r1, r3
 80052f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80052f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80052fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f967 	bl	80055d2 <HAL_SYSTICK_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e00e      	b.n	800532c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b0f      	cmp	r3, #15
 8005312:	d80a      	bhi.n	800532a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005314:	2200      	movs	r2, #0
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	f04f 30ff 	mov.w	r0, #4294967295
 800531c:	f000 f92f 	bl	800557e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005320:	4a06      	ldr	r2, [pc, #24]	@ (800533c <HAL_InitTick+0x5c>)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	e000      	b.n	800532c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000010 	.word	0x20000010
 8005338:	20000018 	.word	0x20000018
 800533c:	20000014 	.word	0x20000014

08005340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005344:	4b06      	ldr	r3, [pc, #24]	@ (8005360 <HAL_IncTick+0x20>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	4b06      	ldr	r3, [pc, #24]	@ (8005364 <HAL_IncTick+0x24>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4413      	add	r3, r2
 8005350:	4a04      	ldr	r2, [pc, #16]	@ (8005364 <HAL_IncTick+0x24>)
 8005352:	6013      	str	r3, [r2, #0]
}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	20000018 	.word	0x20000018
 8005364:	20014730 	.word	0x20014730

08005368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  return uwTick;
 800536c:	4b03      	ldr	r3, [pc, #12]	@ (800537c <HAL_GetTick+0x14>)
 800536e:	681b      	ldr	r3, [r3, #0]
}
 8005370:	4618      	mov	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	20014730 	.word	0x20014730

08005380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005388:	f7ff ffee 	bl	8005368 <HAL_GetTick>
 800538c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005398:	d005      	beq.n	80053a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800539a:	4b0a      	ldr	r3, [pc, #40]	@ (80053c4 <HAL_Delay+0x44>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80053a6:	bf00      	nop
 80053a8:	f7ff ffde 	bl	8005368 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d8f7      	bhi.n	80053a8 <HAL_Delay+0x28>
  {
  }
}
 80053b8:	bf00      	nop
 80053ba:	bf00      	nop
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000018 	.word	0x20000018

080053c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053d8:	4b0c      	ldr	r3, [pc, #48]	@ (800540c <__NVIC_SetPriorityGrouping+0x44>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80053e4:	4013      	ands	r3, r2
 80053e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80053f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053fa:	4a04      	ldr	r2, [pc, #16]	@ (800540c <__NVIC_SetPriorityGrouping+0x44>)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	60d3      	str	r3, [r2, #12]
}
 8005400:	bf00      	nop
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	e000ed00 	.word	0xe000ed00

08005410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005414:	4b04      	ldr	r3, [pc, #16]	@ (8005428 <__NVIC_GetPriorityGrouping+0x18>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	0a1b      	lsrs	r3, r3, #8
 800541a:	f003 0307 	and.w	r3, r3, #7
}
 800541e:	4618      	mov	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	e000ed00 	.word	0xe000ed00

0800542c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543a:	2b00      	cmp	r3, #0
 800543c:	db0b      	blt.n	8005456 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	f003 021f 	and.w	r2, r3, #31
 8005444:	4907      	ldr	r1, [pc, #28]	@ (8005464 <__NVIC_EnableIRQ+0x38>)
 8005446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	2001      	movs	r0, #1
 800544e:	fa00 f202 	lsl.w	r2, r0, r2
 8005452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	e000e100 	.word	0xe000e100

08005468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	6039      	str	r1, [r7, #0]
 8005472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005478:	2b00      	cmp	r3, #0
 800547a:	db0a      	blt.n	8005492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	b2da      	uxtb	r2, r3
 8005480:	490c      	ldr	r1, [pc, #48]	@ (80054b4 <__NVIC_SetPriority+0x4c>)
 8005482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005486:	0112      	lsls	r2, r2, #4
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	440b      	add	r3, r1
 800548c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005490:	e00a      	b.n	80054a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	b2da      	uxtb	r2, r3
 8005496:	4908      	ldr	r1, [pc, #32]	@ (80054b8 <__NVIC_SetPriority+0x50>)
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	3b04      	subs	r3, #4
 80054a0:	0112      	lsls	r2, r2, #4
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	440b      	add	r3, r1
 80054a6:	761a      	strb	r2, [r3, #24]
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	e000e100 	.word	0xe000e100
 80054b8:	e000ed00 	.word	0xe000ed00

080054bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054bc:	b480      	push	{r7}
 80054be:	b089      	sub	sp, #36	@ 0x24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f1c3 0307 	rsb	r3, r3, #7
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	bf28      	it	cs
 80054da:	2304      	movcs	r3, #4
 80054dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	3304      	adds	r3, #4
 80054e2:	2b06      	cmp	r3, #6
 80054e4:	d902      	bls.n	80054ec <NVIC_EncodePriority+0x30>
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	3b03      	subs	r3, #3
 80054ea:	e000      	b.n	80054ee <NVIC_EncodePriority+0x32>
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054f0:	f04f 32ff 	mov.w	r2, #4294967295
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43da      	mvns	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	401a      	ands	r2, r3
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005504:	f04f 31ff 	mov.w	r1, #4294967295
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	fa01 f303 	lsl.w	r3, r1, r3
 800550e:	43d9      	mvns	r1, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005514:	4313      	orrs	r3, r2
         );
}
 8005516:	4618      	mov	r0, r3
 8005518:	3724      	adds	r7, #36	@ 0x24
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3b01      	subs	r3, #1
 8005530:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005534:	d301      	bcc.n	800553a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005536:	2301      	movs	r3, #1
 8005538:	e00f      	b.n	800555a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800553a:	4a0a      	ldr	r2, [pc, #40]	@ (8005564 <SysTick_Config+0x40>)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3b01      	subs	r3, #1
 8005540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005542:	210f      	movs	r1, #15
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	f7ff ff8e 	bl	8005468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800554c:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <SysTick_Config+0x40>)
 800554e:	2200      	movs	r2, #0
 8005550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005552:	4b04      	ldr	r3, [pc, #16]	@ (8005564 <SysTick_Config+0x40>)
 8005554:	2207      	movs	r2, #7
 8005556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	e000e010 	.word	0xe000e010

08005568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff ff29 	bl	80053c8 <__NVIC_SetPriorityGrouping>
}
 8005576:	bf00      	nop
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800557e:	b580      	push	{r7, lr}
 8005580:	b086      	sub	sp, #24
 8005582:	af00      	add	r7, sp, #0
 8005584:	4603      	mov	r3, r0
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
 800558a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005590:	f7ff ff3e 	bl	8005410 <__NVIC_GetPriorityGrouping>
 8005594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	6978      	ldr	r0, [r7, #20]
 800559c:	f7ff ff8e 	bl	80054bc <NVIC_EncodePriority>
 80055a0:	4602      	mov	r2, r0
 80055a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055a6:	4611      	mov	r1, r2
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7ff ff5d 	bl	8005468 <__NVIC_SetPriority>
}
 80055ae:	bf00      	nop
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b082      	sub	sp, #8
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	4603      	mov	r3, r0
 80055be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff ff31 	bl	800542c <__NVIC_EnableIRQ>
}
 80055ca:	bf00      	nop
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff ffa2 	bl	8005524 <SysTick_Config>
 80055e0:	4603      	mov	r3, r0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b082      	sub	sp, #8
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e014      	b.n	8005626 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	791b      	ldrb	r3, [r3, #4]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d105      	bne.n	8005612 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff fae3 	bl	8004bd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e0a2      	b.n	8005792 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	795b      	ldrb	r3, [r3, #5]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_DAC_Start_DMA+0x28>
 8005654:	2302      	movs	r3, #2
 8005656:	e09c      	b.n	8005792 <HAL_DAC_Start_DMA+0x162>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2202      	movs	r2, #2
 8005662:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d129      	bne.n	80056be <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	4a4b      	ldr	r2, [pc, #300]	@ (800579c <HAL_DAC_Start_DMA+0x16c>)
 8005670:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	4a4a      	ldr	r2, [pc, #296]	@ (80057a0 <HAL_DAC_Start_DMA+0x170>)
 8005678:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	4a49      	ldr	r2, [pc, #292]	@ (80057a4 <HAL_DAC_Start_DMA+0x174>)
 8005680:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005690:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <HAL_DAC_Start_DMA+0x70>
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	2b04      	cmp	r3, #4
 800569c:	d005      	beq.n	80056aa <HAL_DAC_Start_DMA+0x7a>
 800569e:	e009      	b.n	80056b4 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3308      	adds	r3, #8
 80056a6:	613b      	str	r3, [r7, #16]
        break;
 80056a8:	e033      	b.n	8005712 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	613b      	str	r3, [r7, #16]
        break;
 80056b2:	e02e      	b.n	8005712 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3310      	adds	r3, #16
 80056ba:	613b      	str	r3, [r7, #16]
        break;
 80056bc:	e029      	b.n	8005712 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	4a39      	ldr	r2, [pc, #228]	@ (80057a8 <HAL_DAC_Start_DMA+0x178>)
 80056c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	4a38      	ldr	r2, [pc, #224]	@ (80057ac <HAL_DAC_Start_DMA+0x17c>)
 80056cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	4a37      	ldr	r2, [pc, #220]	@ (80057b0 <HAL_DAC_Start_DMA+0x180>)
 80056d4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80056e4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d003      	beq.n	80056f4 <HAL_DAC_Start_DMA+0xc4>
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d005      	beq.n	80056fe <HAL_DAC_Start_DMA+0xce>
 80056f2:	e009      	b.n	8005708 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3314      	adds	r3, #20
 80056fa:	613b      	str	r3, [r7, #16]
        break;
 80056fc:	e009      	b.n	8005712 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3318      	adds	r3, #24
 8005704:	613b      	str	r3, [r7, #16]
        break;
 8005706:	e004      	b.n	8005712 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	331c      	adds	r3, #28
 800570e:	613b      	str	r3, [r7, #16]
        break;
 8005710:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d111      	bne.n	800573c <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005726:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6898      	ldr	r0, [r3, #8]
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	f000 fa31 	bl	8005b98 <HAL_DMA_Start_IT>
 8005736:	4603      	mov	r3, r0
 8005738:	75fb      	strb	r3, [r7, #23]
 800573a:	e010      	b.n	800575e <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800574a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68d8      	ldr	r0, [r3, #12]
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	f000 fa1f 	bl	8005b98 <HAL_DMA_Start_IT>
 800575a:	4603      	mov	r3, r0
 800575c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005764:	7dfb      	ldrb	r3, [r7, #23]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10c      	bne.n	8005784 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6819      	ldr	r1, [r3, #0]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2201      	movs	r2, #1
 8005778:	409a      	lsls	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e005      	b.n	8005790 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f043 0204 	orr.w	r2, r3, #4
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005790:	7dfb      	ldrb	r3, [r7, #23]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	08005929 	.word	0x08005929
 80057a0:	0800594b 	.word	0x0800594b
 80057a4:	08005967 	.word	0x08005967
 80057a8:	080059d1 	.word	0x080059d1
 80057ac:	080059f3 	.word	0x080059f3
 80057b0:	08005a0f 	.word	0x08005a0f

080057b4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e03e      	b.n	8005846 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6819      	ldr	r1, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	43da      	mvns	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	400a      	ands	r2, r1
 80057e4:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6819      	ldr	r1, [r3, #0]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	f003 0310 	and.w	r3, r3, #16
 80057f2:	2201      	movs	r2, #1
 80057f4:	fa02 f303 	lsl.w	r3, r2, r3
 80057f8:	43da      	mvns	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	400a      	ands	r2, r1
 8005800:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10d      	bne.n	8005824 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fa1b 	bl	8005c48 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	e00c      	b.n	800583e <HAL_DAC_Stop_DMA+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fa0d 	bl	8005c48 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 800583c:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3708      	adds	r7, #8
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005876:	b480      	push	{r7}
 8005878:	b089      	sub	sp, #36	@ 0x24
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_DAC_ConfigChannel+0x1c>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e042      	b.n	800591c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	795b      	ldrb	r3, [r3, #5]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_DAC_ConfigChannel+0x2c>
 800589e:	2302      	movs	r3, #2
 80058a0:	e03c      	b.n	800591c <HAL_DAC_ConfigChannel+0xa6>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2202      	movs	r2, #2
 80058ac:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80058c0:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80058c4:	43db      	mvns	r3, r3
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	4013      	ands	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6819      	ldr	r1, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f003 0310 	and.w	r3, r3, #16
 80058fe:	22c0      	movs	r2, #192	@ 0xc0
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	43da      	mvns	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	400a      	ands	r2, r1
 800590c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800591a:	7ffb      	ldrb	r3, [r7, #31]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3724      	adds	r7, #36	@ 0x24
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005934:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f7ff ff89 	bl	800584e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	711a      	strb	r2, [r3, #4]
}
 8005942:	bf00      	nop
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005956:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7fd fc5d 	bl	8003218 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005972:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f043 0204 	orr.w	r2, r3, #4
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f7ff ff6e 	bl	8005862 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	711a      	strb	r2, [r3, #4]
}
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7ff ffd8 	bl	8005994 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	711a      	strb	r2, [r3, #4]
}
 80059ea:	bf00      	nop
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f7ff ffd1 	bl	80059a8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005a06:	bf00      	nop
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	f043 0204 	orr.w	r2, r3, #4
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff ffc7 	bl	80059bc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	711a      	strb	r2, [r3, #4]
}
 8005a34:	bf00      	nop
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a48:	f7ff fc8e 	bl	8005368 <HAL_GetTick>
 8005a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e099      	b.n	8005b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a78:	e00f      	b.n	8005a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a7a:	f7ff fc75 	bl	8005368 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b05      	cmp	r3, #5
 8005a86:	d908      	bls.n	8005a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2203      	movs	r2, #3
 8005a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e078      	b.n	8005b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e8      	bne.n	8005a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4b38      	ldr	r3, [pc, #224]	@ (8005b94 <HAL_DMA_Init+0x158>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d107      	bne.n	8005b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afc:	4313      	orrs	r3, r2
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0307 	bic.w	r3, r3, #7
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d117      	bne.n	8005b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00e      	beq.n	8005b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fb01 	bl	8006148 <DMA_CheckFifoParam>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d008      	beq.n	8005b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2240      	movs	r2, #64	@ 0x40
 8005b50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e016      	b.n	8005b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fab8 	bl	80060dc <DMA_CalcBaseAndBitshift>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b74:	223f      	movs	r2, #63	@ 0x3f
 8005b76:	409a      	lsls	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	f010803f 	.word	0xf010803f

08005b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_DMA_Start_IT+0x26>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e040      	b.n	8005c40 <HAL_DMA_Start_IT+0xa8>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d12f      	bne.n	8005c32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fa4a 	bl	8006080 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf0:	223f      	movs	r2, #63	@ 0x3f
 8005bf2:	409a      	lsls	r2, r3
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0216 	orr.w	r2, r2, #22
 8005c06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f042 0208 	orr.w	r2, r2, #8
 8005c1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	e005      	b.n	8005c3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c56:	f7ff fb87 	bl	8005368 <HAL_GetTick>
 8005c5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d008      	beq.n	8005c7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2280      	movs	r2, #128	@ 0x80
 8005c6c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e052      	b.n	8005d20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f022 0216 	bic.w	r2, r2, #22
 8005c88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d103      	bne.n	8005caa <HAL_DMA_Abort+0x62>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0208 	bic.w	r2, r2, #8
 8005cb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f022 0201 	bic.w	r2, r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cca:	e013      	b.n	8005cf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ccc:	f7ff fb4c 	bl	8005368 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	d90c      	bls.n	8005cf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2203      	movs	r2, #3
 8005ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e015      	b.n	8005d20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1e4      	bne.n	8005ccc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d06:	223f      	movs	r2, #63	@ 0x3f
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d004      	beq.n	8005d46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2280      	movs	r2, #128	@ 0x80
 8005d40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e00c      	b.n	8005d60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2205      	movs	r2, #5
 8005d4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0201 	bic.w	r2, r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005d74:	2300      	movs	r3, #0
 8005d76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d78:	4b8e      	ldr	r3, [pc, #568]	@ (8005fb4 <HAL_DMA_IRQHandler+0x248>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a8e      	ldr	r2, [pc, #568]	@ (8005fb8 <HAL_DMA_IRQHandler+0x24c>)
 8005d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d82:	0a9b      	lsrs	r3, r3, #10
 8005d84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d96:	2208      	movs	r2, #8
 8005d98:	409a      	lsls	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01a      	beq.n	8005dd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d013      	beq.n	8005dd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0204 	bic.w	r2, r2, #4
 8005dbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc4:	2208      	movs	r2, #8
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd0:	f043 0201 	orr.w	r2, r3, #1
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ddc:	2201      	movs	r2, #1
 8005dde:	409a      	lsls	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d012      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00b      	beq.n	8005e0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	409a      	lsls	r2, r3
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e06:	f043 0202 	orr.w	r2, r3, #2
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e12:	2204      	movs	r2, #4
 8005e14:	409a      	lsls	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d012      	beq.n	8005e44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00b      	beq.n	8005e44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e30:	2204      	movs	r2, #4
 8005e32:	409a      	lsls	r2, r3
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3c:	f043 0204 	orr.w	r2, r3, #4
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e48:	2210      	movs	r2, #16
 8005e4a:	409a      	lsls	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d043      	beq.n	8005edc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d03c      	beq.n	8005edc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e66:	2210      	movs	r2, #16
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d018      	beq.n	8005eae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d108      	bne.n	8005e9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d024      	beq.n	8005edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	4798      	blx	r3
 8005e9a:	e01f      	b.n	8005edc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d01b      	beq.n	8005edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	4798      	blx	r3
 8005eac:	e016      	b.n	8005edc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d107      	bne.n	8005ecc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0208 	bic.w	r2, r2, #8
 8005eca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	409a      	lsls	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 808f 	beq.w	800600c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 8087 	beq.w	800600c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f02:	2220      	movs	r2, #32
 8005f04:	409a      	lsls	r2, r3
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	d136      	bne.n	8005f84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0216 	bic.w	r2, r2, #22
 8005f24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695a      	ldr	r2, [r3, #20]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <HAL_DMA_IRQHandler+0x1da>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0208 	bic.w	r2, r2, #8
 8005f54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5a:	223f      	movs	r2, #63	@ 0x3f
 8005f5c:	409a      	lsls	r2, r3
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d07e      	beq.n	8006078 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	4798      	blx	r3
        }
        return;
 8005f82:	e079      	b.n	8006078 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d01d      	beq.n	8005fce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10d      	bne.n	8005fbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d031      	beq.n	800600c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	4798      	blx	r3
 8005fb0:	e02c      	b.n	800600c <HAL_DMA_IRQHandler+0x2a0>
 8005fb2:	bf00      	nop
 8005fb4:	20000010 	.word	0x20000010
 8005fb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d023      	beq.n	800600c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
 8005fcc:	e01e      	b.n	800600c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10f      	bne.n	8005ffc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0210 	bic.w	r2, r2, #16
 8005fea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006010:	2b00      	cmp	r3, #0
 8006012:	d032      	beq.n	800607a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d022      	beq.n	8006066 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2205      	movs	r2, #5
 8006024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0201 	bic.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	3301      	adds	r3, #1
 800603c:	60bb      	str	r3, [r7, #8]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	429a      	cmp	r2, r3
 8006042:	d307      	bcc.n	8006054 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1f2      	bne.n	8006038 <HAL_DMA_IRQHandler+0x2cc>
 8006052:	e000      	b.n	8006056 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006054:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
 8006076:	e000      	b.n	800607a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006078:	bf00      	nop
    }
  }
}
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800609c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	2b40      	cmp	r3, #64	@ 0x40
 80060ac:	d108      	bne.n	80060c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80060be:	e007      	b.n	80060d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	60da      	str	r2, [r3, #12]
}
 80060d0:	bf00      	nop
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	3b10      	subs	r3, #16
 80060ec:	4a14      	ldr	r2, [pc, #80]	@ (8006140 <DMA_CalcBaseAndBitshift+0x64>)
 80060ee:	fba2 2303 	umull	r2, r3, r2, r3
 80060f2:	091b      	lsrs	r3, r3, #4
 80060f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80060f6:	4a13      	ldr	r2, [pc, #76]	@ (8006144 <DMA_CalcBaseAndBitshift+0x68>)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b03      	cmp	r3, #3
 8006108:	d909      	bls.n	800611e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	1d1a      	adds	r2, r3, #4
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	659a      	str	r2, [r3, #88]	@ 0x58
 800611c:	e007      	b.n	800612e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006126:	f023 0303 	bic.w	r3, r3, #3
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	aaaaaaab 	.word	0xaaaaaaab
 8006144:	08010034 	.word	0x08010034

08006148 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006158:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d11f      	bne.n	80061a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b03      	cmp	r3, #3
 8006166:	d856      	bhi.n	8006216 <DMA_CheckFifoParam+0xce>
 8006168:	a201      	add	r2, pc, #4	@ (adr r2, 8006170 <DMA_CheckFifoParam+0x28>)
 800616a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616e:	bf00      	nop
 8006170:	08006181 	.word	0x08006181
 8006174:	08006193 	.word	0x08006193
 8006178:	08006181 	.word	0x08006181
 800617c:	08006217 	.word	0x08006217
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d046      	beq.n	800621a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006190:	e043      	b.n	800621a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006196:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800619a:	d140      	bne.n	800621e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061a0:	e03d      	b.n	800621e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061aa:	d121      	bne.n	80061f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d837      	bhi.n	8006222 <DMA_CheckFifoParam+0xda>
 80061b2:	a201      	add	r2, pc, #4	@ (adr r2, 80061b8 <DMA_CheckFifoParam+0x70>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	080061c9 	.word	0x080061c9
 80061bc:	080061cf 	.word	0x080061cf
 80061c0:	080061c9 	.word	0x080061c9
 80061c4:	080061e1 	.word	0x080061e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	73fb      	strb	r3, [r7, #15]
      break;
 80061cc:	e030      	b.n	8006230 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d025      	beq.n	8006226 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061de:	e022      	b.n	8006226 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061e8:	d11f      	bne.n	800622a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80061ee:	e01c      	b.n	800622a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d903      	bls.n	80061fe <DMA_CheckFifoParam+0xb6>
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d003      	beq.n	8006204 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80061fc:	e018      	b.n	8006230 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	73fb      	strb	r3, [r7, #15]
      break;
 8006202:	e015      	b.n	8006230 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006208:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00e      	beq.n	800622e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	73fb      	strb	r3, [r7, #15]
      break;
 8006214:	e00b      	b.n	800622e <DMA_CheckFifoParam+0xe6>
      break;
 8006216:	bf00      	nop
 8006218:	e00a      	b.n	8006230 <DMA_CheckFifoParam+0xe8>
      break;
 800621a:	bf00      	nop
 800621c:	e008      	b.n	8006230 <DMA_CheckFifoParam+0xe8>
      break;
 800621e:	bf00      	nop
 8006220:	e006      	b.n	8006230 <DMA_CheckFifoParam+0xe8>
      break;
 8006222:	bf00      	nop
 8006224:	e004      	b.n	8006230 <DMA_CheckFifoParam+0xe8>
      break;
 8006226:	bf00      	nop
 8006228:	e002      	b.n	8006230 <DMA_CheckFifoParam+0xe8>
      break;   
 800622a:	bf00      	nop
 800622c:	e000      	b.n	8006230 <DMA_CheckFifoParam+0xe8>
      break;
 800622e:	bf00      	nop
    }
  } 
  
  return status; 
 8006230:	7bfb      	ldrb	r3, [r7, #15]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop

08006240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006240:	b480      	push	{r7}
 8006242:	b089      	sub	sp, #36	@ 0x24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800624a:	2300      	movs	r3, #0
 800624c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800624e:	2300      	movs	r3, #0
 8006250:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006252:	2300      	movs	r3, #0
 8006254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006256:	2300      	movs	r3, #0
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	e16b      	b.n	8006534 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800625c:	2201      	movs	r2, #1
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	fa02 f303 	lsl.w	r3, r2, r3
 8006264:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4013      	ands	r3, r2
 800626e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	429a      	cmp	r2, r3
 8006276:	f040 815a 	bne.w	800652e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	2b01      	cmp	r3, #1
 8006284:	d005      	beq.n	8006292 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800628e:	2b02      	cmp	r3, #2
 8006290:	d130      	bne.n	80062f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	2203      	movs	r2, #3
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	43db      	mvns	r3, r3
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	4013      	ands	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062c8:	2201      	movs	r2, #1
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	fa02 f303 	lsl.w	r3, r2, r3
 80062d0:	43db      	mvns	r3, r3
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	4013      	ands	r3, r2
 80062d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	091b      	lsrs	r3, r3, #4
 80062de:	f003 0201 	and.w	r2, r3, #1
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d017      	beq.n	8006330 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	2203      	movs	r2, #3
 800630c:	fa02 f303 	lsl.w	r3, r2, r3
 8006310:	43db      	mvns	r3, r3
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	4013      	ands	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	fa02 f303 	lsl.w	r3, r2, r3
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	4313      	orrs	r3, r2
 8006328:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f003 0303 	and.w	r3, r3, #3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d123      	bne.n	8006384 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	08da      	lsrs	r2, r3, #3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	3208      	adds	r2, #8
 8006344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006348:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	220f      	movs	r2, #15
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	43db      	mvns	r3, r3
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	4013      	ands	r3, r2
 800635e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	4313      	orrs	r3, r2
 8006374:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	08da      	lsrs	r2, r3, #3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3208      	adds	r2, #8
 800637e:	69b9      	ldr	r1, [r7, #24]
 8006380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	2203      	movs	r2, #3
 8006390:	fa02 f303 	lsl.w	r3, r2, r3
 8006394:	43db      	mvns	r3, r3
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	4013      	ands	r3, r2
 800639a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f003 0203 	and.w	r2, r3, #3
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 80b4 	beq.w	800652e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	4b60      	ldr	r3, [pc, #384]	@ (800654c <HAL_GPIO_Init+0x30c>)
 80063cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ce:	4a5f      	ldr	r2, [pc, #380]	@ (800654c <HAL_GPIO_Init+0x30c>)
 80063d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80063d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80063d6:	4b5d      	ldr	r3, [pc, #372]	@ (800654c <HAL_GPIO_Init+0x30c>)
 80063d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063e2:	4a5b      	ldr	r2, [pc, #364]	@ (8006550 <HAL_GPIO_Init+0x310>)
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	089b      	lsrs	r3, r3, #2
 80063e8:	3302      	adds	r3, #2
 80063ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	f003 0303 	and.w	r3, r3, #3
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	220f      	movs	r2, #15
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	43db      	mvns	r3, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	4013      	ands	r3, r2
 8006404:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a52      	ldr	r2, [pc, #328]	@ (8006554 <HAL_GPIO_Init+0x314>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d02b      	beq.n	8006466 <HAL_GPIO_Init+0x226>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a51      	ldr	r2, [pc, #324]	@ (8006558 <HAL_GPIO_Init+0x318>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d025      	beq.n	8006462 <HAL_GPIO_Init+0x222>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a50      	ldr	r2, [pc, #320]	@ (800655c <HAL_GPIO_Init+0x31c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d01f      	beq.n	800645e <HAL_GPIO_Init+0x21e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a4f      	ldr	r2, [pc, #316]	@ (8006560 <HAL_GPIO_Init+0x320>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d019      	beq.n	800645a <HAL_GPIO_Init+0x21a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a4e      	ldr	r2, [pc, #312]	@ (8006564 <HAL_GPIO_Init+0x324>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d013      	beq.n	8006456 <HAL_GPIO_Init+0x216>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a4d      	ldr	r2, [pc, #308]	@ (8006568 <HAL_GPIO_Init+0x328>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00d      	beq.n	8006452 <HAL_GPIO_Init+0x212>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a4c      	ldr	r2, [pc, #304]	@ (800656c <HAL_GPIO_Init+0x32c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d007      	beq.n	800644e <HAL_GPIO_Init+0x20e>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a4b      	ldr	r2, [pc, #300]	@ (8006570 <HAL_GPIO_Init+0x330>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d101      	bne.n	800644a <HAL_GPIO_Init+0x20a>
 8006446:	2307      	movs	r3, #7
 8006448:	e00e      	b.n	8006468 <HAL_GPIO_Init+0x228>
 800644a:	2308      	movs	r3, #8
 800644c:	e00c      	b.n	8006468 <HAL_GPIO_Init+0x228>
 800644e:	2306      	movs	r3, #6
 8006450:	e00a      	b.n	8006468 <HAL_GPIO_Init+0x228>
 8006452:	2305      	movs	r3, #5
 8006454:	e008      	b.n	8006468 <HAL_GPIO_Init+0x228>
 8006456:	2304      	movs	r3, #4
 8006458:	e006      	b.n	8006468 <HAL_GPIO_Init+0x228>
 800645a:	2303      	movs	r3, #3
 800645c:	e004      	b.n	8006468 <HAL_GPIO_Init+0x228>
 800645e:	2302      	movs	r3, #2
 8006460:	e002      	b.n	8006468 <HAL_GPIO_Init+0x228>
 8006462:	2301      	movs	r3, #1
 8006464:	e000      	b.n	8006468 <HAL_GPIO_Init+0x228>
 8006466:	2300      	movs	r3, #0
 8006468:	69fa      	ldr	r2, [r7, #28]
 800646a:	f002 0203 	and.w	r2, r2, #3
 800646e:	0092      	lsls	r2, r2, #2
 8006470:	4093      	lsls	r3, r2
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	4313      	orrs	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006478:	4935      	ldr	r1, [pc, #212]	@ (8006550 <HAL_GPIO_Init+0x310>)
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	089b      	lsrs	r3, r3, #2
 800647e:	3302      	adds	r3, #2
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006486:	4b3b      	ldr	r3, [pc, #236]	@ (8006574 <HAL_GPIO_Init+0x334>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	43db      	mvns	r3, r3
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	4013      	ands	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064aa:	4a32      	ldr	r2, [pc, #200]	@ (8006574 <HAL_GPIO_Init+0x334>)
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064b0:	4b30      	ldr	r3, [pc, #192]	@ (8006574 <HAL_GPIO_Init+0x334>)
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	43db      	mvns	r3, r3
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	4013      	ands	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d003      	beq.n	80064d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064d4:	4a27      	ldr	r2, [pc, #156]	@ (8006574 <HAL_GPIO_Init+0x334>)
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80064da:	4b26      	ldr	r3, [pc, #152]	@ (8006574 <HAL_GPIO_Init+0x334>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	43db      	mvns	r3, r3
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	4013      	ands	r3, r2
 80064e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006574 <HAL_GPIO_Init+0x334>)
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006504:	4b1b      	ldr	r3, [pc, #108]	@ (8006574 <HAL_GPIO_Init+0x334>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	43db      	mvns	r3, r3
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	4013      	ands	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006528:	4a12      	ldr	r2, [pc, #72]	@ (8006574 <HAL_GPIO_Init+0x334>)
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	3301      	adds	r3, #1
 8006532:	61fb      	str	r3, [r7, #28]
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	2b0f      	cmp	r3, #15
 8006538:	f67f ae90 	bls.w	800625c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800653c:	bf00      	nop
 800653e:	bf00      	nop
 8006540:	3724      	adds	r7, #36	@ 0x24
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40023800 	.word	0x40023800
 8006550:	40013800 	.word	0x40013800
 8006554:	40020000 	.word	0x40020000
 8006558:	40020400 	.word	0x40020400
 800655c:	40020800 	.word	0x40020800
 8006560:	40020c00 	.word	0x40020c00
 8006564:	40021000 	.word	0x40021000
 8006568:	40021400 	.word	0x40021400
 800656c:	40021800 	.word	0x40021800
 8006570:	40021c00 	.word	0x40021c00
 8006574:	40013c00 	.word	0x40013c00

08006578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	460b      	mov	r3, r1
 8006582:	807b      	strh	r3, [r7, #2]
 8006584:	4613      	mov	r3, r2
 8006586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006588:	787b      	ldrb	r3, [r7, #1]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800658e:	887a      	ldrh	r2, [r7, #2]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006594:	e003      	b.n	800659e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006596:	887b      	ldrh	r3, [r7, #2]
 8006598:	041a      	lsls	r2, r3, #16
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	619a      	str	r2, [r3, #24]
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e267      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d075      	beq.n	80066b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065ca:	4b88      	ldr	r3, [pc, #544]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 030c 	and.w	r3, r3, #12
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d00c      	beq.n	80065f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065d6:	4b85      	ldr	r3, [pc, #532]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d112      	bne.n	8006608 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065e2:	4b82      	ldr	r3, [pc, #520]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065ee:	d10b      	bne.n	8006608 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f0:	4b7e      	ldr	r3, [pc, #504]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d05b      	beq.n	80066b4 <HAL_RCC_OscConfig+0x108>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d157      	bne.n	80066b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e242      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006610:	d106      	bne.n	8006620 <HAL_RCC_OscConfig+0x74>
 8006612:	4b76      	ldr	r3, [pc, #472]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a75      	ldr	r2, [pc, #468]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	e01d      	b.n	800665c <HAL_RCC_OscConfig+0xb0>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006628:	d10c      	bne.n	8006644 <HAL_RCC_OscConfig+0x98>
 800662a:	4b70      	ldr	r3, [pc, #448]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a6f      	ldr	r2, [pc, #444]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	4b6d      	ldr	r3, [pc, #436]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a6c      	ldr	r2, [pc, #432]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 800663c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	e00b      	b.n	800665c <HAL_RCC_OscConfig+0xb0>
 8006644:	4b69      	ldr	r3, [pc, #420]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a68      	ldr	r2, [pc, #416]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 800664a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	4b66      	ldr	r3, [pc, #408]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a65      	ldr	r2, [pc, #404]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800665a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d013      	beq.n	800668c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006664:	f7fe fe80 	bl	8005368 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800666c:	f7fe fe7c 	bl	8005368 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b64      	cmp	r3, #100	@ 0x64
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e207      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800667e:	4b5b      	ldr	r3, [pc, #364]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0f0      	beq.n	800666c <HAL_RCC_OscConfig+0xc0>
 800668a:	e014      	b.n	80066b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668c:	f7fe fe6c 	bl	8005368 <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006694:	f7fe fe68 	bl	8005368 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b64      	cmp	r3, #100	@ 0x64
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e1f3      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066a6:	4b51      	ldr	r3, [pc, #324]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1f0      	bne.n	8006694 <HAL_RCC_OscConfig+0xe8>
 80066b2:	e000      	b.n	80066b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d063      	beq.n	800678a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066c2:	4b4a      	ldr	r3, [pc, #296]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f003 030c 	and.w	r3, r3, #12
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066ce:	4b47      	ldr	r3, [pc, #284]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066d6:	2b08      	cmp	r3, #8
 80066d8:	d11c      	bne.n	8006714 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066da:	4b44      	ldr	r3, [pc, #272]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d116      	bne.n	8006714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066e6:	4b41      	ldr	r3, [pc, #260]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <HAL_RCC_OscConfig+0x152>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d001      	beq.n	80066fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e1c7      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066fe:	4b3b      	ldr	r3, [pc, #236]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	4937      	ldr	r1, [pc, #220]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 800670e:	4313      	orrs	r3, r2
 8006710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006712:	e03a      	b.n	800678a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d020      	beq.n	800675e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800671c:	4b34      	ldr	r3, [pc, #208]	@ (80067f0 <HAL_RCC_OscConfig+0x244>)
 800671e:	2201      	movs	r2, #1
 8006720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006722:	f7fe fe21 	bl	8005368 <HAL_GetTick>
 8006726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006728:	e008      	b.n	800673c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800672a:	f7fe fe1d 	bl	8005368 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e1a8      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800673c:	4b2b      	ldr	r3, [pc, #172]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0f0      	beq.n	800672a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006748:	4b28      	ldr	r3, [pc, #160]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	4925      	ldr	r1, [pc, #148]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006758:	4313      	orrs	r3, r2
 800675a:	600b      	str	r3, [r1, #0]
 800675c:	e015      	b.n	800678a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800675e:	4b24      	ldr	r3, [pc, #144]	@ (80067f0 <HAL_RCC_OscConfig+0x244>)
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006764:	f7fe fe00 	bl	8005368 <HAL_GetTick>
 8006768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800676c:	f7fe fdfc 	bl	8005368 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e187      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800677e:	4b1b      	ldr	r3, [pc, #108]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f0      	bne.n	800676c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d036      	beq.n	8006804 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d016      	beq.n	80067cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800679e:	4b15      	ldr	r3, [pc, #84]	@ (80067f4 <HAL_RCC_OscConfig+0x248>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a4:	f7fe fde0 	bl	8005368 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067ac:	f7fe fddc 	bl	8005368 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e167      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067be:	4b0b      	ldr	r3, [pc, #44]	@ (80067ec <HAL_RCC_OscConfig+0x240>)
 80067c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0f0      	beq.n	80067ac <HAL_RCC_OscConfig+0x200>
 80067ca:	e01b      	b.n	8006804 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067cc:	4b09      	ldr	r3, [pc, #36]	@ (80067f4 <HAL_RCC_OscConfig+0x248>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067d2:	f7fe fdc9 	bl	8005368 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d8:	e00e      	b.n	80067f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067da:	f7fe fdc5 	bl	8005368 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d907      	bls.n	80067f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e150      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
 80067ec:	40023800 	.word	0x40023800
 80067f0:	42470000 	.word	0x42470000
 80067f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f8:	4b88      	ldr	r3, [pc, #544]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80067fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1ea      	bne.n	80067da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8097 	beq.w	8006940 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006812:	2300      	movs	r3, #0
 8006814:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006816:	4b81      	ldr	r3, [pc, #516]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10f      	bne.n	8006842 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006822:	2300      	movs	r3, #0
 8006824:	60bb      	str	r3, [r7, #8]
 8006826:	4b7d      	ldr	r3, [pc, #500]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 8006828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682a:	4a7c      	ldr	r2, [pc, #496]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 800682c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006830:	6413      	str	r3, [r2, #64]	@ 0x40
 8006832:	4b7a      	ldr	r3, [pc, #488]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 8006834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800683a:	60bb      	str	r3, [r7, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800683e:	2301      	movs	r3, #1
 8006840:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006842:	4b77      	ldr	r3, [pc, #476]	@ (8006a20 <HAL_RCC_OscConfig+0x474>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800684a:	2b00      	cmp	r3, #0
 800684c:	d118      	bne.n	8006880 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800684e:	4b74      	ldr	r3, [pc, #464]	@ (8006a20 <HAL_RCC_OscConfig+0x474>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a73      	ldr	r2, [pc, #460]	@ (8006a20 <HAL_RCC_OscConfig+0x474>)
 8006854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800685a:	f7fe fd85 	bl	8005368 <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006860:	e008      	b.n	8006874 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006862:	f7fe fd81 	bl	8005368 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d901      	bls.n	8006874 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e10c      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006874:	4b6a      	ldr	r3, [pc, #424]	@ (8006a20 <HAL_RCC_OscConfig+0x474>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800687c:	2b00      	cmp	r3, #0
 800687e:	d0f0      	beq.n	8006862 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d106      	bne.n	8006896 <HAL_RCC_OscConfig+0x2ea>
 8006888:	4b64      	ldr	r3, [pc, #400]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 800688a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688c:	4a63      	ldr	r2, [pc, #396]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 800688e:	f043 0301 	orr.w	r3, r3, #1
 8006892:	6713      	str	r3, [r2, #112]	@ 0x70
 8006894:	e01c      	b.n	80068d0 <HAL_RCC_OscConfig+0x324>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2b05      	cmp	r3, #5
 800689c:	d10c      	bne.n	80068b8 <HAL_RCC_OscConfig+0x30c>
 800689e:	4b5f      	ldr	r3, [pc, #380]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a2:	4a5e      	ldr	r2, [pc, #376]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068a4:	f043 0304 	orr.w	r3, r3, #4
 80068a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80068aa:	4b5c      	ldr	r3, [pc, #368]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ae:	4a5b      	ldr	r2, [pc, #364]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068b0:	f043 0301 	orr.w	r3, r3, #1
 80068b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068b6:	e00b      	b.n	80068d0 <HAL_RCC_OscConfig+0x324>
 80068b8:	4b58      	ldr	r3, [pc, #352]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068bc:	4a57      	ldr	r2, [pc, #348]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068be:	f023 0301 	bic.w	r3, r3, #1
 80068c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80068c4:	4b55      	ldr	r3, [pc, #340]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c8:	4a54      	ldr	r2, [pc, #336]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068ca:	f023 0304 	bic.w	r3, r3, #4
 80068ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d015      	beq.n	8006904 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068d8:	f7fe fd46 	bl	8005368 <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068de:	e00a      	b.n	80068f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e0:	f7fe fd42 	bl	8005368 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d901      	bls.n	80068f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e0cb      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f6:	4b49      	ldr	r3, [pc, #292]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80068f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0ee      	beq.n	80068e0 <HAL_RCC_OscConfig+0x334>
 8006902:	e014      	b.n	800692e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006904:	f7fe fd30 	bl	8005368 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800690a:	e00a      	b.n	8006922 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690c:	f7fe fd2c 	bl	8005368 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800691a:	4293      	cmp	r3, r2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e0b5      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006922:	4b3e      	ldr	r3, [pc, #248]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1ee      	bne.n	800690c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800692e:	7dfb      	ldrb	r3, [r7, #23]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d105      	bne.n	8006940 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006934:	4b39      	ldr	r3, [pc, #228]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 8006936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006938:	4a38      	ldr	r2, [pc, #224]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 800693a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800693e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 80a1 	beq.w	8006a8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800694a:	4b34      	ldr	r3, [pc, #208]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 030c 	and.w	r3, r3, #12
 8006952:	2b08      	cmp	r3, #8
 8006954:	d05c      	beq.n	8006a10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d141      	bne.n	80069e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800695e:	4b31      	ldr	r3, [pc, #196]	@ (8006a24 <HAL_RCC_OscConfig+0x478>)
 8006960:	2200      	movs	r2, #0
 8006962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006964:	f7fe fd00 	bl	8005368 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800696c:	f7fe fcfc 	bl	8005368 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e087      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800697e:	4b27      	ldr	r3, [pc, #156]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	69da      	ldr	r2, [r3, #28]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006998:	019b      	lsls	r3, r3, #6
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a0:	085b      	lsrs	r3, r3, #1
 80069a2:	3b01      	subs	r3, #1
 80069a4:	041b      	lsls	r3, r3, #16
 80069a6:	431a      	orrs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ac:	061b      	lsls	r3, r3, #24
 80069ae:	491b      	ldr	r1, [pc, #108]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a24 <HAL_RCC_OscConfig+0x478>)
 80069b6:	2201      	movs	r2, #1
 80069b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ba:	f7fe fcd5 	bl	8005368 <HAL_GetTick>
 80069be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c0:	e008      	b.n	80069d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c2:	f7fe fcd1 	bl	8005368 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e05c      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069d4:	4b11      	ldr	r3, [pc, #68]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0f0      	beq.n	80069c2 <HAL_RCC_OscConfig+0x416>
 80069e0:	e054      	b.n	8006a8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e2:	4b10      	ldr	r3, [pc, #64]	@ (8006a24 <HAL_RCC_OscConfig+0x478>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e8:	f7fe fcbe 	bl	8005368 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f0:	f7fe fcba 	bl	8005368 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e045      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a02:	4b06      	ldr	r3, [pc, #24]	@ (8006a1c <HAL_RCC_OscConfig+0x470>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1f0      	bne.n	80069f0 <HAL_RCC_OscConfig+0x444>
 8006a0e:	e03d      	b.n	8006a8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d107      	bne.n	8006a28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e038      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
 8006a1c:	40023800 	.word	0x40023800
 8006a20:	40007000 	.word	0x40007000
 8006a24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a28:	4b1b      	ldr	r3, [pc, #108]	@ (8006a98 <HAL_RCC_OscConfig+0x4ec>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d028      	beq.n	8006a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d121      	bne.n	8006a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d11a      	bne.n	8006a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a58:	4013      	ands	r3, r2
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d111      	bne.n	8006a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6e:	085b      	lsrs	r3, r3, #1
 8006a70:	3b01      	subs	r3, #1
 8006a72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d107      	bne.n	8006a88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d001      	beq.n	8006a8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e000      	b.n	8006a8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40023800 	.word	0x40023800

08006a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0cc      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab0:	4b68      	ldr	r3, [pc, #416]	@ (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d90c      	bls.n	8006ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006abe:	4b65      	ldr	r3, [pc, #404]	@ (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ac6:	4b63      	ldr	r3, [pc, #396]	@ (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0307 	and.w	r3, r3, #7
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d001      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e0b8      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d020      	beq.n	8006b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006af0:	4b59      	ldr	r3, [pc, #356]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	4a58      	ldr	r2, [pc, #352]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006af6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006afa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0308 	and.w	r3, r3, #8
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b08:	4b53      	ldr	r3, [pc, #332]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	4a52      	ldr	r2, [pc, #328]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b14:	4b50      	ldr	r3, [pc, #320]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	494d      	ldr	r1, [pc, #308]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d044      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d107      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3a:	4b47      	ldr	r3, [pc, #284]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d119      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e07f      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d003      	beq.n	8006b5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d107      	bne.n	8006b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b5a:	4b3f      	ldr	r3, [pc, #252]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e06f      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e067      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b7a:	4b37      	ldr	r3, [pc, #220]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f023 0203 	bic.w	r2, r3, #3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	4934      	ldr	r1, [pc, #208]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b8c:	f7fe fbec 	bl	8005368 <HAL_GetTick>
 8006b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b92:	e00a      	b.n	8006baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b94:	f7fe fbe8 	bl	8005368 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e04f      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006baa:	4b2b      	ldr	r3, [pc, #172]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f003 020c 	and.w	r2, r3, #12
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d1eb      	bne.n	8006b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bbc:	4b25      	ldr	r3, [pc, #148]	@ (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d20c      	bcs.n	8006be4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bca:	4b22      	ldr	r3, [pc, #136]	@ (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd2:	4b20      	ldr	r3, [pc, #128]	@ (8006c54 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d001      	beq.n	8006be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e032      	b.n	8006c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bf0:	4b19      	ldr	r3, [pc, #100]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	4916      	ldr	r1, [pc, #88]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c0e:	4b12      	ldr	r3, [pc, #72]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	490e      	ldr	r1, [pc, #56]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c22:	f000 f821 	bl	8006c68 <HAL_RCC_GetSysClockFreq>
 8006c26:	4602      	mov	r2, r0
 8006c28:	4b0b      	ldr	r3, [pc, #44]	@ (8006c58 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	091b      	lsrs	r3, r3, #4
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	490a      	ldr	r1, [pc, #40]	@ (8006c5c <HAL_RCC_ClockConfig+0x1c0>)
 8006c34:	5ccb      	ldrb	r3, [r1, r3]
 8006c36:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3a:	4a09      	ldr	r2, [pc, #36]	@ (8006c60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006c3e:	4b09      	ldr	r3, [pc, #36]	@ (8006c64 <HAL_RCC_ClockConfig+0x1c8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fb4c 	bl	80052e0 <HAL_InitTick>

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40023c00 	.word	0x40023c00
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	0801001c 	.word	0x0801001c
 8006c60:	20000010 	.word	0x20000010
 8006c64:	20000014 	.word	0x20000014

08006c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c6c:	b094      	sub	sp, #80	@ 0x50
 8006c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c80:	4b79      	ldr	r3, [pc, #484]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 030c 	and.w	r3, r3, #12
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d00d      	beq.n	8006ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	f200 80e1 	bhi.w	8006e54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <HAL_RCC_GetSysClockFreq+0x34>
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d003      	beq.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c9a:	e0db      	b.n	8006e54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c9c:	4b73      	ldr	r3, [pc, #460]	@ (8006e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8006c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ca0:	e0db      	b.n	8006e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ca2:	4b73      	ldr	r3, [pc, #460]	@ (8006e70 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ca6:	e0d8      	b.n	8006e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cb0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d063      	beq.n	8006d86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	099b      	lsrs	r3, r3, #6
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006cda:	4622      	mov	r2, r4
 8006cdc:	462b      	mov	r3, r5
 8006cde:	f04f 0000 	mov.w	r0, #0
 8006ce2:	f04f 0100 	mov.w	r1, #0
 8006ce6:	0159      	lsls	r1, r3, #5
 8006ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cec:	0150      	lsls	r0, r2, #5
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	1a51      	subs	r1, r2, r1
 8006cf6:	6139      	str	r1, [r7, #16]
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	f04f 0300 	mov.w	r3, #0
 8006d08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d0c:	4659      	mov	r1, fp
 8006d0e:	018b      	lsls	r3, r1, #6
 8006d10:	4651      	mov	r1, sl
 8006d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d16:	4651      	mov	r1, sl
 8006d18:	018a      	lsls	r2, r1, #6
 8006d1a:	4651      	mov	r1, sl
 8006d1c:	ebb2 0801 	subs.w	r8, r2, r1
 8006d20:	4659      	mov	r1, fp
 8006d22:	eb63 0901 	sbc.w	r9, r3, r1
 8006d26:	f04f 0200 	mov.w	r2, #0
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d3a:	4690      	mov	r8, r2
 8006d3c:	4699      	mov	r9, r3
 8006d3e:	4623      	mov	r3, r4
 8006d40:	eb18 0303 	adds.w	r3, r8, r3
 8006d44:	60bb      	str	r3, [r7, #8]
 8006d46:	462b      	mov	r3, r5
 8006d48:	eb49 0303 	adc.w	r3, r9, r3
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	024b      	lsls	r3, r1, #9
 8006d5e:	4621      	mov	r1, r4
 8006d60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d64:	4621      	mov	r1, r4
 8006d66:	024a      	lsls	r2, r1, #9
 8006d68:	4610      	mov	r0, r2
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d6e:	2200      	movs	r2, #0
 8006d70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d78:	f7f9 fa2e 	bl	80001d8 <__aeabi_uldivmod>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4613      	mov	r3, r2
 8006d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d84:	e058      	b.n	8006e38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d86:	4b38      	ldr	r3, [pc, #224]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	099b      	lsrs	r3, r3, #6
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4618      	mov	r0, r3
 8006d90:	4611      	mov	r1, r2
 8006d92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d96:	623b      	str	r3, [r7, #32]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006da0:	4642      	mov	r2, r8
 8006da2:	464b      	mov	r3, r9
 8006da4:	f04f 0000 	mov.w	r0, #0
 8006da8:	f04f 0100 	mov.w	r1, #0
 8006dac:	0159      	lsls	r1, r3, #5
 8006dae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006db2:	0150      	lsls	r0, r2, #5
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4641      	mov	r1, r8
 8006dba:	ebb2 0a01 	subs.w	sl, r2, r1
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006dc4:	f04f 0200 	mov.w	r2, #0
 8006dc8:	f04f 0300 	mov.w	r3, #0
 8006dcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006dd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006dd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006dd8:	ebb2 040a 	subs.w	r4, r2, sl
 8006ddc:	eb63 050b 	sbc.w	r5, r3, fp
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	00eb      	lsls	r3, r5, #3
 8006dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dee:	00e2      	lsls	r2, r4, #3
 8006df0:	4614      	mov	r4, r2
 8006df2:	461d      	mov	r5, r3
 8006df4:	4643      	mov	r3, r8
 8006df6:	18e3      	adds	r3, r4, r3
 8006df8:	603b      	str	r3, [r7, #0]
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	eb45 0303 	adc.w	r3, r5, r3
 8006e00:	607b      	str	r3, [r7, #4]
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	f04f 0300 	mov.w	r3, #0
 8006e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e0e:	4629      	mov	r1, r5
 8006e10:	028b      	lsls	r3, r1, #10
 8006e12:	4621      	mov	r1, r4
 8006e14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e18:	4621      	mov	r1, r4
 8006e1a:	028a      	lsls	r2, r1, #10
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e22:	2200      	movs	r2, #0
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	61fa      	str	r2, [r7, #28]
 8006e28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e2c:	f7f9 f9d4 	bl	80001d8 <__aeabi_uldivmod>
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	4613      	mov	r3, r2
 8006e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e38:	4b0b      	ldr	r3, [pc, #44]	@ (8006e68 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	0c1b      	lsrs	r3, r3, #16
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	3301      	adds	r3, #1
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006e48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e52:	e002      	b.n	8006e5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e54:	4b05      	ldr	r3, [pc, #20]	@ (8006e6c <HAL_RCC_GetSysClockFreq+0x204>)
 8006e56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3750      	adds	r7, #80	@ 0x50
 8006e60:	46bd      	mov	sp, r7
 8006e62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e66:	bf00      	nop
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	00f42400 	.word	0x00f42400
 8006e70:	007a1200 	.word	0x007a1200

08006e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e78:	4b03      	ldr	r3, [pc, #12]	@ (8006e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	20000010 	.word	0x20000010

08006e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e90:	f7ff fff0 	bl	8006e74 <HAL_RCC_GetHCLKFreq>
 8006e94:	4602      	mov	r2, r0
 8006e96:	4b05      	ldr	r3, [pc, #20]	@ (8006eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	0a9b      	lsrs	r3, r3, #10
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	4903      	ldr	r1, [pc, #12]	@ (8006eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ea2:	5ccb      	ldrb	r3, [r1, r3]
 8006ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	40023800 	.word	0x40023800
 8006eb0:	0801002c 	.word	0x0801002c

08006eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006eb8:	f7ff ffdc 	bl	8006e74 <HAL_RCC_GetHCLKFreq>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	4b05      	ldr	r3, [pc, #20]	@ (8006ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	0b5b      	lsrs	r3, r3, #13
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	4903      	ldr	r1, [pc, #12]	@ (8006ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eca:	5ccb      	ldrb	r3, [r1, r3]
 8006ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	40023800 	.word	0x40023800
 8006ed8:	0801002c 	.word	0x0801002c

08006edc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e022      	b.n	8006f34 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d105      	bne.n	8006f06 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7fd fee3 	bl	8004ccc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2203      	movs	r2, #3
 8006f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f814 	bl	8006f3c <HAL_SD_InitCard>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e00a      	b.n	8006f34 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f3c:	b5b0      	push	{r4, r5, r7, lr}
 8006f3e:	b08e      	sub	sp, #56	@ 0x38
 8006f40:	af04      	add	r7, sp, #16
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006f50:	2300      	movs	r3, #0
 8006f52:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006f54:	2300      	movs	r3, #0
 8006f56:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006f58:	2376      	movs	r3, #118	@ 0x76
 8006f5a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681d      	ldr	r5, [r3, #0]
 8006f60:	466c      	mov	r4, sp
 8006f62:	f107 0314 	add.w	r3, r7, #20
 8006f66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006f6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006f6e:	f107 0308 	add.w	r3, r7, #8
 8006f72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f74:	4628      	mov	r0, r5
 8006f76:	f004 f8df 	bl	800b138 <SDIO_Init>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8006f80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e04f      	b.n	800702c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006f8c:	4b29      	ldr	r3, [pc, #164]	@ (8007034 <HAL_SD_InitCard+0xf8>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f004 f917 	bl	800b1ca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006f9c:	4b25      	ldr	r3, [pc, #148]	@ (8007034 <HAL_SD_InitCard+0xf8>)
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006fa2:	2002      	movs	r0, #2
 8006fa4:	f7fe f9ec 	bl	8005380 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fe79 	bl	8007ca0 <SD_PowerON>
 8006fae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00b      	beq.n	8006fce <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e02e      	b.n	800702c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fd98 	bl	8007b04 <SD_InitCard>
 8006fd4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e01b      	b.n	800702c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f004 f976 	bl	800b2ee <SDMMC_CmdBlockLength>
 8007002:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00f      	beq.n	800702a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a0a      	ldr	r2, [pc, #40]	@ (8007038 <HAL_SD_InitCard+0xfc>)
 8007010:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	431a      	orrs	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e000      	b.n	800702c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3728      	adds	r7, #40	@ 0x28
 8007030:	46bd      	mov	sp, r7
 8007032:	bdb0      	pop	{r4, r5, r7, pc}
 8007034:	422580a0 	.word	0x422580a0
 8007038:	004005ff 	.word	0x004005ff

0800703c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b092      	sub	sp, #72	@ 0x48
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800704a:	f7fe f98d 	bl	8005368 <HAL_GetTick>
 800704e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d107      	bne.n	800706e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007062:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e1c5      	b.n	80073fa <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b01      	cmp	r3, #1
 8007078:	f040 81b8 	bne.w	80073ec <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007082:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	441a      	add	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800708c:	429a      	cmp	r2, r3
 800708e:	d907      	bls.n	80070a0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007094:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e1ac      	b.n	80073fa <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2203      	movs	r2, #3
 80070a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2200      	movs	r2, #0
 80070ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d002      	beq.n	80070be <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80070b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ba:	025b      	lsls	r3, r3, #9
 80070bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80070be:	f04f 33ff 	mov.w	r3, #4294967295
 80070c2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	025b      	lsls	r3, r3, #9
 80070c8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80070ca:	2390      	movs	r3, #144	@ 0x90
 80070cc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80070ce:	2302      	movs	r3, #2
 80070d0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80070d6:	2301      	movs	r3, #1
 80070d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f107 0214 	add.w	r2, r7, #20
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f004 f8d6 	bl	800b296 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d90a      	bls.n	8007106 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2202      	movs	r2, #2
 80070f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80070fc:	4618      	mov	r0, r3
 80070fe:	f004 f93a 	bl	800b376 <SDMMC_CmdReadMultiBlock>
 8007102:	6478      	str	r0, [r7, #68]	@ 0x44
 8007104:	e009      	b.n	800711a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2201      	movs	r2, #1
 800710a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007112:	4618      	mov	r0, r3
 8007114:	f004 f90d 	bl	800b332 <SDMMC_CmdReadSingleBlock>
 8007118:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800711a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800711c:	2b00      	cmp	r3, #0
 800711e:	d012      	beq.n	8007146 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a7e      	ldr	r2, [pc, #504]	@ (8007320 <HAL_SD_ReadBlocks+0x2e4>)
 8007126:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800712c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800712e:	431a      	orrs	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e159      	b.n	80073fa <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800714a:	e061      	b.n	8007210 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007152:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d03c      	beq.n	80071d4 <HAL_SD_ReadBlocks+0x198>
 800715a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800715c:	2b00      	cmp	r3, #0
 800715e:	d039      	beq.n	80071d4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007160:	2300      	movs	r3, #0
 8007162:	643b      	str	r3, [r7, #64]	@ 0x40
 8007164:	e033      	b.n	80071ce <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f004 f80f 	bl	800b18e <SDIO_ReadFIFO>
 8007170:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007174:	b2da      	uxtb	r2, r3
 8007176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007178:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800717a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800717c:	3301      	adds	r3, #1
 800717e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007182:	3b01      	subs	r3, #1
 8007184:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007188:	0a1b      	lsrs	r3, r3, #8
 800718a:	b2da      	uxtb	r2, r3
 800718c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800718e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007192:	3301      	adds	r3, #1
 8007194:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007198:	3b01      	subs	r3, #1
 800719a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719e:	0c1b      	lsrs	r3, r3, #16
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80071a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a8:	3301      	adds	r3, #1
 80071aa:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80071ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ae:	3b01      	subs	r3, #1
 80071b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80071b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071b4:	0e1b      	lsrs	r3, r3, #24
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80071bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071be:	3301      	adds	r3, #1
 80071c0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80071c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c4:	3b01      	subs	r3, #1
 80071c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80071c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071ca:	3301      	adds	r3, #1
 80071cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d0:	2b07      	cmp	r3, #7
 80071d2:	d9c8      	bls.n	8007166 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80071d4:	f7fe f8c8 	bl	8005368 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d902      	bls.n	80071ea <HAL_SD_ReadBlocks+0x1ae>
 80071e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d112      	bne.n	8007210 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a4c      	ldr	r2, [pc, #304]	@ (8007320 <HAL_SD_ReadBlocks+0x2e4>)
 80071f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e0f4      	b.n	80073fa <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007216:	f240 332a 	movw	r3, #810	@ 0x32a
 800721a:	4013      	ands	r3, r2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d095      	beq.n	800714c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800722a:	2b00      	cmp	r3, #0
 800722c:	d022      	beq.n	8007274 <HAL_SD_ReadBlocks+0x238>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d91f      	bls.n	8007274 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007238:	2b03      	cmp	r3, #3
 800723a:	d01b      	beq.n	8007274 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4618      	mov	r0, r3
 8007242:	f004 f8ff 	bl	800b444 <SDMMC_CmdStopTransfer>
 8007246:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800724a:	2b00      	cmp	r3, #0
 800724c:	d012      	beq.n	8007274 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a33      	ldr	r2, [pc, #204]	@ (8007320 <HAL_SD_ReadBlocks+0x2e4>)
 8007254:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800725a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800725c:	431a      	orrs	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e0c2      	b.n	80073fa <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b00      	cmp	r3, #0
 8007280:	d106      	bne.n	8007290 <HAL_SD_ReadBlocks+0x254>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007288:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800728c:	2b00      	cmp	r3, #0
 800728e:	d012      	beq.n	80072b6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a22      	ldr	r2, [pc, #136]	@ (8007320 <HAL_SD_ReadBlocks+0x2e4>)
 8007296:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729c:	f043 0208 	orr.w	r2, r3, #8
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e0a1      	b.n	80073fa <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d012      	beq.n	80072ea <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a15      	ldr	r2, [pc, #84]	@ (8007320 <HAL_SD_ReadBlocks+0x2e4>)
 80072ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d0:	f043 0202 	orr.w	r2, r3, #2
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e087      	b.n	80073fa <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d064      	beq.n	80073c2 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a08      	ldr	r2, [pc, #32]	@ (8007320 <HAL_SD_ReadBlocks+0x2e4>)
 80072fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007304:	f043 0220 	orr.w	r2, r3, #32
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e06d      	b.n	80073fa <HAL_SD_ReadBlocks+0x3be>
 800731e:	bf00      	nop
 8007320:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	f003 ff30 	bl	800b18e <SDIO_ReadFIFO>
 800732e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007332:	b2da      	uxtb	r2, r3
 8007334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007336:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800733a:	3301      	adds	r3, #1
 800733c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800733e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007340:	3b01      	subs	r3, #1
 8007342:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007346:	0a1b      	lsrs	r3, r3, #8
 8007348:	b2da      	uxtb	r2, r3
 800734a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800734c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800734e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007350:	3301      	adds	r3, #1
 8007352:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007356:	3b01      	subs	r3, #1
 8007358:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800735a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735c:	0c1b      	lsrs	r3, r3, #16
 800735e:	b2da      	uxtb	r2, r3
 8007360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007362:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007366:	3301      	adds	r3, #1
 8007368:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800736a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800736c:	3b01      	subs	r3, #1
 800736e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007372:	0e1b      	lsrs	r3, r3, #24
 8007374:	b2da      	uxtb	r2, r3
 8007376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007378:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800737a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800737c:	3301      	adds	r3, #1
 800737e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007382:	3b01      	subs	r3, #1
 8007384:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007386:	f7fd ffef 	bl	8005368 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007392:	429a      	cmp	r2, r3
 8007394:	d902      	bls.n	800739c <HAL_SD_ReadBlocks+0x360>
 8007396:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007398:	2b00      	cmp	r3, #0
 800739a:	d112      	bne.n	80073c2 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a18      	ldr	r2, [pc, #96]	@ (8007404 <HAL_SD_ReadBlocks+0x3c8>)
 80073a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e01b      	b.n	80073fa <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <HAL_SD_ReadBlocks+0x39a>
 80073d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1a6      	bne.n	8007324 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f240 523a 	movw	r2, #1338	@ 0x53a
 80073de:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e006      	b.n	80073fa <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
  }
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3748      	adds	r7, #72	@ 0x48
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	004005ff 	.word	0x004005ff

08007408 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b092      	sub	sp, #72	@ 0x48
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007416:	f7fd ffa7 	bl	8005368 <HAL_GetTick>
 800741a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d107      	bne.n	800743a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e16d      	b.n	8007716 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b01      	cmp	r3, #1
 8007444:	f040 8160 	bne.w	8007708 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800744e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	441a      	add	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007458:	429a      	cmp	r2, r3
 800745a:	d907      	bls.n	800746c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007460:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e154      	b.n	8007716 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2203      	movs	r2, #3
 8007470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2200      	movs	r2, #0
 800747a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007480:	2b01      	cmp	r3, #1
 8007482:	d002      	beq.n	800748a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007486:	025b      	lsls	r3, r3, #9
 8007488:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800748a:	f04f 33ff 	mov.w	r3, #4294967295
 800748e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	025b      	lsls	r3, r3, #9
 8007494:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007496:	2390      	movs	r3, #144	@ 0x90
 8007498:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800749a:	2300      	movs	r3, #0
 800749c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800749e:	2300      	movs	r3, #0
 80074a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80074a2:	2301      	movs	r3, #1
 80074a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f107 0218 	add.w	r2, r7, #24
 80074ae:	4611      	mov	r1, r2
 80074b0:	4618      	mov	r0, r3
 80074b2:	f003 fef0 	bl	800b296 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d90a      	bls.n	80074d2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2220      	movs	r2, #32
 80074c0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80074c8:	4618      	mov	r0, r3
 80074ca:	f003 ff98 	bl	800b3fe <SDMMC_CmdWriteMultiBlock>
 80074ce:	6478      	str	r0, [r7, #68]	@ 0x44
 80074d0:	e009      	b.n	80074e6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2210      	movs	r2, #16
 80074d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80074de:	4618      	mov	r0, r3
 80074e0:	f003 ff6b 	bl	800b3ba <SDMMC_CmdWriteSingleBlock>
 80074e4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80074e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d012      	beq.n	8007512 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a8b      	ldr	r2, [pc, #556]	@ (8007720 <HAL_SD_WriteBlocks+0x318>)
 80074f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074fa:	431a      	orrs	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e101      	b.n	8007716 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007516:	e065      	b.n	80075e4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800751e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d040      	beq.n	80075a8 <HAL_SD_WriteBlocks+0x1a0>
 8007526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d03d      	beq.n	80075a8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800752c:	2300      	movs	r3, #0
 800752e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007530:	e037      	b.n	80075a2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800753a:	3301      	adds	r3, #1
 800753c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800753e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007540:	3b01      	subs	r3, #1
 8007542:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	021a      	lsls	r2, r3, #8
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	4313      	orrs	r3, r2
 800754e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007552:	3301      	adds	r3, #1
 8007554:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007558:	3b01      	subs	r3, #1
 800755a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800755c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	041a      	lsls	r2, r3, #16
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	4313      	orrs	r3, r2
 8007566:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800756a:	3301      	adds	r3, #1
 800756c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800756e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007570:	3b01      	subs	r3, #1
 8007572:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	061a      	lsls	r2, r3, #24
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	4313      	orrs	r3, r2
 800757e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007582:	3301      	adds	r3, #1
 8007584:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007588:	3b01      	subs	r3, #1
 800758a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f107 0214 	add.w	r2, r7, #20
 8007594:	4611      	mov	r1, r2
 8007596:	4618      	mov	r0, r3
 8007598:	f003 fe06 	bl	800b1a8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800759c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800759e:	3301      	adds	r3, #1
 80075a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80075a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075a4:	2b07      	cmp	r3, #7
 80075a6:	d9c4      	bls.n	8007532 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80075a8:	f7fd fede 	bl	8005368 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d902      	bls.n	80075be <HAL_SD_WriteBlocks+0x1b6>
 80075b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d112      	bne.n	80075e4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a57      	ldr	r2, [pc, #348]	@ (8007720 <HAL_SD_WriteBlocks+0x318>)
 80075c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075cc:	431a      	orrs	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e098      	b.n	8007716 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075ea:	f240 331a 	movw	r3, #794	@ 0x31a
 80075ee:	4013      	ands	r3, r2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d091      	beq.n	8007518 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d022      	beq.n	8007648 <HAL_SD_WriteBlocks+0x240>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d91f      	bls.n	8007648 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800760c:	2b03      	cmp	r3, #3
 800760e:	d01b      	beq.n	8007648 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4618      	mov	r0, r3
 8007616:	f003 ff15 	bl	800b444 <SDMMC_CmdStopTransfer>
 800761a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800761c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800761e:	2b00      	cmp	r3, #0
 8007620:	d012      	beq.n	8007648 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a3e      	ldr	r2, [pc, #248]	@ (8007720 <HAL_SD_WriteBlocks+0x318>)
 8007628:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800762e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007630:	431a      	orrs	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e066      	b.n	8007716 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800764e:	f003 0308 	and.w	r3, r3, #8
 8007652:	2b00      	cmp	r3, #0
 8007654:	d106      	bne.n	8007664 <HAL_SD_WriteBlocks+0x25c>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800765c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007660:	2b00      	cmp	r3, #0
 8007662:	d012      	beq.n	800768a <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a2d      	ldr	r2, [pc, #180]	@ (8007720 <HAL_SD_WriteBlocks+0x318>)
 800766a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007670:	f043 0208 	orr.w	r2, r3, #8
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e045      	b.n	8007716 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d012      	beq.n	80076be <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a20      	ldr	r2, [pc, #128]	@ (8007720 <HAL_SD_WriteBlocks+0x318>)
 800769e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a4:	f043 0202 	orr.w	r2, r3, #2
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e02b      	b.n	8007716 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c4:	f003 0310 	and.w	r3, r3, #16
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d012      	beq.n	80076f2 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a13      	ldr	r2, [pc, #76]	@ (8007720 <HAL_SD_WriteBlocks+0x318>)
 80076d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d8:	f043 0210 	orr.w	r2, r3, #16
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e011      	b.n	8007716 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80076fa:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	e006      	b.n	8007716 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
  }
}
 8007716:	4618      	mov	r0, r3
 8007718:	3748      	adds	r7, #72	@ 0x48
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	004005ff 	.word	0x004005ff

08007724 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007732:	0f9b      	lsrs	r3, r3, #30
 8007734:	b2da      	uxtb	r2, r3
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800773e:	0e9b      	lsrs	r3, r3, #26
 8007740:	b2db      	uxtb	r3, r3
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	b2da      	uxtb	r2, r3
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007750:	0e1b      	lsrs	r3, r3, #24
 8007752:	b2db      	uxtb	r3, r3
 8007754:	f003 0303 	and.w	r3, r3, #3
 8007758:	b2da      	uxtb	r2, r3
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007762:	0c1b      	lsrs	r3, r3, #16
 8007764:	b2da      	uxtb	r2, r3
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800776e:	0a1b      	lsrs	r3, r3, #8
 8007770:	b2da      	uxtb	r2, r3
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800777a:	b2da      	uxtb	r2, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007784:	0d1b      	lsrs	r3, r3, #20
 8007786:	b29a      	uxth	r2, r3
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007790:	0c1b      	lsrs	r3, r3, #16
 8007792:	b2db      	uxtb	r3, r3
 8007794:	f003 030f 	and.w	r3, r3, #15
 8007798:	b2da      	uxtb	r2, r3
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077a2:	0bdb      	lsrs	r3, r3, #15
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	f003 0301 	and.w	r3, r3, #1
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077b4:	0b9b      	lsrs	r3, r3, #14
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077c6:	0b5b      	lsrs	r3, r3, #13
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077d8:	0b1b      	lsrs	r3, r3, #12
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2200      	movs	r2, #0
 80077ea:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d163      	bne.n	80078bc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077f8:	009a      	lsls	r2, r3, #2
 80077fa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80077fe:	4013      	ands	r3, r2
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8007804:	0f92      	lsrs	r2, r2, #30
 8007806:	431a      	orrs	r2, r3
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007810:	0edb      	lsrs	r3, r3, #27
 8007812:	b2db      	uxtb	r3, r3
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	b2da      	uxtb	r2, r3
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007822:	0e1b      	lsrs	r3, r3, #24
 8007824:	b2db      	uxtb	r3, r3
 8007826:	f003 0307 	and.w	r3, r3, #7
 800782a:	b2da      	uxtb	r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007834:	0d5b      	lsrs	r3, r3, #21
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f003 0307 	and.w	r3, r3, #7
 800783c:	b2da      	uxtb	r2, r3
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007846:	0c9b      	lsrs	r3, r3, #18
 8007848:	b2db      	uxtb	r3, r3
 800784a:	f003 0307 	and.w	r3, r3, #7
 800784e:	b2da      	uxtb	r2, r3
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007858:	0bdb      	lsrs	r3, r3, #15
 800785a:	b2db      	uxtb	r3, r3
 800785c:	f003 0307 	and.w	r3, r3, #7
 8007860:	b2da      	uxtb	r2, r3
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	7e1b      	ldrb	r3, [r3, #24]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	3302      	adds	r3, #2
 800787c:	2201      	movs	r2, #1
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007886:	fb03 f202 	mul.w	r2, r3, r2
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	7a1b      	ldrb	r3, [r3, #8]
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	2201      	movs	r2, #1
 800789a:	409a      	lsls	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80078a8:	0a52      	lsrs	r2, r2, #9
 80078aa:	fb03 f202 	mul.w	r2, r3, r2
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078b8:	661a      	str	r2, [r3, #96]	@ 0x60
 80078ba:	e031      	b.n	8007920 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d11d      	bne.n	8007900 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80078c8:	041b      	lsls	r3, r3, #16
 80078ca:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078d2:	0c1b      	lsrs	r3, r3, #16
 80078d4:	431a      	orrs	r2, r3
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	3301      	adds	r3, #1
 80078e0:	029a      	lsls	r2, r3, #10
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078f4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	661a      	str	r2, [r3, #96]	@ 0x60
 80078fe:	e00f      	b.n	8007920 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a58      	ldr	r2, [pc, #352]	@ (8007a68 <HAL_SD_GetCardCSD+0x344>)
 8007906:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e09d      	b.n	8007a5c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007924:	0b9b      	lsrs	r3, r3, #14
 8007926:	b2db      	uxtb	r3, r3
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	b2da      	uxtb	r2, r3
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007936:	09db      	lsrs	r3, r3, #7
 8007938:	b2db      	uxtb	r3, r3
 800793a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800793e:	b2da      	uxtb	r2, r3
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007948:	b2db      	uxtb	r3, r3
 800794a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800794e:	b2da      	uxtb	r2, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007958:	0fdb      	lsrs	r3, r3, #31
 800795a:	b2da      	uxtb	r2, r3
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007964:	0f5b      	lsrs	r3, r3, #29
 8007966:	b2db      	uxtb	r3, r3
 8007968:	f003 0303 	and.w	r3, r3, #3
 800796c:	b2da      	uxtb	r2, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007976:	0e9b      	lsrs	r3, r3, #26
 8007978:	b2db      	uxtb	r3, r3
 800797a:	f003 0307 	and.w	r3, r3, #7
 800797e:	b2da      	uxtb	r2, r3
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007988:	0d9b      	lsrs	r3, r3, #22
 800798a:	b2db      	uxtb	r3, r3
 800798c:	f003 030f 	and.w	r3, r3, #15
 8007990:	b2da      	uxtb	r2, r3
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800799a:	0d5b      	lsrs	r3, r3, #21
 800799c:	b2db      	uxtb	r3, r3
 800799e:	f003 0301 	and.w	r3, r3, #1
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079b6:	0c1b      	lsrs	r3, r3, #16
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ca:	0bdb      	lsrs	r3, r3, #15
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	b2da      	uxtb	r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079de:	0b9b      	lsrs	r3, r3, #14
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079f2:	0b5b      	lsrs	r3, r3, #13
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a06:	0b1b      	lsrs	r3, r3, #12
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a1a:	0a9b      	lsrs	r3, r3, #10
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a2e:	0a1b      	lsrs	r3, r3, #8
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a42:	085b      	lsrs	r3, r3, #1
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	004005ff 	.word	0x004005ff

08007a6c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007ad0:	f107 030c 	add.w	r3, r7, #12
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f970 	bl	8007dbc <SD_SendStatus>
 8007adc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	431a      	orrs	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	0a5b      	lsrs	r3, r3, #9
 8007af4:	f003 030f 	and.w	r3, r3, #15
 8007af8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007afa:	693b      	ldr	r3, [r7, #16]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007b04:	b5b0      	push	{r4, r5, r7, lr}
 8007b06:	b094      	sub	sp, #80	@ 0x50
 8007b08:	af04      	add	r7, sp, #16
 8007b0a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f003 fb66 	bl	800b1e6 <SDIO_GetPowerState>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d102      	bne.n	8007b26 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b20:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8007b24:	e0b8      	b.n	8007c98 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d02f      	beq.n	8007b8e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f003 fd4d 	bl	800b5d2 <SDMMC_CmdSendCID>
 8007b38:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <SD_InitCard+0x40>
    {
      return errorstate;
 8007b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b42:	e0a9      	b.n	8007c98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f003 fb90 	bl	800b270 <SDIO_GetResponse>
 8007b50:	4602      	mov	r2, r0
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2104      	movs	r1, #4
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f003 fb87 	bl	800b270 <SDIO_GetResponse>
 8007b62:	4602      	mov	r2, r0
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2108      	movs	r1, #8
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f003 fb7e 	bl	800b270 <SDIO_GetResponse>
 8007b74:	4602      	mov	r2, r0
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	210c      	movs	r1, #12
 8007b80:	4618      	mov	r0, r3
 8007b82:	f003 fb75 	bl	800b270 <SDIO_GetResponse>
 8007b86:	4602      	mov	r2, r0
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d00d      	beq.n	8007bb2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f107 020e 	add.w	r2, r7, #14
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f003 fd53 	bl	800b64c <SDMMC_CmdSetRelAdd>
 8007ba6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <SD_InitCard+0xae>
    {
      return errorstate;
 8007bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bb0:	e072      	b.n	8007c98 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d036      	beq.n	8007c28 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007bba:	89fb      	ldrh	r3, [r7, #14]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bca:	041b      	lsls	r3, r3, #16
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	f003 fd1d 	bl	800b60e <SDMMC_CmdSendCSD>
 8007bd4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bde:	e05b      	b.n	8007c98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2100      	movs	r1, #0
 8007be6:	4618      	mov	r0, r3
 8007be8:	f003 fb42 	bl	800b270 <SDIO_GetResponse>
 8007bec:	4602      	mov	r2, r0
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2104      	movs	r1, #4
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f003 fb39 	bl	800b270 <SDIO_GetResponse>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2108      	movs	r1, #8
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f003 fb30 	bl	800b270 <SDIO_GetResponse>
 8007c10:	4602      	mov	r2, r0
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	210c      	movs	r1, #12
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f003 fb27 	bl	800b270 <SDIO_GetResponse>
 8007c22:	4602      	mov	r2, r0
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2104      	movs	r1, #4
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f003 fb1e 	bl	800b270 <SDIO_GetResponse>
 8007c34:	4603      	mov	r3, r0
 8007c36:	0d1a      	lsrs	r2, r3, #20
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007c3c:	f107 0310 	add.w	r3, r7, #16
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff fd6e 	bl	8007724 <HAL_SD_GetCardCSD>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c4e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007c52:	e021      	b.n	8007c98 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6819      	ldr	r1, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c5c:	041b      	lsls	r3, r3, #16
 8007c5e:	2200      	movs	r2, #0
 8007c60:	461c      	mov	r4, r3
 8007c62:	4615      	mov	r5, r2
 8007c64:	4622      	mov	r2, r4
 8007c66:	462b      	mov	r3, r5
 8007c68:	4608      	mov	r0, r1
 8007c6a:	f003 fc0d 	bl	800b488 <SDMMC_CmdSelDesel>
 8007c6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <SD_InitCard+0x176>
  {
    return errorstate;
 8007c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c78:	e00e      	b.n	8007c98 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681d      	ldr	r5, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	466c      	mov	r4, sp
 8007c82:	f103 0210 	add.w	r2, r3, #16
 8007c86:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c90:	4628      	mov	r0, r5
 8007c92:	f003 fa51 	bl	800b138 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3740      	adds	r7, #64	@ 0x40
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bdb0      	pop	{r4, r5, r7, pc}

08007ca0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	617b      	str	r3, [r7, #20]
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f003 fc08 	bl	800b4ce <SDMMC_CmdGoIdleState>
 8007cbe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <SD_PowerON+0x2a>
  {
    return errorstate;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	e072      	b.n	8007db0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f003 fc1b 	bl	800b50a <SDMMC_CmdOperCond>
 8007cd4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00d      	beq.n	8007cf8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f003 fbf1 	bl	800b4ce <SDMMC_CmdGoIdleState>
 8007cec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d004      	beq.n	8007cfe <SD_PowerON+0x5e>
    {
      return errorstate;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	e05b      	b.n	8007db0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d137      	bne.n	8007d76 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f003 fc1b 	bl	800b548 <SDMMC_CmdAppCommand>
 8007d12:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d02d      	beq.n	8007d76 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d1a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d1e:	e047      	b.n	8007db0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2100      	movs	r1, #0
 8007d26:	4618      	mov	r0, r3
 8007d28:	f003 fc0e 	bl	800b548 <SDMMC_CmdAppCommand>
 8007d2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <SD_PowerON+0x98>
    {
      return errorstate;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	e03b      	b.n	8007db0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	491e      	ldr	r1, [pc, #120]	@ (8007db8 <SD_PowerON+0x118>)
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f003 fc24 	bl	800b58c <SDMMC_CmdAppOperCommand>
 8007d44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d4c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d50:	e02e      	b.n	8007db0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2100      	movs	r1, #0
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f003 fa89 	bl	800b270 <SDIO_GetResponse>
 8007d5e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	0fdb      	lsrs	r3, r3, #31
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d101      	bne.n	8007d6c <SD_PowerON+0xcc>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e000      	b.n	8007d6e <SD_PowerON+0xce>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	613b      	str	r3, [r7, #16]

    count++;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	3301      	adds	r3, #1
 8007d74:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d802      	bhi.n	8007d86 <SD_PowerON+0xe6>
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0cc      	beq.n	8007d20 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d902      	bls.n	8007d96 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007d90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d94:	e00c      	b.n	8007db0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	645a      	str	r2, [r3, #68]	@ 0x44
 8007da6:	e002      	b.n	8007dae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	c1100000 	.word	0xc1100000

08007dbc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d102      	bne.n	8007dd2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007dcc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007dd0:	e018      	b.n	8007e04 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dda:	041b      	lsls	r3, r3, #16
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4610      	mov	r0, r2
 8007de0:	f003 fc55 	bl	800b68e <SDMMC_CmdSendStatus>
 8007de4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	e009      	b.n	8007e04 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2100      	movs	r1, #0
 8007df6:	4618      	mov	r0, r3
 8007df8:	f003 fa3a 	bl	800b270 <SDIO_GetResponse>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e07b      	b.n	8007f16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d108      	bne.n	8007e38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e2e:	d009      	beq.n	8007e44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	61da      	str	r2, [r3, #28]
 8007e36:	e005      	b.n	8007e44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d106      	bne.n	8007e64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7fc ffae 	bl	8004dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e96:	431a      	orrs	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f003 0302 	and.w	r3, r3, #2
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ec8:	ea42 0103 	orr.w	r1, r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	0c1b      	lsrs	r3, r3, #16
 8007ee2:	f003 0104 	and.w	r1, r3, #4
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eea:	f003 0210 	and.w	r2, r3, #16
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69da      	ldr	r2, [r3, #28]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b088      	sub	sp, #32
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	603b      	str	r3, [r7, #0]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f2e:	f7fd fa1b 	bl	8005368 <HAL_GetTick>
 8007f32:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d001      	beq.n	8007f48 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007f44:	2302      	movs	r3, #2
 8007f46:	e12a      	b.n	800819e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <HAL_SPI_Transmit+0x36>
 8007f4e:	88fb      	ldrh	r3, [r7, #6]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e122      	b.n	800819e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d101      	bne.n	8007f66 <HAL_SPI_Transmit+0x48>
 8007f62:	2302      	movs	r3, #2
 8007f64:	e11b      	b.n	800819e <HAL_SPI_Transmit+0x280>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2203      	movs	r2, #3
 8007f72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	88fa      	ldrh	r2, [r7, #6]
 8007f86:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	88fa      	ldrh	r2, [r7, #6]
 8007f8c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fb4:	d10f      	bne.n	8007fd6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe0:	2b40      	cmp	r3, #64	@ 0x40
 8007fe2:	d007      	beq.n	8007ff4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ff2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ffc:	d152      	bne.n	80080a4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <HAL_SPI_Transmit+0xee>
 8008006:	8b7b      	ldrh	r3, [r7, #26]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d145      	bne.n	8008098 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008010:	881a      	ldrh	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800801c:	1c9a      	adds	r2, r3, #2
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008026:	b29b      	uxth	r3, r3
 8008028:	3b01      	subs	r3, #1
 800802a:	b29a      	uxth	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008030:	e032      	b.n	8008098 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b02      	cmp	r3, #2
 800803e:	d112      	bne.n	8008066 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008044:	881a      	ldrh	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008050:	1c9a      	adds	r2, r3, #2
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800805a:	b29b      	uxth	r3, r3
 800805c:	3b01      	subs	r3, #1
 800805e:	b29a      	uxth	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008064:	e018      	b.n	8008098 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008066:	f7fd f97f 	bl	8005368 <HAL_GetTick>
 800806a:	4602      	mov	r2, r0
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	429a      	cmp	r2, r3
 8008074:	d803      	bhi.n	800807e <HAL_SPI_Transmit+0x160>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807c:	d102      	bne.n	8008084 <HAL_SPI_Transmit+0x166>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d109      	bne.n	8008098 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e082      	b.n	800819e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800809c:	b29b      	uxth	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1c7      	bne.n	8008032 <HAL_SPI_Transmit+0x114>
 80080a2:	e053      	b.n	800814c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <HAL_SPI_Transmit+0x194>
 80080ac:	8b7b      	ldrh	r3, [r7, #26]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d147      	bne.n	8008142 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	330c      	adds	r3, #12
 80080bc:	7812      	ldrb	r2, [r2, #0]
 80080be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	3b01      	subs	r3, #1
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080d8:	e033      	b.n	8008142 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d113      	bne.n	8008110 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	330c      	adds	r3, #12
 80080f2:	7812      	ldrb	r2, [r2, #0]
 80080f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008104:	b29b      	uxth	r3, r3
 8008106:	3b01      	subs	r3, #1
 8008108:	b29a      	uxth	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800810e:	e018      	b.n	8008142 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008110:	f7fd f92a 	bl	8005368 <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	429a      	cmp	r2, r3
 800811e:	d803      	bhi.n	8008128 <HAL_SPI_Transmit+0x20a>
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008126:	d102      	bne.n	800812e <HAL_SPI_Transmit+0x210>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d109      	bne.n	8008142 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e02d      	b.n	800819e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008146:	b29b      	uxth	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1c6      	bne.n	80080da <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800814c:	69fa      	ldr	r2, [r7, #28]
 800814e:	6839      	ldr	r1, [r7, #0]
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f001 faef 	bl	8009734 <SPI_EndRxTxTransaction>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2220      	movs	r2, #32
 8008160:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10a      	bne.n	8008180 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800816a:	2300      	movs	r3, #0
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	617b      	str	r3, [r7, #20]
 800817e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e000      	b.n	800819e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800819c:	2300      	movs	r3, #0
  }
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3720      	adds	r7, #32
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b088      	sub	sp, #32
 80081aa:	af02      	add	r7, sp, #8
 80081ac:	60f8      	str	r0, [r7, #12]
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	603b      	str	r3, [r7, #0]
 80081b2:	4613      	mov	r3, r2
 80081b4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d001      	beq.n	80081c6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80081c2:	2302      	movs	r3, #2
 80081c4:	e104      	b.n	80083d0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081ce:	d112      	bne.n	80081f6 <HAL_SPI_Receive+0x50>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10e      	bne.n	80081f6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2204      	movs	r2, #4
 80081dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80081e0:	88fa      	ldrh	r2, [r7, #6]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	4613      	mov	r3, r2
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	68b9      	ldr	r1, [r7, #8]
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 f8f3 	bl	80083d8 <HAL_SPI_TransmitReceive>
 80081f2:	4603      	mov	r3, r0
 80081f4:	e0ec      	b.n	80083d0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081f6:	f7fd f8b7 	bl	8005368 <HAL_GetTick>
 80081fa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d002      	beq.n	8008208 <HAL_SPI_Receive+0x62>
 8008202:	88fb      	ldrh	r3, [r7, #6]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e0e1      	b.n	80083d0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008212:	2b01      	cmp	r3, #1
 8008214:	d101      	bne.n	800821a <HAL_SPI_Receive+0x74>
 8008216:	2302      	movs	r3, #2
 8008218:	e0da      	b.n	80083d0 <HAL_SPI_Receive+0x22a>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2204      	movs	r2, #4
 8008226:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	88fa      	ldrh	r2, [r7, #6]
 800823a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	88fa      	ldrh	r2, [r7, #6]
 8008240:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008268:	d10f      	bne.n	800828a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008278:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008288:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008294:	2b40      	cmp	r3, #64	@ 0x40
 8008296:	d007      	beq.n	80082a8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d170      	bne.n	8008392 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80082b0:	e035      	b.n	800831e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d115      	bne.n	80082ec <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f103 020c 	add.w	r2, r3, #12
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082cc:	7812      	ldrb	r2, [r2, #0]
 80082ce:	b2d2      	uxtb	r2, r2
 80082d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	3b01      	subs	r3, #1
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80082ea:	e018      	b.n	800831e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082ec:	f7fd f83c 	bl	8005368 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d803      	bhi.n	8008304 <HAL_SPI_Receive+0x15e>
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008302:	d102      	bne.n	800830a <HAL_SPI_Receive+0x164>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d109      	bne.n	800831e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e058      	b.n	80083d0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008322:	b29b      	uxth	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1c4      	bne.n	80082b2 <HAL_SPI_Receive+0x10c>
 8008328:	e038      	b.n	800839c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f003 0301 	and.w	r3, r3, #1
 8008334:	2b01      	cmp	r3, #1
 8008336:	d113      	bne.n	8008360 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68da      	ldr	r2, [r3, #12]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008342:	b292      	uxth	r2, r2
 8008344:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834a:	1c9a      	adds	r2, r3, #2
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800835e:	e018      	b.n	8008392 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008360:	f7fd f802 	bl	8005368 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	d803      	bhi.n	8008378 <HAL_SPI_Receive+0x1d2>
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008376:	d102      	bne.n	800837e <HAL_SPI_Receive+0x1d8>
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d109      	bne.n	8008392 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e01e      	b.n	80083d0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008396:	b29b      	uxth	r3, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1c6      	bne.n	800832a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f001 f961 	bl	8009668 <SPI_EndRxTransaction>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d002      	beq.n	80083b2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2220      	movs	r2, #32
 80083b0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d001      	beq.n	80083ce <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e000      	b.n	80083d0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80083ce:	2300      	movs	r3, #0
  }
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08a      	sub	sp, #40	@ 0x28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80083e6:	2301      	movs	r3, #1
 80083e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083ea:	f7fc ffbd 	bl	8005368 <HAL_GetTick>
 80083ee:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083f6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80083fe:	887b      	ldrh	r3, [r7, #2]
 8008400:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008402:	7ffb      	ldrb	r3, [r7, #31]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d00c      	beq.n	8008422 <HAL_SPI_TransmitReceive+0x4a>
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800840e:	d106      	bne.n	800841e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d102      	bne.n	800841e <HAL_SPI_TransmitReceive+0x46>
 8008418:	7ffb      	ldrb	r3, [r7, #31]
 800841a:	2b04      	cmp	r3, #4
 800841c:	d001      	beq.n	8008422 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800841e:	2302      	movs	r3, #2
 8008420:	e17f      	b.n	8008722 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <HAL_SPI_TransmitReceive+0x5c>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <HAL_SPI_TransmitReceive+0x5c>
 800842e:	887b      	ldrh	r3, [r7, #2]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d101      	bne.n	8008438 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e174      	b.n	8008722 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800843e:	2b01      	cmp	r3, #1
 8008440:	d101      	bne.n	8008446 <HAL_SPI_TransmitReceive+0x6e>
 8008442:	2302      	movs	r3, #2
 8008444:	e16d      	b.n	8008722 <HAL_SPI_TransmitReceive+0x34a>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b04      	cmp	r3, #4
 8008458:	d003      	beq.n	8008462 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2205      	movs	r2, #5
 800845e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	887a      	ldrh	r2, [r7, #2]
 8008472:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	887a      	ldrh	r2, [r7, #2]
 8008478:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	887a      	ldrh	r2, [r7, #2]
 8008484:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	887a      	ldrh	r2, [r7, #2]
 800848a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a2:	2b40      	cmp	r3, #64	@ 0x40
 80084a4:	d007      	beq.n	80084b6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084be:	d17e      	bne.n	80085be <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <HAL_SPI_TransmitReceive+0xf6>
 80084c8:	8afb      	ldrh	r3, [r7, #22]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d16c      	bne.n	80085a8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084d2:	881a      	ldrh	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084de:	1c9a      	adds	r2, r3, #2
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	3b01      	subs	r3, #1
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084f2:	e059      	b.n	80085a8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d11b      	bne.n	800853a <HAL_SPI_TransmitReceive+0x162>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008506:	b29b      	uxth	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	d016      	beq.n	800853a <HAL_SPI_TransmitReceive+0x162>
 800850c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850e:	2b01      	cmp	r3, #1
 8008510:	d113      	bne.n	800853a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008516:	881a      	ldrh	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008522:	1c9a      	adds	r2, r3, #2
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b01      	cmp	r3, #1
 8008546:	d119      	bne.n	800857c <HAL_SPI_TransmitReceive+0x1a4>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800854c:	b29b      	uxth	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d014      	beq.n	800857c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855c:	b292      	uxth	r2, r2
 800855e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008564:	1c9a      	adds	r2, r3, #2
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800856e:	b29b      	uxth	r3, r3
 8008570:	3b01      	subs	r3, #1
 8008572:	b29a      	uxth	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008578:	2301      	movs	r3, #1
 800857a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800857c:	f7fc fef4 	bl	8005368 <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008588:	429a      	cmp	r2, r3
 800858a:	d80d      	bhi.n	80085a8 <HAL_SPI_TransmitReceive+0x1d0>
 800858c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008592:	d009      	beq.n	80085a8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80085a4:	2303      	movs	r3, #3
 80085a6:	e0bc      	b.n	8008722 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1a0      	bne.n	80084f4 <HAL_SPI_TransmitReceive+0x11c>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d19b      	bne.n	80084f4 <HAL_SPI_TransmitReceive+0x11c>
 80085bc:	e082      	b.n	80086c4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d002      	beq.n	80085cc <HAL_SPI_TransmitReceive+0x1f4>
 80085c6:	8afb      	ldrh	r3, [r7, #22]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d171      	bne.n	80086b0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	330c      	adds	r3, #12
 80085d6:	7812      	ldrb	r2, [r2, #0]
 80085d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	3b01      	subs	r3, #1
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085f2:	e05d      	b.n	80086b0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f003 0302 	and.w	r3, r3, #2
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d11c      	bne.n	800863c <HAL_SPI_TransmitReceive+0x264>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008606:	b29b      	uxth	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	d017      	beq.n	800863c <HAL_SPI_TransmitReceive+0x264>
 800860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860e:	2b01      	cmp	r3, #1
 8008610:	d114      	bne.n	800863c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	330c      	adds	r3, #12
 800861c:	7812      	ldrb	r2, [r2, #0]
 800861e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800862e:	b29b      	uxth	r3, r3
 8008630:	3b01      	subs	r3, #1
 8008632:	b29a      	uxth	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b01      	cmp	r3, #1
 8008648:	d119      	bne.n	800867e <HAL_SPI_TransmitReceive+0x2a6>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800864e:	b29b      	uxth	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d014      	beq.n	800867e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68da      	ldr	r2, [r3, #12]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800865e:	b2d2      	uxtb	r2, r2
 8008660:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008666:	1c5a      	adds	r2, r3, #1
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008670:	b29b      	uxth	r3, r3
 8008672:	3b01      	subs	r3, #1
 8008674:	b29a      	uxth	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800867a:	2301      	movs	r3, #1
 800867c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800867e:	f7fc fe73 	bl	8005368 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800868a:	429a      	cmp	r2, r3
 800868c:	d803      	bhi.n	8008696 <HAL_SPI_TransmitReceive+0x2be>
 800868e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008694:	d102      	bne.n	800869c <HAL_SPI_TransmitReceive+0x2c4>
 8008696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008698:	2b00      	cmp	r3, #0
 800869a:	d109      	bne.n	80086b0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e038      	b.n	8008722 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d19c      	bne.n	80085f4 <HAL_SPI_TransmitReceive+0x21c>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086be:	b29b      	uxth	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d197      	bne.n	80085f4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086c4:	6a3a      	ldr	r2, [r7, #32]
 80086c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f001 f833 	bl	8009734 <SPI_EndRxTxTransaction>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d008      	beq.n	80086e6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2220      	movs	r2, #32
 80086d8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e01d      	b.n	8008722 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10a      	bne.n	8008704 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086ee:	2300      	movs	r3, #0
 80086f0:	613b      	str	r3, [r7, #16]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	613b      	str	r3, [r7, #16]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e000      	b.n	8008722 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008720:	2300      	movs	r3, #0
  }
}
 8008722:	4618      	mov	r0, r3
 8008724:	3728      	adds	r7, #40	@ 0x28
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	4613      	mov	r3, r2
 8008738:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b01      	cmp	r3, #1
 8008744:	d001      	beq.n	800874a <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8008746:	2302      	movs	r3, #2
 8008748:	e07f      	b.n	800884a <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d110      	bne.n	8008774 <HAL_SPI_Receive_IT+0x48>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800875a:	d10b      	bne.n	8008774 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2204      	movs	r2, #4
 8008760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8008764:	88fb      	ldrh	r3, [r7, #6]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	68b9      	ldr	r1, [r7, #8]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f000 f876 	bl	800885c <HAL_SPI_TransmitReceive_IT>
 8008770:	4603      	mov	r3, r0
 8008772:	e06a      	b.n	800884a <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <HAL_SPI_Receive_IT+0x54>
 800877a:	88fb      	ldrh	r3, [r7, #6]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e062      	b.n	800884a <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800878a:	2b01      	cmp	r3, #1
 800878c:	d101      	bne.n	8008792 <HAL_SPI_Receive_IT+0x66>
 800878e:	2302      	movs	r3, #2
 8008790:	e05b      	b.n	800884a <HAL_SPI_Receive_IT+0x11e>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2204      	movs	r2, #4
 800879e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	88fa      	ldrh	r2, [r7, #6]
 80087b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	88fa      	ldrh	r2, [r7, #6]
 80087b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008854 <HAL_SPI_Receive_IT+0x128>)
 80087de:	641a      	str	r2, [r3, #64]	@ 0x40
 80087e0:	e002      	b.n	80087e8 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	4a1c      	ldr	r2, [pc, #112]	@ (8008858 <HAL_SPI_Receive_IT+0x12c>)
 80087e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087f0:	d10f      	bne.n	8008812 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008800:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008810:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800881c:	2b40      	cmp	r3, #64	@ 0x40
 800881e:	d007      	beq.n	8008830 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800882e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008846:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	08009511 	.word	0x08009511
 8008858:	080094c7 	.word	0x080094c7

0800885c <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 800885c:	b480      	push	{r7}
 800885e:	b087      	sub	sp, #28
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008870:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008878:	7dfb      	ldrb	r3, [r7, #23]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d00c      	beq.n	8008898 <HAL_SPI_TransmitReceive_IT+0x3c>
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008884:	d106      	bne.n	8008894 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <HAL_SPI_TransmitReceive_IT+0x38>
 800888e:	7dfb      	ldrb	r3, [r7, #23]
 8008890:	2b04      	cmp	r3, #4
 8008892:	d001      	beq.n	8008898 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_BUSY;
 8008894:	2302      	movs	r3, #2
 8008896:	e061      	b.n	800895c <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d005      	beq.n	80088aa <HAL_SPI_TransmitReceive_IT+0x4e>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <HAL_SPI_TransmitReceive_IT+0x4e>
 80088a4:	887b      	ldrh	r3, [r7, #2]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e056      	b.n	800895c <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d101      	bne.n	80088bc <HAL_SPI_TransmitReceive_IT+0x60>
 80088b8:	2302      	movs	r3, #2
 80088ba:	e04f      	b.n	800895c <HAL_SPI_TransmitReceive_IT+0x100>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b04      	cmp	r3, #4
 80088ce:	d003      	beq.n	80088d8 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2205      	movs	r2, #5
 80088d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	887a      	ldrh	r2, [r7, #2]
 80088e8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	887a      	ldrh	r2, [r7, #2]
 80088ee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	887a      	ldrh	r2, [r7, #2]
 80088fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	887a      	ldrh	r2, [r7, #2]
 8008900:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d006      	beq.n	8008918 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4a16      	ldr	r2, [pc, #88]	@ (8008968 <HAL_SPI_TransmitReceive_IT+0x10c>)
 800890e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4a16      	ldr	r2, [pc, #88]	@ (800896c <HAL_SPI_TransmitReceive_IT+0x110>)
 8008914:	645a      	str	r2, [r3, #68]	@ 0x44
 8008916:	e005      	b.n	8008924 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4a15      	ldr	r2, [pc, #84]	@ (8008970 <HAL_SPI_TransmitReceive_IT+0x114>)
 800891c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4a14      	ldr	r2, [pc, #80]	@ (8008974 <HAL_SPI_TransmitReceive_IT+0x118>)
 8008922:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800892e:	2b40      	cmp	r3, #64	@ 0x40
 8008930:	d007      	beq.n	8008942 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008940:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8008958:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	371c      	adds	r7, #28
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	08009409 	.word	0x08009409
 800896c:	08009469 	.word	0x08009469
 8008970:	08009345 	.word	0x08009345
 8008974:	080093a9 	.word	0x080093a9

08008978 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b01      	cmp	r3, #1
 8008990:	d001      	beq.n	8008996 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008992:	2302      	movs	r3, #2
 8008994:	e097      	b.n	8008ac6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <HAL_SPI_Transmit_DMA+0x2a>
 800899c:	88fb      	ldrh	r3, [r7, #6]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e08f      	b.n	8008ac6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d101      	bne.n	80089b4 <HAL_SPI_Transmit_DMA+0x3c>
 80089b0:	2302      	movs	r3, #2
 80089b2:	e088      	b.n	8008ac6 <HAL_SPI_Transmit_DMA+0x14e>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2203      	movs	r2, #3
 80089c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	88fa      	ldrh	r2, [r7, #6]
 80089d4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	88fa      	ldrh	r2, [r7, #6]
 80089da:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a02:	d10f      	bne.n	8008a24 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a28:	4a29      	ldr	r2, [pc, #164]	@ (8008ad0 <HAL_SPI_Transmit_DMA+0x158>)
 8008a2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a30:	4a28      	ldr	r2, [pc, #160]	@ (8008ad4 <HAL_SPI_Transmit_DMA+0x15c>)
 8008a32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a38:	4a27      	ldr	r2, [pc, #156]	@ (8008ad8 <HAL_SPI_Transmit_DMA+0x160>)
 8008a3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a40:	2200      	movs	r2, #0
 8008a42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	330c      	adds	r3, #12
 8008a54:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a5a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008a5c:	f7fd f89c 	bl	8005b98 <HAL_DMA_Start_IT>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00b      	beq.n	8008a7e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a6a:	f043 0210 	orr.w	r2, r3, #16
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e023      	b.n	8008ac6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a88:	2b40      	cmp	r3, #64	@ 0x40
 8008a8a:	d007      	beq.n	8008a9c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a9a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685a      	ldr	r2, [r3, #4]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f042 0220 	orr.w	r2, r2, #32
 8008ab2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0202 	orr.w	r2, r2, #2
 8008ac2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	08009289 	.word	0x08009289
 8008ad4:	080090a9 	.word	0x080090a9
 8008ad8:	080092dd 	.word	0x080092dd

08008adc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d001      	beq.n	8008afa <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008af6:	2302      	movs	r3, #2
 8008af8:	e0a9      	b.n	8008c4e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d110      	bne.n	8008b24 <HAL_SPI_Receive_DMA+0x48>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b0a:	d10b      	bne.n	8008b24 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2204      	movs	r2, #4
 8008b10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008b14:	88fb      	ldrh	r3, [r7, #6]
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	68b9      	ldr	r1, [r7, #8]
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 f8a2 	bl	8008c64 <HAL_SPI_TransmitReceive_DMA>
 8008b20:	4603      	mov	r3, r0
 8008b22:	e094      	b.n	8008c4e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <HAL_SPI_Receive_DMA+0x54>
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e08c      	b.n	8008c4e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d101      	bne.n	8008b42 <HAL_SPI_Receive_DMA+0x66>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	e085      	b.n	8008c4e <HAL_SPI_Receive_DMA+0x172>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2204      	movs	r2, #4
 8008b4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	88fa      	ldrh	r2, [r7, #6]
 8008b62:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	88fa      	ldrh	r2, [r7, #6]
 8008b68:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b8a:	d10f      	bne.n	8008bac <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008baa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bb0:	4a29      	ldr	r2, [pc, #164]	@ (8008c58 <HAL_SPI_Receive_DMA+0x17c>)
 8008bb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bb8:	4a28      	ldr	r2, [pc, #160]	@ (8008c5c <HAL_SPI_Receive_DMA+0x180>)
 8008bba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bc0:	4a27      	ldr	r2, [pc, #156]	@ (8008c60 <HAL_SPI_Receive_DMA+0x184>)
 8008bc2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bc8:	2200      	movs	r2, #0
 8008bca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	330c      	adds	r3, #12
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bdc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008be2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008be4:	f7fc ffd8 	bl	8005b98 <HAL_DMA_Start_IT>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00b      	beq.n	8008c06 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bf2:	f043 0210 	orr.w	r2, r3, #16
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e023      	b.n	8008c4e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c10:	2b40      	cmp	r3, #64	@ 0x40
 8008c12:	d007      	beq.n	8008c24 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c22:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f042 0220 	orr.w	r2, r2, #32
 8008c3a:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f042 0201 	orr.w	r2, r2, #1
 8008c4a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	080092a5 	.word	0x080092a5
 8008c5c:	08009151 	.word	0x08009151
 8008c60:	080092dd 	.word	0x080092dd

08008c64 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c78:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d00c      	beq.n	8008ca0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c8c:	d106      	bne.n	8008c9c <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d102      	bne.n	8008c9c <HAL_SPI_TransmitReceive_DMA+0x38>
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	2b04      	cmp	r3, #4
 8008c9a:	d001      	beq.n	8008ca0 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	e0cf      	b.n	8008e40 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d005      	beq.n	8008cb2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8008cac:	887b      	ldrh	r3, [r7, #2]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d101      	bne.n	8008cb6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e0c4      	b.n	8008e40 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d101      	bne.n	8008cc4 <HAL_SPI_TransmitReceive_DMA+0x60>
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	e0bd      	b.n	8008e40 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	d003      	beq.n	8008ce0 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2205      	movs	r2, #5
 8008cdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	887a      	ldrh	r2, [r7, #2]
 8008cf0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	887a      	ldrh	r2, [r7, #2]
 8008cf6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	887a      	ldrh	r2, [r7, #2]
 8008d02:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	887a      	ldrh	r2, [r7, #2]
 8008d08:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b04      	cmp	r3, #4
 8008d20:	d108      	bne.n	8008d34 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d26:	4a48      	ldr	r2, [pc, #288]	@ (8008e48 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8008d28:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d2e:	4a47      	ldr	r2, [pc, #284]	@ (8008e4c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8008d30:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008d32:	e007      	b.n	8008d44 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d38:	4a45      	ldr	r2, [pc, #276]	@ (8008e50 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8008d3a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d40:	4a44      	ldr	r2, [pc, #272]	@ (8008e54 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8008d42:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d48:	4a43      	ldr	r2, [pc, #268]	@ (8008e58 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8008d4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d50:	2200      	movs	r2, #0
 8008d52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	330c      	adds	r3, #12
 8008d5e:	4619      	mov	r1, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d64:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d6a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008d6c:	f7fc ff14 	bl	8005b98 <HAL_DMA_Start_IT>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00b      	beq.n	8008d8e <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d7a:	f043 0210 	orr.w	r2, r3, #16
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e058      	b.n	8008e40 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	685a      	ldr	r2, [r3, #4]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f042 0201 	orr.w	r2, r2, #1
 8008d9c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008da2:	2200      	movs	r2, #0
 8008da4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008daa:	2200      	movs	r2, #0
 8008dac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008db2:	2200      	movs	r2, #0
 8008db4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dba:	2200      	movs	r2, #0
 8008dbc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	330c      	adds	r3, #12
 8008dce:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008dd4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008dd6:	f7fc fedf 	bl	8005b98 <HAL_DMA_Start_IT>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00b      	beq.n	8008df8 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de4:	f043 0210 	orr.w	r2, r3, #16
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e023      	b.n	8008e40 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e02:	2b40      	cmp	r3, #64	@ 0x40
 8008e04:	d007      	beq.n	8008e16 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e14:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f042 0220 	orr.w	r2, r2, #32
 8008e2c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f042 0202 	orr.w	r2, r2, #2
 8008e3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	080092a5 	.word	0x080092a5
 8008e4c:	08009151 	.word	0x08009151
 8008e50:	080092c1 	.word	0x080092c1
 8008e54:	080091f9 	.word	0x080091f9
 8008e58:	080092dd 	.word	0x080092dd

08008e5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b088      	sub	sp, #32
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10e      	bne.n	8008e9c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d009      	beq.n	8008e9c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d004      	beq.n	8008e9c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	4798      	blx	r3
    return;
 8008e9a:	e0ce      	b.n	800903a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d009      	beq.n	8008eba <HAL_SPI_IRQHandler+0x5e>
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d004      	beq.n	8008eba <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	4798      	blx	r3
    return;
 8008eb8:	e0bf      	b.n	800903a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	f003 0320 	and.w	r3, r3, #32
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10a      	bne.n	8008eda <HAL_SPI_IRQHandler+0x7e>
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d105      	bne.n	8008eda <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 80b0 	beq.w	800903a <HAL_SPI_IRQHandler+0x1de>
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	f003 0320 	and.w	r3, r3, #32
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 80aa 	beq.w	800903a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d023      	beq.n	8008f38 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b03      	cmp	r3, #3
 8008efa:	d011      	beq.n	8008f20 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f00:	f043 0204 	orr.w	r2, r3, #4
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f08:	2300      	movs	r3, #0
 8008f0a:	617b      	str	r3, [r7, #20]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	617b      	str	r3, [r7, #20]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	617b      	str	r3, [r7, #20]
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	e00b      	b.n	8008f38 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f20:	2300      	movs	r3, #0
 8008f22:	613b      	str	r3, [r7, #16]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	613b      	str	r3, [r7, #16]
 8008f34:	693b      	ldr	r3, [r7, #16]
        return;
 8008f36:	e080      	b.n	800903a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	f003 0320 	and.w	r3, r3, #32
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d014      	beq.n	8008f6c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f46:	f043 0201 	orr.w	r2, r3, #1
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f68:	601a      	str	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00c      	beq.n	8008f90 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f7a:	f043 0208 	orr.w	r2, r3, #8
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f82:	2300      	movs	r3, #0
 8008f84:	60bb      	str	r3, [r7, #8]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	60bb      	str	r3, [r7, #8]
 8008f8e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d04f      	beq.n	8009038 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008fa6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	f003 0302 	and.w	r3, r3, #2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d104      	bne.n	8008fc4 <HAL_SPI_IRQHandler+0x168>
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d034      	beq.n	800902e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	685a      	ldr	r2, [r3, #4]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0203 	bic.w	r2, r2, #3
 8008fd2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d011      	beq.n	8009000 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fe0:	4a17      	ldr	r2, [pc, #92]	@ (8009040 <HAL_SPI_IRQHandler+0x1e4>)
 8008fe2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fc fe9d 	bl	8005d28 <HAL_DMA_Abort_IT>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d005      	beq.n	8009000 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009004:	2b00      	cmp	r3, #0
 8009006:	d016      	beq.n	8009036 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800900c:	4a0c      	ldr	r2, [pc, #48]	@ (8009040 <HAL_SPI_IRQHandler+0x1e4>)
 800900e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009014:	4618      	mov	r0, r3
 8009016:	f7fc fe87 	bl	8005d28 <HAL_DMA_Abort_IT>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00a      	beq.n	8009036 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009024:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800902c:	e003      	b.n	8009036 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f830 	bl	8009094 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009034:	e000      	b.n	8009038 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8009036:	bf00      	nop
    return;
 8009038:	bf00      	nop
  }
}
 800903a:	3720      	adds	r7, #32
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	0800931d 	.word	0x0800931d

08009044 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090b6:	f7fc f957 	bl	8005368 <HAL_GetTick>
 80090ba:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090ca:	d03b      	beq.n	8009144 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0220 	bic.w	r2, r2, #32
 80090da:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f022 0202 	bic.w	r2, r2, #2
 80090ea:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	2164      	movs	r1, #100	@ 0x64
 80090f0:	6978      	ldr	r0, [r7, #20]
 80090f2:	f000 fb1f 	bl	8009734 <SPI_EndRxTxTransaction>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009100:	f043 0220 	orr.w	r2, r3, #32
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	60fb      	str	r3, [r7, #12]
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2200      	movs	r2, #0
 800912a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800913c:	6978      	ldr	r0, [r7, #20]
 800913e:	f7ff ffa9 	bl	8009094 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009142:	e002      	b.n	800914a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009144:	6978      	ldr	r0, [r7, #20]
 8009146:	f7f9 fff7 	bl	8003138 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800914a:	3718      	adds	r7, #24
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800915c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800915e:	f7fc f903 	bl	8005368 <HAL_GetTick>
 8009162:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800916e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009172:	d03b      	beq.n	80091ec <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 0220 	bic.w	r2, r2, #32
 8009182:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d10d      	bne.n	80091a8 <SPI_DMAReceiveCplt+0x58>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009194:	d108      	bne.n	80091a8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 0203 	bic.w	r2, r2, #3
 80091a4:	605a      	str	r2, [r3, #4]
 80091a6:	e007      	b.n	80091b8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0201 	bic.w	r2, r2, #1
 80091b6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	2164      	movs	r1, #100	@ 0x64
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f000 fa53 	bl	8009668 <SPI_EndRxTransaction>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2220      	movs	r2, #32
 80091cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f7ff ff55 	bl	8009094 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80091ea:	e002      	b.n	80091f2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f7f9 ffb9 	bl	8003164 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009204:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009206:	f7fc f8af 	bl	8005368 <HAL_GetTick>
 800920a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800921a:	d02f      	beq.n	800927c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f022 0220 	bic.w	r2, r2, #32
 800922a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800922c:	68ba      	ldr	r2, [r7, #8]
 800922e:	2164      	movs	r1, #100	@ 0x64
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 fa7f 	bl	8009734 <SPI_EndRxTxTransaction>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d005      	beq.n	8009248 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009240:	f043 0220 	orr.w	r2, r3, #32
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f022 0203 	bic.w	r2, r2, #3
 8009256:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009270:	2b00      	cmp	r3, #0
 8009272:	d003      	beq.n	800927c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f7ff ff0d 	bl	8009094 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800927a:	e002      	b.n	8009282 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7ff fee1 	bl	8009044 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009294:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f7ff fede 	bl	8009058 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800929c:	bf00      	nop
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f7ff feda 	bl	800906c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092b8:	bf00      	nop
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092cc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f7ff fed6 	bl	8009080 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092d4:	bf00      	nop
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f022 0203 	bic.w	r2, r2, #3
 80092f8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092fe:	f043 0210 	orr.w	r2, r3, #16
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f7ff fec0 	bl	8009094 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009314:	bf00      	nop
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009328:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f7ff feac 	bl	8009094 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800933c:	bf00      	nop
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f103 020c 	add.w	r2, r3, #12
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009358:	7812      	ldrb	r2, [r2, #0]
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800936c:	b29b      	uxth	r3, r3
 800936e:	3b01      	subs	r3, #1
 8009370:	b29a      	uxth	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800937a:	b29b      	uxth	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10f      	bne.n	80093a0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685a      	ldr	r2, [r3, #4]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800938e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009394:	b29b      	uxth	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d102      	bne.n	80093a0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fa1e 	bl	80097dc <SPI_CloseRxTx_ISR>
    }
  }
}
 80093a0:	bf00      	nop
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	330c      	adds	r3, #12
 80093ba:	7812      	ldrb	r2, [r2, #0]
 80093bc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c2:	1c5a      	adds	r2, r3, #1
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	3b01      	subs	r3, #1
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80093da:	b29b      	uxth	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10f      	bne.n	8009400 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093ee:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f9ee 	bl	80097dc <SPI_CloseRxTx_ISR>
    }
  }
}
 8009400:	bf00      	nop
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	68da      	ldr	r2, [r3, #12]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800941a:	b292      	uxth	r2, r2
 800941c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009422:	1c9a      	adds	r2, r3, #2
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800942c:	b29b      	uxth	r3, r3
 800942e:	3b01      	subs	r3, #1
 8009430:	b29a      	uxth	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800943a:	b29b      	uxth	r3, r3
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10f      	bne.n	8009460 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	685a      	ldr	r2, [r3, #4]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800944e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009454:	b29b      	uxth	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d102      	bne.n	8009460 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f9be 	bl	80097dc <SPI_CloseRxTx_ISR>
    }
  }
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009474:	881a      	ldrh	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009480:	1c9a      	adds	r2, r3, #2
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800948a:	b29b      	uxth	r3, r3
 800948c:	3b01      	subs	r3, #1
 800948e:	b29a      	uxth	r2, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009498:	b29b      	uxth	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10f      	bne.n	80094be <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80094ac:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d102      	bne.n	80094be <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f98f 	bl	80097dc <SPI_CloseRxTx_ISR>
    }
  }
}
 80094be:	bf00      	nop
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b082      	sub	sp, #8
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f103 020c 	add.w	r2, r3, #12
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094da:	7812      	ldrb	r2, [r2, #0]
 80094dc:	b2d2      	uxtb	r2, r2
 80094de:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e4:	1c5a      	adds	r2, r3, #1
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	3b01      	subs	r3, #1
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d102      	bne.n	8009508 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f9de 	bl	80098c4 <SPI_CloseRx_ISR>
  }
}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68da      	ldr	r2, [r3, #12]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009522:	b292      	uxth	r2, r2
 8009524:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952a:	1c9a      	adds	r2, r3, #2
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009534:	b29b      	uxth	r3, r3
 8009536:	3b01      	subs	r3, #1
 8009538:	b29a      	uxth	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009542:	b29b      	uxth	r3, r3
 8009544:	2b00      	cmp	r3, #0
 8009546:	d102      	bne.n	800954e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f9bb 	bl	80098c4 <SPI_CloseRx_ISR>
  }
}
 800954e:	bf00      	nop
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	603b      	str	r3, [r7, #0]
 8009564:	4613      	mov	r3, r2
 8009566:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009568:	f7fb fefe 	bl	8005368 <HAL_GetTick>
 800956c:	4602      	mov	r2, r0
 800956e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009570:	1a9b      	subs	r3, r3, r2
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	4413      	add	r3, r2
 8009576:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009578:	f7fb fef6 	bl	8005368 <HAL_GetTick>
 800957c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800957e:	4b39      	ldr	r3, [pc, #228]	@ (8009664 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	015b      	lsls	r3, r3, #5
 8009584:	0d1b      	lsrs	r3, r3, #20
 8009586:	69fa      	ldr	r2, [r7, #28]
 8009588:	fb02 f303 	mul.w	r3, r2, r3
 800958c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800958e:	e054      	b.n	800963a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009596:	d050      	beq.n	800963a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009598:	f7fb fee6 	bl	8005368 <HAL_GetTick>
 800959c:	4602      	mov	r2, r0
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	69fa      	ldr	r2, [r7, #28]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d902      	bls.n	80095ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d13d      	bne.n	800962a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	685a      	ldr	r2, [r3, #4]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80095bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095c6:	d111      	bne.n	80095ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095d0:	d004      	beq.n	80095dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095da:	d107      	bne.n	80095ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095f4:	d10f      	bne.n	8009616 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009614:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009626:	2303      	movs	r3, #3
 8009628:	e017      	b.n	800965a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009630:	2300      	movs	r3, #0
 8009632:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	3b01      	subs	r3, #1
 8009638:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689a      	ldr	r2, [r3, #8]
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4013      	ands	r3, r2
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	429a      	cmp	r2, r3
 8009648:	bf0c      	ite	eq
 800964a:	2301      	moveq	r3, #1
 800964c:	2300      	movne	r3, #0
 800964e:	b2db      	uxtb	r3, r3
 8009650:	461a      	mov	r2, r3
 8009652:	79fb      	ldrb	r3, [r7, #7]
 8009654:	429a      	cmp	r2, r3
 8009656:	d19b      	bne.n	8009590 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3720      	adds	r7, #32
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20000010 	.word	0x20000010

08009668 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af02      	add	r7, sp, #8
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800967c:	d111      	bne.n	80096a2 <SPI_EndRxTransaction+0x3a>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009686:	d004      	beq.n	8009692 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009690:	d107      	bne.n	80096a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096aa:	d12a      	bne.n	8009702 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096b4:	d012      	beq.n	80096dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2200      	movs	r2, #0
 80096be:	2180      	movs	r1, #128	@ 0x80
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f7ff ff49 	bl	8009558 <SPI_WaitFlagStateUntilTimeout>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d02d      	beq.n	8009728 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d0:	f043 0220 	orr.w	r2, r3, #32
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80096d8:	2303      	movs	r3, #3
 80096da:	e026      	b.n	800972a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2200      	movs	r2, #0
 80096e4:	2101      	movs	r1, #1
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f7ff ff36 	bl	8009558 <SPI_WaitFlagStateUntilTimeout>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d01a      	beq.n	8009728 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f6:	f043 0220 	orr.w	r2, r3, #32
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e013      	b.n	800972a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	2200      	movs	r2, #0
 800970a:	2101      	movs	r1, #1
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f7ff ff23 	bl	8009558 <SPI_WaitFlagStateUntilTimeout>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d007      	beq.n	8009728 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800971c:	f043 0220 	orr.w	r2, r3, #32
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e000      	b.n	800972a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
	...

08009734 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b088      	sub	sp, #32
 8009738:	af02      	add	r7, sp, #8
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	2201      	movs	r2, #1
 8009748:	2102      	movs	r1, #2
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f7ff ff04 	bl	8009558 <SPI_WaitFlagStateUntilTimeout>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d007      	beq.n	8009766 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800975a:	f043 0220 	orr.w	r2, r3, #32
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009762:	2303      	movs	r3, #3
 8009764:	e032      	b.n	80097cc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009766:	4b1b      	ldr	r3, [pc, #108]	@ (80097d4 <SPI_EndRxTxTransaction+0xa0>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a1b      	ldr	r2, [pc, #108]	@ (80097d8 <SPI_EndRxTxTransaction+0xa4>)
 800976c:	fba2 2303 	umull	r2, r3, r2, r3
 8009770:	0d5b      	lsrs	r3, r3, #21
 8009772:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009776:	fb02 f303 	mul.w	r3, r2, r3
 800977a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009784:	d112      	bne.n	80097ac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2200      	movs	r2, #0
 800978e:	2180      	movs	r1, #128	@ 0x80
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7ff fee1 	bl	8009558 <SPI_WaitFlagStateUntilTimeout>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d016      	beq.n	80097ca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a0:	f043 0220 	orr.w	r2, r3, #32
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e00f      	b.n	80097cc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d00a      	beq.n	80097c8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	3b01      	subs	r3, #1
 80097b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097c2:	2b80      	cmp	r3, #128	@ 0x80
 80097c4:	d0f2      	beq.n	80097ac <SPI_EndRxTxTransaction+0x78>
 80097c6:	e000      	b.n	80097ca <SPI_EndRxTxTransaction+0x96>
        break;
 80097c8:	bf00      	nop
  }

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3718      	adds	r7, #24
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	20000010 	.word	0x20000010
 80097d8:	165e9f81 	.word	0x165e9f81

080097dc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80097e4:	4b35      	ldr	r3, [pc, #212]	@ (80098bc <SPI_CloseRxTx_ISR+0xe0>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a35      	ldr	r2, [pc, #212]	@ (80098c0 <SPI_CloseRxTx_ISR+0xe4>)
 80097ea:	fba2 2303 	umull	r2, r3, r2, r3
 80097ee:	0a5b      	lsrs	r3, r3, #9
 80097f0:	2264      	movs	r2, #100	@ 0x64
 80097f2:	fb02 f303 	mul.w	r3, r2, r3
 80097f6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097f8:	f7fb fdb6 	bl	8005368 <HAL_GetTick>
 80097fc:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	685a      	ldr	r2, [r3, #4]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f022 0220 	bic.w	r2, r2, #32
 800980c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d106      	bne.n	8009822 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009818:	f043 0220 	orr.w	r2, r3, #32
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009820:	e009      	b.n	8009836 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	3b01      	subs	r3, #1
 8009826:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f003 0302 	and.w	r3, r3, #2
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0eb      	beq.n	800980e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	2164      	movs	r1, #100	@ 0x64
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f7ff ff7a 	bl	8009734 <SPI_EndRxTxTransaction>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d005      	beq.n	8009852 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800984a:	f043 0220 	orr.w	r2, r3, #32
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10a      	bne.n	8009870 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800985a:	2300      	movs	r3, #0
 800985c:	60fb      	str	r3, [r7, #12]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	60fb      	str	r3, [r7, #12]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	60fb      	str	r3, [r7, #12]
 800986e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009874:	2b00      	cmp	r3, #0
 8009876:	d115      	bne.n	80098a4 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b04      	cmp	r3, #4
 8009882:	d107      	bne.n	8009894 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f7f9 fc69 	bl	8003164 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009892:	e00e      	b.n	80098b2 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f7ff fbd1 	bl	8009044 <HAL_SPI_TxRxCpltCallback>
}
 80098a2:	e006      	b.n	80098b2 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f7ff fbf1 	bl	8009094 <HAL_SPI_ErrorCallback>
}
 80098b2:	bf00      	nop
 80098b4:	3718      	adds	r7, #24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	20000010 	.word	0x20000010
 80098c0:	057619f1 	.word	0x057619f1

080098c4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80098da:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80098dc:	f7fb fd44 	bl	8005368 <HAL_GetTick>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	2164      	movs	r1, #100	@ 0x64
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7ff febe 	bl	8009668 <SPI_EndRxTransaction>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d005      	beq.n	80098fe <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098f6:	f043 0220 	orr.w	r2, r3, #32
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10a      	bne.n	800991c <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009906:	2300      	movs	r3, #0
 8009908:	60fb      	str	r3, [r7, #12]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	60fb      	str	r3, [r7, #12]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	60fb      	str	r3, [r7, #12]
 800991a:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009928:	2b00      	cmp	r3, #0
 800992a:	d103      	bne.n	8009934 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7f9 fc19 	bl	8003164 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009932:	e002      	b.n	800993a <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7ff fbad 	bl	8009094 <HAL_SPI_ErrorCallback>
}
 800993a:	bf00      	nop
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b082      	sub	sp, #8
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d101      	bne.n	8009954 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e041      	b.n	80099d8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	d106      	bne.n	800996e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7fb fb35 	bl	8004fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2202      	movs	r2, #2
 8009972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3304      	adds	r3, #4
 800997e:	4619      	mov	r1, r3
 8009980:	4610      	mov	r0, r2
 8009982:	f000 fae5 	bl	8009f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2201      	movs	r2, #1
 80099b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2201      	movs	r2, #1
 80099ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d001      	beq.n	80099f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e046      	b.n	8009a86 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2202      	movs	r2, #2
 80099fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a23      	ldr	r2, [pc, #140]	@ (8009a94 <HAL_TIM_Base_Start+0xb4>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d022      	beq.n	8009a50 <HAL_TIM_Base_Start+0x70>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a12:	d01d      	beq.n	8009a50 <HAL_TIM_Base_Start+0x70>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a1f      	ldr	r2, [pc, #124]	@ (8009a98 <HAL_TIM_Base_Start+0xb8>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d018      	beq.n	8009a50 <HAL_TIM_Base_Start+0x70>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a1e      	ldr	r2, [pc, #120]	@ (8009a9c <HAL_TIM_Base_Start+0xbc>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d013      	beq.n	8009a50 <HAL_TIM_Base_Start+0x70>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8009aa0 <HAL_TIM_Base_Start+0xc0>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d00e      	beq.n	8009a50 <HAL_TIM_Base_Start+0x70>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a1b      	ldr	r2, [pc, #108]	@ (8009aa4 <HAL_TIM_Base_Start+0xc4>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d009      	beq.n	8009a50 <HAL_TIM_Base_Start+0x70>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a19      	ldr	r2, [pc, #100]	@ (8009aa8 <HAL_TIM_Base_Start+0xc8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d004      	beq.n	8009a50 <HAL_TIM_Base_Start+0x70>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a18      	ldr	r2, [pc, #96]	@ (8009aac <HAL_TIM_Base_Start+0xcc>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d111      	bne.n	8009a74 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f003 0307 	and.w	r3, r3, #7
 8009a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b06      	cmp	r3, #6
 8009a60:	d010      	beq.n	8009a84 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f042 0201 	orr.w	r2, r2, #1
 8009a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a72:	e007      	b.n	8009a84 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f042 0201 	orr.w	r2, r2, #1
 8009a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
 8009a92:	bf00      	nop
 8009a94:	40010000 	.word	0x40010000
 8009a98:	40000400 	.word	0x40000400
 8009a9c:	40000800 	.word	0x40000800
 8009aa0:	40000c00 	.word	0x40000c00
 8009aa4:	40010400 	.word	0x40010400
 8009aa8:	40014000 	.word	0x40014000
 8009aac:	40001800 	.word	0x40001800

08009ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d001      	beq.n	8009ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e04e      	b.n	8009b66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2202      	movs	r2, #2
 8009acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68da      	ldr	r2, [r3, #12]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f042 0201 	orr.w	r2, r2, #1
 8009ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a23      	ldr	r2, [pc, #140]	@ (8009b74 <HAL_TIM_Base_Start_IT+0xc4>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d022      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x80>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009af2:	d01d      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x80>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a1f      	ldr	r2, [pc, #124]	@ (8009b78 <HAL_TIM_Base_Start_IT+0xc8>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d018      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x80>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a1e      	ldr	r2, [pc, #120]	@ (8009b7c <HAL_TIM_Base_Start_IT+0xcc>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d013      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x80>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8009b80 <HAL_TIM_Base_Start_IT+0xd0>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d00e      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x80>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a1b      	ldr	r2, [pc, #108]	@ (8009b84 <HAL_TIM_Base_Start_IT+0xd4>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d009      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x80>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a19      	ldr	r2, [pc, #100]	@ (8009b88 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d004      	beq.n	8009b30 <HAL_TIM_Base_Start_IT+0x80>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a18      	ldr	r2, [pc, #96]	@ (8009b8c <HAL_TIM_Base_Start_IT+0xdc>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d111      	bne.n	8009b54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	f003 0307 	and.w	r3, r3, #7
 8009b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2b06      	cmp	r3, #6
 8009b40:	d010      	beq.n	8009b64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f042 0201 	orr.w	r2, r2, #1
 8009b50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b52:	e007      	b.n	8009b64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f042 0201 	orr.w	r2, r2, #1
 8009b62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	40010000 	.word	0x40010000
 8009b78:	40000400 	.word	0x40000400
 8009b7c:	40000800 	.word	0x40000800
 8009b80:	40000c00 	.word	0x40000c00
 8009b84:	40010400 	.word	0x40010400
 8009b88:	40014000 	.word	0x40014000
 8009b8c:	40001800 	.word	0x40001800

08009b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d020      	beq.n	8009bf4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f003 0302 	and.w	r3, r3, #2
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d01b      	beq.n	8009bf4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f06f 0202 	mvn.w	r2, #2
 8009bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	f003 0303 	and.w	r3, r3, #3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f999 	bl	8009f12 <HAL_TIM_IC_CaptureCallback>
 8009be0:	e005      	b.n	8009bee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f98b 	bl	8009efe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f99c 	bl	8009f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f003 0304 	and.w	r3, r3, #4
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d020      	beq.n	8009c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d01b      	beq.n	8009c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f06f 0204 	mvn.w	r2, #4
 8009c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2202      	movs	r2, #2
 8009c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 f973 	bl	8009f12 <HAL_TIM_IC_CaptureCallback>
 8009c2c:	e005      	b.n	8009c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 f965 	bl	8009efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f976 	bl	8009f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f003 0308 	and.w	r3, r3, #8
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d020      	beq.n	8009c8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f003 0308 	and.w	r3, r3, #8
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d01b      	beq.n	8009c8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f06f 0208 	mvn.w	r2, #8
 8009c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2204      	movs	r2, #4
 8009c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	f003 0303 	and.w	r3, r3, #3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f94d 	bl	8009f12 <HAL_TIM_IC_CaptureCallback>
 8009c78:	e005      	b.n	8009c86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 f93f 	bl	8009efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f950 	bl	8009f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	f003 0310 	and.w	r3, r3, #16
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d020      	beq.n	8009cd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f003 0310 	and.w	r3, r3, #16
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d01b      	beq.n	8009cd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f06f 0210 	mvn.w	r2, #16
 8009ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2208      	movs	r2, #8
 8009cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	69db      	ldr	r3, [r3, #28]
 8009cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f927 	bl	8009f12 <HAL_TIM_IC_CaptureCallback>
 8009cc4:	e005      	b.n	8009cd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f919 	bl	8009efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f92a 	bl	8009f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f003 0301 	and.w	r3, r3, #1
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00c      	beq.n	8009cfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f003 0301 	and.w	r3, r3, #1
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d007      	beq.n	8009cfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f06f 0201 	mvn.w	r2, #1
 8009cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f7f8 fd02 	bl	8002700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00c      	beq.n	8009d20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d007      	beq.n	8009d20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fae4 	bl	800a2e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00c      	beq.n	8009d44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d007      	beq.n	8009d44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f8fb 	bl	8009f3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	f003 0320 	and.w	r3, r3, #32
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00c      	beq.n	8009d68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f003 0320 	and.w	r3, r3, #32
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d007      	beq.n	8009d68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f06f 0220 	mvn.w	r2, #32
 8009d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fab6 	bl	800a2d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d68:	bf00      	nop
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d101      	bne.n	8009d8c <HAL_TIM_ConfigClockSource+0x1c>
 8009d88:	2302      	movs	r3, #2
 8009d8a:	e0b4      	b.n	8009ef6 <HAL_TIM_ConfigClockSource+0x186>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2202      	movs	r2, #2
 8009d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009db2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dc4:	d03e      	beq.n	8009e44 <HAL_TIM_ConfigClockSource+0xd4>
 8009dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dca:	f200 8087 	bhi.w	8009edc <HAL_TIM_ConfigClockSource+0x16c>
 8009dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dd2:	f000 8086 	beq.w	8009ee2 <HAL_TIM_ConfigClockSource+0x172>
 8009dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dda:	d87f      	bhi.n	8009edc <HAL_TIM_ConfigClockSource+0x16c>
 8009ddc:	2b70      	cmp	r3, #112	@ 0x70
 8009dde:	d01a      	beq.n	8009e16 <HAL_TIM_ConfigClockSource+0xa6>
 8009de0:	2b70      	cmp	r3, #112	@ 0x70
 8009de2:	d87b      	bhi.n	8009edc <HAL_TIM_ConfigClockSource+0x16c>
 8009de4:	2b60      	cmp	r3, #96	@ 0x60
 8009de6:	d050      	beq.n	8009e8a <HAL_TIM_ConfigClockSource+0x11a>
 8009de8:	2b60      	cmp	r3, #96	@ 0x60
 8009dea:	d877      	bhi.n	8009edc <HAL_TIM_ConfigClockSource+0x16c>
 8009dec:	2b50      	cmp	r3, #80	@ 0x50
 8009dee:	d03c      	beq.n	8009e6a <HAL_TIM_ConfigClockSource+0xfa>
 8009df0:	2b50      	cmp	r3, #80	@ 0x50
 8009df2:	d873      	bhi.n	8009edc <HAL_TIM_ConfigClockSource+0x16c>
 8009df4:	2b40      	cmp	r3, #64	@ 0x40
 8009df6:	d058      	beq.n	8009eaa <HAL_TIM_ConfigClockSource+0x13a>
 8009df8:	2b40      	cmp	r3, #64	@ 0x40
 8009dfa:	d86f      	bhi.n	8009edc <HAL_TIM_ConfigClockSource+0x16c>
 8009dfc:	2b30      	cmp	r3, #48	@ 0x30
 8009dfe:	d064      	beq.n	8009eca <HAL_TIM_ConfigClockSource+0x15a>
 8009e00:	2b30      	cmp	r3, #48	@ 0x30
 8009e02:	d86b      	bhi.n	8009edc <HAL_TIM_ConfigClockSource+0x16c>
 8009e04:	2b20      	cmp	r3, #32
 8009e06:	d060      	beq.n	8009eca <HAL_TIM_ConfigClockSource+0x15a>
 8009e08:	2b20      	cmp	r3, #32
 8009e0a:	d867      	bhi.n	8009edc <HAL_TIM_ConfigClockSource+0x16c>
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d05c      	beq.n	8009eca <HAL_TIM_ConfigClockSource+0x15a>
 8009e10:	2b10      	cmp	r3, #16
 8009e12:	d05a      	beq.n	8009eca <HAL_TIM_ConfigClockSource+0x15a>
 8009e14:	e062      	b.n	8009edc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e26:	f000 f9b9 	bl	800a19c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009e38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	609a      	str	r2, [r3, #8]
      break;
 8009e42:	e04f      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e54:	f000 f9a2 	bl	800a19c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	689a      	ldr	r2, [r3, #8]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e66:	609a      	str	r2, [r3, #8]
      break;
 8009e68:	e03c      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e76:	461a      	mov	r2, r3
 8009e78:	f000 f916 	bl	800a0a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2150      	movs	r1, #80	@ 0x50
 8009e82:	4618      	mov	r0, r3
 8009e84:	f000 f96f 	bl	800a166 <TIM_ITRx_SetConfig>
      break;
 8009e88:	e02c      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e96:	461a      	mov	r2, r3
 8009e98:	f000 f935 	bl	800a106 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2160      	movs	r1, #96	@ 0x60
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 f95f 	bl	800a166 <TIM_ITRx_SetConfig>
      break;
 8009ea8:	e01c      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f000 f8f6 	bl	800a0a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2140      	movs	r1, #64	@ 0x40
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 f94f 	bl	800a166 <TIM_ITRx_SetConfig>
      break;
 8009ec8:	e00c      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	f000 f946 	bl	800a166 <TIM_ITRx_SetConfig>
      break;
 8009eda:	e003      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	73fb      	strb	r3, [r7, #15]
      break;
 8009ee0:	e000      	b.n	8009ee4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b083      	sub	sp, #12
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f06:	bf00      	nop
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f1a:	bf00      	nop
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f2e:	bf00      	nop
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f42:	bf00      	nop
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
	...

08009f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a46      	ldr	r2, [pc, #280]	@ (800a07c <TIM_Base_SetConfig+0x12c>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d013      	beq.n	8009f90 <TIM_Base_SetConfig+0x40>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f6e:	d00f      	beq.n	8009f90 <TIM_Base_SetConfig+0x40>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a43      	ldr	r2, [pc, #268]	@ (800a080 <TIM_Base_SetConfig+0x130>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d00b      	beq.n	8009f90 <TIM_Base_SetConfig+0x40>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a42      	ldr	r2, [pc, #264]	@ (800a084 <TIM_Base_SetConfig+0x134>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d007      	beq.n	8009f90 <TIM_Base_SetConfig+0x40>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a41      	ldr	r2, [pc, #260]	@ (800a088 <TIM_Base_SetConfig+0x138>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d003      	beq.n	8009f90 <TIM_Base_SetConfig+0x40>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a40      	ldr	r2, [pc, #256]	@ (800a08c <TIM_Base_SetConfig+0x13c>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d108      	bne.n	8009fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a35      	ldr	r2, [pc, #212]	@ (800a07c <TIM_Base_SetConfig+0x12c>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d02b      	beq.n	800a002 <TIM_Base_SetConfig+0xb2>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fb0:	d027      	beq.n	800a002 <TIM_Base_SetConfig+0xb2>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a32      	ldr	r2, [pc, #200]	@ (800a080 <TIM_Base_SetConfig+0x130>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d023      	beq.n	800a002 <TIM_Base_SetConfig+0xb2>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a31      	ldr	r2, [pc, #196]	@ (800a084 <TIM_Base_SetConfig+0x134>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d01f      	beq.n	800a002 <TIM_Base_SetConfig+0xb2>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a30      	ldr	r2, [pc, #192]	@ (800a088 <TIM_Base_SetConfig+0x138>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d01b      	beq.n	800a002 <TIM_Base_SetConfig+0xb2>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800a08c <TIM_Base_SetConfig+0x13c>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d017      	beq.n	800a002 <TIM_Base_SetConfig+0xb2>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a2e      	ldr	r2, [pc, #184]	@ (800a090 <TIM_Base_SetConfig+0x140>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d013      	beq.n	800a002 <TIM_Base_SetConfig+0xb2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a2d      	ldr	r2, [pc, #180]	@ (800a094 <TIM_Base_SetConfig+0x144>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d00f      	beq.n	800a002 <TIM_Base_SetConfig+0xb2>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a2c      	ldr	r2, [pc, #176]	@ (800a098 <TIM_Base_SetConfig+0x148>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d00b      	beq.n	800a002 <TIM_Base_SetConfig+0xb2>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a2b      	ldr	r2, [pc, #172]	@ (800a09c <TIM_Base_SetConfig+0x14c>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d007      	beq.n	800a002 <TIM_Base_SetConfig+0xb2>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a2a      	ldr	r2, [pc, #168]	@ (800a0a0 <TIM_Base_SetConfig+0x150>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d003      	beq.n	800a002 <TIM_Base_SetConfig+0xb2>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a29      	ldr	r2, [pc, #164]	@ (800a0a4 <TIM_Base_SetConfig+0x154>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d108      	bne.n	800a014 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	4313      	orrs	r3, r2
 800a012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	695b      	ldr	r3, [r3, #20]
 800a01e:	4313      	orrs	r3, r2
 800a020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	689a      	ldr	r2, [r3, #8]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a10      	ldr	r2, [pc, #64]	@ (800a07c <TIM_Base_SetConfig+0x12c>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d003      	beq.n	800a048 <TIM_Base_SetConfig+0xf8>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a12      	ldr	r2, [pc, #72]	@ (800a08c <TIM_Base_SetConfig+0x13c>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d103      	bne.n	800a050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	691a      	ldr	r2, [r3, #16]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d105      	bne.n	800a06e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	f023 0201 	bic.w	r2, r3, #1
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	611a      	str	r2, [r3, #16]
  }
}
 800a06e:	bf00      	nop
 800a070:	3714      	adds	r7, #20
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	40010000 	.word	0x40010000
 800a080:	40000400 	.word	0x40000400
 800a084:	40000800 	.word	0x40000800
 800a088:	40000c00 	.word	0x40000c00
 800a08c:	40010400 	.word	0x40010400
 800a090:	40014000 	.word	0x40014000
 800a094:	40014400 	.word	0x40014400
 800a098:	40014800 	.word	0x40014800
 800a09c:	40001800 	.word	0x40001800
 800a0a0:	40001c00 	.word	0x40001c00
 800a0a4:	40002000 	.word	0x40002000

0800a0a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6a1b      	ldr	r3, [r3, #32]
 800a0b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	f023 0201 	bic.w	r2, r3, #1
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	699b      	ldr	r3, [r3, #24]
 800a0ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	011b      	lsls	r3, r3, #4
 800a0d8:	693a      	ldr	r2, [r7, #16]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f023 030a 	bic.w	r3, r3, #10
 800a0e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	621a      	str	r2, [r3, #32]
}
 800a0fa:	bf00      	nop
 800a0fc:	371c      	adds	r7, #28
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a106:	b480      	push	{r7}
 800a108:	b087      	sub	sp, #28
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	60f8      	str	r0, [r7, #12]
 800a10e:	60b9      	str	r1, [r7, #8]
 800a110:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6a1b      	ldr	r3, [r3, #32]
 800a11c:	f023 0210 	bic.w	r2, r3, #16
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	699b      	ldr	r3, [r3, #24]
 800a128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	031b      	lsls	r3, r3, #12
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	4313      	orrs	r3, r2
 800a13a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a142:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	011b      	lsls	r3, r3, #4
 800a148:	697a      	ldr	r2, [r7, #20]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	621a      	str	r2, [r3, #32]
}
 800a15a:	bf00      	nop
 800a15c:	371c      	adds	r7, #28
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr

0800a166 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a166:	b480      	push	{r7}
 800a168:	b085      	sub	sp, #20
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a17c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	4313      	orrs	r3, r2
 800a184:	f043 0307 	orr.w	r3, r3, #7
 800a188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	609a      	str	r2, [r3, #8]
}
 800a190:	bf00      	nop
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b087      	sub	sp, #28
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	021a      	lsls	r2, r3, #8
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	609a      	str	r2, [r3, #8]
}
 800a1d0:	bf00      	nop
 800a1d2:	371c      	adds	r7, #28
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d101      	bne.n	800a1f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	e05a      	b.n	800a2aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2202      	movs	r2, #2
 800a200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a21a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68fa      	ldr	r2, [r7, #12]
 800a222:	4313      	orrs	r3, r2
 800a224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a21      	ldr	r2, [pc, #132]	@ (800a2b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d022      	beq.n	800a27e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a240:	d01d      	beq.n	800a27e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a1d      	ldr	r2, [pc, #116]	@ (800a2bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d018      	beq.n	800a27e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a1b      	ldr	r2, [pc, #108]	@ (800a2c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d013      	beq.n	800a27e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a1a      	ldr	r2, [pc, #104]	@ (800a2c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d00e      	beq.n	800a27e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a18      	ldr	r2, [pc, #96]	@ (800a2c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d009      	beq.n	800a27e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a17      	ldr	r2, [pc, #92]	@ (800a2cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d004      	beq.n	800a27e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a15      	ldr	r2, [pc, #84]	@ (800a2d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d10c      	bne.n	800a298 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3714      	adds	r7, #20
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	40010000 	.word	0x40010000
 800a2bc:	40000400 	.word	0x40000400
 800a2c0:	40000800 	.word	0x40000800
 800a2c4:	40000c00 	.word	0x40000c00
 800a2c8:	40010400 	.word	0x40010400
 800a2cc:	40014000 	.word	0x40014000
 800a2d0:	40001800 	.word	0x40001800

0800a2d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	e042      	b.n	800a394 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b00      	cmp	r3, #0
 800a318:	d106      	bne.n	800a328 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7fa fe94 	bl	8005050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2224      	movs	r2, #36	@ 0x24
 800a32c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a33e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fc85 	bl	800ac50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	691a      	ldr	r2, [r3, #16]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a354:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	695a      	ldr	r2, [r3, #20]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a364:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68da      	ldr	r2, [r3, #12]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a374:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2220      	movs	r2, #32
 800a380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2220      	movs	r2, #32
 800a388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b0ba      	sub	sp, #232	@ 0xe8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a3ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3d2:	f003 030f 	and.w	r3, r3, #15
 800a3d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a3da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d10f      	bne.n	800a402 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3e6:	f003 0320 	and.w	r3, r3, #32
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d009      	beq.n	800a402 <HAL_UART_IRQHandler+0x66>
 800a3ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3f2:	f003 0320 	and.w	r3, r3, #32
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d003      	beq.n	800a402 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fb69 	bl	800aad2 <UART_Receive_IT>
      return;
 800a400:	e25b      	b.n	800a8ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a402:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a406:	2b00      	cmp	r3, #0
 800a408:	f000 80de 	beq.w	800a5c8 <HAL_UART_IRQHandler+0x22c>
 800a40c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a410:	f003 0301 	and.w	r3, r3, #1
 800a414:	2b00      	cmp	r3, #0
 800a416:	d106      	bne.n	800a426 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a41c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 80d1 	beq.w	800a5c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00b      	beq.n	800a44a <HAL_UART_IRQHandler+0xae>
 800a432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d005      	beq.n	800a44a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a442:	f043 0201 	orr.w	r2, r3, #1
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a44a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a44e:	f003 0304 	and.w	r3, r3, #4
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00b      	beq.n	800a46e <HAL_UART_IRQHandler+0xd2>
 800a456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d005      	beq.n	800a46e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a466:	f043 0202 	orr.w	r2, r3, #2
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a472:	f003 0302 	and.w	r3, r3, #2
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00b      	beq.n	800a492 <HAL_UART_IRQHandler+0xf6>
 800a47a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	d005      	beq.n	800a492 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a48a:	f043 0204 	orr.w	r2, r3, #4
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a496:	f003 0308 	and.w	r3, r3, #8
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d011      	beq.n	800a4c2 <HAL_UART_IRQHandler+0x126>
 800a49e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4a2:	f003 0320 	and.w	r3, r3, #32
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d105      	bne.n	800a4b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a4aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d005      	beq.n	800a4c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4ba:	f043 0208 	orr.w	r2, r3, #8
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 81f2 	beq.w	800a8b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4d0:	f003 0320 	and.w	r3, r3, #32
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d008      	beq.n	800a4ea <HAL_UART_IRQHandler+0x14e>
 800a4d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4dc:	f003 0320 	and.w	r3, r3, #32
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d002      	beq.n	800a4ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 faf4 	bl	800aad2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	695b      	ldr	r3, [r3, #20]
 800a4f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4f4:	2b40      	cmp	r3, #64	@ 0x40
 800a4f6:	bf0c      	ite	eq
 800a4f8:	2301      	moveq	r3, #1
 800a4fa:	2300      	movne	r3, #0
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a506:	f003 0308 	and.w	r3, r3, #8
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d103      	bne.n	800a516 <HAL_UART_IRQHandler+0x17a>
 800a50e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a512:	2b00      	cmp	r3, #0
 800a514:	d04f      	beq.n	800a5b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f9fc 	bl	800a914 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	695b      	ldr	r3, [r3, #20]
 800a522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a526:	2b40      	cmp	r3, #64	@ 0x40
 800a528:	d141      	bne.n	800a5ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3314      	adds	r3, #20
 800a530:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a534:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a538:	e853 3f00 	ldrex	r3, [r3]
 800a53c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a540:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a548:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	3314      	adds	r3, #20
 800a552:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a556:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a55a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a562:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a566:	e841 2300 	strex	r3, r2, [r1]
 800a56a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a56e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1d9      	bne.n	800a52a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d013      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a582:	4a7e      	ldr	r2, [pc, #504]	@ (800a77c <HAL_UART_IRQHandler+0x3e0>)
 800a584:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7fb fbcc 	bl	8005d28 <HAL_DMA_Abort_IT>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d016      	beq.n	800a5c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a59a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5a4:	e00e      	b.n	800a5c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f99e 	bl	800a8e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5ac:	e00a      	b.n	800a5c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f99a 	bl	800a8e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5b4:	e006      	b.n	800a5c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f996 	bl	800a8e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a5c2:	e175      	b.n	800a8b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c4:	bf00      	nop
    return;
 800a5c6:	e173      	b.n	800a8b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	f040 814f 	bne.w	800a870 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a5d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5d6:	f003 0310 	and.w	r3, r3, #16
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 8148 	beq.w	800a870 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a5e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5e4:	f003 0310 	and.w	r3, r3, #16
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 8141 	beq.w	800a870 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60bb      	str	r3, [r7, #8]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	60bb      	str	r3, [r7, #8]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	60bb      	str	r3, [r7, #8]
 800a602:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	695b      	ldr	r3, [r3, #20]
 800a60a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a60e:	2b40      	cmp	r3, #64	@ 0x40
 800a610:	f040 80b6 	bne.w	800a780 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a620:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 8145 	beq.w	800a8b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a62e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a632:	429a      	cmp	r2, r3
 800a634:	f080 813e 	bcs.w	800a8b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a63e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a64a:	f000 8088 	beq.w	800a75e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	330c      	adds	r3, #12
 800a654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a658:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a65c:	e853 3f00 	ldrex	r3, [r3]
 800a660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a664:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a66c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	330c      	adds	r3, #12
 800a676:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a67a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a67e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a682:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a686:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a68a:	e841 2300 	strex	r3, r2, [r1]
 800a68e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a692:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1d9      	bne.n	800a64e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	3314      	adds	r3, #20
 800a6a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6a4:	e853 3f00 	ldrex	r3, [r3]
 800a6a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a6aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a6ac:	f023 0301 	bic.w	r3, r3, #1
 800a6b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	3314      	adds	r3, #20
 800a6ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a6be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a6c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a6c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a6ca:	e841 2300 	strex	r3, r2, [r1]
 800a6ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a6d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1e1      	bne.n	800a69a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3314      	adds	r3, #20
 800a6dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6e0:	e853 3f00 	ldrex	r3, [r3]
 800a6e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a6e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	3314      	adds	r3, #20
 800a6f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a6fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a6fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a700:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a702:	e841 2300 	strex	r3, r2, [r1]
 800a706:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a708:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1e3      	bne.n	800a6d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2220      	movs	r2, #32
 800a712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	330c      	adds	r3, #12
 800a722:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a726:	e853 3f00 	ldrex	r3, [r3]
 800a72a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a72c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a72e:	f023 0310 	bic.w	r3, r3, #16
 800a732:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	330c      	adds	r3, #12
 800a73c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a740:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a742:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a744:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a746:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a748:	e841 2300 	strex	r3, r2, [r1]
 800a74c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a74e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a750:	2b00      	cmp	r3, #0
 800a752:	d1e3      	bne.n	800a71c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a758:	4618      	mov	r0, r3
 800a75a:	f7fb fa75 	bl	8005c48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2202      	movs	r2, #2
 800a762:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	b29b      	uxth	r3, r3
 800a772:	4619      	mov	r1, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f8c1 	bl	800a8fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a77a:	e09b      	b.n	800a8b4 <HAL_UART_IRQHandler+0x518>
 800a77c:	0800a9db 	.word	0x0800a9db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a788:	b29b      	uxth	r3, r3
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a794:	b29b      	uxth	r3, r3
 800a796:	2b00      	cmp	r3, #0
 800a798:	f000 808e 	beq.w	800a8b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a79c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 8089 	beq.w	800a8b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	330c      	adds	r3, #12
 800a7ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b0:	e853 3f00 	ldrex	r3, [r3]
 800a7b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a7b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	330c      	adds	r3, #12
 800a7c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a7ca:	647a      	str	r2, [r7, #68]	@ 0x44
 800a7cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7d2:	e841 2300 	strex	r3, r2, [r1]
 800a7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a7d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1e3      	bne.n	800a7a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	3314      	adds	r3, #20
 800a7e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e8:	e853 3f00 	ldrex	r3, [r3]
 800a7ec:	623b      	str	r3, [r7, #32]
   return(result);
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	f023 0301 	bic.w	r3, r3, #1
 800a7f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3314      	adds	r3, #20
 800a7fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a802:	633a      	str	r2, [r7, #48]	@ 0x30
 800a804:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a80a:	e841 2300 	strex	r3, r2, [r1]
 800a80e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1e3      	bne.n	800a7de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2220      	movs	r2, #32
 800a81a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2200      	movs	r2, #0
 800a822:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	330c      	adds	r3, #12
 800a82a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	e853 3f00 	ldrex	r3, [r3]
 800a832:	60fb      	str	r3, [r7, #12]
   return(result);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f023 0310 	bic.w	r3, r3, #16
 800a83a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	330c      	adds	r3, #12
 800a844:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a848:	61fa      	str	r2, [r7, #28]
 800a84a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84c:	69b9      	ldr	r1, [r7, #24]
 800a84e:	69fa      	ldr	r2, [r7, #28]
 800a850:	e841 2300 	strex	r3, r2, [r1]
 800a854:	617b      	str	r3, [r7, #20]
   return(result);
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1e3      	bne.n	800a824 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2202      	movs	r2, #2
 800a860:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a862:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 f847 	bl	800a8fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a86e:	e023      	b.n	800a8b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d009      	beq.n	800a890 <HAL_UART_IRQHandler+0x4f4>
 800a87c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a884:	2b00      	cmp	r3, #0
 800a886:	d003      	beq.n	800a890 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 f8ba 	bl	800aa02 <UART_Transmit_IT>
    return;
 800a88e:	e014      	b.n	800a8ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00e      	beq.n	800a8ba <HAL_UART_IRQHandler+0x51e>
 800a89c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d008      	beq.n	800a8ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f8fa 	bl	800aaa2 <UART_EndTransmit_IT>
    return;
 800a8ae:	e004      	b.n	800a8ba <HAL_UART_IRQHandler+0x51e>
    return;
 800a8b0:	bf00      	nop
 800a8b2:	e002      	b.n	800a8ba <HAL_UART_IRQHandler+0x51e>
      return;
 800a8b4:	bf00      	nop
 800a8b6:	e000      	b.n	800a8ba <HAL_UART_IRQHandler+0x51e>
      return;
 800a8b8:	bf00      	nop
  }
}
 800a8ba:	37e8      	adds	r7, #232	@ 0xe8
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	460b      	mov	r3, r1
 800a906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a914:	b480      	push	{r7}
 800a916:	b095      	sub	sp, #84	@ 0x54
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	330c      	adds	r3, #12
 800a922:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a926:	e853 3f00 	ldrex	r3, [r3]
 800a92a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	330c      	adds	r3, #12
 800a93a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a93c:	643a      	str	r2, [r7, #64]	@ 0x40
 800a93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a940:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a942:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a944:	e841 2300 	strex	r3, r2, [r1]
 800a948:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d1e5      	bne.n	800a91c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	3314      	adds	r3, #20
 800a956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	e853 3f00 	ldrex	r3, [r3]
 800a95e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	f023 0301 	bic.w	r3, r3, #1
 800a966:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	3314      	adds	r3, #20
 800a96e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a970:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a972:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a974:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a978:	e841 2300 	strex	r3, r2, [r1]
 800a97c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1e5      	bne.n	800a950 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d119      	bne.n	800a9c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	330c      	adds	r3, #12
 800a992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	e853 3f00 	ldrex	r3, [r3]
 800a99a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	f023 0310 	bic.w	r3, r3, #16
 800a9a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	330c      	adds	r3, #12
 800a9aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9ac:	61ba      	str	r2, [r7, #24]
 800a9ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b0:	6979      	ldr	r1, [r7, #20]
 800a9b2:	69ba      	ldr	r2, [r7, #24]
 800a9b4:	e841 2300 	strex	r3, r2, [r1]
 800a9b8:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d1e5      	bne.n	800a98c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a9ce:	bf00      	nop
 800a9d0:	3754      	adds	r7, #84	@ 0x54
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b084      	sub	sp, #16
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f7ff ff77 	bl	800a8e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9fa:	bf00      	nop
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aa02:	b480      	push	{r7}
 800aa04:	b085      	sub	sp, #20
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b21      	cmp	r3, #33	@ 0x21
 800aa14:	d13e      	bne.n	800aa94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa1e:	d114      	bne.n	800aa4a <UART_Transmit_IT+0x48>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d110      	bne.n	800aa4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	461a      	mov	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	1c9a      	adds	r2, r3, #2
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	621a      	str	r2, [r3, #32]
 800aa48:	e008      	b.n	800aa5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	1c59      	adds	r1, r3, #1
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	6211      	str	r1, [r2, #32]
 800aa54:	781a      	ldrb	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	3b01      	subs	r3, #1
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10f      	bne.n	800aa90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68da      	ldr	r2, [r3, #12]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800aa7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68da      	ldr	r2, [r3, #12]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aa8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	e000      	b.n	800aa96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aa94:	2302      	movs	r3, #2
  }
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr

0800aaa2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b082      	sub	sp, #8
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68da      	ldr	r2, [r3, #12]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aab8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2220      	movs	r2, #32
 800aabe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f7ff fefc 	bl	800a8c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b08c      	sub	sp, #48	@ 0x30
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	2b22      	cmp	r3, #34	@ 0x22
 800aae4:	f040 80ae 	bne.w	800ac44 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aaf0:	d117      	bne.n	800ab22 <UART_Receive_IT+0x50>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d113      	bne.n	800ab22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aafa:	2300      	movs	r3, #0
 800aafc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab02:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab1a:	1c9a      	adds	r2, r3, #2
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	629a      	str	r2, [r3, #40]	@ 0x28
 800ab20:	e026      	b.n	800ab70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab26:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab34:	d007      	beq.n	800ab46 <UART_Receive_IT+0x74>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10a      	bne.n	800ab54 <UART_Receive_IT+0x82>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d106      	bne.n	800ab54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab50:	701a      	strb	r2, [r3, #0]
 800ab52:	e008      	b.n	800ab66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab6a:	1c5a      	adds	r2, r3, #1
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	3b01      	subs	r3, #1
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d15d      	bne.n	800ac40 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68da      	ldr	r2, [r3, #12]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f022 0220 	bic.w	r2, r2, #32
 800ab92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68da      	ldr	r2, [r3, #12]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	695a      	ldr	r2, [r3, #20]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f022 0201 	bic.w	r2, r2, #1
 800abb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2220      	movs	r2, #32
 800abb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d135      	bne.n	800ac36 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	330c      	adds	r3, #12
 800abd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	e853 3f00 	ldrex	r3, [r3]
 800abde:	613b      	str	r3, [r7, #16]
   return(result);
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	f023 0310 	bic.w	r3, r3, #16
 800abe6:	627b      	str	r3, [r7, #36]	@ 0x24
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	330c      	adds	r3, #12
 800abee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abf0:	623a      	str	r2, [r7, #32]
 800abf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf4:	69f9      	ldr	r1, [r7, #28]
 800abf6:	6a3a      	ldr	r2, [r7, #32]
 800abf8:	e841 2300 	strex	r3, r2, [r1]
 800abfc:	61bb      	str	r3, [r7, #24]
   return(result);
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d1e5      	bne.n	800abd0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 0310 	and.w	r3, r3, #16
 800ac0e:	2b10      	cmp	r3, #16
 800ac10:	d10a      	bne.n	800ac28 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ac12:	2300      	movs	r3, #0
 800ac14:	60fb      	str	r3, [r7, #12]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	60fb      	str	r3, [r7, #12]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	60fb      	str	r3, [r7, #12]
 800ac26:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f7ff fe64 	bl	800a8fc <HAL_UARTEx_RxEventCallback>
 800ac34:	e002      	b.n	800ac3c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7ff fe4c 	bl	800a8d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	e002      	b.n	800ac46 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	e000      	b.n	800ac46 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ac44:	2302      	movs	r3, #2
  }
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3730      	adds	r7, #48	@ 0x30
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac54:	b0c0      	sub	sp, #256	@ 0x100
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ac68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac6c:	68d9      	ldr	r1, [r3, #12]
 800ac6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	ea40 0301 	orr.w	r3, r0, r1
 800ac78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ac7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac7e:	689a      	ldr	r2, [r3, #8]
 800ac80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	431a      	orrs	r2, r3
 800ac88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac94:	69db      	ldr	r3, [r3, #28]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ac9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800aca8:	f021 010c 	bic.w	r1, r1, #12
 800acac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800acb6:	430b      	orrs	r3, r1
 800acb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800acba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	695b      	ldr	r3, [r3, #20]
 800acc2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800acc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acca:	6999      	ldr	r1, [r3, #24]
 800accc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	ea40 0301 	orr.w	r3, r0, r1
 800acd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800acd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	4b8f      	ldr	r3, [pc, #572]	@ (800af1c <UART_SetConfig+0x2cc>)
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d005      	beq.n	800acf0 <UART_SetConfig+0xa0>
 800ace4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	4b8d      	ldr	r3, [pc, #564]	@ (800af20 <UART_SetConfig+0x2d0>)
 800acec:	429a      	cmp	r2, r3
 800acee:	d104      	bne.n	800acfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800acf0:	f7fc f8e0 	bl	8006eb4 <HAL_RCC_GetPCLK2Freq>
 800acf4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800acf8:	e003      	b.n	800ad02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800acfa:	f7fc f8c7 	bl	8006e8c <HAL_RCC_GetPCLK1Freq>
 800acfe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad06:	69db      	ldr	r3, [r3, #28]
 800ad08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad0c:	f040 810c 	bne.w	800af28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad14:	2200      	movs	r2, #0
 800ad16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ad1a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ad1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ad22:	4622      	mov	r2, r4
 800ad24:	462b      	mov	r3, r5
 800ad26:	1891      	adds	r1, r2, r2
 800ad28:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ad2a:	415b      	adcs	r3, r3
 800ad2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ad32:	4621      	mov	r1, r4
 800ad34:	eb12 0801 	adds.w	r8, r2, r1
 800ad38:	4629      	mov	r1, r5
 800ad3a:	eb43 0901 	adc.w	r9, r3, r1
 800ad3e:	f04f 0200 	mov.w	r2, #0
 800ad42:	f04f 0300 	mov.w	r3, #0
 800ad46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ad4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ad4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ad52:	4690      	mov	r8, r2
 800ad54:	4699      	mov	r9, r3
 800ad56:	4623      	mov	r3, r4
 800ad58:	eb18 0303 	adds.w	r3, r8, r3
 800ad5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ad60:	462b      	mov	r3, r5
 800ad62:	eb49 0303 	adc.w	r3, r9, r3
 800ad66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ad6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad76:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ad7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ad7e:	460b      	mov	r3, r1
 800ad80:	18db      	adds	r3, r3, r3
 800ad82:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad84:	4613      	mov	r3, r2
 800ad86:	eb42 0303 	adc.w	r3, r2, r3
 800ad8a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ad90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ad94:	f7f5 fa20 	bl	80001d8 <__aeabi_uldivmod>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	460b      	mov	r3, r1
 800ad9c:	4b61      	ldr	r3, [pc, #388]	@ (800af24 <UART_SetConfig+0x2d4>)
 800ad9e:	fba3 2302 	umull	r2, r3, r3, r2
 800ada2:	095b      	lsrs	r3, r3, #5
 800ada4:	011c      	lsls	r4, r3, #4
 800ada6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800adaa:	2200      	movs	r2, #0
 800adac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800adb0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800adb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800adb8:	4642      	mov	r2, r8
 800adba:	464b      	mov	r3, r9
 800adbc:	1891      	adds	r1, r2, r2
 800adbe:	64b9      	str	r1, [r7, #72]	@ 0x48
 800adc0:	415b      	adcs	r3, r3
 800adc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800adc8:	4641      	mov	r1, r8
 800adca:	eb12 0a01 	adds.w	sl, r2, r1
 800adce:	4649      	mov	r1, r9
 800add0:	eb43 0b01 	adc.w	fp, r3, r1
 800add4:	f04f 0200 	mov.w	r2, #0
 800add8:	f04f 0300 	mov.w	r3, #0
 800addc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ade0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ade4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ade8:	4692      	mov	sl, r2
 800adea:	469b      	mov	fp, r3
 800adec:	4643      	mov	r3, r8
 800adee:	eb1a 0303 	adds.w	r3, sl, r3
 800adf2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800adf6:	464b      	mov	r3, r9
 800adf8:	eb4b 0303 	adc.w	r3, fp, r3
 800adfc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ae00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ae0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ae10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ae14:	460b      	mov	r3, r1
 800ae16:	18db      	adds	r3, r3, r3
 800ae18:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	eb42 0303 	adc.w	r3, r2, r3
 800ae20:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ae26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ae2a:	f7f5 f9d5 	bl	80001d8 <__aeabi_uldivmod>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4611      	mov	r1, r2
 800ae34:	4b3b      	ldr	r3, [pc, #236]	@ (800af24 <UART_SetConfig+0x2d4>)
 800ae36:	fba3 2301 	umull	r2, r3, r3, r1
 800ae3a:	095b      	lsrs	r3, r3, #5
 800ae3c:	2264      	movs	r2, #100	@ 0x64
 800ae3e:	fb02 f303 	mul.w	r3, r2, r3
 800ae42:	1acb      	subs	r3, r1, r3
 800ae44:	00db      	lsls	r3, r3, #3
 800ae46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ae4a:	4b36      	ldr	r3, [pc, #216]	@ (800af24 <UART_SetConfig+0x2d4>)
 800ae4c:	fba3 2302 	umull	r2, r3, r3, r2
 800ae50:	095b      	lsrs	r3, r3, #5
 800ae52:	005b      	lsls	r3, r3, #1
 800ae54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ae58:	441c      	add	r4, r3
 800ae5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ae68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ae6c:	4642      	mov	r2, r8
 800ae6e:	464b      	mov	r3, r9
 800ae70:	1891      	adds	r1, r2, r2
 800ae72:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ae74:	415b      	adcs	r3, r3
 800ae76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ae7c:	4641      	mov	r1, r8
 800ae7e:	1851      	adds	r1, r2, r1
 800ae80:	6339      	str	r1, [r7, #48]	@ 0x30
 800ae82:	4649      	mov	r1, r9
 800ae84:	414b      	adcs	r3, r1
 800ae86:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae88:	f04f 0200 	mov.w	r2, #0
 800ae8c:	f04f 0300 	mov.w	r3, #0
 800ae90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ae94:	4659      	mov	r1, fp
 800ae96:	00cb      	lsls	r3, r1, #3
 800ae98:	4651      	mov	r1, sl
 800ae9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae9e:	4651      	mov	r1, sl
 800aea0:	00ca      	lsls	r2, r1, #3
 800aea2:	4610      	mov	r0, r2
 800aea4:	4619      	mov	r1, r3
 800aea6:	4603      	mov	r3, r0
 800aea8:	4642      	mov	r2, r8
 800aeaa:	189b      	adds	r3, r3, r2
 800aeac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aeb0:	464b      	mov	r3, r9
 800aeb2:	460a      	mov	r2, r1
 800aeb4:	eb42 0303 	adc.w	r3, r2, r3
 800aeb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aec8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800aecc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800aed0:	460b      	mov	r3, r1
 800aed2:	18db      	adds	r3, r3, r3
 800aed4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aed6:	4613      	mov	r3, r2
 800aed8:	eb42 0303 	adc.w	r3, r2, r3
 800aedc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800aee2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800aee6:	f7f5 f977 	bl	80001d8 <__aeabi_uldivmod>
 800aeea:	4602      	mov	r2, r0
 800aeec:	460b      	mov	r3, r1
 800aeee:	4b0d      	ldr	r3, [pc, #52]	@ (800af24 <UART_SetConfig+0x2d4>)
 800aef0:	fba3 1302 	umull	r1, r3, r3, r2
 800aef4:	095b      	lsrs	r3, r3, #5
 800aef6:	2164      	movs	r1, #100	@ 0x64
 800aef8:	fb01 f303 	mul.w	r3, r1, r3
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	00db      	lsls	r3, r3, #3
 800af00:	3332      	adds	r3, #50	@ 0x32
 800af02:	4a08      	ldr	r2, [pc, #32]	@ (800af24 <UART_SetConfig+0x2d4>)
 800af04:	fba2 2303 	umull	r2, r3, r2, r3
 800af08:	095b      	lsrs	r3, r3, #5
 800af0a:	f003 0207 	and.w	r2, r3, #7
 800af0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4422      	add	r2, r4
 800af16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800af18:	e106      	b.n	800b128 <UART_SetConfig+0x4d8>
 800af1a:	bf00      	nop
 800af1c:	40011000 	.word	0x40011000
 800af20:	40011400 	.word	0x40011400
 800af24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af2c:	2200      	movs	r2, #0
 800af2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800af32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800af36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800af3a:	4642      	mov	r2, r8
 800af3c:	464b      	mov	r3, r9
 800af3e:	1891      	adds	r1, r2, r2
 800af40:	6239      	str	r1, [r7, #32]
 800af42:	415b      	adcs	r3, r3
 800af44:	627b      	str	r3, [r7, #36]	@ 0x24
 800af46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800af4a:	4641      	mov	r1, r8
 800af4c:	1854      	adds	r4, r2, r1
 800af4e:	4649      	mov	r1, r9
 800af50:	eb43 0501 	adc.w	r5, r3, r1
 800af54:	f04f 0200 	mov.w	r2, #0
 800af58:	f04f 0300 	mov.w	r3, #0
 800af5c:	00eb      	lsls	r3, r5, #3
 800af5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800af62:	00e2      	lsls	r2, r4, #3
 800af64:	4614      	mov	r4, r2
 800af66:	461d      	mov	r5, r3
 800af68:	4643      	mov	r3, r8
 800af6a:	18e3      	adds	r3, r4, r3
 800af6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af70:	464b      	mov	r3, r9
 800af72:	eb45 0303 	adc.w	r3, r5, r3
 800af76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800af7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800af86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800af8a:	f04f 0200 	mov.w	r2, #0
 800af8e:	f04f 0300 	mov.w	r3, #0
 800af92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800af96:	4629      	mov	r1, r5
 800af98:	008b      	lsls	r3, r1, #2
 800af9a:	4621      	mov	r1, r4
 800af9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800afa0:	4621      	mov	r1, r4
 800afa2:	008a      	lsls	r2, r1, #2
 800afa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800afa8:	f7f5 f916 	bl	80001d8 <__aeabi_uldivmod>
 800afac:	4602      	mov	r2, r0
 800afae:	460b      	mov	r3, r1
 800afb0:	4b60      	ldr	r3, [pc, #384]	@ (800b134 <UART_SetConfig+0x4e4>)
 800afb2:	fba3 2302 	umull	r2, r3, r3, r2
 800afb6:	095b      	lsrs	r3, r3, #5
 800afb8:	011c      	lsls	r4, r3, #4
 800afba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800afbe:	2200      	movs	r2, #0
 800afc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800afc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800afc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800afcc:	4642      	mov	r2, r8
 800afce:	464b      	mov	r3, r9
 800afd0:	1891      	adds	r1, r2, r2
 800afd2:	61b9      	str	r1, [r7, #24]
 800afd4:	415b      	adcs	r3, r3
 800afd6:	61fb      	str	r3, [r7, #28]
 800afd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800afdc:	4641      	mov	r1, r8
 800afde:	1851      	adds	r1, r2, r1
 800afe0:	6139      	str	r1, [r7, #16]
 800afe2:	4649      	mov	r1, r9
 800afe4:	414b      	adcs	r3, r1
 800afe6:	617b      	str	r3, [r7, #20]
 800afe8:	f04f 0200 	mov.w	r2, #0
 800afec:	f04f 0300 	mov.w	r3, #0
 800aff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800aff4:	4659      	mov	r1, fp
 800aff6:	00cb      	lsls	r3, r1, #3
 800aff8:	4651      	mov	r1, sl
 800affa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800affe:	4651      	mov	r1, sl
 800b000:	00ca      	lsls	r2, r1, #3
 800b002:	4610      	mov	r0, r2
 800b004:	4619      	mov	r1, r3
 800b006:	4603      	mov	r3, r0
 800b008:	4642      	mov	r2, r8
 800b00a:	189b      	adds	r3, r3, r2
 800b00c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b010:	464b      	mov	r3, r9
 800b012:	460a      	mov	r2, r1
 800b014:	eb42 0303 	adc.w	r3, r2, r3
 800b018:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b026:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b028:	f04f 0200 	mov.w	r2, #0
 800b02c:	f04f 0300 	mov.w	r3, #0
 800b030:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b034:	4649      	mov	r1, r9
 800b036:	008b      	lsls	r3, r1, #2
 800b038:	4641      	mov	r1, r8
 800b03a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b03e:	4641      	mov	r1, r8
 800b040:	008a      	lsls	r2, r1, #2
 800b042:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b046:	f7f5 f8c7 	bl	80001d8 <__aeabi_uldivmod>
 800b04a:	4602      	mov	r2, r0
 800b04c:	460b      	mov	r3, r1
 800b04e:	4611      	mov	r1, r2
 800b050:	4b38      	ldr	r3, [pc, #224]	@ (800b134 <UART_SetConfig+0x4e4>)
 800b052:	fba3 2301 	umull	r2, r3, r3, r1
 800b056:	095b      	lsrs	r3, r3, #5
 800b058:	2264      	movs	r2, #100	@ 0x64
 800b05a:	fb02 f303 	mul.w	r3, r2, r3
 800b05e:	1acb      	subs	r3, r1, r3
 800b060:	011b      	lsls	r3, r3, #4
 800b062:	3332      	adds	r3, #50	@ 0x32
 800b064:	4a33      	ldr	r2, [pc, #204]	@ (800b134 <UART_SetConfig+0x4e4>)
 800b066:	fba2 2303 	umull	r2, r3, r2, r3
 800b06a:	095b      	lsrs	r3, r3, #5
 800b06c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b070:	441c      	add	r4, r3
 800b072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b076:	2200      	movs	r2, #0
 800b078:	673b      	str	r3, [r7, #112]	@ 0x70
 800b07a:	677a      	str	r2, [r7, #116]	@ 0x74
 800b07c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b080:	4642      	mov	r2, r8
 800b082:	464b      	mov	r3, r9
 800b084:	1891      	adds	r1, r2, r2
 800b086:	60b9      	str	r1, [r7, #8]
 800b088:	415b      	adcs	r3, r3
 800b08a:	60fb      	str	r3, [r7, #12]
 800b08c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b090:	4641      	mov	r1, r8
 800b092:	1851      	adds	r1, r2, r1
 800b094:	6039      	str	r1, [r7, #0]
 800b096:	4649      	mov	r1, r9
 800b098:	414b      	adcs	r3, r1
 800b09a:	607b      	str	r3, [r7, #4]
 800b09c:	f04f 0200 	mov.w	r2, #0
 800b0a0:	f04f 0300 	mov.w	r3, #0
 800b0a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b0a8:	4659      	mov	r1, fp
 800b0aa:	00cb      	lsls	r3, r1, #3
 800b0ac:	4651      	mov	r1, sl
 800b0ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0b2:	4651      	mov	r1, sl
 800b0b4:	00ca      	lsls	r2, r1, #3
 800b0b6:	4610      	mov	r0, r2
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	4642      	mov	r2, r8
 800b0be:	189b      	adds	r3, r3, r2
 800b0c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b0c2:	464b      	mov	r3, r9
 800b0c4:	460a      	mov	r2, r1
 800b0c6:	eb42 0303 	adc.w	r3, r2, r3
 800b0ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b0cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0d6:	667a      	str	r2, [r7, #100]	@ 0x64
 800b0d8:	f04f 0200 	mov.w	r2, #0
 800b0dc:	f04f 0300 	mov.w	r3, #0
 800b0e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b0e4:	4649      	mov	r1, r9
 800b0e6:	008b      	lsls	r3, r1, #2
 800b0e8:	4641      	mov	r1, r8
 800b0ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b0ee:	4641      	mov	r1, r8
 800b0f0:	008a      	lsls	r2, r1, #2
 800b0f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b0f6:	f7f5 f86f 	bl	80001d8 <__aeabi_uldivmod>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b134 <UART_SetConfig+0x4e4>)
 800b100:	fba3 1302 	umull	r1, r3, r3, r2
 800b104:	095b      	lsrs	r3, r3, #5
 800b106:	2164      	movs	r1, #100	@ 0x64
 800b108:	fb01 f303 	mul.w	r3, r1, r3
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	011b      	lsls	r3, r3, #4
 800b110:	3332      	adds	r3, #50	@ 0x32
 800b112:	4a08      	ldr	r2, [pc, #32]	@ (800b134 <UART_SetConfig+0x4e4>)
 800b114:	fba2 2303 	umull	r2, r3, r2, r3
 800b118:	095b      	lsrs	r3, r3, #5
 800b11a:	f003 020f 	and.w	r2, r3, #15
 800b11e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4422      	add	r2, r4
 800b126:	609a      	str	r2, [r3, #8]
}
 800b128:	bf00      	nop
 800b12a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b12e:	46bd      	mov	sp, r7
 800b130:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b134:	51eb851f 	.word	0x51eb851f

0800b138 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b138:	b084      	sub	sp, #16
 800b13a:	b480      	push	{r7}
 800b13c:	b085      	sub	sp, #20
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	f107 001c 	add.w	r0, r7, #28
 800b146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b14a:	2300      	movs	r3, #0
 800b14c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b14e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b150:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b152:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800b156:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800b15a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800b15e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800b162:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	4313      	orrs	r3, r2
 800b168:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800b172:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	431a      	orrs	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	b004      	add	sp, #16
 800b18c:	4770      	bx	lr

0800b18e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b18e:	b480      	push	{r7}
 800b190:	b083      	sub	sp, #12
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	370c      	adds	r7, #12
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b1ca:	b480      	push	{r7}
 800b1cc:	b083      	sub	sp, #12
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2203      	movs	r2, #3
 800b1d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	370c      	adds	r7, #12
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b083      	sub	sp, #12
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 0303 	and.w	r3, r3, #3
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	370c      	adds	r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b202:	b480      	push	{r7}
 800b204:	b085      	sub	sp, #20
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b220:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b226:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b22c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	4313      	orrs	r3, r2
 800b232:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800b23c:	f023 030f 	bic.w	r3, r3, #15
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	431a      	orrs	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr

0800b256 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b256:	b480      	push	{r7}
 800b258:	b083      	sub	sp, #12
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	b2db      	uxtb	r3, r3
}
 800b264:	4618      	mov	r0, r3
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	3314      	adds	r3, #20
 800b27e:	461a      	mov	r2, r3
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	4413      	add	r3, r2
 800b284:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
}  
 800b28a:	4618      	mov	r0, r3
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b296:	b480      	push	{r7}
 800b298:	b085      	sub	sp, #20
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	685a      	ldr	r2, [r3, #4]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b2bc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b2c2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b2c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d4:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	431a      	orrs	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b2e0:	2300      	movs	r3, #0

}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3714      	adds	r7, #20
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr

0800b2ee <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b088      	sub	sp, #32
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
 800b2f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b2fc:	2310      	movs	r3, #16
 800b2fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b300:	2340      	movs	r3, #64	@ 0x40
 800b302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b304:	2300      	movs	r3, #0
 800b306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b308:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b30c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b30e:	f107 0308 	add.w	r3, r7, #8
 800b312:	4619      	mov	r1, r3
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7ff ff74 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b31a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b31e:	2110      	movs	r1, #16
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f000 f9d7 	bl	800b6d4 <SDMMC_GetCmdResp1>
 800b326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b328:	69fb      	ldr	r3, [r7, #28]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3720      	adds	r7, #32
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b088      	sub	sp, #32
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b340:	2311      	movs	r3, #17
 800b342:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b344:	2340      	movs	r3, #64	@ 0x40
 800b346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b348:	2300      	movs	r3, #0
 800b34a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b34c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b350:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b352:	f107 0308 	add.w	r3, r7, #8
 800b356:	4619      	mov	r1, r3
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff ff52 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b35e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b362:	2111      	movs	r1, #17
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 f9b5 	bl	800b6d4 <SDMMC_GetCmdResp1>
 800b36a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b36c:	69fb      	ldr	r3, [r7, #28]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3720      	adds	r7, #32
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b376:	b580      	push	{r7, lr}
 800b378:	b088      	sub	sp, #32
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b384:	2312      	movs	r3, #18
 800b386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b388:	2340      	movs	r3, #64	@ 0x40
 800b38a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b38c:	2300      	movs	r3, #0
 800b38e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b394:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b396:	f107 0308 	add.w	r3, r7, #8
 800b39a:	4619      	mov	r1, r3
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f7ff ff30 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b3a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3a6:	2112      	movs	r1, #18
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 f993 	bl	800b6d4 <SDMMC_GetCmdResp1>
 800b3ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3b0:	69fb      	ldr	r3, [r7, #28]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3720      	adds	r7, #32
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b088      	sub	sp, #32
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b3c8:	2318      	movs	r3, #24
 800b3ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3cc:	2340      	movs	r3, #64	@ 0x40
 800b3ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3da:	f107 0308 	add.w	r3, r7, #8
 800b3de:	4619      	mov	r1, r3
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f7ff ff0e 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b3e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3ea:	2118      	movs	r1, #24
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 f971 	bl	800b6d4 <SDMMC_GetCmdResp1>
 800b3f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3f4:	69fb      	ldr	r3, [r7, #28]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3720      	adds	r7, #32
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b088      	sub	sp, #32
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b40c:	2319      	movs	r3, #25
 800b40e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b410:	2340      	movs	r3, #64	@ 0x40
 800b412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b414:	2300      	movs	r3, #0
 800b416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b418:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b41c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b41e:	f107 0308 	add.w	r3, r7, #8
 800b422:	4619      	mov	r1, r3
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7ff feec 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b42a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b42e:	2119      	movs	r1, #25
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 f94f 	bl	800b6d4 <SDMMC_GetCmdResp1>
 800b436:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b438:	69fb      	ldr	r3, [r7, #28]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3720      	adds	r7, #32
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
	...

0800b444 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b088      	sub	sp, #32
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b44c:	2300      	movs	r3, #0
 800b44e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b450:	230c      	movs	r3, #12
 800b452:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b454:	2340      	movs	r3, #64	@ 0x40
 800b456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b458:	2300      	movs	r3, #0
 800b45a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b45c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b460:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b462:	f107 0308 	add.w	r3, r7, #8
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7ff feca 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b46e:	4a05      	ldr	r2, [pc, #20]	@ (800b484 <SDMMC_CmdStopTransfer+0x40>)
 800b470:	210c      	movs	r1, #12
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 f92e 	bl	800b6d4 <SDMMC_GetCmdResp1>
 800b478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b47a:	69fb      	ldr	r3, [r7, #28]
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3720      	adds	r7, #32
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	05f5e100 	.word	0x05f5e100

0800b488 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b08a      	sub	sp, #40	@ 0x28
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b498:	2307      	movs	r3, #7
 800b49a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b49c:	2340      	movs	r3, #64	@ 0x40
 800b49e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4aa:	f107 0310 	add.w	r3, r7, #16
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f7ff fea6 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b4b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b4ba:	2107      	movs	r1, #7
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	f000 f909 	bl	800b6d4 <SDMMC_GetCmdResp1>
 800b4c2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3728      	adds	r7, #40	@ 0x28
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b088      	sub	sp, #32
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4ec:	f107 0308 	add.w	r3, r7, #8
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f7ff fe85 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 fb23 	bl	800bb44 <SDMMC_GetCmdError>
 800b4fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b500:	69fb      	ldr	r3, [r7, #28]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3720      	adds	r7, #32
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b088      	sub	sp, #32
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b512:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b518:	2308      	movs	r3, #8
 800b51a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b51c:	2340      	movs	r3, #64	@ 0x40
 800b51e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b520:	2300      	movs	r3, #0
 800b522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b524:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b528:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b52a:	f107 0308 	add.w	r3, r7, #8
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7ff fe66 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fab6 	bl	800baa8 <SDMMC_GetCmdResp7>
 800b53c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b53e:	69fb      	ldr	r3, [r7, #28]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3720      	adds	r7, #32
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b088      	sub	sp, #32
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b556:	2337      	movs	r3, #55	@ 0x37
 800b558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b55a:	2340      	movs	r3, #64	@ 0x40
 800b55c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b55e:	2300      	movs	r3, #0
 800b560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b566:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b568:	f107 0308 	add.w	r3, r7, #8
 800b56c:	4619      	mov	r1, r3
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f7ff fe47 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b574:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b578:	2137      	movs	r1, #55	@ 0x37
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 f8aa 	bl	800b6d4 <SDMMC_GetCmdResp1>
 800b580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b582:	69fb      	ldr	r3, [r7, #28]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3720      	adds	r7, #32
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b088      	sub	sp, #32
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b59c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b5a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b5a2:	2329      	movs	r3, #41	@ 0x29
 800b5a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b5a6:	2340      	movs	r3, #64	@ 0x40
 800b5a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5b4:	f107 0308 	add.w	r3, r7, #8
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7ff fe21 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f9bd 	bl	800b940 <SDMMC_GetCmdResp3>
 800b5c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5c8:	69fb      	ldr	r3, [r7, #28]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3720      	adds	r7, #32
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b088      	sub	sp, #32
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b5de:	2302      	movs	r3, #2
 800b5e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b5e2:	23c0      	movs	r3, #192	@ 0xc0
 800b5e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b5ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5f0:	f107 0308 	add.w	r3, r7, #8
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7ff fe03 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 f957 	bl	800b8b0 <SDMMC_GetCmdResp2>
 800b602:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b604:	69fb      	ldr	r3, [r7, #28]
}
 800b606:	4618      	mov	r0, r3
 800b608:	3720      	adds	r7, #32
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b088      	sub	sp, #32
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
 800b616:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b61c:	2309      	movs	r3, #9
 800b61e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b620:	23c0      	movs	r3, #192	@ 0xc0
 800b622:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b624:	2300      	movs	r3, #0
 800b626:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b62c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b62e:	f107 0308 	add.w	r3, r7, #8
 800b632:	4619      	mov	r1, r3
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f7ff fde4 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f938 	bl	800b8b0 <SDMMC_GetCmdResp2>
 800b640:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b642:	69fb      	ldr	r3, [r7, #28]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3720      	adds	r7, #32
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b088      	sub	sp, #32
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b656:	2300      	movs	r3, #0
 800b658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b65a:	2303      	movs	r3, #3
 800b65c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b65e:	2340      	movs	r3, #64	@ 0x40
 800b660:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b662:	2300      	movs	r3, #0
 800b664:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b66a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b66c:	f107 0308 	add.w	r3, r7, #8
 800b670:	4619      	mov	r1, r3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7ff fdc5 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	2103      	movs	r1, #3
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f99d 	bl	800b9bc <SDMMC_GetCmdResp6>
 800b682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b684:	69fb      	ldr	r3, [r7, #28]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3720      	adds	r7, #32
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b088      	sub	sp, #32
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b69c:	230d      	movs	r3, #13
 800b69e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b6a0:	2340      	movs	r3, #64	@ 0x40
 800b6a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b6a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b6ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b6ae:	f107 0308 	add.w	r3, r7, #8
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7ff fda4 	bl	800b202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b6ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6be:	210d      	movs	r1, #13
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f000 f807 	bl	800b6d4 <SDMMC_GetCmdResp1>
 800b6c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6c8:	69fb      	ldr	r3, [r7, #28]
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3720      	adds	r7, #32
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
	...

0800b6d4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b088      	sub	sp, #32
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	607a      	str	r2, [r7, #4]
 800b6e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b6e2:	4b70      	ldr	r3, [pc, #448]	@ (800b8a4 <SDMMC_GetCmdResp1+0x1d0>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a70      	ldr	r2, [pc, #448]	@ (800b8a8 <SDMMC_GetCmdResp1+0x1d4>)
 800b6e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ec:	0a5a      	lsrs	r2, r3, #9
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	fb02 f303 	mul.w	r3, r2, r3
 800b6f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	1e5a      	subs	r2, r3, #1
 800b6fa:	61fa      	str	r2, [r7, #28]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d102      	bne.n	800b706 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b700:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b704:	e0c9      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b70a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0ef      	beq.n	800b6f6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1ea      	bne.n	800b6f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b724:	f003 0304 	and.w	r3, r3, #4
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d004      	beq.n	800b736 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2204      	movs	r2, #4
 800b730:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b732:	2304      	movs	r3, #4
 800b734:	e0b1      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b73a:	f003 0301 	and.w	r3, r3, #1
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d004      	beq.n	800b74c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2201      	movs	r2, #1
 800b746:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b748:	2301      	movs	r3, #1
 800b74a:	e0a6      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	22c5      	movs	r2, #197	@ 0xc5
 800b750:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b752:	68f8      	ldr	r0, [r7, #12]
 800b754:	f7ff fd7f 	bl	800b256 <SDIO_GetCommandResponse>
 800b758:	4603      	mov	r3, r0
 800b75a:	461a      	mov	r2, r3
 800b75c:	7afb      	ldrb	r3, [r7, #11]
 800b75e:	4293      	cmp	r3, r2
 800b760:	d001      	beq.n	800b766 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b762:	2301      	movs	r3, #1
 800b764:	e099      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b766:	2100      	movs	r1, #0
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f7ff fd81 	bl	800b270 <SDIO_GetResponse>
 800b76e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b770:	697a      	ldr	r2, [r7, #20]
 800b772:	4b4e      	ldr	r3, [pc, #312]	@ (800b8ac <SDMMC_GetCmdResp1+0x1d8>)
 800b774:	4013      	ands	r3, r2
 800b776:	2b00      	cmp	r3, #0
 800b778:	d101      	bne.n	800b77e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b77a:	2300      	movs	r3, #0
 800b77c:	e08d      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	2b00      	cmp	r3, #0
 800b782:	da02      	bge.n	800b78a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b784:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b788:	e087      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b794:	2340      	movs	r3, #64	@ 0x40
 800b796:	e080      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b7a2:	2380      	movs	r3, #128	@ 0x80
 800b7a4:	e079      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b7b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b7b4:	e071      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d002      	beq.n	800b7c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b7c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7c4:	e069      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d002      	beq.n	800b7d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b7d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7d4:	e061      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d002      	beq.n	800b7e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b7e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b7e4:	e059      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d002      	beq.n	800b7f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b7f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b7f4:	e051      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b804:	e049      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d002      	beq.n	800b816 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b810:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b814:	e041      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b820:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b824:	e039      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b830:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b834:	e031      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b840:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800b844:	e029      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d002      	beq.n	800b856 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b850:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b854:	e021      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d002      	beq.n	800b866 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b860:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b864:	e019      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d002      	beq.n	800b876 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b870:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800b874:	e011      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d002      	beq.n	800b886 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b880:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800b884:	e009      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	f003 0308 	and.w	r3, r3, #8
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b890:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800b894:	e001      	b.n	800b89a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b896:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3720      	adds	r7, #32
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20000010 	.word	0x20000010
 800b8a8:	10624dd3 	.word	0x10624dd3
 800b8ac:	fdffe008 	.word	0xfdffe008

0800b8b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8b8:	4b1f      	ldr	r3, [pc, #124]	@ (800b938 <SDMMC_GetCmdResp2+0x88>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a1f      	ldr	r2, [pc, #124]	@ (800b93c <SDMMC_GetCmdResp2+0x8c>)
 800b8be:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c2:	0a5b      	lsrs	r3, r3, #9
 800b8c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8c8:	fb02 f303 	mul.w	r3, r2, r3
 800b8cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	1e5a      	subs	r2, r3, #1
 800b8d2:	60fa      	str	r2, [r7, #12]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d102      	bne.n	800b8de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b8dc:	e026      	b.n	800b92c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d0ef      	beq.n	800b8ce <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d1ea      	bne.n	800b8ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8fc:	f003 0304 	and.w	r3, r3, #4
 800b900:	2b00      	cmp	r3, #0
 800b902:	d004      	beq.n	800b90e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2204      	movs	r2, #4
 800b908:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b90a:	2304      	movs	r3, #4
 800b90c:	e00e      	b.n	800b92c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b912:	f003 0301 	and.w	r3, r3, #1
 800b916:	2b00      	cmp	r3, #0
 800b918:	d004      	beq.n	800b924 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2201      	movs	r2, #1
 800b91e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b920:	2301      	movs	r3, #1
 800b922:	e003      	b.n	800b92c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	22c5      	movs	r2, #197	@ 0xc5
 800b928:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	20000010 	.word	0x20000010
 800b93c:	10624dd3 	.word	0x10624dd3

0800b940 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b948:	4b1a      	ldr	r3, [pc, #104]	@ (800b9b4 <SDMMC_GetCmdResp3+0x74>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a1a      	ldr	r2, [pc, #104]	@ (800b9b8 <SDMMC_GetCmdResp3+0x78>)
 800b94e:	fba2 2303 	umull	r2, r3, r2, r3
 800b952:	0a5b      	lsrs	r3, r3, #9
 800b954:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b958:	fb02 f303 	mul.w	r3, r2, r3
 800b95c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	1e5a      	subs	r2, r3, #1
 800b962:	60fa      	str	r2, [r7, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d102      	bne.n	800b96e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b968:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b96c:	e01b      	b.n	800b9a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b972:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0ef      	beq.n	800b95e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b984:	2b00      	cmp	r3, #0
 800b986:	d1ea      	bne.n	800b95e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b98c:	f003 0304 	and.w	r3, r3, #4
 800b990:	2b00      	cmp	r3, #0
 800b992:	d004      	beq.n	800b99e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2204      	movs	r2, #4
 800b998:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b99a:	2304      	movs	r3, #4
 800b99c:	e003      	b.n	800b9a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	22c5      	movs	r2, #197	@ 0xc5
 800b9a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3714      	adds	r7, #20
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	20000010 	.word	0x20000010
 800b9b8:	10624dd3 	.word	0x10624dd3

0800b9bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b088      	sub	sp, #32
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9ca:	4b35      	ldr	r3, [pc, #212]	@ (800baa0 <SDMMC_GetCmdResp6+0xe4>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a35      	ldr	r2, [pc, #212]	@ (800baa4 <SDMMC_GetCmdResp6+0xe8>)
 800b9d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d4:	0a5b      	lsrs	r3, r3, #9
 800b9d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9da:	fb02 f303 	mul.w	r3, r2, r3
 800b9de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	1e5a      	subs	r2, r3, #1
 800b9e4:	61fa      	str	r2, [r7, #28]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d102      	bne.n	800b9f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9ea:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b9ee:	e052      	b.n	800ba96 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d0ef      	beq.n	800b9e0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d1ea      	bne.n	800b9e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba0e:	f003 0304 	and.w	r3, r3, #4
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d004      	beq.n	800ba20 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2204      	movs	r2, #4
 800ba1a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba1c:	2304      	movs	r3, #4
 800ba1e:	e03a      	b.n	800ba96 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba24:	f003 0301 	and.w	r3, r3, #1
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d004      	beq.n	800ba36 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e02f      	b.n	800ba96 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f7ff fc0d 	bl	800b256 <SDIO_GetCommandResponse>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	461a      	mov	r2, r3
 800ba40:	7afb      	ldrb	r3, [r7, #11]
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d001      	beq.n	800ba4a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e025      	b.n	800ba96 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	22c5      	movs	r2, #197	@ 0xc5
 800ba4e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ba50:	2100      	movs	r1, #0
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f7ff fc0c 	bl	800b270 <SDIO_GetResponse>
 800ba58:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d106      	bne.n	800ba72 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	0c1b      	lsrs	r3, r3, #16
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	e011      	b.n	800ba96 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d002      	beq.n	800ba82 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ba80:	e009      	b.n	800ba96 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ba90:	e001      	b.n	800ba96 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ba92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3720      	adds	r7, #32
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	20000010 	.word	0x20000010
 800baa4:	10624dd3 	.word	0x10624dd3

0800baa8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bab0:	4b22      	ldr	r3, [pc, #136]	@ (800bb3c <SDMMC_GetCmdResp7+0x94>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a22      	ldr	r2, [pc, #136]	@ (800bb40 <SDMMC_GetCmdResp7+0x98>)
 800bab6:	fba2 2303 	umull	r2, r3, r2, r3
 800baba:	0a5b      	lsrs	r3, r3, #9
 800babc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bac0:	fb02 f303 	mul.w	r3, r2, r3
 800bac4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	1e5a      	subs	r2, r3, #1
 800baca:	60fa      	str	r2, [r7, #12]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d102      	bne.n	800bad6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bad0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bad4:	e02c      	b.n	800bb30 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bada:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d0ef      	beq.n	800bac6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1ea      	bne.n	800bac6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baf4:	f003 0304 	and.w	r3, r3, #4
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d004      	beq.n	800bb06 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2204      	movs	r2, #4
 800bb00:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb02:	2304      	movs	r3, #4
 800bb04:	e014      	b.n	800bb30 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb0a:	f003 0301 	and.w	r3, r3, #1
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d004      	beq.n	800bb1c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2201      	movs	r2, #1
 800bb16:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e009      	b.n	800bb30 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d002      	beq.n	800bb2e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2240      	movs	r2, #64	@ 0x40
 800bb2c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bb2e:	2300      	movs	r3, #0
  
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	20000010 	.word	0x20000010
 800bb40:	10624dd3 	.word	0x10624dd3

0800bb44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb4c:	4b11      	ldr	r3, [pc, #68]	@ (800bb94 <SDMMC_GetCmdError+0x50>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a11      	ldr	r2, [pc, #68]	@ (800bb98 <SDMMC_GetCmdError+0x54>)
 800bb52:	fba2 2303 	umull	r2, r3, r2, r3
 800bb56:	0a5b      	lsrs	r3, r3, #9
 800bb58:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb5c:	fb02 f303 	mul.w	r3, r2, r3
 800bb60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	1e5a      	subs	r2, r3, #1
 800bb66:	60fa      	str	r2, [r7, #12]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d102      	bne.n	800bb72 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb6c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bb70:	e009      	b.n	800bb86 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d0f1      	beq.n	800bb62 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	22c5      	movs	r2, #197	@ 0xc5
 800bb82:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3714      	adds	r7, #20
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	20000010 	.word	0x20000010
 800bb98:	10624dd3 	.word	0x10624dd3

0800bb9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bba0:	4904      	ldr	r1, [pc, #16]	@ (800bbb4 <MX_FATFS_Init+0x18>)
 800bba2:	4805      	ldr	r0, [pc, #20]	@ (800bbb8 <MX_FATFS_Init+0x1c>)
 800bba4:	f003 f886 	bl	800ecb4 <FATFS_LinkDriver>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	461a      	mov	r2, r3
 800bbac:	4b03      	ldr	r3, [pc, #12]	@ (800bbbc <MX_FATFS_Init+0x20>)
 800bbae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bbb0:	bf00      	nop
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	20014738 	.word	0x20014738
 800bbb8:	0801003c 	.word	0x0801003c
 800bbbc:	20014734 	.word	0x20014734

0800bbc0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bbc4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bbda:	f000 f86b 	bl	800bcb4 <BSP_SD_IsDetected>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d001      	beq.n	800bbe8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e005      	b.n	800bbf4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bbe8:	4804      	ldr	r0, [pc, #16]	@ (800bbfc <BSP_SD_Init+0x2c>)
 800bbea:	f7fb f977 	bl	8006edc <HAL_SD_Init>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800bbf2:	79fb      	ldrb	r3, [r7, #7]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3708      	adds	r7, #8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	200141f8 	.word	0x200141f8

0800bc00 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b088      	sub	sp, #32
 800bc04:	af02      	add	r7, sp, #8
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	607a      	str	r2, [r7, #4]
 800bc0c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68ba      	ldr	r2, [r7, #8]
 800bc1a:	68f9      	ldr	r1, [r7, #12]
 800bc1c:	4806      	ldr	r0, [pc, #24]	@ (800bc38 <BSP_SD_ReadBlocks+0x38>)
 800bc1e:	f7fb fa0d 	bl	800703c <HAL_SD_ReadBlocks>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d001      	beq.n	800bc2c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bc2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3718      	adds	r7, #24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	200141f8 	.word	0x200141f8

0800bc3c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b088      	sub	sp, #32
 800bc40:	af02      	add	r7, sp, #8
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
 800bc48:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	9300      	str	r3, [sp, #0]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	68f9      	ldr	r1, [r7, #12]
 800bc58:	4806      	ldr	r0, [pc, #24]	@ (800bc74 <BSP_SD_WriteBlocks+0x38>)
 800bc5a:	f7fb fbd5 	bl	8007408 <HAL_SD_WriteBlocks>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d001      	beq.n	800bc68 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bc68:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3718      	adds	r7, #24
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	200141f8 	.word	0x200141f8

0800bc78 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bc7c:	4805      	ldr	r0, [pc, #20]	@ (800bc94 <BSP_SD_GetCardState+0x1c>)
 800bc7e:	f7fb ff21 	bl	8007ac4 <HAL_SD_GetCardState>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b04      	cmp	r3, #4
 800bc86:	bf14      	ite	ne
 800bc88:	2301      	movne	r3, #1
 800bc8a:	2300      	moveq	r3, #0
 800bc8c:	b2db      	uxtb	r3, r3
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	200141f8 	.word	0x200141f8

0800bc98 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800bca0:	6879      	ldr	r1, [r7, #4]
 800bca2:	4803      	ldr	r0, [pc, #12]	@ (800bcb0 <BSP_SD_GetCardInfo+0x18>)
 800bca4:	f7fb fee2 	bl	8007a6c <HAL_SD_GetCardInfo>
}
 800bca8:	bf00      	nop
 800bcaa:	3708      	adds	r7, #8
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}
 800bcb0:	200141f8 	.word	0x200141f8

0800bcb4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800bcbe:	79fb      	ldrb	r3, [r7, #7]
 800bcc0:	b2db      	uxtb	r3, r3
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	370c      	adds	r7, #12
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
	...

0800bcd0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bcda:	4b0b      	ldr	r3, [pc, #44]	@ (800bd08 <SD_CheckStatus+0x38>)
 800bcdc:	2201      	movs	r2, #1
 800bcde:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bce0:	f7ff ffca 	bl	800bc78 <BSP_SD_GetCardState>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d107      	bne.n	800bcfa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bcea:	4b07      	ldr	r3, [pc, #28]	@ (800bd08 <SD_CheckStatus+0x38>)
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	f023 0301 	bic.w	r3, r3, #1
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	4b04      	ldr	r3, [pc, #16]	@ (800bd08 <SD_CheckStatus+0x38>)
 800bcf8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bcfa:	4b03      	ldr	r3, [pc, #12]	@ (800bd08 <SD_CheckStatus+0x38>)
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	b2db      	uxtb	r3, r3
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	20000019 	.word	0x20000019

0800bd0c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	4603      	mov	r3, r0
 800bd14:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bd16:	4b0b      	ldr	r3, [pc, #44]	@ (800bd44 <SD_initialize+0x38>)
 800bd18:	2201      	movs	r2, #1
 800bd1a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bd1c:	f7ff ff58 	bl	800bbd0 <BSP_SD_Init>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d107      	bne.n	800bd36 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800bd26:	79fb      	ldrb	r3, [r7, #7]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7ff ffd1 	bl	800bcd0 <SD_CheckStatus>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	461a      	mov	r2, r3
 800bd32:	4b04      	ldr	r3, [pc, #16]	@ (800bd44 <SD_initialize+0x38>)
 800bd34:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bd36:	4b03      	ldr	r3, [pc, #12]	@ (800bd44 <SD_initialize+0x38>)
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	b2db      	uxtb	r3, r3
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	20000019 	.word	0x20000019

0800bd48 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	4603      	mov	r3, r0
 800bd50:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bd52:	79fb      	ldrb	r3, [r7, #7]
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7ff ffbb 	bl	800bcd0 <SD_CheckStatus>
 800bd5a:	4603      	mov	r3, r0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b086      	sub	sp, #24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	60b9      	str	r1, [r7, #8]
 800bd6c:	607a      	str	r2, [r7, #4]
 800bd6e:	603b      	str	r3, [r7, #0]
 800bd70:	4603      	mov	r3, r0
 800bd72:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bd74:	2301      	movs	r3, #1
 800bd76:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bd78:	f04f 33ff 	mov.w	r3, #4294967295
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	6879      	ldr	r1, [r7, #4]
 800bd80:	68b8      	ldr	r0, [r7, #8]
 800bd82:	f7ff ff3d 	bl	800bc00 <BSP_SD_ReadBlocks>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d107      	bne.n	800bd9c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bd8c:	bf00      	nop
 800bd8e:	f7ff ff73 	bl	800bc78 <BSP_SD_GetCardState>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1fa      	bne.n	800bd8e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bd9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b086      	sub	sp, #24
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	607a      	str	r2, [r7, #4]
 800bdb0:	603b      	str	r3, [r7, #0]
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800bdba:	f04f 33ff 	mov.w	r3, #4294967295
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	6879      	ldr	r1, [r7, #4]
 800bdc2:	68b8      	ldr	r0, [r7, #8]
 800bdc4:	f7ff ff3a 	bl	800bc3c <BSP_SD_WriteBlocks>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d107      	bne.n	800bdde <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800bdce:	bf00      	nop
 800bdd0:	f7ff ff52 	bl	800bc78 <BSP_SD_GetCardState>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d1fa      	bne.n	800bdd0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bdde:	7dfb      	ldrb	r3, [r7, #23]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3718      	adds	r7, #24
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b08c      	sub	sp, #48	@ 0x30
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	603a      	str	r2, [r7, #0]
 800bdf2:	71fb      	strb	r3, [r7, #7]
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bdfe:	4b25      	ldr	r3, [pc, #148]	@ (800be94 <SD_ioctl+0xac>)
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	b2db      	uxtb	r3, r3
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d001      	beq.n	800be10 <SD_ioctl+0x28>
 800be0c:	2303      	movs	r3, #3
 800be0e:	e03c      	b.n	800be8a <SD_ioctl+0xa2>

  switch (cmd)
 800be10:	79bb      	ldrb	r3, [r7, #6]
 800be12:	2b03      	cmp	r3, #3
 800be14:	d834      	bhi.n	800be80 <SD_ioctl+0x98>
 800be16:	a201      	add	r2, pc, #4	@ (adr r2, 800be1c <SD_ioctl+0x34>)
 800be18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1c:	0800be2d 	.word	0x0800be2d
 800be20:	0800be35 	.word	0x0800be35
 800be24:	0800be4d 	.word	0x0800be4d
 800be28:	0800be67 	.word	0x0800be67
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800be2c:	2300      	movs	r3, #0
 800be2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800be32:	e028      	b.n	800be86 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800be34:	f107 030c 	add.w	r3, r7, #12
 800be38:	4618      	mov	r0, r3
 800be3a:	f7ff ff2d 	bl	800bc98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800be3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800be44:	2300      	movs	r3, #0
 800be46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800be4a:	e01c      	b.n	800be86 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800be4c:	f107 030c 	add.w	r3, r7, #12
 800be50:	4618      	mov	r0, r3
 800be52:	f7ff ff21 	bl	800bc98 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800be56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be58:	b29a      	uxth	r2, r3
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800be64:	e00f      	b.n	800be86 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800be66:	f107 030c 	add.w	r3, r7, #12
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7ff ff14 	bl	800bc98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800be70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be72:	0a5a      	lsrs	r2, r3, #9
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800be78:	2300      	movs	r3, #0
 800be7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800be7e:	e002      	b.n	800be86 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800be80:	2304      	movs	r3, #4
 800be82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800be86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3730      	adds	r7, #48	@ 0x30
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	20000019 	.word	0x20000019

0800be98 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	4603      	mov	r3, r0
 800bea0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bea2:	79fb      	ldrb	r3, [r7, #7]
 800bea4:	4a08      	ldr	r2, [pc, #32]	@ (800bec8 <disk_status+0x30>)
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	685b      	ldr	r3, [r3, #4]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	79fa      	ldrb	r2, [r7, #7]
 800beb0:	4905      	ldr	r1, [pc, #20]	@ (800bec8 <disk_status+0x30>)
 800beb2:	440a      	add	r2, r1
 800beb4:	7a12      	ldrb	r2, [r2, #8]
 800beb6:	4610      	mov	r0, r2
 800beb8:	4798      	blx	r3
 800beba:	4603      	mov	r3, r0
 800bebc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bebe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	20014764 	.word	0x20014764

0800becc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	4603      	mov	r3, r0
 800bed4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800beda:	79fb      	ldrb	r3, [r7, #7]
 800bedc:	4a0e      	ldr	r2, [pc, #56]	@ (800bf18 <disk_initialize+0x4c>)
 800bede:	5cd3      	ldrb	r3, [r2, r3]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d114      	bne.n	800bf0e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bee4:	79fb      	ldrb	r3, [r7, #7]
 800bee6:	4a0c      	ldr	r2, [pc, #48]	@ (800bf18 <disk_initialize+0x4c>)
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4413      	add	r3, r2
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	79fa      	ldrb	r2, [r7, #7]
 800bef2:	4909      	ldr	r1, [pc, #36]	@ (800bf18 <disk_initialize+0x4c>)
 800bef4:	440a      	add	r2, r1
 800bef6:	7a12      	ldrb	r2, [r2, #8]
 800bef8:	4610      	mov	r0, r2
 800befa:	4798      	blx	r3
 800befc:	4603      	mov	r3, r0
 800befe:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800bf00:	7bfb      	ldrb	r3, [r7, #15]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d103      	bne.n	800bf0e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800bf06:	79fb      	ldrb	r3, [r7, #7]
 800bf08:	4a03      	ldr	r2, [pc, #12]	@ (800bf18 <disk_initialize+0x4c>)
 800bf0a:	2101      	movs	r1, #1
 800bf0c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800bf0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	20014764 	.word	0x20014764

0800bf1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bf1c:	b590      	push	{r4, r7, lr}
 800bf1e:	b087      	sub	sp, #28
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60b9      	str	r1, [r7, #8]
 800bf24:	607a      	str	r2, [r7, #4]
 800bf26:	603b      	str	r3, [r7, #0]
 800bf28:	4603      	mov	r3, r0
 800bf2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bf2c:	7bfb      	ldrb	r3, [r7, #15]
 800bf2e:	4a0a      	ldr	r2, [pc, #40]	@ (800bf58 <disk_read+0x3c>)
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	4413      	add	r3, r2
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	689c      	ldr	r4, [r3, #8]
 800bf38:	7bfb      	ldrb	r3, [r7, #15]
 800bf3a:	4a07      	ldr	r2, [pc, #28]	@ (800bf58 <disk_read+0x3c>)
 800bf3c:	4413      	add	r3, r2
 800bf3e:	7a18      	ldrb	r0, [r3, #8]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	68b9      	ldr	r1, [r7, #8]
 800bf46:	47a0      	blx	r4
 800bf48:	4603      	mov	r3, r0
 800bf4a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	371c      	adds	r7, #28
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd90      	pop	{r4, r7, pc}
 800bf56:	bf00      	nop
 800bf58:	20014764 	.word	0x20014764

0800bf5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bf5c:	b590      	push	{r4, r7, lr}
 800bf5e:	b087      	sub	sp, #28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60b9      	str	r1, [r7, #8]
 800bf64:	607a      	str	r2, [r7, #4]
 800bf66:	603b      	str	r3, [r7, #0]
 800bf68:	4603      	mov	r3, r0
 800bf6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
 800bf6e:	4a0a      	ldr	r2, [pc, #40]	@ (800bf98 <disk_write+0x3c>)
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	68dc      	ldr	r4, [r3, #12]
 800bf78:	7bfb      	ldrb	r3, [r7, #15]
 800bf7a:	4a07      	ldr	r2, [pc, #28]	@ (800bf98 <disk_write+0x3c>)
 800bf7c:	4413      	add	r3, r2
 800bf7e:	7a18      	ldrb	r0, [r3, #8]
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	68b9      	ldr	r1, [r7, #8]
 800bf86:	47a0      	blx	r4
 800bf88:	4603      	mov	r3, r0
 800bf8a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	371c      	adds	r7, #28
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd90      	pop	{r4, r7, pc}
 800bf96:	bf00      	nop
 800bf98:	20014764 	.word	0x20014764

0800bf9c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	603a      	str	r2, [r7, #0]
 800bfa6:	71fb      	strb	r3, [r7, #7]
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bfac:	79fb      	ldrb	r3, [r7, #7]
 800bfae:	4a09      	ldr	r2, [pc, #36]	@ (800bfd4 <disk_ioctl+0x38>)
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4413      	add	r3, r2
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	79fa      	ldrb	r2, [r7, #7]
 800bfba:	4906      	ldr	r1, [pc, #24]	@ (800bfd4 <disk_ioctl+0x38>)
 800bfbc:	440a      	add	r2, r1
 800bfbe:	7a10      	ldrb	r0, [r2, #8]
 800bfc0:	79b9      	ldrb	r1, [r7, #6]
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	4798      	blx	r3
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	73fb      	strb	r3, [r7, #15]
  return res;
 800bfca:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	20014764 	.word	0x20014764

0800bfd8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bfe8:	89fb      	ldrh	r3, [r7, #14]
 800bfea:	021b      	lsls	r3, r3, #8
 800bfec:	b21a      	sxth	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	b21b      	sxth	r3, r3
 800bff4:	4313      	orrs	r3, r2
 800bff6:	b21b      	sxth	r3, r3
 800bff8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bffa:	89fb      	ldrh	r3, [r7, #14]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	3303      	adds	r3, #3
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	021b      	lsls	r3, r3, #8
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	3202      	adds	r2, #2
 800c020:	7812      	ldrb	r2, [r2, #0]
 800c022:	4313      	orrs	r3, r2
 800c024:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	021b      	lsls	r3, r3, #8
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	3201      	adds	r2, #1
 800c02e:	7812      	ldrb	r2, [r2, #0]
 800c030:	4313      	orrs	r3, r2
 800c032:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	021b      	lsls	r3, r3, #8
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	7812      	ldrb	r2, [r2, #0]
 800c03c:	4313      	orrs	r3, r2
 800c03e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c040:	68fb      	ldr	r3, [r7, #12]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3714      	adds	r7, #20
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr

0800c04e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c04e:	b480      	push	{r7}
 800c050:	b083      	sub	sp, #12
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	460b      	mov	r3, r1
 800c058:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	1c5a      	adds	r2, r3, #1
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	887a      	ldrh	r2, [r7, #2]
 800c062:	b2d2      	uxtb	r2, r2
 800c064:	701a      	strb	r2, [r3, #0]
 800c066:	887b      	ldrh	r3, [r7, #2]
 800c068:	0a1b      	lsrs	r3, r3, #8
 800c06a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	1c5a      	adds	r2, r3, #1
 800c070:	607a      	str	r2, [r7, #4]
 800c072:	887a      	ldrh	r2, [r7, #2]
 800c074:	b2d2      	uxtb	r2, r2
 800c076:	701a      	strb	r2, [r3, #0]
}
 800c078:	bf00      	nop
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	1c5a      	adds	r2, r3, #1
 800c092:	607a      	str	r2, [r7, #4]
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	b2d2      	uxtb	r2, r2
 800c098:	701a      	strb	r2, [r3, #0]
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	0a1b      	lsrs	r3, r3, #8
 800c09e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	1c5a      	adds	r2, r3, #1
 800c0a4:	607a      	str	r2, [r7, #4]
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	b2d2      	uxtb	r2, r2
 800c0aa:	701a      	strb	r2, [r3, #0]
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	0a1b      	lsrs	r3, r3, #8
 800c0b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	1c5a      	adds	r2, r3, #1
 800c0b6:	607a      	str	r2, [r7, #4]
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	b2d2      	uxtb	r2, r2
 800c0bc:	701a      	strb	r2, [r3, #0]
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	0a1b      	lsrs	r3, r3, #8
 800c0c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	1c5a      	adds	r2, r3, #1
 800c0c8:	607a      	str	r2, [r7, #4]
 800c0ca:	683a      	ldr	r2, [r7, #0]
 800c0cc:	b2d2      	uxtb	r2, r2
 800c0ce:	701a      	strb	r2, [r3, #0]
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c0dc:	b480      	push	{r7}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00d      	beq.n	800c112 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	1c53      	adds	r3, r2, #1
 800c0fa:	613b      	str	r3, [r7, #16]
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	1c59      	adds	r1, r3, #1
 800c100:	6179      	str	r1, [r7, #20]
 800c102:	7812      	ldrb	r2, [r2, #0]
 800c104:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	3b01      	subs	r3, #1
 800c10a:	607b      	str	r3, [r7, #4]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1f1      	bne.n	800c0f6 <mem_cpy+0x1a>
	}
}
 800c112:	bf00      	nop
 800c114:	371c      	adds	r7, #28
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr

0800c11e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c11e:	b480      	push	{r7}
 800c120:	b087      	sub	sp, #28
 800c122:	af00      	add	r7, sp, #0
 800c124:	60f8      	str	r0, [r7, #12]
 800c126:	60b9      	str	r1, [r7, #8]
 800c128:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	1c5a      	adds	r2, r3, #1
 800c132:	617a      	str	r2, [r7, #20]
 800c134:	68ba      	ldr	r2, [r7, #8]
 800c136:	b2d2      	uxtb	r2, r2
 800c138:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	3b01      	subs	r3, #1
 800c13e:	607b      	str	r3, [r7, #4]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1f3      	bne.n	800c12e <mem_set+0x10>
}
 800c146:	bf00      	nop
 800c148:	bf00      	nop
 800c14a:	371c      	adds	r7, #28
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c154:	b480      	push	{r7}
 800c156:	b089      	sub	sp, #36	@ 0x24
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60f8      	str	r0, [r7, #12]
 800c15c:	60b9      	str	r1, [r7, #8]
 800c15e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	61fb      	str	r3, [r7, #28]
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	1c5a      	adds	r2, r3, #1
 800c170:	61fa      	str	r2, [r7, #28]
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	4619      	mov	r1, r3
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	1c5a      	adds	r2, r3, #1
 800c17a:	61ba      	str	r2, [r7, #24]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	1acb      	subs	r3, r1, r3
 800c180:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	3b01      	subs	r3, #1
 800c186:	607b      	str	r3, [r7, #4]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d002      	beq.n	800c194 <mem_cmp+0x40>
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d0eb      	beq.n	800c16c <mem_cmp+0x18>

	return r;
 800c194:	697b      	ldr	r3, [r7, #20]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3724      	adds	r7, #36	@ 0x24
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c1a2:	b480      	push	{r7}
 800c1a4:	b083      	sub	sp, #12
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
 800c1aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c1ac:	e002      	b.n	800c1b4 <chk_chr+0x12>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	607b      	str	r3, [r7, #4]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d005      	beq.n	800c1c8 <chk_chr+0x26>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	781b      	ldrb	r3, [r3, #0]
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d1f2      	bne.n	800c1ae <chk_chr+0xc>
	return *str;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60bb      	str	r3, [r7, #8]
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	60fb      	str	r3, [r7, #12]
 800c1ea:	e029      	b.n	800c240 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c1ec:	4a27      	ldr	r2, [pc, #156]	@ (800c28c <chk_lock+0xb4>)
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	011b      	lsls	r3, r3, #4
 800c1f2:	4413      	add	r3, r2
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d01d      	beq.n	800c236 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c1fa:	4a24      	ldr	r2, [pc, #144]	@ (800c28c <chk_lock+0xb4>)
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	011b      	lsls	r3, r3, #4
 800c200:	4413      	add	r3, r2
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d116      	bne.n	800c23a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c20c:	4a1f      	ldr	r2, [pc, #124]	@ (800c28c <chk_lock+0xb4>)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	011b      	lsls	r3, r3, #4
 800c212:	4413      	add	r3, r2
 800c214:	3304      	adds	r3, #4
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d10c      	bne.n	800c23a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c220:	4a1a      	ldr	r2, [pc, #104]	@ (800c28c <chk_lock+0xb4>)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	011b      	lsls	r3, r3, #4
 800c226:	4413      	add	r3, r2
 800c228:	3308      	adds	r3, #8
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c230:	429a      	cmp	r2, r3
 800c232:	d102      	bne.n	800c23a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c234:	e007      	b.n	800c246 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c236:	2301      	movs	r3, #1
 800c238:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	3301      	adds	r3, #1
 800c23e:	60fb      	str	r3, [r7, #12]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2b01      	cmp	r3, #1
 800c244:	d9d2      	bls.n	800c1ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d109      	bne.n	800c260 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d102      	bne.n	800c258 <chk_lock+0x80>
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	2b02      	cmp	r3, #2
 800c256:	d101      	bne.n	800c25c <chk_lock+0x84>
 800c258:	2300      	movs	r3, #0
 800c25a:	e010      	b.n	800c27e <chk_lock+0xa6>
 800c25c:	2312      	movs	r3, #18
 800c25e:	e00e      	b.n	800c27e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d108      	bne.n	800c278 <chk_lock+0xa0>
 800c266:	4a09      	ldr	r2, [pc, #36]	@ (800c28c <chk_lock+0xb4>)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	011b      	lsls	r3, r3, #4
 800c26c:	4413      	add	r3, r2
 800c26e:	330c      	adds	r3, #12
 800c270:	881b      	ldrh	r3, [r3, #0]
 800c272:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c276:	d101      	bne.n	800c27c <chk_lock+0xa4>
 800c278:	2310      	movs	r3, #16
 800c27a:	e000      	b.n	800c27e <chk_lock+0xa6>
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3714      	adds	r7, #20
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	20014744 	.word	0x20014744

0800c290 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c296:	2300      	movs	r3, #0
 800c298:	607b      	str	r3, [r7, #4]
 800c29a:	e002      	b.n	800c2a2 <enq_lock+0x12>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	607b      	str	r3, [r7, #4]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d806      	bhi.n	800c2b6 <enq_lock+0x26>
 800c2a8:	4a09      	ldr	r2, [pc, #36]	@ (800c2d0 <enq_lock+0x40>)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	011b      	lsls	r3, r3, #4
 800c2ae:	4413      	add	r3, r2
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d1f2      	bne.n	800c29c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b02      	cmp	r3, #2
 800c2ba:	bf14      	ite	ne
 800c2bc:	2301      	movne	r3, #1
 800c2be:	2300      	moveq	r3, #0
 800c2c0:	b2db      	uxtb	r3, r3
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	20014744 	.word	0x20014744

0800c2d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b085      	sub	sp, #20
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c2de:	2300      	movs	r3, #0
 800c2e0:	60fb      	str	r3, [r7, #12]
 800c2e2:	e01f      	b.n	800c324 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c2e4:	4a41      	ldr	r2, [pc, #260]	@ (800c3ec <inc_lock+0x118>)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	011b      	lsls	r3, r3, #4
 800c2ea:	4413      	add	r3, r2
 800c2ec:	681a      	ldr	r2, [r3, #0]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d113      	bne.n	800c31e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c2f6:	4a3d      	ldr	r2, [pc, #244]	@ (800c3ec <inc_lock+0x118>)
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	011b      	lsls	r3, r3, #4
 800c2fc:	4413      	add	r3, r2
 800c2fe:	3304      	adds	r3, #4
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c306:	429a      	cmp	r2, r3
 800c308:	d109      	bne.n	800c31e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c30a:	4a38      	ldr	r2, [pc, #224]	@ (800c3ec <inc_lock+0x118>)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	011b      	lsls	r3, r3, #4
 800c310:	4413      	add	r3, r2
 800c312:	3308      	adds	r3, #8
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d006      	beq.n	800c32c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3301      	adds	r3, #1
 800c322:	60fb      	str	r3, [r7, #12]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2b01      	cmp	r3, #1
 800c328:	d9dc      	bls.n	800c2e4 <inc_lock+0x10>
 800c32a:	e000      	b.n	800c32e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c32c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2b02      	cmp	r3, #2
 800c332:	d132      	bne.n	800c39a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c334:	2300      	movs	r3, #0
 800c336:	60fb      	str	r3, [r7, #12]
 800c338:	e002      	b.n	800c340 <inc_lock+0x6c>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3301      	adds	r3, #1
 800c33e:	60fb      	str	r3, [r7, #12]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2b01      	cmp	r3, #1
 800c344:	d806      	bhi.n	800c354 <inc_lock+0x80>
 800c346:	4a29      	ldr	r2, [pc, #164]	@ (800c3ec <inc_lock+0x118>)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	011b      	lsls	r3, r3, #4
 800c34c:	4413      	add	r3, r2
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d1f2      	bne.n	800c33a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2b02      	cmp	r3, #2
 800c358:	d101      	bne.n	800c35e <inc_lock+0x8a>
 800c35a:	2300      	movs	r3, #0
 800c35c:	e040      	b.n	800c3e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	4922      	ldr	r1, [pc, #136]	@ (800c3ec <inc_lock+0x118>)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	011b      	lsls	r3, r3, #4
 800c368:	440b      	add	r3, r1
 800c36a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	689a      	ldr	r2, [r3, #8]
 800c370:	491e      	ldr	r1, [pc, #120]	@ (800c3ec <inc_lock+0x118>)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	011b      	lsls	r3, r3, #4
 800c376:	440b      	add	r3, r1
 800c378:	3304      	adds	r3, #4
 800c37a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	695a      	ldr	r2, [r3, #20]
 800c380:	491a      	ldr	r1, [pc, #104]	@ (800c3ec <inc_lock+0x118>)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	011b      	lsls	r3, r3, #4
 800c386:	440b      	add	r3, r1
 800c388:	3308      	adds	r3, #8
 800c38a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c38c:	4a17      	ldr	r2, [pc, #92]	@ (800c3ec <inc_lock+0x118>)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	011b      	lsls	r3, r3, #4
 800c392:	4413      	add	r3, r2
 800c394:	330c      	adds	r3, #12
 800c396:	2200      	movs	r2, #0
 800c398:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d009      	beq.n	800c3b4 <inc_lock+0xe0>
 800c3a0:	4a12      	ldr	r2, [pc, #72]	@ (800c3ec <inc_lock+0x118>)
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	011b      	lsls	r3, r3, #4
 800c3a6:	4413      	add	r3, r2
 800c3a8:	330c      	adds	r3, #12
 800c3aa:	881b      	ldrh	r3, [r3, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d001      	beq.n	800c3b4 <inc_lock+0xe0>
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	e015      	b.n	800c3e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d108      	bne.n	800c3cc <inc_lock+0xf8>
 800c3ba:	4a0c      	ldr	r2, [pc, #48]	@ (800c3ec <inc_lock+0x118>)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	011b      	lsls	r3, r3, #4
 800c3c0:	4413      	add	r3, r2
 800c3c2:	330c      	adds	r3, #12
 800c3c4:	881b      	ldrh	r3, [r3, #0]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	b29a      	uxth	r2, r3
 800c3ca:	e001      	b.n	800c3d0 <inc_lock+0xfc>
 800c3cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c3d0:	4906      	ldr	r1, [pc, #24]	@ (800c3ec <inc_lock+0x118>)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	011b      	lsls	r3, r3, #4
 800c3d6:	440b      	add	r3, r1
 800c3d8:	330c      	adds	r3, #12
 800c3da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	3301      	adds	r3, #1
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3714      	adds	r7, #20
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr
 800c3ec:	20014744 	.word	0x20014744

0800c3f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	3b01      	subs	r3, #1
 800c3fc:	607b      	str	r3, [r7, #4]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d825      	bhi.n	800c450 <dec_lock+0x60>
		n = Files[i].ctr;
 800c404:	4a17      	ldr	r2, [pc, #92]	@ (800c464 <dec_lock+0x74>)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	011b      	lsls	r3, r3, #4
 800c40a:	4413      	add	r3, r2
 800c40c:	330c      	adds	r3, #12
 800c40e:	881b      	ldrh	r3, [r3, #0]
 800c410:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c412:	89fb      	ldrh	r3, [r7, #14]
 800c414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c418:	d101      	bne.n	800c41e <dec_lock+0x2e>
 800c41a:	2300      	movs	r3, #0
 800c41c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c41e:	89fb      	ldrh	r3, [r7, #14]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d002      	beq.n	800c42a <dec_lock+0x3a>
 800c424:	89fb      	ldrh	r3, [r7, #14]
 800c426:	3b01      	subs	r3, #1
 800c428:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c42a:	4a0e      	ldr	r2, [pc, #56]	@ (800c464 <dec_lock+0x74>)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	011b      	lsls	r3, r3, #4
 800c430:	4413      	add	r3, r2
 800c432:	330c      	adds	r3, #12
 800c434:	89fa      	ldrh	r2, [r7, #14]
 800c436:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c438:	89fb      	ldrh	r3, [r7, #14]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d105      	bne.n	800c44a <dec_lock+0x5a>
 800c43e:	4a09      	ldr	r2, [pc, #36]	@ (800c464 <dec_lock+0x74>)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	011b      	lsls	r3, r3, #4
 800c444:	4413      	add	r3, r2
 800c446:	2200      	movs	r2, #0
 800c448:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	737b      	strb	r3, [r7, #13]
 800c44e:	e001      	b.n	800c454 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c450:	2302      	movs	r3, #2
 800c452:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c454:	7b7b      	ldrb	r3, [r7, #13]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3714      	adds	r7, #20
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	20014744 	.word	0x20014744

0800c468 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c470:	2300      	movs	r3, #0
 800c472:	60fb      	str	r3, [r7, #12]
 800c474:	e010      	b.n	800c498 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c476:	4a0d      	ldr	r2, [pc, #52]	@ (800c4ac <clear_lock+0x44>)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	011b      	lsls	r3, r3, #4
 800c47c:	4413      	add	r3, r2
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	429a      	cmp	r2, r3
 800c484:	d105      	bne.n	800c492 <clear_lock+0x2a>
 800c486:	4a09      	ldr	r2, [pc, #36]	@ (800c4ac <clear_lock+0x44>)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	011b      	lsls	r3, r3, #4
 800c48c:	4413      	add	r3, r2
 800c48e:	2200      	movs	r2, #0
 800c490:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	3301      	adds	r3, #1
 800c496:	60fb      	str	r3, [r7, #12]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d9eb      	bls.n	800c476 <clear_lock+0xe>
	}
}
 800c49e:	bf00      	nop
 800c4a0:	bf00      	nop
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr
 800c4ac:	20014744 	.word	0x20014744

0800c4b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	78db      	ldrb	r3, [r3, #3]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d034      	beq.n	800c52e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	7858      	ldrb	r0, [r3, #1]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	697a      	ldr	r2, [r7, #20]
 800c4d8:	f7ff fd40 	bl	800bf5c <disk_write>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d002      	beq.n	800c4e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	73fb      	strb	r3, [r7, #15]
 800c4e6:	e022      	b.n	800c52e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6a1b      	ldr	r3, [r3, #32]
 800c4f2:	697a      	ldr	r2, [r7, #20]
 800c4f4:	1ad2      	subs	r2, r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	699b      	ldr	r3, [r3, #24]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d217      	bcs.n	800c52e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	789b      	ldrb	r3, [r3, #2]
 800c502:	613b      	str	r3, [r7, #16]
 800c504:	e010      	b.n	800c528 <sync_window+0x78>
					wsect += fs->fsize;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	699b      	ldr	r3, [r3, #24]
 800c50a:	697a      	ldr	r2, [r7, #20]
 800c50c:	4413      	add	r3, r2
 800c50e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	7858      	ldrb	r0, [r3, #1]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c51a:	2301      	movs	r3, #1
 800c51c:	697a      	ldr	r2, [r7, #20]
 800c51e:	f7ff fd1d 	bl	800bf5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	3b01      	subs	r3, #1
 800c526:	613b      	str	r3, [r7, #16]
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d8eb      	bhi.n	800c506 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c530:	4618      	mov	r0, r3
 800c532:	3718      	adds	r7, #24
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c542:	2300      	movs	r3, #0
 800c544:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c54a:	683a      	ldr	r2, [r7, #0]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d01b      	beq.n	800c588 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7ff ffad 	bl	800c4b0 <sync_window>
 800c556:	4603      	mov	r3, r0
 800c558:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c55a:	7bfb      	ldrb	r3, [r7, #15]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d113      	bne.n	800c588 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	7858      	ldrb	r0, [r3, #1]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c56a:	2301      	movs	r3, #1
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	f7ff fcd5 	bl	800bf1c <disk_read>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d004      	beq.n	800c582 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c578:	f04f 33ff 	mov.w	r3, #4294967295
 800c57c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c57e:	2301      	movs	r3, #1
 800c580:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	683a      	ldr	r2, [r7, #0]
 800c586:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800c588:	7bfb      	ldrb	r3, [r7, #15]
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
	...

0800c594 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f7ff ff87 	bl	800c4b0 <sync_window>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c5a6:	7bfb      	ldrb	r3, [r7, #15]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d158      	bne.n	800c65e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	2b03      	cmp	r3, #3
 800c5b2:	d148      	bne.n	800c646 <sync_fs+0xb2>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	791b      	ldrb	r3, [r3, #4]
 800c5b8:	2b01      	cmp	r3, #1
 800c5ba:	d144      	bne.n	800c646 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	3330      	adds	r3, #48	@ 0x30
 800c5c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f7ff fda9 	bl	800c11e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	3330      	adds	r3, #48	@ 0x30
 800c5d0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c5d4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7ff fd38 	bl	800c04e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	3330      	adds	r3, #48	@ 0x30
 800c5e2:	4921      	ldr	r1, [pc, #132]	@ (800c668 <sync_fs+0xd4>)
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7ff fd4d 	bl	800c084 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	3330      	adds	r3, #48	@ 0x30
 800c5ee:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c5f2:	491e      	ldr	r1, [pc, #120]	@ (800c66c <sync_fs+0xd8>)
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7ff fd45 	bl	800c084 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	3330      	adds	r3, #48	@ 0x30
 800c5fe:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	4619      	mov	r1, r3
 800c608:	4610      	mov	r0, r2
 800c60a:	f7ff fd3b 	bl	800c084 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	3330      	adds	r3, #48	@ 0x30
 800c612:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	4619      	mov	r1, r3
 800c61c:	4610      	mov	r0, r2
 800c61e:	f7ff fd31 	bl	800c084 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	69db      	ldr	r3, [r3, #28]
 800c626:	1c5a      	adds	r2, r3, #1
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7858      	ldrb	r0, [r3, #1]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c63a:	2301      	movs	r3, #1
 800c63c:	f7ff fc8e 	bl	800bf5c <disk_write>
			fs->fsi_flag = 0;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	785b      	ldrb	r3, [r3, #1]
 800c64a:	2200      	movs	r2, #0
 800c64c:	2100      	movs	r1, #0
 800c64e:	4618      	mov	r0, r3
 800c650:	f7ff fca4 	bl	800bf9c <disk_ioctl>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d001      	beq.n	800c65e <sync_fs+0xca>
 800c65a:	2301      	movs	r3, #1
 800c65c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3710      	adds	r7, #16
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	41615252 	.word	0x41615252
 800c66c:	61417272 	.word	0x61417272

0800c670 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	3b02      	subs	r3, #2
 800c67e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	695b      	ldr	r3, [r3, #20]
 800c684:	3b02      	subs	r3, #2
 800c686:	683a      	ldr	r2, [r7, #0]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d301      	bcc.n	800c690 <clust2sect+0x20>
 800c68c:	2300      	movs	r3, #0
 800c68e:	e008      	b.n	800c6a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	895b      	ldrh	r3, [r3, #10]
 800c694:	461a      	mov	r2, r3
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	fb03 f202 	mul.w	r2, r3, r2
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6a0:	4413      	add	r3, r2
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b086      	sub	sp, #24
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d904      	bls.n	800c6ce <get_fat+0x20>
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	695b      	ldr	r3, [r3, #20]
 800c6c8:	683a      	ldr	r2, [r7, #0]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d302      	bcc.n	800c6d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	617b      	str	r3, [r7, #20]
 800c6d2:	e08e      	b.n	800c7f2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	2b03      	cmp	r3, #3
 800c6e0:	d061      	beq.n	800c7a6 <get_fat+0xf8>
 800c6e2:	2b03      	cmp	r3, #3
 800c6e4:	dc7b      	bgt.n	800c7de <get_fat+0x130>
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d002      	beq.n	800c6f0 <get_fat+0x42>
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d041      	beq.n	800c772 <get_fat+0xc4>
 800c6ee:	e076      	b.n	800c7de <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	60fb      	str	r3, [r7, #12]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	085b      	lsrs	r3, r3, #1
 800c6f8:	68fa      	ldr	r2, [r7, #12]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	6a1a      	ldr	r2, [r3, #32]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	0a5b      	lsrs	r3, r3, #9
 800c706:	4413      	add	r3, r2
 800c708:	4619      	mov	r1, r3
 800c70a:	6938      	ldr	r0, [r7, #16]
 800c70c:	f7ff ff14 	bl	800c538 <move_window>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d166      	bne.n	800c7e4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	1c5a      	adds	r2, r3, #1
 800c71a:	60fa      	str	r2, [r7, #12]
 800c71c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c720:	693a      	ldr	r2, [r7, #16]
 800c722:	4413      	add	r3, r2
 800c724:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c728:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	6a1a      	ldr	r2, [r3, #32]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	0a5b      	lsrs	r3, r3, #9
 800c732:	4413      	add	r3, r2
 800c734:	4619      	mov	r1, r3
 800c736:	6938      	ldr	r0, [r7, #16]
 800c738:	f7ff fefe 	bl	800c538 <move_window>
 800c73c:	4603      	mov	r3, r0
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d152      	bne.n	800c7e8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c748:	693a      	ldr	r2, [r7, #16]
 800c74a:	4413      	add	r3, r2
 800c74c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c750:	021b      	lsls	r3, r3, #8
 800c752:	68ba      	ldr	r2, [r7, #8]
 800c754:	4313      	orrs	r3, r2
 800c756:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	f003 0301 	and.w	r3, r3, #1
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d002      	beq.n	800c768 <get_fat+0xba>
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	091b      	lsrs	r3, r3, #4
 800c766:	e002      	b.n	800c76e <get_fat+0xc0>
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c76e:	617b      	str	r3, [r7, #20]
			break;
 800c770:	e03f      	b.n	800c7f2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	6a1a      	ldr	r2, [r3, #32]
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	0a1b      	lsrs	r3, r3, #8
 800c77a:	4413      	add	r3, r2
 800c77c:	4619      	mov	r1, r3
 800c77e:	6938      	ldr	r0, [r7, #16]
 800c780:	f7ff feda 	bl	800c538 <move_window>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d130      	bne.n	800c7ec <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	005b      	lsls	r3, r3, #1
 800c794:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c798:	4413      	add	r3, r2
 800c79a:	4618      	mov	r0, r3
 800c79c:	f7ff fc1c 	bl	800bfd8 <ld_word>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	617b      	str	r3, [r7, #20]
			break;
 800c7a4:	e025      	b.n	800c7f2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	6a1a      	ldr	r2, [r3, #32]
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	09db      	lsrs	r3, r3, #7
 800c7ae:	4413      	add	r3, r2
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	6938      	ldr	r0, [r7, #16]
 800c7b4:	f7ff fec0 	bl	800c538 <move_window>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d118      	bne.n	800c7f0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c7cc:	4413      	add	r3, r2
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7ff fc1a 	bl	800c008 <ld_dword>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c7da:	617b      	str	r3, [r7, #20]
			break;
 800c7dc:	e009      	b.n	800c7f2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c7de:	2301      	movs	r3, #1
 800c7e0:	617b      	str	r3, [r7, #20]
 800c7e2:	e006      	b.n	800c7f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7e4:	bf00      	nop
 800c7e6:	e004      	b.n	800c7f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c7e8:	bf00      	nop
 800c7ea:	e002      	b.n	800c7f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c7ec:	bf00      	nop
 800c7ee:	e000      	b.n	800c7f2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7f0:	bf00      	nop
		}
	}

	return val;
 800c7f2:	697b      	ldr	r3, [r7, #20]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3718      	adds	r7, #24
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c7fc:	b590      	push	{r4, r7, lr}
 800c7fe:	b089      	sub	sp, #36	@ 0x24
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c808:	2302      	movs	r3, #2
 800c80a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	f240 80d9 	bls.w	800c9c6 <put_fat+0x1ca>
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	695b      	ldr	r3, [r3, #20]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	f080 80d3 	bcs.w	800c9c6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	2b03      	cmp	r3, #3
 800c826:	f000 8096 	beq.w	800c956 <put_fat+0x15a>
 800c82a:	2b03      	cmp	r3, #3
 800c82c:	f300 80cb 	bgt.w	800c9c6 <put_fat+0x1ca>
 800c830:	2b01      	cmp	r3, #1
 800c832:	d002      	beq.n	800c83a <put_fat+0x3e>
 800c834:	2b02      	cmp	r3, #2
 800c836:	d06e      	beq.n	800c916 <put_fat+0x11a>
 800c838:	e0c5      	b.n	800c9c6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c83a:	68bb      	ldr	r3, [r7, #8]
 800c83c:	61bb      	str	r3, [r7, #24]
 800c83e:	69bb      	ldr	r3, [r7, #24]
 800c840:	085b      	lsrs	r3, r3, #1
 800c842:	69ba      	ldr	r2, [r7, #24]
 800c844:	4413      	add	r3, r2
 800c846:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6a1a      	ldr	r2, [r3, #32]
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	0a5b      	lsrs	r3, r3, #9
 800c850:	4413      	add	r3, r2
 800c852:	4619      	mov	r1, r3
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f7ff fe6f 	bl	800c538 <move_window>
 800c85a:	4603      	mov	r3, r0
 800c85c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c85e:	7ffb      	ldrb	r3, [r7, #31]
 800c860:	2b00      	cmp	r3, #0
 800c862:	f040 80a9 	bne.w	800c9b8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	1c59      	adds	r1, r3, #1
 800c870:	61b9      	str	r1, [r7, #24]
 800c872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c876:	4413      	add	r3, r2
 800c878:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	f003 0301 	and.w	r3, r3, #1
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00d      	beq.n	800c8a0 <put_fat+0xa4>
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	b25b      	sxtb	r3, r3
 800c88a:	f003 030f 	and.w	r3, r3, #15
 800c88e:	b25a      	sxtb	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	b2db      	uxtb	r3, r3
 800c894:	011b      	lsls	r3, r3, #4
 800c896:	b25b      	sxtb	r3, r3
 800c898:	4313      	orrs	r3, r2
 800c89a:	b25b      	sxtb	r3, r3
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	e001      	b.n	800c8a4 <put_fat+0xa8>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	697a      	ldr	r2, [r7, #20]
 800c8a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6a1a      	ldr	r2, [r3, #32]
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	0a5b      	lsrs	r3, r3, #9
 800c8b6:	4413      	add	r3, r2
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f7ff fe3c 	bl	800c538 <move_window>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8c4:	7ffb      	ldrb	r3, [r7, #31]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d178      	bne.n	800c9bc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8d6:	4413      	add	r3, r2
 800c8d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	f003 0301 	and.w	r3, r3, #1
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d003      	beq.n	800c8ec <put_fat+0xf0>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	091b      	lsrs	r3, r3, #4
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	e00e      	b.n	800c90a <put_fat+0x10e>
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	b25b      	sxtb	r3, r3
 800c8f2:	f023 030f 	bic.w	r3, r3, #15
 800c8f6:	b25a      	sxtb	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	0a1b      	lsrs	r3, r3, #8
 800c8fc:	b25b      	sxtb	r3, r3
 800c8fe:	f003 030f 	and.w	r3, r3, #15
 800c902:	b25b      	sxtb	r3, r3
 800c904:	4313      	orrs	r3, r2
 800c906:	b25b      	sxtb	r3, r3
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2201      	movs	r2, #1
 800c912:	70da      	strb	r2, [r3, #3]
			break;
 800c914:	e057      	b.n	800c9c6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6a1a      	ldr	r2, [r3, #32]
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	0a1b      	lsrs	r3, r3, #8
 800c91e:	4413      	add	r3, r2
 800c920:	4619      	mov	r1, r3
 800c922:	68f8      	ldr	r0, [r7, #12]
 800c924:	f7ff fe08 	bl	800c538 <move_window>
 800c928:	4603      	mov	r3, r0
 800c92a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c92c:	7ffb      	ldrb	r3, [r7, #31]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d146      	bne.n	800c9c0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	005b      	lsls	r3, r3, #1
 800c93c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c940:	4413      	add	r3, r2
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	b292      	uxth	r2, r2
 800c946:	4611      	mov	r1, r2
 800c948:	4618      	mov	r0, r3
 800c94a:	f7ff fb80 	bl	800c04e <st_word>
			fs->wflag = 1;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2201      	movs	r2, #1
 800c952:	70da      	strb	r2, [r3, #3]
			break;
 800c954:	e037      	b.n	800c9c6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6a1a      	ldr	r2, [r3, #32]
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	09db      	lsrs	r3, r3, #7
 800c95e:	4413      	add	r3, r2
 800c960:	4619      	mov	r1, r3
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f7ff fde8 	bl	800c538 <move_window>
 800c968:	4603      	mov	r3, r0
 800c96a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c96c:	7ffb      	ldrb	r3, [r7, #31]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d128      	bne.n	800c9c4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	009b      	lsls	r3, r3, #2
 800c982:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c986:	4413      	add	r3, r2
 800c988:	4618      	mov	r0, r3
 800c98a:	f7ff fb3d 	bl	800c008 <ld_dword>
 800c98e:	4603      	mov	r3, r0
 800c990:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c994:	4323      	orrs	r3, r4
 800c996:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c9a6:	4413      	add	r3, r2
 800c9a8:	6879      	ldr	r1, [r7, #4]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7ff fb6a 	bl	800c084 <st_dword>
			fs->wflag = 1;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	70da      	strb	r2, [r3, #3]
			break;
 800c9b6:	e006      	b.n	800c9c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c9b8:	bf00      	nop
 800c9ba:	e004      	b.n	800c9c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c9bc:	bf00      	nop
 800c9be:	e002      	b.n	800c9c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c9c0:	bf00      	nop
 800c9c2:	e000      	b.n	800c9c6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c9c4:	bf00      	nop
		}
	}
	return res;
 800c9c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3724      	adds	r7, #36	@ 0x24
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd90      	pop	{r4, r7, pc}

0800c9d0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b088      	sub	sp, #32
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d904      	bls.n	800c9f6 <remove_chain+0x26>
 800c9ec:	69bb      	ldr	r3, [r7, #24]
 800c9ee:	695b      	ldr	r3, [r3, #20]
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d301      	bcc.n	800c9fa <remove_chain+0x2a>
 800c9f6:	2302      	movs	r3, #2
 800c9f8:	e04b      	b.n	800ca92 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00c      	beq.n	800ca1a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ca00:	f04f 32ff 	mov.w	r2, #4294967295
 800ca04:	6879      	ldr	r1, [r7, #4]
 800ca06:	69b8      	ldr	r0, [r7, #24]
 800ca08:	f7ff fef8 	bl	800c7fc <put_fat>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ca10:	7ffb      	ldrb	r3, [r7, #31]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d001      	beq.n	800ca1a <remove_chain+0x4a>
 800ca16:	7ffb      	ldrb	r3, [r7, #31]
 800ca18:	e03b      	b.n	800ca92 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ca1a:	68b9      	ldr	r1, [r7, #8]
 800ca1c:	68f8      	ldr	r0, [r7, #12]
 800ca1e:	f7ff fe46 	bl	800c6ae <get_fat>
 800ca22:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d031      	beq.n	800ca8e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d101      	bne.n	800ca34 <remove_chain+0x64>
 800ca30:	2302      	movs	r3, #2
 800ca32:	e02e      	b.n	800ca92 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca3a:	d101      	bne.n	800ca40 <remove_chain+0x70>
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e028      	b.n	800ca92 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ca40:	2200      	movs	r2, #0
 800ca42:	68b9      	ldr	r1, [r7, #8]
 800ca44:	69b8      	ldr	r0, [r7, #24]
 800ca46:	f7ff fed9 	bl	800c7fc <put_fat>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ca4e:	7ffb      	ldrb	r3, [r7, #31]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d001      	beq.n	800ca58 <remove_chain+0x88>
 800ca54:	7ffb      	ldrb	r3, [r7, #31]
 800ca56:	e01c      	b.n	800ca92 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ca58:	69bb      	ldr	r3, [r7, #24]
 800ca5a:	691a      	ldr	r2, [r3, #16]
 800ca5c:	69bb      	ldr	r3, [r7, #24]
 800ca5e:	695b      	ldr	r3, [r3, #20]
 800ca60:	3b02      	subs	r3, #2
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d20b      	bcs.n	800ca7e <remove_chain+0xae>
			fs->free_clst++;
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	1c5a      	adds	r2, r3, #1
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	791b      	ldrb	r3, [r3, #4]
 800ca74:	f043 0301 	orr.w	r3, r3, #1
 800ca78:	b2da      	uxtb	r2, r3
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	695b      	ldr	r3, [r3, #20]
 800ca86:	68ba      	ldr	r2, [r7, #8]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d3c6      	bcc.n	800ca1a <remove_chain+0x4a>
 800ca8c:	e000      	b.n	800ca90 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ca8e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3720      	adds	r7, #32
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b088      	sub	sp, #32
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
 800caa2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d10d      	bne.n	800cacc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d004      	beq.n	800cac6 <create_chain+0x2c>
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	695b      	ldr	r3, [r3, #20]
 800cac0:	69ba      	ldr	r2, [r7, #24]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d31b      	bcc.n	800cafe <create_chain+0x64>
 800cac6:	2301      	movs	r3, #1
 800cac8:	61bb      	str	r3, [r7, #24]
 800caca:	e018      	b.n	800cafe <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cacc:	6839      	ldr	r1, [r7, #0]
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f7ff fded 	bl	800c6ae <get_fat>
 800cad4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2b01      	cmp	r3, #1
 800cada:	d801      	bhi.n	800cae0 <create_chain+0x46>
 800cadc:	2301      	movs	r3, #1
 800cade:	e070      	b.n	800cbc2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cae6:	d101      	bne.n	800caec <create_chain+0x52>
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	e06a      	b.n	800cbc2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	695b      	ldr	r3, [r3, #20]
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d201      	bcs.n	800cafa <create_chain+0x60>
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	e063      	b.n	800cbc2 <create_chain+0x128>
		scl = clst;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	3301      	adds	r3, #1
 800cb06:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	695b      	ldr	r3, [r3, #20]
 800cb0c:	69fa      	ldr	r2, [r7, #28]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d307      	bcc.n	800cb22 <create_chain+0x88>
				ncl = 2;
 800cb12:	2302      	movs	r3, #2
 800cb14:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cb16:	69fa      	ldr	r2, [r7, #28]
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d901      	bls.n	800cb22 <create_chain+0x88>
 800cb1e:	2300      	movs	r3, #0
 800cb20:	e04f      	b.n	800cbc2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cb22:	69f9      	ldr	r1, [r7, #28]
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f7ff fdc2 	bl	800c6ae <get_fat>
 800cb2a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d00e      	beq.n	800cb50 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d003      	beq.n	800cb40 <create_chain+0xa6>
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb3e:	d101      	bne.n	800cb44 <create_chain+0xaa>
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	e03e      	b.n	800cbc2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cb44:	69fa      	ldr	r2, [r7, #28]
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d1da      	bne.n	800cb02 <create_chain+0x68>
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	e038      	b.n	800cbc2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cb50:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cb52:	f04f 32ff 	mov.w	r2, #4294967295
 800cb56:	69f9      	ldr	r1, [r7, #28]
 800cb58:	6938      	ldr	r0, [r7, #16]
 800cb5a:	f7ff fe4f 	bl	800c7fc <put_fat>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cb62:	7dfb      	ldrb	r3, [r7, #23]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d109      	bne.n	800cb7c <create_chain+0xe2>
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d006      	beq.n	800cb7c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cb6e:	69fa      	ldr	r2, [r7, #28]
 800cb70:	6839      	ldr	r1, [r7, #0]
 800cb72:	6938      	ldr	r0, [r7, #16]
 800cb74:	f7ff fe42 	bl	800c7fc <put_fat>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cb7c:	7dfb      	ldrb	r3, [r7, #23]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d116      	bne.n	800cbb0 <create_chain+0x116>
		fs->last_clst = ncl;
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	69fa      	ldr	r2, [r7, #28]
 800cb86:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	691a      	ldr	r2, [r3, #16]
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	695b      	ldr	r3, [r3, #20]
 800cb90:	3b02      	subs	r3, #2
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d804      	bhi.n	800cba0 <create_chain+0x106>
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	1e5a      	subs	r2, r3, #1
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	791b      	ldrb	r3, [r3, #4]
 800cba4:	f043 0301 	orr.w	r3, r3, #1
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	711a      	strb	r2, [r3, #4]
 800cbae:	e007      	b.n	800cbc0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cbb0:	7dfb      	ldrb	r3, [r7, #23]
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d102      	bne.n	800cbbc <create_chain+0x122>
 800cbb6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbba:	e000      	b.n	800cbbe <create_chain+0x124>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cbc0:	69fb      	ldr	r3, [r7, #28]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3720      	adds	r7, #32
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cbca:	b480      	push	{r7}
 800cbcc:	b087      	sub	sp, #28
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
 800cbd2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbde:	3304      	adds	r3, #4
 800cbe0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	0a5b      	lsrs	r3, r3, #9
 800cbe6:	68fa      	ldr	r2, [r7, #12]
 800cbe8:	8952      	ldrh	r2, [r2, #10]
 800cbea:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	1d1a      	adds	r2, r3, #4
 800cbf4:	613a      	str	r2, [r7, #16]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d101      	bne.n	800cc04 <clmt_clust+0x3a>
 800cc00:	2300      	movs	r3, #0
 800cc02:	e010      	b.n	800cc26 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cc04:	697a      	ldr	r2, [r7, #20]
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d307      	bcc.n	800cc1c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cc0c:	697a      	ldr	r2, [r7, #20]
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	617b      	str	r3, [r7, #20]
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	3304      	adds	r3, #4
 800cc18:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc1a:	e7e9      	b.n	800cbf0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cc1c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	4413      	add	r3, r2
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	371c      	adds	r7, #28
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr

0800cc32 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b086      	sub	sp, #24
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
 800cc3a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc48:	d204      	bcs.n	800cc54 <dir_sdi+0x22>
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	f003 031f 	and.w	r3, r3, #31
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d001      	beq.n	800cc58 <dir_sdi+0x26>
		return FR_INT_ERR;
 800cc54:	2302      	movs	r3, #2
 800cc56:	e063      	b.n	800cd20 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	689b      	ldr	r3, [r3, #8]
 800cc62:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d106      	bne.n	800cc78 <dir_sdi+0x46>
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	d902      	bls.n	800cc78 <dir_sdi+0x46>
		clst = fs->dirbase;
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc76:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d10c      	bne.n	800cc98 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	095b      	lsrs	r3, r3, #5
 800cc82:	693a      	ldr	r2, [r7, #16]
 800cc84:	8912      	ldrh	r2, [r2, #8]
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d301      	bcc.n	800cc8e <dir_sdi+0x5c>
 800cc8a:	2302      	movs	r3, #2
 800cc8c:	e048      	b.n	800cd20 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	61da      	str	r2, [r3, #28]
 800cc96:	e029      	b.n	800ccec <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	895b      	ldrh	r3, [r3, #10]
 800cc9c:	025b      	lsls	r3, r3, #9
 800cc9e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cca0:	e019      	b.n	800ccd6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6979      	ldr	r1, [r7, #20]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff fd01 	bl	800c6ae <get_fat>
 800ccac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb4:	d101      	bne.n	800ccba <dir_sdi+0x88>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e032      	b.n	800cd20 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d904      	bls.n	800ccca <dir_sdi+0x98>
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	695b      	ldr	r3, [r3, #20]
 800ccc4:	697a      	ldr	r2, [r7, #20]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d301      	bcc.n	800ccce <dir_sdi+0x9c>
 800ccca:	2302      	movs	r3, #2
 800cccc:	e028      	b.n	800cd20 <dir_sdi+0xee>
			ofs -= csz;
 800ccce:	683a      	ldr	r2, [r7, #0]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	1ad3      	subs	r3, r2, r3
 800ccd4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ccd6:	683a      	ldr	r2, [r7, #0]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d2e1      	bcs.n	800cca2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ccde:	6979      	ldr	r1, [r7, #20]
 800cce0:	6938      	ldr	r0, [r7, #16]
 800cce2:	f7ff fcc5 	bl	800c670 <clust2sect>
 800cce6:	4602      	mov	r2, r0
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	697a      	ldr	r2, [r7, #20]
 800ccf0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	69db      	ldr	r3, [r3, #28]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d101      	bne.n	800ccfe <dir_sdi+0xcc>
 800ccfa:	2302      	movs	r3, #2
 800ccfc:	e010      	b.n	800cd20 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	69da      	ldr	r2, [r3, #28]
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	0a5b      	lsrs	r3, r3, #9
 800cd06:	441a      	add	r2, r3
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd18:	441a      	add	r2, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cd1e:	2300      	movs	r3, #0
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3718      	adds	r7, #24
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	695b      	ldr	r3, [r3, #20]
 800cd3c:	3320      	adds	r3, #32
 800cd3e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	69db      	ldr	r3, [r3, #28]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d003      	beq.n	800cd50 <dir_next+0x28>
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cd4e:	d301      	bcc.n	800cd54 <dir_next+0x2c>
 800cd50:	2304      	movs	r3, #4
 800cd52:	e0aa      	b.n	800ceaa <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f040 8098 	bne.w	800ce90 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	1c5a      	adds	r2, r3, #1
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	699b      	ldr	r3, [r3, #24]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d10b      	bne.n	800cd8a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	095b      	lsrs	r3, r3, #5
 800cd76:	68fa      	ldr	r2, [r7, #12]
 800cd78:	8912      	ldrh	r2, [r2, #8]
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	f0c0 8088 	bcc.w	800ce90 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	61da      	str	r2, [r3, #28]
 800cd86:	2304      	movs	r3, #4
 800cd88:	e08f      	b.n	800ceaa <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	0a5b      	lsrs	r3, r3, #9
 800cd8e:	68fa      	ldr	r2, [r7, #12]
 800cd90:	8952      	ldrh	r2, [r2, #10]
 800cd92:	3a01      	subs	r2, #1
 800cd94:	4013      	ands	r3, r2
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d17a      	bne.n	800ce90 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	699b      	ldr	r3, [r3, #24]
 800cda0:	4619      	mov	r1, r3
 800cda2:	4610      	mov	r0, r2
 800cda4:	f7ff fc83 	bl	800c6ae <get_fat>
 800cda8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d801      	bhi.n	800cdb4 <dir_next+0x8c>
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	e07a      	b.n	800ceaa <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdba:	d101      	bne.n	800cdc0 <dir_next+0x98>
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	e074      	b.n	800ceaa <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	695b      	ldr	r3, [r3, #20]
 800cdc4:	697a      	ldr	r2, [r7, #20]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d358      	bcc.n	800ce7c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d104      	bne.n	800cdda <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	61da      	str	r2, [r3, #28]
 800cdd6:	2304      	movs	r3, #4
 800cdd8:	e067      	b.n	800ceaa <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	699b      	ldr	r3, [r3, #24]
 800cde0:	4619      	mov	r1, r3
 800cde2:	4610      	mov	r0, r2
 800cde4:	f7ff fe59 	bl	800ca9a <create_chain>
 800cde8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d101      	bne.n	800cdf4 <dir_next+0xcc>
 800cdf0:	2307      	movs	r3, #7
 800cdf2:	e05a      	b.n	800ceaa <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d101      	bne.n	800cdfe <dir_next+0xd6>
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	e055      	b.n	800ceaa <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce04:	d101      	bne.n	800ce0a <dir_next+0xe2>
 800ce06:	2301      	movs	r3, #1
 800ce08:	e04f      	b.n	800ceaa <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ce0a:	68f8      	ldr	r0, [r7, #12]
 800ce0c:	f7ff fb50 	bl	800c4b0 <sync_window>
 800ce10:	4603      	mov	r3, r0
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d001      	beq.n	800ce1a <dir_next+0xf2>
 800ce16:	2301      	movs	r3, #1
 800ce18:	e047      	b.n	800ceaa <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	3330      	adds	r3, #48	@ 0x30
 800ce1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce22:	2100      	movs	r1, #0
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7ff f97a 	bl	800c11e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	613b      	str	r3, [r7, #16]
 800ce2e:	6979      	ldr	r1, [r7, #20]
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f7ff fc1d 	bl	800c670 <clust2sect>
 800ce36:	4602      	mov	r2, r0
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ce3c:	e012      	b.n	800ce64 <dir_next+0x13c>
						fs->wflag = 1;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2201      	movs	r2, #1
 800ce42:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f7ff fb33 	bl	800c4b0 <sync_window>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d001      	beq.n	800ce54 <dir_next+0x12c>
 800ce50:	2301      	movs	r3, #1
 800ce52:	e02a      	b.n	800ceaa <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	3301      	adds	r3, #1
 800ce58:	613b      	str	r3, [r7, #16]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce5e:	1c5a      	adds	r2, r3, #1
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	895b      	ldrh	r3, [r3, #10]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d3e6      	bcc.n	800ce3e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	1ad2      	subs	r2, r2, r3
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	697a      	ldr	r2, [r7, #20]
 800ce80:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ce82:	6979      	ldr	r1, [r7, #20]
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff fbf3 	bl	800c670 <clust2sect>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	68ba      	ldr	r2, [r7, #8]
 800ce94:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cea2:	441a      	add	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cea8:	2300      	movs	r3, #0
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3718      	adds	r7, #24
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b086      	sub	sp, #24
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	6078      	str	r0, [r7, #4]
 800ceba:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cec2:	2100      	movs	r1, #0
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f7ff feb4 	bl	800cc32 <dir_sdi>
 800ceca:	4603      	mov	r3, r0
 800cecc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cece:	7dfb      	ldrb	r3, [r7, #23]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d12b      	bne.n	800cf2c <dir_alloc+0x7a>
		n = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	69db      	ldr	r3, [r3, #28]
 800cedc:	4619      	mov	r1, r3
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f7ff fb2a 	bl	800c538 <move_window>
 800cee4:	4603      	mov	r3, r0
 800cee6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cee8:	7dfb      	ldrb	r3, [r7, #23]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d11d      	bne.n	800cf2a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a1b      	ldr	r3, [r3, #32]
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	2be5      	cmp	r3, #229	@ 0xe5
 800cef6:	d004      	beq.n	800cf02 <dir_alloc+0x50>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a1b      	ldr	r3, [r3, #32]
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d107      	bne.n	800cf12 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	3301      	adds	r3, #1
 800cf06:	613b      	str	r3, [r7, #16]
 800cf08:	693a      	ldr	r2, [r7, #16]
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d102      	bne.n	800cf16 <dir_alloc+0x64>
 800cf10:	e00c      	b.n	800cf2c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cf12:	2300      	movs	r3, #0
 800cf14:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cf16:	2101      	movs	r1, #1
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f7ff ff05 	bl	800cd28 <dir_next>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cf22:	7dfb      	ldrb	r3, [r7, #23]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d0d7      	beq.n	800ced8 <dir_alloc+0x26>
 800cf28:	e000      	b.n	800cf2c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cf2a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cf2c:	7dfb      	ldrb	r3, [r7, #23]
 800cf2e:	2b04      	cmp	r3, #4
 800cf30:	d101      	bne.n	800cf36 <dir_alloc+0x84>
 800cf32:	2307      	movs	r3, #7
 800cf34:	75fb      	strb	r3, [r7, #23]
	return res;
 800cf36:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3718      	adds	r7, #24
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	331a      	adds	r3, #26
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7ff f842 	bl	800bfd8 <ld_word>
 800cf54:	4603      	mov	r3, r0
 800cf56:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	2b03      	cmp	r3, #3
 800cf5e:	d109      	bne.n	800cf74 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	3314      	adds	r3, #20
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7ff f837 	bl	800bfd8 <ld_word>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	041b      	lsls	r3, r3, #16
 800cf6e:	68fa      	ldr	r2, [r7, #12]
 800cf70:	4313      	orrs	r3, r2
 800cf72:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cf74:	68fb      	ldr	r3, [r7, #12]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}

0800cf7e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b084      	sub	sp, #16
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	60f8      	str	r0, [r7, #12]
 800cf86:	60b9      	str	r1, [r7, #8]
 800cf88:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	331a      	adds	r3, #26
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	b292      	uxth	r2, r2
 800cf92:	4611      	mov	r1, r2
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7ff f85a 	bl	800c04e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	2b03      	cmp	r3, #3
 800cfa0:	d109      	bne.n	800cfb6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	f103 0214 	add.w	r2, r3, #20
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	0c1b      	lsrs	r3, r3, #16
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	4619      	mov	r1, r3
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	f7ff f84c 	bl	800c04e <st_word>
	}
}
 800cfb6:	bf00      	nop
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}

0800cfbe <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b086      	sub	sp, #24
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
 800cfc6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cfc8:	2304      	movs	r3, #4
 800cfca:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800cfd2:	e03c      	b.n	800d04e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	69db      	ldr	r3, [r3, #28]
 800cfd8:	4619      	mov	r1, r3
 800cfda:	6938      	ldr	r0, [r7, #16]
 800cfdc:	f7ff faac 	bl	800c538 <move_window>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cfe4:	7dfb      	ldrb	r3, [r7, #23]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d136      	bne.n	800d058 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6a1b      	ldr	r3, [r3, #32]
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800cff2:	7bfb      	ldrb	r3, [r7, #15]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d102      	bne.n	800cffe <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cff8:	2304      	movs	r3, #4
 800cffa:	75fb      	strb	r3, [r7, #23]
 800cffc:	e031      	b.n	800d062 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6a1b      	ldr	r3, [r3, #32]
 800d002:	330b      	adds	r3, #11
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d00a:	73bb      	strb	r3, [r7, #14]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	7bba      	ldrb	r2, [r7, #14]
 800d010:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800d012:	7bfb      	ldrb	r3, [r7, #15]
 800d014:	2be5      	cmp	r3, #229	@ 0xe5
 800d016:	d011      	beq.n	800d03c <dir_read+0x7e>
 800d018:	7bfb      	ldrb	r3, [r7, #15]
 800d01a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d01c:	d00e      	beq.n	800d03c <dir_read+0x7e>
 800d01e:	7bbb      	ldrb	r3, [r7, #14]
 800d020:	2b0f      	cmp	r3, #15
 800d022:	d00b      	beq.n	800d03c <dir_read+0x7e>
 800d024:	7bbb      	ldrb	r3, [r7, #14]
 800d026:	f023 0320 	bic.w	r3, r3, #32
 800d02a:	2b08      	cmp	r3, #8
 800d02c:	bf0c      	ite	eq
 800d02e:	2301      	moveq	r3, #1
 800d030:	2300      	movne	r3, #0
 800d032:	b2db      	uxtb	r3, r3
 800d034:	461a      	mov	r2, r3
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	4293      	cmp	r3, r2
 800d03a:	d00f      	beq.n	800d05c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d03c:	2100      	movs	r1, #0
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7ff fe72 	bl	800cd28 <dir_next>
 800d044:	4603      	mov	r3, r0
 800d046:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d048:	7dfb      	ldrb	r3, [r7, #23]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d108      	bne.n	800d060 <dir_read+0xa2>
	while (dp->sect) {
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	69db      	ldr	r3, [r3, #28]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d1be      	bne.n	800cfd4 <dir_read+0x16>
 800d056:	e004      	b.n	800d062 <dir_read+0xa4>
		if (res != FR_OK) break;
 800d058:	bf00      	nop
 800d05a:	e002      	b.n	800d062 <dir_read+0xa4>
				break;
 800d05c:	bf00      	nop
 800d05e:	e000      	b.n	800d062 <dir_read+0xa4>
		if (res != FR_OK) break;
 800d060:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d062:	7dfb      	ldrb	r3, [r7, #23]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d002      	beq.n	800d06e <dir_read+0xb0>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	61da      	str	r2, [r3, #28]
	return res;
 800d06e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d070:	4618      	mov	r0, r3
 800d072:	3718      	adds	r7, #24
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b086      	sub	sp, #24
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d086:	2100      	movs	r1, #0
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f7ff fdd2 	bl	800cc32 <dir_sdi>
 800d08e:	4603      	mov	r3, r0
 800d090:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d092:	7dfb      	ldrb	r3, [r7, #23]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d001      	beq.n	800d09c <dir_find+0x24>
 800d098:	7dfb      	ldrb	r3, [r7, #23]
 800d09a:	e03e      	b.n	800d11a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	69db      	ldr	r3, [r3, #28]
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	6938      	ldr	r0, [r7, #16]
 800d0a4:	f7ff fa48 	bl	800c538 <move_window>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d0ac:	7dfb      	ldrb	r3, [r7, #23]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d12f      	bne.n	800d112 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6a1b      	ldr	r3, [r3, #32]
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d0ba:	7bfb      	ldrb	r3, [r7, #15]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d102      	bne.n	800d0c6 <dir_find+0x4e>
 800d0c0:	2304      	movs	r3, #4
 800d0c2:	75fb      	strb	r3, [r7, #23]
 800d0c4:	e028      	b.n	800d118 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6a1b      	ldr	r3, [r3, #32]
 800d0ca:	330b      	adds	r3, #11
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d0d2:	b2da      	uxtb	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6a1b      	ldr	r3, [r3, #32]
 800d0dc:	330b      	adds	r3, #11
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	f003 0308 	and.w	r3, r3, #8
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d10a      	bne.n	800d0fe <dir_find+0x86>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6a18      	ldr	r0, [r3, #32]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	3324      	adds	r3, #36	@ 0x24
 800d0f0:	220b      	movs	r2, #11
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	f7ff f82e 	bl	800c154 <mem_cmp>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d00b      	beq.n	800d116 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d0fe:	2100      	movs	r1, #0
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f7ff fe11 	bl	800cd28 <dir_next>
 800d106:	4603      	mov	r3, r0
 800d108:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d10a:	7dfb      	ldrb	r3, [r7, #23]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d0c5      	beq.n	800d09c <dir_find+0x24>
 800d110:	e002      	b.n	800d118 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d112:	bf00      	nop
 800d114:	e000      	b.n	800d118 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d116:	bf00      	nop

	return res;
 800d118:	7dfb      	ldrb	r3, [r7, #23]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3718      	adds	r7, #24
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b084      	sub	sp, #16
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d130:	2101      	movs	r1, #1
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7ff febd 	bl	800ceb2 <dir_alloc>
 800d138:	4603      	mov	r3, r0
 800d13a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d11c      	bne.n	800d17c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	69db      	ldr	r3, [r3, #28]
 800d146:	4619      	mov	r1, r3
 800d148:	68b8      	ldr	r0, [r7, #8]
 800d14a:	f7ff f9f5 	bl	800c538 <move_window>
 800d14e:	4603      	mov	r3, r0
 800d150:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d152:	7bfb      	ldrb	r3, [r7, #15]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d111      	bne.n	800d17c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	6a1b      	ldr	r3, [r3, #32]
 800d15c:	2220      	movs	r2, #32
 800d15e:	2100      	movs	r1, #0
 800d160:	4618      	mov	r0, r3
 800d162:	f7fe ffdc 	bl	800c11e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a18      	ldr	r0, [r3, #32]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	3324      	adds	r3, #36	@ 0x24
 800d16e:	220b      	movs	r2, #11
 800d170:	4619      	mov	r1, r3
 800d172:	f7fe ffb3 	bl	800c0dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	2201      	movs	r2, #1
 800d17a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3710      	adds	r7, #16
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b084      	sub	sp, #16
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	69db      	ldr	r3, [r3, #28]
 800d198:	4619      	mov	r1, r3
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f7ff f9cc 	bl	800c538 <move_window>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800d1a4:	7afb      	ldrb	r3, [r7, #11]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d106      	bne.n	800d1b8 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6a1b      	ldr	r3, [r3, #32]
 800d1ae:	22e5      	movs	r2, #229	@ 0xe5
 800d1b0:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800d1b8:	7afb      	ldrb	r3, [r7, #11]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
	...

0800d1c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b088      	sub	sp, #32
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	3324      	adds	r3, #36	@ 0x24
 800d1d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d1da:	220b      	movs	r2, #11
 800d1dc:	2120      	movs	r1, #32
 800d1de:	68b8      	ldr	r0, [r7, #8]
 800d1e0:	f7fe ff9d 	bl	800c11e <mem_set>
	si = i = 0; ni = 8;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	613b      	str	r3, [r7, #16]
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	61fb      	str	r3, [r7, #28]
 800d1ec:	2308      	movs	r3, #8
 800d1ee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	1c5a      	adds	r2, r3, #1
 800d1f4:	61fa      	str	r2, [r7, #28]
 800d1f6:	68fa      	ldr	r2, [r7, #12]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	781b      	ldrb	r3, [r3, #0]
 800d1fc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d1fe:	7efb      	ldrb	r3, [r7, #27]
 800d200:	2b20      	cmp	r3, #32
 800d202:	d94e      	bls.n	800d2a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d204:	7efb      	ldrb	r3, [r7, #27]
 800d206:	2b2f      	cmp	r3, #47	@ 0x2f
 800d208:	d006      	beq.n	800d218 <create_name+0x54>
 800d20a:	7efb      	ldrb	r3, [r7, #27]
 800d20c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d20e:	d110      	bne.n	800d232 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d210:	e002      	b.n	800d218 <create_name+0x54>
 800d212:	69fb      	ldr	r3, [r7, #28]
 800d214:	3301      	adds	r3, #1
 800d216:	61fb      	str	r3, [r7, #28]
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	4413      	add	r3, r2
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	2b2f      	cmp	r3, #47	@ 0x2f
 800d222:	d0f6      	beq.n	800d212 <create_name+0x4e>
 800d224:	68fa      	ldr	r2, [r7, #12]
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	4413      	add	r3, r2
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d22e:	d0f0      	beq.n	800d212 <create_name+0x4e>
			break;
 800d230:	e038      	b.n	800d2a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d232:	7efb      	ldrb	r3, [r7, #27]
 800d234:	2b2e      	cmp	r3, #46	@ 0x2e
 800d236:	d003      	beq.n	800d240 <create_name+0x7c>
 800d238:	693a      	ldr	r2, [r7, #16]
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d30c      	bcc.n	800d25a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	2b0b      	cmp	r3, #11
 800d244:	d002      	beq.n	800d24c <create_name+0x88>
 800d246:	7efb      	ldrb	r3, [r7, #27]
 800d248:	2b2e      	cmp	r3, #46	@ 0x2e
 800d24a:	d001      	beq.n	800d250 <create_name+0x8c>
 800d24c:	2306      	movs	r3, #6
 800d24e:	e044      	b.n	800d2da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d250:	2308      	movs	r3, #8
 800d252:	613b      	str	r3, [r7, #16]
 800d254:	230b      	movs	r3, #11
 800d256:	617b      	str	r3, [r7, #20]
			continue;
 800d258:	e022      	b.n	800d2a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d25a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	da04      	bge.n	800d26c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d262:	7efb      	ldrb	r3, [r7, #27]
 800d264:	3b80      	subs	r3, #128	@ 0x80
 800d266:	4a1f      	ldr	r2, [pc, #124]	@ (800d2e4 <create_name+0x120>)
 800d268:	5cd3      	ldrb	r3, [r2, r3]
 800d26a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d26c:	7efb      	ldrb	r3, [r7, #27]
 800d26e:	4619      	mov	r1, r3
 800d270:	481d      	ldr	r0, [pc, #116]	@ (800d2e8 <create_name+0x124>)
 800d272:	f7fe ff96 	bl	800c1a2 <chk_chr>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d001      	beq.n	800d280 <create_name+0xbc>
 800d27c:	2306      	movs	r3, #6
 800d27e:	e02c      	b.n	800d2da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d280:	7efb      	ldrb	r3, [r7, #27]
 800d282:	2b60      	cmp	r3, #96	@ 0x60
 800d284:	d905      	bls.n	800d292 <create_name+0xce>
 800d286:	7efb      	ldrb	r3, [r7, #27]
 800d288:	2b7a      	cmp	r3, #122	@ 0x7a
 800d28a:	d802      	bhi.n	800d292 <create_name+0xce>
 800d28c:	7efb      	ldrb	r3, [r7, #27]
 800d28e:	3b20      	subs	r3, #32
 800d290:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	1c5a      	adds	r2, r3, #1
 800d296:	613a      	str	r2, [r7, #16]
 800d298:	68ba      	ldr	r2, [r7, #8]
 800d29a:	4413      	add	r3, r2
 800d29c:	7efa      	ldrb	r2, [r7, #27]
 800d29e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d2a0:	e7a6      	b.n	800d1f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d2a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d2a4:	68fa      	ldr	r2, [r7, #12]
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	441a      	add	r2, r3
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d101      	bne.n	800d2b8 <create_name+0xf4>
 800d2b4:	2306      	movs	r3, #6
 800d2b6:	e010      	b.n	800d2da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	2be5      	cmp	r3, #229	@ 0xe5
 800d2be:	d102      	bne.n	800d2c6 <create_name+0x102>
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	2205      	movs	r2, #5
 800d2c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d2c6:	7efb      	ldrb	r3, [r7, #27]
 800d2c8:	2b20      	cmp	r3, #32
 800d2ca:	d801      	bhi.n	800d2d0 <create_name+0x10c>
 800d2cc:	2204      	movs	r2, #4
 800d2ce:	e000      	b.n	800d2d2 <create_name+0x10e>
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	330b      	adds	r3, #11
 800d2d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d2d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3720      	adds	r7, #32
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	08010050 	.word	0x08010050
 800d2e8:	0800f278 	.word	0x0800f278

0800d2ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b086      	sub	sp, #24
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d300:	e002      	b.n	800d308 <follow_path+0x1c>
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	3301      	adds	r3, #1
 800d306:	603b      	str	r3, [r7, #0]
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d30e:	d0f8      	beq.n	800d302 <follow_path+0x16>
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	2b5c      	cmp	r3, #92	@ 0x5c
 800d316:	d0f4      	beq.n	800d302 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	2200      	movs	r2, #0
 800d31c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	2b1f      	cmp	r3, #31
 800d324:	d80a      	bhi.n	800d33c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2280      	movs	r2, #128	@ 0x80
 800d32a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d32e:	2100      	movs	r1, #0
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f7ff fc7e 	bl	800cc32 <dir_sdi>
 800d336:	4603      	mov	r3, r0
 800d338:	75fb      	strb	r3, [r7, #23]
 800d33a:	e043      	b.n	800d3c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d33c:	463b      	mov	r3, r7
 800d33e:	4619      	mov	r1, r3
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f7ff ff3f 	bl	800d1c4 <create_name>
 800d346:	4603      	mov	r3, r0
 800d348:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d34a:	7dfb      	ldrb	r3, [r7, #23]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d134      	bne.n	800d3ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f7ff fe91 	bl	800d078 <dir_find>
 800d356:	4603      	mov	r3, r0
 800d358:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d360:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d362:	7dfb      	ldrb	r3, [r7, #23]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00a      	beq.n	800d37e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d368:	7dfb      	ldrb	r3, [r7, #23]
 800d36a:	2b04      	cmp	r3, #4
 800d36c:	d127      	bne.n	800d3be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d36e:	7afb      	ldrb	r3, [r7, #11]
 800d370:	f003 0304 	and.w	r3, r3, #4
 800d374:	2b00      	cmp	r3, #0
 800d376:	d122      	bne.n	800d3be <follow_path+0xd2>
 800d378:	2305      	movs	r3, #5
 800d37a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d37c:	e01f      	b.n	800d3be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d37e:	7afb      	ldrb	r3, [r7, #11]
 800d380:	f003 0304 	and.w	r3, r3, #4
 800d384:	2b00      	cmp	r3, #0
 800d386:	d11c      	bne.n	800d3c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	799b      	ldrb	r3, [r3, #6]
 800d38c:	f003 0310 	and.w	r3, r3, #16
 800d390:	2b00      	cmp	r3, #0
 800d392:	d102      	bne.n	800d39a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d394:	2305      	movs	r3, #5
 800d396:	75fb      	strb	r3, [r7, #23]
 800d398:	e014      	b.n	800d3c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	695b      	ldr	r3, [r3, #20]
 800d3a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3a8:	4413      	add	r3, r2
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f7ff fdc7 	bl	800cf40 <ld_clust>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d3b8:	e7c0      	b.n	800d33c <follow_path+0x50>
			if (res != FR_OK) break;
 800d3ba:	bf00      	nop
 800d3bc:	e002      	b.n	800d3c4 <follow_path+0xd8>
				break;
 800d3be:	bf00      	nop
 800d3c0:	e000      	b.n	800d3c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d3c2:	bf00      	nop
			}
		}
	}

	return res;
 800d3c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3718      	adds	r7, #24
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d3ce:	b480      	push	{r7}
 800d3d0:	b087      	sub	sp, #28
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d3da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d031      	beq.n	800d448 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	617b      	str	r3, [r7, #20]
 800d3ea:	e002      	b.n	800d3f2 <get_ldnumber+0x24>
 800d3ec:	697b      	ldr	r3, [r7, #20]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	617b      	str	r3, [r7, #20]
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	2b20      	cmp	r3, #32
 800d3f8:	d903      	bls.n	800d402 <get_ldnumber+0x34>
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	781b      	ldrb	r3, [r3, #0]
 800d3fe:	2b3a      	cmp	r3, #58	@ 0x3a
 800d400:	d1f4      	bne.n	800d3ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	2b3a      	cmp	r3, #58	@ 0x3a
 800d408:	d11c      	bne.n	800d444 <get_ldnumber+0x76>
			tp = *path;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	1c5a      	adds	r2, r3, #1
 800d414:	60fa      	str	r2, [r7, #12]
 800d416:	781b      	ldrb	r3, [r3, #0]
 800d418:	3b30      	subs	r3, #48	@ 0x30
 800d41a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2b09      	cmp	r3, #9
 800d420:	d80e      	bhi.n	800d440 <get_ldnumber+0x72>
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	429a      	cmp	r2, r3
 800d428:	d10a      	bne.n	800d440 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d107      	bne.n	800d440 <get_ldnumber+0x72>
					vol = (int)i;
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	3301      	adds	r3, #1
 800d438:	617b      	str	r3, [r7, #20]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	697a      	ldr	r2, [r7, #20]
 800d43e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	e002      	b.n	800d44a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d444:	2300      	movs	r3, #0
 800d446:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d448:	693b      	ldr	r3, [r7, #16]
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	371c      	adds	r7, #28
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr
	...

0800d458 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	70da      	strb	r2, [r3, #3]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f04f 32ff 	mov.w	r2, #4294967295
 800d46e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d470:	6839      	ldr	r1, [r7, #0]
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f7ff f860 	bl	800c538 <move_window>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d001      	beq.n	800d482 <check_fs+0x2a>
 800d47e:	2304      	movs	r3, #4
 800d480:	e038      	b.n	800d4f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	3330      	adds	r3, #48	@ 0x30
 800d486:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fe fda4 	bl	800bfd8 <ld_word>
 800d490:	4603      	mov	r3, r0
 800d492:	461a      	mov	r2, r3
 800d494:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d498:	429a      	cmp	r2, r3
 800d49a:	d001      	beq.n	800d4a0 <check_fs+0x48>
 800d49c:	2303      	movs	r3, #3
 800d49e:	e029      	b.n	800d4f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d4a6:	2be9      	cmp	r3, #233	@ 0xe9
 800d4a8:	d009      	beq.n	800d4be <check_fs+0x66>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d4b0:	2beb      	cmp	r3, #235	@ 0xeb
 800d4b2:	d11e      	bne.n	800d4f2 <check_fs+0x9a>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d4ba:	2b90      	cmp	r3, #144	@ 0x90
 800d4bc:	d119      	bne.n	800d4f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	3330      	adds	r3, #48	@ 0x30
 800d4c2:	3336      	adds	r3, #54	@ 0x36
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7fe fd9f 	bl	800c008 <ld_dword>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d4d0:	4a0a      	ldr	r2, [pc, #40]	@ (800d4fc <check_fs+0xa4>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	d101      	bne.n	800d4da <check_fs+0x82>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	e00c      	b.n	800d4f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	3330      	adds	r3, #48	@ 0x30
 800d4de:	3352      	adds	r3, #82	@ 0x52
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fe fd91 	bl	800c008 <ld_dword>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	4a05      	ldr	r2, [pc, #20]	@ (800d500 <check_fs+0xa8>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d101      	bne.n	800d4f2 <check_fs+0x9a>
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	e000      	b.n	800d4f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d4f2:	2302      	movs	r3, #2
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3708      	adds	r7, #8
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}
 800d4fc:	00544146 	.word	0x00544146
 800d500:	33544146 	.word	0x33544146

0800d504 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b096      	sub	sp, #88	@ 0x58
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	4613      	mov	r3, r2
 800d510:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	2200      	movs	r2, #0
 800d516:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f7ff ff58 	bl	800d3ce <get_ldnumber>
 800d51e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d522:	2b00      	cmp	r3, #0
 800d524:	da01      	bge.n	800d52a <find_volume+0x26>
 800d526:	230b      	movs	r3, #11
 800d528:	e22d      	b.n	800d986 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d52a:	4aa1      	ldr	r2, [pc, #644]	@ (800d7b0 <find_volume+0x2ac>)
 800d52c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d532:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d536:	2b00      	cmp	r3, #0
 800d538:	d101      	bne.n	800d53e <find_volume+0x3a>
 800d53a:	230c      	movs	r3, #12
 800d53c:	e223      	b.n	800d986 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d542:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d544:	79fb      	ldrb	r3, [r7, #7]
 800d546:	f023 0301 	bic.w	r3, r3, #1
 800d54a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d01a      	beq.n	800d58a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d556:	785b      	ldrb	r3, [r3, #1]
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fe fc9d 	bl	800be98 <disk_status>
 800d55e:	4603      	mov	r3, r0
 800d560:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d564:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d568:	f003 0301 	and.w	r3, r3, #1
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d10c      	bne.n	800d58a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d570:	79fb      	ldrb	r3, [r7, #7]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d007      	beq.n	800d586 <find_volume+0x82>
 800d576:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d57a:	f003 0304 	and.w	r3, r3, #4
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d001      	beq.n	800d586 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d582:	230a      	movs	r3, #10
 800d584:	e1ff      	b.n	800d986 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d586:	2300      	movs	r3, #0
 800d588:	e1fd      	b.n	800d986 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d58c:	2200      	movs	r2, #0
 800d58e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d592:	b2da      	uxtb	r2, r3
 800d594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d596:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d59a:	785b      	ldrb	r3, [r3, #1]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fe fc95 	bl	800becc <disk_initialize>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d5a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d5ac:	f003 0301 	and.w	r3, r3, #1
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d001      	beq.n	800d5b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d5b4:	2303      	movs	r3, #3
 800d5b6:	e1e6      	b.n	800d986 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d5b8:	79fb      	ldrb	r3, [r7, #7]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d007      	beq.n	800d5ce <find_volume+0xca>
 800d5be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d5c2:	f003 0304 	and.w	r3, r3, #4
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d001      	beq.n	800d5ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d5ca:	230a      	movs	r3, #10
 800d5cc:	e1db      	b.n	800d986 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d5d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d5d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d5d6:	f7ff ff3f 	bl	800d458 <check_fs>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d5e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d5e4:	2b02      	cmp	r3, #2
 800d5e6:	d149      	bne.n	800d67c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800d5ec:	e01e      	b.n	800d62c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d5f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5f6:	011b      	lsls	r3, r3, #4
 800d5f8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d5fc:	4413      	add	r3, r2
 800d5fe:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d602:	3304      	adds	r3, #4
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d006      	beq.n	800d618 <find_volume+0x114>
 800d60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60c:	3308      	adds	r3, #8
 800d60e:	4618      	mov	r0, r3
 800d610:	f7fe fcfa 	bl	800c008 <ld_dword>
 800d614:	4602      	mov	r2, r0
 800d616:	e000      	b.n	800d61a <find_volume+0x116>
 800d618:	2200      	movs	r2, #0
 800d61a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	3358      	adds	r3, #88	@ 0x58
 800d620:	443b      	add	r3, r7
 800d622:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d628:	3301      	adds	r3, #1
 800d62a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d62c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d62e:	2b03      	cmp	r3, #3
 800d630:	d9dd      	bls.n	800d5ee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d632:	2300      	movs	r3, #0
 800d634:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d002      	beq.n	800d642 <find_volume+0x13e>
 800d63c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d63e:	3b01      	subs	r3, #1
 800d640:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	3358      	adds	r3, #88	@ 0x58
 800d648:	443b      	add	r3, r7
 800d64a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d64e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d650:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d652:	2b00      	cmp	r3, #0
 800d654:	d005      	beq.n	800d662 <find_volume+0x15e>
 800d656:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d658:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d65a:	f7ff fefd 	bl	800d458 <check_fs>
 800d65e:	4603      	mov	r3, r0
 800d660:	e000      	b.n	800d664 <find_volume+0x160>
 800d662:	2303      	movs	r3, #3
 800d664:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d668:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d905      	bls.n	800d67c <find_volume+0x178>
 800d670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d672:	3301      	adds	r3, #1
 800d674:	643b      	str	r3, [r7, #64]	@ 0x40
 800d676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d678:	2b03      	cmp	r3, #3
 800d67a:	d9e2      	bls.n	800d642 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d67c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d680:	2b04      	cmp	r3, #4
 800d682:	d101      	bne.n	800d688 <find_volume+0x184>
 800d684:	2301      	movs	r3, #1
 800d686:	e17e      	b.n	800d986 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d688:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d901      	bls.n	800d694 <find_volume+0x190>
 800d690:	230d      	movs	r3, #13
 800d692:	e178      	b.n	800d986 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d696:	3330      	adds	r3, #48	@ 0x30
 800d698:	330b      	adds	r3, #11
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fe fc9c 	bl	800bfd8 <ld_word>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d6a6:	d001      	beq.n	800d6ac <find_volume+0x1a8>
 800d6a8:	230d      	movs	r3, #13
 800d6aa:	e16c      	b.n	800d986 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ae:	3330      	adds	r3, #48	@ 0x30
 800d6b0:	3316      	adds	r3, #22
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fe fc90 	bl	800bfd8 <ld_word>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d6bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d106      	bne.n	800d6d0 <find_volume+0x1cc>
 800d6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c4:	3330      	adds	r3, #48	@ 0x30
 800d6c6:	3324      	adds	r3, #36	@ 0x24
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fe fc9d 	bl	800c008 <ld_dword>
 800d6ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d6d4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e2:	789b      	ldrb	r3, [r3, #2]
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d005      	beq.n	800d6f4 <find_volume+0x1f0>
 800d6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ea:	789b      	ldrb	r3, [r3, #2]
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	d001      	beq.n	800d6f4 <find_volume+0x1f0>
 800d6f0:	230d      	movs	r3, #13
 800d6f2:	e148      	b.n	800d986 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f6:	789b      	ldrb	r3, [r3, #2]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6fc:	fb02 f303 	mul.w	r3, r2, r3
 800d700:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d708:	461a      	mov	r2, r3
 800d70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d70c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d710:	895b      	ldrh	r3, [r3, #10]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d008      	beq.n	800d728 <find_volume+0x224>
 800d716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d718:	895b      	ldrh	r3, [r3, #10]
 800d71a:	461a      	mov	r2, r3
 800d71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d71e:	895b      	ldrh	r3, [r3, #10]
 800d720:	3b01      	subs	r3, #1
 800d722:	4013      	ands	r3, r2
 800d724:	2b00      	cmp	r3, #0
 800d726:	d001      	beq.n	800d72c <find_volume+0x228>
 800d728:	230d      	movs	r3, #13
 800d72a:	e12c      	b.n	800d986 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d72e:	3330      	adds	r3, #48	@ 0x30
 800d730:	3311      	adds	r3, #17
 800d732:	4618      	mov	r0, r3
 800d734:	f7fe fc50 	bl	800bfd8 <ld_word>
 800d738:	4603      	mov	r3, r0
 800d73a:	461a      	mov	r2, r3
 800d73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d73e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d742:	891b      	ldrh	r3, [r3, #8]
 800d744:	f003 030f 	and.w	r3, r3, #15
 800d748:	b29b      	uxth	r3, r3
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d001      	beq.n	800d752 <find_volume+0x24e>
 800d74e:	230d      	movs	r3, #13
 800d750:	e119      	b.n	800d986 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d754:	3330      	adds	r3, #48	@ 0x30
 800d756:	3313      	adds	r3, #19
 800d758:	4618      	mov	r0, r3
 800d75a:	f7fe fc3d 	bl	800bfd8 <ld_word>
 800d75e:	4603      	mov	r3, r0
 800d760:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d764:	2b00      	cmp	r3, #0
 800d766:	d106      	bne.n	800d776 <find_volume+0x272>
 800d768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76a:	3330      	adds	r3, #48	@ 0x30
 800d76c:	3320      	adds	r3, #32
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fe fc4a 	bl	800c008 <ld_dword>
 800d774:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d778:	3330      	adds	r3, #48	@ 0x30
 800d77a:	330e      	adds	r3, #14
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fe fc2b 	bl	800bfd8 <ld_word>
 800d782:	4603      	mov	r3, r0
 800d784:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d786:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d101      	bne.n	800d790 <find_volume+0x28c>
 800d78c:	230d      	movs	r3, #13
 800d78e:	e0fa      	b.n	800d986 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d790:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d794:	4413      	add	r3, r2
 800d796:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d798:	8912      	ldrh	r2, [r2, #8]
 800d79a:	0912      	lsrs	r2, r2, #4
 800d79c:	b292      	uxth	r2, r2
 800d79e:	4413      	add	r3, r2
 800d7a0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d7a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d204      	bcs.n	800d7b4 <find_volume+0x2b0>
 800d7aa:	230d      	movs	r3, #13
 800d7ac:	e0eb      	b.n	800d986 <find_volume+0x482>
 800d7ae:	bf00      	nop
 800d7b0:	2001473c 	.word	0x2001473c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d7b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b8:	1ad3      	subs	r3, r2, r3
 800d7ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d7bc:	8952      	ldrh	r2, [r2, #10]
 800d7be:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7c2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d101      	bne.n	800d7ce <find_volume+0x2ca>
 800d7ca:	230d      	movs	r3, #13
 800d7cc:	e0db      	b.n	800d986 <find_volume+0x482>
		fmt = FS_FAT32;
 800d7ce:	2303      	movs	r3, #3
 800d7d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d802      	bhi.n	800d7e4 <find_volume+0x2e0>
 800d7de:	2302      	movs	r3, #2
 800d7e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7e6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d802      	bhi.n	800d7f4 <find_volume+0x2f0>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f6:	1c9a      	adds	r2, r3, #2
 800d7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7fa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d800:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d802:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d806:	441a      	add	r2, r3
 800d808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d80a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d80c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d810:	441a      	add	r2, r3
 800d812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d814:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d816:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d81a:	2b03      	cmp	r3, #3
 800d81c:	d11e      	bne.n	800d85c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d820:	3330      	adds	r3, #48	@ 0x30
 800d822:	332a      	adds	r3, #42	@ 0x2a
 800d824:	4618      	mov	r0, r3
 800d826:	f7fe fbd7 	bl	800bfd8 <ld_word>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d001      	beq.n	800d834 <find_volume+0x330>
 800d830:	230d      	movs	r3, #13
 800d832:	e0a8      	b.n	800d986 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d836:	891b      	ldrh	r3, [r3, #8]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d001      	beq.n	800d840 <find_volume+0x33c>
 800d83c:	230d      	movs	r3, #13
 800d83e:	e0a2      	b.n	800d986 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d842:	3330      	adds	r3, #48	@ 0x30
 800d844:	332c      	adds	r3, #44	@ 0x2c
 800d846:	4618      	mov	r0, r3
 800d848:	f7fe fbde 	bl	800c008 <ld_dword>
 800d84c:	4602      	mov	r2, r0
 800d84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d850:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d854:	695b      	ldr	r3, [r3, #20]
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	647b      	str	r3, [r7, #68]	@ 0x44
 800d85a:	e01f      	b.n	800d89c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d85e:	891b      	ldrh	r3, [r3, #8]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d101      	bne.n	800d868 <find_volume+0x364>
 800d864:	230d      	movs	r3, #13
 800d866:	e08e      	b.n	800d986 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d86a:	6a1a      	ldr	r2, [r3, #32]
 800d86c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d86e:	441a      	add	r2, r3
 800d870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d872:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d874:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d878:	2b02      	cmp	r3, #2
 800d87a:	d103      	bne.n	800d884 <find_volume+0x380>
 800d87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d87e:	695b      	ldr	r3, [r3, #20]
 800d880:	005b      	lsls	r3, r3, #1
 800d882:	e00a      	b.n	800d89a <find_volume+0x396>
 800d884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d886:	695a      	ldr	r2, [r3, #20]
 800d888:	4613      	mov	r3, r2
 800d88a:	005b      	lsls	r3, r3, #1
 800d88c:	4413      	add	r3, r2
 800d88e:	085a      	lsrs	r2, r3, #1
 800d890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d892:	695b      	ldr	r3, [r3, #20]
 800d894:	f003 0301 	and.w	r3, r3, #1
 800d898:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d89a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d89e:	699a      	ldr	r2, [r3, #24]
 800d8a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8a2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d8a6:	0a5b      	lsrs	r3, r3, #9
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d201      	bcs.n	800d8b0 <find_volume+0x3ac>
 800d8ac:	230d      	movs	r3, #13
 800d8ae:	e06a      	b.n	800d986 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8b6:	611a      	str	r2, [r3, #16]
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ba:	691a      	ldr	r2, [r3, #16]
 800d8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8be:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d8c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8c2:	2280      	movs	r2, #128	@ 0x80
 800d8c4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d8c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d8ca:	2b03      	cmp	r3, #3
 800d8cc:	d149      	bne.n	800d962 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d0:	3330      	adds	r3, #48	@ 0x30
 800d8d2:	3330      	adds	r3, #48	@ 0x30
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7fe fb7f 	bl	800bfd8 <ld_word>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d140      	bne.n	800d962 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d8e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d8e8:	f7fe fe26 	bl	800c538 <move_window>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d137      	bne.n	800d962 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8fa:	3330      	adds	r3, #48	@ 0x30
 800d8fc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d900:	4618      	mov	r0, r3
 800d902:	f7fe fb69 	bl	800bfd8 <ld_word>
 800d906:	4603      	mov	r3, r0
 800d908:	461a      	mov	r2, r3
 800d90a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d90e:	429a      	cmp	r2, r3
 800d910:	d127      	bne.n	800d962 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d914:	3330      	adds	r3, #48	@ 0x30
 800d916:	4618      	mov	r0, r3
 800d918:	f7fe fb76 	bl	800c008 <ld_dword>
 800d91c:	4603      	mov	r3, r0
 800d91e:	4a1c      	ldr	r2, [pc, #112]	@ (800d990 <find_volume+0x48c>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d11e      	bne.n	800d962 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d926:	3330      	adds	r3, #48	@ 0x30
 800d928:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fe fb6b 	bl	800c008 <ld_dword>
 800d932:	4603      	mov	r3, r0
 800d934:	4a17      	ldr	r2, [pc, #92]	@ (800d994 <find_volume+0x490>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d113      	bne.n	800d962 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d93c:	3330      	adds	r3, #48	@ 0x30
 800d93e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d942:	4618      	mov	r0, r3
 800d944:	f7fe fb60 	bl	800c008 <ld_dword>
 800d948:	4602      	mov	r2, r0
 800d94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d94c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d950:	3330      	adds	r3, #48	@ 0x30
 800d952:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d956:	4618      	mov	r0, r3
 800d958:	f7fe fb56 	bl	800c008 <ld_dword>
 800d95c:	4602      	mov	r2, r0
 800d95e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d960:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d964:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d968:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d96a:	4b0b      	ldr	r3, [pc, #44]	@ (800d998 <find_volume+0x494>)
 800d96c:	881b      	ldrh	r3, [r3, #0]
 800d96e:	3301      	adds	r3, #1
 800d970:	b29a      	uxth	r2, r3
 800d972:	4b09      	ldr	r3, [pc, #36]	@ (800d998 <find_volume+0x494>)
 800d974:	801a      	strh	r2, [r3, #0]
 800d976:	4b08      	ldr	r3, [pc, #32]	@ (800d998 <find_volume+0x494>)
 800d978:	881a      	ldrh	r2, [r3, #0]
 800d97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d97c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d97e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d980:	f7fe fd72 	bl	800c468 <clear_lock>
#endif
	return FR_OK;
 800d984:	2300      	movs	r3, #0
}
 800d986:	4618      	mov	r0, r3
 800d988:	3758      	adds	r7, #88	@ 0x58
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	41615252 	.word	0x41615252
 800d994:	61417272 	.word	0x61417272
 800d998:	20014740 	.word	0x20014740

0800d99c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d9a6:	2309      	movs	r3, #9
 800d9a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d01c      	beq.n	800d9ea <validate+0x4e>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d018      	beq.n	800d9ea <validate+0x4e>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d013      	beq.n	800d9ea <validate+0x4e>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	889a      	ldrh	r2, [r3, #4]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	88db      	ldrh	r3, [r3, #6]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d10c      	bne.n	800d9ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	785b      	ldrb	r3, [r3, #1]
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fe fa5e 	bl	800be98 <disk_status>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	f003 0301 	and.w	r3, r3, #1
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d101      	bne.n	800d9ea <validate+0x4e>
			res = FR_OK;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d9ea:	7bfb      	ldrb	r3, [r7, #15]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d102      	bne.n	800d9f6 <validate+0x5a>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	e000      	b.n	800d9f8 <validate+0x5c>
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	683a      	ldr	r2, [r7, #0]
 800d9fa:	6013      	str	r3, [r2, #0]
	return res;
 800d9fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3710      	adds	r7, #16
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
	...

0800da08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b088      	sub	sp, #32
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	4613      	mov	r3, r2
 800da14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800da1a:	f107 0310 	add.w	r3, r7, #16
 800da1e:	4618      	mov	r0, r3
 800da20:	f7ff fcd5 	bl	800d3ce <get_ldnumber>
 800da24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	da01      	bge.n	800da30 <f_mount+0x28>
 800da2c:	230b      	movs	r3, #11
 800da2e:	e02b      	b.n	800da88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800da30:	4a17      	ldr	r2, [pc, #92]	@ (800da90 <f_mount+0x88>)
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d005      	beq.n	800da4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800da40:	69b8      	ldr	r0, [r7, #24]
 800da42:	f7fe fd11 	bl	800c468 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	2200      	movs	r2, #0
 800da4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d002      	beq.n	800da58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2200      	movs	r2, #0
 800da56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	490d      	ldr	r1, [pc, #52]	@ (800da90 <f_mount+0x88>)
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d002      	beq.n	800da6e <f_mount+0x66>
 800da68:	79fb      	ldrb	r3, [r7, #7]
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d001      	beq.n	800da72 <f_mount+0x6a>
 800da6e:	2300      	movs	r3, #0
 800da70:	e00a      	b.n	800da88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800da72:	f107 010c 	add.w	r1, r7, #12
 800da76:	f107 0308 	add.w	r3, r7, #8
 800da7a:	2200      	movs	r2, #0
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7ff fd41 	bl	800d504 <find_volume>
 800da82:	4603      	mov	r3, r0
 800da84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800da86:	7dfb      	ldrb	r3, [r7, #23]
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3720      	adds	r7, #32
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	2001473c 	.word	0x2001473c

0800da94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b098      	sub	sp, #96	@ 0x60
 800da98:	af00      	add	r7, sp, #0
 800da9a:	60f8      	str	r0, [r7, #12]
 800da9c:	60b9      	str	r1, [r7, #8]
 800da9e:	4613      	mov	r3, r2
 800daa0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d101      	bne.n	800daac <f_open+0x18>
 800daa8:	2309      	movs	r3, #9
 800daaa:	e1a9      	b.n	800de00 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800daac:	79fb      	ldrb	r3, [r7, #7]
 800daae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dab2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800dab4:	79fa      	ldrb	r2, [r7, #7]
 800dab6:	f107 0110 	add.w	r1, r7, #16
 800daba:	f107 0308 	add.w	r3, r7, #8
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7ff fd20 	bl	800d504 <find_volume>
 800dac4:	4603      	mov	r3, r0
 800dac6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800daca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dace:	2b00      	cmp	r3, #0
 800dad0:	f040 818d 	bne.w	800ddee <f_open+0x35a>
		dj.obj.fs = fs;
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dad8:	68ba      	ldr	r2, [r7, #8]
 800dada:	f107 0314 	add.w	r3, r7, #20
 800dade:	4611      	mov	r1, r2
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7ff fc03 	bl	800d2ec <follow_path>
 800dae6:	4603      	mov	r3, r0
 800dae8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800daec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d118      	bne.n	800db26 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800daf4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800daf8:	b25b      	sxtb	r3, r3
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	da03      	bge.n	800db06 <f_open+0x72>
				res = FR_INVALID_NAME;
 800dafe:	2306      	movs	r3, #6
 800db00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800db04:	e00f      	b.n	800db26 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800db06:	79fb      	ldrb	r3, [r7, #7]
 800db08:	2b01      	cmp	r3, #1
 800db0a:	bf8c      	ite	hi
 800db0c:	2301      	movhi	r3, #1
 800db0e:	2300      	movls	r3, #0
 800db10:	b2db      	uxtb	r3, r3
 800db12:	461a      	mov	r2, r3
 800db14:	f107 0314 	add.w	r3, r7, #20
 800db18:	4611      	mov	r1, r2
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7fe fb5c 	bl	800c1d8 <chk_lock>
 800db20:	4603      	mov	r3, r0
 800db22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800db26:	79fb      	ldrb	r3, [r7, #7]
 800db28:	f003 031c 	and.w	r3, r3, #28
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d07f      	beq.n	800dc30 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800db30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db34:	2b00      	cmp	r3, #0
 800db36:	d017      	beq.n	800db68 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800db38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db3c:	2b04      	cmp	r3, #4
 800db3e:	d10e      	bne.n	800db5e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800db40:	f7fe fba6 	bl	800c290 <enq_lock>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d006      	beq.n	800db58 <f_open+0xc4>
 800db4a:	f107 0314 	add.w	r3, r7, #20
 800db4e:	4618      	mov	r0, r3
 800db50:	f7ff fae7 	bl	800d122 <dir_register>
 800db54:	4603      	mov	r3, r0
 800db56:	e000      	b.n	800db5a <f_open+0xc6>
 800db58:	2312      	movs	r3, #18
 800db5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800db5e:	79fb      	ldrb	r3, [r7, #7]
 800db60:	f043 0308 	orr.w	r3, r3, #8
 800db64:	71fb      	strb	r3, [r7, #7]
 800db66:	e010      	b.n	800db8a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800db68:	7ebb      	ldrb	r3, [r7, #26]
 800db6a:	f003 0311 	and.w	r3, r3, #17
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d003      	beq.n	800db7a <f_open+0xe6>
					res = FR_DENIED;
 800db72:	2307      	movs	r3, #7
 800db74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800db78:	e007      	b.n	800db8a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800db7a:	79fb      	ldrb	r3, [r7, #7]
 800db7c:	f003 0304 	and.w	r3, r3, #4
 800db80:	2b00      	cmp	r3, #0
 800db82:	d002      	beq.n	800db8a <f_open+0xf6>
 800db84:	2308      	movs	r3, #8
 800db86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800db8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d168      	bne.n	800dc64 <f_open+0x1d0>
 800db92:	79fb      	ldrb	r3, [r7, #7]
 800db94:	f003 0308 	and.w	r3, r3, #8
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d063      	beq.n	800dc64 <f_open+0x1d0>
				dw = GET_FATTIME();
 800db9c:	f7fe f810 	bl	800bbc0 <get_fattime>
 800dba0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dba4:	330e      	adds	r3, #14
 800dba6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dba8:	4618      	mov	r0, r3
 800dbaa:	f7fe fa6b 	bl	800c084 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dbae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbb0:	3316      	adds	r3, #22
 800dbb2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7fe fa65 	bl	800c084 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dbba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbbc:	330b      	adds	r3, #11
 800dbbe:	2220      	movs	r2, #32
 800dbc0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbc6:	4611      	mov	r1, r2
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7ff f9b9 	bl	800cf40 <ld_clust>
 800dbce:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7ff f9d1 	bl	800cf7e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dbdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbde:	331c      	adds	r3, #28
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fe fa4e 	bl	800c084 <st_dword>
					fs->wflag = 1;
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	2201      	movs	r2, #1
 800dbec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dbee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d037      	beq.n	800dc64 <f_open+0x1d0>
						dw = fs->winsect;
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800dbfa:	f107 0314 	add.w	r3, r7, #20
 800dbfe:	2200      	movs	r2, #0
 800dc00:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fe fee4 	bl	800c9d0 <remove_chain>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800dc0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d126      	bne.n	800dc64 <f_open+0x1d0>
							res = move_window(fs, dw);
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f7fe fc8c 	bl	800c538 <move_window>
 800dc20:	4603      	mov	r3, r0
 800dc22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dc2a:	3a01      	subs	r2, #1
 800dc2c:	60da      	str	r2, [r3, #12]
 800dc2e:	e019      	b.n	800dc64 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dc30:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d115      	bne.n	800dc64 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dc38:	7ebb      	ldrb	r3, [r7, #26]
 800dc3a:	f003 0310 	and.w	r3, r3, #16
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d003      	beq.n	800dc4a <f_open+0x1b6>
					res = FR_NO_FILE;
 800dc42:	2304      	movs	r3, #4
 800dc44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800dc48:	e00c      	b.n	800dc64 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dc4a:	79fb      	ldrb	r3, [r7, #7]
 800dc4c:	f003 0302 	and.w	r3, r3, #2
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d007      	beq.n	800dc64 <f_open+0x1d0>
 800dc54:	7ebb      	ldrb	r3, [r7, #26]
 800dc56:	f003 0301 	and.w	r3, r3, #1
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d002      	beq.n	800dc64 <f_open+0x1d0>
						res = FR_DENIED;
 800dc5e:	2307      	movs	r3, #7
 800dc60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dc64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d126      	bne.n	800dcba <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dc6c:	79fb      	ldrb	r3, [r7, #7]
 800dc6e:	f003 0308 	and.w	r3, r3, #8
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d003      	beq.n	800dc7e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800dc76:	79fb      	ldrb	r3, [r7, #7]
 800dc78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc7c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800dc86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dc8c:	79fb      	ldrb	r3, [r7, #7]
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	bf8c      	ite	hi
 800dc92:	2301      	movhi	r3, #1
 800dc94:	2300      	movls	r3, #0
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	461a      	mov	r2, r3
 800dc9a:	f107 0314 	add.w	r3, r7, #20
 800dc9e:	4611      	mov	r1, r2
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fe fb17 	bl	800c2d4 <inc_lock>
 800dca6:	4602      	mov	r2, r0
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	691b      	ldr	r3, [r3, #16]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d102      	bne.n	800dcba <f_open+0x226>
 800dcb4:	2302      	movs	r3, #2
 800dcb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dcba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	f040 8095 	bne.w	800ddee <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcc8:	4611      	mov	r1, r2
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7ff f938 	bl	800cf40 <ld_clust>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dcd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcd8:	331c      	adds	r3, #28
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fe f994 	bl	800c008 <ld_dword>
 800dce0:	4602      	mov	r2, r0
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2200      	movs	r2, #0
 800dcea:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dcec:	693a      	ldr	r2, [r7, #16]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	88da      	ldrh	r2, [r3, #6]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	79fa      	ldrb	r2, [r7, #7]
 800dcfe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2200      	movs	r2, #0
 800dd04:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	3330      	adds	r3, #48	@ 0x30
 800dd16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fe f9fe 	bl	800c11e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dd22:	79fb      	ldrb	r3, [r7, #7]
 800dd24:	f003 0320 	and.w	r3, r3, #32
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d060      	beq.n	800ddee <f_open+0x35a>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d05c      	beq.n	800ddee <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	68da      	ldr	r2, [r3, #12]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	895b      	ldrh	r3, [r3, #10]
 800dd40:	025b      	lsls	r3, r3, #9
 800dd42:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	68db      	ldr	r3, [r3, #12]
 800dd4e:	657b      	str	r3, [r7, #84]	@ 0x54
 800dd50:	e016      	b.n	800dd80 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7fe fca9 	bl	800c6ae <get_fat>
 800dd5c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800dd5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d802      	bhi.n	800dd6a <f_open+0x2d6>
 800dd64:	2302      	movs	r3, #2
 800dd66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dd6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd70:	d102      	bne.n	800dd78 <f_open+0x2e4>
 800dd72:	2301      	movs	r3, #1
 800dd74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dd78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dd7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd7c:	1ad3      	subs	r3, r2, r3
 800dd7e:	657b      	str	r3, [r7, #84]	@ 0x54
 800dd80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d103      	bne.n	800dd90 <f_open+0x2fc>
 800dd88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dd8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d8e0      	bhi.n	800dd52 <f_open+0x2be>
				}
				fp->clust = clst;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dd94:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dd96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d127      	bne.n	800ddee <f_open+0x35a>
 800dd9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dda0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d022      	beq.n	800ddee <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ddac:	4618      	mov	r0, r3
 800ddae:	f7fe fc5f 	bl	800c670 <clust2sect>
 800ddb2:	6478      	str	r0, [r7, #68]	@ 0x44
 800ddb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d103      	bne.n	800ddc2 <f_open+0x32e>
						res = FR_INT_ERR;
 800ddba:	2302      	movs	r3, #2
 800ddbc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ddc0:	e015      	b.n	800ddee <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ddc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddc4:	0a5a      	lsrs	r2, r3, #9
 800ddc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddc8:	441a      	add	r2, r3
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	7858      	ldrb	r0, [r3, #1]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6a1a      	ldr	r2, [r3, #32]
 800dddc:	2301      	movs	r3, #1
 800ddde:	f7fe f89d 	bl	800bf1c <disk_read>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d002      	beq.n	800ddee <f_open+0x35a>
 800dde8:	2301      	movs	r3, #1
 800ddea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ddee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d002      	beq.n	800ddfc <f_open+0x368>
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ddfc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800de00:	4618      	mov	r0, r3
 800de02:	3760      	adds	r7, #96	@ 0x60
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b08e      	sub	sp, #56	@ 0x38
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	607a      	str	r2, [r7, #4]
 800de14:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	2200      	movs	r2, #0
 800de1e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f107 0214 	add.w	r2, r7, #20
 800de26:	4611      	mov	r1, r2
 800de28:	4618      	mov	r0, r3
 800de2a:	f7ff fdb7 	bl	800d99c <validate>
 800de2e:	4603      	mov	r3, r0
 800de30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800de34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d107      	bne.n	800de4c <f_read+0x44>
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	7d5b      	ldrb	r3, [r3, #21]
 800de40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800de44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d002      	beq.n	800de52 <f_read+0x4a>
 800de4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800de50:	e115      	b.n	800e07e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	7d1b      	ldrb	r3, [r3, #20]
 800de56:	f003 0301 	and.w	r3, r3, #1
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d101      	bne.n	800de62 <f_read+0x5a>
 800de5e:	2307      	movs	r3, #7
 800de60:	e10d      	b.n	800e07e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	68da      	ldr	r2, [r3, #12]
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	699b      	ldr	r3, [r3, #24]
 800de6a:	1ad3      	subs	r3, r2, r3
 800de6c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800de6e:	687a      	ldr	r2, [r7, #4]
 800de70:	6a3b      	ldr	r3, [r7, #32]
 800de72:	429a      	cmp	r2, r3
 800de74:	f240 80fe 	bls.w	800e074 <f_read+0x26c>
 800de78:	6a3b      	ldr	r3, [r7, #32]
 800de7a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800de7c:	e0fa      	b.n	800e074 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	699b      	ldr	r3, [r3, #24]
 800de82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de86:	2b00      	cmp	r3, #0
 800de88:	f040 80c6 	bne.w	800e018 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	699b      	ldr	r3, [r3, #24]
 800de90:	0a5b      	lsrs	r3, r3, #9
 800de92:	697a      	ldr	r2, [r7, #20]
 800de94:	8952      	ldrh	r2, [r2, #10]
 800de96:	3a01      	subs	r2, #1
 800de98:	4013      	ands	r3, r2
 800de9a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d12f      	bne.n	800df02 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	699b      	ldr	r3, [r3, #24]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d103      	bne.n	800deb2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	633b      	str	r3, [r7, #48]	@ 0x30
 800deb0:	e013      	b.n	800deda <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d007      	beq.n	800deca <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	699b      	ldr	r3, [r3, #24]
 800debe:	4619      	mov	r1, r3
 800dec0:	68f8      	ldr	r0, [r7, #12]
 800dec2:	f7fe fe82 	bl	800cbca <clmt_clust>
 800dec6:	6338      	str	r0, [r7, #48]	@ 0x30
 800dec8:	e007      	b.n	800deda <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	69db      	ldr	r3, [r3, #28]
 800ded0:	4619      	mov	r1, r3
 800ded2:	4610      	mov	r0, r2
 800ded4:	f7fe fbeb 	bl	800c6ae <get_fat>
 800ded8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800deda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d804      	bhi.n	800deea <f_read+0xe2>
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2202      	movs	r2, #2
 800dee4:	755a      	strb	r2, [r3, #21]
 800dee6:	2302      	movs	r3, #2
 800dee8:	e0c9      	b.n	800e07e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800deea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def0:	d104      	bne.n	800defc <f_read+0xf4>
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2201      	movs	r2, #1
 800def6:	755a      	strb	r2, [r3, #21]
 800def8:	2301      	movs	r3, #1
 800defa:	e0c0      	b.n	800e07e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df00:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800df02:	697a      	ldr	r2, [r7, #20]
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	69db      	ldr	r3, [r3, #28]
 800df08:	4619      	mov	r1, r3
 800df0a:	4610      	mov	r0, r2
 800df0c:	f7fe fbb0 	bl	800c670 <clust2sect>
 800df10:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d104      	bne.n	800df22 <f_read+0x11a>
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2202      	movs	r2, #2
 800df1c:	755a      	strb	r2, [r3, #21]
 800df1e:	2302      	movs	r3, #2
 800df20:	e0ad      	b.n	800e07e <f_read+0x276>
			sect += csect;
 800df22:	69ba      	ldr	r2, [r7, #24]
 800df24:	69fb      	ldr	r3, [r7, #28]
 800df26:	4413      	add	r3, r2
 800df28:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	0a5b      	lsrs	r3, r3, #9
 800df2e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800df30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df32:	2b00      	cmp	r3, #0
 800df34:	d039      	beq.n	800dfaa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800df36:	69fa      	ldr	r2, [r7, #28]
 800df38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df3a:	4413      	add	r3, r2
 800df3c:	697a      	ldr	r2, [r7, #20]
 800df3e:	8952      	ldrh	r2, [r2, #10]
 800df40:	4293      	cmp	r3, r2
 800df42:	d905      	bls.n	800df50 <f_read+0x148>
					cc = fs->csize - csect;
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	895b      	ldrh	r3, [r3, #10]
 800df48:	461a      	mov	r2, r3
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	1ad3      	subs	r3, r2, r3
 800df4e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	7858      	ldrb	r0, [r3, #1]
 800df54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df56:	69ba      	ldr	r2, [r7, #24]
 800df58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800df5a:	f7fd ffdf 	bl	800bf1c <disk_read>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d004      	beq.n	800df6e <f_read+0x166>
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2201      	movs	r2, #1
 800df68:	755a      	strb	r2, [r3, #21]
 800df6a:	2301      	movs	r3, #1
 800df6c:	e087      	b.n	800e07e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	7d1b      	ldrb	r3, [r3, #20]
 800df72:	b25b      	sxtb	r3, r3
 800df74:	2b00      	cmp	r3, #0
 800df76:	da14      	bge.n	800dfa2 <f_read+0x19a>
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6a1a      	ldr	r2, [r3, #32]
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	1ad3      	subs	r3, r2, r3
 800df80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df82:	429a      	cmp	r2, r3
 800df84:	d90d      	bls.n	800dfa2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	6a1a      	ldr	r2, [r3, #32]
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	025b      	lsls	r3, r3, #9
 800df90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df92:	18d0      	adds	r0, r2, r3
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	3330      	adds	r3, #48	@ 0x30
 800df98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df9c:	4619      	mov	r1, r3
 800df9e:	f7fe f89d 	bl	800c0dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800dfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfa4:	025b      	lsls	r3, r3, #9
 800dfa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800dfa8:	e050      	b.n	800e04c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	6a1b      	ldr	r3, [r3, #32]
 800dfae:	69ba      	ldr	r2, [r7, #24]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d02e      	beq.n	800e012 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	7d1b      	ldrb	r3, [r3, #20]
 800dfb8:	b25b      	sxtb	r3, r3
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	da18      	bge.n	800dff0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	7858      	ldrb	r0, [r3, #1]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6a1a      	ldr	r2, [r3, #32]
 800dfcc:	2301      	movs	r3, #1
 800dfce:	f7fd ffc5 	bl	800bf5c <disk_write>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d004      	beq.n	800dfe2 <f_read+0x1da>
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2201      	movs	r2, #1
 800dfdc:	755a      	strb	r2, [r3, #21]
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e04d      	b.n	800e07e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	7d1b      	ldrb	r3, [r3, #20]
 800dfe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dfea:	b2da      	uxtb	r2, r3
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	7858      	ldrb	r0, [r3, #1]
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dffa:	2301      	movs	r3, #1
 800dffc:	69ba      	ldr	r2, [r7, #24]
 800dffe:	f7fd ff8d 	bl	800bf1c <disk_read>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d004      	beq.n	800e012 <f_read+0x20a>
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2201      	movs	r2, #1
 800e00c:	755a      	strb	r2, [r3, #21]
 800e00e:	2301      	movs	r3, #1
 800e010:	e035      	b.n	800e07e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	69ba      	ldr	r2, [r7, #24]
 800e016:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	699b      	ldr	r3, [r3, #24]
 800e01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e020:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e024:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	429a      	cmp	r2, r3
 800e02c:	d901      	bls.n	800e032 <f_read+0x22a>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e040:	4413      	add	r3, r2
 800e042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e044:	4619      	mov	r1, r3
 800e046:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e048:	f7fe f848 	bl	800c0dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e04c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e050:	4413      	add	r3, r2
 800e052:	627b      	str	r3, [r7, #36]	@ 0x24
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	699a      	ldr	r2, [r3, #24]
 800e058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e05a:	441a      	add	r2, r3
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	619a      	str	r2, [r3, #24]
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e066:	441a      	add	r2, r3
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	601a      	str	r2, [r3, #0]
 800e06c:	687a      	ldr	r2, [r7, #4]
 800e06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e070:	1ad3      	subs	r3, r2, r3
 800e072:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	f47f af01 	bne.w	800de7e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3738      	adds	r7, #56	@ 0x38
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}

0800e086 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e086:	b580      	push	{r7, lr}
 800e088:	b08c      	sub	sp, #48	@ 0x30
 800e08a:	af00      	add	r7, sp, #0
 800e08c:	60f8      	str	r0, [r7, #12]
 800e08e:	60b9      	str	r1, [r7, #8]
 800e090:	607a      	str	r2, [r7, #4]
 800e092:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	2200      	movs	r2, #0
 800e09c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f107 0210 	add.w	r2, r7, #16
 800e0a4:	4611      	mov	r1, r2
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7ff fc78 	bl	800d99c <validate>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e0b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d107      	bne.n	800e0ca <f_write+0x44>
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	7d5b      	ldrb	r3, [r3, #21]
 800e0be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e0c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d002      	beq.n	800e0d0 <f_write+0x4a>
 800e0ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0ce:	e14b      	b.n	800e368 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	7d1b      	ldrb	r3, [r3, #20]
 800e0d4:	f003 0302 	and.w	r3, r3, #2
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d101      	bne.n	800e0e0 <f_write+0x5a>
 800e0dc:	2307      	movs	r3, #7
 800e0de:	e143      	b.n	800e368 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	699a      	ldr	r2, [r3, #24]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	441a      	add	r2, r3
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	699b      	ldr	r3, [r3, #24]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	f080 812d 	bcs.w	800e34c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	699b      	ldr	r3, [r3, #24]
 800e0f6:	43db      	mvns	r3, r3
 800e0f8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e0fa:	e127      	b.n	800e34c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	699b      	ldr	r3, [r3, #24]
 800e100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e104:	2b00      	cmp	r3, #0
 800e106:	f040 80e3 	bne.w	800e2d0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	699b      	ldr	r3, [r3, #24]
 800e10e:	0a5b      	lsrs	r3, r3, #9
 800e110:	693a      	ldr	r2, [r7, #16]
 800e112:	8952      	ldrh	r2, [r2, #10]
 800e114:	3a01      	subs	r2, #1
 800e116:	4013      	ands	r3, r2
 800e118:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e11a:	69bb      	ldr	r3, [r7, #24]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d143      	bne.n	800e1a8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	699b      	ldr	r3, [r3, #24]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d10c      	bne.n	800e142 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e130:	2b00      	cmp	r3, #0
 800e132:	d11a      	bne.n	800e16a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2100      	movs	r1, #0
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fe fcae 	bl	800ca9a <create_chain>
 800e13e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e140:	e013      	b.n	800e16a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e146:	2b00      	cmp	r3, #0
 800e148:	d007      	beq.n	800e15a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	699b      	ldr	r3, [r3, #24]
 800e14e:	4619      	mov	r1, r3
 800e150:	68f8      	ldr	r0, [r7, #12]
 800e152:	f7fe fd3a 	bl	800cbca <clmt_clust>
 800e156:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e158:	e007      	b.n	800e16a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	69db      	ldr	r3, [r3, #28]
 800e160:	4619      	mov	r1, r3
 800e162:	4610      	mov	r0, r2
 800e164:	f7fe fc99 	bl	800ca9a <create_chain>
 800e168:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	f000 80f2 	beq.w	800e356 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e174:	2b01      	cmp	r3, #1
 800e176:	d104      	bne.n	800e182 <f_write+0xfc>
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2202      	movs	r2, #2
 800e17c:	755a      	strb	r2, [r3, #21]
 800e17e:	2302      	movs	r3, #2
 800e180:	e0f2      	b.n	800e368 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e188:	d104      	bne.n	800e194 <f_write+0x10e>
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2201      	movs	r2, #1
 800e18e:	755a      	strb	r2, [r3, #21]
 800e190:	2301      	movs	r3, #1
 800e192:	e0e9      	b.n	800e368 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e198:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d102      	bne.n	800e1a8 <f_write+0x122>
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1a6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	7d1b      	ldrb	r3, [r3, #20]
 800e1ac:	b25b      	sxtb	r3, r3
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	da18      	bge.n	800e1e4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	7858      	ldrb	r0, [r3, #1]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6a1a      	ldr	r2, [r3, #32]
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	f7fd fecb 	bl	800bf5c <disk_write>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d004      	beq.n	800e1d6 <f_write+0x150>
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	755a      	strb	r2, [r3, #21]
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	e0c8      	b.n	800e368 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	7d1b      	ldrb	r3, [r3, #20]
 800e1da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1de:	b2da      	uxtb	r2, r3
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e1e4:	693a      	ldr	r2, [r7, #16]
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	69db      	ldr	r3, [r3, #28]
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	4610      	mov	r0, r2
 800e1ee:	f7fe fa3f 	bl	800c670 <clust2sect>
 800e1f2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d104      	bne.n	800e204 <f_write+0x17e>
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2202      	movs	r2, #2
 800e1fe:	755a      	strb	r2, [r3, #21]
 800e200:	2302      	movs	r3, #2
 800e202:	e0b1      	b.n	800e368 <f_write+0x2e2>
			sect += csect;
 800e204:	697a      	ldr	r2, [r7, #20]
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	4413      	add	r3, r2
 800e20a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	0a5b      	lsrs	r3, r3, #9
 800e210:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e212:	6a3b      	ldr	r3, [r7, #32]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d03c      	beq.n	800e292 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e218:	69ba      	ldr	r2, [r7, #24]
 800e21a:	6a3b      	ldr	r3, [r7, #32]
 800e21c:	4413      	add	r3, r2
 800e21e:	693a      	ldr	r2, [r7, #16]
 800e220:	8952      	ldrh	r2, [r2, #10]
 800e222:	4293      	cmp	r3, r2
 800e224:	d905      	bls.n	800e232 <f_write+0x1ac>
					cc = fs->csize - csect;
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	895b      	ldrh	r3, [r3, #10]
 800e22a:	461a      	mov	r2, r3
 800e22c:	69bb      	ldr	r3, [r7, #24]
 800e22e:	1ad3      	subs	r3, r2, r3
 800e230:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	7858      	ldrb	r0, [r3, #1]
 800e236:	6a3b      	ldr	r3, [r7, #32]
 800e238:	697a      	ldr	r2, [r7, #20]
 800e23a:	69f9      	ldr	r1, [r7, #28]
 800e23c:	f7fd fe8e 	bl	800bf5c <disk_write>
 800e240:	4603      	mov	r3, r0
 800e242:	2b00      	cmp	r3, #0
 800e244:	d004      	beq.n	800e250 <f_write+0x1ca>
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2201      	movs	r2, #1
 800e24a:	755a      	strb	r2, [r3, #21]
 800e24c:	2301      	movs	r3, #1
 800e24e:	e08b      	b.n	800e368 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6a1a      	ldr	r2, [r3, #32]
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	1ad3      	subs	r3, r2, r3
 800e258:	6a3a      	ldr	r2, [r7, #32]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d915      	bls.n	800e28a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	6a1a      	ldr	r2, [r3, #32]
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	1ad3      	subs	r3, r2, r3
 800e26c:	025b      	lsls	r3, r3, #9
 800e26e:	69fa      	ldr	r2, [r7, #28]
 800e270:	4413      	add	r3, r2
 800e272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e276:	4619      	mov	r1, r3
 800e278:	f7fd ff30 	bl	800c0dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	7d1b      	ldrb	r3, [r3, #20]
 800e280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e284:	b2da      	uxtb	r2, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e28a:	6a3b      	ldr	r3, [r7, #32]
 800e28c:	025b      	lsls	r3, r3, #9
 800e28e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e290:	e03f      	b.n	800e312 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	6a1b      	ldr	r3, [r3, #32]
 800e296:	697a      	ldr	r2, [r7, #20]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d016      	beq.n	800e2ca <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	699a      	ldr	r2, [r3, #24]
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d210      	bcs.n	800e2ca <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	7858      	ldrb	r0, [r3, #1]
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	697a      	ldr	r2, [r7, #20]
 800e2b6:	f7fd fe31 	bl	800bf1c <disk_read>
 800e2ba:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d004      	beq.n	800e2ca <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	755a      	strb	r2, [r3, #21]
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e04e      	b.n	800e368 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	697a      	ldr	r2, [r7, #20]
 800e2ce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	699b      	ldr	r3, [r3, #24]
 800e2d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2d8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e2dc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e2de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d901      	bls.n	800e2ea <f_write+0x264>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	699b      	ldr	r3, [r3, #24]
 800e2f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2f8:	4413      	add	r3, r2
 800e2fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2fc:	69f9      	ldr	r1, [r7, #28]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fd feec 	bl	800c0dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	7d1b      	ldrb	r3, [r3, #20]
 800e308:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e30c:	b2da      	uxtb	r2, r3
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e312:	69fa      	ldr	r2, [r7, #28]
 800e314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e316:	4413      	add	r3, r2
 800e318:	61fb      	str	r3, [r7, #28]
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	699a      	ldr	r2, [r3, #24]
 800e31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e320:	441a      	add	r2, r3
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	619a      	str	r2, [r3, #24]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	68da      	ldr	r2, [r3, #12]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	699b      	ldr	r3, [r3, #24]
 800e32e:	429a      	cmp	r2, r3
 800e330:	bf38      	it	cc
 800e332:	461a      	movcc	r2, r3
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	60da      	str	r2, [r3, #12]
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e33e:	441a      	add	r2, r3
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	601a      	str	r2, [r3, #0]
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	f47f aed4 	bne.w	800e0fc <f_write+0x76>
 800e354:	e000      	b.n	800e358 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e356:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	7d1b      	ldrb	r3, [r3, #20]
 800e35c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e360:	b2da      	uxtb	r2, r3
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3730      	adds	r7, #48	@ 0x30
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}

0800e370 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b086      	sub	sp, #24
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f107 0208 	add.w	r2, r7, #8
 800e37e:	4611      	mov	r1, r2
 800e380:	4618      	mov	r0, r3
 800e382:	f7ff fb0b 	bl	800d99c <validate>
 800e386:	4603      	mov	r3, r0
 800e388:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e38a:	7dfb      	ldrb	r3, [r7, #23]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d168      	bne.n	800e462 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	7d1b      	ldrb	r3, [r3, #20]
 800e394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d062      	beq.n	800e462 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	7d1b      	ldrb	r3, [r3, #20]
 800e3a0:	b25b      	sxtb	r3, r3
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	da15      	bge.n	800e3d2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	7858      	ldrb	r0, [r3, #1]
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6a1a      	ldr	r2, [r3, #32]
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	f7fd fdd1 	bl	800bf5c <disk_write>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d001      	beq.n	800e3c4 <f_sync+0x54>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	e04f      	b.n	800e464 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	7d1b      	ldrb	r3, [r3, #20]
 800e3c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3cc:	b2da      	uxtb	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e3d2:	f7fd fbf5 	bl	800bbc0 <get_fattime>
 800e3d6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e3d8:	68ba      	ldr	r2, [r7, #8]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3de:	4619      	mov	r1, r3
 800e3e0:	4610      	mov	r0, r2
 800e3e2:	f7fe f8a9 	bl	800c538 <move_window>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e3ea:	7dfb      	ldrb	r3, [r7, #23]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d138      	bne.n	800e462 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3f4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	330b      	adds	r3, #11
 800e3fa:	781a      	ldrb	r2, [r3, #0]
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	330b      	adds	r3, #11
 800e400:	f042 0220 	orr.w	r2, r2, #32
 800e404:	b2d2      	uxtb	r2, r2
 800e406:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6818      	ldr	r0, [r3, #0]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	689b      	ldr	r3, [r3, #8]
 800e410:	461a      	mov	r2, r3
 800e412:	68f9      	ldr	r1, [r7, #12]
 800e414:	f7fe fdb3 	bl	800cf7e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	f103 021c 	add.w	r2, r3, #28
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	4619      	mov	r1, r3
 800e424:	4610      	mov	r0, r2
 800e426:	f7fd fe2d 	bl	800c084 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	3316      	adds	r3, #22
 800e42e:	6939      	ldr	r1, [r7, #16]
 800e430:	4618      	mov	r0, r3
 800e432:	f7fd fe27 	bl	800c084 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	3312      	adds	r3, #18
 800e43a:	2100      	movs	r1, #0
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7fd fe06 	bl	800c04e <st_word>
					fs->wflag = 1;
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	2201      	movs	r2, #1
 800e446:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fe f8a2 	bl	800c594 <sync_fs>
 800e450:	4603      	mov	r3, r0
 800e452:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	7d1b      	ldrb	r3, [r3, #20]
 800e458:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e45c:	b2da      	uxtb	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e462:	7dfb      	ldrb	r3, [r7, #23]
}
 800e464:	4618      	mov	r0, r3
 800e466:	3718      	adds	r7, #24
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b084      	sub	sp, #16
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7ff ff7b 	bl	800e370 <f_sync>
 800e47a:	4603      	mov	r3, r0
 800e47c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e47e:	7bfb      	ldrb	r3, [r7, #15]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d118      	bne.n	800e4b6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f107 0208 	add.w	r2, r7, #8
 800e48a:	4611      	mov	r1, r2
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7ff fa85 	bl	800d99c <validate>
 800e492:	4603      	mov	r3, r0
 800e494:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e496:	7bfb      	ldrb	r3, [r7, #15]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d10c      	bne.n	800e4b6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	691b      	ldr	r3, [r3, #16]
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7fd ffa5 	bl	800c3f0 <dec_lock>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e4aa:	7bfb      	ldrb	r3, [r7, #15]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d102      	bne.n	800e4b6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3710      	adds	r7, #16
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b090      	sub	sp, #64	@ 0x40
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
 800e4c8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f107 0208 	add.w	r2, r7, #8
 800e4d0:	4611      	mov	r1, r2
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7ff fa62 	bl	800d99c <validate>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e4de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d103      	bne.n	800e4ee <f_lseek+0x2e>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	7d5b      	ldrb	r3, [r3, #21]
 800e4ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e4ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d002      	beq.n	800e4fc <f_lseek+0x3c>
 800e4f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e4fa:	e1e6      	b.n	800e8ca <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e500:	2b00      	cmp	r3, #0
 800e502:	f000 80d1 	beq.w	800e6a8 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e50c:	d15a      	bne.n	800e5c4 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e512:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e516:	1d1a      	adds	r2, r3, #4
 800e518:	627a      	str	r2, [r7, #36]	@ 0x24
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	617b      	str	r3, [r7, #20]
 800e51e:	2302      	movs	r3, #2
 800e520:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	689b      	ldr	r3, [r3, #8]
 800e526:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800e528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d03a      	beq.n	800e5a4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e530:	613b      	str	r3, [r7, #16]
 800e532:	2300      	movs	r3, #0
 800e534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e538:	3302      	adds	r3, #2
 800e53a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800e53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e53e:	60fb      	str	r3, [r7, #12]
 800e540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e542:	3301      	adds	r3, #1
 800e544:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fe f8af 	bl	800c6ae <get_fat>
 800e550:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e554:	2b01      	cmp	r3, #1
 800e556:	d804      	bhi.n	800e562 <f_lseek+0xa2>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2202      	movs	r2, #2
 800e55c:	755a      	strb	r2, [r3, #21]
 800e55e:	2302      	movs	r3, #2
 800e560:	e1b3      	b.n	800e8ca <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e564:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e568:	d104      	bne.n	800e574 <f_lseek+0xb4>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2201      	movs	r2, #1
 800e56e:	755a      	strb	r2, [r3, #21]
 800e570:	2301      	movs	r3, #1
 800e572:	e1aa      	b.n	800e8ca <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	3301      	adds	r3, #1
 800e578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d0de      	beq.n	800e53c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e57e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	429a      	cmp	r2, r3
 800e584:	d809      	bhi.n	800e59a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e588:	1d1a      	adds	r2, r3, #4
 800e58a:	627a      	str	r2, [r7, #36]	@ 0x24
 800e58c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e58e:	601a      	str	r2, [r3, #0]
 800e590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e592:	1d1a      	adds	r2, r3, #4
 800e594:	627a      	str	r2, [r7, #36]	@ 0x24
 800e596:	693a      	ldr	r2, [r7, #16]
 800e598:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	695b      	ldr	r3, [r3, #20]
 800e59e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d3c4      	bcc.n	800e52e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5aa:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e5ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d803      	bhi.n	800e5bc <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	601a      	str	r2, [r3, #0]
 800e5ba:	e184      	b.n	800e8c6 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e5bc:	2311      	movs	r3, #17
 800e5be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e5c2:	e180      	b.n	800e8c6 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	683a      	ldr	r2, [r7, #0]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d902      	bls.n	800e5d4 <f_lseek+0x114>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	68db      	ldr	r3, [r3, #12]
 800e5d2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	683a      	ldr	r2, [r7, #0]
 800e5d8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	f000 8172 	beq.w	800e8c6 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	3b01      	subs	r3, #1
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7fe faee 	bl	800cbca <clmt_clust>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e5f4:	68ba      	ldr	r2, [r7, #8]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	69db      	ldr	r3, [r3, #28]
 800e5fa:	4619      	mov	r1, r3
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	f7fe f837 	bl	800c670 <clust2sect>
 800e602:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d104      	bne.n	800e614 <f_lseek+0x154>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2202      	movs	r2, #2
 800e60e:	755a      	strb	r2, [r3, #21]
 800e610:	2302      	movs	r3, #2
 800e612:	e15a      	b.n	800e8ca <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	3b01      	subs	r3, #1
 800e618:	0a5b      	lsrs	r3, r3, #9
 800e61a:	68ba      	ldr	r2, [r7, #8]
 800e61c:	8952      	ldrh	r2, [r2, #10]
 800e61e:	3a01      	subs	r2, #1
 800e620:	4013      	ands	r3, r2
 800e622:	69ba      	ldr	r2, [r7, #24]
 800e624:	4413      	add	r3, r2
 800e626:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	699b      	ldr	r3, [r3, #24]
 800e62c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e630:	2b00      	cmp	r3, #0
 800e632:	f000 8148 	beq.w	800e8c6 <f_lseek+0x406>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6a1b      	ldr	r3, [r3, #32]
 800e63a:	69ba      	ldr	r2, [r7, #24]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	f000 8142 	beq.w	800e8c6 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	7d1b      	ldrb	r3, [r3, #20]
 800e646:	b25b      	sxtb	r3, r3
 800e648:	2b00      	cmp	r3, #0
 800e64a:	da18      	bge.n	800e67e <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	7858      	ldrb	r0, [r3, #1]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6a1a      	ldr	r2, [r3, #32]
 800e65a:	2301      	movs	r3, #1
 800e65c:	f7fd fc7e 	bl	800bf5c <disk_write>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d004      	beq.n	800e670 <f_lseek+0x1b0>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2201      	movs	r2, #1
 800e66a:	755a      	strb	r2, [r3, #21]
 800e66c:	2301      	movs	r3, #1
 800e66e:	e12c      	b.n	800e8ca <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	7d1b      	ldrb	r3, [r3, #20]
 800e674:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	7858      	ldrb	r0, [r3, #1]
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e688:	2301      	movs	r3, #1
 800e68a:	69ba      	ldr	r2, [r7, #24]
 800e68c:	f7fd fc46 	bl	800bf1c <disk_read>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d004      	beq.n	800e6a0 <f_lseek+0x1e0>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2201      	movs	r2, #1
 800e69a:	755a      	strb	r2, [r3, #21]
 800e69c:	2301      	movs	r3, #1
 800e69e:	e114      	b.n	800e8ca <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	69ba      	ldr	r2, [r7, #24]
 800e6a4:	621a      	str	r2, [r3, #32]
 800e6a6:	e10e      	b.n	800e8c6 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	68db      	ldr	r3, [r3, #12]
 800e6ac:	683a      	ldr	r2, [r7, #0]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d908      	bls.n	800e6c4 <f_lseek+0x204>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	7d1b      	ldrb	r3, [r3, #20]
 800e6b6:	f003 0302 	and.w	r3, r3, #2
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d102      	bne.n	800e6c4 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	699b      	ldr	r3, [r3, #24]
 800e6c8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e6d2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	f000 80a7 	beq.w	800e82a <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	895b      	ldrh	r3, [r3, #10]
 800e6e0:	025b      	lsls	r3, r3, #9
 800e6e2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e6e4:	6a3b      	ldr	r3, [r7, #32]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d01b      	beq.n	800e722 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	1e5a      	subs	r2, r3, #1
 800e6ee:	69fb      	ldr	r3, [r7, #28]
 800e6f0:	fbb2 f2f3 	udiv	r2, r2, r3
 800e6f4:	6a3b      	ldr	r3, [r7, #32]
 800e6f6:	1e59      	subs	r1, r3, #1
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d30f      	bcc.n	800e722 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e702:	6a3b      	ldr	r3, [r7, #32]
 800e704:	1e5a      	subs	r2, r3, #1
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	425b      	negs	r3, r3
 800e70a:	401a      	ands	r2, r3
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	699b      	ldr	r3, [r3, #24]
 800e714:	683a      	ldr	r2, [r7, #0]
 800e716:	1ad3      	subs	r3, r2, r3
 800e718:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	69db      	ldr	r3, [r3, #28]
 800e71e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e720:	e022      	b.n	800e768 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	689b      	ldr	r3, [r3, #8]
 800e726:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d119      	bne.n	800e762 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2100      	movs	r1, #0
 800e732:	4618      	mov	r0, r3
 800e734:	f7fe f9b1 	bl	800ca9a <create_chain>
 800e738:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d104      	bne.n	800e74a <f_lseek+0x28a>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2202      	movs	r2, #2
 800e744:	755a      	strb	r2, [r3, #21]
 800e746:	2302      	movs	r3, #2
 800e748:	e0bf      	b.n	800e8ca <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e750:	d104      	bne.n	800e75c <f_lseek+0x29c>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2201      	movs	r2, #1
 800e756:	755a      	strb	r2, [r3, #21]
 800e758:	2301      	movs	r3, #1
 800e75a:	e0b6      	b.n	800e8ca <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e760:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e766:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d05d      	beq.n	800e82a <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e76e:	e03a      	b.n	800e7e6 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e770:	683a      	ldr	r2, [r7, #0]
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	1ad3      	subs	r3, r2, r3
 800e776:	603b      	str	r3, [r7, #0]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	699a      	ldr	r2, [r3, #24]
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	441a      	add	r2, r3
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	7d1b      	ldrb	r3, [r3, #20]
 800e788:	f003 0302 	and.w	r3, r3, #2
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d00b      	beq.n	800e7a8 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e794:	4618      	mov	r0, r3
 800e796:	f7fe f980 	bl	800ca9a <create_chain>
 800e79a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d108      	bne.n	800e7b4 <f_lseek+0x2f4>
							ofs = 0; break;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	603b      	str	r3, [r7, #0]
 800e7a6:	e022      	b.n	800e7ee <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fd ff7e 	bl	800c6ae <get_fat>
 800e7b2:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ba:	d104      	bne.n	800e7c6 <f_lseek+0x306>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2201      	movs	r2, #1
 800e7c0:	755a      	strb	r2, [r3, #21]
 800e7c2:	2301      	movs	r3, #1
 800e7c4:	e081      	b.n	800e8ca <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	d904      	bls.n	800e7d6 <f_lseek+0x316>
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	695b      	ldr	r3, [r3, #20]
 800e7d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d304      	bcc.n	800e7e0 <f_lseek+0x320>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2202      	movs	r2, #2
 800e7da:	755a      	strb	r2, [r3, #21]
 800e7dc:	2302      	movs	r3, #2
 800e7de:	e074      	b.n	800e8ca <f_lseek+0x40a>
					fp->clust = clst;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e7e4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e7e6:	683a      	ldr	r2, [r7, #0]
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d8c0      	bhi.n	800e770 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	699a      	ldr	r2, [r3, #24]
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	441a      	add	r2, r3
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e800:	2b00      	cmp	r3, #0
 800e802:	d012      	beq.n	800e82a <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e808:	4618      	mov	r0, r3
 800e80a:	f7fd ff31 	bl	800c670 <clust2sect>
 800e80e:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e812:	2b00      	cmp	r3, #0
 800e814:	d104      	bne.n	800e820 <f_lseek+0x360>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2202      	movs	r2, #2
 800e81a:	755a      	strb	r2, [r3, #21]
 800e81c:	2302      	movs	r3, #2
 800e81e:	e054      	b.n	800e8ca <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	0a5b      	lsrs	r3, r3, #9
 800e824:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e826:	4413      	add	r3, r2
 800e828:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	699a      	ldr	r2, [r3, #24]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	429a      	cmp	r2, r3
 800e834:	d90a      	bls.n	800e84c <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	699a      	ldr	r2, [r3, #24]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	7d1b      	ldrb	r3, [r3, #20]
 800e842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e846:	b2da      	uxtb	r2, r3
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	699b      	ldr	r3, [r3, #24]
 800e850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e854:	2b00      	cmp	r3, #0
 800e856:	d036      	beq.n	800e8c6 <f_lseek+0x406>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6a1b      	ldr	r3, [r3, #32]
 800e85c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e85e:	429a      	cmp	r2, r3
 800e860:	d031      	beq.n	800e8c6 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	7d1b      	ldrb	r3, [r3, #20]
 800e866:	b25b      	sxtb	r3, r3
 800e868:	2b00      	cmp	r3, #0
 800e86a:	da18      	bge.n	800e89e <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	7858      	ldrb	r0, [r3, #1]
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6a1a      	ldr	r2, [r3, #32]
 800e87a:	2301      	movs	r3, #1
 800e87c:	f7fd fb6e 	bl	800bf5c <disk_write>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d004      	beq.n	800e890 <f_lseek+0x3d0>
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2201      	movs	r2, #1
 800e88a:	755a      	strb	r2, [r3, #21]
 800e88c:	2301      	movs	r3, #1
 800e88e:	e01c      	b.n	800e8ca <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	7d1b      	ldrb	r3, [r3, #20]
 800e894:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e898:	b2da      	uxtb	r2, r3
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	7858      	ldrb	r0, [r3, #1]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8ac:	f7fd fb36 	bl	800bf1c <disk_read>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d004      	beq.n	800e8c0 <f_lseek+0x400>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	755a      	strb	r2, [r3, #21]
 800e8bc:	2301      	movs	r3, #1
 800e8be:	e004      	b.n	800e8ca <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8c4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e8c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3740      	adds	r7, #64	@ 0x40
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}

0800e8d2 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800e8d2:	b580      	push	{r7, lr}
 800e8d4:	b09e      	sub	sp, #120	@ 0x78
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800e8de:	f107 010c 	add.w	r1, r7, #12
 800e8e2:	1d3b      	adds	r3, r7, #4
 800e8e4:	2202      	movs	r2, #2
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fe fe0c 	bl	800d504 <find_volume>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800e8f6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	f040 808e 	bne.w	800ea1c <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800e900:	687a      	ldr	r2, [r7, #4]
 800e902:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e906:	4611      	mov	r1, r2
 800e908:	4618      	mov	r0, r3
 800e90a:	f7fe fcef 	bl	800d2ec <follow_path>
 800e90e:	4603      	mov	r3, r0
 800e910:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800e914:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d108      	bne.n	800e92e <f_unlink+0x5c>
 800e91c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e920:	2102      	movs	r1, #2
 800e922:	4618      	mov	r0, r3
 800e924:	f7fd fc58 	bl	800c1d8 <chk_lock>
 800e928:	4603      	mov	r3, r0
 800e92a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800e92e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e932:	2b00      	cmp	r3, #0
 800e934:	d172      	bne.n	800ea1c <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800e936:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e93a:	b25b      	sxtb	r3, r3
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	da03      	bge.n	800e948 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800e940:	2306      	movs	r3, #6
 800e942:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800e946:	e008      	b.n	800e95a <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800e948:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e94c:	f003 0301 	and.w	r3, r3, #1
 800e950:	2b00      	cmp	r3, #0
 800e952:	d002      	beq.n	800e95a <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800e954:	2307      	movs	r3, #7
 800e956:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800e95a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d134      	bne.n	800e9cc <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e966:	4611      	mov	r1, r2
 800e968:	4618      	mov	r0, r3
 800e96a:	f7fe fae9 	bl	800cf40 <ld_clust>
 800e96e:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800e970:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e974:	f003 0310 	and.w	r3, r3, #16
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d027      	beq.n	800e9cc <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800e980:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e982:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800e984:	f107 0310 	add.w	r3, r7, #16
 800e988:	2100      	movs	r1, #0
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fe f951 	bl	800cc32 <dir_sdi>
 800e990:	4603      	mov	r3, r0
 800e992:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800e996:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d116      	bne.n	800e9cc <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800e99e:	f107 0310 	add.w	r3, r7, #16
 800e9a2:	2100      	movs	r1, #0
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7fe fb0a 	bl	800cfbe <dir_read>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800e9b0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d102      	bne.n	800e9be <f_unlink+0xec>
 800e9b8:	2307      	movs	r3, #7
 800e9ba:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800e9be:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e9c2:	2b04      	cmp	r3, #4
 800e9c4:	d102      	bne.n	800e9cc <f_unlink+0xfa>
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800e9cc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d123      	bne.n	800ea1c <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800e9d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fe fbd4 	bl	800d186 <dir_remove>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800e9e4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d10c      	bne.n	800ea06 <f_unlink+0x134>
 800e9ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d009      	beq.n	800ea06 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800e9f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fd ffe8 	bl	800c9d0 <remove_chain>
 800ea00:	4603      	mov	r3, r0
 800ea02:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800ea06:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d106      	bne.n	800ea1c <f_unlink+0x14a>
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7fd fdbf 	bl	800c594 <sync_fs>
 800ea16:	4603      	mov	r3, r0
 800ea18:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ea1c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3778      	adds	r7, #120	@ 0x78
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800ea28:	b590      	push	{r4, r7, lr}
 800ea2a:	b0a5      	sub	sp, #148	@ 0x94
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800ea32:	463b      	mov	r3, r7
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7fe fcca 	bl	800d3ce <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800ea3a:	f107 0120 	add.w	r1, r7, #32
 800ea3e:	1d3b      	adds	r3, r7, #4
 800ea40:	2202      	movs	r2, #2
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7fe fd5e 	bl	800d504 <find_volume>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800ea4e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	f040 80db 	bne.w	800ec0e <f_rename+0x1e6>
		djo.obj.fs = fs;
 800ea58:	6a3b      	ldr	r3, [r7, #32]
 800ea5a:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ea62:	4611      	mov	r1, r2
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fe fc41 	bl	800d2ec <follow_path>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800ea70:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d108      	bne.n	800ea8a <f_rename+0x62>
 800ea78:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800ea7c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d002      	beq.n	800ea8a <f_rename+0x62>
 800ea84:	2306      	movs	r3, #6
 800ea86:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800ea8a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d108      	bne.n	800eaa4 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800ea92:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ea96:	2102      	movs	r1, #2
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7fd fb9d 	bl	800c1d8 <chk_lock>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800eaa4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f040 80b0 	bne.w	800ec0e <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800eaae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eab0:	f103 010b 	add.w	r1, r3, #11
 800eab4:	f107 0308 	add.w	r3, r7, #8
 800eab8:	2215      	movs	r2, #21
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fd fb0e 	bl	800c0dc <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800eac0:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800eac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eac8:	2230      	movs	r2, #48	@ 0x30
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fd fb06 	bl	800c0dc <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800ead0:	683a      	ldr	r2, [r7, #0]
 800ead2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ead6:	4611      	mov	r1, r2
 800ead8:	4618      	mov	r0, r3
 800eada:	f7fe fc07 	bl	800d2ec <follow_path>
 800eade:	4603      	mov	r3, r0
 800eae0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800eae4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d10c      	bne.n	800eb06 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800eaec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eaee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d105      	bne.n	800eb00 <f_rename+0xd8>
 800eaf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eaf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d101      	bne.n	800eb00 <f_rename+0xd8>
 800eafc:	2304      	movs	r3, #4
 800eafe:	e000      	b.n	800eb02 <f_rename+0xda>
 800eb00:	2308      	movs	r3, #8
 800eb02:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800eb06:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800eb0a:	2b04      	cmp	r3, #4
 800eb0c:	d168      	bne.n	800ebe0 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800eb0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7fe fb05 	bl	800d122 <dir_register>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 800eb1e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d15c      	bne.n	800ebe0 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800eb26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800eb2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800eb30:	f103 000d 	add.w	r0, r3, #13
 800eb34:	f107 0308 	add.w	r3, r7, #8
 800eb38:	3302      	adds	r3, #2
 800eb3a:	2213      	movs	r2, #19
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	f7fd facd 	bl	800c0dc <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800eb42:	7a3a      	ldrb	r2, [r7, #8]
 800eb44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800eb48:	330b      	adds	r3, #11
 800eb4a:	f042 0220 	orr.w	r2, r2, #32
 800eb4e:	b2d2      	uxtb	r2, r2
 800eb50:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800eb52:	6a3b      	ldr	r3, [r7, #32]
 800eb54:	2201      	movs	r2, #1
 800eb56:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800eb58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800eb5c:	330b      	adds	r3, #11
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	f003 0310 	and.w	r3, r3, #16
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d03b      	beq.n	800ebe0 <f_rename+0x1b8>
 800eb68:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800eb6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d037      	beq.n	800ebe0 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800eb70:	6a3c      	ldr	r4, [r7, #32]
 800eb72:	6a3b      	ldr	r3, [r7, #32]
 800eb74:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fe f9e1 	bl	800cf40 <ld_clust>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	4619      	mov	r1, r3
 800eb82:	4620      	mov	r0, r4
 800eb84:	f7fd fd74 	bl	800c670 <clust2sect>
 800eb88:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 800eb8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d103      	bne.n	800eb9c <f_rename+0x174>
								res = FR_INT_ERR;
 800eb94:	2302      	movs	r3, #2
 800eb96:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800eb9a:	e021      	b.n	800ebe0 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800eb9c:	6a3b      	ldr	r3, [r7, #32]
 800eb9e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7fd fcc8 	bl	800c538 <move_window>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800ebae:	6a3b      	ldr	r3, [r7, #32]
 800ebb0:	3330      	adds	r3, #48	@ 0x30
 800ebb2:	3320      	adds	r3, #32
 800ebb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 800ebb8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10f      	bne.n	800ebe0 <f_rename+0x1b8>
 800ebc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ebc4:	3301      	adds	r3, #1
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebca:	d109      	bne.n	800ebe0 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800ebcc:	6a3b      	ldr	r3, [r7, #32]
 800ebce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ebd0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7fe f9d2 	bl	800cf7e <st_clust>
									fs->wflag = 1;
 800ebda:	6a3b      	ldr	r3, [r7, #32]
 800ebdc:	2201      	movs	r2, #1
 800ebde:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800ebe0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d112      	bne.n	800ec0e <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800ebe8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ebec:	4618      	mov	r0, r3
 800ebee:	f7fe faca 	bl	800d186 <dir_remove>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 800ebf8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d106      	bne.n	800ec0e <f_rename+0x1e6>
					res = sync_fs(fs);
 800ec00:	6a3b      	ldr	r3, [r7, #32]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7fd fcc6 	bl	800c594 <sync_fs>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ec0e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3794      	adds	r7, #148	@ 0x94
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd90      	pop	{r4, r7, pc}
	...

0800ec1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b087      	sub	sp, #28
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	60b9      	str	r1, [r7, #8]
 800ec26:	4613      	mov	r3, r2
 800ec28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ec32:	4b1f      	ldr	r3, [pc, #124]	@ (800ecb0 <FATFS_LinkDriverEx+0x94>)
 800ec34:	7a5b      	ldrb	r3, [r3, #9]
 800ec36:	b2db      	uxtb	r3, r3
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d131      	bne.n	800eca0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ec3c:	4b1c      	ldr	r3, [pc, #112]	@ (800ecb0 <FATFS_LinkDriverEx+0x94>)
 800ec3e:	7a5b      	ldrb	r3, [r3, #9]
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	461a      	mov	r2, r3
 800ec44:	4b1a      	ldr	r3, [pc, #104]	@ (800ecb0 <FATFS_LinkDriverEx+0x94>)
 800ec46:	2100      	movs	r1, #0
 800ec48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ec4a:	4b19      	ldr	r3, [pc, #100]	@ (800ecb0 <FATFS_LinkDriverEx+0x94>)
 800ec4c:	7a5b      	ldrb	r3, [r3, #9]
 800ec4e:	b2db      	uxtb	r3, r3
 800ec50:	4a17      	ldr	r2, [pc, #92]	@ (800ecb0 <FATFS_LinkDriverEx+0x94>)
 800ec52:	009b      	lsls	r3, r3, #2
 800ec54:	4413      	add	r3, r2
 800ec56:	68fa      	ldr	r2, [r7, #12]
 800ec58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ec5a:	4b15      	ldr	r3, [pc, #84]	@ (800ecb0 <FATFS_LinkDriverEx+0x94>)
 800ec5c:	7a5b      	ldrb	r3, [r3, #9]
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	461a      	mov	r2, r3
 800ec62:	4b13      	ldr	r3, [pc, #76]	@ (800ecb0 <FATFS_LinkDriverEx+0x94>)
 800ec64:	4413      	add	r3, r2
 800ec66:	79fa      	ldrb	r2, [r7, #7]
 800ec68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ec6a:	4b11      	ldr	r3, [pc, #68]	@ (800ecb0 <FATFS_LinkDriverEx+0x94>)
 800ec6c:	7a5b      	ldrb	r3, [r3, #9]
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	1c5a      	adds	r2, r3, #1
 800ec72:	b2d1      	uxtb	r1, r2
 800ec74:	4a0e      	ldr	r2, [pc, #56]	@ (800ecb0 <FATFS_LinkDriverEx+0x94>)
 800ec76:	7251      	strb	r1, [r2, #9]
 800ec78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ec7a:	7dbb      	ldrb	r3, [r7, #22]
 800ec7c:	3330      	adds	r3, #48	@ 0x30
 800ec7e:	b2da      	uxtb	r2, r3
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	3301      	adds	r3, #1
 800ec88:	223a      	movs	r2, #58	@ 0x3a
 800ec8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	3302      	adds	r3, #2
 800ec90:	222f      	movs	r2, #47	@ 0x2f
 800ec92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	3303      	adds	r3, #3
 800ec98:	2200      	movs	r2, #0
 800ec9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800eca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	371c      	adds	r7, #28
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
 800ecae:	bf00      	nop
 800ecb0:	20014764 	.word	0x20014764

0800ecb4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	6839      	ldr	r1, [r7, #0]
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f7ff ffaa 	bl	800ec1c <FATFS_LinkDriverEx>
 800ecc8:	4603      	mov	r3, r0
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
	...

0800ecd4 <malloc>:
 800ecd4:	4b02      	ldr	r3, [pc, #8]	@ (800ece0 <malloc+0xc>)
 800ecd6:	4601      	mov	r1, r0
 800ecd8:	6818      	ldr	r0, [r3, #0]
 800ecda:	f000 b82d 	b.w	800ed38 <_malloc_r>
 800ecde:	bf00      	nop
 800ece0:	2000001c 	.word	0x2000001c

0800ece4 <free>:
 800ece4:	4b02      	ldr	r3, [pc, #8]	@ (800ecf0 <free+0xc>)
 800ece6:	4601      	mov	r1, r0
 800ece8:	6818      	ldr	r0, [r3, #0]
 800ecea:	f000 b967 	b.w	800efbc <_free_r>
 800ecee:	bf00      	nop
 800ecf0:	2000001c 	.word	0x2000001c

0800ecf4 <sbrk_aligned>:
 800ecf4:	b570      	push	{r4, r5, r6, lr}
 800ecf6:	4e0f      	ldr	r6, [pc, #60]	@ (800ed34 <sbrk_aligned+0x40>)
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	6831      	ldr	r1, [r6, #0]
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	b911      	cbnz	r1, 800ed06 <sbrk_aligned+0x12>
 800ed00:	f000 f90a 	bl	800ef18 <_sbrk_r>
 800ed04:	6030      	str	r0, [r6, #0]
 800ed06:	4621      	mov	r1, r4
 800ed08:	4628      	mov	r0, r5
 800ed0a:	f000 f905 	bl	800ef18 <_sbrk_r>
 800ed0e:	1c43      	adds	r3, r0, #1
 800ed10:	d103      	bne.n	800ed1a <sbrk_aligned+0x26>
 800ed12:	f04f 34ff 	mov.w	r4, #4294967295
 800ed16:	4620      	mov	r0, r4
 800ed18:	bd70      	pop	{r4, r5, r6, pc}
 800ed1a:	1cc4      	adds	r4, r0, #3
 800ed1c:	f024 0403 	bic.w	r4, r4, #3
 800ed20:	42a0      	cmp	r0, r4
 800ed22:	d0f8      	beq.n	800ed16 <sbrk_aligned+0x22>
 800ed24:	1a21      	subs	r1, r4, r0
 800ed26:	4628      	mov	r0, r5
 800ed28:	f000 f8f6 	bl	800ef18 <_sbrk_r>
 800ed2c:	3001      	adds	r0, #1
 800ed2e:	d1f2      	bne.n	800ed16 <sbrk_aligned+0x22>
 800ed30:	e7ef      	b.n	800ed12 <sbrk_aligned+0x1e>
 800ed32:	bf00      	nop
 800ed34:	20014770 	.word	0x20014770

0800ed38 <_malloc_r>:
 800ed38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed3c:	1ccd      	adds	r5, r1, #3
 800ed3e:	f025 0503 	bic.w	r5, r5, #3
 800ed42:	3508      	adds	r5, #8
 800ed44:	2d0c      	cmp	r5, #12
 800ed46:	bf38      	it	cc
 800ed48:	250c      	movcc	r5, #12
 800ed4a:	2d00      	cmp	r5, #0
 800ed4c:	4606      	mov	r6, r0
 800ed4e:	db01      	blt.n	800ed54 <_malloc_r+0x1c>
 800ed50:	42a9      	cmp	r1, r5
 800ed52:	d904      	bls.n	800ed5e <_malloc_r+0x26>
 800ed54:	230c      	movs	r3, #12
 800ed56:	6033      	str	r3, [r6, #0]
 800ed58:	2000      	movs	r0, #0
 800ed5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ee34 <_malloc_r+0xfc>
 800ed62:	f000 f869 	bl	800ee38 <__malloc_lock>
 800ed66:	f8d8 3000 	ldr.w	r3, [r8]
 800ed6a:	461c      	mov	r4, r3
 800ed6c:	bb44      	cbnz	r4, 800edc0 <_malloc_r+0x88>
 800ed6e:	4629      	mov	r1, r5
 800ed70:	4630      	mov	r0, r6
 800ed72:	f7ff ffbf 	bl	800ecf4 <sbrk_aligned>
 800ed76:	1c43      	adds	r3, r0, #1
 800ed78:	4604      	mov	r4, r0
 800ed7a:	d158      	bne.n	800ee2e <_malloc_r+0xf6>
 800ed7c:	f8d8 4000 	ldr.w	r4, [r8]
 800ed80:	4627      	mov	r7, r4
 800ed82:	2f00      	cmp	r7, #0
 800ed84:	d143      	bne.n	800ee0e <_malloc_r+0xd6>
 800ed86:	2c00      	cmp	r4, #0
 800ed88:	d04b      	beq.n	800ee22 <_malloc_r+0xea>
 800ed8a:	6823      	ldr	r3, [r4, #0]
 800ed8c:	4639      	mov	r1, r7
 800ed8e:	4630      	mov	r0, r6
 800ed90:	eb04 0903 	add.w	r9, r4, r3
 800ed94:	f000 f8c0 	bl	800ef18 <_sbrk_r>
 800ed98:	4581      	cmp	r9, r0
 800ed9a:	d142      	bne.n	800ee22 <_malloc_r+0xea>
 800ed9c:	6821      	ldr	r1, [r4, #0]
 800ed9e:	1a6d      	subs	r5, r5, r1
 800eda0:	4629      	mov	r1, r5
 800eda2:	4630      	mov	r0, r6
 800eda4:	f7ff ffa6 	bl	800ecf4 <sbrk_aligned>
 800eda8:	3001      	adds	r0, #1
 800edaa:	d03a      	beq.n	800ee22 <_malloc_r+0xea>
 800edac:	6823      	ldr	r3, [r4, #0]
 800edae:	442b      	add	r3, r5
 800edb0:	6023      	str	r3, [r4, #0]
 800edb2:	f8d8 3000 	ldr.w	r3, [r8]
 800edb6:	685a      	ldr	r2, [r3, #4]
 800edb8:	bb62      	cbnz	r2, 800ee14 <_malloc_r+0xdc>
 800edba:	f8c8 7000 	str.w	r7, [r8]
 800edbe:	e00f      	b.n	800ede0 <_malloc_r+0xa8>
 800edc0:	6822      	ldr	r2, [r4, #0]
 800edc2:	1b52      	subs	r2, r2, r5
 800edc4:	d420      	bmi.n	800ee08 <_malloc_r+0xd0>
 800edc6:	2a0b      	cmp	r2, #11
 800edc8:	d917      	bls.n	800edfa <_malloc_r+0xc2>
 800edca:	1961      	adds	r1, r4, r5
 800edcc:	42a3      	cmp	r3, r4
 800edce:	6025      	str	r5, [r4, #0]
 800edd0:	bf18      	it	ne
 800edd2:	6059      	strne	r1, [r3, #4]
 800edd4:	6863      	ldr	r3, [r4, #4]
 800edd6:	bf08      	it	eq
 800edd8:	f8c8 1000 	streq.w	r1, [r8]
 800eddc:	5162      	str	r2, [r4, r5]
 800edde:	604b      	str	r3, [r1, #4]
 800ede0:	4630      	mov	r0, r6
 800ede2:	f000 f82f 	bl	800ee44 <__malloc_unlock>
 800ede6:	f104 000b 	add.w	r0, r4, #11
 800edea:	1d23      	adds	r3, r4, #4
 800edec:	f020 0007 	bic.w	r0, r0, #7
 800edf0:	1ac2      	subs	r2, r0, r3
 800edf2:	bf1c      	itt	ne
 800edf4:	1a1b      	subne	r3, r3, r0
 800edf6:	50a3      	strne	r3, [r4, r2]
 800edf8:	e7af      	b.n	800ed5a <_malloc_r+0x22>
 800edfa:	6862      	ldr	r2, [r4, #4]
 800edfc:	42a3      	cmp	r3, r4
 800edfe:	bf0c      	ite	eq
 800ee00:	f8c8 2000 	streq.w	r2, [r8]
 800ee04:	605a      	strne	r2, [r3, #4]
 800ee06:	e7eb      	b.n	800ede0 <_malloc_r+0xa8>
 800ee08:	4623      	mov	r3, r4
 800ee0a:	6864      	ldr	r4, [r4, #4]
 800ee0c:	e7ae      	b.n	800ed6c <_malloc_r+0x34>
 800ee0e:	463c      	mov	r4, r7
 800ee10:	687f      	ldr	r7, [r7, #4]
 800ee12:	e7b6      	b.n	800ed82 <_malloc_r+0x4a>
 800ee14:	461a      	mov	r2, r3
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	42a3      	cmp	r3, r4
 800ee1a:	d1fb      	bne.n	800ee14 <_malloc_r+0xdc>
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	6053      	str	r3, [r2, #4]
 800ee20:	e7de      	b.n	800ede0 <_malloc_r+0xa8>
 800ee22:	230c      	movs	r3, #12
 800ee24:	6033      	str	r3, [r6, #0]
 800ee26:	4630      	mov	r0, r6
 800ee28:	f000 f80c 	bl	800ee44 <__malloc_unlock>
 800ee2c:	e794      	b.n	800ed58 <_malloc_r+0x20>
 800ee2e:	6005      	str	r5, [r0, #0]
 800ee30:	e7d6      	b.n	800ede0 <_malloc_r+0xa8>
 800ee32:	bf00      	nop
 800ee34:	20014774 	.word	0x20014774

0800ee38 <__malloc_lock>:
 800ee38:	4801      	ldr	r0, [pc, #4]	@ (800ee40 <__malloc_lock+0x8>)
 800ee3a:	f000 b8a7 	b.w	800ef8c <__retarget_lock_acquire_recursive>
 800ee3e:	bf00      	nop
 800ee40:	200148b4 	.word	0x200148b4

0800ee44 <__malloc_unlock>:
 800ee44:	4801      	ldr	r0, [pc, #4]	@ (800ee4c <__malloc_unlock+0x8>)
 800ee46:	f000 b8a2 	b.w	800ef8e <__retarget_lock_release_recursive>
 800ee4a:	bf00      	nop
 800ee4c:	200148b4 	.word	0x200148b4

0800ee50 <realloc>:
 800ee50:	4b02      	ldr	r3, [pc, #8]	@ (800ee5c <realloc+0xc>)
 800ee52:	460a      	mov	r2, r1
 800ee54:	4601      	mov	r1, r0
 800ee56:	6818      	ldr	r0, [r3, #0]
 800ee58:	f000 b802 	b.w	800ee60 <_realloc_r>
 800ee5c:	2000001c 	.word	0x2000001c

0800ee60 <_realloc_r>:
 800ee60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee64:	4680      	mov	r8, r0
 800ee66:	4615      	mov	r5, r2
 800ee68:	460c      	mov	r4, r1
 800ee6a:	b921      	cbnz	r1, 800ee76 <_realloc_r+0x16>
 800ee6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee70:	4611      	mov	r1, r2
 800ee72:	f7ff bf61 	b.w	800ed38 <_malloc_r>
 800ee76:	b92a      	cbnz	r2, 800ee84 <_realloc_r+0x24>
 800ee78:	f000 f8a0 	bl	800efbc <_free_r>
 800ee7c:	2400      	movs	r4, #0
 800ee7e:	4620      	mov	r0, r4
 800ee80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee84:	f000 f8e4 	bl	800f050 <_malloc_usable_size_r>
 800ee88:	4285      	cmp	r5, r0
 800ee8a:	4606      	mov	r6, r0
 800ee8c:	d802      	bhi.n	800ee94 <_realloc_r+0x34>
 800ee8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ee92:	d8f4      	bhi.n	800ee7e <_realloc_r+0x1e>
 800ee94:	4629      	mov	r1, r5
 800ee96:	4640      	mov	r0, r8
 800ee98:	f7ff ff4e 	bl	800ed38 <_malloc_r>
 800ee9c:	4607      	mov	r7, r0
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	d0ec      	beq.n	800ee7c <_realloc_r+0x1c>
 800eea2:	42b5      	cmp	r5, r6
 800eea4:	462a      	mov	r2, r5
 800eea6:	4621      	mov	r1, r4
 800eea8:	bf28      	it	cs
 800eeaa:	4632      	movcs	r2, r6
 800eeac:	f000 f878 	bl	800efa0 <memcpy>
 800eeb0:	4621      	mov	r1, r4
 800eeb2:	4640      	mov	r0, r8
 800eeb4:	f000 f882 	bl	800efbc <_free_r>
 800eeb8:	463c      	mov	r4, r7
 800eeba:	e7e0      	b.n	800ee7e <_realloc_r+0x1e>

0800eebc <memset>:
 800eebc:	4402      	add	r2, r0
 800eebe:	4603      	mov	r3, r0
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d100      	bne.n	800eec6 <memset+0xa>
 800eec4:	4770      	bx	lr
 800eec6:	f803 1b01 	strb.w	r1, [r3], #1
 800eeca:	e7f9      	b.n	800eec0 <memset+0x4>

0800eecc <strcat>:
 800eecc:	b510      	push	{r4, lr}
 800eece:	4602      	mov	r2, r0
 800eed0:	7814      	ldrb	r4, [r2, #0]
 800eed2:	4613      	mov	r3, r2
 800eed4:	3201      	adds	r2, #1
 800eed6:	2c00      	cmp	r4, #0
 800eed8:	d1fa      	bne.n	800eed0 <strcat+0x4>
 800eeda:	3b01      	subs	r3, #1
 800eedc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eee0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eee4:	2a00      	cmp	r2, #0
 800eee6:	d1f9      	bne.n	800eedc <strcat+0x10>
 800eee8:	bd10      	pop	{r4, pc}

0800eeea <strrchr>:
 800eeea:	b538      	push	{r3, r4, r5, lr}
 800eeec:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800eef0:	4603      	mov	r3, r0
 800eef2:	d10e      	bne.n	800ef12 <strrchr+0x28>
 800eef4:	4621      	mov	r1, r4
 800eef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eefa:	f000 b8b1 	b.w	800f060 <strchr>
 800eefe:	1c43      	adds	r3, r0, #1
 800ef00:	4605      	mov	r5, r0
 800ef02:	4621      	mov	r1, r4
 800ef04:	4618      	mov	r0, r3
 800ef06:	f000 f8ab 	bl	800f060 <strchr>
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	d1f7      	bne.n	800eefe <strrchr+0x14>
 800ef0e:	4628      	mov	r0, r5
 800ef10:	bd38      	pop	{r3, r4, r5, pc}
 800ef12:	2500      	movs	r5, #0
 800ef14:	e7f5      	b.n	800ef02 <strrchr+0x18>
	...

0800ef18 <_sbrk_r>:
 800ef18:	b538      	push	{r3, r4, r5, lr}
 800ef1a:	4d06      	ldr	r5, [pc, #24]	@ (800ef34 <_sbrk_r+0x1c>)
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	4604      	mov	r4, r0
 800ef20:	4608      	mov	r0, r1
 800ef22:	602b      	str	r3, [r5, #0]
 800ef24:	f7f6 f948 	bl	80051b8 <_sbrk>
 800ef28:	1c43      	adds	r3, r0, #1
 800ef2a:	d102      	bne.n	800ef32 <_sbrk_r+0x1a>
 800ef2c:	682b      	ldr	r3, [r5, #0]
 800ef2e:	b103      	cbz	r3, 800ef32 <_sbrk_r+0x1a>
 800ef30:	6023      	str	r3, [r4, #0]
 800ef32:	bd38      	pop	{r3, r4, r5, pc}
 800ef34:	200148b0 	.word	0x200148b0

0800ef38 <__errno>:
 800ef38:	4b01      	ldr	r3, [pc, #4]	@ (800ef40 <__errno+0x8>)
 800ef3a:	6818      	ldr	r0, [r3, #0]
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop
 800ef40:	2000001c 	.word	0x2000001c

0800ef44 <__libc_init_array>:
 800ef44:	b570      	push	{r4, r5, r6, lr}
 800ef46:	4d0d      	ldr	r5, [pc, #52]	@ (800ef7c <__libc_init_array+0x38>)
 800ef48:	4c0d      	ldr	r4, [pc, #52]	@ (800ef80 <__libc_init_array+0x3c>)
 800ef4a:	1b64      	subs	r4, r4, r5
 800ef4c:	10a4      	asrs	r4, r4, #2
 800ef4e:	2600      	movs	r6, #0
 800ef50:	42a6      	cmp	r6, r4
 800ef52:	d109      	bne.n	800ef68 <__libc_init_array+0x24>
 800ef54:	4d0b      	ldr	r5, [pc, #44]	@ (800ef84 <__libc_init_array+0x40>)
 800ef56:	4c0c      	ldr	r4, [pc, #48]	@ (800ef88 <__libc_init_array+0x44>)
 800ef58:	f000 f890 	bl	800f07c <_init>
 800ef5c:	1b64      	subs	r4, r4, r5
 800ef5e:	10a4      	asrs	r4, r4, #2
 800ef60:	2600      	movs	r6, #0
 800ef62:	42a6      	cmp	r6, r4
 800ef64:	d105      	bne.n	800ef72 <__libc_init_array+0x2e>
 800ef66:	bd70      	pop	{r4, r5, r6, pc}
 800ef68:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef6c:	4798      	blx	r3
 800ef6e:	3601      	adds	r6, #1
 800ef70:	e7ee      	b.n	800ef50 <__libc_init_array+0xc>
 800ef72:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef76:	4798      	blx	r3
 800ef78:	3601      	adds	r6, #1
 800ef7a:	e7f2      	b.n	800ef62 <__libc_init_array+0x1e>
 800ef7c:	080100d8 	.word	0x080100d8
 800ef80:	080100d8 	.word	0x080100d8
 800ef84:	080100d8 	.word	0x080100d8
 800ef88:	080100dc 	.word	0x080100dc

0800ef8c <__retarget_lock_acquire_recursive>:
 800ef8c:	4770      	bx	lr

0800ef8e <__retarget_lock_release_recursive>:
 800ef8e:	4770      	bx	lr

0800ef90 <strcpy>:
 800ef90:	4603      	mov	r3, r0
 800ef92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef96:	f803 2b01 	strb.w	r2, [r3], #1
 800ef9a:	2a00      	cmp	r2, #0
 800ef9c:	d1f9      	bne.n	800ef92 <strcpy+0x2>
 800ef9e:	4770      	bx	lr

0800efa0 <memcpy>:
 800efa0:	440a      	add	r2, r1
 800efa2:	4291      	cmp	r1, r2
 800efa4:	f100 33ff 	add.w	r3, r0, #4294967295
 800efa8:	d100      	bne.n	800efac <memcpy+0xc>
 800efaa:	4770      	bx	lr
 800efac:	b510      	push	{r4, lr}
 800efae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800efb6:	4291      	cmp	r1, r2
 800efb8:	d1f9      	bne.n	800efae <memcpy+0xe>
 800efba:	bd10      	pop	{r4, pc}

0800efbc <_free_r>:
 800efbc:	b538      	push	{r3, r4, r5, lr}
 800efbe:	4605      	mov	r5, r0
 800efc0:	2900      	cmp	r1, #0
 800efc2:	d041      	beq.n	800f048 <_free_r+0x8c>
 800efc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efc8:	1f0c      	subs	r4, r1, #4
 800efca:	2b00      	cmp	r3, #0
 800efcc:	bfb8      	it	lt
 800efce:	18e4      	addlt	r4, r4, r3
 800efd0:	f7ff ff32 	bl	800ee38 <__malloc_lock>
 800efd4:	4a1d      	ldr	r2, [pc, #116]	@ (800f04c <_free_r+0x90>)
 800efd6:	6813      	ldr	r3, [r2, #0]
 800efd8:	b933      	cbnz	r3, 800efe8 <_free_r+0x2c>
 800efda:	6063      	str	r3, [r4, #4]
 800efdc:	6014      	str	r4, [r2, #0]
 800efde:	4628      	mov	r0, r5
 800efe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efe4:	f7ff bf2e 	b.w	800ee44 <__malloc_unlock>
 800efe8:	42a3      	cmp	r3, r4
 800efea:	d908      	bls.n	800effe <_free_r+0x42>
 800efec:	6820      	ldr	r0, [r4, #0]
 800efee:	1821      	adds	r1, r4, r0
 800eff0:	428b      	cmp	r3, r1
 800eff2:	bf01      	itttt	eq
 800eff4:	6819      	ldreq	r1, [r3, #0]
 800eff6:	685b      	ldreq	r3, [r3, #4]
 800eff8:	1809      	addeq	r1, r1, r0
 800effa:	6021      	streq	r1, [r4, #0]
 800effc:	e7ed      	b.n	800efda <_free_r+0x1e>
 800effe:	461a      	mov	r2, r3
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	b10b      	cbz	r3, 800f008 <_free_r+0x4c>
 800f004:	42a3      	cmp	r3, r4
 800f006:	d9fa      	bls.n	800effe <_free_r+0x42>
 800f008:	6811      	ldr	r1, [r2, #0]
 800f00a:	1850      	adds	r0, r2, r1
 800f00c:	42a0      	cmp	r0, r4
 800f00e:	d10b      	bne.n	800f028 <_free_r+0x6c>
 800f010:	6820      	ldr	r0, [r4, #0]
 800f012:	4401      	add	r1, r0
 800f014:	1850      	adds	r0, r2, r1
 800f016:	4283      	cmp	r3, r0
 800f018:	6011      	str	r1, [r2, #0]
 800f01a:	d1e0      	bne.n	800efde <_free_r+0x22>
 800f01c:	6818      	ldr	r0, [r3, #0]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	6053      	str	r3, [r2, #4]
 800f022:	4408      	add	r0, r1
 800f024:	6010      	str	r0, [r2, #0]
 800f026:	e7da      	b.n	800efde <_free_r+0x22>
 800f028:	d902      	bls.n	800f030 <_free_r+0x74>
 800f02a:	230c      	movs	r3, #12
 800f02c:	602b      	str	r3, [r5, #0]
 800f02e:	e7d6      	b.n	800efde <_free_r+0x22>
 800f030:	6820      	ldr	r0, [r4, #0]
 800f032:	1821      	adds	r1, r4, r0
 800f034:	428b      	cmp	r3, r1
 800f036:	bf04      	itt	eq
 800f038:	6819      	ldreq	r1, [r3, #0]
 800f03a:	685b      	ldreq	r3, [r3, #4]
 800f03c:	6063      	str	r3, [r4, #4]
 800f03e:	bf04      	itt	eq
 800f040:	1809      	addeq	r1, r1, r0
 800f042:	6021      	streq	r1, [r4, #0]
 800f044:	6054      	str	r4, [r2, #4]
 800f046:	e7ca      	b.n	800efde <_free_r+0x22>
 800f048:	bd38      	pop	{r3, r4, r5, pc}
 800f04a:	bf00      	nop
 800f04c:	20014774 	.word	0x20014774

0800f050 <_malloc_usable_size_r>:
 800f050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f054:	1f18      	subs	r0, r3, #4
 800f056:	2b00      	cmp	r3, #0
 800f058:	bfbc      	itt	lt
 800f05a:	580b      	ldrlt	r3, [r1, r0]
 800f05c:	18c0      	addlt	r0, r0, r3
 800f05e:	4770      	bx	lr

0800f060 <strchr>:
 800f060:	b2c9      	uxtb	r1, r1
 800f062:	4603      	mov	r3, r0
 800f064:	4618      	mov	r0, r3
 800f066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f06a:	b112      	cbz	r2, 800f072 <strchr+0x12>
 800f06c:	428a      	cmp	r2, r1
 800f06e:	d1f9      	bne.n	800f064 <strchr+0x4>
 800f070:	4770      	bx	lr
 800f072:	2900      	cmp	r1, #0
 800f074:	bf18      	it	ne
 800f076:	2000      	movne	r0, #0
 800f078:	4770      	bx	lr
	...

0800f07c <_init>:
 800f07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f07e:	bf00      	nop
 800f080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f082:	bc08      	pop	{r3}
 800f084:	469e      	mov	lr, r3
 800f086:	4770      	bx	lr

0800f088 <_fini>:
 800f088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f08a:	bf00      	nop
 800f08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f08e:	bc08      	pop	{r3}
 800f090:	469e      	mov	lr, r3
 800f092:	4770      	bx	lr
