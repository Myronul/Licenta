
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005678  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  08005800  08005800  00006800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006590  08006590  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  08006590  08006590  00007590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006598  08006598  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006598  08006598  00007598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800659c  0800659c  0000759c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080065a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008064  2**0
                  CONTENTS
 10 .bss          000002d0  20000064  20000064  00008064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000334  20000334  00008064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc0d  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fe8  00000000  00000000  00013ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  00015c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020661  00000000  00000000  00016648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cae2  00000000  00000000  00036ca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5921  00000000  00000000  0004378b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001090ac  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000761  00000000  00000000  001090ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002a04  00000000  00000000  00109850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0010c254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000064 	.word	0x20000064
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080057e8 	.word	0x080057e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000068 	.word	0x20000068
 80001c4:	080057e8 	.word	0x080057e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <convert_color_16_to_18>:
 */

#include "graphics.h"

void convert_color_16_to_18(uint16_t color, uint8_t *pixel)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	0adb      	lsrs	r3, r3, #11
 80004c8:	b29b      	uxth	r3, r3
 80004ca:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 80004cc:	88fb      	ldrh	r3, [r7, #6]
 80004ce:	115b      	asrs	r3, r3, #5
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80004d6:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 80004d8:	88fb      	ldrh	r3, [r7, #6]
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	f003 031f 	and.w	r3, r3, #31
 80004e0:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 80004e2:	7bfa      	ldrb	r2, [r7, #15]
 80004e4:	4613      	mov	r3, r2
 80004e6:	019b      	lsls	r3, r3, #6
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	4a16      	ldr	r2, [pc, #88]	@ (8000544 <convert_color_16_to_18+0x8c>)
 80004ec:	fb82 1203 	smull	r1, r2, r2, r3
 80004f0:	441a      	add	r2, r3
 80004f2:	1112      	asrs	r2, r2, #4
 80004f4:	17db      	asrs	r3, r3, #31
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 80004fe:	7bbb      	ldrb	r3, [r7, #14]
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 8000504:	7b7a      	ldrb	r2, [r7, #13]
 8000506:	4613      	mov	r3, r2
 8000508:	019b      	lsls	r3, r3, #6
 800050a:	1a9b      	subs	r3, r3, r2
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <convert_color_16_to_18+0x8c>)
 800050e:	fb82 1203 	smull	r1, r2, r2, r3
 8000512:	441a      	add	r2, r3
 8000514:	1112      	asrs	r2, r2, #4
 8000516:	17db      	asrs	r3, r3, #31
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	b2db      	uxtb	r3, r3
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	7bfa      	ldrb	r2, [r7, #15]
 8000524:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	7bba      	ldrb	r2, [r7, #14]
 800052c:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	3302      	adds	r3, #2
 8000532:	7b7a      	ldrb	r2, [r7, #13]
 8000534:	701a      	strb	r2, [r3, #0]

}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	84210843 	.word	0x84210843

08000548 <write_color>:


void write_color(uint16_t color)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 8000552:	f107 020c 	add.w	r2, r7, #12
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	4611      	mov	r1, r2
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ffac 	bl	80004b8 <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000560:	f107 010c 	add.w	r1, r7, #12
 8000564:	f04f 33ff 	mov.w	r3, #4294967295
 8000568:	2203      	movs	r2, #3
 800056a:	4803      	ldr	r0, [pc, #12]	@ (8000578 <write_color+0x30>)
 800056c:	f002 fec7 	bl	80032fe <HAL_SPI_Transmit>


}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000080 	.word	0x20000080

0800057c <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b085      	sub	sp, #20
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
 8000586:	460b      	mov	r3, r1
 8000588:	80bb      	strh	r3, [r7, #4]
 800058a:	4613      	mov	r3, r2
 800058c:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 800058e:	88bb      	ldrh	r3, [r7, #4]
 8000590:	88fa      	ldrh	r2, [r7, #6]
 8000592:	88b9      	ldrh	r1, [r7, #4]
 8000594:	88f8      	ldrh	r0, [r7, #6]
 8000596:	2477      	movs	r4, #119	@ 0x77
 8000598:	9400      	str	r4, [sp, #0]
 800059a:	f000 fc65 	bl	8000e68 <set_adress_window>

	DC_DATA();
 800059e:	2201      	movs	r2, #1
 80005a0:	2104      	movs	r1, #4
 80005a2:	480a      	ldr	r0, [pc, #40]	@ (80005cc <draw_pixel+0x50>)
 80005a4:	f002 f970 	bl	8002888 <HAL_GPIO_WritePin>
	CS_A();
 80005a8:	2200      	movs	r2, #0
 80005aa:	2110      	movs	r1, #16
 80005ac:	4807      	ldr	r0, [pc, #28]	@ (80005cc <draw_pixel+0x50>)
 80005ae:	f002 f96b 	bl	8002888 <HAL_GPIO_WritePin>

	write_color(color);
 80005b2:	887b      	ldrh	r3, [r7, #2]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ffc7 	bl	8000548 <write_color>

	CS_D();
 80005ba:	2201      	movs	r2, #1
 80005bc:	2110      	movs	r1, #16
 80005be:	4803      	ldr	r0, [pc, #12]	@ (80005cc <draw_pixel+0x50>)
 80005c0:	f002 f962 	bl	8002888 <HAL_GPIO_WritePin>

}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	40020c00 	.word	0x40020c00

080005d0 <fill_screen1>:




void fill_screen1(uint16_t color)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
	 * Input: Culoare pe 16 biti
	 * Output: Void
	 */
	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	0adb      	lsrs	r3, r3, #11
 80005de:	b29b      	uxth	r3, r3
 80005e0:	74fb      	strb	r3, [r7, #19]
	g = (color & 0x07E0) >> 5;
 80005e2:	88fb      	ldrh	r3, [r7, #6]
 80005e4:	115b      	asrs	r3, r3, #5
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80005ec:	74bb      	strb	r3, [r7, #18]
	b = color & 0x001F;
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f003 031f 	and.w	r3, r3, #31
 80005f6:	747b      	strb	r3, [r7, #17]

	r = (255*r)/31;
 80005f8:	7cfa      	ldrb	r2, [r7, #19]
 80005fa:	4613      	mov	r3, r2
 80005fc:	021b      	lsls	r3, r3, #8
 80005fe:	1a9b      	subs	r3, r3, r2
 8000600:	4a3a      	ldr	r2, [pc, #232]	@ (80006ec <fill_screen1+0x11c>)
 8000602:	fb82 1203 	smull	r1, r2, r2, r3
 8000606:	441a      	add	r2, r3
 8000608:	1112      	asrs	r2, r2, #4
 800060a:	17db      	asrs	r3, r3, #31
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	74fb      	strb	r3, [r7, #19]
	g = (255*g)/63;
 8000610:	7cba      	ldrb	r2, [r7, #18]
 8000612:	4613      	mov	r3, r2
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	4a35      	ldr	r2, [pc, #212]	@ (80006f0 <fill_screen1+0x120>)
 800061a:	fb82 1203 	smull	r1, r2, r2, r3
 800061e:	441a      	add	r2, r3
 8000620:	1152      	asrs	r2, r2, #5
 8000622:	17db      	asrs	r3, r3, #31
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	74bb      	strb	r3, [r7, #18]
	b = (255*b)/31;
 8000628:	7c7a      	ldrb	r2, [r7, #17]
 800062a:	4613      	mov	r3, r2
 800062c:	021b      	lsls	r3, r3, #8
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	4a2e      	ldr	r2, [pc, #184]	@ (80006ec <fill_screen1+0x11c>)
 8000632:	fb82 1203 	smull	r1, r2, r2, r3
 8000636:	441a      	add	r2, r3
 8000638:	1112      	asrs	r2, r2, #4
 800063a:	17db      	asrs	r3, r3, #31
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	747b      	strb	r3, [r7, #17]

	uint8_t pixel[] = {r,g,b};
 8000640:	7cfb      	ldrb	r3, [r7, #19]
 8000642:	723b      	strb	r3, [r7, #8]
 8000644:	7cbb      	ldrb	r3, [r7, #18]
 8000646:	727b      	strb	r3, [r7, #9]
 8000648:	7c7b      	ldrb	r3, [r7, #17]
 800064a:	72bb      	strb	r3, [r7, #10]
	uint8_t *line = malloc(320*sizeof(pixel));
 800064c:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8000650:	f004 ff7e 	bl	8005550 <malloc>
 8000654:	4603      	mov	r3, r0
 8000656:	60fb      	str	r3, [r7, #12]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8000658:	2377      	movs	r3, #119	@ 0x77
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	f240 13df 	movw	r3, #479	@ 0x1df
 8000660:	f240 123f 	movw	r2, #319	@ 0x13f
 8000664:	2100      	movs	r1, #0
 8000666:	2000      	movs	r0, #0
 8000668:	f000 fbfe 	bl	8000e68 <set_adress_window>

	DC_DATA();
 800066c:	2201      	movs	r2, #1
 800066e:	2104      	movs	r1, #4
 8000670:	4820      	ldr	r0, [pc, #128]	@ (80006f4 <fill_screen1+0x124>)
 8000672:	f002 f909 	bl	8002888 <HAL_GPIO_WritePin>
	CS_A();
 8000676:	2200      	movs	r2, #0
 8000678:	2110      	movs	r1, #16
 800067a:	481e      	ldr	r0, [pc, #120]	@ (80006f4 <fill_screen1+0x124>)
 800067c:	f002 f904 	bl	8002888 <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 8000680:	2300      	movs	r3, #0
 8000682:	82fb      	strh	r3, [r7, #22]
 8000684:	e00f      	b.n	80006a6 <fill_screen1+0xd6>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 8000686:	8afa      	ldrh	r2, [r7, #22]
 8000688:	4613      	mov	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	4413      	add	r3, r2
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	461a      	mov	r2, r3
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	8819      	ldrh	r1, [r3, #0]
 800069a:	789b      	ldrb	r3, [r3, #2]
 800069c:	8011      	strh	r1, [r2, #0]
 800069e:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 80006a0:	8afb      	ldrh	r3, [r7, #22]
 80006a2:	3301      	adds	r3, #1
 80006a4:	82fb      	strh	r3, [r7, #22]
 80006a6:	8afb      	ldrh	r3, [r7, #22]
 80006a8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80006ac:	d3eb      	bcc.n	8000686 <fill_screen1+0xb6>
	}

	for(uint16_t y=0; y<480; y++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	82bb      	strh	r3, [r7, #20]
 80006b2:	e00a      	b.n	80006ca <fill_screen1+0xfa>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80006bc:	68f9      	ldr	r1, [r7, #12]
 80006be:	480e      	ldr	r0, [pc, #56]	@ (80006f8 <fill_screen1+0x128>)
 80006c0:	f002 fe1d 	bl	80032fe <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 80006c4:	8abb      	ldrh	r3, [r7, #20]
 80006c6:	3301      	adds	r3, #1
 80006c8:	82bb      	strh	r3, [r7, #20]
 80006ca:	8abb      	ldrh	r3, [r7, #20]
 80006cc:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80006d0:	d3f0      	bcc.n	80006b4 <fill_screen1+0xe4>

	}

	free(line);
 80006d2:	68f8      	ldr	r0, [r7, #12]
 80006d4:	f004 ff44 	bl	8005560 <free>

	CS_D();
 80006d8:	2201      	movs	r2, #1
 80006da:	2110      	movs	r1, #16
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <fill_screen1+0x124>)
 80006de:	f002 f8d3 	bl	8002888 <HAL_GPIO_WritePin>

}
 80006e2:	bf00      	nop
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	84210843 	.word	0x84210843
 80006f0:	82082083 	.word	0x82082083
 80006f4:	40020c00 	.word	0x40020c00
 80006f8:	20000080 	.word	0x20000080

080006fc <fill_screen2>:


void fill_screen2(uint16_t color)
{
 80006fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000700:	b08f      	sub	sp, #60	@ 0x3c
 8000702:	af02      	add	r7, sp, #8
 8000704:	4603      	mov	r3, r0
 8000706:	80fb      	strh	r3, [r7, #6]
 8000708:	466b      	mov	r3, sp
 800070a:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 800070c:	2377      	movs	r3, #119	@ 0x77
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	f240 13df 	movw	r3, #479	@ 0x1df
 8000714:	f240 123f 	movw	r2, #319	@ 0x13f
 8000718:	2100      	movs	r1, #0
 800071a:	2000      	movs	r0, #0
 800071c:	f000 fba4 	bl	8000e68 <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 8000720:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 8000726:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 800072a:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	0adb      	lsrs	r3, r3, #11
 8000730:	b29b      	uxth	r3, r3
 8000732:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	115b      	asrs	r3, r3, #5
 8000738:	b2db      	uxtb	r3, r3
 800073a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800073e:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 031f 	and.w	r3, r3, #31
 8000748:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 800074a:	7ffa      	ldrb	r2, [r7, #31]
 800074c:	4613      	mov	r3, r2
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	4a4f      	ldr	r2, [pc, #316]	@ (8000890 <fill_screen2+0x194>)
 8000754:	fb82 1203 	smull	r1, r2, r2, r3
 8000758:	441a      	add	r2, r3
 800075a:	1112      	asrs	r2, r2, #4
 800075c:	17db      	asrs	r3, r3, #31
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 8000762:	7fba      	ldrb	r2, [r7, #30]
 8000764:	4613      	mov	r3, r2
 8000766:	021b      	lsls	r3, r3, #8
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	4a4a      	ldr	r2, [pc, #296]	@ (8000894 <fill_screen2+0x198>)
 800076c:	fb82 1203 	smull	r1, r2, r2, r3
 8000770:	441a      	add	r2, r3
 8000772:	1152      	asrs	r2, r2, #5
 8000774:	17db      	asrs	r3, r3, #31
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 800077a:	7f7a      	ldrb	r2, [r7, #29]
 800077c:	4613      	mov	r3, r2
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	1a9b      	subs	r3, r3, r2
 8000782:	4a43      	ldr	r2, [pc, #268]	@ (8000890 <fill_screen2+0x194>)
 8000784:	fb82 1203 	smull	r1, r2, r2, r3
 8000788:	441a      	add	r2, r3
 800078a:	1112      	asrs	r2, r2, #4
 800078c:	17db      	asrs	r3, r3, #31
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 8000792:	2201      	movs	r2, #1
 8000794:	2104      	movs	r1, #4
 8000796:	4840      	ldr	r0, [pc, #256]	@ (8000898 <fill_screen2+0x19c>)
 8000798:	f002 f876 	bl	8002888 <HAL_GPIO_WritePin>
	CS_A();
 800079c:	2200      	movs	r2, #0
 800079e:	2110      	movs	r1, #16
 80007a0:	483d      	ldr	r0, [pc, #244]	@ (8000898 <fill_screen2+0x19c>)
 80007a2:	f002 f871 	bl	8002888 <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 80007a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007a8:	460b      	mov	r3, r1
 80007aa:	3b01      	subs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	2300      	movs	r3, #0
 80007b0:	4688      	mov	r8, r1
 80007b2:	4699      	mov	r9, r3
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	f04f 0300 	mov.w	r3, #0
 80007bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007c8:	2300      	movs	r3, #0
 80007ca:	460c      	mov	r4, r1
 80007cc:	461d      	mov	r5, r3
 80007ce:	f04f 0200 	mov.w	r2, #0
 80007d2:	f04f 0300 	mov.w	r3, #0
 80007d6:	00eb      	lsls	r3, r5, #3
 80007d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007dc:	00e2      	lsls	r2, r4, #3
 80007de:	1dcb      	adds	r3, r1, #7
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	ebad 0d03 	sub.w	sp, sp, r3
 80007e8:	ab02      	add	r3, sp, #8
 80007ea:	3300      	adds	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007f2:	e011      	b.n	8000818 <fill_screen2+0x11c>
	{
		frame[j] = r;
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007f8:	4413      	add	r3, r2
 80007fa:	7ffa      	ldrb	r2, [r7, #31]
 80007fc:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 80007fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000800:	3301      	adds	r3, #1
 8000802:	697a      	ldr	r2, [r7, #20]
 8000804:	7fb9      	ldrb	r1, [r7, #30]
 8000806:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 8000808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800080a:	3302      	adds	r3, #2
 800080c:	697a      	ldr	r2, [r7, #20]
 800080e:	7f79      	ldrb	r1, [r7, #29]
 8000810:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 8000812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000814:	3303      	adds	r3, #3
 8000816:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081c:	429a      	cmp	r2, r3
 800081e:	d3e9      	bcc.n	80007f4 <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 8000820:	6a3a      	ldr	r2, [r7, #32]
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 8000834:	4b19      	ldr	r3, [pc, #100]	@ (800089c <fill_screen2+0x1a0>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800083e:	e012      	b.n	8000866 <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 8000840:	bf00      	nop
 8000842:	4b16      	ldr	r3, [pc, #88]	@ (800089c <fill_screen2+0x1a0>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d0fa      	beq.n	8000842 <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 800084c:	4b13      	ldr	r3, [pc, #76]	@ (800089c <fill_screen2+0x1a0>)
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 8000852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000854:	b29b      	uxth	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	6979      	ldr	r1, [r7, #20]
 800085a:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <fill_screen2+0x1a4>)
 800085c:	f003 f956 	bl	8003b0c <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 8000860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000862:	3301      	adds	r3, #1
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	429a      	cmp	r2, r3
 800086c:	d3e8      	bcc.n	8000840 <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 800086e:	bf00      	nop
 8000870:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <fill_screen2+0x1a0>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0fa      	beq.n	8000870 <fill_screen2+0x174>
	CS_D();
 800087a:	2201      	movs	r2, #1
 800087c:	2110      	movs	r1, #16
 800087e:	4806      	ldr	r0, [pc, #24]	@ (8000898 <fill_screen2+0x19c>)
 8000880:	f002 f802 	bl	8002888 <HAL_GPIO_WritePin>
 8000884:	46b5      	mov	sp, r6
}
 8000886:	bf00      	nop
 8000888:	3734      	adds	r7, #52	@ 0x34
 800088a:	46bd      	mov	sp, r7
 800088c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000890:	84210843 	.word	0x84210843
 8000894:	82082083 	.word	0x82082083
 8000898:	40020c00 	.word	0x40020c00
 800089c:	200001e0 	.word	0x200001e0
 80008a0:	20000080 	.word	0x20000080

080008a4 <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b089      	sub	sp, #36	@ 0x24
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	4604      	mov	r4, r0
 80008ac:	4608      	mov	r0, r1
 80008ae:	4611      	mov	r1, r2
 80008b0:	461a      	mov	r2, r3
 80008b2:	4623      	mov	r3, r4
 80008b4:	80fb      	strh	r3, [r7, #6]
 80008b6:	4603      	mov	r3, r0
 80008b8:	80bb      	strh	r3, [r7, #4]
 80008ba:	460b      	mov	r3, r1
 80008bc:	70fb      	strb	r3, [r7, #3]
 80008be:	4613      	mov	r3, r2
 80008c0:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 80008c2:	4b3a      	ldr	r3, [pc, #232]	@ (80009ac <print_character+0x108>)
 80008c4:	889a      	ldrh	r2, [r3, #4]
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	4413      	add	r3, r2
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	3b01      	subs	r3, #1
 80008ce:	b29c      	uxth	r4, r3
 80008d0:	4b36      	ldr	r3, [pc, #216]	@ (80009ac <print_character+0x108>)
 80008d2:	88da      	ldrh	r2, [r3, #6]
 80008d4:	88bb      	ldrh	r3, [r7, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	b29b      	uxth	r3, r3
 80008da:	3b01      	subs	r3, #1
 80008dc:	b29b      	uxth	r3, r3
 80008de:	88b9      	ldrh	r1, [r7, #4]
 80008e0:	88f8      	ldrh	r0, [r7, #6]
 80008e2:	2277      	movs	r2, #119	@ 0x77
 80008e4:	9200      	str	r2, [sp, #0]
 80008e6:	4622      	mov	r2, r4
 80008e8:	f000 fabe 	bl	8000e68 <set_adress_window>

	uint16_t mask = 0x8000;
 80008ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008f0:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 80008f6:	f107 020c 	add.w	r2, r7, #12
 80008fa:	883b      	ldrh	r3, [r7, #0]
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fdda 	bl	80004b8 <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 8000904:	f107 0208 	add.w	r2, r7, #8
 8000908:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fdd3 	bl	80004b8 <convert_color_16_to_18>


	DC_DATA();
 8000912:	2201      	movs	r2, #1
 8000914:	2104      	movs	r1, #4
 8000916:	4826      	ldr	r0, [pc, #152]	@ (80009b0 <print_character+0x10c>)
 8000918:	f001 ffb6 	bl	8002888 <HAL_GPIO_WritePin>
	CS_A();
 800091c:	2200      	movs	r2, #0
 800091e:	2110      	movs	r1, #16
 8000920:	4823      	ldr	r0, [pc, #140]	@ (80009b0 <print_character+0x10c>)
 8000922:	f001 ffb1 	bl	8002888 <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 8000926:	2300      	movs	r3, #0
 8000928:	75fb      	strb	r3, [r7, #23]
 800092a:	e030      	b.n	800098e <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 800092c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <print_character+0x108>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	3b20      	subs	r3, #32
 8000934:	491d      	ldr	r1, [pc, #116]	@ (80009ac <print_character+0x108>)
 8000936:	88c9      	ldrh	r1, [r1, #6]
 8000938:	fb03 f101 	mul.w	r1, r3, r1
 800093c:	7dfb      	ldrb	r3, [r7, #23]
 800093e:	440b      	add	r3, r1
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4413      	add	r3, r2
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8000948:	2300      	movs	r3, #0
 800094a:	75bb      	strb	r3, [r7, #22]
 800094c:	e016      	b.n	800097c <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 800094e:	8a7a      	ldrh	r2, [r7, #18]
 8000950:	7dbb      	ldrb	r3, [r7, #22]
 8000952:	409a      	lsls	r2, r3
 8000954:	8abb      	ldrh	r3, [r7, #20]
 8000956:	4013      	ands	r3, r2
 8000958:	2b00      	cmp	r3, #0
 800095a:	d006      	beq.n	800096a <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	2103      	movs	r1, #3
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f904 	bl	8000b70 <LCD_send_data_multi>
 8000968:	e005      	b.n	8000976 <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	2103      	movs	r1, #3
 8000970:	4618      	mov	r0, r3
 8000972:	f000 f8fd 	bl	8000b70 <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 8000976:	7dbb      	ldrb	r3, [r7, #22]
 8000978:	3301      	adds	r3, #1
 800097a:	75bb      	strb	r3, [r7, #22]
 800097c:	7dbb      	ldrb	r3, [r7, #22]
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <print_character+0x108>)
 8000982:	889b      	ldrh	r3, [r3, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	d3e2      	bcc.n	800094e <print_character+0xaa>
	for(i=0; i<font.height; i++)
 8000988:	7dfb      	ldrb	r3, [r7, #23]
 800098a:	3301      	adds	r3, #1
 800098c:	75fb      	strb	r3, [r7, #23]
 800098e:	7dfb      	ldrb	r3, [r7, #23]
 8000990:	b29a      	uxth	r2, r3
 8000992:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <print_character+0x108>)
 8000994:	88db      	ldrh	r3, [r3, #6]
 8000996:	429a      	cmp	r2, r3
 8000998:	d3c8      	bcc.n	800092c <print_character+0x88>
			}
		}
	}

	CS_D();
 800099a:	2201      	movs	r2, #1
 800099c:	2110      	movs	r1, #16
 800099e:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <print_character+0x10c>)
 80009a0:	f001 ff72 	bl	8002888 <HAL_GPIO_WritePin>

}
 80009a4:	bf00      	nop
 80009a6:	371c      	adds	r7, #28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd90      	pop	{r4, r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	40020c00 	.word	0x40020c00

080009b4 <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint8_t n, uint16_t fontColor, uint16_t backColor)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b089      	sub	sp, #36	@ 0x24
 80009b8:	af02      	add	r7, sp, #8
 80009ba:	60ba      	str	r2, [r7, #8]
 80009bc:	461a      	mov	r2, r3
 80009be:	4603      	mov	r3, r0
 80009c0:	81fb      	strh	r3, [r7, #14]
 80009c2:	460b      	mov	r3, r1
 80009c4:	81bb      	strh	r3, [r7, #12]
 80009c6:	4613      	mov	r3, r2
 80009c8:	71fb      	strb	r3, [r7, #7]

	char *temp = string;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	617b      	str	r3, [r7, #20]

	while(string<(temp+n))
 80009ce:	e027      	b.n	8000a20 <print_string+0x6c>
	{
		if(x + font.width > 320)
 80009d0:	89fb      	ldrh	r3, [r7, #14]
 80009d2:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <print_string+0x84>)
 80009d4:	8892      	ldrh	r2, [r2, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80009dc:	dd07      	ble.n	80009ee <print_string+0x3a>
		{
			x = font.width;
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <print_string+0x84>)
 80009e0:	889b      	ldrh	r3, [r3, #4]
 80009e2:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <print_string+0x84>)
 80009e6:	88da      	ldrh	r2, [r3, #6]
 80009e8:	89bb      	ldrh	r3, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 80009ee:	89bb      	ldrh	r3, [r7, #12]
 80009f0:	4a11      	ldr	r2, [pc, #68]	@ (8000a38 <print_string+0x84>)
 80009f2:	88d2      	ldrh	r2, [r2, #6]
 80009f4:	4413      	add	r3, r2
 80009f6:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80009fa:	dc18      	bgt.n	8000a2e <print_string+0x7a>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000a02:	89b9      	ldrh	r1, [r7, #12]
 8000a04:	89f8      	ldrh	r0, [r7, #14]
 8000a06:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	4623      	mov	r3, r4
 8000a0c:	f7ff ff4a 	bl	80008a4 <print_character>
		string++;
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	3301      	adds	r3, #1
 8000a14:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8000a16:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <print_string+0x84>)
 8000a18:	889a      	ldrh	r2, [r3, #4]
 8000a1a:	89fb      	ldrh	r3, [r7, #14]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	81fb      	strh	r3, [r7, #14]
	while(string<(temp+n))
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	4413      	add	r3, r2
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d3d1      	bcc.n	80009d0 <print_string+0x1c>
 8000a2c:	e000      	b.n	8000a30 <print_string+0x7c>
			return;
 8000a2e:	bf00      	nop
	}

}
 8000a30:	371c      	adds	r7, #28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd90      	pop	{r4, r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000000 	.word	0x20000000

08000a3c <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	4604      	mov	r4, r0
 8000a44:	4608      	mov	r0, r1
 8000a46:	4611      	mov	r1, r2
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4623      	mov	r3, r4
 8000a4c:	80fb      	strh	r3, [r7, #6]
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80bb      	strh	r3, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	807b      	strh	r3, [r7, #2]
 8000a56:	4613      	mov	r3, r2
 8000a58:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8000a5a:	88fa      	ldrh	r2, [r7, #6]
 8000a5c:	887b      	ldrh	r3, [r7, #2]
 8000a5e:	4413      	add	r3, r2
 8000a60:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	88bb      	ldrh	r3, [r7, #4]
 8000a6a:	88b9      	ldrh	r1, [r7, #4]
 8000a6c:	88f8      	ldrh	r0, [r7, #6]
 8000a6e:	2477      	movs	r4, #119	@ 0x77
 8000a70:	9400      	str	r4, [sp, #0]
 8000a72:	f000 f9f9 	bl	8000e68 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000a76:	f107 0208 	add.w	r2, r7, #8
 8000a7a:	883b      	ldrh	r3, [r7, #0]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fd1a 	bl	80004b8 <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	81fb      	strh	r3, [r7, #14]
 8000a88:	e008      	b.n	8000a9c <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	2103      	movs	r1, #3
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f86d 	bl	8000b70 <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 8000a96:	89fb      	ldrh	r3, [r7, #14]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	81fb      	strh	r3, [r7, #14]
 8000a9c:	89fa      	ldrh	r2, [r7, #14]
 8000a9e:	8879      	ldrh	r1, [r7, #2]
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	1acb      	subs	r3, r1, r3
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dbf0      	blt.n	8000a8a <draw_horizontal_line+0x4e>
	}


}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd90      	pop	{r4, r7, pc}

08000ab2 <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000ab2:	b590      	push	{r4, r7, lr}
 8000ab4:	b087      	sub	sp, #28
 8000ab6:	af02      	add	r7, sp, #8
 8000ab8:	4604      	mov	r4, r0
 8000aba:	4608      	mov	r0, r1
 8000abc:	4611      	mov	r1, r2
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	80fb      	strh	r3, [r7, #6]
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	80bb      	strh	r3, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
 8000acc:	4613      	mov	r3, r2
 8000ace:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 8000ad0:	88ba      	ldrh	r2, [r7, #4]
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8000ad8:	887b      	ldrh	r3, [r7, #2]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	88fa      	ldrh	r2, [r7, #6]
 8000ae0:	88b9      	ldrh	r1, [r7, #4]
 8000ae2:	88f8      	ldrh	r0, [r7, #6]
 8000ae4:	2477      	movs	r4, #119	@ 0x77
 8000ae6:	9400      	str	r4, [sp, #0]
 8000ae8:	f000 f9be 	bl	8000e68 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000aec:	f107 0208 	add.w	r2, r7, #8
 8000af0:	883b      	ldrh	r3, [r7, #0]
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fcdf 	bl	80004b8 <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	81fb      	strh	r3, [r7, #14]
 8000afe:	e008      	b.n	8000b12 <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2103      	movs	r1, #3
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f832 	bl	8000b70 <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	81fb      	strh	r3, [r7, #14]
 8000b12:	89fa      	ldrh	r2, [r7, #14]
 8000b14:	8879      	ldrh	r1, [r7, #2]
 8000b16:	88bb      	ldrh	r3, [r7, #4]
 8000b18:	1acb      	subs	r3, r1, r3
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dbf0      	blt.n	8000b00 <draw_vertical_line+0x4e>
	}


}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}

08000b28 <LCD_send_command>:
#include "lcd.h"


void LCD_send_command(uint8_t cmd)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 8000b32:	2200      	movs	r2, #0
 8000b34:	2104      	movs	r1, #4
 8000b36:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <LCD_send_command+0x40>)
 8000b38:	f001 fea6 	bl	8002888 <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2110      	movs	r1, #16
 8000b40:	4809      	ldr	r0, [pc, #36]	@ (8000b68 <LCD_send_command+0x40>)
 8000b42:	f001 fea1 	bl	8002888 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 8000b46:	1df9      	adds	r1, r7, #7
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <LCD_send_command+0x44>)
 8000b50:	f002 fbd5 	bl	80032fe <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 8000b54:	2201      	movs	r2, #1
 8000b56:	2110      	movs	r1, #16
 8000b58:	4803      	ldr	r0, [pc, #12]	@ (8000b68 <LCD_send_command+0x40>)
 8000b5a:	f001 fe95 	bl	8002888 <HAL_GPIO_WritePin>


}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	20000080 	.word	0x20000080

08000b70 <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	 * Output: Void
	 */

	//flagDmaSpiTx = 1;

	unsigned int valMaxFrame = 1024; //numarul maxim de octeti pe frame
 8000b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7e:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b88:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b92:	6939      	ldr	r1, [r7, #16]
 8000b94:	fb01 f202 	mul.w	r2, r1, r2
 8000b98:	1a9b      	subs	r3, r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	481d      	ldr	r0, [pc, #116]	@ (8000c18 <LCD_send_data_multi+0xa8>)
 8000ba2:	f001 fe71 	bl	8002888 <HAL_GPIO_WritePin>
	CS_A();
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2110      	movs	r1, #16
 8000baa:	481b      	ldr	r0, [pc, #108]	@ (8000c18 <LCD_send_data_multi+0xa8>)
 8000bac:	f001 fe6c 	bl	8002888 <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d817      	bhi.n	8000be8 <LCD_send_data_multi+0x78>
	{
		//flagDmaSpiTx = 0;
		//HAL_SPI_Transmit_DMA(&hspi1, data, size);
		HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc0:	6879      	ldr	r1, [r7, #4]
 8000bc2:	4816      	ldr	r0, [pc, #88]	@ (8000c1c <LCD_send_data_multi+0xac>)
 8000bc4:	f002 fb9b 	bl	80032fe <HAL_SPI_Transmit>
 8000bc8:	e01c      	b.n	8000c04 <LCD_send_data_multi+0x94>
		while(nrFrames != 0)
		{
			//while(flagDmaSpiTx == 0);
			//flagDmaSpiTx = 0;
			//HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
			HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	4811      	ldr	r0, [pc, #68]	@ (8000c1c <LCD_send_data_multi+0xac>)
 8000bd6:	f002 fb92 	bl	80032fe <HAL_SPI_Transmit>
			data = data+valMaxFrame;
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4413      	add	r3, r2
 8000be0:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1ed      	bne.n	8000bca <LCD_send_data_multi+0x5a>
		}

		if(remainder != 0)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d007      	beq.n	8000c04 <LCD_send_data_multi+0x94>
		{
			//while(flagDmaSpiTx == 0);
			//flagDmaSpiTx = 0;
			//HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
			HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <LCD_send_data_multi+0xac>)
 8000c00:	f002 fb7d 	bl	80032fe <HAL_SPI_Transmit>

		}
	}

	//while(flagDmaSpiTx == 0);
	CS_D();
 8000c04:	2201      	movs	r2, #1
 8000c06:	2110      	movs	r1, #16
 8000c08:	4803      	ldr	r0, [pc, #12]	@ (8000c18 <LCD_send_data_multi+0xa8>)
 8000c0a:	f001 fe3d 	bl	8002888 <HAL_GPIO_WritePin>

}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40020c00 	.word	0x40020c00
 8000c1c:	20000080 	.word	0x20000080

08000c20 <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <LCD_send_data+0x40>)
 8000c30:	f001 fe2a 	bl	8002888 <HAL_GPIO_WritePin>
	CS_A();
 8000c34:	2200      	movs	r2, #0
 8000c36:	2110      	movs	r1, #16
 8000c38:	4809      	ldr	r0, [pc, #36]	@ (8000c60 <LCD_send_data+0x40>)
 8000c3a:	f001 fe25 	bl	8002888 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 8000c3e:	1df9      	adds	r1, r7, #7
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	2201      	movs	r2, #1
 8000c46:	4807      	ldr	r0, [pc, #28]	@ (8000c64 <LCD_send_data+0x44>)
 8000c48:	f002 fb59 	bl	80032fe <HAL_SPI_Transmit>

	CS_D();
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	2110      	movs	r1, #16
 8000c50:	4803      	ldr	r0, [pc, #12]	@ (8000c60 <LCD_send_data+0x40>)
 8000c52:	f001 fe19 	bl	8002888 <HAL_GPIO_WritePin>

}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40020c00 	.word	0x40020c00
 8000c64:	20000080 	.word	0x20000080

08000c68 <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2140      	movs	r1, #64	@ 0x40
 8000c70:	487c      	ldr	r0, [pc, #496]	@ (8000e64 <ILI9488_driver_init+0x1fc>)
 8000c72:	f001 fe09 	bl	8002888 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c76:	200a      	movs	r0, #10
 8000c78:	f000 ff32 	bl	8001ae0 <HAL_Delay>
	RST_D();
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2140      	movs	r1, #64	@ 0x40
 8000c80:	4878      	ldr	r0, [pc, #480]	@ (8000e64 <ILI9488_driver_init+0x1fc>)
 8000c82:	f001 fe01 	bl	8002888 <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff ff4e 	bl	8000b28 <LCD_send_command>
	HAL_Delay(150);
 8000c8c:	2096      	movs	r0, #150	@ 0x96
 8000c8e:	f000 ff27 	bl	8001ae0 <HAL_Delay>
	LCD_send_command(ILI9488_SLPOUT); //scoatem sistemul din sleep
 8000c92:	2011      	movs	r0, #17
 8000c94:	f7ff ff48 	bl	8000b28 <LCD_send_command>
	HAL_Delay(255);
 8000c98:	20ff      	movs	r0, #255	@ 0xff
 8000c9a:	f000 ff21 	bl	8001ae0 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 8000c9e:	20e0      	movs	r0, #224	@ 0xe0
 8000ca0:	f7ff ff42 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f7ff ffbb 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0C);
 8000caa:	200c      	movs	r0, #12
 8000cac:	f7ff ffb8 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x05);
 8000cb0:	2005      	movs	r0, #5
 8000cb2:	f7ff ffb5 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x04);
 8000cb6:	2004      	movs	r0, #4
 8000cb8:	f7ff ffb2 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0F);
 8000cbc:	200f      	movs	r0, #15
 8000cbe:	f7ff ffaf 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x06);
 8000cc2:	2006      	movs	r0, #6
 8000cc4:	f7ff ffac 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x3A);
 8000cc8:	203a      	movs	r0, #58	@ 0x3a
 8000cca:	f7ff ffa9 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x56);
 8000cce:	2056      	movs	r0, #86	@ 0x56
 8000cd0:	f7ff ffa6 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x4D);
 8000cd4:	204d      	movs	r0, #77	@ 0x4d
 8000cd6:	f7ff ffa3 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x03);
 8000cda:	2003      	movs	r0, #3
 8000cdc:	f7ff ffa0 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0A);
 8000ce0:	200a      	movs	r0, #10
 8000ce2:	f7ff ff9d 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x06);
 8000ce6:	2006      	movs	r0, #6
 8000ce8:	f7ff ff9a 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x30);
 8000cec:	2030      	movs	r0, #48	@ 0x30
 8000cee:	f7ff ff97 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x3E);
 8000cf2:	203e      	movs	r0, #62	@ 0x3e
 8000cf4:	f7ff ff94 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0F);
 8000cf8:	200f      	movs	r0, #15
 8000cfa:	f7ff ff91 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 8000cfe:	20e1      	movs	r0, #225	@ 0xe1
 8000d00:	f7ff ff12 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x00);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff ff8b 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x13);
 8000d0a:	2013      	movs	r0, #19
 8000d0c:	f7ff ff88 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x18);
 8000d10:	2018      	movs	r0, #24
 8000d12:	f7ff ff85 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x01);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f7ff ff82 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x11);
 8000d1c:	2011      	movs	r0, #17
 8000d1e:	f7ff ff7f 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x06);
 8000d22:	2006      	movs	r0, #6
 8000d24:	f7ff ff7c 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x38);
 8000d28:	2038      	movs	r0, #56	@ 0x38
 8000d2a:	f7ff ff79 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x34);
 8000d2e:	2034      	movs	r0, #52	@ 0x34
 8000d30:	f7ff ff76 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x4D);
 8000d34:	204d      	movs	r0, #77	@ 0x4d
 8000d36:	f7ff ff73 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x06);
 8000d3a:	2006      	movs	r0, #6
 8000d3c:	f7ff ff70 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0D);
 8000d40:	200d      	movs	r0, #13
 8000d42:	f7ff ff6d 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0B);
 8000d46:	200b      	movs	r0, #11
 8000d48:	f7ff ff6a 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x31);
 8000d4c:	2031      	movs	r0, #49	@ 0x31
 8000d4e:	f7ff ff67 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x37);
 8000d52:	2037      	movs	r0, #55	@ 0x37
 8000d54:	f7ff ff64 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0F);
 8000d58:	200f      	movs	r0, #15
 8000d5a:	f7ff ff61 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 8000d5e:	20c0      	movs	r0, #192	@ 0xc0
 8000d60:	f7ff fee2 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x18);
 8000d64:	2018      	movs	r0, #24
 8000d66:	f7ff ff5b 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x16);
 8000d6a:	2016      	movs	r0, #22
 8000d6c:	f7ff ff58 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 8000d70:	20c1      	movs	r0, #193	@ 0xc1
 8000d72:	f7ff fed9 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x45);
 8000d76:	2045      	movs	r0, #69	@ 0x45
 8000d78:	f7ff ff52 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 8000d7c:	20c2      	movs	r0, #194	@ 0xc2
 8000d7e:	f7ff fed3 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x33);
 8000d82:	2033      	movs	r0, #51	@ 0x33
 8000d84:	f7ff ff4c 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 8000d88:	20c3      	movs	r0, #195	@ 0xc3
 8000d8a:	f7ff fecd 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x33);
 8000d8e:	2033      	movs	r0, #51	@ 0x33
 8000d90:	f7ff ff46 	bl	8000c20 <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 8000d94:	2036      	movs	r0, #54	@ 0x36
 8000d96:	f7ff fec7 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 8000d9a:	205c      	movs	r0, #92	@ 0x5c
 8000d9c:	f7ff ff40 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 8000da0:	203a      	movs	r0, #58	@ 0x3a
 8000da2:	f7ff fec1 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 8000da6:	2006      	movs	r0, #6
 8000da8:	f7ff ff3a 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff febb 	bl	8000b28 <LCD_send_command>
	LCD_send_command(0x00);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff feb8 	bl	8000b28 <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 8000db8:	20b0      	movs	r0, #176	@ 0xb0
 8000dba:	f7ff feb5 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff ff2e 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 8000dc4:	20b1      	movs	r0, #177	@ 0xb1
 8000dc6:	f7ff feaf 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 8000dca:	20a0      	movs	r0, #160	@ 0xa0
 8000dcc:	f7ff ff28 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 8000dd0:	2011      	movs	r0, #17
 8000dd2:	f7ff ff25 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 8000dd6:	20b4      	movs	r0, #180	@ 0xb4
 8000dd8:	f7ff fea6 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f7ff ff1f 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 8000de2:	20b5      	movs	r0, #181	@ 0xb5
 8000de4:	f7ff fea0 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x02);
 8000de8:	2002      	movs	r0, #2
 8000dea:	f7ff ff19 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x02);
 8000dee:	2002      	movs	r0, #2
 8000df0:	f7ff ff16 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x0A);
 8000df4:	200a      	movs	r0, #10
 8000df6:	f7ff ff13 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x04);
 8000dfa:	2004      	movs	r0, #4
 8000dfc:	f7ff ff10 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 8000e00:	20b6      	movs	r0, #182	@ 0xb6
 8000e02:	f7ff fe91 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x02);
 8000e06:	2002      	movs	r0, #2
 8000e08:	f7ff ff0a 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x02);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff ff07 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x3B);
 8000e12:	203b      	movs	r0, #59	@ 0x3b
 8000e14:	f7ff ff04 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 8000e18:	20e9      	movs	r0, #233	@ 0xe9
 8000e1a:	f7ff fe85 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff fefe 	bl	8000c20 <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8000e24:	20f7      	movs	r0, #247	@ 0xf7
 8000e26:	f7ff fe7f 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0xA9);
 8000e2a:	20a9      	movs	r0, #169	@ 0xa9
 8000e2c:	f7ff fef8 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x51);
 8000e30:	2051      	movs	r0, #81	@ 0x51
 8000e32:	f7ff fef5 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x2C);
 8000e36:	202c      	movs	r0, #44	@ 0x2c
 8000e38:	f7ff fef2 	bl	8000c20 <LCD_send_data>
	LCD_send_data(0x82);
 8000e3c:	2082      	movs	r0, #130	@ 0x82
 8000e3e:	f7ff feef 	bl	8000c20 <LCD_send_data>


	LCD_send_command(ILI9488_SLPOUT);
 8000e42:	2011      	movs	r0, #17
 8000e44:	f7ff fe70 	bl	8000b28 <LCD_send_command>
	HAL_Delay(255);
 8000e48:	20ff      	movs	r0, #255	@ 0xff
 8000e4a:	f000 fe49 	bl	8001ae0 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 8000e4e:	2051      	movs	r0, #81	@ 0x51
 8000e50:	f7ff fe6a 	bl	8000b28 <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 8000e54:	20ff      	movs	r0, #255	@ 0xff
 8000e56:	f7ff fee3 	bl	8000c20 <LCD_send_data>
	LCD_send_command(ILI9488_DISPON);
 8000e5a:	2029      	movs	r0, #41	@ 0x29
 8000e5c:	f7ff fe64 	bl	8000b28 <LCD_send_command>


}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40020c00 	.word	0x40020c00

08000e68 <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4604      	mov	r4, r0
 8000e70:	4608      	mov	r0, r1
 8000e72:	4611      	mov	r1, r2
 8000e74:	461a      	mov	r2, r3
 8000e76:	4623      	mov	r3, r4
 8000e78:	80fb      	strh	r3, [r7, #6]
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80bb      	strh	r3, [r7, #4]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	807b      	strh	r3, [r7, #2]
 8000e82:	4613      	mov	r3, r2
 8000e84:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 8000e86:	202a      	movs	r0, #42	@ 0x2a
 8000e88:	f7ff fe4e 	bl	8000b28 <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	0a1b      	lsrs	r3, r3, #8
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	733b      	strb	r3, [r7, #12]
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 8000e9c:	887b      	ldrh	r3, [r7, #2]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	73bb      	strb	r3, [r7, #14]
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fe5c 	bl	8000b70 <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 8000eb8:	202b      	movs	r0, #43	@ 0x2b
 8000eba:	f7ff fe35 	bl	8000b28 <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	733b      	strb	r3, [r7, #12]
 8000ec8:	88bb      	ldrh	r3, [r7, #4]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 8000ece:	883b      	ldrh	r3, [r7, #0]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	73bb      	strb	r3, [r7, #14]
 8000ed8:	883b      	ldrh	r3, [r7, #0]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe43 	bl	8000b70 <LCD_send_data_multi>

	if(x == 'w')
 8000eea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eee:	2b77      	cmp	r3, #119	@ 0x77
 8000ef0:	d102      	bne.n	8000ef8 <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 8000ef2:	202c      	movs	r0, #44	@ 0x2c
 8000ef4:	f7ff fe18 	bl	8000b28 <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 8000ef8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000efc:	2b72      	cmp	r3, #114	@ 0x72
 8000efe:	d102      	bne.n	8000f06 <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 8000f00:	202e      	movs	r0, #46	@ 0x2e
 8000f02:	f7ff fe11 	bl	8000b28 <LCD_send_command>
	}


}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd90      	pop	{r4, r7, pc}
	...

08000f10 <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4604      	mov	r4, r0
 8000f18:	4608      	mov	r0, r1
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4623      	mov	r3, r4
 8000f20:	80fb      	strh	r3, [r7, #6]
 8000f22:	4603      	mov	r3, r0
 8000f24:	80bb      	strh	r3, [r7, #4]
 8000f26:	460b      	mov	r3, r1
 8000f28:	807b      	strh	r3, [r7, #2]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 8000f2e:	4b7b      	ldr	r3, [pc, #492]	@ (800111c <read_pixel_frame+0x20c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b79      	ldr	r3, [pc, #484]	@ (800111c <read_pixel_frame+0x20c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f3c:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 8000f3e:	4b77      	ldr	r3, [pc, #476]	@ (800111c <read_pixel_frame+0x20c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b75      	ldr	r3, [pc, #468]	@ (800111c <read_pixel_frame+0x20c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8000f4c:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 8000f4e:	4b73      	ldr	r3, [pc, #460]	@ (800111c <read_pixel_frame+0x20c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b71      	ldr	r3, [pc, #452]	@ (800111c <read_pixel_frame+0x20c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0210 	orr.w	r2, r2, #16
 8000f5c:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8000f5e:	4b6f      	ldr	r3, [pc, #444]	@ (800111c <read_pixel_frame+0x20c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b6d      	ldr	r3, [pc, #436]	@ (800111c <read_pixel_frame+0x20c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f6c:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 8000f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8001120 <read_pixel_frame+0x210>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 8000f78:	887a      	ldrh	r2, [r7, #2]
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	bfb8      	it	lt
 8000f82:	425b      	neglt	r3, r3
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	8839      	ldrh	r1, [r7, #0]
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	1acb      	subs	r3, r1, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	bfb8      	it	lt
 8000f90:	425b      	neglt	r3, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	fb12 f303 	smulbb	r3, r2, r3
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	0052      	lsls	r2, r2, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	753b      	strb	r3, [r7, #20]

    free(data);
 8000fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000fa8:	f004 fada 	bl	8005560 <free>
    data = malloc(byteNr);
 8000fac:	8afb      	ldrh	r3, [r7, #22]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f004 face 	bl	8005550 <malloc>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	807b      	strh	r3, [r7, #2]
    y--;
 8000fbe:	883b      	ldrh	r3, [r7, #0]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 8000fc4:	88fb      	ldrh	r3, [r7, #6]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	743b      	strb	r3, [r7, #16]
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	747b      	strb	r3, [r7, #17]
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	0a1b      	lsrs	r3, r3, #8
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	74bb      	strb	r3, [r7, #18]
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 8000fe4:	88bb      	ldrh	r3, [r7, #4]
 8000fe6:	0a1b      	lsrs	r3, r3, #8
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	733b      	strb	r3, [r7, #12]
 8000fee:	88bb      	ldrh	r3, [r7, #4]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	737b      	strb	r3, [r7, #13]
 8000ff4:	883b      	ldrh	r3, [r7, #0]
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	73bb      	strb	r3, [r7, #14]
 8000ffe:	883b      	ldrh	r3, [r7, #0]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	73fb      	strb	r3, [r7, #15]

    CS_A();
 8001004:	2200      	movs	r2, #0
 8001006:	2110      	movs	r1, #16
 8001008:	4846      	ldr	r0, [pc, #280]	@ (8001124 <read_pixel_frame+0x214>)
 800100a:	f001 fc3d 	bl	8002888 <HAL_GPIO_WritePin>

    DC_COMMAND();
 800100e:	2200      	movs	r2, #0
 8001010:	2104      	movs	r1, #4
 8001012:	4844      	ldr	r0, [pc, #272]	@ (8001124 <read_pixel_frame+0x214>)
 8001014:	f001 fc38 	bl	8002888 <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 8001018:	232a      	movs	r3, #42	@ 0x2a
 800101a:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 800101c:	f107 010b 	add.w	r1, r7, #11
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	2201      	movs	r2, #1
 8001026:	483d      	ldr	r0, [pc, #244]	@ (800111c <read_pixel_frame+0x20c>)
 8001028:	f002 f969 	bl	80032fe <HAL_SPI_Transmit>
    DC_DATA();
 800102c:	2201      	movs	r2, #1
 800102e:	2104      	movs	r1, #4
 8001030:	483c      	ldr	r0, [pc, #240]	@ (8001124 <read_pixel_frame+0x214>)
 8001032:	f001 fc29 	bl	8002888 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 8001036:	f107 0110 	add.w	r1, r7, #16
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	2204      	movs	r2, #4
 8001040:	4836      	ldr	r0, [pc, #216]	@ (800111c <read_pixel_frame+0x20c>)
 8001042:	f002 f95c 	bl	80032fe <HAL_SPI_Transmit>

    DC_COMMAND();
 8001046:	2200      	movs	r2, #0
 8001048:	2104      	movs	r1, #4
 800104a:	4836      	ldr	r0, [pc, #216]	@ (8001124 <read_pixel_frame+0x214>)
 800104c:	f001 fc1c 	bl	8002888 <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 8001050:	232b      	movs	r3, #43	@ 0x2b
 8001052:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 8001054:	f107 010a 	add.w	r1, r7, #10
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	2201      	movs	r2, #1
 800105e:	482f      	ldr	r0, [pc, #188]	@ (800111c <read_pixel_frame+0x20c>)
 8001060:	f002 f94d 	bl	80032fe <HAL_SPI_Transmit>
    DC_DATA();
 8001064:	2201      	movs	r2, #1
 8001066:	2104      	movs	r1, #4
 8001068:	482e      	ldr	r0, [pc, #184]	@ (8001124 <read_pixel_frame+0x214>)
 800106a:	f001 fc0d 	bl	8002888 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 800106e:	f107 010c 	add.w	r1, r7, #12
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	2204      	movs	r2, #4
 8001078:	4828      	ldr	r0, [pc, #160]	@ (800111c <read_pixel_frame+0x20c>)
 800107a:	f002 f940 	bl	80032fe <HAL_SPI_Transmit>

    DC_COMMAND();
 800107e:	2200      	movs	r2, #0
 8001080:	2104      	movs	r1, #4
 8001082:	4828      	ldr	r0, [pc, #160]	@ (8001124 <read_pixel_frame+0x214>)
 8001084:	f001 fc00 	bl	8002888 <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 8001088:	232e      	movs	r3, #46	@ 0x2e
 800108a:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 800108c:	f107 0109 	add.w	r1, r7, #9
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	2201      	movs	r2, #1
 8001096:	4821      	ldr	r0, [pc, #132]	@ (800111c <read_pixel_frame+0x20c>)
 8001098:	f002 f931 	bl	80032fe <HAL_SPI_Transmit>
    DC_DATA();
 800109c:	2201      	movs	r2, #1
 800109e:	2104      	movs	r1, #4
 80010a0:	4820      	ldr	r0, [pc, #128]	@ (8001124 <read_pixel_frame+0x214>)
 80010a2:	f001 fbf1 	bl	8002888 <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 80010a6:	f107 0114 	add.w	r1, r7, #20
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	2201      	movs	r2, #1
 80010b0:	481a      	ldr	r0, [pc, #104]	@ (800111c <read_pixel_frame+0x20c>)
 80010b2:	f002 fa68 	bl	8003586 <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 80010b6:	8afb      	ldrh	r3, [r7, #22]
 80010b8:	461a      	mov	r2, r3
 80010ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80010bc:	4817      	ldr	r0, [pc, #92]	@ (800111c <read_pixel_frame+0x20c>)
 80010be:	f002 fdd7 	bl	8003c70 <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 80010c2:	bf00      	nop
 80010c4:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <read_pixel_frame+0x210>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0fa      	beq.n	80010c4 <read_pixel_frame+0x1b4>
    CS_D();
 80010ce:	2201      	movs	r2, #1
 80010d0:	2110      	movs	r1, #16
 80010d2:	4814      	ldr	r0, [pc, #80]	@ (8001124 <read_pixel_frame+0x214>)
 80010d4:	f001 fbd8 	bl	8002888 <HAL_GPIO_WritePin>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 80010d8:	4b10      	ldr	r3, [pc, #64]	@ (800111c <read_pixel_frame+0x20c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <read_pixel_frame+0x20c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80010e6:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <read_pixel_frame+0x20c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <read_pixel_frame+0x20c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 80010f6:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <read_pixel_frame+0x20c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b07      	ldr	r3, [pc, #28]	@ (800111c <read_pixel_frame+0x20c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <read_pixel_frame+0x20c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b04      	ldr	r3, [pc, #16]	@ (800111c <read_pixel_frame+0x20c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001112:	601a      	str	r2, [r3, #0]

}
 8001114:	bf00      	nop
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd90      	pop	{r4, r7, pc}
 800111c:	20000080 	.word	0x20000080
 8001120:	200001e1 	.word	0x200001e1
 8001124:	40020c00 	.word	0x40020c00

08001128 <HAL_SPI_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	 * folosind DMA. Odata terminat transferul SPI prin DMA,
	 * aceasta functia de CallBack se va apela, setandu-ne un flag
	 * pentru a indica starea acestui transfer de date.
	 */

	flagDmaSpiTx = 1;
 8001130:	4b04      	ldr	r3, [pc, #16]	@ (8001144 <HAL_SPI_TxCpltCallback+0x1c>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]

}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	200001e0 	.word	0x200001e0

08001148 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	/*
	 * Functie de CallBack pentru terminarea receptiei datelor
	 * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	 */

	flagDmaSpiRx = 1;
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <HAL_SPI_RxCpltCallback+0x1c>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]

}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	200001e1 	.word	0x200001e1

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116e:	f000 fc45 	bl	80019fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001172:	f000 f917 	bl	80013a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001176:	f000 fa07 	bl	8001588 <MX_GPIO_Init>
  MX_DMA_Init();
 800117a:	f000 f9dd 	bl	8001538 <MX_DMA_Init>
  MX_SPI1_Init();
 800117e:	f000 f97b 	bl	8001478 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001182:	f000 f9af 	bl	80014e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  ILI9488_driver_init();
 8001186:	f7ff fd6f 	bl	8000c68 <ILI9488_driver_init>

  fill_screen1(0xF100);
 800118a:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 800118e:	f7ff fa1f 	bl	80005d0 <fill_screen1>
  HAL_Delay(1000);
 8001192:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001196:	f000 fca3 	bl	8001ae0 <HAL_Delay>
  fill_screen2(0xF00F);
 800119a:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 800119e:	f7ff faad 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 80011a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011a6:	f000 fc9b 	bl	8001ae0 <HAL_Delay>
  fill_screen2(0xFFFF);
 80011aa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80011ae:	f7ff faa5 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 80011b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011b6:	f000 fc93 	bl	8001ae0 <HAL_Delay>
  fill_screen2(0x3F51);
 80011ba:	f643 7051 	movw	r0, #16209	@ 0x3f51
 80011be:	f7ff fa9d 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 80011c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011c6:	f000 fc8b 	bl	8001ae0 <HAL_Delay>



  for(uint8_t i=0;i<100;i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	e043      	b.n	8001258 <main+0xf0>
  {
	  for(uint8_t j=0; j<100;j++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	73bb      	strb	r3, [r7, #14]
 80011d4:	e03a      	b.n	800124c <main+0xe4>
	  {

		  if(i==j)
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d109      	bne.n	80011f2 <main+0x8a>
		  {
			  draw_pixel(i,j,0xF100);
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	7bba      	ldrb	r2, [r7, #14]
 80011e4:	b291      	uxth	r1, r2
 80011e6:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f9c6 	bl	800057c <draw_pixel>
			  continue;
 80011f0:	e029      	b.n	8001246 <main+0xde>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b50      	cmp	r3, #80	@ 0x50
 80011f6:	d102      	bne.n	80011fe <main+0x96>
 80011f8:	7bbb      	ldrb	r3, [r7, #14]
 80011fa:	2b14      	cmp	r3, #20
 80011fc:	d011      	beq.n	8001222 <main+0xba>
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	2b50      	cmp	r3, #80	@ 0x50
 8001202:	d102      	bne.n	800120a <main+0xa2>
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	2b13      	cmp	r3, #19
 8001208:	d00b      	beq.n	8001222 <main+0xba>
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	2b51      	cmp	r3, #81	@ 0x51
 800120e:	d102      	bne.n	8001216 <main+0xae>
 8001210:	7bbb      	ldrb	r3, [r7, #14]
 8001212:	2b14      	cmp	r3, #20
 8001214:	d005      	beq.n	8001222 <main+0xba>
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b51      	cmp	r3, #81	@ 0x51
 800121a:	d10b      	bne.n	8001234 <main+0xcc>
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	2b13      	cmp	r3, #19
 8001220:	d108      	bne.n	8001234 <main+0xcc>
		  {
			  draw_pixel(i,j,0x001F);
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	b29b      	uxth	r3, r3
 8001226:	7bba      	ldrb	r2, [r7, #14]
 8001228:	b291      	uxth	r1, r2
 800122a:	221f      	movs	r2, #31
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f9a5 	bl	800057c <draw_pixel>
			  continue;
 8001232:	e008      	b.n	8001246 <main+0xde>
		  }


		  draw_pixel(i,j,0xFFFF);
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	b29b      	uxth	r3, r3
 8001238:	7bba      	ldrb	r2, [r7, #14]
 800123a:	b291      	uxth	r1, r2
 800123c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f99b 	bl	800057c <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	3301      	adds	r3, #1
 800124a:	73bb      	strb	r3, [r7, #14]
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	2b63      	cmp	r3, #99	@ 0x63
 8001250:	d9c1      	bls.n	80011d6 <main+0x6e>
  for(uint8_t i=0;i<100;i++)
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	3301      	adds	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	2b63      	cmp	r3, #99	@ 0x63
 800125c:	d9b8      	bls.n	80011d0 <main+0x68>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 800125e:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8001262:	f7ff fa4b 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8001266:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800126a:	f000 fc39 	bl	8001ae0 <HAL_Delay>
  fill_screen2(0xF150);
 800126e:	f24f 1050 	movw	r0, #61776	@ 0xf150
 8001272:	f7ff fa43 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8001276:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800127a:	f000 fc31 	bl	8001ae0 <HAL_Delay>
  fill_screen2(0xF111);
 800127e:	f24f 1011 	movw	r0, #61713	@ 0xf111
 8001282:	f7ff fa3b 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8001286:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800128a:	f000 fc29 	bl	8001ae0 <HAL_Delay>
  fill_screen2(0xF10F);
 800128e:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 8001292:	f7ff fa33 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 8001296:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800129a:	f000 fc21 	bl	8001ae0 <HAL_Delay>
  fill_screen2(0xFFFF);
 800129e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80012a2:	f7ff fa2b 	bl	80006fc <fill_screen2>
  HAL_Delay(1000);
 80012a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012aa:	f000 fc19 	bl	8001ae0 <HAL_Delay>
  fill_screen2(0xFFFF);
 80012ae:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80012b2:	f7ff fa23 	bl	80006fc <fill_screen2>

  print_string(36, 200, "Licenta 2025", 12, 0x1F00, 0x001F);
 80012b6:	231f      	movs	r3, #31
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	230c      	movs	r3, #12
 80012c2:	4a32      	ldr	r2, [pc, #200]	@ (800138c <main+0x224>)
 80012c4:	21c8      	movs	r1, #200	@ 0xc8
 80012c6:	2024      	movs	r0, #36	@ 0x24
 80012c8:	f7ff fb74 	bl	80009b4 <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 80012cc:	4b30      	ldr	r3, [pc, #192]	@ (8001390 <main+0x228>)
 80012ce:	607b      	str	r3, [r7, #4]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2204      	movs	r2, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	482f      	ldr	r0, [pc, #188]	@ (8001394 <main+0x22c>)
 80012d8:	f002 fc18 	bl	8003b0c <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 80012dc:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80012e0:	2250      	movs	r2, #80	@ 0x50
 80012e2:	2114      	movs	r1, #20
 80012e4:	2014      	movs	r0, #20
 80012e6:	f7ff fba9 	bl	8000a3c <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 80012ea:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80012ee:	2250      	movs	r2, #80	@ 0x50
 80012f0:	2114      	movs	r1, #20
 80012f2:	2014      	movs	r0, #20
 80012f4:	f7ff fbdd 	bl	8000ab2 <draw_vertical_line>

  flagDmaSpiTx = 0;
 80012f8:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <main+0x230>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 80012fe:	221f      	movs	r2, #31
 8001300:	2100      	movs	r1, #0
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff f93a 	bl	800057c <draw_pixel>
  draw_pixel(1,0,0xF800);
 8001308:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800130c:	2100      	movs	r1, #0
 800130e:	2001      	movs	r0, #1
 8001310:	f7ff f934 	bl	800057c <draw_pixel>
  draw_pixel(0,1,0x001F);
 8001314:	221f      	movs	r2, #31
 8001316:	2101      	movs	r1, #1
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff f92f 	bl	800057c <draw_pixel>
  draw_pixel(1,1,0xF800);
 800131e:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001322:	2101      	movs	r1, #1
 8001324:	2001      	movs	r0, #1
 8001326:	f7ff f929 	bl	800057c <draw_pixel>

  HAL_Delay(50);
 800132a:	2032      	movs	r0, #50	@ 0x32
 800132c:	f000 fbd8 	bl	8001ae0 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 8001330:	2001      	movs	r0, #1
 8001332:	f004 f90d 	bl	8005550 <malloc>
 8001336:	4603      	mov	r3, r0
 8001338:	60bb      	str	r3, [r7, #8]
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2302      	movs	r3, #2
 8001340:	2202      	movs	r2, #2
 8001342:	2100      	movs	r1, #0
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fde3 	bl	8000f10 <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 800134a:	68b8      	ldr	r0, [r7, #8]
 800134c:	f004 f908 	bl	8005560 <free>

  HAL_Delay(3000);
 8001350:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001354:	f000 fbc4 	bl	8001ae0 <HAL_Delay>
	 //HAL_Delay(1000);


	  //HAL_UART_Transmit(&huart1, (uint8_t*)"Received...\n ",12,HAL_MAX_DELAY);

	  if(flagDmaSpiTx == 1)
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <main+0x230>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d109      	bne.n	8001376 <main+0x20e>
	  {
		  flagDmaSpiTx = 0;
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <main+0x230>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t*)"C ",2,HAL_MAX_DELAY);
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	2202      	movs	r2, #2
 800136e:	490b      	ldr	r1, [pc, #44]	@ (800139c <main+0x234>)
 8001370:	480b      	ldr	r0, [pc, #44]	@ (80013a0 <main+0x238>)
 8001372:	f003 f93b 	bl	80045ec <HAL_UART_Transmit>
	  }

	  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2204      	movs	r2, #4
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	@ (8001394 <main+0x22c>)
 800137e:	f002 fbc5 	bl	8003b0c <HAL_SPI_Transmit_DMA>

	  HAL_Delay(1000);
 8001382:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001386:	f000 fbab 	bl	8001ae0 <HAL_Delay>
	  if(flagDmaSpiTx == 1)
 800138a:	e7e5      	b.n	8001358 <main+0x1f0>
 800138c:	08005800 	.word	0x08005800
 8001390:	04030201 	.word	0x04030201
 8001394:	20000080 	.word	0x20000080
 8001398:	200001e0 	.word	0x200001e0
 800139c:	08005810 	.word	0x08005810
 80013a0:	20000198 	.word	0x20000198

080013a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b094      	sub	sp, #80	@ 0x50
 80013a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	2230      	movs	r2, #48	@ 0x30
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 f98a 	bl	80056cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	4b28      	ldr	r3, [pc, #160]	@ (8001470 <SystemClock_Config+0xcc>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	4a27      	ldr	r2, [pc, #156]	@ (8001470 <SystemClock_Config+0xcc>)
 80013d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d8:	4b25      	ldr	r3, [pc, #148]	@ (8001470 <SystemClock_Config+0xcc>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <SystemClock_Config+0xd0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a21      	ldr	r2, [pc, #132]	@ (8001474 <SystemClock_Config+0xd0>)
 80013ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001474 <SystemClock_Config+0xd0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001400:	2301      	movs	r3, #1
 8001402:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001404:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140a:	2302      	movs	r3, #2
 800140c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001412:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001414:	2304      	movs	r3, #4
 8001416:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001418:	23a8      	movs	r3, #168	@ 0xa8
 800141a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800141c:	2302      	movs	r3, #2
 800141e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001420:	2304      	movs	r3, #4
 8001422:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001424:	f107 0320 	add.w	r3, r7, #32
 8001428:	4618      	mov	r0, r3
 800142a:	f001 fa47 	bl	80028bc <HAL_RCC_OscConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001434:	f000 f8f8 	bl	8001628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001438:	230f      	movs	r3, #15
 800143a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143c:	2302      	movs	r3, #2
 800143e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001444:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001448:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800144a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800144e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	2105      	movs	r1, #5
 8001456:	4618      	mov	r0, r3
 8001458:	f001 fca8 	bl	8002dac <HAL_RCC_ClockConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001462:	f000 f8e1 	bl	8001628 <Error_Handler>
  }
}
 8001466:	bf00      	nop
 8001468:	3750      	adds	r7, #80	@ 0x50
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40007000 	.word	0x40007000

08001478 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800147c:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <MX_SPI1_Init+0x64>)
 800147e:	4a18      	ldr	r2, [pc, #96]	@ (80014e0 <MX_SPI1_Init+0x68>)
 8001480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001482:	4b16      	ldr	r3, [pc, #88]	@ (80014dc <MX_SPI1_Init+0x64>)
 8001484:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800148a:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <MX_SPI1_Init+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001490:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <MX_SPI1_Init+0x64>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_SPI1_Init+0x64>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800149c:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <MX_SPI1_Init+0x64>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <MX_SPI1_Init+0x64>)
 80014a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014aa:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <MX_SPI1_Init+0x64>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <MX_SPI1_Init+0x64>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <MX_SPI1_Init+0x64>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014bc:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <MX_SPI1_Init+0x64>)
 80014be:	2200      	movs	r2, #0
 80014c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <MX_SPI1_Init+0x64>)
 80014c4:	220a      	movs	r2, #10
 80014c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	@ (80014dc <MX_SPI1_Init+0x64>)
 80014ca:	f001 fe8f 	bl	80031ec <HAL_SPI_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014d4:	f000 f8a8 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000080 	.word	0x20000080
 80014e0:	40013000 	.word	0x40013000

080014e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 80014ea:	4a12      	ldr	r2, [pc, #72]	@ (8001534 <MX_USART1_UART_Init+0x50>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 80014f0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_USART1_UART_Init+0x4c>)
 800151c:	f003 f816 	bl	800454c <HAL_UART_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001526:	f000 f87f 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000198 	.word	0x20000198
 8001534:	40011000 	.word	0x40011000

08001538 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
 8001542:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <MX_DMA_Init+0x4c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a0f      	ldr	r2, [pc, #60]	@ (8001584 <MX_DMA_Init+0x4c>)
 8001548:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <MX_DMA_Init+0x4c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	2038      	movs	r0, #56	@ 0x38
 8001560:	f000 fbbd 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001564:	2038      	movs	r0, #56	@ 0x38
 8001566:	f000 fbd6 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	203b      	movs	r0, #59	@ 0x3b
 8001570:	f000 fbb5 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001574:	203b      	movs	r0, #59	@ 0x3b
 8001576:	f000 fbce 	bl	8001d16 <HAL_NVIC_EnableIRQ>

}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <MX_GPIO_Init+0x98>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001620 <MX_GPIO_Init+0x98>)
 80015a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <MX_GPIO_Init+0x98>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <MX_GPIO_Init+0x98>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	4a17      	ldr	r2, [pc, #92]	@ (8001620 <MX_GPIO_Init+0x98>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <MX_GPIO_Init+0x98>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_GPIO_Init+0x98>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	4a10      	ldr	r2, [pc, #64]	@ (8001620 <MX_GPIO_Init+0x98>)
 80015e0:	f043 0308 	orr.w	r3, r3, #8
 80015e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_GPIO_Init+0x98>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2154      	movs	r1, #84	@ 0x54
 80015f6:	480b      	ldr	r0, [pc, #44]	@ (8001624 <MX_GPIO_Init+0x9c>)
 80015f8:	f001 f946 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD2 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 80015fc:	2354      	movs	r3, #84	@ 0x54
 80015fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	4619      	mov	r1, r3
 8001612:	4804      	ldr	r0, [pc, #16]	@ (8001624 <MX_GPIO_Init+0x9c>)
 8001614:	f000 ff9c 	bl	8002550 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001618:	bf00      	nop
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	40020c00 	.word	0x40020c00

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <Error_Handler+0x8>

08001634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <HAL_MspInit+0x4c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	4a0f      	ldr	r2, [pc, #60]	@ (8001680 <HAL_MspInit+0x4c>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001648:	6453      	str	r3, [r2, #68]	@ 0x44
 800164a:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <HAL_MspInit+0x4c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_MspInit+0x4c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	4a08      	ldr	r2, [pc, #32]	@ (8001680 <HAL_MspInit+0x4c>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	@ 0x40
 8001666:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_MspInit+0x4c>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	@ 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a47      	ldr	r2, [pc, #284]	@ (80017c0 <HAL_SPI_MspInit+0x13c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	f040 8088 	bne.w	80017b8 <HAL_SPI_MspInit+0x134>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	4b45      	ldr	r3, [pc, #276]	@ (80017c4 <HAL_SPI_MspInit+0x140>)
 80016ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b0:	4a44      	ldr	r2, [pc, #272]	@ (80017c4 <HAL_SPI_MspInit+0x140>)
 80016b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b8:	4b42      	ldr	r3, [pc, #264]	@ (80017c4 <HAL_SPI_MspInit+0x140>)
 80016ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4b3e      	ldr	r3, [pc, #248]	@ (80017c4 <HAL_SPI_MspInit+0x140>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016cc:	4a3d      	ldr	r2, [pc, #244]	@ (80017c4 <HAL_SPI_MspInit+0x140>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d4:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <HAL_SPI_MspInit+0x140>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016e0:	23e0      	movs	r3, #224	@ 0xe0
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016f0:	2305      	movs	r3, #5
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	4833      	ldr	r0, [pc, #204]	@ (80017c8 <HAL_SPI_MspInit+0x144>)
 80016fc:	f000 ff28 	bl	8002550 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001700:	4b32      	ldr	r3, [pc, #200]	@ (80017cc <HAL_SPI_MspInit+0x148>)
 8001702:	4a33      	ldr	r2, [pc, #204]	@ (80017d0 <HAL_SPI_MspInit+0x14c>)
 8001704:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001706:	4b31      	ldr	r3, [pc, #196]	@ (80017cc <HAL_SPI_MspInit+0x148>)
 8001708:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800170c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800170e:	4b2f      	ldr	r3, [pc, #188]	@ (80017cc <HAL_SPI_MspInit+0x148>)
 8001710:	2240      	movs	r2, #64	@ 0x40
 8001712:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <HAL_SPI_MspInit+0x148>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b2c      	ldr	r3, [pc, #176]	@ (80017cc <HAL_SPI_MspInit+0x148>)
 800171c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001720:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001722:	4b2a      	ldr	r3, [pc, #168]	@ (80017cc <HAL_SPI_MspInit+0x148>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001728:	4b28      	ldr	r3, [pc, #160]	@ (80017cc <HAL_SPI_MspInit+0x148>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800172e:	4b27      	ldr	r3, [pc, #156]	@ (80017cc <HAL_SPI_MspInit+0x148>)
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001734:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <HAL_SPI_MspInit+0x148>)
 8001736:	2200      	movs	r2, #0
 8001738:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800173a:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <HAL_SPI_MspInit+0x148>)
 800173c:	2200      	movs	r2, #0
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001740:	4822      	ldr	r0, [pc, #136]	@ (80017cc <HAL_SPI_MspInit+0x148>)
 8001742:	f000 fb03 	bl	8001d4c <HAL_DMA_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800174c:	f7ff ff6c 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a1e      	ldr	r2, [pc, #120]	@ (80017cc <HAL_SPI_MspInit+0x148>)
 8001754:	649a      	str	r2, [r3, #72]	@ 0x48
 8001756:	4a1d      	ldr	r2, [pc, #116]	@ (80017cc <HAL_SPI_MspInit+0x148>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800175c:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <HAL_SPI_MspInit+0x150>)
 800175e:	4a1e      	ldr	r2, [pc, #120]	@ (80017d8 <HAL_SPI_MspInit+0x154>)
 8001760:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001762:	4b1c      	ldr	r3, [pc, #112]	@ (80017d4 <HAL_SPI_MspInit+0x150>)
 8001764:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001768:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176a:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <HAL_SPI_MspInit+0x150>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <HAL_SPI_MspInit+0x150>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001776:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <HAL_SPI_MspInit+0x150>)
 8001778:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800177c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800177e:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <HAL_SPI_MspInit+0x150>)
 8001780:	2200      	movs	r2, #0
 8001782:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001784:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <HAL_SPI_MspInit+0x150>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_SPI_MspInit+0x150>)
 800178c:	2200      	movs	r2, #0
 800178e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001790:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <HAL_SPI_MspInit+0x150>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001796:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <HAL_SPI_MspInit+0x150>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800179c:	480d      	ldr	r0, [pc, #52]	@ (80017d4 <HAL_SPI_MspInit+0x150>)
 800179e:	f000 fad5 	bl	8001d4c <HAL_DMA_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80017a8:	f7ff ff3e 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a09      	ldr	r2, [pc, #36]	@ (80017d4 <HAL_SPI_MspInit+0x150>)
 80017b0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80017b2:	4a08      	ldr	r2, [pc, #32]	@ (80017d4 <HAL_SPI_MspInit+0x150>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017b8:	bf00      	nop
 80017ba:	3728      	adds	r7, #40	@ 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40013000 	.word	0x40013000
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	200000d8 	.word	0x200000d8
 80017d0:	40026458 	.word	0x40026458
 80017d4:	20000138 	.word	0x20000138
 80017d8:	40026410 	.word	0x40026410

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	@ 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001870 <HAL_UART_MspInit+0x94>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d134      	bne.n	8001868 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	4a1b      	ldr	r2, [pc, #108]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001808:	f043 0310 	orr.w	r3, r3, #16
 800180c:	6453      	str	r3, [r2, #68]	@ 0x44
 800180e:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a14      	ldr	r2, [pc, #80]	@ (8001874 <HAL_UART_MspInit+0x98>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <HAL_UART_MspInit+0x98>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001836:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001848:	2307      	movs	r3, #7
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4809      	ldr	r0, [pc, #36]	@ (8001878 <HAL_UART_MspInit+0x9c>)
 8001854:	f000 fe7c 	bl	8002550 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	2025      	movs	r0, #37	@ 0x25
 800185e:	f000 fa3e 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001862:	2025      	movs	r0, #37	@ 0x25
 8001864:	f000 fa57 	bl	8001d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001868:	bf00      	nop
 800186a:	3728      	adds	r7, #40	@ 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40011000 	.word	0x40011000
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <NMI_Handler+0x4>

08001884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <MemManage_Handler+0x4>

08001894 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d2:	f000 f8e5 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <USART1_IRQHandler+0x10>)
 80018e2:	f002 ff0f 	bl	8004704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000198 	.word	0x20000198

080018f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <DMA2_Stream0_IRQHandler+0x10>)
 80018f6:	f000 fbc1 	bl	800207c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000138 	.word	0x20000138

08001904 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001908:	4802      	ldr	r0, [pc, #8]	@ (8001914 <DMA2_Stream3_IRQHandler+0x10>)
 800190a:	f000 fbb7 	bl	800207c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200000d8 	.word	0x200000d8

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	@ (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	@ (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	@ (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d207      	bcs.n	8001958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001948:	f003 fed8 	bl	80056fc <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	220c      	movs	r2, #12
 8001950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e009      	b.n	800196c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195e:	4b07      	ldr	r3, [pc, #28]	@ (800197c <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a05      	ldr	r2, [pc, #20]	@ (800197c <_sbrk+0x64>)
 8001968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20020000 	.word	0x20020000
 8001978:	00000400 	.word	0x00000400
 800197c:	200001e4 	.word	0x200001e4
 8001980:	20000338 	.word	0x20000338

08001984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <SystemInit+0x20>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <SystemInit+0x20>)
 8001990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <Reset_Handler>:
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019e0 <LoopFillZerobss+0xe>
 80019ac:	f7ff ffea 	bl	8001984 <SystemInit>
 80019b0:	480c      	ldr	r0, [pc, #48]	@ (80019e4 <LoopFillZerobss+0x12>)
 80019b2:	490d      	ldr	r1, [pc, #52]	@ (80019e8 <LoopFillZerobss+0x16>)
 80019b4:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <LoopFillZerobss+0x1a>)
 80019b6:	2300      	movs	r3, #0
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:
 80019ba:	58d4      	ldr	r4, [r2, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:
 80019c0:	18c4      	adds	r4, r0, r3
 80019c2:	428c      	cmp	r4, r1
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <LoopFillZerobss+0x1e>)
 80019c8:	4c0a      	ldr	r4, [pc, #40]	@ (80019f4 <LoopFillZerobss+0x22>)
 80019ca:	2300      	movs	r3, #0
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:
 80019d2:	42a2      	cmp	r2, r4
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>
 80019d6:	f003 fe97 	bl	8005708 <__libc_init_array>
 80019da:	f7ff fbc5 	bl	8001168 <main>
 80019de:	4770      	bx	lr
 80019e0:	20020000 	.word	0x20020000
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20000064 	.word	0x20000064
 80019ec:	080065a0 	.word	0x080065a0
 80019f0:	20000064 	.word	0x20000064
 80019f4:	20000334 	.word	0x20000334

080019f8 <ADC_IRQHandler>:
 80019f8:	e7fe      	b.n	80019f8 <ADC_IRQHandler>
	...

080019fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a00:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0d      	ldr	r2, [pc, #52]	@ (8001a3c <HAL_Init+0x40>)
 8001a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <HAL_Init+0x40>)
 8001a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a18:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a07      	ldr	r2, [pc, #28]	@ (8001a3c <HAL_Init+0x40>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f000 f94f 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a2a:	200f      	movs	r0, #15
 8001a2c:	f000 f808 	bl	8001a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a30:	f7ff fe00 	bl	8001634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023c00 	.word	0x40023c00

08001a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_InitTick+0x54>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <HAL_InitTick+0x58>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f967 	bl	8001d32 <HAL_SYSTICK_Config>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00e      	b.n	8001a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b0f      	cmp	r3, #15
 8001a72:	d80a      	bhi.n	8001a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a74:	2200      	movs	r2, #0
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f000 f92f 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a80:	4a06      	ldr	r2, [pc, #24]	@ (8001a9c <HAL_InitTick+0x5c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000010 	.word	0x20000010
 8001a9c:	2000000c 	.word	0x2000000c

08001aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000010 	.word	0x20000010
 8001ac4:	200001e8 	.word	0x200001e8

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	200001e8 	.word	0x200001e8

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff ffee 	bl	8001ac8 <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffde 	bl	8001ac8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000010 	.word	0x20000010

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	@ (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	@ (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	@ (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	@ 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	@ 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff29 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff3e 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff31 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffa2 	bl	8001c84 <SysTick_Config>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff feb6 	bl	8001ac8 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e099      	b.n	8001e9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d88:	e00f      	b.n	8001daa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d8a:	f7ff fe9d 	bl	8001ac8 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d908      	bls.n	8001daa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2203      	movs	r2, #3
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e078      	b.n	8001e9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1e8      	bne.n	8001d8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4b38      	ldr	r3, [pc, #224]	@ (8001ea4 <HAL_DMA_Init+0x158>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d107      	bne.n	8001e14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f023 0307 	bic.w	r3, r3, #7
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d117      	bne.n	8001e6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00e      	beq.n	8001e6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fb01 	bl	8002458 <DMA_CheckFifoParam>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2240      	movs	r2, #64	@ 0x40
 8001e60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e016      	b.n	8001e9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fab8 	bl	80023ec <DMA_CalcBaseAndBitshift>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e84:	223f      	movs	r2, #63	@ 0x3f
 8001e86:	409a      	lsls	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	f010803f 	.word	0xf010803f

08001ea8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_DMA_Start_IT+0x26>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e040      	b.n	8001f50 <HAL_DMA_Start_IT+0xa8>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d12f      	bne.n	8001f42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 fa4a 	bl	8002390 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f00:	223f      	movs	r2, #63	@ 0x3f
 8001f02:	409a      	lsls	r2, r3
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0216 	orr.w	r2, r2, #22
 8001f16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d007      	beq.n	8001f30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0208 	orr.w	r2, r2, #8
 8001f2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e005      	b.n	8001f4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f66:	f7ff fdaf 	bl	8001ac8 <HAL_GetTick>
 8001f6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d008      	beq.n	8001f8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2280      	movs	r2, #128	@ 0x80
 8001f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e052      	b.n	8002030 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 0216 	bic.w	r2, r2, #22
 8001f98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fa8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d103      	bne.n	8001fba <HAL_DMA_Abort+0x62>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0208 	bic.w	r2, r2, #8
 8001fc8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fda:	e013      	b.n	8002004 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fdc:	f7ff fd74 	bl	8001ac8 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b05      	cmp	r3, #5
 8001fe8:	d90c      	bls.n	8002004 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2220      	movs	r2, #32
 8001fee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e015      	b.n	8002030 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1e4      	bne.n	8001fdc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002016:	223f      	movs	r2, #63	@ 0x3f
 8002018:	409a      	lsls	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d004      	beq.n	8002056 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2280      	movs	r2, #128	@ 0x80
 8002050:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e00c      	b.n	8002070 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2205      	movs	r2, #5
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002088:	4b8e      	ldr	r3, [pc, #568]	@ (80022c4 <HAL_DMA_IRQHandler+0x248>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a8e      	ldr	r2, [pc, #568]	@ (80022c8 <HAL_DMA_IRQHandler+0x24c>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0a9b      	lsrs	r3, r3, #10
 8002094:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a6:	2208      	movs	r2, #8
 80020a8:	409a      	lsls	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d01a      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0204 	bic.w	r2, r2, #4
 80020ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d4:	2208      	movs	r2, #8
 80020d6:	409a      	lsls	r2, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ec:	2201      	movs	r2, #1
 80020ee:	409a      	lsls	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d012      	beq.n	800211e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210a:	2201      	movs	r2, #1
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002116:	f043 0202 	orr.w	r2, r3, #2
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002122:	2204      	movs	r2, #4
 8002124:	409a      	lsls	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d012      	beq.n	8002154 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00b      	beq.n	8002154 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002140:	2204      	movs	r2, #4
 8002142:	409a      	lsls	r2, r3
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800214c:	f043 0204 	orr.w	r2, r3, #4
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002158:	2210      	movs	r2, #16
 800215a:	409a      	lsls	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d043      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d03c      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002176:	2210      	movs	r2, #16
 8002178:	409a      	lsls	r2, r3
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d018      	beq.n	80021be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d108      	bne.n	80021ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d024      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	4798      	blx	r3
 80021aa:	e01f      	b.n	80021ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01b      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
 80021bc:	e016      	b.n	80021ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d107      	bne.n	80021dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0208 	bic.w	r2, r2, #8
 80021da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f0:	2220      	movs	r2, #32
 80021f2:	409a      	lsls	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 808f 	beq.w	800231c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0310 	and.w	r3, r3, #16
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8087 	beq.w	800231c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002212:	2220      	movs	r2, #32
 8002214:	409a      	lsls	r2, r3
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b05      	cmp	r3, #5
 8002224:	d136      	bne.n	8002294 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0216 	bic.w	r2, r2, #22
 8002234:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695a      	ldr	r2, [r3, #20]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002244:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	2b00      	cmp	r3, #0
 800224c:	d103      	bne.n	8002256 <HAL_DMA_IRQHandler+0x1da>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002252:	2b00      	cmp	r3, #0
 8002254:	d007      	beq.n	8002266 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0208 	bic.w	r2, r2, #8
 8002264:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226a:	223f      	movs	r2, #63	@ 0x3f
 800226c:	409a      	lsls	r2, r3
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002286:	2b00      	cmp	r3, #0
 8002288:	d07e      	beq.n	8002388 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
        }
        return;
 8002292:	e079      	b.n	8002388 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d01d      	beq.n	80022de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10d      	bne.n	80022cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d031      	beq.n	800231c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	4798      	blx	r3
 80022c0:	e02c      	b.n	800231c <HAL_DMA_IRQHandler+0x2a0>
 80022c2:	bf00      	nop
 80022c4:	20000008 	.word	0x20000008
 80022c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d023      	beq.n	800231c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
 80022dc:	e01e      	b.n	800231c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10f      	bne.n	800230c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0210 	bic.w	r2, r2, #16
 80022fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002320:	2b00      	cmp	r3, #0
 8002322:	d032      	beq.n	800238a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d022      	beq.n	8002376 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2205      	movs	r2, #5
 8002334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0201 	bic.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	3301      	adds	r3, #1
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	429a      	cmp	r2, r3
 8002352:	d307      	bcc.n	8002364 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f2      	bne.n	8002348 <HAL_DMA_IRQHandler+0x2cc>
 8002362:	e000      	b.n	8002366 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002364:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	4798      	blx	r3
 8002386:	e000      	b.n	800238a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002388:	bf00      	nop
    }
  }
}
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80023ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b40      	cmp	r3, #64	@ 0x40
 80023bc:	d108      	bne.n	80023d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023ce:	e007      	b.n	80023e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	60da      	str	r2, [r3, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	3b10      	subs	r3, #16
 80023fc:	4a14      	ldr	r2, [pc, #80]	@ (8002450 <DMA_CalcBaseAndBitshift+0x64>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	091b      	lsrs	r3, r3, #4
 8002404:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002406:	4a13      	ldr	r2, [pc, #76]	@ (8002454 <DMA_CalcBaseAndBitshift+0x68>)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d909      	bls.n	800242e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002422:	f023 0303 	bic.w	r3, r3, #3
 8002426:	1d1a      	adds	r2, r3, #4
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	659a      	str	r2, [r3, #88]	@ 0x58
 800242c:	e007      	b.n	800243e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002436:	f023 0303 	bic.w	r3, r3, #3
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	aaaaaaab 	.word	0xaaaaaaab
 8002454:	08006588 	.word	0x08006588

08002458 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d11f      	bne.n	80024b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d856      	bhi.n	8002526 <DMA_CheckFifoParam+0xce>
 8002478:	a201      	add	r2, pc, #4	@ (adr r2, 8002480 <DMA_CheckFifoParam+0x28>)
 800247a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247e:	bf00      	nop
 8002480:	08002491 	.word	0x08002491
 8002484:	080024a3 	.word	0x080024a3
 8002488:	08002491 	.word	0x08002491
 800248c:	08002527 	.word	0x08002527
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d046      	beq.n	800252a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a0:	e043      	b.n	800252a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024aa:	d140      	bne.n	800252e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b0:	e03d      	b.n	800252e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ba:	d121      	bne.n	8002500 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d837      	bhi.n	8002532 <DMA_CheckFifoParam+0xda>
 80024c2:	a201      	add	r2, pc, #4	@ (adr r2, 80024c8 <DMA_CheckFifoParam+0x70>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	080024d9 	.word	0x080024d9
 80024cc:	080024df 	.word	0x080024df
 80024d0:	080024d9 	.word	0x080024d9
 80024d4:	080024f1 	.word	0x080024f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
      break;
 80024dc:	e030      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d025      	beq.n	8002536 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ee:	e022      	b.n	8002536 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024f8:	d11f      	bne.n	800253a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024fe:	e01c      	b.n	800253a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d903      	bls.n	800250e <DMA_CheckFifoParam+0xb6>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d003      	beq.n	8002514 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800250c:	e018      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
      break;
 8002512:	e015      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00e      	beq.n	800253e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
      break;
 8002524:	e00b      	b.n	800253e <DMA_CheckFifoParam+0xe6>
      break;
 8002526:	bf00      	nop
 8002528:	e00a      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 800252a:	bf00      	nop
 800252c:	e008      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 800252e:	bf00      	nop
 8002530:	e006      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
 8002534:	e004      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 8002536:	bf00      	nop
 8002538:	e002      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;   
 800253a:	bf00      	nop
 800253c:	e000      	b.n	8002540 <DMA_CheckFifoParam+0xe8>
      break;
 800253e:	bf00      	nop
    }
  } 
  
  return status; 
 8002540:	7bfb      	ldrb	r3, [r7, #15]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	@ 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e16b      	b.n	8002844 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800256c:	2201      	movs	r2, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	429a      	cmp	r2, r3
 8002586:	f040 815a 	bne.w	800283e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b01      	cmp	r3, #1
 8002594:	d005      	beq.n	80025a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d130      	bne.n	8002604 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	2203      	movs	r2, #3
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d8:	2201      	movs	r2, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 0201 	and.w	r2, r3, #1
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	2b03      	cmp	r3, #3
 800260e:	d017      	beq.n	8002640 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d123      	bne.n	8002694 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	08da      	lsrs	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3208      	adds	r2, #8
 8002654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	220f      	movs	r2, #15
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	08da      	lsrs	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3208      	adds	r2, #8
 800268e:	69b9      	ldr	r1, [r7, #24]
 8002690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 0203 	and.w	r2, r3, #3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80b4 	beq.w	800283e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b60      	ldr	r3, [pc, #384]	@ (800285c <HAL_GPIO_Init+0x30c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	4a5f      	ldr	r2, [pc, #380]	@ (800285c <HAL_GPIO_Init+0x30c>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026e6:	4b5d      	ldr	r3, [pc, #372]	@ (800285c <HAL_GPIO_Init+0x30c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <HAL_GPIO_Init+0x310>)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	220f      	movs	r2, #15
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a52      	ldr	r2, [pc, #328]	@ (8002864 <HAL_GPIO_Init+0x314>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d02b      	beq.n	8002776 <HAL_GPIO_Init+0x226>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a51      	ldr	r2, [pc, #324]	@ (8002868 <HAL_GPIO_Init+0x318>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d025      	beq.n	8002772 <HAL_GPIO_Init+0x222>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a50      	ldr	r2, [pc, #320]	@ (800286c <HAL_GPIO_Init+0x31c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d01f      	beq.n	800276e <HAL_GPIO_Init+0x21e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a4f      	ldr	r2, [pc, #316]	@ (8002870 <HAL_GPIO_Init+0x320>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d019      	beq.n	800276a <HAL_GPIO_Init+0x21a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a4e      	ldr	r2, [pc, #312]	@ (8002874 <HAL_GPIO_Init+0x324>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <HAL_GPIO_Init+0x216>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4d      	ldr	r2, [pc, #308]	@ (8002878 <HAL_GPIO_Init+0x328>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00d      	beq.n	8002762 <HAL_GPIO_Init+0x212>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4c      	ldr	r2, [pc, #304]	@ (800287c <HAL_GPIO_Init+0x32c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d007      	beq.n	800275e <HAL_GPIO_Init+0x20e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4b      	ldr	r2, [pc, #300]	@ (8002880 <HAL_GPIO_Init+0x330>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d101      	bne.n	800275a <HAL_GPIO_Init+0x20a>
 8002756:	2307      	movs	r3, #7
 8002758:	e00e      	b.n	8002778 <HAL_GPIO_Init+0x228>
 800275a:	2308      	movs	r3, #8
 800275c:	e00c      	b.n	8002778 <HAL_GPIO_Init+0x228>
 800275e:	2306      	movs	r3, #6
 8002760:	e00a      	b.n	8002778 <HAL_GPIO_Init+0x228>
 8002762:	2305      	movs	r3, #5
 8002764:	e008      	b.n	8002778 <HAL_GPIO_Init+0x228>
 8002766:	2304      	movs	r3, #4
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x228>
 800276a:	2303      	movs	r3, #3
 800276c:	e004      	b.n	8002778 <HAL_GPIO_Init+0x228>
 800276e:	2302      	movs	r3, #2
 8002770:	e002      	b.n	8002778 <HAL_GPIO_Init+0x228>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_GPIO_Init+0x228>
 8002776:	2300      	movs	r3, #0
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	f002 0203 	and.w	r2, r2, #3
 800277e:	0092      	lsls	r2, r2, #2
 8002780:	4093      	lsls	r3, r2
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002788:	4935      	ldr	r1, [pc, #212]	@ (8002860 <HAL_GPIO_Init+0x310>)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	089b      	lsrs	r3, r3, #2
 800278e:	3302      	adds	r3, #2
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002796:	4b3b      	ldr	r3, [pc, #236]	@ (8002884 <HAL_GPIO_Init+0x334>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027ba:	4a32      	ldr	r2, [pc, #200]	@ (8002884 <HAL_GPIO_Init+0x334>)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c0:	4b30      	ldr	r3, [pc, #192]	@ (8002884 <HAL_GPIO_Init+0x334>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027e4:	4a27      	ldr	r2, [pc, #156]	@ (8002884 <HAL_GPIO_Init+0x334>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ea:	4b26      	ldr	r3, [pc, #152]	@ (8002884 <HAL_GPIO_Init+0x334>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800280e:	4a1d      	ldr	r2, [pc, #116]	@ (8002884 <HAL_GPIO_Init+0x334>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002814:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_GPIO_Init+0x334>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002838:	4a12      	ldr	r2, [pc, #72]	@ (8002884 <HAL_GPIO_Init+0x334>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3301      	adds	r3, #1
 8002842:	61fb      	str	r3, [r7, #28]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	2b0f      	cmp	r3, #15
 8002848:	f67f ae90 	bls.w	800256c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3724      	adds	r7, #36	@ 0x24
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	40013800 	.word	0x40013800
 8002864:	40020000 	.word	0x40020000
 8002868:	40020400 	.word	0x40020400
 800286c:	40020800 	.word	0x40020800
 8002870:	40020c00 	.word	0x40020c00
 8002874:	40021000 	.word	0x40021000
 8002878:	40021400 	.word	0x40021400
 800287c:	40021800 	.word	0x40021800
 8002880:	40021c00 	.word	0x40021c00
 8002884:	40013c00 	.word	0x40013c00

08002888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]
 8002894:	4613      	mov	r3, r2
 8002896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002898:	787b      	ldrb	r3, [r7, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a4:	e003      	b.n	80028ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	041a      	lsls	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	619a      	str	r2, [r3, #24]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e267      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d075      	beq.n	80029c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028da:	4b88      	ldr	r3, [pc, #544]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d00c      	beq.n	8002900 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028e6:	4b85      	ldr	r3, [pc, #532]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d112      	bne.n	8002918 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f2:	4b82      	ldr	r3, [pc, #520]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028fe:	d10b      	bne.n	8002918 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002900:	4b7e      	ldr	r3, [pc, #504]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d05b      	beq.n	80029c4 <HAL_RCC_OscConfig+0x108>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d157      	bne.n	80029c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e242      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002920:	d106      	bne.n	8002930 <HAL_RCC_OscConfig+0x74>
 8002922:	4b76      	ldr	r3, [pc, #472]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a75      	ldr	r2, [pc, #468]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e01d      	b.n	800296c <HAL_RCC_OscConfig+0xb0>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002938:	d10c      	bne.n	8002954 <HAL_RCC_OscConfig+0x98>
 800293a:	4b70      	ldr	r3, [pc, #448]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a6f      	ldr	r2, [pc, #444]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b6d      	ldr	r3, [pc, #436]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6c      	ldr	r2, [pc, #432]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e00b      	b.n	800296c <HAL_RCC_OscConfig+0xb0>
 8002954:	4b69      	ldr	r3, [pc, #420]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a68      	ldr	r2, [pc, #416]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 800295a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	4b66      	ldr	r3, [pc, #408]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a65      	ldr	r2, [pc, #404]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800296a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d013      	beq.n	800299c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7ff f8a8 	bl	8001ac8 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297c:	f7ff f8a4 	bl	8001ac8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	@ 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e207      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	4b5b      	ldr	r3, [pc, #364]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0xc0>
 800299a:	e014      	b.n	80029c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7ff f894 	bl	8001ac8 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a4:	f7ff f890 	bl	8001ac8 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b64      	cmp	r3, #100	@ 0x64
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e1f3      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b6:	4b51      	ldr	r3, [pc, #324]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0xe8>
 80029c2:	e000      	b.n	80029c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d063      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029d2:	4b4a      	ldr	r3, [pc, #296]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00b      	beq.n	80029f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029de:	4b47      	ldr	r3, [pc, #284]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d11c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ea:	4b44      	ldr	r3, [pc, #272]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d116      	bne.n	8002a24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f6:	4b41      	ldr	r3, [pc, #260]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_RCC_OscConfig+0x152>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d001      	beq.n	8002a0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e1c7      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4937      	ldr	r1, [pc, #220]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a22:	e03a      	b.n	8002a9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d020      	beq.n	8002a6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a2c:	4b34      	ldr	r3, [pc, #208]	@ (8002b00 <HAL_RCC_OscConfig+0x244>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a32:	f7ff f849 	bl	8001ac8 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a3a:	f7ff f845 	bl	8001ac8 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e1a8      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a58:	4b28      	ldr	r3, [pc, #160]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4925      	ldr	r1, [pc, #148]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]
 8002a6c:	e015      	b.n	8002a9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6e:	4b24      	ldr	r3, [pc, #144]	@ (8002b00 <HAL_RCC_OscConfig+0x244>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7ff f828 	bl	8001ac8 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7c:	f7ff f824 	bl	8001ac8 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e187      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d036      	beq.n	8002b14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d016      	beq.n	8002adc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aae:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <HAL_RCC_OscConfig+0x248>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7ff f808 	bl	8001ac8 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abc:	f7ff f804 	bl	8001ac8 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e167      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ace:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <HAL_RCC_OscConfig+0x240>)
 8002ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x200>
 8002ada:	e01b      	b.n	8002b14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002adc:	4b09      	ldr	r3, [pc, #36]	@ (8002b04 <HAL_RCC_OscConfig+0x248>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae2:	f7fe fff1 	bl	8001ac8 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae8:	e00e      	b.n	8002b08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aea:	f7fe ffed 	bl	8001ac8 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d907      	bls.n	8002b08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e150      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
 8002afc:	40023800 	.word	0x40023800
 8002b00:	42470000 	.word	0x42470000
 8002b04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	4b88      	ldr	r3, [pc, #544]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ea      	bne.n	8002aea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8097 	beq.w	8002c50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b26:	4b81      	ldr	r3, [pc, #516]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10f      	bne.n	8002b52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	4b7d      	ldr	r3, [pc, #500]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	4a7c      	ldr	r2, [pc, #496]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b42:	4b7a      	ldr	r3, [pc, #488]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b52:	4b77      	ldr	r3, [pc, #476]	@ (8002d30 <HAL_RCC_OscConfig+0x474>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d118      	bne.n	8002b90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5e:	4b74      	ldr	r3, [pc, #464]	@ (8002d30 <HAL_RCC_OscConfig+0x474>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a73      	ldr	r2, [pc, #460]	@ (8002d30 <HAL_RCC_OscConfig+0x474>)
 8002b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b6a:	f7fe ffad 	bl	8001ac8 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b72:	f7fe ffa9 	bl	8001ac8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e10c      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b84:	4b6a      	ldr	r3, [pc, #424]	@ (8002d30 <HAL_RCC_OscConfig+0x474>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x2ea>
 8002b98:	4b64      	ldr	r3, [pc, #400]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9c:	4a63      	ldr	r2, [pc, #396]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba4:	e01c      	b.n	8002be0 <HAL_RCC_OscConfig+0x324>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b05      	cmp	r3, #5
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x30c>
 8002bae:	4b5f      	ldr	r3, [pc, #380]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb2:	4a5e      	ldr	r2, [pc, #376]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bb4:	f043 0304 	orr.w	r3, r3, #4
 8002bb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bba:	4b5c      	ldr	r3, [pc, #368]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbe:	4a5b      	ldr	r2, [pc, #364]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0x324>
 8002bc8:	4b58      	ldr	r3, [pc, #352]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bcc:	4a57      	ldr	r2, [pc, #348]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd4:	4b55      	ldr	r3, [pc, #340]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd8:	4a54      	ldr	r2, [pc, #336]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002bda:	f023 0304 	bic.w	r3, r3, #4
 8002bde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d015      	beq.n	8002c14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe ff6e 	bl	8001ac8 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bee:	e00a      	b.n	8002c06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf0:	f7fe ff6a 	bl	8001ac8 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e0cb      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c06:	4b49      	ldr	r3, [pc, #292]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0ee      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x334>
 8002c12:	e014      	b.n	8002c3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c14:	f7fe ff58 	bl	8001ac8 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fe ff54 	bl	8001ac8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e0b5      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c32:	4b3e      	ldr	r3, [pc, #248]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1ee      	bne.n	8002c1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d105      	bne.n	8002c50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c44:	4b39      	ldr	r3, [pc, #228]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	4a38      	ldr	r2, [pc, #224]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80a1 	beq.w	8002d9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c5a:	4b34      	ldr	r3, [pc, #208]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d05c      	beq.n	8002d20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d141      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6e:	4b31      	ldr	r3, [pc, #196]	@ (8002d34 <HAL_RCC_OscConfig+0x478>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe ff28 	bl	8001ac8 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fe ff24 	bl	8001ac8 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e087      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8e:	4b27      	ldr	r3, [pc, #156]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbc:	061b      	lsls	r3, r3, #24
 8002cbe:	491b      	ldr	r1, [pc, #108]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d34 <HAL_RCC_OscConfig+0x478>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7fe fefd 	bl	8001ac8 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd2:	f7fe fef9 	bl	8001ac8 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e05c      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ce4:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x416>
 8002cf0:	e054      	b.n	8002d9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf2:	4b10      	ldr	r3, [pc, #64]	@ (8002d34 <HAL_RCC_OscConfig+0x478>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fee6 	bl	8001ac8 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d00:	f7fe fee2 	bl	8001ac8 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e045      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <HAL_RCC_OscConfig+0x470>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x444>
 8002d1e:	e03d      	b.n	8002d9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e038      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40007000 	.word	0x40007000
 8002d34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <HAL_RCC_OscConfig+0x4ec>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d028      	beq.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d121      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d11a      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d68:	4013      	ands	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d111      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	3b01      	subs	r3, #1
 8002d82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d107      	bne.n	8002d98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800

08002dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0cc      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc0:	4b68      	ldr	r3, [pc, #416]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d90c      	bls.n	8002de8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dce:	4b65      	ldr	r3, [pc, #404]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd6:	4b63      	ldr	r3, [pc, #396]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0b8      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d020      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e00:	4b59      	ldr	r3, [pc, #356]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	4a58      	ldr	r2, [pc, #352]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e18:	4b53      	ldr	r3, [pc, #332]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e24:	4b50      	ldr	r3, [pc, #320]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	494d      	ldr	r1, [pc, #308]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d044      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d107      	bne.n	8002e5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4a:	4b47      	ldr	r3, [pc, #284]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d119      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e07f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e06f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e067      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8a:	4b37      	ldr	r3, [pc, #220]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f023 0203 	bic.w	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4934      	ldr	r1, [pc, #208]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e9c:	f7fe fe14 	bl	8001ac8 <HAL_GetTick>
 8002ea0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea4:	f7fe fe10 	bl	8001ac8 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e04f      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	4b2b      	ldr	r3, [pc, #172]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 020c 	and.w	r2, r3, #12
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d1eb      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b25      	ldr	r3, [pc, #148]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d20c      	bcs.n	8002ef4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b22      	ldr	r3, [pc, #136]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b20      	ldr	r3, [pc, #128]	@ (8002f64 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e032      	b.n	8002f5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f00:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4916      	ldr	r1, [pc, #88]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d009      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f1e:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	490e      	ldr	r1, [pc, #56]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f32:	f000 f821 	bl	8002f78 <HAL_RCC_GetSysClockFreq>
 8002f36:	4602      	mov	r2, r0
 8002f38:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	490a      	ldr	r1, [pc, #40]	@ (8002f6c <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	5ccb      	ldrb	r3, [r1, r3]
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	4a09      	ldr	r2, [pc, #36]	@ (8002f70 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f4e:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <HAL_RCC_ClockConfig+0x1c8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fe fd74 	bl	8001a40 <HAL_InitTick>

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023c00 	.word	0x40023c00
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	08006570 	.word	0x08006570
 8002f70:	20000008 	.word	0x20000008
 8002f74:	2000000c 	.word	0x2000000c

08002f78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f7c:	b094      	sub	sp, #80	@ 0x50
 8002f7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f90:	4b79      	ldr	r3, [pc, #484]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 030c 	and.w	r3, r3, #12
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d00d      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	f200 80e1 	bhi.w	8003164 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x34>
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002faa:	e0db      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fac:	4b73      	ldr	r3, [pc, #460]	@ (800317c <HAL_RCC_GetSysClockFreq+0x204>)
 8002fae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fb0:	e0db      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fb2:	4b73      	ldr	r3, [pc, #460]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002fb6:	e0d8      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fb8:	4b6f      	ldr	r3, [pc, #444]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fc0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d063      	beq.n	8003096 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fce:	4b6a      	ldr	r3, [pc, #424]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	099b      	lsrs	r3, r3, #6
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fe6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002fea:	4622      	mov	r2, r4
 8002fec:	462b      	mov	r3, r5
 8002fee:	f04f 0000 	mov.w	r0, #0
 8002ff2:	f04f 0100 	mov.w	r1, #0
 8002ff6:	0159      	lsls	r1, r3, #5
 8002ff8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ffc:	0150      	lsls	r0, r2, #5
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4621      	mov	r1, r4
 8003004:	1a51      	subs	r1, r2, r1
 8003006:	6139      	str	r1, [r7, #16]
 8003008:	4629      	mov	r1, r5
 800300a:	eb63 0301 	sbc.w	r3, r3, r1
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800301c:	4659      	mov	r1, fp
 800301e:	018b      	lsls	r3, r1, #6
 8003020:	4651      	mov	r1, sl
 8003022:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003026:	4651      	mov	r1, sl
 8003028:	018a      	lsls	r2, r1, #6
 800302a:	4651      	mov	r1, sl
 800302c:	ebb2 0801 	subs.w	r8, r2, r1
 8003030:	4659      	mov	r1, fp
 8003032:	eb63 0901 	sbc.w	r9, r3, r1
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800304a:	4690      	mov	r8, r2
 800304c:	4699      	mov	r9, r3
 800304e:	4623      	mov	r3, r4
 8003050:	eb18 0303 	adds.w	r3, r8, r3
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	462b      	mov	r3, r5
 8003058:	eb49 0303 	adc.w	r3, r9, r3
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800306a:	4629      	mov	r1, r5
 800306c:	024b      	lsls	r3, r1, #9
 800306e:	4621      	mov	r1, r4
 8003070:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003074:	4621      	mov	r1, r4
 8003076:	024a      	lsls	r2, r1, #9
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800307e:	2200      	movs	r2, #0
 8003080:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003082:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003084:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003088:	f7fd f89e 	bl	80001c8 <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003094:	e058      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003096:	4b38      	ldr	r3, [pc, #224]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	099b      	lsrs	r3, r3, #6
 800309c:	2200      	movs	r2, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	4611      	mov	r1, r2
 80030a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030a6:	623b      	str	r3, [r7, #32]
 80030a8:	2300      	movs	r3, #0
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030b0:	4642      	mov	r2, r8
 80030b2:	464b      	mov	r3, r9
 80030b4:	f04f 0000 	mov.w	r0, #0
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	0159      	lsls	r1, r3, #5
 80030be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c2:	0150      	lsls	r0, r2, #5
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4641      	mov	r1, r8
 80030ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80030ce:	4649      	mov	r1, r9
 80030d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030e8:	ebb2 040a 	subs.w	r4, r2, sl
 80030ec:	eb63 050b 	sbc.w	r5, r3, fp
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	00eb      	lsls	r3, r5, #3
 80030fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fe:	00e2      	lsls	r2, r4, #3
 8003100:	4614      	mov	r4, r2
 8003102:	461d      	mov	r5, r3
 8003104:	4643      	mov	r3, r8
 8003106:	18e3      	adds	r3, r4, r3
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	464b      	mov	r3, r9
 800310c:	eb45 0303 	adc.w	r3, r5, r3
 8003110:	607b      	str	r3, [r7, #4]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800311e:	4629      	mov	r1, r5
 8003120:	028b      	lsls	r3, r1, #10
 8003122:	4621      	mov	r1, r4
 8003124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003128:	4621      	mov	r1, r4
 800312a:	028a      	lsls	r2, r1, #10
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003132:	2200      	movs	r2, #0
 8003134:	61bb      	str	r3, [r7, #24]
 8003136:	61fa      	str	r2, [r7, #28]
 8003138:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800313c:	f7fd f844 	bl	80001c8 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4613      	mov	r3, r2
 8003146:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003148:	4b0b      	ldr	r3, [pc, #44]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x200>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	3301      	adds	r3, #1
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003158:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800315a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003162:	e002      	b.n	800316a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003164:	4b05      	ldr	r3, [pc, #20]	@ (800317c <HAL_RCC_GetSysClockFreq+0x204>)
 8003166:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800316c:	4618      	mov	r0, r3
 800316e:	3750      	adds	r7, #80	@ 0x50
 8003170:	46bd      	mov	sp, r7
 8003172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	00f42400 	.word	0x00f42400
 8003180:	007a1200 	.word	0x007a1200

08003184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003188:	4b03      	ldr	r3, [pc, #12]	@ (8003198 <HAL_RCC_GetHCLKFreq+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000008 	.word	0x20000008

0800319c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031a0:	f7ff fff0 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	0a9b      	lsrs	r3, r3, #10
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4903      	ldr	r1, [pc, #12]	@ (80031c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40023800 	.word	0x40023800
 80031c0:	08006580 	.word	0x08006580

080031c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031c8:	f7ff ffdc 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b05      	ldr	r3, [pc, #20]	@ (80031e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	0b5b      	lsrs	r3, r3, #13
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	4903      	ldr	r1, [pc, #12]	@ (80031e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	08006580 	.word	0x08006580

080031ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e07b      	b.n	80032f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	2b00      	cmp	r3, #0
 8003204:	d108      	bne.n	8003218 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800320e:	d009      	beq.n	8003224 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	61da      	str	r2, [r3, #28]
 8003216:	e005      	b.n	8003224 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fe fa20 	bl	8001684 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800325a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a8:	ea42 0103 	orr.w	r1, r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	0c1b      	lsrs	r3, r3, #16
 80032c2:	f003 0104 	and.w	r1, r3, #4
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	f003 0210 	and.w	r2, r3, #16
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b088      	sub	sp, #32
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	603b      	str	r3, [r7, #0]
 800330a:	4613      	mov	r3, r2
 800330c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800330e:	f7fe fbdb 	bl	8001ac8 <HAL_GetTick>
 8003312:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d001      	beq.n	8003328 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
 8003326:	e12a      	b.n	800357e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_SPI_Transmit+0x36>
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e122      	b.n	800357e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_SPI_Transmit+0x48>
 8003342:	2302      	movs	r3, #2
 8003344:	e11b      	b.n	800357e <HAL_SPI_Transmit+0x280>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2203      	movs	r2, #3
 8003352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	88fa      	ldrh	r2, [r7, #6]
 8003366:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	88fa      	ldrh	r2, [r7, #6]
 800336c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003394:	d10f      	bne.n	80033b6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c0:	2b40      	cmp	r3, #64	@ 0x40
 80033c2:	d007      	beq.n	80033d4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033dc:	d152      	bne.n	8003484 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_SPI_Transmit+0xee>
 80033e6:	8b7b      	ldrh	r3, [r7, #26]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d145      	bne.n	8003478 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f0:	881a      	ldrh	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fc:	1c9a      	adds	r2, r3, #2
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003410:	e032      	b.n	8003478 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	d112      	bne.n	8003446 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003424:	881a      	ldrh	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	1c9a      	adds	r2, r3, #2
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003444:	e018      	b.n	8003478 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003446:	f7fe fb3f 	bl	8001ac8 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d803      	bhi.n	800345e <HAL_SPI_Transmit+0x160>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d102      	bne.n	8003464 <HAL_SPI_Transmit+0x166>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e082      	b.n	800357e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1c7      	bne.n	8003412 <HAL_SPI_Transmit+0x114>
 8003482:	e053      	b.n	800352c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_SPI_Transmit+0x194>
 800348c:	8b7b      	ldrh	r3, [r7, #26]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d147      	bne.n	8003522 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	7812      	ldrb	r2, [r2, #0]
 800349e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034b8:	e033      	b.n	8003522 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d113      	bne.n	80034f0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	330c      	adds	r3, #12
 80034d2:	7812      	ldrb	r2, [r2, #0]
 80034d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	86da      	strh	r2, [r3, #54]	@ 0x36
 80034ee:	e018      	b.n	8003522 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034f0:	f7fe faea 	bl	8001ac8 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d803      	bhi.n	8003508 <HAL_SPI_Transmit+0x20a>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d102      	bne.n	800350e <HAL_SPI_Transmit+0x210>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e02d      	b.n	800357e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1c6      	bne.n	80034ba <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	6839      	ldr	r1, [r7, #0]
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 ffb7 	bl	80044a4 <SPI_EndRxTxTransaction>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d002      	beq.n	8003542 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10a      	bne.n	8003560 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800357c:	2300      	movs	r3, #0
  }
}
 800357e:	4618      	mov	r0, r3
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b088      	sub	sp, #32
 800358a:	af02      	add	r7, sp, #8
 800358c:	60f8      	str	r0, [r7, #12]
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d001      	beq.n	80035a6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
 80035a4:	e104      	b.n	80037b0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ae:	d112      	bne.n	80035d6 <HAL_SPI_Receive+0x50>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10e      	bne.n	80035d6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2204      	movs	r2, #4
 80035bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80035c0:	88fa      	ldrh	r2, [r7, #6]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	4613      	mov	r3, r2
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f000 f8f3 	bl	80037b8 <HAL_SPI_TransmitReceive>
 80035d2:	4603      	mov	r3, r0
 80035d4:	e0ec      	b.n	80037b0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035d6:	f7fe fa77 	bl	8001ac8 <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_SPI_Receive+0x62>
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0e1      	b.n	80037b0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_SPI_Receive+0x74>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e0da      	b.n	80037b0 <HAL_SPI_Receive+0x22a>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2204      	movs	r2, #4
 8003606:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	88fa      	ldrh	r2, [r7, #6]
 800361a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	88fa      	ldrh	r2, [r7, #6]
 8003620:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003648:	d10f      	bne.n	800366a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003658:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003668:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003674:	2b40      	cmp	r3, #64	@ 0x40
 8003676:	d007      	beq.n	8003688 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003686:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d170      	bne.n	8003772 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003690:	e035      	b.n	80036fe <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	d115      	bne.n	80036cc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f103 020c 	add.w	r2, r3, #12
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ac:	7812      	ldrb	r2, [r2, #0]
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036ca:	e018      	b.n	80036fe <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036cc:	f7fe f9fc 	bl	8001ac8 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d803      	bhi.n	80036e4 <HAL_SPI_Receive+0x15e>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e2:	d102      	bne.n	80036ea <HAL_SPI_Receive+0x164>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d109      	bne.n	80036fe <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e058      	b.n	80037b0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1c4      	bne.n	8003692 <HAL_SPI_Receive+0x10c>
 8003708:	e038      	b.n	800377c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b01      	cmp	r3, #1
 8003716:	d113      	bne.n	8003740 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003722:	b292      	uxth	r2, r2
 8003724:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372a:	1c9a      	adds	r2, r3, #2
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800373e:	e018      	b.n	8003772 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003740:	f7fe f9c2 	bl	8001ac8 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d803      	bhi.n	8003758 <HAL_SPI_Receive+0x1d2>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003756:	d102      	bne.n	800375e <HAL_SPI_Receive+0x1d8>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e01e      	b.n	80037b0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1c6      	bne.n	800370a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	6839      	ldr	r1, [r7, #0]
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 fe29 	bl	80043d8 <SPI_EndRxTransaction>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2220      	movs	r2, #32
 8003790:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80037ae:	2300      	movs	r3, #0
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	@ 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037c6:	2301      	movs	r3, #1
 80037c8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037ca:	f7fe f97d 	bl	8001ac8 <HAL_GetTick>
 80037ce:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037d6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80037de:	887b      	ldrh	r3, [r7, #2]
 80037e0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037e2:	7ffb      	ldrb	r3, [r7, #31]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d00c      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x4a>
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037ee:	d106      	bne.n	80037fe <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <HAL_SPI_TransmitReceive+0x46>
 80037f8:	7ffb      	ldrb	r3, [r7, #31]
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d001      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
 8003800:	e17f      	b.n	8003b02 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_SPI_TransmitReceive+0x5c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <HAL_SPI_TransmitReceive+0x5c>
 800380e:	887b      	ldrh	r3, [r7, #2]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e174      	b.n	8003b02 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x6e>
 8003822:	2302      	movs	r3, #2
 8003824:	e16d      	b.n	8003b02 <HAL_SPI_TransmitReceive+0x34a>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b04      	cmp	r3, #4
 8003838:	d003      	beq.n	8003842 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2205      	movs	r2, #5
 800383e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	887a      	ldrh	r2, [r7, #2]
 8003852:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	887a      	ldrh	r2, [r7, #2]
 8003858:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	887a      	ldrh	r2, [r7, #2]
 8003864:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	887a      	ldrh	r2, [r7, #2]
 800386a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003882:	2b40      	cmp	r3, #64	@ 0x40
 8003884:	d007      	beq.n	8003896 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003894:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800389e:	d17e      	bne.n	800399e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <HAL_SPI_TransmitReceive+0xf6>
 80038a8:	8afb      	ldrh	r3, [r7, #22]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d16c      	bne.n	8003988 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b2:	881a      	ldrh	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	1c9a      	adds	r2, r3, #2
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038d2:	e059      	b.n	8003988 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d11b      	bne.n	800391a <HAL_SPI_TransmitReceive+0x162>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d016      	beq.n	800391a <HAL_SPI_TransmitReceive+0x162>
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d113      	bne.n	800391a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f6:	881a      	ldrh	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003902:	1c9a      	adds	r2, r3, #2
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d119      	bne.n	800395c <HAL_SPI_TransmitReceive+0x1a4>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d014      	beq.n	800395c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393c:	b292      	uxth	r2, r2
 800393e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003944:	1c9a      	adds	r2, r3, #2
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003958:	2301      	movs	r3, #1
 800395a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800395c:	f7fe f8b4 	bl	8001ac8 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003968:	429a      	cmp	r2, r3
 800396a:	d80d      	bhi.n	8003988 <HAL_SPI_TransmitReceive+0x1d0>
 800396c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d009      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e0bc      	b.n	8003b02 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800398c:	b29b      	uxth	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1a0      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x11c>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d19b      	bne.n	80038d4 <HAL_SPI_TransmitReceive+0x11c>
 800399c:	e082      	b.n	8003aa4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_SPI_TransmitReceive+0x1f4>
 80039a6:	8afb      	ldrh	r3, [r7, #22]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d171      	bne.n	8003a90 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	330c      	adds	r3, #12
 80039b6:	7812      	ldrb	r2, [r2, #0]
 80039b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039d2:	e05d      	b.n	8003a90 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d11c      	bne.n	8003a1c <HAL_SPI_TransmitReceive+0x264>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d017      	beq.n	8003a1c <HAL_SPI_TransmitReceive+0x264>
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d114      	bne.n	8003a1c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	7812      	ldrb	r2, [r2, #0]
 80039fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d119      	bne.n	8003a5e <HAL_SPI_TransmitReceive+0x2a6>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d014      	beq.n	8003a5e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a5e:	f7fe f833 	bl	8001ac8 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d803      	bhi.n	8003a76 <HAL_SPI_TransmitReceive+0x2be>
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d102      	bne.n	8003a7c <HAL_SPI_TransmitReceive+0x2c4>
 8003a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e038      	b.n	8003b02 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d19c      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x21c>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d197      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fcfb 	bl	80044a4 <SPI_EndRxTxTransaction>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e01d      	b.n	8003b02 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ace:	2300      	movs	r3, #0
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003b00:	2300      	movs	r3, #0
  }
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3728      	adds	r7, #40	@ 0x28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	4613      	mov	r3, r2
 8003b18:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8003b26:	2302      	movs	r3, #2
 8003b28:	e097      	b.n	8003c5a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_SPI_Transmit_DMA+0x2a>
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e08f      	b.n	8003c5a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_SPI_Transmit_DMA+0x3c>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e088      	b.n	8003c5a <HAL_SPI_Transmit_DMA+0x14e>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2203      	movs	r2, #3
 8003b54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	88fa      	ldrh	r2, [r7, #6]
 8003b6e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b96:	d10f      	bne.n	8003bb8 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ba6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bb6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bbc:	4a29      	ldr	r2, [pc, #164]	@ (8003c64 <HAL_SPI_Transmit_DMA+0x158>)
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc4:	4a28      	ldr	r2, [pc, #160]	@ (8003c68 <HAL_SPI_Transmit_DMA+0x15c>)
 8003bc6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bcc:	4a27      	ldr	r2, [pc, #156]	@ (8003c6c <HAL_SPI_Transmit_DMA+0x160>)
 8003bce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	4619      	mov	r1, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003bf0:	f7fe f95a 	bl	8001ea8 <HAL_DMA_Start_IT>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfe:	f043 0210 	orr.w	r2, r3, #16
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e023      	b.n	8003c5a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1c:	2b40      	cmp	r3, #64	@ 0x40
 8003c1e:	d007      	beq.n	8003c30 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c2e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0220 	orr.w	r2, r2, #32
 8003c46:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0202 	orr.w	r2, r2, #2
 8003c56:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	08004235 	.word	0x08004235
 8003c68:	08004055 	.word	0x08004055
 8003c6c:	08004289 	.word	0x08004289

08003c70 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d001      	beq.n	8003c8e <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e0a9      	b.n	8003de2 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d110      	bne.n	8003cb8 <HAL_SPI_Receive_DMA+0x48>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c9e:	d10b      	bne.n	8003cb8 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003ca8:	88fb      	ldrh	r3, [r7, #6]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f8a2 	bl	8003df8 <HAL_SPI_TransmitReceive_DMA>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	e094      	b.n	8003de2 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_SPI_Receive_DMA+0x54>
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e08c      	b.n	8003de2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_SPI_Receive_DMA+0x66>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e085      	b.n	8003de2 <HAL_SPI_Receive_DMA+0x172>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	88fa      	ldrh	r2, [r7, #6]
 8003cf6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	88fa      	ldrh	r2, [r7, #6]
 8003cfc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d1e:	d10f      	bne.n	8003d40 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d44:	4a29      	ldr	r2, [pc, #164]	@ (8003dec <HAL_SPI_Receive_DMA+0x17c>)
 8003d46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4c:	4a28      	ldr	r2, [pc, #160]	@ (8003df0 <HAL_SPI_Receive_DMA+0x180>)
 8003d4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d54:	4a27      	ldr	r2, [pc, #156]	@ (8003df4 <HAL_SPI_Receive_DMA+0x184>)
 8003d56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d70:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d76:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003d78:	f7fe f896 	bl	8001ea8 <HAL_DMA_Start_IT>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d86:	f043 0210 	orr.w	r2, r3, #16
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e023      	b.n	8003de2 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da4:	2b40      	cmp	r3, #64	@ 0x40
 8003da6:	d007      	beq.n	8003db8 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003db6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0220 	orr.w	r2, r2, #32
 8003dce:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	08004251 	.word	0x08004251
 8003df0:	080040fd 	.word	0x080040fd
 8003df4:	08004289 	.word	0x08004289

08003df8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e0c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d00c      	beq.n	8003e34 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e20:	d106      	bne.n	8003e30 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <HAL_SPI_TransmitReceive_DMA+0x38>
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d001      	beq.n	8003e34 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 8003e30:	2302      	movs	r3, #2
 8003e32:	e0cf      	b.n	8003fd4 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8003e40:	887b      	ldrh	r3, [r7, #2]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0c4      	b.n	8003fd4 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_SPI_TransmitReceive_DMA+0x60>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e0bd      	b.n	8003fd4 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d003      	beq.n	8003e74 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2205      	movs	r2, #5
 8003e70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	887a      	ldrh	r2, [r7, #2]
 8003e84:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	887a      	ldrh	r2, [r7, #2]
 8003e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	887a      	ldrh	r2, [r7, #2]
 8003e96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d108      	bne.n	8003ec8 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eba:	4a48      	ldr	r2, [pc, #288]	@ (8003fdc <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8003ebc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec2:	4a47      	ldr	r2, [pc, #284]	@ (8003fe0 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8003ec4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ec6:	e007      	b.n	8003ed8 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ecc:	4a45      	ldr	r2, [pc, #276]	@ (8003fe4 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8003ece:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed4:	4a44      	ldr	r2, [pc, #272]	@ (8003fe8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003ed6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003edc:	4a43      	ldr	r2, [pc, #268]	@ (8003fec <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003ede:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003efe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003f00:	f7fd ffd2 	bl	8001ea8 <HAL_DMA_Start_IT>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0e:	f043 0210 	orr.w	r2, r3, #16
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e058      	b.n	8003fd4 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f36:	2200      	movs	r2, #0
 8003f38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f3e:	2200      	movs	r2, #0
 8003f40:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f46:	2200      	movs	r2, #0
 8003f48:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f4e:	2200      	movs	r2, #0
 8003f50:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f68:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003f6a:	f7fd ff9d 	bl	8001ea8 <HAL_DMA_Start_IT>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00b      	beq.n	8003f8c <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f78:	f043 0210 	orr.w	r2, r3, #16
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e023      	b.n	8003fd4 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f96:	2b40      	cmp	r3, #64	@ 0x40
 8003f98:	d007      	beq.n	8003faa <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fa8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0220 	orr.w	r2, r2, #32
 8003fc0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0202 	orr.w	r2, r2, #2
 8003fd0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	08004251 	.word	0x08004251
 8003fe0:	080040fd 	.word	0x080040fd
 8003fe4:	0800426d 	.word	0x0800426d
 8003fe8:	080041a5 	.word	0x080041a5
 8003fec:	08004289 	.word	0x08004289

08003ff0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004060:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004062:	f7fd fd31 	bl	8001ac8 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004076:	d03b      	beq.n	80040f0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0220 	bic.w	r2, r2, #32
 8004086:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0202 	bic.w	r2, r2, #2
 8004096:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	2164      	movs	r1, #100	@ 0x64
 800409c:	6978      	ldr	r0, [r7, #20]
 800409e:	f000 fa01 	bl	80044a4 <SPI_EndRxTxTransaction>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ac:	f043 0220 	orr.w	r2, r3, #32
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2200      	movs	r2, #0
 80040d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80040e8:	6978      	ldr	r0, [r7, #20]
 80040ea:	f7ff ffa9 	bl	8004040 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80040ee:	e002      	b.n	80040f6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80040f0:	6978      	ldr	r0, [r7, #20]
 80040f2:	f7fd f819 	bl	8001128 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004108:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800410a:	f7fd fcdd 	bl	8001ac8 <HAL_GetTick>
 800410e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800411e:	d03b      	beq.n	8004198 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0220 	bic.w	r2, r2, #32
 800412e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10d      	bne.n	8004154 <SPI_DMAReceiveCplt+0x58>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004140:	d108      	bne.n	8004154 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0203 	bic.w	r2, r2, #3
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	e007      	b.n	8004164 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	2164      	movs	r1, #100	@ 0x64
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f935 	bl	80043d8 <SPI_EndRxTransaction>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7ff ff55 	bl	8004040 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004196:	e002      	b.n	800419e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7fc ffd5 	bl	8001148 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041b2:	f7fd fc89 	bl	8001ac8 <HAL_GetTick>
 80041b6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041c6:	d02f      	beq.n	8004228 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0220 	bic.w	r2, r2, #32
 80041d6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	2164      	movs	r1, #100	@ 0x64
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f961 	bl	80044a4 <SPI_EndRxTxTransaction>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d005      	beq.n	80041f4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0203 	bic.w	r2, r2, #3
 8004202:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff ff0d 	bl	8004040 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004226:	e002      	b.n	800422e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff fee1 	bl	8003ff0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004240:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f7ff fede 	bl	8004004 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff feda 	bl	8004018 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004278:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff fed6 	bl	800402c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004294:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0203 	bic.w	r2, r2, #3
 80042a4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042aa:	f043 0210 	orr.w	r2, r3, #16
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff fec0 	bl	8004040 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042d8:	f7fd fbf6 	bl	8001ac8 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	4413      	add	r3, r2
 80042e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042e8:	f7fd fbee 	bl	8001ac8 <HAL_GetTick>
 80042ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042ee:	4b39      	ldr	r3, [pc, #228]	@ (80043d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	015b      	lsls	r3, r3, #5
 80042f4:	0d1b      	lsrs	r3, r3, #20
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	fb02 f303 	mul.w	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042fe:	e054      	b.n	80043aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d050      	beq.n	80043aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004308:	f7fd fbde 	bl	8001ac8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	429a      	cmp	r2, r3
 8004316:	d902      	bls.n	800431e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d13d      	bne.n	800439a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800432c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004336:	d111      	bne.n	800435c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004340:	d004      	beq.n	800434c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800434a:	d107      	bne.n	800435c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800435a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004364:	d10f      	bne.n	8004386 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004384:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e017      	b.n	80043ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4013      	ands	r3, r2
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	bf0c      	ite	eq
 80043ba:	2301      	moveq	r3, #1
 80043bc:	2300      	movne	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d19b      	bne.n	8004300 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000008 	.word	0x20000008

080043d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043ec:	d111      	bne.n	8004412 <SPI_EndRxTransaction+0x3a>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043f6:	d004      	beq.n	8004402 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004400:	d107      	bne.n	8004412 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004410:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800441a:	d12a      	bne.n	8004472 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004424:	d012      	beq.n	800444c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2200      	movs	r2, #0
 800442e:	2180      	movs	r1, #128	@ 0x80
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff ff49 	bl	80042c8 <SPI_WaitFlagStateUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d02d      	beq.n	8004498 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004440:	f043 0220 	orr.w	r2, r3, #32
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e026      	b.n	800449a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2200      	movs	r2, #0
 8004454:	2101      	movs	r1, #1
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f7ff ff36 	bl	80042c8 <SPI_WaitFlagStateUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d01a      	beq.n	8004498 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e013      	b.n	800449a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2200      	movs	r2, #0
 800447a:	2101      	movs	r1, #1
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f7ff ff23 	bl	80042c8 <SPI_WaitFlagStateUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d007      	beq.n	8004498 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e000      	b.n	800449a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2201      	movs	r2, #1
 80044b8:	2102      	movs	r1, #2
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f7ff ff04 	bl	80042c8 <SPI_WaitFlagStateUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ca:	f043 0220 	orr.w	r2, r3, #32
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e032      	b.n	800453c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004544 <SPI_EndRxTxTransaction+0xa0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1b      	ldr	r2, [pc, #108]	@ (8004548 <SPI_EndRxTxTransaction+0xa4>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	0d5b      	lsrs	r3, r3, #21
 80044e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044f4:	d112      	bne.n	800451c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2200      	movs	r2, #0
 80044fe:	2180      	movs	r1, #128	@ 0x80
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff fee1 	bl	80042c8 <SPI_WaitFlagStateUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d016      	beq.n	800453a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e00f      	b.n	800453c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	3b01      	subs	r3, #1
 8004526:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004532:	2b80      	cmp	r3, #128	@ 0x80
 8004534:	d0f2      	beq.n	800451c <SPI_EndRxTxTransaction+0x78>
 8004536:	e000      	b.n	800453a <SPI_EndRxTxTransaction+0x96>
        break;
 8004538:	bf00      	nop
  }

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	20000008 	.word	0x20000008
 8004548:	165e9f81 	.word	0x165e9f81

0800454c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e042      	b.n	80045e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fd f932 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2224      	movs	r2, #36	@ 0x24
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800458e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fd69 	bl	8005068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695a      	ldr	r2, [r3, #20]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	@ 0x28
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b20      	cmp	r3, #32
 800460a:	d175      	bne.n	80046f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_UART_Transmit+0x2c>
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e06e      	b.n	80046fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2221      	movs	r2, #33	@ 0x21
 8004626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800462a:	f7fd fa4d 	bl	8001ac8 <HAL_GetTick>
 800462e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	88fa      	ldrh	r2, [r7, #6]
 800463a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004644:	d108      	bne.n	8004658 <HAL_UART_Transmit+0x6c>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d104      	bne.n	8004658 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	61bb      	str	r3, [r7, #24]
 8004656:	e003      	b.n	8004660 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800465c:	2300      	movs	r3, #0
 800465e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004660:	e02e      	b.n	80046c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2200      	movs	r2, #0
 800466a:	2180      	movs	r1, #128	@ 0x80
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 fb05 	bl	8004c7c <UART_WaitOnFlagUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e03a      	b.n	80046fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10b      	bne.n	80046a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	3302      	adds	r3, #2
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	e007      	b.n	80046b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	781a      	ldrb	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	3301      	adds	r3, #1
 80046b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1cb      	bne.n	8004662 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2200      	movs	r2, #0
 80046d2:	2140      	movs	r1, #64	@ 0x40
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 fad1 	bl	8004c7c <UART_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e006      	b.n	80046fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e000      	b.n	80046fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
  }
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b0ba      	sub	sp, #232	@ 0xe8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800472a:	2300      	movs	r3, #0
 800472c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004730:	2300      	movs	r3, #0
 8004732:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10f      	bne.n	800476a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800474a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_UART_IRQHandler+0x66>
 8004756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fbc2 	bl	8004eec <UART_Receive_IT>
      return;
 8004768:	e25b      	b.n	8004c22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800476a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80de 	beq.w	8004930 <HAL_UART_IRQHandler+0x22c>
 8004774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d106      	bne.n	800478e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004784:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80d1 	beq.w	8004930 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800478e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00b      	beq.n	80047b2 <HAL_UART_IRQHandler+0xae>
 800479a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800479e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d005      	beq.n	80047b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047aa:	f043 0201 	orr.w	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <HAL_UART_IRQHandler+0xd2>
 80047be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ce:	f043 0202 	orr.w	r2, r3, #2
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_UART_IRQHandler+0xf6>
 80047e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f2:	f043 0204 	orr.w	r2, r3, #4
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d011      	beq.n	800482a <HAL_UART_IRQHandler+0x126>
 8004806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d105      	bne.n	800481e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d005      	beq.n	800482a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004822:	f043 0208 	orr.w	r2, r3, #8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 81f2 	beq.w	8004c18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_UART_IRQHandler+0x14e>
 8004840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fb4d 	bl	8004eec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485c:	2b40      	cmp	r3, #64	@ 0x40
 800485e:	bf0c      	ite	eq
 8004860:	2301      	moveq	r3, #1
 8004862:	2300      	movne	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <HAL_UART_IRQHandler+0x17a>
 8004876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800487a:	2b00      	cmp	r3, #0
 800487c:	d04f      	beq.n	800491e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa55 	bl	8004d2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488e:	2b40      	cmp	r3, #64	@ 0x40
 8004890:	d141      	bne.n	8004916 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3314      	adds	r3, #20
 8004898:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80048a0:	e853 3f00 	ldrex	r3, [r3]
 80048a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80048a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3314      	adds	r3, #20
 80048ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80048be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80048c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80048ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80048d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1d9      	bne.n	8004892 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d013      	beq.n	800490e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ea:	4a7e      	ldr	r2, [pc, #504]	@ (8004ae4 <HAL_UART_IRQHandler+0x3e0>)
 80048ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fd fba0 	bl	8002038 <HAL_DMA_Abort_IT>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d016      	beq.n	800492c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004908:	4610      	mov	r0, r2
 800490a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490c:	e00e      	b.n	800492c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f99e 	bl	8004c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004914:	e00a      	b.n	800492c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f99a 	bl	8004c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491c:	e006      	b.n	800492c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f996 	bl	8004c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800492a:	e175      	b.n	8004c18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492c:	bf00      	nop
    return;
 800492e:	e173      	b.n	8004c18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004934:	2b01      	cmp	r3, #1
 8004936:	f040 814f 	bne.w	8004bd8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8148 	beq.w	8004bd8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8141 	beq.w	8004bd8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004976:	2b40      	cmp	r3, #64	@ 0x40
 8004978:	f040 80b6 	bne.w	8004ae8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004988:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8145 	beq.w	8004c1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800499a:	429a      	cmp	r2, r3
 800499c:	f080 813e 	bcs.w	8004c1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049b2:	f000 8088 	beq.w	8004ac6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	330c      	adds	r3, #12
 80049bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80049cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	330c      	adds	r3, #12
 80049de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80049e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049f2:	e841 2300 	strex	r3, r2, [r1]
 80049f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1d9      	bne.n	80049b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3314      	adds	r3, #20
 8004a08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3314      	adds	r3, #20
 8004a22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e1      	bne.n	8004a02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3314      	adds	r3, #20
 8004a44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3314      	adds	r3, #20
 8004a5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e3      	bne.n	8004a3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	330c      	adds	r3, #12
 8004a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a96:	f023 0310 	bic.w	r3, r3, #16
 8004a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004aa8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004aaa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004aae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e3      	bne.n	8004a84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fd fa49 	bl	8001f58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	4619      	mov	r1, r3
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f8c1 	bl	8004c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ae2:	e09b      	b.n	8004c1c <HAL_UART_IRQHandler+0x518>
 8004ae4:	08004df5 	.word	0x08004df5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 808e 	beq.w	8004c20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8089 	beq.w	8004c20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	330c      	adds	r3, #12
 8004b14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b18:	e853 3f00 	ldrex	r3, [r3]
 8004b1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004b32:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b3a:	e841 2300 	strex	r3, r2, [r1]
 8004b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e3      	bne.n	8004b0e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3314      	adds	r3, #20
 8004b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	e853 3f00 	ldrex	r3, [r3]
 8004b54:	623b      	str	r3, [r7, #32]
   return(result);
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	f023 0301 	bic.w	r3, r3, #1
 8004b5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3314      	adds	r3, #20
 8004b66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e3      	bne.n	8004b46 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0310 	bic.w	r3, r3, #16
 8004ba2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	330c      	adds	r3, #12
 8004bac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004bb0:	61fa      	str	r2, [r7, #28]
 8004bb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	69b9      	ldr	r1, [r7, #24]
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e3      	bne.n	8004b8c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f847 	bl	8004c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bd6:	e023      	b.n	8004c20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d009      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x4f4>
 8004be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f913 	bl	8004e1c <UART_Transmit_IT>
    return;
 8004bf6:	e014      	b.n	8004c22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00e      	beq.n	8004c22 <HAL_UART_IRQHandler+0x51e>
 8004c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f953 	bl	8004ebc <UART_EndTransmit_IT>
    return;
 8004c16:	e004      	b.n	8004c22 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c18:	bf00      	nop
 8004c1a:	e002      	b.n	8004c22 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c1c:	bf00      	nop
 8004c1e:	e000      	b.n	8004c22 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c20:	bf00      	nop
  }
}
 8004c22:	37e8      	adds	r7, #232	@ 0xe8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c8c:	e03b      	b.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d037      	beq.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7fc ff17 	bl	8001ac8 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	6a3a      	ldr	r2, [r7, #32]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d101      	bne.n	8004cb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e03a      	b.n	8004d26 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d023      	beq.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b80      	cmp	r3, #128	@ 0x80
 8004cc2:	d020      	beq.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b40      	cmp	r3, #64	@ 0x40
 8004cc8:	d01d      	beq.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d116      	bne.n	8004d06 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f81d 	bl	8004d2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2208      	movs	r2, #8
 8004cf8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e00f      	b.n	8004d26 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	bf0c      	ite	eq
 8004d16:	2301      	moveq	r3, #1
 8004d18:	2300      	movne	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d0b4      	beq.n	8004c8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b095      	sub	sp, #84	@ 0x54
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	330c      	adds	r3, #12
 8004d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	330c      	adds	r3, #12
 8004d54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d56:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e5      	bne.n	8004d36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3314      	adds	r3, #20
 8004d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3314      	adds	r3, #20
 8004d88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e5      	bne.n	8004d6a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d119      	bne.n	8004dda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	330c      	adds	r3, #12
 8004dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f023 0310 	bic.w	r3, r3, #16
 8004dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dc6:	61ba      	str	r2, [r7, #24]
 8004dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6979      	ldr	r1, [r7, #20]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e5      	bne.n	8004da6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004de8:	bf00      	nop
 8004dea:	3754      	adds	r7, #84	@ 0x54
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f7ff ff1e 	bl	8004c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e14:	bf00      	nop
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b21      	cmp	r3, #33	@ 0x21
 8004e2e:	d13e      	bne.n	8004eae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e38:	d114      	bne.n	8004e64 <UART_Transmit_IT+0x48>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d110      	bne.n	8004e64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	1c9a      	adds	r2, r3, #2
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	621a      	str	r2, [r3, #32]
 8004e62:	e008      	b.n	8004e76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	1c59      	adds	r1, r3, #1
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6211      	str	r1, [r2, #32]
 8004e6e:	781a      	ldrb	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	4619      	mov	r1, r3
 8004e84:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10f      	bne.n	8004eaa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ea8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e000      	b.n	8004eb0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004eae:	2302      	movs	r3, #2
  }
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff fea3 	bl	8004c28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08c      	sub	sp, #48	@ 0x30
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b22      	cmp	r3, #34	@ 0x22
 8004efe:	f040 80ae 	bne.w	800505e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f0a:	d117      	bne.n	8004f3c <UART_Receive_IT+0x50>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d113      	bne.n	8004f3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f14:	2300      	movs	r3, #0
 8004f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f34:	1c9a      	adds	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f3a:	e026      	b.n	8004f8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f4e:	d007      	beq.n	8004f60 <UART_Receive_IT+0x74>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <UART_Receive_IT+0x82>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	e008      	b.n	8004f80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	4619      	mov	r1, r3
 8004f98:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d15d      	bne.n	800505a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0220 	bic.w	r2, r2, #32
 8004fac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0201 	bic.w	r2, r2, #1
 8004fcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d135      	bne.n	8005050 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	e853 3f00 	ldrex	r3, [r3]
 8004ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f023 0310 	bic.w	r3, r3, #16
 8005000:	627b      	str	r3, [r7, #36]	@ 0x24
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	330c      	adds	r3, #12
 8005008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500a:	623a      	str	r2, [r7, #32]
 800500c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	69f9      	ldr	r1, [r7, #28]
 8005010:	6a3a      	ldr	r2, [r7, #32]
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	61bb      	str	r3, [r7, #24]
   return(result);
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e5      	bne.n	8004fea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b10      	cmp	r3, #16
 800502a:	d10a      	bne.n	8005042 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005046:	4619      	mov	r1, r3
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fe0b 	bl	8004c64 <HAL_UARTEx_RxEventCallback>
 800504e:	e002      	b.n	8005056 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fdf3 	bl	8004c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	e002      	b.n	8005060 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	e000      	b.n	8005060 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800505e:	2302      	movs	r3, #2
  }
}
 8005060:	4618      	mov	r0, r3
 8005062:	3730      	adds	r7, #48	@ 0x30
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800506c:	b0c0      	sub	sp, #256	@ 0x100
 800506e:	af00      	add	r7, sp, #0
 8005070:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005084:	68d9      	ldr	r1, [r3, #12]
 8005086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	ea40 0301 	orr.w	r3, r0, r1
 8005090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	431a      	orrs	r2, r3
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	431a      	orrs	r2, r3
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80050c0:	f021 010c 	bic.w	r1, r1, #12
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80050ce:	430b      	orrs	r3, r1
 80050d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80050de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e2:	6999      	ldr	r1, [r3, #24]
 80050e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	ea40 0301 	orr.w	r3, r0, r1
 80050ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b8f      	ldr	r3, [pc, #572]	@ (8005334 <UART_SetConfig+0x2cc>)
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d005      	beq.n	8005108 <UART_SetConfig+0xa0>
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b8d      	ldr	r3, [pc, #564]	@ (8005338 <UART_SetConfig+0x2d0>)
 8005104:	429a      	cmp	r2, r3
 8005106:	d104      	bne.n	8005112 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005108:	f7fe f85c 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 800510c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005110:	e003      	b.n	800511a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005112:	f7fe f843 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8005116:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800511a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005124:	f040 810c 	bne.w	8005340 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800512c:	2200      	movs	r2, #0
 800512e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005132:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005136:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800513a:	4622      	mov	r2, r4
 800513c:	462b      	mov	r3, r5
 800513e:	1891      	adds	r1, r2, r2
 8005140:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005142:	415b      	adcs	r3, r3
 8005144:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005146:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800514a:	4621      	mov	r1, r4
 800514c:	eb12 0801 	adds.w	r8, r2, r1
 8005150:	4629      	mov	r1, r5
 8005152:	eb43 0901 	adc.w	r9, r3, r1
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800516a:	4690      	mov	r8, r2
 800516c:	4699      	mov	r9, r3
 800516e:	4623      	mov	r3, r4
 8005170:	eb18 0303 	adds.w	r3, r8, r3
 8005174:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005178:	462b      	mov	r3, r5
 800517a:	eb49 0303 	adc.w	r3, r9, r3
 800517e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800518e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005192:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005196:	460b      	mov	r3, r1
 8005198:	18db      	adds	r3, r3, r3
 800519a:	653b      	str	r3, [r7, #80]	@ 0x50
 800519c:	4613      	mov	r3, r2
 800519e:	eb42 0303 	adc.w	r3, r2, r3
 80051a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80051a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80051a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80051ac:	f7fb f80c 	bl	80001c8 <__aeabi_uldivmod>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4b61      	ldr	r3, [pc, #388]	@ (800533c <UART_SetConfig+0x2d4>)
 80051b6:	fba3 2302 	umull	r2, r3, r3, r2
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	011c      	lsls	r4, r3, #4
 80051be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80051cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80051d0:	4642      	mov	r2, r8
 80051d2:	464b      	mov	r3, r9
 80051d4:	1891      	adds	r1, r2, r2
 80051d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80051d8:	415b      	adcs	r3, r3
 80051da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051e0:	4641      	mov	r1, r8
 80051e2:	eb12 0a01 	adds.w	sl, r2, r1
 80051e6:	4649      	mov	r1, r9
 80051e8:	eb43 0b01 	adc.w	fp, r3, r1
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005200:	4692      	mov	sl, r2
 8005202:	469b      	mov	fp, r3
 8005204:	4643      	mov	r3, r8
 8005206:	eb1a 0303 	adds.w	r3, sl, r3
 800520a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800520e:	464b      	mov	r3, r9
 8005210:	eb4b 0303 	adc.w	r3, fp, r3
 8005214:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005224:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005228:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800522c:	460b      	mov	r3, r1
 800522e:	18db      	adds	r3, r3, r3
 8005230:	643b      	str	r3, [r7, #64]	@ 0x40
 8005232:	4613      	mov	r3, r2
 8005234:	eb42 0303 	adc.w	r3, r2, r3
 8005238:	647b      	str	r3, [r7, #68]	@ 0x44
 800523a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800523e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005242:	f7fa ffc1 	bl	80001c8 <__aeabi_uldivmod>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4611      	mov	r1, r2
 800524c:	4b3b      	ldr	r3, [pc, #236]	@ (800533c <UART_SetConfig+0x2d4>)
 800524e:	fba3 2301 	umull	r2, r3, r3, r1
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	2264      	movs	r2, #100	@ 0x64
 8005256:	fb02 f303 	mul.w	r3, r2, r3
 800525a:	1acb      	subs	r3, r1, r3
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005262:	4b36      	ldr	r3, [pc, #216]	@ (800533c <UART_SetConfig+0x2d4>)
 8005264:	fba3 2302 	umull	r2, r3, r3, r2
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005270:	441c      	add	r4, r3
 8005272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005276:	2200      	movs	r2, #0
 8005278:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800527c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005280:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005284:	4642      	mov	r2, r8
 8005286:	464b      	mov	r3, r9
 8005288:	1891      	adds	r1, r2, r2
 800528a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800528c:	415b      	adcs	r3, r3
 800528e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005294:	4641      	mov	r1, r8
 8005296:	1851      	adds	r1, r2, r1
 8005298:	6339      	str	r1, [r7, #48]	@ 0x30
 800529a:	4649      	mov	r1, r9
 800529c:	414b      	adcs	r3, r1
 800529e:	637b      	str	r3, [r7, #52]	@ 0x34
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80052ac:	4659      	mov	r1, fp
 80052ae:	00cb      	lsls	r3, r1, #3
 80052b0:	4651      	mov	r1, sl
 80052b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052b6:	4651      	mov	r1, sl
 80052b8:	00ca      	lsls	r2, r1, #3
 80052ba:	4610      	mov	r0, r2
 80052bc:	4619      	mov	r1, r3
 80052be:	4603      	mov	r3, r0
 80052c0:	4642      	mov	r2, r8
 80052c2:	189b      	adds	r3, r3, r2
 80052c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052c8:	464b      	mov	r3, r9
 80052ca:	460a      	mov	r2, r1
 80052cc:	eb42 0303 	adc.w	r3, r2, r3
 80052d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80052e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052e8:	460b      	mov	r3, r1
 80052ea:	18db      	adds	r3, r3, r3
 80052ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052ee:	4613      	mov	r3, r2
 80052f0:	eb42 0303 	adc.w	r3, r2, r3
 80052f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052fe:	f7fa ff63 	bl	80001c8 <__aeabi_uldivmod>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4b0d      	ldr	r3, [pc, #52]	@ (800533c <UART_SetConfig+0x2d4>)
 8005308:	fba3 1302 	umull	r1, r3, r3, r2
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	2164      	movs	r1, #100	@ 0x64
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	3332      	adds	r3, #50	@ 0x32
 800531a:	4a08      	ldr	r2, [pc, #32]	@ (800533c <UART_SetConfig+0x2d4>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	f003 0207 	and.w	r2, r3, #7
 8005326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4422      	add	r2, r4
 800532e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005330:	e106      	b.n	8005540 <UART_SetConfig+0x4d8>
 8005332:	bf00      	nop
 8005334:	40011000 	.word	0x40011000
 8005338:	40011400 	.word	0x40011400
 800533c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005344:	2200      	movs	r2, #0
 8005346:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800534a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800534e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005352:	4642      	mov	r2, r8
 8005354:	464b      	mov	r3, r9
 8005356:	1891      	adds	r1, r2, r2
 8005358:	6239      	str	r1, [r7, #32]
 800535a:	415b      	adcs	r3, r3
 800535c:	627b      	str	r3, [r7, #36]	@ 0x24
 800535e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005362:	4641      	mov	r1, r8
 8005364:	1854      	adds	r4, r2, r1
 8005366:	4649      	mov	r1, r9
 8005368:	eb43 0501 	adc.w	r5, r3, r1
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	00eb      	lsls	r3, r5, #3
 8005376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800537a:	00e2      	lsls	r2, r4, #3
 800537c:	4614      	mov	r4, r2
 800537e:	461d      	mov	r5, r3
 8005380:	4643      	mov	r3, r8
 8005382:	18e3      	adds	r3, r4, r3
 8005384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005388:	464b      	mov	r3, r9
 800538a:	eb45 0303 	adc.w	r3, r5, r3
 800538e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800539e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	f04f 0300 	mov.w	r3, #0
 80053aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80053ae:	4629      	mov	r1, r5
 80053b0:	008b      	lsls	r3, r1, #2
 80053b2:	4621      	mov	r1, r4
 80053b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053b8:	4621      	mov	r1, r4
 80053ba:	008a      	lsls	r2, r1, #2
 80053bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80053c0:	f7fa ff02 	bl	80001c8 <__aeabi_uldivmod>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4b60      	ldr	r3, [pc, #384]	@ (800554c <UART_SetConfig+0x4e4>)
 80053ca:	fba3 2302 	umull	r2, r3, r3, r2
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	011c      	lsls	r4, r3, #4
 80053d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053d6:	2200      	movs	r2, #0
 80053d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80053e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80053e4:	4642      	mov	r2, r8
 80053e6:	464b      	mov	r3, r9
 80053e8:	1891      	adds	r1, r2, r2
 80053ea:	61b9      	str	r1, [r7, #24]
 80053ec:	415b      	adcs	r3, r3
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053f4:	4641      	mov	r1, r8
 80053f6:	1851      	adds	r1, r2, r1
 80053f8:	6139      	str	r1, [r7, #16]
 80053fa:	4649      	mov	r1, r9
 80053fc:	414b      	adcs	r3, r1
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800540c:	4659      	mov	r1, fp
 800540e:	00cb      	lsls	r3, r1, #3
 8005410:	4651      	mov	r1, sl
 8005412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005416:	4651      	mov	r1, sl
 8005418:	00ca      	lsls	r2, r1, #3
 800541a:	4610      	mov	r0, r2
 800541c:	4619      	mov	r1, r3
 800541e:	4603      	mov	r3, r0
 8005420:	4642      	mov	r2, r8
 8005422:	189b      	adds	r3, r3, r2
 8005424:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005428:	464b      	mov	r3, r9
 800542a:	460a      	mov	r2, r1
 800542c:	eb42 0303 	adc.w	r3, r2, r3
 8005430:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800543e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800544c:	4649      	mov	r1, r9
 800544e:	008b      	lsls	r3, r1, #2
 8005450:	4641      	mov	r1, r8
 8005452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005456:	4641      	mov	r1, r8
 8005458:	008a      	lsls	r2, r1, #2
 800545a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800545e:	f7fa feb3 	bl	80001c8 <__aeabi_uldivmod>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4611      	mov	r1, r2
 8005468:	4b38      	ldr	r3, [pc, #224]	@ (800554c <UART_SetConfig+0x4e4>)
 800546a:	fba3 2301 	umull	r2, r3, r3, r1
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	2264      	movs	r2, #100	@ 0x64
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	1acb      	subs	r3, r1, r3
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	3332      	adds	r3, #50	@ 0x32
 800547c:	4a33      	ldr	r2, [pc, #204]	@ (800554c <UART_SetConfig+0x4e4>)
 800547e:	fba2 2303 	umull	r2, r3, r2, r3
 8005482:	095b      	lsrs	r3, r3, #5
 8005484:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005488:	441c      	add	r4, r3
 800548a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800548e:	2200      	movs	r2, #0
 8005490:	673b      	str	r3, [r7, #112]	@ 0x70
 8005492:	677a      	str	r2, [r7, #116]	@ 0x74
 8005494:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005498:	4642      	mov	r2, r8
 800549a:	464b      	mov	r3, r9
 800549c:	1891      	adds	r1, r2, r2
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	415b      	adcs	r3, r3
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054a8:	4641      	mov	r1, r8
 80054aa:	1851      	adds	r1, r2, r1
 80054ac:	6039      	str	r1, [r7, #0]
 80054ae:	4649      	mov	r1, r9
 80054b0:	414b      	adcs	r3, r1
 80054b2:	607b      	str	r3, [r7, #4]
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054c0:	4659      	mov	r1, fp
 80054c2:	00cb      	lsls	r3, r1, #3
 80054c4:	4651      	mov	r1, sl
 80054c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ca:	4651      	mov	r1, sl
 80054cc:	00ca      	lsls	r2, r1, #3
 80054ce:	4610      	mov	r0, r2
 80054d0:	4619      	mov	r1, r3
 80054d2:	4603      	mov	r3, r0
 80054d4:	4642      	mov	r2, r8
 80054d6:	189b      	adds	r3, r3, r2
 80054d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054da:	464b      	mov	r3, r9
 80054dc:	460a      	mov	r2, r1
 80054de:	eb42 0303 	adc.w	r3, r2, r3
 80054e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80054ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80054f0:	f04f 0200 	mov.w	r2, #0
 80054f4:	f04f 0300 	mov.w	r3, #0
 80054f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054fc:	4649      	mov	r1, r9
 80054fe:	008b      	lsls	r3, r1, #2
 8005500:	4641      	mov	r1, r8
 8005502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005506:	4641      	mov	r1, r8
 8005508:	008a      	lsls	r2, r1, #2
 800550a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800550e:	f7fa fe5b 	bl	80001c8 <__aeabi_uldivmod>
 8005512:	4602      	mov	r2, r0
 8005514:	460b      	mov	r3, r1
 8005516:	4b0d      	ldr	r3, [pc, #52]	@ (800554c <UART_SetConfig+0x4e4>)
 8005518:	fba3 1302 	umull	r1, r3, r3, r2
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	2164      	movs	r1, #100	@ 0x64
 8005520:	fb01 f303 	mul.w	r3, r1, r3
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	3332      	adds	r3, #50	@ 0x32
 800552a:	4a08      	ldr	r2, [pc, #32]	@ (800554c <UART_SetConfig+0x4e4>)
 800552c:	fba2 2303 	umull	r2, r3, r2, r3
 8005530:	095b      	lsrs	r3, r3, #5
 8005532:	f003 020f 	and.w	r2, r3, #15
 8005536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4422      	add	r2, r4
 800553e:	609a      	str	r2, [r3, #8]
}
 8005540:	bf00      	nop
 8005542:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005546:	46bd      	mov	sp, r7
 8005548:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800554c:	51eb851f 	.word	0x51eb851f

08005550 <malloc>:
 8005550:	4b02      	ldr	r3, [pc, #8]	@ (800555c <malloc+0xc>)
 8005552:	4601      	mov	r1, r0
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	f000 b82d 	b.w	80055b4 <_malloc_r>
 800555a:	bf00      	nop
 800555c:	20000014 	.word	0x20000014

08005560 <free>:
 8005560:	4b02      	ldr	r3, [pc, #8]	@ (800556c <free+0xc>)
 8005562:	4601      	mov	r1, r0
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	f000 b8f5 	b.w	8005754 <_free_r>
 800556a:	bf00      	nop
 800556c:	20000014 	.word	0x20000014

08005570 <sbrk_aligned>:
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	4e0f      	ldr	r6, [pc, #60]	@ (80055b0 <sbrk_aligned+0x40>)
 8005574:	460c      	mov	r4, r1
 8005576:	6831      	ldr	r1, [r6, #0]
 8005578:	4605      	mov	r5, r0
 800557a:	b911      	cbnz	r1, 8005582 <sbrk_aligned+0x12>
 800557c:	f000 f8ae 	bl	80056dc <_sbrk_r>
 8005580:	6030      	str	r0, [r6, #0]
 8005582:	4621      	mov	r1, r4
 8005584:	4628      	mov	r0, r5
 8005586:	f000 f8a9 	bl	80056dc <_sbrk_r>
 800558a:	1c43      	adds	r3, r0, #1
 800558c:	d103      	bne.n	8005596 <sbrk_aligned+0x26>
 800558e:	f04f 34ff 	mov.w	r4, #4294967295
 8005592:	4620      	mov	r0, r4
 8005594:	bd70      	pop	{r4, r5, r6, pc}
 8005596:	1cc4      	adds	r4, r0, #3
 8005598:	f024 0403 	bic.w	r4, r4, #3
 800559c:	42a0      	cmp	r0, r4
 800559e:	d0f8      	beq.n	8005592 <sbrk_aligned+0x22>
 80055a0:	1a21      	subs	r1, r4, r0
 80055a2:	4628      	mov	r0, r5
 80055a4:	f000 f89a 	bl	80056dc <_sbrk_r>
 80055a8:	3001      	adds	r0, #1
 80055aa:	d1f2      	bne.n	8005592 <sbrk_aligned+0x22>
 80055ac:	e7ef      	b.n	800558e <sbrk_aligned+0x1e>
 80055ae:	bf00      	nop
 80055b0:	200001ec 	.word	0x200001ec

080055b4 <_malloc_r>:
 80055b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b8:	1ccd      	adds	r5, r1, #3
 80055ba:	f025 0503 	bic.w	r5, r5, #3
 80055be:	3508      	adds	r5, #8
 80055c0:	2d0c      	cmp	r5, #12
 80055c2:	bf38      	it	cc
 80055c4:	250c      	movcc	r5, #12
 80055c6:	2d00      	cmp	r5, #0
 80055c8:	4606      	mov	r6, r0
 80055ca:	db01      	blt.n	80055d0 <_malloc_r+0x1c>
 80055cc:	42a9      	cmp	r1, r5
 80055ce:	d904      	bls.n	80055da <_malloc_r+0x26>
 80055d0:	230c      	movs	r3, #12
 80055d2:	6033      	str	r3, [r6, #0]
 80055d4:	2000      	movs	r0, #0
 80055d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056b0 <_malloc_r+0xfc>
 80055de:	f000 f869 	bl	80056b4 <__malloc_lock>
 80055e2:	f8d8 3000 	ldr.w	r3, [r8]
 80055e6:	461c      	mov	r4, r3
 80055e8:	bb44      	cbnz	r4, 800563c <_malloc_r+0x88>
 80055ea:	4629      	mov	r1, r5
 80055ec:	4630      	mov	r0, r6
 80055ee:	f7ff ffbf 	bl	8005570 <sbrk_aligned>
 80055f2:	1c43      	adds	r3, r0, #1
 80055f4:	4604      	mov	r4, r0
 80055f6:	d158      	bne.n	80056aa <_malloc_r+0xf6>
 80055f8:	f8d8 4000 	ldr.w	r4, [r8]
 80055fc:	4627      	mov	r7, r4
 80055fe:	2f00      	cmp	r7, #0
 8005600:	d143      	bne.n	800568a <_malloc_r+0xd6>
 8005602:	2c00      	cmp	r4, #0
 8005604:	d04b      	beq.n	800569e <_malloc_r+0xea>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	4639      	mov	r1, r7
 800560a:	4630      	mov	r0, r6
 800560c:	eb04 0903 	add.w	r9, r4, r3
 8005610:	f000 f864 	bl	80056dc <_sbrk_r>
 8005614:	4581      	cmp	r9, r0
 8005616:	d142      	bne.n	800569e <_malloc_r+0xea>
 8005618:	6821      	ldr	r1, [r4, #0]
 800561a:	1a6d      	subs	r5, r5, r1
 800561c:	4629      	mov	r1, r5
 800561e:	4630      	mov	r0, r6
 8005620:	f7ff ffa6 	bl	8005570 <sbrk_aligned>
 8005624:	3001      	adds	r0, #1
 8005626:	d03a      	beq.n	800569e <_malloc_r+0xea>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	442b      	add	r3, r5
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	f8d8 3000 	ldr.w	r3, [r8]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	bb62      	cbnz	r2, 8005690 <_malloc_r+0xdc>
 8005636:	f8c8 7000 	str.w	r7, [r8]
 800563a:	e00f      	b.n	800565c <_malloc_r+0xa8>
 800563c:	6822      	ldr	r2, [r4, #0]
 800563e:	1b52      	subs	r2, r2, r5
 8005640:	d420      	bmi.n	8005684 <_malloc_r+0xd0>
 8005642:	2a0b      	cmp	r2, #11
 8005644:	d917      	bls.n	8005676 <_malloc_r+0xc2>
 8005646:	1961      	adds	r1, r4, r5
 8005648:	42a3      	cmp	r3, r4
 800564a:	6025      	str	r5, [r4, #0]
 800564c:	bf18      	it	ne
 800564e:	6059      	strne	r1, [r3, #4]
 8005650:	6863      	ldr	r3, [r4, #4]
 8005652:	bf08      	it	eq
 8005654:	f8c8 1000 	streq.w	r1, [r8]
 8005658:	5162      	str	r2, [r4, r5]
 800565a:	604b      	str	r3, [r1, #4]
 800565c:	4630      	mov	r0, r6
 800565e:	f000 f82f 	bl	80056c0 <__malloc_unlock>
 8005662:	f104 000b 	add.w	r0, r4, #11
 8005666:	1d23      	adds	r3, r4, #4
 8005668:	f020 0007 	bic.w	r0, r0, #7
 800566c:	1ac2      	subs	r2, r0, r3
 800566e:	bf1c      	itt	ne
 8005670:	1a1b      	subne	r3, r3, r0
 8005672:	50a3      	strne	r3, [r4, r2]
 8005674:	e7af      	b.n	80055d6 <_malloc_r+0x22>
 8005676:	6862      	ldr	r2, [r4, #4]
 8005678:	42a3      	cmp	r3, r4
 800567a:	bf0c      	ite	eq
 800567c:	f8c8 2000 	streq.w	r2, [r8]
 8005680:	605a      	strne	r2, [r3, #4]
 8005682:	e7eb      	b.n	800565c <_malloc_r+0xa8>
 8005684:	4623      	mov	r3, r4
 8005686:	6864      	ldr	r4, [r4, #4]
 8005688:	e7ae      	b.n	80055e8 <_malloc_r+0x34>
 800568a:	463c      	mov	r4, r7
 800568c:	687f      	ldr	r7, [r7, #4]
 800568e:	e7b6      	b.n	80055fe <_malloc_r+0x4a>
 8005690:	461a      	mov	r2, r3
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	42a3      	cmp	r3, r4
 8005696:	d1fb      	bne.n	8005690 <_malloc_r+0xdc>
 8005698:	2300      	movs	r3, #0
 800569a:	6053      	str	r3, [r2, #4]
 800569c:	e7de      	b.n	800565c <_malloc_r+0xa8>
 800569e:	230c      	movs	r3, #12
 80056a0:	6033      	str	r3, [r6, #0]
 80056a2:	4630      	mov	r0, r6
 80056a4:	f000 f80c 	bl	80056c0 <__malloc_unlock>
 80056a8:	e794      	b.n	80055d4 <_malloc_r+0x20>
 80056aa:	6005      	str	r5, [r0, #0]
 80056ac:	e7d6      	b.n	800565c <_malloc_r+0xa8>
 80056ae:	bf00      	nop
 80056b0:	200001f0 	.word	0x200001f0

080056b4 <__malloc_lock>:
 80056b4:	4801      	ldr	r0, [pc, #4]	@ (80056bc <__malloc_lock+0x8>)
 80056b6:	f000 b84b 	b.w	8005750 <__retarget_lock_acquire_recursive>
 80056ba:	bf00      	nop
 80056bc:	20000330 	.word	0x20000330

080056c0 <__malloc_unlock>:
 80056c0:	4801      	ldr	r0, [pc, #4]	@ (80056c8 <__malloc_unlock+0x8>)
 80056c2:	f000 b846 	b.w	8005752 <__retarget_lock_release_recursive>
 80056c6:	bf00      	nop
 80056c8:	20000330 	.word	0x20000330

080056cc <memset>:
 80056cc:	4402      	add	r2, r0
 80056ce:	4603      	mov	r3, r0
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d100      	bne.n	80056d6 <memset+0xa>
 80056d4:	4770      	bx	lr
 80056d6:	f803 1b01 	strb.w	r1, [r3], #1
 80056da:	e7f9      	b.n	80056d0 <memset+0x4>

080056dc <_sbrk_r>:
 80056dc:	b538      	push	{r3, r4, r5, lr}
 80056de:	4d06      	ldr	r5, [pc, #24]	@ (80056f8 <_sbrk_r+0x1c>)
 80056e0:	2300      	movs	r3, #0
 80056e2:	4604      	mov	r4, r0
 80056e4:	4608      	mov	r0, r1
 80056e6:	602b      	str	r3, [r5, #0]
 80056e8:	f7fc f916 	bl	8001918 <_sbrk>
 80056ec:	1c43      	adds	r3, r0, #1
 80056ee:	d102      	bne.n	80056f6 <_sbrk_r+0x1a>
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	b103      	cbz	r3, 80056f6 <_sbrk_r+0x1a>
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	bd38      	pop	{r3, r4, r5, pc}
 80056f8:	2000032c 	.word	0x2000032c

080056fc <__errno>:
 80056fc:	4b01      	ldr	r3, [pc, #4]	@ (8005704 <__errno+0x8>)
 80056fe:	6818      	ldr	r0, [r3, #0]
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	20000014 	.word	0x20000014

08005708 <__libc_init_array>:
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	4d0d      	ldr	r5, [pc, #52]	@ (8005740 <__libc_init_array+0x38>)
 800570c:	4c0d      	ldr	r4, [pc, #52]	@ (8005744 <__libc_init_array+0x3c>)
 800570e:	1b64      	subs	r4, r4, r5
 8005710:	10a4      	asrs	r4, r4, #2
 8005712:	2600      	movs	r6, #0
 8005714:	42a6      	cmp	r6, r4
 8005716:	d109      	bne.n	800572c <__libc_init_array+0x24>
 8005718:	4d0b      	ldr	r5, [pc, #44]	@ (8005748 <__libc_init_array+0x40>)
 800571a:	4c0c      	ldr	r4, [pc, #48]	@ (800574c <__libc_init_array+0x44>)
 800571c:	f000 f864 	bl	80057e8 <_init>
 8005720:	1b64      	subs	r4, r4, r5
 8005722:	10a4      	asrs	r4, r4, #2
 8005724:	2600      	movs	r6, #0
 8005726:	42a6      	cmp	r6, r4
 8005728:	d105      	bne.n	8005736 <__libc_init_array+0x2e>
 800572a:	bd70      	pop	{r4, r5, r6, pc}
 800572c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005730:	4798      	blx	r3
 8005732:	3601      	adds	r6, #1
 8005734:	e7ee      	b.n	8005714 <__libc_init_array+0xc>
 8005736:	f855 3b04 	ldr.w	r3, [r5], #4
 800573a:	4798      	blx	r3
 800573c:	3601      	adds	r6, #1
 800573e:	e7f2      	b.n	8005726 <__libc_init_array+0x1e>
 8005740:	08006598 	.word	0x08006598
 8005744:	08006598 	.word	0x08006598
 8005748:	08006598 	.word	0x08006598
 800574c:	0800659c 	.word	0x0800659c

08005750 <__retarget_lock_acquire_recursive>:
 8005750:	4770      	bx	lr

08005752 <__retarget_lock_release_recursive>:
 8005752:	4770      	bx	lr

08005754 <_free_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4605      	mov	r5, r0
 8005758:	2900      	cmp	r1, #0
 800575a:	d041      	beq.n	80057e0 <_free_r+0x8c>
 800575c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005760:	1f0c      	subs	r4, r1, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	bfb8      	it	lt
 8005766:	18e4      	addlt	r4, r4, r3
 8005768:	f7ff ffa4 	bl	80056b4 <__malloc_lock>
 800576c:	4a1d      	ldr	r2, [pc, #116]	@ (80057e4 <_free_r+0x90>)
 800576e:	6813      	ldr	r3, [r2, #0]
 8005770:	b933      	cbnz	r3, 8005780 <_free_r+0x2c>
 8005772:	6063      	str	r3, [r4, #4]
 8005774:	6014      	str	r4, [r2, #0]
 8005776:	4628      	mov	r0, r5
 8005778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800577c:	f7ff bfa0 	b.w	80056c0 <__malloc_unlock>
 8005780:	42a3      	cmp	r3, r4
 8005782:	d908      	bls.n	8005796 <_free_r+0x42>
 8005784:	6820      	ldr	r0, [r4, #0]
 8005786:	1821      	adds	r1, r4, r0
 8005788:	428b      	cmp	r3, r1
 800578a:	bf01      	itttt	eq
 800578c:	6819      	ldreq	r1, [r3, #0]
 800578e:	685b      	ldreq	r3, [r3, #4]
 8005790:	1809      	addeq	r1, r1, r0
 8005792:	6021      	streq	r1, [r4, #0]
 8005794:	e7ed      	b.n	8005772 <_free_r+0x1e>
 8005796:	461a      	mov	r2, r3
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	b10b      	cbz	r3, 80057a0 <_free_r+0x4c>
 800579c:	42a3      	cmp	r3, r4
 800579e:	d9fa      	bls.n	8005796 <_free_r+0x42>
 80057a0:	6811      	ldr	r1, [r2, #0]
 80057a2:	1850      	adds	r0, r2, r1
 80057a4:	42a0      	cmp	r0, r4
 80057a6:	d10b      	bne.n	80057c0 <_free_r+0x6c>
 80057a8:	6820      	ldr	r0, [r4, #0]
 80057aa:	4401      	add	r1, r0
 80057ac:	1850      	adds	r0, r2, r1
 80057ae:	4283      	cmp	r3, r0
 80057b0:	6011      	str	r1, [r2, #0]
 80057b2:	d1e0      	bne.n	8005776 <_free_r+0x22>
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	6053      	str	r3, [r2, #4]
 80057ba:	4408      	add	r0, r1
 80057bc:	6010      	str	r0, [r2, #0]
 80057be:	e7da      	b.n	8005776 <_free_r+0x22>
 80057c0:	d902      	bls.n	80057c8 <_free_r+0x74>
 80057c2:	230c      	movs	r3, #12
 80057c4:	602b      	str	r3, [r5, #0]
 80057c6:	e7d6      	b.n	8005776 <_free_r+0x22>
 80057c8:	6820      	ldr	r0, [r4, #0]
 80057ca:	1821      	adds	r1, r4, r0
 80057cc:	428b      	cmp	r3, r1
 80057ce:	bf04      	itt	eq
 80057d0:	6819      	ldreq	r1, [r3, #0]
 80057d2:	685b      	ldreq	r3, [r3, #4]
 80057d4:	6063      	str	r3, [r4, #4]
 80057d6:	bf04      	itt	eq
 80057d8:	1809      	addeq	r1, r1, r0
 80057da:	6021      	streq	r1, [r4, #0]
 80057dc:	6054      	str	r4, [r2, #4]
 80057de:	e7ca      	b.n	8005776 <_free_r+0x22>
 80057e0:	bd38      	pop	{r3, r4, r5, pc}
 80057e2:	bf00      	nop
 80057e4:	200001f0 	.word	0x200001f0

080057e8 <_init>:
 80057e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ea:	bf00      	nop
 80057ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ee:	bc08      	pop	{r3}
 80057f0:	469e      	mov	lr, r3
 80057f2:	4770      	bx	lr

080057f4 <_fini>:
 80057f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f6:	bf00      	nop
 80057f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057fa:	bc08      	pop	{r3}
 80057fc:	469e      	mov	lr, r3
 80057fe:	4770      	bx	lr
