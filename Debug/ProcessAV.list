
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010830  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010b0  080109b8  080109b8  000119b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a68  08011a68  0001306c  2**0
                  CONTENTS
  4 .ARM          00000008  08011a68  08011a68  00012a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a70  08011a70  0001306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a70  08011a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011a74  08011a74  00012a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08011a78  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001306c  2**0
                  CONTENTS
 10 .bss          0001484c  2000006c  2000006c  0001306c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200148b8  200148b8  0001306c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001306c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c8de  00000000  00000000  0001309c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044df  00000000  00000000  0002f97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d8  00000000  00000000  00033e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013f8  00000000  00000000  00035838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002642a  00000000  00000000  00036c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022628  00000000  00000000  0005d05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7040  00000000  00000000  0007f682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001566c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007148  00000000  00000000  00156708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0015d850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080109a0 	.word	0x080109a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	080109a0 	.word	0x080109a0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b96a 	b.w	8000cb0 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	460c      	mov	r4, r1
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d14e      	bne.n	8000a9e <__udivmoddi4+0xaa>
 8000a00:	4694      	mov	ip, r2
 8000a02:	458c      	cmp	ip, r1
 8000a04:	4686      	mov	lr, r0
 8000a06:	fab2 f282 	clz	r2, r2
 8000a0a:	d962      	bls.n	8000ad2 <__udivmoddi4+0xde>
 8000a0c:	b14a      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a0e:	f1c2 0320 	rsb	r3, r2, #32
 8000a12:	4091      	lsls	r1, r2
 8000a14:	fa20 f303 	lsr.w	r3, r0, r3
 8000a18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1c:	4319      	orrs	r1, r3
 8000a1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a26:	fa1f f68c 	uxth.w	r6, ip
 8000a2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a32:	fb07 1114 	mls	r1, r7, r4, r1
 8000a36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a3a:	fb04 f106 	mul.w	r1, r4, r6
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	d90a      	bls.n	8000a58 <__udivmoddi4+0x64>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a4a:	f080 8112 	bcs.w	8000c72 <__udivmoddi4+0x27e>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 810f 	bls.w	8000c72 <__udivmoddi4+0x27e>
 8000a54:	3c02      	subs	r4, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1a59      	subs	r1, r3, r1
 8000a5a:	fa1f f38e 	uxth.w	r3, lr
 8000a5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a62:	fb07 1110 	mls	r1, r7, r0, r1
 8000a66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a6a:	fb00 f606 	mul.w	r6, r0, r6
 8000a6e:	429e      	cmp	r6, r3
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x94>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a7a:	f080 80fc 	bcs.w	8000c76 <__udivmoddi4+0x282>
 8000a7e:	429e      	cmp	r6, r3
 8000a80:	f240 80f9 	bls.w	8000c76 <__udivmoddi4+0x282>
 8000a84:	4463      	add	r3, ip
 8000a86:	3802      	subs	r0, #2
 8000a88:	1b9b      	subs	r3, r3, r6
 8000a8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a8e:	2100      	movs	r1, #0
 8000a90:	b11d      	cbz	r5, 8000a9a <__udivmoddi4+0xa6>
 8000a92:	40d3      	lsrs	r3, r2
 8000a94:	2200      	movs	r2, #0
 8000a96:	e9c5 3200 	strd	r3, r2, [r5]
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d905      	bls.n	8000aae <__udivmoddi4+0xba>
 8000aa2:	b10d      	cbz	r5, 8000aa8 <__udivmoddi4+0xb4>
 8000aa4:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e7f5      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000aae:	fab3 f183 	clz	r1, r3
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	d146      	bne.n	8000b44 <__udivmoddi4+0x150>
 8000ab6:	42a3      	cmp	r3, r4
 8000ab8:	d302      	bcc.n	8000ac0 <__udivmoddi4+0xcc>
 8000aba:	4290      	cmp	r0, r2
 8000abc:	f0c0 80f0 	bcc.w	8000ca0 <__udivmoddi4+0x2ac>
 8000ac0:	1a86      	subs	r6, r0, r2
 8000ac2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	2d00      	cmp	r5, #0
 8000aca:	d0e6      	beq.n	8000a9a <__udivmoddi4+0xa6>
 8000acc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ad0:	e7e3      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	f040 8090 	bne.w	8000bf8 <__udivmoddi4+0x204>
 8000ad8:	eba1 040c 	sub.w	r4, r1, ip
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	fa1f f78c 	uxth.w	r7, ip
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aee:	fb08 4416 	mls	r4, r8, r6, r4
 8000af2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000af6:	fb07 f006 	mul.w	r0, r7, r6
 8000afa:	4298      	cmp	r0, r3
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x11c>
 8000afe:	eb1c 0303 	adds.w	r3, ip, r3
 8000b02:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x11a>
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	f200 80cd 	bhi.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b0e:	4626      	mov	r6, r4
 8000b10:	1a1c      	subs	r4, r3, r0
 8000b12:	fa1f f38e 	uxth.w	r3, lr
 8000b16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b22:	fb00 f707 	mul.w	r7, r0, r7
 8000b26:	429f      	cmp	r7, r3
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x148>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b32:	d202      	bcs.n	8000b3a <__udivmoddi4+0x146>
 8000b34:	429f      	cmp	r7, r3
 8000b36:	f200 80b0 	bhi.w	8000c9a <__udivmoddi4+0x2a6>
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	1bdb      	subs	r3, r3, r7
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	e7a5      	b.n	8000a90 <__udivmoddi4+0x9c>
 8000b44:	f1c1 0620 	rsb	r6, r1, #32
 8000b48:	408b      	lsls	r3, r1
 8000b4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b4e:	431f      	orrs	r7, r3
 8000b50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b54:	fa04 f301 	lsl.w	r3, r4, r1
 8000b58:	ea43 030c 	orr.w	r3, r3, ip
 8000b5c:	40f4      	lsrs	r4, r6
 8000b5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b62:	0c38      	lsrs	r0, r7, #16
 8000b64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b68:	fbb4 fef0 	udiv	lr, r4, r0
 8000b6c:	fa1f fc87 	uxth.w	ip, r7
 8000b70:	fb00 441e 	mls	r4, r0, lr, r4
 8000b74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b78:	fb0e f90c 	mul.w	r9, lr, ip
 8000b7c:	45a1      	cmp	r9, r4
 8000b7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b82:	d90a      	bls.n	8000b9a <__udivmoddi4+0x1a6>
 8000b84:	193c      	adds	r4, r7, r4
 8000b86:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b8a:	f080 8084 	bcs.w	8000c96 <__udivmoddi4+0x2a2>
 8000b8e:	45a1      	cmp	r9, r4
 8000b90:	f240 8081 	bls.w	8000c96 <__udivmoddi4+0x2a2>
 8000b94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b98:	443c      	add	r4, r7
 8000b9a:	eba4 0409 	sub.w	r4, r4, r9
 8000b9e:	fa1f f983 	uxth.w	r9, r3
 8000ba2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ba6:	fb00 4413 	mls	r4, r0, r3, r4
 8000baa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bb2:	45a4      	cmp	ip, r4
 8000bb4:	d907      	bls.n	8000bc6 <__udivmoddi4+0x1d2>
 8000bb6:	193c      	adds	r4, r7, r4
 8000bb8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bbc:	d267      	bcs.n	8000c8e <__udivmoddi4+0x29a>
 8000bbe:	45a4      	cmp	ip, r4
 8000bc0:	d965      	bls.n	8000c8e <__udivmoddi4+0x29a>
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	443c      	add	r4, r7
 8000bc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bca:	fba0 9302 	umull	r9, r3, r0, r2
 8000bce:	eba4 040c 	sub.w	r4, r4, ip
 8000bd2:	429c      	cmp	r4, r3
 8000bd4:	46ce      	mov	lr, r9
 8000bd6:	469c      	mov	ip, r3
 8000bd8:	d351      	bcc.n	8000c7e <__udivmoddi4+0x28a>
 8000bda:	d04e      	beq.n	8000c7a <__udivmoddi4+0x286>
 8000bdc:	b155      	cbz	r5, 8000bf4 <__udivmoddi4+0x200>
 8000bde:	ebb8 030e 	subs.w	r3, r8, lr
 8000be2:	eb64 040c 	sbc.w	r4, r4, ip
 8000be6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bea:	40cb      	lsrs	r3, r1
 8000bec:	431e      	orrs	r6, r3
 8000bee:	40cc      	lsrs	r4, r1
 8000bf0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	e750      	b.n	8000a9a <__udivmoddi4+0xa6>
 8000bf8:	f1c2 0320 	rsb	r3, r2, #32
 8000bfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	fa24 f303 	lsr.w	r3, r4, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	430c      	orrs	r4, r1
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c20:	0c23      	lsrs	r3, r4, #16
 8000c22:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c26:	fb00 f107 	mul.w	r1, r0, r7
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x24c>
 8000c2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c32:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c36:	d22c      	bcs.n	8000c92 <__udivmoddi4+0x29e>
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d92a      	bls.n	8000c92 <__udivmoddi4+0x29e>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c48:	fb08 3311 	mls	r3, r8, r1, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb01 f307 	mul.w	r3, r1, r7
 8000c54:	42a3      	cmp	r3, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x276>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c60:	d213      	bcs.n	8000c8a <__udivmoddi4+0x296>
 8000c62:	42a3      	cmp	r3, r4
 8000c64:	d911      	bls.n	8000c8a <__udivmoddi4+0x296>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4464      	add	r4, ip
 8000c6a:	1ae4      	subs	r4, r4, r3
 8000c6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c70:	e739      	b.n	8000ae6 <__udivmoddi4+0xf2>
 8000c72:	4604      	mov	r4, r0
 8000c74:	e6f0      	b.n	8000a58 <__udivmoddi4+0x64>
 8000c76:	4608      	mov	r0, r1
 8000c78:	e706      	b.n	8000a88 <__udivmoddi4+0x94>
 8000c7a:	45c8      	cmp	r8, r9
 8000c7c:	d2ae      	bcs.n	8000bdc <__udivmoddi4+0x1e8>
 8000c7e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c82:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c86:	3801      	subs	r0, #1
 8000c88:	e7a8      	b.n	8000bdc <__udivmoddi4+0x1e8>
 8000c8a:	4631      	mov	r1, r6
 8000c8c:	e7ed      	b.n	8000c6a <__udivmoddi4+0x276>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	e799      	b.n	8000bc6 <__udivmoddi4+0x1d2>
 8000c92:	4630      	mov	r0, r6
 8000c94:	e7d4      	b.n	8000c40 <__udivmoddi4+0x24c>
 8000c96:	46d6      	mov	lr, sl
 8000c98:	e77f      	b.n	8000b9a <__udivmoddi4+0x1a6>
 8000c9a:	4463      	add	r3, ip
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	e74d      	b.n	8000b3c <__udivmoddi4+0x148>
 8000ca0:	4606      	mov	r6, r0
 8000ca2:	4623      	mov	r3, r4
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	e70f      	b.n	8000ac8 <__udivmoddi4+0xd4>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	e730      	b.n	8000b10 <__udivmoddi4+0x11c>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <controller_test>:
 */

uint8_t pback = 0;

static void controller_test()
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
	ENTITY entity;
	entity.x0 = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 300;
 8000cbe:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000cc2:	813b      	strh	r3, [r7, #8]
	entity.x1 = 64;
 8000cc4:	2340      	movs	r3, #64	@ 0x40
 8000cc6:	817b      	strh	r3, [r7, #10]
	entity.y1 = 64;
 8000cc8:	2340      	movs	r3, #64	@ 0x40
 8000cca:	81bb      	strh	r3, [r7, #12]
	entity.id = 0x80;
 8000ccc:	2380      	movs	r3, #128	@ 0x80
 8000cce:	713b      	strb	r3, [r7, #4]
	entity.ST.color = 0xF100;
 8000cd0:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8000cd4:	823b      	strh	r3, [r7, #16]

	draw_entity(&entity);
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f002 fbe9 	bl	80034b0 <draw_entity>

	while(1)
	{

		switch(currentDx)
 8000cde:	4b2b      	ldr	r3, [pc, #172]	@ (8000d8c <controller_test+0xd8>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b77      	cmp	r3, #119	@ 0x77
 8000ce4:	d03a      	beq.n	8000d5c <controller_test+0xa8>
 8000ce6:	2b77      	cmp	r3, #119	@ 0x77
 8000ce8:	dc48      	bgt.n	8000d7c <controller_test+0xc8>
 8000cea:	2b55      	cmp	r3, #85	@ 0x55
 8000cec:	d026      	beq.n	8000d3c <controller_test+0x88>
 8000cee:	2b55      	cmp	r3, #85	@ 0x55
 8000cf0:	dc44      	bgt.n	8000d7c <controller_test+0xc8>
 8000cf2:	2b11      	cmp	r3, #17
 8000cf4:	d002      	beq.n	8000cfc <controller_test+0x48>
 8000cf6:	2b33      	cmp	r3, #51	@ 0x33
 8000cf8:	d010      	beq.n	8000d1c <controller_test+0x68>
 8000cfa:	e03f      	b.n	8000d7c <controller_test+0xc8>
		{
			case DxRight:
				translation_entity(&entity, entity.x0+32, entity.y0, 1);
 8000cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	3320      	adds	r3, #32
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	b219      	sxth	r1, r3
 8000d08:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000d0c:	1d38      	adds	r0, r7, #4
 8000d0e:	2301      	movs	r3, #1
 8000d10:	f002 fcda 	bl	80036c8 <translation_entity>
				currentDx = 0;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	@ (8000d8c <controller_test+0xd8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
				break;
 8000d1a:	e033      	b.n	8000d84 <controller_test+0xd0>
			case DxLeft:
				translation_entity(&entity, entity.x0-32, entity.y0, 1);
 8000d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	3b20      	subs	r3, #32
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	b219      	sxth	r1, r3
 8000d28:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000d2c:	1d38      	adds	r0, r7, #4
 8000d2e:	2301      	movs	r3, #1
 8000d30:	f002 fcca 	bl	80036c8 <translation_entity>
				currentDx = 0;
 8000d34:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <controller_test+0xd8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
				break;
 8000d3a:	e023      	b.n	8000d84 <controller_test+0xd0>
			case DxUp:
				translation_entity(&entity, entity.x0, entity.y0-32, 1);
 8000d3c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000d40:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	3b20      	subs	r3, #32
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	1d38      	adds	r0, r7, #4
 8000d4e:	2301      	movs	r3, #1
 8000d50:	f002 fcba 	bl	80036c8 <translation_entity>
				currentDx = 0;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <controller_test+0xd8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
				break;
 8000d5a:	e013      	b.n	8000d84 <controller_test+0xd0>
			case DxDown:
				translation_entity(&entity, entity.x0, entity.y0+32, 1);
 8000d5c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000d60:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	3320      	adds	r3, #32
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	1d38      	adds	r0, r7, #4
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f002 fcaa 	bl	80036c8 <translation_entity>
				currentDx = 0;
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <controller_test+0xd8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
				break;
 8000d7a:	e003      	b.n	8000d84 <controller_test+0xd0>
			default:
				currentDx = 0;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <controller_test+0xd8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
				break;
 8000d82:	bf00      	nop
		}

		kernel_delay(50);
 8000d84:	2032      	movs	r0, #50	@ 0x32
 8000d86:	f003 fa97 	bl	80042b8 <kernel_delay>
		switch(currentDx)
 8000d8a:	e7a8      	b.n	8000cde <controller_test+0x2a>
 8000d8c:	20000092 	.word	0x20000092

08000d90 <Task0>:
	}

}

static volatile void Task0()
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0

	ENTITY entity;
	entity.x0 = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	813b      	strh	r3, [r7, #8]
	entity.x1 = 64;
 8000d9e:	2340      	movs	r3, #64	@ 0x40
 8000da0:	817b      	strh	r3, [r7, #10]
	entity.y1 = 64;
 8000da2:	2340      	movs	r3, #64	@ 0x40
 8000da4:	81bb      	strh	r3, [r7, #12]
	entity.id = 0x80;
 8000da6:	2380      	movs	r3, #128	@ 0x80
 8000da8:	713b      	strb	r3, [r7, #4]
	entity.ST.color = 0xF100;
 8000daa:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8000dae:	823b      	strh	r3, [r7, #16]
    {
        //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
        //mutex = 1;
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
        translation_test(&entity, 1, 0);
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	2101      	movs	r1, #1
 8000db6:	4618      	mov	r0, r3
 8000db8:	f002 fdbc 	bl	8003934 <translation_test>
 8000dbc:	e7f8      	b.n	8000db0 <Task0+0x20>
	...

08000dc0 <Task1>:
    	//mutex = 0;
    }
}

static volatile void Task1()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0

    while(1)
    {
    	play_audio_file("Audio/acoustic.txt");
 8000dc4:	4803      	ldr	r0, [pc, #12]	@ (8000dd4 <Task1+0x14>)
 8000dc6:	f001 f9b7 	bl	8002138 <play_audio_file>
    	kernel_delay(20);
 8000dca:	2014      	movs	r0, #20
 8000dcc:	f003 fa74 	bl	80042b8 <kernel_delay>
    	play_audio_file("Audio/acoustic.txt");
 8000dd0:	bf00      	nop
 8000dd2:	e7f7      	b.n	8000dc4 <Task1+0x4>
 8000dd4:	080109b8 	.word	0x080109b8

08000dd8 <Task2>:
    }
}

static volatile void Task2()
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
	ENTITY entity;
	entity.x0 = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 300;
 8000de2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000de6:	813b      	strh	r3, [r7, #8]
	entity.x1 = 64;
 8000de8:	2340      	movs	r3, #64	@ 0x40
 8000dea:	817b      	strh	r3, [r7, #10]
	entity.y1 = 64;
 8000dec:	2340      	movs	r3, #64	@ 0x40
 8000dee:	81bb      	strh	r3, [r7, #12]
	entity.id = 0x80;
 8000df0:	2380      	movs	r3, #128	@ 0x80
 8000df2:	713b      	strb	r3, [r7, #4]
	entity.ST.color = 0xF100;
 8000df4:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8000df8:	823b      	strh	r3, [r7, #16]

    	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
    	//flagg = 1;
    	//mutex = 1;
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
        translation_test(&entity, 1, 0);
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2101      	movs	r1, #1
 8000e00:	4618      	mov	r0, r3
 8000e02:	f002 fd97 	bl	8003934 <translation_test>
 8000e06:	e7f8      	b.n	8000dfa <Task2+0x22>

08000e08 <Task3>:

    }
}

static volatile void Task3()
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	while(1)
	{
		controller_test();
 8000e0c:	f7ff ff52 	bl	8000cb4 <controller_test>
 8000e10:	e7fc      	b.n	8000e0c <Task3+0x4>
	...

08000e14 <demo_os_1>:
	}
}


static void demo_os_1()
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af02      	add	r7, sp, #8
	  BackGroundColor = 0xFFFF;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <demo_os_1+0x4c>)
 8000e1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e20:	801a      	strh	r2, [r3, #0]
	  fill_screen2(BackGroundColor);
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <demo_os_1+0x4c>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f002 f810 	bl	8002e4c <fill_screen2>
	  print_string(128, 128, "os demo",0xF100, BackGroundColor);
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <demo_os_1+0x4c>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8000e36:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <demo_os_1+0x50>)
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	2080      	movs	r0, #128	@ 0x80
 8000e3c:	f002 f962 	bl	8003104 <print_string>

	  kernel_add_process(Task0);
 8000e40:	4809      	ldr	r0, [pc, #36]	@ (8000e68 <demo_os_1+0x54>)
 8000e42:	f003 f93d 	bl	80040c0 <kernel_add_process>
	  kernel_add_process(Task1);
 8000e46:	4809      	ldr	r0, [pc, #36]	@ (8000e6c <demo_os_1+0x58>)
 8000e48:	f003 f93a 	bl	80040c0 <kernel_add_process>
	  kernel_add_process(Task2);
 8000e4c:	4808      	ldr	r0, [pc, #32]	@ (8000e70 <demo_os_1+0x5c>)
 8000e4e:	f003 f937 	bl	80040c0 <kernel_add_process>
	  kernel_add_process(Task3);
 8000e52:	4808      	ldr	r0, [pc, #32]	@ (8000e74 <demo_os_1+0x60>)
 8000e54:	f003 f934 	bl	80040c0 <kernel_add_process>
	  //kernel_add_process(Task4);
	  //kernel_add_process(Task5);
	  kernel_start();
 8000e58:	f003 fa10 	bl	800427c <kernel_start>

	  while(1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <demo_os_1+0x48>
 8000e60:	20000008 	.word	0x20000008
 8000e64:	080109cc 	.word	0x080109cc
 8000e68:	08000d91 	.word	0x08000d91
 8000e6c:	08000dc1 	.word	0x08000dc1
 8000e70:	08000dd9 	.word	0x08000dd9
 8000e74:	08000e09 	.word	0x08000e09

08000e78 <int_to_string>:
	  }
}


static void int_to_string(uint8_t n, char *s)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
	uint16_t divider = 1;
 8000e84:	2301      	movs	r3, #1
 8000e86:	81fb      	strh	r3, [r7, #14]
	uint8_t temp = n;
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	733b      	strb	r3, [r7, #12]

	uint8_t c = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	72fb      	strb	r3, [r7, #11]
	uint8_t i = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	737b      	strb	r3, [r7, #13]

	if(n == 0)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d113      	bne.n	8000ec2 <int_to_string+0x4a>
	{
		s[i++] = '0';
 8000e9a:	7b7b      	ldrb	r3, [r7, #13]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	737a      	strb	r2, [r7, #13]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	2230      	movs	r2, #48	@ 0x30
 8000ea8:	701a      	strb	r2, [r3, #0]
		s[i] = '\0';
 8000eaa:	7b7b      	ldrb	r3, [r7, #13]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
		return;
 8000eb4:	e030      	b.n	8000f18 <int_to_string+0xa0>
	}

	while((n/divider)>=10)
	{
		divider *= 10;
 8000eb6:	89fb      	ldrh	r3, [r7, #14]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	0092      	lsls	r2, r2, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	81fb      	strh	r3, [r7, #14]
	while((n/divider)>=10)
 8000ec2:	79fa      	ldrb	r2, [r7, #7]
 8000ec4:	89fb      	ldrh	r3, [r7, #14]
 8000ec6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000eca:	2b09      	cmp	r3, #9
 8000ecc:	dcf3      	bgt.n	8000eb6 <int_to_string+0x3e>
	}

	do
	{
		c = n/divider;
 8000ece:	79fa      	ldrb	r2, [r7, #7]
 8000ed0:	89fb      	ldrh	r3, [r7, #14]
 8000ed2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ed6:	72fb      	strb	r3, [r7, #11]
		s[i++] = c + '0';
 8000ed8:	7b7b      	ldrb	r3, [r7, #13]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	737a      	strb	r2, [r7, #13]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	7afa      	ldrb	r2, [r7, #11]
 8000ee6:	3230      	adds	r2, #48	@ 0x30
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	701a      	strb	r2, [r3, #0]

		n %= divider;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	89fa      	ldrh	r2, [r7, #14]
 8000ef0:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ef4:	fb01 f202 	mul.w	r2, r1, r2
 8000ef8:	1a9b      	subs	r3, r3, r2
 8000efa:	71fb      	strb	r3, [r7, #7]
		divider /= 10;
 8000efc:	89fb      	ldrh	r3, [r7, #14]
 8000efe:	4a09      	ldr	r2, [pc, #36]	@ (8000f24 <int_to_string+0xac>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	08db      	lsrs	r3, r3, #3
 8000f06:	81fb      	strh	r3, [r7, #14]

	}while(divider != 0);
 8000f08:	89fb      	ldrh	r3, [r7, #14]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d1df      	bne.n	8000ece <int_to_string+0x56>

	s[i] = '\0';
 8000f0e:	7b7b      	ldrb	r3, [r7, #13]
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]

}
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	cccccccd 	.word	0xcccccccd

08000f28 <translation_controller_test>:

static void translation_controller_test()
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af02      	add	r7, sp, #8
	fill_screen2(BackGroundColor);
 8000f2e:	4b84      	ldr	r3, [pc, #528]	@ (8001140 <translation_controller_test+0x218>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 ff8a 	bl	8002e4c <fill_screen2>

	ENTITY entity;
	entity.x0 = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	817b      	strh	r3, [r7, #10]
	entity.y0 = 300;
 8000f3c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000f40:	81bb      	strh	r3, [r7, #12]
	entity.x1 = 64;
 8000f42:	2340      	movs	r3, #64	@ 0x40
 8000f44:	81fb      	strh	r3, [r7, #14]
	entity.y1 = 64;
 8000f46:	2340      	movs	r3, #64	@ 0x40
 8000f48:	823b      	strh	r3, [r7, #16]
	entity.id = 0x80;
 8000f4a:	2380      	movs	r3, #128	@ 0x80
 8000f4c:	723b      	strb	r3, [r7, #8]
	entity.ST.color = 0xF100;
 8000f4e:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8000f52:	82bb      	strh	r3, [r7, #20]

	uint8_t step = 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	77fb      	strb	r3, [r7, #31]
	char stepScore[4];
	currentDx = 0;
 8000f58:	4b7a      	ldr	r3, [pc, #488]	@ (8001144 <translation_controller_test+0x21c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]

	draw_entity(&entity);
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 faa4 	bl	80034b0 <draw_entity>
	int_to_string(step, stepScore);
 8000f68:	1d3a      	adds	r2, r7, #4
 8000f6a:	7ffb      	ldrb	r3, [r7, #31]
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff82 	bl	8000e78 <int_to_string>
	print_string(32, 460, stepScore, BLACK, BackGroundColor);
 8000f74:	4b72      	ldr	r3, [pc, #456]	@ (8001140 <translation_controller_test+0x218>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	1d3a      	adds	r2, r7, #4
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8000f82:	2020      	movs	r0, #32
 8000f84:	f002 f8be 	bl	8003104 <print_string>

	while(1)
	{

		switch(currentDx)
 8000f88:	4b6e      	ldr	r3, [pc, #440]	@ (8001144 <translation_controller_test+0x21c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2bbb      	cmp	r3, #187	@ 0xbb
 8000f8e:	d05d      	beq.n	800104c <translation_controller_test+0x124>
 8000f90:	2bbb      	cmp	r3, #187	@ 0xbb
 8000f92:	f300 80c9 	bgt.w	8001128 <translation_controller_test+0x200>
 8000f96:	2b77      	cmp	r3, #119	@ 0x77
 8000f98:	d045      	beq.n	8001026 <translation_controller_test+0xfe>
 8000f9a:	2b77      	cmp	r3, #119	@ 0x77
 8000f9c:	f300 80c4 	bgt.w	8001128 <translation_controller_test+0x200>
 8000fa0:	2b55      	cmp	r3, #85	@ 0x55
 8000fa2:	d02d      	beq.n	8001000 <translation_controller_test+0xd8>
 8000fa4:	2b55      	cmp	r3, #85	@ 0x55
 8000fa6:	f300 80bf 	bgt.w	8001128 <translation_controller_test+0x200>
 8000faa:	2b11      	cmp	r3, #17
 8000fac:	d002      	beq.n	8000fb4 <translation_controller_test+0x8c>
 8000fae:	2b33      	cmp	r3, #51	@ 0x33
 8000fb0:	d013      	beq.n	8000fda <translation_controller_test+0xb2>
 8000fb2:	e0b9      	b.n	8001128 <translation_controller_test+0x200>
		{
			case DxRight:
				translation_entity(&entity, entity.x0+step, entity.y0, 0);
 8000fb4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	b219      	sxth	r1, r3
 8000fc4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000fc8:	f107 0008 	add.w	r0, r7, #8
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f002 fb7b 	bl	80036c8 <translation_entity>
				currentDx = 0;
 8000fd2:	4b5c      	ldr	r3, [pc, #368]	@ (8001144 <translation_controller_test+0x21c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
				break;
 8000fd8:	e0aa      	b.n	8001130 <translation_controller_test+0x208>
			case DxLeft:
				translation_entity(&entity, entity.x0-step, entity.y0, 0);
 8000fda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	7ffb      	ldrb	r3, [r7, #31]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	b219      	sxth	r1, r3
 8000fea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000fee:	f107 0008 	add.w	r0, r7, #8
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f002 fb68 	bl	80036c8 <translation_entity>
				currentDx = 0;
 8000ff8:	4b52      	ldr	r3, [pc, #328]	@ (8001144 <translation_controller_test+0x21c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
				break;
 8000ffe:	e097      	b.n	8001130 <translation_controller_test+0x208>
			case DxUp:
				translation_entity(&entity, entity.x0, entity.y0-step, 0);
 8001000:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001004:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001008:	b29a      	uxth	r2, r3
 800100a:	7ffb      	ldrb	r3, [r7, #31]
 800100c:	b29b      	uxth	r3, r3
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	b29b      	uxth	r3, r3
 8001012:	b21a      	sxth	r2, r3
 8001014:	f107 0008 	add.w	r0, r7, #8
 8001018:	2300      	movs	r3, #0
 800101a:	f002 fb55 	bl	80036c8 <translation_entity>
				currentDx = 0;
 800101e:	4b49      	ldr	r3, [pc, #292]	@ (8001144 <translation_controller_test+0x21c>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
				break;
 8001024:	e084      	b.n	8001130 <translation_controller_test+0x208>
			case DxDown:
				translation_entity(&entity, entity.x0, entity.y0+step, 0);
 8001026:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800102a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800102e:	b29a      	uxth	r2, r3
 8001030:	7ffb      	ldrb	r3, [r7, #31]
 8001032:	b29b      	uxth	r3, r3
 8001034:	4413      	add	r3, r2
 8001036:	b29b      	uxth	r3, r3
 8001038:	b21a      	sxth	r2, r3
 800103a:	f107 0008 	add.w	r0, r7, #8
 800103e:	2300      	movs	r3, #0
 8001040:	f002 fb42 	bl	80036c8 <translation_entity>
				currentDx = 0;
 8001044:	4b3f      	ldr	r3, [pc, #252]	@ (8001144 <translation_controller_test+0x21c>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
				break;
 800104a:	e071      	b.n	8001130 <translation_controller_test+0x208>
			case DxSelect:
				while(currentDx == DxSelect);
 800104c:	bf00      	nop
 800104e:	4b3d      	ldr	r3, [pc, #244]	@ (8001144 <translation_controller_test+0x21c>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2bbb      	cmp	r3, #187	@ 0xbb
 8001054:	d0fb      	beq.n	800104e <translation_controller_test+0x126>
					switch(currentDx)
 8001056:	4b3b      	ldr	r3, [pc, #236]	@ (8001144 <translation_controller_test+0x21c>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b77      	cmp	r3, #119	@ 0x77
 800105c:	d02f      	beq.n	80010be <translation_controller_test+0x196>
 800105e:	2b77      	cmp	r3, #119	@ 0x77
 8001060:	dc61      	bgt.n	8001126 <translation_controller_test+0x1fe>
 8001062:	2b11      	cmp	r3, #17
 8001064:	d055      	beq.n	8001112 <translation_controller_test+0x1ea>
 8001066:	2b55      	cmp	r3, #85	@ 0x55
 8001068:	d15d      	bne.n	8001126 <translation_controller_test+0x1fe>
					{
						case DxUp:
							if(step >= 32)
 800106a:	7ffb      	ldrb	r3, [r7, #31]
 800106c:	2b1f      	cmp	r3, #31
 800106e:	d903      	bls.n	8001078 <translation_controller_test+0x150>
							{
								currentDx = 0;
 8001070:	4b34      	ldr	r3, [pc, #208]	@ (8001144 <translation_controller_test+0x21c>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
								break;
 8001076:	e057      	b.n	8001128 <translation_controller_test+0x200>
							}
							else
							{
								step++;
 8001078:	7ffb      	ldrb	r3, [r7, #31]
 800107a:	3301      	adds	r3, #1
 800107c:	77fb      	strb	r3, [r7, #31]
								print_string(32, 460, "   ", BackGroundColor, BackGroundColor);
 800107e:	4b30      	ldr	r3, [pc, #192]	@ (8001140 <translation_controller_test+0x218>)
 8001080:	881a      	ldrh	r2, [r3, #0]
 8001082:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <translation_controller_test+0x218>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	4613      	mov	r3, r2
 800108a:	4a2f      	ldr	r2, [pc, #188]	@ (8001148 <translation_controller_test+0x220>)
 800108c:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8001090:	2020      	movs	r0, #32
 8001092:	f002 f837 	bl	8003104 <print_string>
								int_to_string(step, stepScore);
 8001096:	1d3a      	adds	r2, r7, #4
 8001098:	7ffb      	ldrb	r3, [r7, #31]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff feeb 	bl	8000e78 <int_to_string>
								print_string(32, 460, stepScore, BLACK, BackGroundColor);
 80010a2:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <translation_controller_test+0x218>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	1d3a      	adds	r2, r7, #4
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2300      	movs	r3, #0
 80010ac:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 80010b0:	2020      	movs	r0, #32
 80010b2:	f002 f827 	bl	8003104 <print_string>
								currentDx = 0;
 80010b6:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <translation_controller_test+0x21c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
								break;
 80010bc:	e034      	b.n	8001128 <translation_controller_test+0x200>
							}
						case DxDown:
							if(step <= 1)
 80010be:	7ffb      	ldrb	r3, [r7, #31]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d803      	bhi.n	80010cc <translation_controller_test+0x1a4>
							{
								currentDx = 0;
 80010c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001144 <translation_controller_test+0x21c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
								break;
 80010ca:	e02d      	b.n	8001128 <translation_controller_test+0x200>
							}
							else
							{
								step--;
 80010cc:	7ffb      	ldrb	r3, [r7, #31]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	77fb      	strb	r3, [r7, #31]
								print_string(32, 460, "   ", BackGroundColor, BackGroundColor);
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <translation_controller_test+0x218>)
 80010d4:	881a      	ldrh	r2, [r3, #0]
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <translation_controller_test+0x218>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	4613      	mov	r3, r2
 80010de:	4a1a      	ldr	r2, [pc, #104]	@ (8001148 <translation_controller_test+0x220>)
 80010e0:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 80010e4:	2020      	movs	r0, #32
 80010e6:	f002 f80d 	bl	8003104 <print_string>
								int_to_string(step, stepScore);
 80010ea:	1d3a      	adds	r2, r7, #4
 80010ec:	7ffb      	ldrb	r3, [r7, #31]
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fec1 	bl	8000e78 <int_to_string>
								print_string(32, 460, stepScore, BLACK, BackGroundColor);
 80010f6:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <translation_controller_test+0x218>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	1d3a      	adds	r2, r7, #4
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2300      	movs	r3, #0
 8001100:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8001104:	2020      	movs	r0, #32
 8001106:	f001 fffd 	bl	8003104 <print_string>
								currentDx = 0;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <translation_controller_test+0x21c>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
								break;
 8001110:	e00a      	b.n	8001128 <translation_controller_test+0x200>
							}
						case DxRight:
							pback = 1;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <translation_controller_test+0x224>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
							currentDx = 0;
 8001118:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <translation_controller_test+0x21c>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
							HAL_Delay(50);
 800111e:	2032      	movs	r0, #50	@ 0x32
 8001120:	f005 fdc0 	bl	8006ca4 <HAL_Delay>
							return;
 8001124:	e008      	b.n	8001138 <translation_controller_test+0x210>
						default:
							break;
 8001126:	bf00      	nop
					}
			default:
				currentDx = 0;
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <translation_controller_test+0x21c>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
				break;
 800112e:	bf00      	nop
		}

		HAL_Delay(25);
 8001130:	2019      	movs	r0, #25
 8001132:	f005 fdb7 	bl	8006ca4 <HAL_Delay>
		switch(currentDx)
 8001136:	e727      	b.n	8000f88 <translation_controller_test+0x60>

	}

}
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	20000092 	.word	0x20000092
 8001148:	080109d4 	.word	0x080109d4
 800114c:	20000088 	.word	0x20000088

08001150 <scaling_test>:


static void scaling_test(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af02      	add	r7, sp, #8
	/*
	 * Functie pentru testarea operatiei de scalare
	 */

	fill_screen2(BackGroundColor);
 8001156:	4b5c      	ldr	r3, [pc, #368]	@ (80012c8 <scaling_test+0x178>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fe76 	bl	8002e4c <fill_screen2>

	ENTITY entity;
	init_entity_sd(&entity);
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	4618      	mov	r0, r3
 8001164:	f002 f977 	bl	8003456 <init_entity_sd>

	entity.x0 = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	813b      	strh	r3, [r7, #8]
	entity.id = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	713b      	strb	r3, [r7, #4]

	assign_file_path_entity(&entity, "graphic/multi2.bin");
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4955      	ldr	r1, [pc, #340]	@ (80012cc <scaling_test+0x17c>)
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fb24 	bl	80057c6 <assign_file_path_entity>
	draw_entity(&entity);
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4618      	mov	r0, r3
 8001182:	f002 f995 	bl	80034b0 <draw_entity>

	while(1)
	{
		switch(currentDx)
 8001186:	4b52      	ldr	r3, [pc, #328]	@ (80012d0 <scaling_test+0x180>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2bbb      	cmp	r3, #187	@ 0xbb
 800118c:	d051      	beq.n	8001232 <scaling_test+0xe2>
 800118e:	2bbb      	cmp	r3, #187	@ 0xbb
 8001190:	f300 808f 	bgt.w	80012b2 <scaling_test+0x162>
 8001194:	2b77      	cmp	r3, #119	@ 0x77
 8001196:	d03c      	beq.n	8001212 <scaling_test+0xc2>
 8001198:	2b77      	cmp	r3, #119	@ 0x77
 800119a:	f300 808a 	bgt.w	80012b2 <scaling_test+0x162>
 800119e:	2b55      	cmp	r3, #85	@ 0x55
 80011a0:	d027      	beq.n	80011f2 <scaling_test+0xa2>
 80011a2:	2b55      	cmp	r3, #85	@ 0x55
 80011a4:	f300 8085 	bgt.w	80012b2 <scaling_test+0x162>
 80011a8:	2b11      	cmp	r3, #17
 80011aa:	d002      	beq.n	80011b2 <scaling_test+0x62>
 80011ac:	2b33      	cmp	r3, #51	@ 0x33
 80011ae:	d010      	beq.n	80011d2 <scaling_test+0x82>
 80011b0:	e07f      	b.n	80012b2 <scaling_test+0x162>
		{
			case DxRight:
				translation_entity(&entity, entity.x0+16, entity.y0, 0);
 80011b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	3310      	adds	r3, #16
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b219      	sxth	r1, r3
 80011be:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80011c2:	1d38      	adds	r0, r7, #4
 80011c4:	2300      	movs	r3, #0
 80011c6:	f002 fa7f 	bl	80036c8 <translation_entity>
				currentDx = 0;
 80011ca:	4b41      	ldr	r3, [pc, #260]	@ (80012d0 <scaling_test+0x180>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
				break;
 80011d0:	e073      	b.n	80012ba <scaling_test+0x16a>
			case DxLeft:
				translation_entity(&entity, entity.x0-16, entity.y0, 0);
 80011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	3b10      	subs	r3, #16
 80011da:	b29b      	uxth	r3, r3
 80011dc:	b219      	sxth	r1, r3
 80011de:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80011e2:	1d38      	adds	r0, r7, #4
 80011e4:	2300      	movs	r3, #0
 80011e6:	f002 fa6f 	bl	80036c8 <translation_entity>
				currentDx = 0;
 80011ea:	4b39      	ldr	r3, [pc, #228]	@ (80012d0 <scaling_test+0x180>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
				break;
 80011f0:	e063      	b.n	80012ba <scaling_test+0x16a>
			case DxUp:
				translation_entity(&entity, entity.x0, entity.y0-16, 0);
 80011f2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80011f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	3b10      	subs	r3, #16
 80011fe:	b29b      	uxth	r3, r3
 8001200:	b21a      	sxth	r2, r3
 8001202:	1d38      	adds	r0, r7, #4
 8001204:	2300      	movs	r3, #0
 8001206:	f002 fa5f 	bl	80036c8 <translation_entity>
				currentDx = 0;
 800120a:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <scaling_test+0x180>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
				break;
 8001210:	e053      	b.n	80012ba <scaling_test+0x16a>
			case DxDown:
				translation_entity(&entity, entity.x0, entity.y0+16, 0);
 8001212:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001216:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800121a:	b29b      	uxth	r3, r3
 800121c:	3310      	adds	r3, #16
 800121e:	b29b      	uxth	r3, r3
 8001220:	b21a      	sxth	r2, r3
 8001222:	1d38      	adds	r0, r7, #4
 8001224:	2300      	movs	r3, #0
 8001226:	f002 fa4f 	bl	80036c8 <translation_entity>
				currentDx = 0;
 800122a:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <scaling_test+0x180>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
				break;
 8001230:	e043      	b.n	80012ba <scaling_test+0x16a>
			case DxSelect:
				while(currentDx == DxSelect);
 8001232:	bf00      	nop
 8001234:	4b26      	ldr	r3, [pc, #152]	@ (80012d0 <scaling_test+0x180>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2bbb      	cmp	r3, #187	@ 0xbb
 800123a:	d0fb      	beq.n	8001234 <scaling_test+0xe4>
					switch(currentDx)
 800123c:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <scaling_test+0x180>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b77      	cmp	r3, #119	@ 0x77
 8001242:	d016      	beq.n	8001272 <scaling_test+0x122>
 8001244:	2b77      	cmp	r3, #119	@ 0x77
 8001246:	dc33      	bgt.n	80012b0 <scaling_test+0x160>
 8001248:	2b11      	cmp	r3, #17
 800124a:	d023      	beq.n	8001294 <scaling_test+0x144>
 800124c:	2b55      	cmp	r3, #85	@ 0x55
 800124e:	d12f      	bne.n	80012b0 <scaling_test+0x160>
					{
						case DxUp:
							erase_entity(entity);
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001258:	f002 febe 	bl	8003fd8 <erase_entity>
							scaling_entity(&entity, 2);
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001262:	4618      	mov	r0, r3
 8001264:	f002 fc3a 	bl	8003adc <scaling_entity>
							draw_entity(&entity);
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	4618      	mov	r0, r3
 800126c:	f002 f920 	bl	80034b0 <draw_entity>
							break;
 8001270:	e01f      	b.n	80012b2 <scaling_test+0x162>
						case DxDown:
							erase_entity(entity);
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800127a:	f002 fead 	bl	8003fd8 <erase_entity>
							scaling_entity(&entity, 0.5);
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fc29 	bl	8003adc <scaling_entity>
							draw_entity(&entity);
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4618      	mov	r0, r3
 800128e:	f002 f90f 	bl	80034b0 <draw_entity>
							break;
 8001292:	e00e      	b.n	80012b2 <scaling_test+0x162>
						case DxRight:
							free_entity_sd(&entity);
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	4618      	mov	r0, r3
 8001298:	f002 f8f8 	bl	800348c <free_entity_sd>
							pback = 1;
 800129c:	4b0d      	ldr	r3, [pc, #52]	@ (80012d4 <scaling_test+0x184>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
							currentDx = 0;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <scaling_test+0x180>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
							HAL_Delay(50);
 80012a8:	2032      	movs	r0, #50	@ 0x32
 80012aa:	f005 fcfb 	bl	8006ca4 <HAL_Delay>
 80012ae:	e008      	b.n	80012c2 <scaling_test+0x172>
							return;
						default:
							break;
 80012b0:	bf00      	nop
					}
			default:
				currentDx = 0;
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <scaling_test+0x180>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
				break;
 80012b8:	bf00      	nop
		}

		HAL_Delay(25);
 80012ba:	2019      	movs	r0, #25
 80012bc:	f005 fcf2 	bl	8006ca4 <HAL_Delay>
		switch(currentDx)
 80012c0:	e761      	b.n	8001186 <scaling_test+0x36>

	}

	pback = 1;

}
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000008 	.word	0x20000008
 80012cc:	080109d8 	.word	0x080109d8
 80012d0:	20000092 	.word	0x20000092
 80012d4:	20000088 	.word	0x20000088

080012d8 <rotation_test>:


static void rotation_test(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af02      	add	r7, sp, #8
	/*
	 * Functie pentru testarea operatiei grafice
	 * de rotatie
	 */

	fill_screen2(BackGroundColor);
 80012de:	4b33      	ldr	r3, [pc, #204]	@ (80013ac <rotation_test+0xd4>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f001 fdb2 	bl	8002e4c <fill_screen2>

	ENTITY entity;
	init_entity_sd(&entity);
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 f8b3 	bl	8003456 <init_entity_sd>

	entity.x0 = 80;
 80012f0:	2350      	movs	r3, #80	@ 0x50
 80012f2:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 80;
 80012f4:	2350      	movs	r3, #80	@ 0x50
 80012f6:	813b      	strh	r3, [r7, #8]
	entity.id = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	713b      	strb	r3, [r7, #4]

	assign_file_path_entity(&entity, "graphic/multi2.bin");
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	492c      	ldr	r1, [pc, #176]	@ (80013b0 <rotation_test+0xd8>)
 8001300:	4618      	mov	r0, r3
 8001302:	f004 fa60 	bl	80057c6 <assign_file_path_entity>
	draw_entity(&entity);
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4618      	mov	r0, r3
 800130a:	f002 f8d1 	bl	80034b0 <draw_entity>
	scaling_entity(&entity, 60);
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 80013b4 <rotation_test+0xdc>
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fbe1 	bl	8003adc <scaling_entity>
	erase_entity(entity);
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001322:	f002 fe59 	bl	8003fd8 <erase_entity>
	draw_entity(&entity);
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4618      	mov	r0, r3
 800132a:	f002 f8c1 	bl	80034b0 <draw_entity>

	while(1)
	{
		switch(currentDx)
 800132e:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <rotation_test+0xe0>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b77      	cmp	r3, #119	@ 0x77
 8001334:	d025      	beq.n	8001382 <rotation_test+0xaa>
 8001336:	2b77      	cmp	r3, #119	@ 0x77
 8001338:	dc29      	bgt.n	800138e <rotation_test+0xb6>
 800133a:	2b55      	cmp	r3, #85	@ 0x55
 800133c:	d01b      	beq.n	8001376 <rotation_test+0x9e>
 800133e:	2b55      	cmp	r3, #85	@ 0x55
 8001340:	dc25      	bgt.n	800138e <rotation_test+0xb6>
 8001342:	2b11      	cmp	r3, #17
 8001344:	d002      	beq.n	800134c <rotation_test+0x74>
 8001346:	2b33      	cmp	r3, #51	@ 0x33
 8001348:	d00e      	beq.n	8001368 <rotation_test+0x90>
 800134a:	e020      	b.n	800138e <rotation_test+0xb6>
		{
			case DxRight:
				free_entity_sd(&entity);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4618      	mov	r0, r3
 8001350:	f002 f89c 	bl	800348c <free_entity_sd>
				pback = 1;
 8001354:	4b19      	ldr	r3, [pc, #100]	@ (80013bc <rotation_test+0xe4>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
				currentDx = 0;
 800135a:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <rotation_test+0xe0>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
				HAL_Delay(50);
 8001360:	2032      	movs	r0, #50	@ 0x32
 8001362:	f005 fc9f 	bl	8006ca4 <HAL_Delay>
				return;
 8001366:	e01d      	b.n	80013a4 <rotation_test+0xcc>
			case DxLeft:
				rotate_entity(&entity, 270);
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fd38 	bl	8003de4 <rotate_entity>
				break;
 8001374:	e00f      	b.n	8001396 <rotation_test+0xbe>
			case DxUp:
				rotate_entity(&entity, 90);
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	215a      	movs	r1, #90	@ 0x5a
 800137a:	4618      	mov	r0, r3
 800137c:	f002 fd32 	bl	8003de4 <rotate_entity>
				break;
 8001380:	e009      	b.n	8001396 <rotation_test+0xbe>
			case DxDown:
				rotate_entity(&entity, 180);
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	21b4      	movs	r1, #180	@ 0xb4
 8001386:	4618      	mov	r0, r3
 8001388:	f002 fd2c 	bl	8003de4 <rotate_entity>
				break;
 800138c:	e003      	b.n	8001396 <rotation_test+0xbe>
			default:
				currentDx = 0;
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <rotation_test+0xe0>)
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
				break;
 8001394:	bf00      	nop
		}

		currentDx = 0;
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <rotation_test+0xe0>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(25);
 800139c:	2019      	movs	r0, #25
 800139e:	f005 fc81 	bl	8006ca4 <HAL_Delay>
		switch(currentDx)
 80013a2:	e7c4      	b.n	800132e <rotation_test+0x56>


	}


}
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008
 80013b0:	080109d8 	.word	0x080109d8
 80013b4:	42700000 	.word	0x42700000
 80013b8:	20000092 	.word	0x20000092
 80013bc:	20000088 	.word	0x20000088

080013c0 <graphics_test>:


static void graphics_test(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af02      	add	r7, sp, #8
	 * Aplicatie de testare grafica.
	 * Se vor testa functiile de scalare,
	 * translatie si rotatie
	 */

	fill_screen2(BackGroundColor);
 80013c6:	4b54      	ldr	r3, [pc, #336]	@ (8001518 <graphics_test+0x158>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f001 fd3e 	bl	8002e4c <fill_screen2>

	ENTITY entity;
	init_entity_sd(&entity);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 f83f 	bl	8003456 <init_entity_sd>

	entity.x0 = 100;
 80013d8:	2364      	movs	r3, #100	@ 0x64
 80013da:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 100;
 80013dc:	2364      	movs	r3, #100	@ 0x64
 80013de:	813b      	strh	r3, [r7, #8]
	entity.id = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	713b      	strb	r3, [r7, #4]

	assign_file_path_entity(&entity, "graphic/multi2.bin");
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	494d      	ldr	r1, [pc, #308]	@ (800151c <graphics_test+0x15c>)
 80013e8:	4618      	mov	r0, r3
 80013ea:	f004 f9ec 	bl	80057c6 <assign_file_path_entity>
	draw_entity(&entity);
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4618      	mov	r0, r3
 80013f2:	f002 f85d 	bl	80034b0 <draw_entity>

	HAL_Delay(1000);
 80013f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013fa:	f005 fc53 	bl	8006ca4 <HAL_Delay>

	erase_entity(entity);
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001406:	f002 fde7 	bl	8003fd8 <erase_entity>
	scaling_entity(&entity, 38);
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8001520 <graphics_test+0x160>
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fb63 	bl	8003adc <scaling_entity>
	draw_entity(&entity);
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f002 f849 	bl	80034b0 <draw_entity>

	HAL_Delay(1000);
 800141e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001422:	f005 fc3f 	bl	8006ca4 <HAL_Delay>

	erase_entity(entity);
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800142e:	f002 fdd3 	bl	8003fd8 <erase_entity>
	rotate_entity(&entity, 90);
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	215a      	movs	r1, #90	@ 0x5a
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fcd4 	bl	8003de4 <rotate_entity>

	HAL_Delay(1000);
 800143c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001440:	f005 fc30 	bl	8006ca4 <HAL_Delay>

	erase_entity(entity);
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144c:	f002 fdc4 	bl	8003fd8 <erase_entity>
	draw_entity(&entity);
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4618      	mov	r0, r3
 8001454:	f002 f82c 	bl	80034b0 <draw_entity>

	HAL_Delay(1000);
 8001458:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800145c:	f005 fc22 	bl	8006ca4 <HAL_Delay>

	erase_entity(entity);
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001468:	f002 fdb6 	bl	8003fd8 <erase_entity>
	scaling_entity(&entity, 0.5);
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001472:	4618      	mov	r0, r3
 8001474:	f002 fb32 	bl	8003adc <scaling_entity>
	draw_entity(&entity);
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4618      	mov	r0, r3
 800147c:	f002 f818 	bl	80034b0 <draw_entity>

	HAL_Delay(1000);
 8001480:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001484:	f005 fc0e 	bl	8006ca4 <HAL_Delay>

	fill_screen2(BackGroundColor);
 8001488:	4b23      	ldr	r3, [pc, #140]	@ (8001518 <graphics_test+0x158>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f001 fcdd 	bl	8002e4c <fill_screen2>
	entity.x0 = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	813b      	strh	r3, [r7, #8]
	assign_file_path_entity(&entity, "graphic/img8.bin");
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4921      	ldr	r1, [pc, #132]	@ (8001524 <graphics_test+0x164>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f004 f991 	bl	80057c6 <assign_file_path_entity>
	draw_entity(&entity);
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4618      	mov	r0, r3
 80014a8:	f002 f802 	bl	80034b0 <draw_entity>

	HAL_Delay(1000);
 80014ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014b0:	f005 fbf8 	bl	8006ca4 <HAL_Delay>

	fill_screen2(BackGroundColor);
 80014b4:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <graphics_test+0x158>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f001 fcc7 	bl	8002e4c <fill_screen2>
	scaling_entity(&entity, 0.5);
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80014c4:	4618      	mov	r0, r3
 80014c6:	f002 fb09 	bl	8003adc <scaling_entity>
	draw_entity(&entity);
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 ffef 	bl	80034b0 <draw_entity>

	HAL_Delay(1000);
 80014d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014d6:	f005 fbe5 	bl	8006ca4 <HAL_Delay>

	scaling_entity(&entity, 2);
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 fafb 	bl	8003adc <scaling_entity>
	draw_entity(&entity);
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 ffe1 	bl	80034b0 <draw_entity>
	erase_entity(entity);
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014f6:	f002 fd6f 	bl	8003fd8 <erase_entity>

	HAL_Delay(1000);
 80014fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014fe:	f005 fbd1 	bl	8006ca4 <HAL_Delay>

	free_entity_sd(&entity);
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	4618      	mov	r0, r3
 8001506:	f001 ffc1 	bl	800348c <free_entity_sd>
	pback = 1;
 800150a:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <graphics_test+0x168>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]

}
 8001510:	bf00      	nop
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000008 	.word	0x20000008
 800151c:	080109d8 	.word	0x080109d8
 8001520:	42180000 	.word	0x42180000
 8001524:	080109ec 	.word	0x080109ec
 8001528:	20000088 	.word	0x20000088

0800152c <set_graphics_gui>:


static void set_graphics_gui(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af02      	add	r7, sp, #8
	init_cursor();
 8001532:	f001 fb55 	bl	8002be0 <init_cursor>

	fill_screen1(BackGroundColor);
 8001536:	4b3f      	ldr	r3, [pc, #252]	@ (8001634 <set_graphics_gui+0x108>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f001 fc26 	bl	8002d8c <fill_screen1>
	cursor.y0 = 16;
 8001540:	4b3d      	ldr	r3, [pc, #244]	@ (8001638 <set_graphics_gui+0x10c>)
 8001542:	2210      	movs	r2, #16
 8001544:	809a      	strh	r2, [r3, #4]
	cursor.x0 = 32;
 8001546:	4b3c      	ldr	r3, [pc, #240]	@ (8001638 <set_graphics_gui+0x10c>)
 8001548:	2220      	movs	r2, #32
 800154a:	805a      	strh	r2, [r3, #2]

	print_string(cursor.x0, cursor.y0, "Graphics Player", BLACK, BackGroundColor);
 800154c:	4b3a      	ldr	r3, [pc, #232]	@ (8001638 <set_graphics_gui+0x10c>)
 800154e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001552:	b298      	uxth	r0, r3
 8001554:	4b38      	ldr	r3, [pc, #224]	@ (8001638 <set_graphics_gui+0x10c>)
 8001556:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800155a:	b299      	uxth	r1, r3
 800155c:	4b35      	ldr	r3, [pc, #212]	@ (8001634 <set_graphics_gui+0x108>)
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2300      	movs	r3, #0
 8001564:	4a35      	ldr	r2, [pc, #212]	@ (800163c <set_graphics_gui+0x110>)
 8001566:	f001 fdcd 	bl	8003104 <print_string>
	cursor.y0 += 32;
 800156a:	4b33      	ldr	r3, [pc, #204]	@ (8001638 <set_graphics_gui+0x10c>)
 800156c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001570:	b29b      	uxth	r3, r3
 8001572:	3320      	adds	r3, #32
 8001574:	b29b      	uxth	r3, r3
 8001576:	b21a      	sxth	r2, r3
 8001578:	4b2f      	ldr	r3, [pc, #188]	@ (8001638 <set_graphics_gui+0x10c>)
 800157a:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Test Demo", BLACK, BackGroundColor);
 800157c:	4b2e      	ldr	r3, [pc, #184]	@ (8001638 <set_graphics_gui+0x10c>)
 800157e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001582:	b298      	uxth	r0, r3
 8001584:	4b2c      	ldr	r3, [pc, #176]	@ (8001638 <set_graphics_gui+0x10c>)
 8001586:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800158a:	b299      	uxth	r1, r3
 800158c:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <set_graphics_gui+0x108>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2300      	movs	r3, #0
 8001594:	4a2a      	ldr	r2, [pc, #168]	@ (8001640 <set_graphics_gui+0x114>)
 8001596:	f001 fdb5 	bl	8003104 <print_string>
	cursor.y0 += 16;
 800159a:	4b27      	ldr	r3, [pc, #156]	@ (8001638 <set_graphics_gui+0x10c>)
 800159c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3310      	adds	r3, #16
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	4b23      	ldr	r3, [pc, #140]	@ (8001638 <set_graphics_gui+0x10c>)
 80015aa:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Scaling", BLACK, BackGroundColor);
 80015ac:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <set_graphics_gui+0x10c>)
 80015ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015b2:	b298      	uxth	r0, r3
 80015b4:	4b20      	ldr	r3, [pc, #128]	@ (8001638 <set_graphics_gui+0x10c>)
 80015b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015ba:	b299      	uxth	r1, r3
 80015bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <set_graphics_gui+0x108>)
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2300      	movs	r3, #0
 80015c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001644 <set_graphics_gui+0x118>)
 80015c6:	f001 fd9d 	bl	8003104 <print_string>
	cursor.y0 += 16;
 80015ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <set_graphics_gui+0x10c>)
 80015cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3310      	adds	r3, #16
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <set_graphics_gui+0x10c>)
 80015da:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Translation", BLACK, BackGroundColor);
 80015dc:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <set_graphics_gui+0x10c>)
 80015de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015e2:	b298      	uxth	r0, r3
 80015e4:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <set_graphics_gui+0x10c>)
 80015e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015ea:	b299      	uxth	r1, r3
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <set_graphics_gui+0x108>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2300      	movs	r3, #0
 80015f4:	4a14      	ldr	r2, [pc, #80]	@ (8001648 <set_graphics_gui+0x11c>)
 80015f6:	f001 fd85 	bl	8003104 <print_string>
	cursor.y0 += 16;
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <set_graphics_gui+0x10c>)
 80015fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001600:	b29b      	uxth	r3, r3
 8001602:	3310      	adds	r3, #16
 8001604:	b29b      	uxth	r3, r3
 8001606:	b21a      	sxth	r2, r3
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <set_graphics_gui+0x10c>)
 800160a:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Rotation", BLACK, BackGroundColor);
 800160c:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <set_graphics_gui+0x10c>)
 800160e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001612:	b298      	uxth	r0, r3
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <set_graphics_gui+0x10c>)
 8001616:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800161a:	b299      	uxth	r1, r3
 800161c:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <set_graphics_gui+0x108>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2300      	movs	r3, #0
 8001624:	4a09      	ldr	r2, [pc, #36]	@ (800164c <set_graphics_gui+0x120>)
 8001626:	f001 fd6d 	bl	8003104 <print_string>

	init_cursor();
 800162a:	f001 fad9 	bl	8002be0 <init_cursor>

}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000008 	.word	0x20000008
 8001638:	20000094 	.word	0x20000094
 800163c:	08010a00 	.word	0x08010a00
 8001640:	08010a10 	.word	0x08010a10
 8001644:	08010a1c 	.word	0x08010a1c
 8001648:	08010a24 	.word	0x08010a24
 800164c:	08010a30 	.word	0x08010a30

08001650 <list_graphics>:


static void list_graphics(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
	/*
	 * Interfata pentru selectarea si redarea unor
	 * melodii alese de utilizator
	 */

	set_graphics_gui();
 8001656:	f7ff ff69 	bl	800152c <set_graphics_gui>

	cursor.x0 = 0;
 800165a:	4b55      	ldr	r3, [pc, #340]	@ (80017b0 <list_graphics+0x160>)
 800165c:	2200      	movs	r2, #0
 800165e:	805a      	strh	r2, [r3, #2]
	cursor.y0 = 48;
 8001660:	4b53      	ldr	r3, [pc, #332]	@ (80017b0 <list_graphics+0x160>)
 8001662:	2230      	movs	r2, #48	@ 0x30
 8001664:	809a      	strh	r2, [r3, #4]

	int16_t x = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	80fb      	strh	r3, [r7, #6]
	int16_t y = 48;
 800166a:	2330      	movs	r3, #48	@ 0x30
 800166c:	80bb      	strh	r3, [r7, #4]

	uint8_t Q = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	70fb      	strb	r3, [r7, #3]

	uint8_t nrOptions = 4;
 8001672:	2304      	movs	r3, #4
 8001674:	70bb      	strb	r3, [r7, #2]
	nrOptions--; /*0 inclus*/
 8001676:	78bb      	ldrb	r3, [r7, #2]
 8001678:	3b01      	subs	r3, #1
 800167a:	70bb      	strb	r3, [r7, #2]

	draw_entity(&cursor);
 800167c:	484c      	ldr	r0, [pc, #304]	@ (80017b0 <list_graphics+0x160>)
 800167e:	f001 ff17 	bl	80034b0 <draw_entity>

	currentDx = 0;
 8001682:	4b4c      	ldr	r3, [pc, #304]	@ (80017b4 <list_graphics+0x164>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]

	while(1)
	{

		if(pback == 1)
 8001688:	4b4b      	ldr	r3, [pc, #300]	@ (80017b8 <list_graphics+0x168>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d116      	bne.n	80016be <list_graphics+0x6e>
			/*
			 * Initializare gui si pt cazul in care ne intaorcem
			 * dintr-o interfata selectat
			 */

			set_graphics_gui();
 8001690:	f7ff ff4c 	bl	800152c <set_graphics_gui>

			cursor.x0 = 0;
 8001694:	4b46      	ldr	r3, [pc, #280]	@ (80017b0 <list_graphics+0x160>)
 8001696:	2200      	movs	r2, #0
 8001698:	805a      	strh	r2, [r3, #2]
			cursor.y0 = 48;
 800169a:	4b45      	ldr	r3, [pc, #276]	@ (80017b0 <list_graphics+0x160>)
 800169c:	2230      	movs	r2, #48	@ 0x30
 800169e:	809a      	strh	r2, [r3, #4]

			x = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	80fb      	strh	r3, [r7, #6]
			y = 48;
 80016a4:	2330      	movs	r3, #48	@ 0x30
 80016a6:	80bb      	strh	r3, [r7, #4]

			Q = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	70fb      	strb	r3, [r7, #3]

			draw_entity(&cursor);
 80016ac:	4840      	ldr	r0, [pc, #256]	@ (80017b0 <list_graphics+0x160>)
 80016ae:	f001 feff 	bl	80034b0 <draw_entity>

			currentDx = 0;
 80016b2:	4b40      	ldr	r3, [pc, #256]	@ (80017b4 <list_graphics+0x164>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
			pback = 0;
 80016b8:	4b3f      	ldr	r3, [pc, #252]	@ (80017b8 <list_graphics+0x168>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxDown)
 80016be:	4b3d      	ldr	r3, [pc, #244]	@ (80017b4 <list_graphics+0x164>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b77      	cmp	r3, #119	@ 0x77
 80016c4:	d11a      	bne.n	80016fc <list_graphics+0xac>
		{
			if(Q == nrOptions)
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	78bb      	ldrb	r3, [r7, #2]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d104      	bne.n	80016d8 <list_graphics+0x88>
			{
				Q = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	70fb      	strb	r3, [r7, #3]
				y = 48;
 80016d2:	2330      	movs	r3, #48	@ 0x30
 80016d4:	80bb      	strh	r3, [r7, #4]
 80016d6:	e006      	b.n	80016e6 <list_graphics+0x96>
			}

			else
			{
				Q++;
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	3301      	adds	r3, #1
 80016dc:	70fb      	strb	r3, [r7, #3]
				y += 16;
 80016de:	88bb      	ldrh	r3, [r7, #4]
 80016e0:	3310      	adds	r3, #16
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	80bb      	strh	r3, [r7, #4]
			}

			translation_entity(&cursor, x, y, 0);
 80016e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016ea:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80016ee:	2300      	movs	r3, #0
 80016f0:	482f      	ldr	r0, [pc, #188]	@ (80017b0 <list_graphics+0x160>)
 80016f2:	f001 ffe9 	bl	80036c8 <translation_entity>
			currentDx = 0;
 80016f6:	4b2f      	ldr	r3, [pc, #188]	@ (80017b4 <list_graphics+0x164>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxUp)
 80016fc:	4b2d      	ldr	r3, [pc, #180]	@ (80017b4 <list_graphics+0x164>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b55      	cmp	r3, #85	@ 0x55
 8001702:	d11d      	bne.n	8001740 <list_graphics+0xf0>
		{
			if(Q == 0)
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d108      	bne.n	800171c <list_graphics+0xcc>
			{
				Q = nrOptions;
 800170a:	78bb      	ldrb	r3, [r7, #2]
 800170c:	70fb      	strb	r3, [r7, #3]
				y = 48+16*nrOptions;
 800170e:	78bb      	ldrb	r3, [r7, #2]
 8001710:	3303      	adds	r3, #3
 8001712:	b29b      	uxth	r3, r3
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	b29b      	uxth	r3, r3
 8001718:	80bb      	strh	r3, [r7, #4]
 800171a:	e006      	b.n	800172a <list_graphics+0xda>
			}
			else
			{
				Q--;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	3b01      	subs	r3, #1
 8001720:	70fb      	strb	r3, [r7, #3]
				y -= 16;
 8001722:	88bb      	ldrh	r3, [r7, #4]
 8001724:	3b10      	subs	r3, #16
 8001726:	b29b      	uxth	r3, r3
 8001728:	80bb      	strh	r3, [r7, #4]
			}

			translation_entity(&cursor, x, y, 0);
 800172a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800172e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001732:	2300      	movs	r3, #0
 8001734:	481e      	ldr	r0, [pc, #120]	@ (80017b0 <list_graphics+0x160>)
 8001736:	f001 ffc7 	bl	80036c8 <translation_entity>
			currentDx = 0;
 800173a:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <list_graphics+0x164>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxSelect)
 8001740:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <list_graphics+0x164>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2bbb      	cmp	r3, #187	@ 0xbb
 8001746:	d121      	bne.n	800178c <list_graphics+0x13c>
		{
			currentDx = 0;
 8001748:	4b1a      	ldr	r3, [pc, #104]	@ (80017b4 <list_graphics+0x164>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]

			switch(Q)
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	2b03      	cmp	r3, #3
 8001752:	d817      	bhi.n	8001784 <list_graphics+0x134>
 8001754:	a201      	add	r2, pc, #4	@ (adr r2, 800175c <list_graphics+0x10c>)
 8001756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175a:	bf00      	nop
 800175c:	0800176d 	.word	0x0800176d
 8001760:	08001773 	.word	0x08001773
 8001764:	08001779 	.word	0x08001779
 8001768:	0800177f 	.word	0x0800177f
			{
				case 0:
					graphics_test();
 800176c:	f7ff fe28 	bl	80013c0 <graphics_test>
					break;
 8001770:	e009      	b.n	8001786 <list_graphics+0x136>
				case 1:
					scaling_test();
 8001772:	f7ff fced 	bl	8001150 <scaling_test>
					break;
 8001776:	e006      	b.n	8001786 <list_graphics+0x136>
				case 2:
					translation_controller_test();
 8001778:	f7ff fbd6 	bl	8000f28 <translation_controller_test>
					break;
 800177c:	e003      	b.n	8001786 <list_graphics+0x136>
				case 3:
					rotation_test();
 800177e:	f7ff fdab 	bl	80012d8 <rotation_test>
					break;
 8001782:	e000      	b.n	8001786 <list_graphics+0x136>
				default:
					break;
 8001784:	bf00      	nop

			}

			currentDx = 0;
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <list_graphics+0x164>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]

		}

		if(currentDx == DxRight)
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <list_graphics+0x164>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b11      	cmp	r3, #17
 8001792:	d106      	bne.n	80017a2 <list_graphics+0x152>
		{
			pback = 1;
 8001794:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <list_graphics+0x168>)
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
			currentDx = 0;
 800179a:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <list_graphics+0x164>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
			return;
 80017a0:	e003      	b.n	80017aa <list_graphics+0x15a>
		}


		HAL_Delay(25);
 80017a2:	2019      	movs	r0, #25
 80017a4:	f005 fa7e 	bl	8006ca4 <HAL_Delay>
		if(pback == 1)
 80017a8:	e76e      	b.n	8001688 <list_graphics+0x38>


	}


}
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000094 	.word	0x20000094
 80017b4:	20000092 	.word	0x20000092
 80017b8:	20000088 	.word	0x20000088

080017bc <set_audio_effects_gui>:


static void set_audio_effects_gui(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af02      	add	r7, sp, #8
	init_cursor();
 80017c2:	f001 fa0d 	bl	8002be0 <init_cursor>

	fill_screen1(BackGroundColor);
 80017c6:	4b3f      	ldr	r3, [pc, #252]	@ (80018c4 <set_audio_effects_gui+0x108>)
 80017c8:	881b      	ldrh	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f001 fade 	bl	8002d8c <fill_screen1>
	cursor.y0 = 16;
 80017d0:	4b3d      	ldr	r3, [pc, #244]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 80017d2:	2210      	movs	r2, #16
 80017d4:	809a      	strh	r2, [r3, #4]
	cursor.x0 = 32;
 80017d6:	4b3c      	ldr	r3, [pc, #240]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 80017d8:	2220      	movs	r2, #32
 80017da:	805a      	strh	r2, [r3, #2]

	print_string(cursor.x0, cursor.y0, "Choose Filter:", BLACK, BackGroundColor);
 80017dc:	4b3a      	ldr	r3, [pc, #232]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 80017de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017e2:	b298      	uxth	r0, r3
 80017e4:	4b38      	ldr	r3, [pc, #224]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 80017e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ea:	b299      	uxth	r1, r3
 80017ec:	4b35      	ldr	r3, [pc, #212]	@ (80018c4 <set_audio_effects_gui+0x108>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2300      	movs	r3, #0
 80017f4:	4a35      	ldr	r2, [pc, #212]	@ (80018cc <set_audio_effects_gui+0x110>)
 80017f6:	f001 fc85 	bl	8003104 <print_string>
	cursor.y0 += 32;
 80017fa:	4b33      	ldr	r3, [pc, #204]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 80017fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001800:	b29b      	uxth	r3, r3
 8001802:	3320      	adds	r3, #32
 8001804:	b29b      	uxth	r3, r3
 8001806:	b21a      	sxth	r2, r3
 8001808:	4b2f      	ldr	r3, [pc, #188]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 800180a:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Reverb", BLACK, BackGroundColor);
 800180c:	4b2e      	ldr	r3, [pc, #184]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 800180e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001812:	b298      	uxth	r0, r3
 8001814:	4b2c      	ldr	r3, [pc, #176]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 8001816:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800181a:	b299      	uxth	r1, r3
 800181c:	4b29      	ldr	r3, [pc, #164]	@ (80018c4 <set_audio_effects_gui+0x108>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2300      	movs	r3, #0
 8001824:	4a2a      	ldr	r2, [pc, #168]	@ (80018d0 <set_audio_effects_gui+0x114>)
 8001826:	f001 fc6d 	bl	8003104 <print_string>
	cursor.y0 += 16;
 800182a:	4b27      	ldr	r3, [pc, #156]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 800182c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001830:	b29b      	uxth	r3, r3
 8001832:	3310      	adds	r3, #16
 8001834:	b29b      	uxth	r3, r3
 8001836:	b21a      	sxth	r2, r3
 8001838:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 800183a:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Vibrato", BLACK, BackGroundColor);
 800183c:	4b22      	ldr	r3, [pc, #136]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 800183e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001842:	b298      	uxth	r0, r3
 8001844:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 8001846:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800184a:	b299      	uxth	r1, r3
 800184c:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <set_audio_effects_gui+0x108>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2300      	movs	r3, #0
 8001854:	4a1f      	ldr	r2, [pc, #124]	@ (80018d4 <set_audio_effects_gui+0x118>)
 8001856:	f001 fc55 	bl	8003104 <print_string>
	cursor.y0 += 16;
 800185a:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 800185c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001860:	b29b      	uxth	r3, r3
 8001862:	3310      	adds	r3, #16
 8001864:	b29b      	uxth	r3, r3
 8001866:	b21a      	sxth	r2, r3
 8001868:	4b17      	ldr	r3, [pc, #92]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 800186a:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Echo", BLACK, BackGroundColor);
 800186c:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 800186e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001872:	b298      	uxth	r0, r3
 8001874:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 8001876:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800187a:	b299      	uxth	r1, r3
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <set_audio_effects_gui+0x108>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2300      	movs	r3, #0
 8001884:	4a14      	ldr	r2, [pc, #80]	@ (80018d8 <set_audio_effects_gui+0x11c>)
 8001886:	f001 fc3d 	bl	8003104 <print_string>
	cursor.y0 += 16;
 800188a:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 800188c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001890:	b29b      	uxth	r3, r3
 8001892:	3310      	adds	r3, #16
 8001894:	b29b      	uxth	r3, r3
 8001896:	b21a      	sxth	r2, r3
 8001898:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 800189a:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "No Filters", BLACK, BackGroundColor);
 800189c:	4b0a      	ldr	r3, [pc, #40]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 800189e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018a2:	b298      	uxth	r0, r3
 80018a4:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <set_audio_effects_gui+0x10c>)
 80018a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018aa:	b299      	uxth	r1, r3
 80018ac:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <set_audio_effects_gui+0x108>)
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2300      	movs	r3, #0
 80018b4:	4a09      	ldr	r2, [pc, #36]	@ (80018dc <set_audio_effects_gui+0x120>)
 80018b6:	f001 fc25 	bl	8003104 <print_string>

	init_cursor();
 80018ba:	f001 f991 	bl	8002be0 <init_cursor>
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000008 	.word	0x20000008
 80018c8:	20000094 	.word	0x20000094
 80018cc:	08010a3c 	.word	0x08010a3c
 80018d0:	08010a4c 	.word	0x08010a4c
 80018d4:	08010a54 	.word	0x08010a54
 80018d8:	08010a5c 	.word	0x08010a5c
 80018dc:	08010a64 	.word	0x08010a64

080018e0 <list_audio_effects>:


static void list_audio_effects(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0

	pback = 1;
 80018e6:	4b55      	ldr	r3, [pc, #340]	@ (8001a3c <list_audio_effects+0x15c>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]

	cursor.x0 = 0;
 80018ec:	4b54      	ldr	r3, [pc, #336]	@ (8001a40 <list_audio_effects+0x160>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	805a      	strh	r2, [r3, #2]
	cursor.y0 = 48;
 80018f2:	4b53      	ldr	r3, [pc, #332]	@ (8001a40 <list_audio_effects+0x160>)
 80018f4:	2230      	movs	r2, #48	@ 0x30
 80018f6:	809a      	strh	r2, [r3, #4]

	int16_t x = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	80fb      	strh	r3, [r7, #6]
	int16_t y = 48;
 80018fc:	2330      	movs	r3, #48	@ 0x30
 80018fe:	80bb      	strh	r3, [r7, #4]

	uint8_t Q = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	70fb      	strb	r3, [r7, #3]

	uint8_t nrOptions = 4;
 8001904:	2304      	movs	r3, #4
 8001906:	70bb      	strb	r3, [r7, #2]
	nrOptions--; /*0 inclus*/
 8001908:	78bb      	ldrb	r3, [r7, #2]
 800190a:	3b01      	subs	r3, #1
 800190c:	70bb      	strb	r3, [r7, #2]

	currentDx = 0;
 800190e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a44 <list_audio_effects+0x164>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]

	while(1)
	{

		if(pback == 1)
 8001914:	4b49      	ldr	r3, [pc, #292]	@ (8001a3c <list_audio_effects+0x15c>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d113      	bne.n	8001944 <list_audio_effects+0x64>
			/*
			 * Initializare gui si pt cazul in care ne intaorcem
			 * dintr-o interfata selectat
			 */

			set_audio_effects_gui();
 800191c:	f7ff ff4e 	bl	80017bc <set_audio_effects_gui>

			cursor.x0 = 0;
 8001920:	4b47      	ldr	r3, [pc, #284]	@ (8001a40 <list_audio_effects+0x160>)
 8001922:	2200      	movs	r2, #0
 8001924:	805a      	strh	r2, [r3, #2]
			cursor.y0 = 48;
 8001926:	4b46      	ldr	r3, [pc, #280]	@ (8001a40 <list_audio_effects+0x160>)
 8001928:	2230      	movs	r2, #48	@ 0x30
 800192a:	809a      	strh	r2, [r3, #4]

			x = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	80fb      	strh	r3, [r7, #6]
			y = 48;
 8001930:	2330      	movs	r3, #48	@ 0x30
 8001932:	80bb      	strh	r3, [r7, #4]

			Q = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	70fb      	strb	r3, [r7, #3]

			draw_entity(&cursor);
 8001938:	4841      	ldr	r0, [pc, #260]	@ (8001a40 <list_audio_effects+0x160>)
 800193a:	f001 fdb9 	bl	80034b0 <draw_entity>

			pback = 0;
 800193e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a3c <list_audio_effects+0x15c>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxDown)
 8001944:	4b3f      	ldr	r3, [pc, #252]	@ (8001a44 <list_audio_effects+0x164>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b77      	cmp	r3, #119	@ 0x77
 800194a:	d11a      	bne.n	8001982 <list_audio_effects+0xa2>
		{
			if(Q == nrOptions)
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	78bb      	ldrb	r3, [r7, #2]
 8001950:	429a      	cmp	r2, r3
 8001952:	d104      	bne.n	800195e <list_audio_effects+0x7e>
			{
				Q = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	70fb      	strb	r3, [r7, #3]
				y = 48;
 8001958:	2330      	movs	r3, #48	@ 0x30
 800195a:	80bb      	strh	r3, [r7, #4]
 800195c:	e006      	b.n	800196c <list_audio_effects+0x8c>
			}

			else
			{
				Q++;
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	3301      	adds	r3, #1
 8001962:	70fb      	strb	r3, [r7, #3]
				y += 16;
 8001964:	88bb      	ldrh	r3, [r7, #4]
 8001966:	3310      	adds	r3, #16
 8001968:	b29b      	uxth	r3, r3
 800196a:	80bb      	strh	r3, [r7, #4]
			}

			translation_entity(&cursor, x, y, 0);
 800196c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001970:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001974:	2300      	movs	r3, #0
 8001976:	4832      	ldr	r0, [pc, #200]	@ (8001a40 <list_audio_effects+0x160>)
 8001978:	f001 fea6 	bl	80036c8 <translation_entity>
			currentDx = 0;
 800197c:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <list_audio_effects+0x164>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxUp)
 8001982:	4b30      	ldr	r3, [pc, #192]	@ (8001a44 <list_audio_effects+0x164>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b55      	cmp	r3, #85	@ 0x55
 8001988:	d11d      	bne.n	80019c6 <list_audio_effects+0xe6>
		{
			if(Q == 0)
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d108      	bne.n	80019a2 <list_audio_effects+0xc2>
			{
				Q = nrOptions;
 8001990:	78bb      	ldrb	r3, [r7, #2]
 8001992:	70fb      	strb	r3, [r7, #3]
				y = 48+16*nrOptions;
 8001994:	78bb      	ldrb	r3, [r7, #2]
 8001996:	3303      	adds	r3, #3
 8001998:	b29b      	uxth	r3, r3
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	b29b      	uxth	r3, r3
 800199e:	80bb      	strh	r3, [r7, #4]
 80019a0:	e006      	b.n	80019b0 <list_audio_effects+0xd0>
			}
			else
			{
				Q--;
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	70fb      	strb	r3, [r7, #3]
				y -= 16;
 80019a8:	88bb      	ldrh	r3, [r7, #4]
 80019aa:	3b10      	subs	r3, #16
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	80bb      	strh	r3, [r7, #4]
			}

			translation_entity(&cursor, x, y, 0);
 80019b0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80019b4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80019b8:	2300      	movs	r3, #0
 80019ba:	4821      	ldr	r0, [pc, #132]	@ (8001a40 <list_audio_effects+0x160>)
 80019bc:	f001 fe84 	bl	80036c8 <translation_entity>
			currentDx = 0;
 80019c0:	4b20      	ldr	r3, [pc, #128]	@ (8001a44 <list_audio_effects+0x164>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxSelect)
 80019c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a44 <list_audio_effects+0x164>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2bbb      	cmp	r3, #187	@ 0xbb
 80019cc:	d127      	bne.n	8001a1e <list_audio_effects+0x13e>
		{
			currentDx = 0;
 80019ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <list_audio_effects+0x164>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]

			switch(Q)
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d81d      	bhi.n	8001a16 <list_audio_effects+0x136>
 80019da:	a201      	add	r2, pc, #4	@ (adr r2, 80019e0 <list_audio_effects+0x100>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	080019f1 	.word	0x080019f1
 80019e4:	080019f9 	.word	0x080019f9
 80019e8:	08001a01 	.word	0x08001a01
 80019ec:	08001a0f 	.word	0x08001a0f
			{
				case 0:
					play_audio_file_reverb("Audio/acoustic.txt");
 80019f0:	4815      	ldr	r0, [pc, #84]	@ (8001a48 <list_audio_effects+0x168>)
 80019f2:	f001 f869 	bl	8002ac8 <play_audio_file_reverb>
					break;
 80019f6:	e00f      	b.n	8001a18 <list_audio_effects+0x138>
				case 1:
					play_audio_file_vibrato("Audio/acoustic.txt");
 80019f8:	4813      	ldr	r0, [pc, #76]	@ (8001a48 <list_audio_effects+0x168>)
 80019fa:	f000 fcc5 	bl	8002388 <play_audio_file_vibrato>
					break;
 80019fe:	e00b      	b.n	8001a18 <list_audio_effects+0x138>
				case 2:
					play_audio_file_echo("Audio/acoustic.txt", 20, 0.8);
 8001a00:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8001a4c <list_audio_effects+0x16c>
 8001a04:	2114      	movs	r1, #20
 8001a06:	4810      	ldr	r0, [pc, #64]	@ (8001a48 <list_audio_effects+0x168>)
 8001a08:	f000 fe9e 	bl	8002748 <play_audio_file_echo>
					break;
 8001a0c:	e004      	b.n	8001a18 <list_audio_effects+0x138>
				case 3:
					play_audio_file("Audio/acoustic.txt");
 8001a0e:	480e      	ldr	r0, [pc, #56]	@ (8001a48 <list_audio_effects+0x168>)
 8001a10:	f000 fb92 	bl	8002138 <play_audio_file>
					break;
 8001a14:	e000      	b.n	8001a18 <list_audio_effects+0x138>
				default:
					break;
 8001a16:	bf00      	nop

			}

			currentDx = 0;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <list_audio_effects+0x164>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]

		}

		if(currentDx == DxRight)
 8001a1e:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <list_audio_effects+0x164>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b11      	cmp	r3, #17
 8001a24:	f47f af76 	bne.w	8001914 <list_audio_effects+0x34>
		{
			pback = 1;
 8001a28:	4b04      	ldr	r3, [pc, #16]	@ (8001a3c <list_audio_effects+0x15c>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
			currentDx = 0;
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <list_audio_effects+0x164>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
			return;
 8001a34:	bf00      	nop
		}


	}
}
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000088 	.word	0x20000088
 8001a40:	20000094 	.word	0x20000094
 8001a44:	20000092 	.word	0x20000092
 8001a48:	080109b8 	.word	0x080109b8
 8001a4c:	3f4ccccd 	.word	0x3f4ccccd

08001a50 <set_audio_player_gui>:


static void set_audio_player_gui(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af02      	add	r7, sp, #8
	init_cursor();
 8001a56:	f001 f8c3 	bl	8002be0 <init_cursor>

	fill_screen1(BackGroundColor);
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b58 <set_audio_player_gui+0x108>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f001 f994 	bl	8002d8c <fill_screen1>
	cursor.y0 = 16;
 8001a64:	4b3d      	ldr	r3, [pc, #244]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001a66:	2210      	movs	r2, #16
 8001a68:	809a      	strh	r2, [r3, #4]
	cursor.x0 = 32;
 8001a6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	805a      	strh	r2, [r3, #2]

	print_string(cursor.x0, cursor.y0, "Music PLayer", BLACK, BackGroundColor);
 8001a70:	4b3a      	ldr	r3, [pc, #232]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001a72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a76:	b298      	uxth	r0, r3
 8001a78:	4b38      	ldr	r3, [pc, #224]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001a7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a7e:	b299      	uxth	r1, r3
 8001a80:	4b35      	ldr	r3, [pc, #212]	@ (8001b58 <set_audio_player_gui+0x108>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2300      	movs	r3, #0
 8001a88:	4a35      	ldr	r2, [pc, #212]	@ (8001b60 <set_audio_player_gui+0x110>)
 8001a8a:	f001 fb3b 	bl	8003104 <print_string>
	cursor.y0 += 32;
 8001a8e:	4b33      	ldr	r3, [pc, #204]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001a90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	3320      	adds	r3, #32
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001a9e:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Song1", BLACK, BackGroundColor);
 8001aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001aa2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001aa6:	b298      	uxth	r0, r3
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001aaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001aae:	b299      	uxth	r1, r3
 8001ab0:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <set_audio_player_gui+0x108>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	4a2a      	ldr	r2, [pc, #168]	@ (8001b64 <set_audio_player_gui+0x114>)
 8001aba:	f001 fb23 	bl	8003104 <print_string>
	cursor.y0 += 16;
 8001abe:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001ac0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	3310      	adds	r3, #16
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	b21a      	sxth	r2, r3
 8001acc:	4b23      	ldr	r3, [pc, #140]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001ace:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Song2", BLACK, BackGroundColor);
 8001ad0:	4b22      	ldr	r3, [pc, #136]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001ad2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ad6:	b298      	uxth	r0, r3
 8001ad8:	4b20      	ldr	r3, [pc, #128]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001ada:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ade:	b299      	uxth	r1, r3
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <set_audio_player_gui+0x108>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b68 <set_audio_player_gui+0x118>)
 8001aea:	f001 fb0b 	bl	8003104 <print_string>
	cursor.y0 += 16;
 8001aee:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001af0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3310      	adds	r3, #16
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	4b17      	ldr	r3, [pc, #92]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001afe:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Song3", BLACK, BackGroundColor);
 8001b00:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001b02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b06:	b298      	uxth	r0, r3
 8001b08:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001b0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b0e:	b299      	uxth	r1, r3
 8001b10:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <set_audio_player_gui+0x108>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2300      	movs	r3, #0
 8001b18:	4a14      	ldr	r2, [pc, #80]	@ (8001b6c <set_audio_player_gui+0x11c>)
 8001b1a:	f001 faf3 	bl	8003104 <print_string>
	cursor.y0 += 16;
 8001b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001b20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3310      	adds	r3, #16
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001b2e:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Song4", BLACK, BackGroundColor);
 8001b30:	4b0a      	ldr	r3, [pc, #40]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001b32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b36:	b298      	uxth	r0, r3
 8001b38:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <set_audio_player_gui+0x10c>)
 8001b3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b3e:	b299      	uxth	r1, r3
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <set_audio_player_gui+0x108>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	4a09      	ldr	r2, [pc, #36]	@ (8001b70 <set_audio_player_gui+0x120>)
 8001b4a:	f001 fadb 	bl	8003104 <print_string>

	init_cursor();
 8001b4e:	f001 f847 	bl	8002be0 <init_cursor>
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	20000094 	.word	0x20000094
 8001b60:	08010a70 	.word	0x08010a70
 8001b64:	08010a80 	.word	0x08010a80
 8001b68:	08010a88 	.word	0x08010a88
 8001b6c:	08010a90 	.word	0x08010a90
 8001b70:	08010a98 	.word	0x08010a98

08001b74 <list_audio_player>:


static void list_audio_player(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
	/*
	 * Interfata pentru selectarea si redarea unor
	 * melodii alese de utilizator
	 */

	pback = 1;
 8001b7a:	4b54      	ldr	r3, [pc, #336]	@ (8001ccc <list_audio_player+0x158>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]

	cursor.x0 = 0;
 8001b80:	4b53      	ldr	r3, [pc, #332]	@ (8001cd0 <list_audio_player+0x15c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	805a      	strh	r2, [r3, #2]
	cursor.y0 = 48;
 8001b86:	4b52      	ldr	r3, [pc, #328]	@ (8001cd0 <list_audio_player+0x15c>)
 8001b88:	2230      	movs	r2, #48	@ 0x30
 8001b8a:	809a      	strh	r2, [r3, #4]

	int16_t x = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	80fb      	strh	r3, [r7, #6]
	int16_t y = 48;
 8001b90:	2330      	movs	r3, #48	@ 0x30
 8001b92:	80bb      	strh	r3, [r7, #4]

	uint8_t Q = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	70fb      	strb	r3, [r7, #3]

	uint8_t nrOptions = 4;
 8001b98:	2304      	movs	r3, #4
 8001b9a:	70bb      	strb	r3, [r7, #2]
	nrOptions--; /*0 inclus*/
 8001b9c:	78bb      	ldrb	r3, [r7, #2]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	70bb      	strb	r3, [r7, #2]

	currentDx = 0;
 8001ba2:	4b4c      	ldr	r3, [pc, #304]	@ (8001cd4 <list_audio_player+0x160>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]

	while(1)
	{

		if(pback == 1)
 8001ba8:	4b48      	ldr	r3, [pc, #288]	@ (8001ccc <list_audio_player+0x158>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d113      	bne.n	8001bd8 <list_audio_player+0x64>
			/*
			 * Initializare gui si pt cazul in care ne intaorcem
			 * dintr-o interfata selectat
			 */

			set_audio_player_gui();
 8001bb0:	f7ff ff4e 	bl	8001a50 <set_audio_player_gui>

			cursor.x0 = 0;
 8001bb4:	4b46      	ldr	r3, [pc, #280]	@ (8001cd0 <list_audio_player+0x15c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	805a      	strh	r2, [r3, #2]
			cursor.y0 = 48;
 8001bba:	4b45      	ldr	r3, [pc, #276]	@ (8001cd0 <list_audio_player+0x15c>)
 8001bbc:	2230      	movs	r2, #48	@ 0x30
 8001bbe:	809a      	strh	r2, [r3, #4]

			x = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	80fb      	strh	r3, [r7, #6]
			y = 48;
 8001bc4:	2330      	movs	r3, #48	@ 0x30
 8001bc6:	80bb      	strh	r3, [r7, #4]

			Q = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	70fb      	strb	r3, [r7, #3]

			draw_entity(&cursor);
 8001bcc:	4840      	ldr	r0, [pc, #256]	@ (8001cd0 <list_audio_player+0x15c>)
 8001bce:	f001 fc6f 	bl	80034b0 <draw_entity>

			pback = 0;
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8001ccc <list_audio_player+0x158>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxDown)
 8001bd8:	4b3e      	ldr	r3, [pc, #248]	@ (8001cd4 <list_audio_player+0x160>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b77      	cmp	r3, #119	@ 0x77
 8001bde:	d11a      	bne.n	8001c16 <list_audio_player+0xa2>
		{
			if(Q == nrOptions)
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	78bb      	ldrb	r3, [r7, #2]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d104      	bne.n	8001bf2 <list_audio_player+0x7e>
			{
				Q = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	70fb      	strb	r3, [r7, #3]
				y = 48;
 8001bec:	2330      	movs	r3, #48	@ 0x30
 8001bee:	80bb      	strh	r3, [r7, #4]
 8001bf0:	e006      	b.n	8001c00 <list_audio_player+0x8c>
			}

			else
			{
				Q++;
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	70fb      	strb	r3, [r7, #3]
				y += 16;
 8001bf8:	88bb      	ldrh	r3, [r7, #4]
 8001bfa:	3310      	adds	r3, #16
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	80bb      	strh	r3, [r7, #4]
			}

			translation_entity(&cursor, x, y, 0);
 8001c00:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c04:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	4831      	ldr	r0, [pc, #196]	@ (8001cd0 <list_audio_player+0x15c>)
 8001c0c:	f001 fd5c 	bl	80036c8 <translation_entity>
			currentDx = 0;
 8001c10:	4b30      	ldr	r3, [pc, #192]	@ (8001cd4 <list_audio_player+0x160>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxUp)
 8001c16:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd4 <list_audio_player+0x160>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b55      	cmp	r3, #85	@ 0x55
 8001c1c:	d11d      	bne.n	8001c5a <list_audio_player+0xe6>
		{
			if(Q == 0)
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d108      	bne.n	8001c36 <list_audio_player+0xc2>
			{
				Q = nrOptions;
 8001c24:	78bb      	ldrb	r3, [r7, #2]
 8001c26:	70fb      	strb	r3, [r7, #3]
				y = 48+16*nrOptions;
 8001c28:	78bb      	ldrb	r3, [r7, #2]
 8001c2a:	3303      	adds	r3, #3
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	80bb      	strh	r3, [r7, #4]
 8001c34:	e006      	b.n	8001c44 <list_audio_player+0xd0>
			}
			else
			{
				Q--;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	70fb      	strb	r3, [r7, #3]
				y -= 16;
 8001c3c:	88bb      	ldrh	r3, [r7, #4]
 8001c3e:	3b10      	subs	r3, #16
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	80bb      	strh	r3, [r7, #4]
			}

			translation_entity(&cursor, x, y, 0);
 8001c44:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c48:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4820      	ldr	r0, [pc, #128]	@ (8001cd0 <list_audio_player+0x15c>)
 8001c50:	f001 fd3a 	bl	80036c8 <translation_entity>
			currentDx = 0;
 8001c54:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <list_audio_player+0x160>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxSelect)
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <list_audio_player+0x160>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2bbb      	cmp	r3, #187	@ 0xbb
 8001c60:	d124      	bne.n	8001cac <list_audio_player+0x138>
		{
			currentDx = 0;
 8001c62:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <list_audio_player+0x160>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]

			switch(Q)
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d81a      	bhi.n	8001ca4 <list_audio_player+0x130>
 8001c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c74 <list_audio_player+0x100>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001c85 	.word	0x08001c85
 8001c78:	08001c8d 	.word	0x08001c8d
 8001c7c:	08001c95 	.word	0x08001c95
 8001c80:	08001c9d 	.word	0x08001c9d
			{
				case 0:
					play_audio_file("Audio/acoustic.txt");
 8001c84:	4814      	ldr	r0, [pc, #80]	@ (8001cd8 <list_audio_player+0x164>)
 8001c86:	f000 fa57 	bl	8002138 <play_audio_file>
					break;
 8001c8a:	e00c      	b.n	8001ca6 <list_audio_player+0x132>
				case 1:
					play_audio_file("Audio/king.txt");
 8001c8c:	4813      	ldr	r0, [pc, #76]	@ (8001cdc <list_audio_player+0x168>)
 8001c8e:	f000 fa53 	bl	8002138 <play_audio_file>
					break;
 8001c92:	e008      	b.n	8001ca6 <list_audio_player+0x132>
				case 2:
					play_audio_file("Audio/acoustic.txt");
 8001c94:	4810      	ldr	r0, [pc, #64]	@ (8001cd8 <list_audio_player+0x164>)
 8001c96:	f000 fa4f 	bl	8002138 <play_audio_file>
					break;
 8001c9a:	e004      	b.n	8001ca6 <list_audio_player+0x132>
				case 3:
					play_audio_file("Audio/acoustic.txt");
 8001c9c:	480e      	ldr	r0, [pc, #56]	@ (8001cd8 <list_audio_player+0x164>)
 8001c9e:	f000 fa4b 	bl	8002138 <play_audio_file>
					break;
 8001ca2:	e000      	b.n	8001ca6 <list_audio_player+0x132>
				default:
					break;
 8001ca4:	bf00      	nop

			}

			currentDx = 0;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <list_audio_player+0x160>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]

		}

		if(currentDx == DxRight)
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <list_audio_player+0x160>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b11      	cmp	r3, #17
 8001cb2:	f47f af79 	bne.w	8001ba8 <list_audio_player+0x34>
		{
			pback = 1;
 8001cb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <list_audio_player+0x158>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
			currentDx = 0;
 8001cbc:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <list_audio_player+0x160>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
			return;
 8001cc2:	bf00      	nop


	}


}
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000088 	.word	0x20000088
 8001cd0:	20000094 	.word	0x20000094
 8001cd4:	20000092 	.word	0x20000092
 8001cd8:	080109b8 	.word	0x080109b8
 8001cdc:	08010aa0 	.word	0x08010aa0

08001ce0 <set_audio_gui>:


static void set_audio_gui(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af02      	add	r7, sp, #8
	init_cursor();
 8001ce6:	f000 ff7b 	bl	8002be0 <init_cursor>

	fill_screen1(BackGroundColor);
 8001cea:	4b27      	ldr	r3, [pc, #156]	@ (8001d88 <set_audio_gui+0xa8>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f001 f84c 	bl	8002d8c <fill_screen1>
	cursor.y0 = 16;
 8001cf4:	4b25      	ldr	r3, [pc, #148]	@ (8001d8c <set_audio_gui+0xac>)
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	809a      	strh	r2, [r3, #4]
	cursor.x0 = 32;
 8001cfa:	4b24      	ldr	r3, [pc, #144]	@ (8001d8c <set_audio_gui+0xac>)
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	805a      	strh	r2, [r3, #2]

	print_string(cursor.x0, cursor.y0, "Choose Mode", BLACK, BackGroundColor);
 8001d00:	4b22      	ldr	r3, [pc, #136]	@ (8001d8c <set_audio_gui+0xac>)
 8001d02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d06:	b298      	uxth	r0, r3
 8001d08:	4b20      	ldr	r3, [pc, #128]	@ (8001d8c <set_audio_gui+0xac>)
 8001d0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d0e:	b299      	uxth	r1, r3
 8001d10:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <set_audio_gui+0xa8>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2300      	movs	r3, #0
 8001d18:	4a1d      	ldr	r2, [pc, #116]	@ (8001d90 <set_audio_gui+0xb0>)
 8001d1a:	f001 f9f3 	bl	8003104 <print_string>
	cursor.y0 += 32;
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <set_audio_gui+0xac>)
 8001d20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3320      	adds	r3, #32
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	4b17      	ldr	r3, [pc, #92]	@ (8001d8c <set_audio_gui+0xac>)
 8001d2e:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Music PLayer", BLACK, BackGroundColor);
 8001d30:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <set_audio_gui+0xac>)
 8001d32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d36:	b298      	uxth	r0, r3
 8001d38:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <set_audio_gui+0xac>)
 8001d3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d3e:	b299      	uxth	r1, r3
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <set_audio_gui+0xa8>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2300      	movs	r3, #0
 8001d48:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <set_audio_gui+0xb4>)
 8001d4a:	f001 f9db 	bl	8003104 <print_string>
	cursor.y0 += 16;
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <set_audio_gui+0xac>)
 8001d50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	3310      	adds	r3, #16
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <set_audio_gui+0xac>)
 8001d5e:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Audio Effects", BLACK, BackGroundColor);
 8001d60:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <set_audio_gui+0xac>)
 8001d62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d66:	b298      	uxth	r0, r3
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <set_audio_gui+0xac>)
 8001d6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d6e:	b299      	uxth	r1, r3
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <set_audio_gui+0xa8>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	2300      	movs	r3, #0
 8001d78:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <set_audio_gui+0xb8>)
 8001d7a:	f001 f9c3 	bl	8003104 <print_string>

	init_cursor();
 8001d7e:	f000 ff2f 	bl	8002be0 <init_cursor>
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000008 	.word	0x20000008
 8001d8c:	20000094 	.word	0x20000094
 8001d90:	08010ab0 	.word	0x08010ab0
 8001d94:	08010a70 	.word	0x08010a70
 8001d98:	08010abc 	.word	0x08010abc

08001d9c <list_audio>:


static void list_audio(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0

	pback = 1;
 8001da2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ecc <list_audio+0x130>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]

	cursor.x0 = 0;
 8001da8:	4b49      	ldr	r3, [pc, #292]	@ (8001ed0 <list_audio+0x134>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	805a      	strh	r2, [r3, #2]
	cursor.y0 = 48;
 8001dae:	4b48      	ldr	r3, [pc, #288]	@ (8001ed0 <list_audio+0x134>)
 8001db0:	2230      	movs	r2, #48	@ 0x30
 8001db2:	809a      	strh	r2, [r3, #4]

	int16_t x = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	80fb      	strh	r3, [r7, #6]
	int16_t y = 48;
 8001db8:	2330      	movs	r3, #48	@ 0x30
 8001dba:	80bb      	strh	r3, [r7, #4]

	uint8_t Q = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	70fb      	strb	r3, [r7, #3]

	uint8_t nrOptions = 2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	70bb      	strb	r3, [r7, #2]
	nrOptions--; /*0 inclus*/
 8001dc4:	78bb      	ldrb	r3, [r7, #2]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	70bb      	strb	r3, [r7, #2]

	currentDx = 0;
 8001dca:	4b42      	ldr	r3, [pc, #264]	@ (8001ed4 <list_audio+0x138>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		if(pback == 1)
 8001dd0:	4b3e      	ldr	r3, [pc, #248]	@ (8001ecc <list_audio+0x130>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d113      	bne.n	8001e00 <list_audio+0x64>
			/*
			 * Initializare gui si pt cazul in care ne intaorcem
			 * dintr-o interfata selectat
			 */

			set_audio_gui();
 8001dd8:	f7ff ff82 	bl	8001ce0 <set_audio_gui>

			cursor.x0 = 0;
 8001ddc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ed0 <list_audio+0x134>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	805a      	strh	r2, [r3, #2]
			cursor.y0 = 48;
 8001de2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed0 <list_audio+0x134>)
 8001de4:	2230      	movs	r2, #48	@ 0x30
 8001de6:	809a      	strh	r2, [r3, #4]

			x = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	80fb      	strh	r3, [r7, #6]
			y = 48;
 8001dec:	2330      	movs	r3, #48	@ 0x30
 8001dee:	80bb      	strh	r3, [r7, #4]

			Q = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	70fb      	strb	r3, [r7, #3]

			draw_entity(&cursor);
 8001df4:	4836      	ldr	r0, [pc, #216]	@ (8001ed0 <list_audio+0x134>)
 8001df6:	f001 fb5b 	bl	80034b0 <draw_entity>

			pback = 0;
 8001dfa:	4b34      	ldr	r3, [pc, #208]	@ (8001ecc <list_audio+0x130>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxDown)
 8001e00:	4b34      	ldr	r3, [pc, #208]	@ (8001ed4 <list_audio+0x138>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b77      	cmp	r3, #119	@ 0x77
 8001e06:	d11a      	bne.n	8001e3e <list_audio+0xa2>
		{
			if(Q == nrOptions)
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	78bb      	ldrb	r3, [r7, #2]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d104      	bne.n	8001e1a <list_audio+0x7e>
			{
				Q = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	70fb      	strb	r3, [r7, #3]
				y = 48;
 8001e14:	2330      	movs	r3, #48	@ 0x30
 8001e16:	80bb      	strh	r3, [r7, #4]
 8001e18:	e006      	b.n	8001e28 <list_audio+0x8c>
			}

			else
			{
				Q++;
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	70fb      	strb	r3, [r7, #3]
				y += 16;
 8001e20:	88bb      	ldrh	r3, [r7, #4]
 8001e22:	3310      	adds	r3, #16
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	80bb      	strh	r3, [r7, #4]
			}

			translation_entity(&cursor, x, y, 0);
 8001e28:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e2c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001e30:	2300      	movs	r3, #0
 8001e32:	4827      	ldr	r0, [pc, #156]	@ (8001ed0 <list_audio+0x134>)
 8001e34:	f001 fc48 	bl	80036c8 <translation_entity>
			currentDx = 0;
 8001e38:	4b26      	ldr	r3, [pc, #152]	@ (8001ed4 <list_audio+0x138>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxUp)
 8001e3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <list_audio+0x138>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b55      	cmp	r3, #85	@ 0x55
 8001e44:	d11d      	bne.n	8001e82 <list_audio+0xe6>
		{
			if(Q == 0)
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d108      	bne.n	8001e5e <list_audio+0xc2>
			{
				Q = nrOptions;
 8001e4c:	78bb      	ldrb	r3, [r7, #2]
 8001e4e:	70fb      	strb	r3, [r7, #3]
				y = 48+16*nrOptions;
 8001e50:	78bb      	ldrb	r3, [r7, #2]
 8001e52:	3303      	adds	r3, #3
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	80bb      	strh	r3, [r7, #4]
 8001e5c:	e006      	b.n	8001e6c <list_audio+0xd0>
			}
			else
			{
				Q--;
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	70fb      	strb	r3, [r7, #3]
				y -= 16;
 8001e64:	88bb      	ldrh	r3, [r7, #4]
 8001e66:	3b10      	subs	r3, #16
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	80bb      	strh	r3, [r7, #4]
			}

			translation_entity(&cursor, x, y, 0);
 8001e6c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e70:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001e74:	2300      	movs	r3, #0
 8001e76:	4816      	ldr	r0, [pc, #88]	@ (8001ed0 <list_audio+0x134>)
 8001e78:	f001 fc26 	bl	80036c8 <translation_entity>
			currentDx = 0;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <list_audio+0x138>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxSelect)
 8001e82:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <list_audio+0x138>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2bbb      	cmp	r3, #187	@ 0xbb
 8001e88:	d111      	bne.n	8001eae <list_audio+0x112>
		{
			currentDx = 0;
 8001e8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <list_audio+0x138>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]

			switch(Q)
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <list_audio+0x100>
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d003      	beq.n	8001ea2 <list_audio+0x106>
					break;
				case 1:
					list_audio_effects();
					break;
				default:
					break;
 8001e9a:	e005      	b.n	8001ea8 <list_audio+0x10c>
					list_audio_player();
 8001e9c:	f7ff fe6a 	bl	8001b74 <list_audio_player>
					break;
 8001ea0:	e002      	b.n	8001ea8 <list_audio+0x10c>
					list_audio_effects();
 8001ea2:	f7ff fd1d 	bl	80018e0 <list_audio_effects>
					break;
 8001ea6:	bf00      	nop

			}

			currentDx = 0;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <list_audio+0x138>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]

		}

		if(currentDx == DxRight)
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <list_audio+0x138>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b11      	cmp	r3, #17
 8001eb4:	d18c      	bne.n	8001dd0 <list_audio+0x34>
		{
			pback = 1;
 8001eb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <list_audio+0x130>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
			currentDx = 0;
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <list_audio+0x138>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
			return;
 8001ec2:	bf00      	nop
		}


	}
}
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000088 	.word	0x20000088
 8001ed0:	20000094 	.word	0x20000094
 8001ed4:	20000092 	.word	0x20000092

08001ed8 <set_main_gui>:




static void set_main_gui(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af02      	add	r7, sp, #8
	 * user.
	 * Input: void
	 * Output: void
	 */

	init_cursor();
 8001ede:	f000 fe7f 	bl	8002be0 <init_cursor>

	BackGroundColor = WHITE;
 8001ee2:	4b41      	ldr	r3, [pc, #260]	@ (8001fe8 <set_main_gui+0x110>)
 8001ee4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ee8:	801a      	strh	r2, [r3, #0]
	fill_screen1(BackGroundColor);
 8001eea:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe8 <set_main_gui+0x110>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 ff4c 	bl	8002d8c <fill_screen1>
	cursor.y0 = 16;
 8001ef4:	4b3d      	ldr	r3, [pc, #244]	@ (8001fec <set_main_gui+0x114>)
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	809a      	strh	r2, [r3, #4]
	cursor.x0 = 32;
 8001efa:	4b3c      	ldr	r3, [pc, #240]	@ (8001fec <set_main_gui+0x114>)
 8001efc:	2220      	movs	r2, #32
 8001efe:	805a      	strh	r2, [r3, #2]

	print_string(cursor.x0, cursor.y0, "My Menu", BLACK, BackGroundColor);
 8001f00:	4b3a      	ldr	r3, [pc, #232]	@ (8001fec <set_main_gui+0x114>)
 8001f02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f06:	b298      	uxth	r0, r3
 8001f08:	4b38      	ldr	r3, [pc, #224]	@ (8001fec <set_main_gui+0x114>)
 8001f0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f0e:	b299      	uxth	r1, r3
 8001f10:	4b35      	ldr	r3, [pc, #212]	@ (8001fe8 <set_main_gui+0x110>)
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2300      	movs	r3, #0
 8001f18:	4a35      	ldr	r2, [pc, #212]	@ (8001ff0 <set_main_gui+0x118>)
 8001f1a:	f001 f8f3 	bl	8003104 <print_string>
	cursor.y0 += 32;
 8001f1e:	4b33      	ldr	r3, [pc, #204]	@ (8001fec <set_main_gui+0x114>)
 8001f20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3320      	adds	r3, #32
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001fec <set_main_gui+0x114>)
 8001f2e:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Operating System(boot)", BLACK, BackGroundColor);
 8001f30:	4b2e      	ldr	r3, [pc, #184]	@ (8001fec <set_main_gui+0x114>)
 8001f32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f36:	b298      	uxth	r0, r3
 8001f38:	4b2c      	ldr	r3, [pc, #176]	@ (8001fec <set_main_gui+0x114>)
 8001f3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f3e:	b299      	uxth	r1, r3
 8001f40:	4b29      	ldr	r3, [pc, #164]	@ (8001fe8 <set_main_gui+0x110>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2300      	movs	r3, #0
 8001f48:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff4 <set_main_gui+0x11c>)
 8001f4a:	f001 f8db 	bl	8003104 <print_string>
	cursor.y0 += 16;
 8001f4e:	4b27      	ldr	r3, [pc, #156]	@ (8001fec <set_main_gui+0x114>)
 8001f50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3310      	adds	r3, #16
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	b21a      	sxth	r2, r3
 8001f5c:	4b23      	ldr	r3, [pc, #140]	@ (8001fec <set_main_gui+0x114>)
 8001f5e:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Graphics", BLACK, BackGroundColor);
 8001f60:	4b22      	ldr	r3, [pc, #136]	@ (8001fec <set_main_gui+0x114>)
 8001f62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f66:	b298      	uxth	r0, r3
 8001f68:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <set_main_gui+0x114>)
 8001f6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f6e:	b299      	uxth	r1, r3
 8001f70:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe8 <set_main_gui+0x110>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2300      	movs	r3, #0
 8001f78:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff8 <set_main_gui+0x120>)
 8001f7a:	f001 f8c3 	bl	8003104 <print_string>
	cursor.y0 += 16;
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <set_main_gui+0x114>)
 8001f80:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3310      	adds	r3, #16
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	b21a      	sxth	r2, r3
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <set_main_gui+0x114>)
 8001f8e:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Audio", BLACK, BackGroundColor);
 8001f90:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <set_main_gui+0x114>)
 8001f92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f96:	b298      	uxth	r0, r3
 8001f98:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <set_main_gui+0x114>)
 8001f9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f9e:	b299      	uxth	r1, r3
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <set_main_gui+0x110>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	4a14      	ldr	r2, [pc, #80]	@ (8001ffc <set_main_gui+0x124>)
 8001faa:	f001 f8ab 	bl	8003104 <print_string>
	cursor.y0 += 16;
 8001fae:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <set_main_gui+0x114>)
 8001fb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3310      	adds	r3, #16
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <set_main_gui+0x114>)
 8001fbe:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "App1", BLACK, BackGroundColor);
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <set_main_gui+0x114>)
 8001fc2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fc6:	b298      	uxth	r0, r3
 8001fc8:	4b08      	ldr	r3, [pc, #32]	@ (8001fec <set_main_gui+0x114>)
 8001fca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fce:	b299      	uxth	r1, r3
 8001fd0:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <set_main_gui+0x110>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	4a09      	ldr	r2, [pc, #36]	@ (8002000 <set_main_gui+0x128>)
 8001fda:	f001 f893 	bl	8003104 <print_string>

	init_cursor();
 8001fde:	f000 fdff 	bl	8002be0 <init_cursor>

}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	20000094 	.word	0x20000094
 8001ff0:	08010acc 	.word	0x08010acc
 8001ff4:	08010ad4 	.word	0x08010ad4
 8001ff8:	08010aec 	.word	0x08010aec
 8001ffc:	08010af8 	.word	0x08010af8
 8002000:	08010b00 	.word	0x08010b00

08002004 <main_app>:




void main_app()
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
	 * Meniul prinicpal al aplicatiei.
	 * Input: void
	 * Output: void
	 */

	pback = 1;
 800200a:	4b48      	ldr	r3, [pc, #288]	@ (800212c <main_app+0x128>)
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]

	cursor.x0 = 0;
 8002010:	4b47      	ldr	r3, [pc, #284]	@ (8002130 <main_app+0x12c>)
 8002012:	2200      	movs	r2, #0
 8002014:	805a      	strh	r2, [r3, #2]
	cursor.y0 = 48;
 8002016:	4b46      	ldr	r3, [pc, #280]	@ (8002130 <main_app+0x12c>)
 8002018:	2230      	movs	r2, #48	@ 0x30
 800201a:	809a      	strh	r2, [r3, #4]

	int16_t x = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	80fb      	strh	r3, [r7, #6]
	int16_t y = 48;
 8002020:	2330      	movs	r3, #48	@ 0x30
 8002022:	80bb      	strh	r3, [r7, #4]

	uint8_t Q = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	70fb      	strb	r3, [r7, #3]

	uint8_t nrOptions = 4;
 8002028:	2304      	movs	r3, #4
 800202a:	70bb      	strb	r3, [r7, #2]
	nrOptions--; /*0 inclus*/
 800202c:	78bb      	ldrb	r3, [r7, #2]
 800202e:	3b01      	subs	r3, #1
 8002030:	70bb      	strb	r3, [r7, #2]

	while(1)
	{
		if(pback == 1)
 8002032:	4b3e      	ldr	r3, [pc, #248]	@ (800212c <main_app+0x128>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d113      	bne.n	8002062 <main_app+0x5e>
			/*
			 * Initializare gui si pt cazul in care ne intaorcem
			 * dintr-o interfata selectat
			 */

			set_main_gui();
 800203a:	f7ff ff4d 	bl	8001ed8 <set_main_gui>

			cursor.x0 = 0;
 800203e:	4b3c      	ldr	r3, [pc, #240]	@ (8002130 <main_app+0x12c>)
 8002040:	2200      	movs	r2, #0
 8002042:	805a      	strh	r2, [r3, #2]
			cursor.y0 = 48;
 8002044:	4b3a      	ldr	r3, [pc, #232]	@ (8002130 <main_app+0x12c>)
 8002046:	2230      	movs	r2, #48	@ 0x30
 8002048:	809a      	strh	r2, [r3, #4]

			x = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	80fb      	strh	r3, [r7, #6]
			y = 48;
 800204e:	2330      	movs	r3, #48	@ 0x30
 8002050:	80bb      	strh	r3, [r7, #4]

			Q = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	70fb      	strb	r3, [r7, #3]

			draw_entity(&cursor);
 8002056:	4836      	ldr	r0, [pc, #216]	@ (8002130 <main_app+0x12c>)
 8002058:	f001 fa2a 	bl	80034b0 <draw_entity>

			pback = 0;
 800205c:	4b33      	ldr	r3, [pc, #204]	@ (800212c <main_app+0x128>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
		}


		if(currentDx == DxDown)
 8002062:	4b34      	ldr	r3, [pc, #208]	@ (8002134 <main_app+0x130>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b77      	cmp	r3, #119	@ 0x77
 8002068:	d11a      	bne.n	80020a0 <main_app+0x9c>
		{
			if(Q == nrOptions)
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	78bb      	ldrb	r3, [r7, #2]
 800206e:	429a      	cmp	r2, r3
 8002070:	d104      	bne.n	800207c <main_app+0x78>
			{
				Q = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	70fb      	strb	r3, [r7, #3]
				y = 48;
 8002076:	2330      	movs	r3, #48	@ 0x30
 8002078:	80bb      	strh	r3, [r7, #4]
 800207a:	e006      	b.n	800208a <main_app+0x86>
			}

			else
			{
				Q++;
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	3301      	adds	r3, #1
 8002080:	70fb      	strb	r3, [r7, #3]
				y += 16;
 8002082:	88bb      	ldrh	r3, [r7, #4]
 8002084:	3310      	adds	r3, #16
 8002086:	b29b      	uxth	r3, r3
 8002088:	80bb      	strh	r3, [r7, #4]
			}

			translation_entity(&cursor, x, y, 0);
 800208a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800208e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002092:	2300      	movs	r3, #0
 8002094:	4826      	ldr	r0, [pc, #152]	@ (8002130 <main_app+0x12c>)
 8002096:	f001 fb17 	bl	80036c8 <translation_entity>
			currentDx = 0;
 800209a:	4b26      	ldr	r3, [pc, #152]	@ (8002134 <main_app+0x130>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxUp)
 80020a0:	4b24      	ldr	r3, [pc, #144]	@ (8002134 <main_app+0x130>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b55      	cmp	r3, #85	@ 0x55
 80020a6:	d11d      	bne.n	80020e4 <main_app+0xe0>
		{
			if(Q == 0)
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d108      	bne.n	80020c0 <main_app+0xbc>
			{
				Q = nrOptions;
 80020ae:	78bb      	ldrb	r3, [r7, #2]
 80020b0:	70fb      	strb	r3, [r7, #3]
				y = 48+16*nrOptions;
 80020b2:	78bb      	ldrb	r3, [r7, #2]
 80020b4:	3303      	adds	r3, #3
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	80bb      	strh	r3, [r7, #4]
 80020be:	e006      	b.n	80020ce <main_app+0xca>
			}
			else
			{
				Q--;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	70fb      	strb	r3, [r7, #3]
				y -= 16;
 80020c6:	88bb      	ldrh	r3, [r7, #4]
 80020c8:	3b10      	subs	r3, #16
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	80bb      	strh	r3, [r7, #4]
			}

			translation_entity(&cursor, x, y, 0);
 80020ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80020d2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80020d6:	2300      	movs	r3, #0
 80020d8:	4815      	ldr	r0, [pc, #84]	@ (8002130 <main_app+0x12c>)
 80020da:	f001 faf5 	bl	80036c8 <translation_entity>
			currentDx = 0;
 80020de:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <main_app+0x130>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxSelect)
 80020e4:	4b13      	ldr	r3, [pc, #76]	@ (8002134 <main_app+0x130>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2bbb      	cmp	r3, #187	@ 0xbb
 80020ea:	d1a2      	bne.n	8002032 <main_app+0x2e>
		{
			currentDx = 0;
 80020ec:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <main_app+0x130>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]

			switch(Q)
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d814      	bhi.n	8002122 <main_app+0x11e>
 80020f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002100 <main_app+0xfc>)
 80020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fe:	bf00      	nop
 8002100:	08002111 	.word	0x08002111
 8002104:	08002117 	.word	0x08002117
 8002108:	0800211d 	.word	0x0800211d
 800210c:	08002123 	.word	0x08002123
			{
				case 0:
					demo_os_1();
 8002110:	f7fe fe80 	bl	8000e14 <demo_os_1>
					break;
 8002114:	e006      	b.n	8002124 <main_app+0x120>
				case 1:
					list_graphics();
 8002116:	f7ff fa9b 	bl	8001650 <list_graphics>
					break;
 800211a:	e003      	b.n	8002124 <main_app+0x120>
				case 2:
					list_audio();
 800211c:	f7ff fe3e 	bl	8001d9c <list_audio>
					break;
 8002120:	e000      	b.n	8002124 <main_app+0x120>
				case 3:
					break;
				default:
					break;
 8002122:	bf00      	nop
			}

			currentDx = 0;
 8002124:	4b03      	ldr	r3, [pc, #12]	@ (8002134 <main_app+0x130>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
		if(pback == 1)
 800212a:	e782      	b.n	8002032 <main_app+0x2e>
 800212c:	20000088 	.word	0x20000088
 8002130:	20000094 	.word	0x20000094
 8002134:	20000092 	.word	0x20000092

08002138 <play_audio_file>:
static bool flagBuffer = 0; /*Flag pentru a indica bufferul curent de redare*/



void play_audio_file(char *path)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af02      	add	r7, sp, #8
 800213e:	6078      	str	r0, [r7, #4]
	 * se va iesi din while(1), resetand fisierul la 0 si oprind fluxul DMA
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 8002140:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002144:	f00e fa58 	bl	80105f8 <malloc>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	4b3f      	ldr	r3, [pc, #252]	@ (800224c <play_audio_file+0x114>)
 800214e:	601a      	str	r2, [r3, #0]

	bool flagAudioDone = 1;
 8002150:	2301      	movs	r3, #1
 8002152:	73fb      	strb	r3, [r7, #15]

	if(buffer == NULL)
 8002154:	4b3d      	ldr	r3, [pc, #244]	@ (800224c <play_audio_file+0x114>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d073      	beq.n	8002244 <play_audio_file+0x10c>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	mutex = 1;
 800215c:	4b3c      	ldr	r3, [pc, #240]	@ (8002250 <play_audio_file+0x118>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]
	currentDx = 0;
 8002162:	4b3c      	ldr	r3, [pc, #240]	@ (8002254 <play_audio_file+0x11c>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
	read_audio_file(path, buffer, &flagAudioDone); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 8002168:	4b38      	ldr	r3, [pc, #224]	@ (800224c <play_audio_file+0x114>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f107 020f 	add.w	r2, r7, #15
 8002170:	4619      	mov	r1, r3
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f003 fb36 	bl	80057e4 <read_audio_file>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 8002178:	4b34      	ldr	r3, [pc, #208]	@ (800224c <play_audio_file+0x114>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2300      	movs	r3, #0
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002184:	2100      	movs	r1, #0
 8002186:	4834      	ldr	r0, [pc, #208]	@ (8002258 <play_audio_file+0x120>)
 8002188:	f004 fee4 	bl	8006f54 <HAL_DAC_Start_DMA>

	while(!flagAudioDone && currentDx!=DxSelect)
 800218c:	e035      	b.n	80021fa <play_audio_file+0xc2>
	{
		mutex = 1;
 800218e:	4b30      	ldr	r3, [pc, #192]	@ (8002250 <play_audio_file+0x118>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]
		read_audio_file(path, buffer+1024, &flagAudioDone);
 8002194:	4b2d      	ldr	r3, [pc, #180]	@ (800224c <play_audio_file+0x114>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800219c:	f107 020f 	add.w	r2, r7, #15
 80021a0:	4619      	mov	r1, r3
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f003 fb1e 	bl	80057e4 <read_audio_file>
		mutex = 0;
 80021a8:	4b29      	ldr	r3, [pc, #164]	@ (8002250 <play_audio_file+0x118>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
		while(flagDmaDAC == 0);
 80021ae:	bf00      	nop
 80021b0:	4b2a      	ldr	r3, [pc, #168]	@ (800225c <play_audio_file+0x124>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f083 0301 	eor.w	r3, r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f7      	bne.n	80021b0 <play_audio_file+0x78>
		flagDmaDAC = 0;
 80021c0:	4b26      	ldr	r3, [pc, #152]	@ (800225c <play_audio_file+0x124>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	701a      	strb	r2, [r3, #0]
		mutex = 1;
 80021c6:	4b22      	ldr	r3, [pc, #136]	@ (8002250 <play_audio_file+0x118>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
		read_audio_file(path, buffer, &flagAudioDone);
 80021cc:	4b1f      	ldr	r3, [pc, #124]	@ (800224c <play_audio_file+0x114>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f107 020f 	add.w	r2, r7, #15
 80021d4:	4619      	mov	r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f003 fb04 	bl	80057e4 <read_audio_file>
		mutex = 0;
 80021dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002250 <play_audio_file+0x118>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
		while(flagDmaDAC == 0);
 80021e2:	bf00      	nop
 80021e4:	4b1d      	ldr	r3, [pc, #116]	@ (800225c <play_audio_file+0x124>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f083 0301 	eor.w	r3, r3, #1
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f7      	bne.n	80021e4 <play_audio_file+0xac>
		flagDmaDAC = 0;
 80021f4:	4b19      	ldr	r3, [pc, #100]	@ (800225c <play_audio_file+0x124>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
	while(!flagAudioDone && currentDx!=DxSelect)
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	f083 0301 	eor.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <play_audio_file+0xd6>
 8002206:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <play_audio_file+0x11c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2bbb      	cmp	r3, #187	@ 0xbb
 800220c:	d1bf      	bne.n	800218e <play_audio_file+0x56>

	}

	while(flagDmaDAC == 0);
 800220e:	bf00      	nop
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <play_audio_file+0x124>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f083 0301 	eor.w	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f7      	bne.n	8002210 <play_audio_file+0xd8>
	flagDmaDAC = 0;
 8002220:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <play_audio_file+0x124>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
	currentDx = 0;
 8002226:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <play_audio_file+0x11c>)
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
	flagAudioDone = 1;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002230:	2100      	movs	r1, #0
 8002232:	4809      	ldr	r0, [pc, #36]	@ (8002258 <play_audio_file+0x120>)
 8002234:	f004 ff50 	bl	80070d8 <HAL_DAC_Stop_DMA>

	free(buffer);
 8002238:	4b04      	ldr	r3, [pc, #16]	@ (800224c <play_audio_file+0x114>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f00e f9e3 	bl	8010608 <free>
 8002242:	e000      	b.n	8002246 <play_audio_file+0x10e>
		return;
 8002244:	bf00      	nop

}
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	2000008c 	.word	0x2000008c
 8002250:	200000ac 	.word	0x200000ac
 8002254:	20000092 	.word	0x20000092
 8002258:	20014184 	.word	0x20014184
 800225c:	200144c6 	.word	0x200144c6

08002260 <vibrato_filter>:


static void vibrato_filter(int8_t delay)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
	 * FlagBuffer ne spune in ce buffer ne aflam in momentul prelucrarii 0 sau 1
	 * (prima jumatate sau a doua)
	 * Output: Void
	 */

	int16_t index = (int16_t)((delay*1000)/22.67);
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f900 	bl	800047c <__aeabi_i2d>
 800227c:	a340      	add	r3, pc, #256	@ (adr r3, 8002380 <vibrato_filter+0x120>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe fa8f 	bl	80007a4 <__aeabi_ddiv>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f7fe fb71 	bl	8000974 <__aeabi_d2iz>
 8002292:	4603      	mov	r3, r0
 8002294:	817b      	strh	r3, [r7, #10]

	if(flagBuffer == 0)
 8002296:	4b38      	ldr	r3, [pc, #224]	@ (8002378 <vibrato_filter+0x118>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	f083 0301 	eor.w	r3, r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d039      	beq.n	8002318 <vibrato_filter+0xb8>
	{
		/*Prima jumatate a bufferului*/

		for(int16_t i=1023; i>=0; i--)
 80022a4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80022a8:	81fb      	strh	r3, [r7, #14]
 80022aa:	e030      	b.n	800230e <vibrato_filter+0xae>
		{

			if(i<index)
 80022ac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80022b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	da13      	bge.n	80022e0 <vibrato_filter+0x80>
			{
				/*Pentru cazul intarzierii*/

				buffer[i] = buffer[2047-(index-i)+1];
 80022b8:	4b30      	ldr	r3, [pc, #192]	@ (800237c <vibrato_filter+0x11c>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80022c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022c4:	1acb      	subs	r3, r1, r3
 80022c6:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	441a      	add	r2, r3
 80022ce:	4b2b      	ldr	r3, [pc, #172]	@ (800237c <vibrato_filter+0x11c>)
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	601a      	str	r2, [r3, #0]
				continue;
 80022de:	e010      	b.n	8002302 <vibrato_filter+0xa2>
			}


			buffer[i] = buffer[i-index];
 80022e0:	4b26      	ldr	r3, [pc, #152]	@ (800237c <vibrato_filter+0x11c>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80022e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80022ec:	1acb      	subs	r3, r1, r3
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	441a      	add	r2, r3
 80022f2:	4b22      	ldr	r3, [pc, #136]	@ (800237c <vibrato_filter+0x11c>)
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	601a      	str	r2, [r3, #0]
		for(int16_t i=1023; i>=0; i--)
 8002302:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002306:	b29b      	uxth	r3, r3
 8002308:	3b01      	subs	r3, #1
 800230a:	b29b      	uxth	r3, r3
 800230c:	81fb      	strh	r3, [r7, #14]
 800230e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002312:	2b00      	cmp	r3, #0
 8002314:	daca      	bge.n	80022ac <vibrato_filter+0x4c>
 8002316:	e019      	b.n	800234c <vibrato_filter+0xec>

	else
	{
		/*A doua jumatate a bufferului*/

		for(uint16_t i=2047; i>=1024; i--)
 8002318:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800231c:	81bb      	strh	r3, [r7, #12]
 800231e:	e011      	b.n	8002344 <vibrato_filter+0xe4>
		{

			buffer[i] = buffer[i-index];
 8002320:	4b16      	ldr	r3, [pc, #88]	@ (800237c <vibrato_filter+0x11c>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	89b9      	ldrh	r1, [r7, #12]
 8002326:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800232a:	1acb      	subs	r3, r1, r3
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	441a      	add	r2, r3
 8002330:	4b12      	ldr	r3, [pc, #72]	@ (800237c <vibrato_filter+0x11c>)
 8002332:	6819      	ldr	r1, [r3, #0]
 8002334:	89bb      	ldrh	r3, [r7, #12]
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	601a      	str	r2, [r3, #0]
		for(uint16_t i=2047; i>=1024; i--)
 800233e:	89bb      	ldrh	r3, [r7, #12]
 8002340:	3b01      	subs	r3, #1
 8002342:	81bb      	strh	r3, [r7, #12]
 8002344:	89bb      	ldrh	r3, [r7, #12]
 8002346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800234a:	d2e9      	bcs.n	8002320 <vibrato_filter+0xc0>
		}

	}


	flagBuffer = !flagBuffer; /*schimbam jumatatea bufferului*/
 800234c:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <vibrato_filter+0x118>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	f083 0301 	eor.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <vibrato_filter+0x118>)
 8002368:	701a      	strb	r2, [r3, #0]


}
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	f3af 8000 	nop.w
 8002378:	20000090 	.word	0x20000090
 800237c:	2000008c 	.word	0x2000008c
 8002380:	1eb851ec 	.word	0x1eb851ec
 8002384:	4036ab85 	.word	0x4036ab85

08002388 <play_audio_file_vibrato>:



void play_audio_file_vibrato(char *path)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af02      	add	r7, sp, #8
 800238e:	6078      	str	r0, [r7, #4]
	 * Functie pentru redarea unui fisier audio din cardul cu efect vibrato SD.
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 8002390:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002394:	f00e f930 	bl	80105f8 <malloc>
 8002398:	4603      	mov	r3, r0
 800239a:	461a      	mov	r2, r3
 800239c:	4b7d      	ldr	r3, [pc, #500]	@ (8002594 <play_audio_file_vibrato+0x20c>)
 800239e:	601a      	str	r2, [r3, #0]

	bool flagAudioDone = 1;
 80023a0:	2301      	movs	r3, #1
 80023a2:	72fb      	strb	r3, [r7, #11]
	flagBuffer = 1; /*Incepem din a doua jumatate*/
 80023a4:	4b7c      	ldr	r3, [pc, #496]	@ (8002598 <play_audio_file_vibrato+0x210>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]

	int8_t delay = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]
	uint8_t k = 0; /*determinam intervalul de timp cand schimbam delayul -> la fiecare 8*1024 esantioane*/
 80023ae:	2300      	movs	r3, #0
 80023b0:	73bb      	strb	r3, [r7, #14]
	int8_t delayArray[] = {10,12,14};
 80023b2:	4a7a      	ldr	r2, [pc, #488]	@ (800259c <play_audio_file_vibrato+0x214>)
 80023b4:	f107 0308 	add.w	r3, r7, #8
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	4611      	mov	r1, r2
 80023bc:	8019      	strh	r1, [r3, #0]
 80023be:	3302      	adds	r3, #2
 80023c0:	0c12      	lsrs	r2, r2, #16
 80023c2:	701a      	strb	r2, [r3, #0]
	uint8_t delayIndex = 1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	737b      	strb	r3, [r7, #13]
	bool flagDx = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	733b      	strb	r3, [r7, #12]

	if(buffer == NULL)
 80023cc:	4b71      	ldr	r3, [pc, #452]	@ (8002594 <play_audio_file_vibrato+0x20c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80da 	beq.w	800258a <play_audio_file_vibrato+0x202>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	currentDx = 0;
 80023d6:	4b72      	ldr	r3, [pc, #456]	@ (80025a0 <play_audio_file_vibrato+0x218>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
	read_audio_file(path, buffer, &flagAudioDone); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 80023dc:	4b6d      	ldr	r3, [pc, #436]	@ (8002594 <play_audio_file_vibrato+0x20c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f107 020b 	add.w	r2, r7, #11
 80023e4:	4619      	mov	r1, r3
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f003 f9fc 	bl	80057e4 <read_audio_file>
	k = (k+1) % 8;
 80023ec:	7bbb      	ldrb	r3, [r7, #14]
 80023ee:	3301      	adds	r3, #1
 80023f0:	425a      	negs	r2, r3
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	f002 0207 	and.w	r2, r2, #7
 80023fa:	bf58      	it	pl
 80023fc:	4253      	negpl	r3, r2
 80023fe:	73bb      	strb	r3, [r7, #14]

	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 8002400:	4b64      	ldr	r3, [pc, #400]	@ (8002594 <play_audio_file_vibrato+0x20c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2300      	movs	r3, #0
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800240c:	2100      	movs	r1, #0
 800240e:	4865      	ldr	r0, [pc, #404]	@ (80025a4 <play_audio_file_vibrato+0x21c>)
 8002410:	f004 fda0 	bl	8006f54 <HAL_DAC_Start_DMA>

	while(!flagAudioDone && currentDx!=DxSelect)
 8002414:	e093      	b.n	800253e <play_audio_file_vibrato+0x1b6>
	{
		read_audio_file(path, buffer+1024, &flagAudioDone);
 8002416:	4b5f      	ldr	r3, [pc, #380]	@ (8002594 <play_audio_file_vibrato+0x20c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800241e:	f107 020b 	add.w	r2, r7, #11
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f003 f9dd 	bl	80057e4 <read_audio_file>
		vibrato_filter(delay);
 800242a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff16 	bl	8002260 <vibrato_filter>
		k = (k+1) % 8;
 8002434:	7bbb      	ldrb	r3, [r7, #14]
 8002436:	3301      	adds	r3, #1
 8002438:	425a      	negs	r2, r3
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	f002 0207 	and.w	r2, r2, #7
 8002442:	bf58      	it	pl
 8002444:	4253      	negpl	r3, r2
 8002446:	73bb      	strb	r3, [r7, #14]

		if(k == 0)
 8002448:	7bbb      	ldrb	r3, [r7, #14]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d122      	bne.n	8002494 <play_audio_file_vibrato+0x10c>
		{
			/*
			 * Schimbam valaorea delay-ului variational
			 */

			if(flagDx == 0)
 800244e:	7b3b      	ldrb	r3, [r7, #12]
 8002450:	f083 0301 	eor.w	r3, r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <play_audio_file_vibrato+0xe6>
			{
				delay = delayArray[++delayIndex];
 800245a:	7b7b      	ldrb	r3, [r7, #13]
 800245c:	3301      	adds	r3, #1
 800245e:	737b      	strb	r3, [r7, #13]
 8002460:	7b7b      	ldrb	r3, [r7, #13]
 8002462:	3310      	adds	r3, #16
 8002464:	443b      	add	r3, r7
 8002466:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e008      	b.n	8002480 <play_audio_file_vibrato+0xf8>
			}

			else
			{
				delay = delayArray[--delayIndex];
 800246e:	7b7b      	ldrb	r3, [r7, #13]
 8002470:	3b01      	subs	r3, #1
 8002472:	737b      	strb	r3, [r7, #13]
 8002474:	7b7b      	ldrb	r3, [r7, #13]
 8002476:	3310      	adds	r3, #16
 8002478:	443b      	add	r3, r7
 800247a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800247e:	73fb      	strb	r3, [r7, #15]
			}

			if(delayIndex == 2)
 8002480:	7b7b      	ldrb	r3, [r7, #13]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d101      	bne.n	800248a <play_audio_file_vibrato+0x102>
			{
				flagDx = 1;
 8002486:	2301      	movs	r3, #1
 8002488:	733b      	strb	r3, [r7, #12]
			}

			if(delayIndex == 0)
 800248a:	7b7b      	ldrb	r3, [r7, #13]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <play_audio_file_vibrato+0x10c>
			{
				flagDx = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	733b      	strb	r3, [r7, #12]
			}

		}

		while(flagDmaDAC == 0);
 8002494:	bf00      	nop
 8002496:	4b44      	ldr	r3, [pc, #272]	@ (80025a8 <play_audio_file_vibrato+0x220>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f083 0301 	eor.w	r3, r3, #1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f7      	bne.n	8002496 <play_audio_file_vibrato+0x10e>
		flagDmaDAC = 0;
 80024a6:	4b40      	ldr	r3, [pc, #256]	@ (80025a8 <play_audio_file_vibrato+0x220>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]

		read_audio_file(path, buffer, &flagAudioDone);
 80024ac:	4b39      	ldr	r3, [pc, #228]	@ (8002594 <play_audio_file_vibrato+0x20c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f107 020b 	add.w	r2, r7, #11
 80024b4:	4619      	mov	r1, r3
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f003 f994 	bl	80057e4 <read_audio_file>
		vibrato_filter(delay);
 80024bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fecd 	bl	8002260 <vibrato_filter>
		k = (k+1) % 8;
 80024c6:	7bbb      	ldrb	r3, [r7, #14]
 80024c8:	3301      	adds	r3, #1
 80024ca:	425a      	negs	r2, r3
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	f002 0207 	and.w	r2, r2, #7
 80024d4:	bf58      	it	pl
 80024d6:	4253      	negpl	r3, r2
 80024d8:	73bb      	strb	r3, [r7, #14]

		if(k == 0)
 80024da:	7bbb      	ldrb	r3, [r7, #14]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d122      	bne.n	8002526 <play_audio_file_vibrato+0x19e>
		{
			/*
			 * Schimbam valaorea delay-ului variational
			 */

			if(flagDx == 0)
 80024e0:	7b3b      	ldrb	r3, [r7, #12]
 80024e2:	f083 0301 	eor.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d009      	beq.n	8002500 <play_audio_file_vibrato+0x178>
			{
				delay = delayArray[++delayIndex];
 80024ec:	7b7b      	ldrb	r3, [r7, #13]
 80024ee:	3301      	adds	r3, #1
 80024f0:	737b      	strb	r3, [r7, #13]
 80024f2:	7b7b      	ldrb	r3, [r7, #13]
 80024f4:	3310      	adds	r3, #16
 80024f6:	443b      	add	r3, r7
 80024f8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e008      	b.n	8002512 <play_audio_file_vibrato+0x18a>
			}

			else
			{
				delay = delayArray[--delayIndex];
 8002500:	7b7b      	ldrb	r3, [r7, #13]
 8002502:	3b01      	subs	r3, #1
 8002504:	737b      	strb	r3, [r7, #13]
 8002506:	7b7b      	ldrb	r3, [r7, #13]
 8002508:	3310      	adds	r3, #16
 800250a:	443b      	add	r3, r7
 800250c:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8002510:	73fb      	strb	r3, [r7, #15]
			}

			if(delayIndex == 2)
 8002512:	7b7b      	ldrb	r3, [r7, #13]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d101      	bne.n	800251c <play_audio_file_vibrato+0x194>
			{
				flagDx = 1;
 8002518:	2301      	movs	r3, #1
 800251a:	733b      	strb	r3, [r7, #12]
			}

			if(delayIndex == 0)
 800251c:	7b7b      	ldrb	r3, [r7, #13]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <play_audio_file_vibrato+0x19e>
			{
				flagDx = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	733b      	strb	r3, [r7, #12]
			}

		}

		while(flagDmaDAC == 0);
 8002526:	bf00      	nop
 8002528:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <play_audio_file_vibrato+0x220>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f083 0301 	eor.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f7      	bne.n	8002528 <play_audio_file_vibrato+0x1a0>
		flagDmaDAC = 0;
 8002538:	4b1b      	ldr	r3, [pc, #108]	@ (80025a8 <play_audio_file_vibrato+0x220>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
	while(!flagAudioDone && currentDx!=DxSelect)
 800253e:	7afb      	ldrb	r3, [r7, #11]
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d004      	beq.n	8002554 <play_audio_file_vibrato+0x1cc>
 800254a:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <play_audio_file_vibrato+0x218>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2bbb      	cmp	r3, #187	@ 0xbb
 8002550:	f47f af61 	bne.w	8002416 <play_audio_file_vibrato+0x8e>


	}

	while(flagDmaDAC == 0);
 8002554:	bf00      	nop
 8002556:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <play_audio_file_vibrato+0x220>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f083 0301 	eor.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f7      	bne.n	8002556 <play_audio_file_vibrato+0x1ce>
	flagDmaDAC = 0;
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <play_audio_file_vibrato+0x220>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
	currentDx = 0;
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <play_audio_file_vibrato+0x218>)
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
	flagAudioDone = 1;
 8002572:	2301      	movs	r3, #1
 8002574:	72fb      	strb	r3, [r7, #11]

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002576:	2100      	movs	r1, #0
 8002578:	480a      	ldr	r0, [pc, #40]	@ (80025a4 <play_audio_file_vibrato+0x21c>)
 800257a:	f004 fdad 	bl	80070d8 <HAL_DAC_Stop_DMA>

	free(buffer);
 800257e:	4b05      	ldr	r3, [pc, #20]	@ (8002594 <play_audio_file_vibrato+0x20c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f00e f840 	bl	8010608 <free>
 8002588:	e000      	b.n	800258c <play_audio_file_vibrato+0x204>
		return;
 800258a:	bf00      	nop

}
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	2000008c 	.word	0x2000008c
 8002598:	20000090 	.word	0x20000090
 800259c:	08010b08 	.word	0x08010b08
 80025a0:	20000092 	.word	0x20000092
 80025a4:	20014184 	.word	0x20014184
 80025a8:	200144c6 	.word	0x200144c6
 80025ac:	00000000 	.word	0x00000000

080025b0 <echo_filter>:


static void echo_filter(int8_t delay, float alpha)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	ed87 0a00 	vstr	s0, [r7]
 80025bc:	71fb      	strb	r3, [r7, #7]
	 * 		  coeficientul de atenuare alpha
	 * 		  alpha = [0,1]
	 * Output: void
	 */

	int16_t index = (int16_t)((delay*1000)/22.67); /*Impartim delay-ul la timpul necesar redarii unui esantion*/
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ff56 	bl	800047c <__aeabi_i2d>
 80025d0:	a35b      	add	r3, pc, #364	@ (adr r3, 8002740 <echo_filter+0x190>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f7fe f8e5 	bl	80007a4 <__aeabi_ddiv>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7fe f9c7 	bl	8000974 <__aeabi_d2iz>
 80025e6:	4603      	mov	r3, r0
 80025e8:	817b      	strh	r3, [r7, #10]
												   /*index va fi valoarea delay-ului in numar de esantioane*/


	if(flagBuffer == 0)
 80025ea:	4b53      	ldr	r3, [pc, #332]	@ (8002738 <echo_filter+0x188>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	f083 0301 	eor.w	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d059      	beq.n	80026ac <echo_filter+0xfc>
	{
		/*Prima jumatate a bufferului*/

		for(int16_t i=1023; i>=0; i--)
 80025f8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80025fc:	81fb      	strh	r3, [r7, #14]
 80025fe:	e050      	b.n	80026a2 <echo_filter+0xf2>
		{

			if(i<index)
 8002600:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002604:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002608:	429a      	cmp	r2, r3
 800260a:	da23      	bge.n	8002654 <echo_filter+0xa4>
			{

				buffer[i] += (uint32_t)alpha*buffer[2047-(index-i)+1];
 800260c:	4b4b      	ldr	r3, [pc, #300]	@ (800273c <echo_filter+0x18c>)
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	edd7 7a00 	vldr	s15, [r7]
 800261e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002622:	ee17 4a90 	vmov	r4, s15
 8002626:	4b45      	ldr	r3, [pc, #276]	@ (800273c <echo_filter+0x18c>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 800262e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002632:	1ac3      	subs	r3, r0, r3
 8002634:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	fb03 f204 	mul.w	r2, r3, r4
 8002642:	4b3e      	ldr	r3, [pc, #248]	@ (800273c <echo_filter+0x18c>)
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4403      	add	r3, r0
 800264e:	440a      	add	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
				continue;
 8002652:	e020      	b.n	8002696 <echo_filter+0xe6>
			}

			buffer[i] += (uint32_t)alpha*buffer[i-index];
 8002654:	4b39      	ldr	r3, [pc, #228]	@ (800273c <echo_filter+0x18c>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	edd7 7a00 	vldr	s15, [r7]
 8002666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800266a:	ee17 4a90 	vmov	r4, s15
 800266e:	4b33      	ldr	r3, [pc, #204]	@ (800273c <echo_filter+0x18c>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002676:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800267a:	1ac3      	subs	r3, r0, r3
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	fb03 f204 	mul.w	r2, r3, r4
 8002686:	4b2d      	ldr	r3, [pc, #180]	@ (800273c <echo_filter+0x18c>)
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4403      	add	r3, r0
 8002692:	440a      	add	r2, r1
 8002694:	601a      	str	r2, [r3, #0]
		for(int16_t i=1023; i>=0; i--)
 8002696:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29b      	uxth	r3, r3
 80026a0:	81fb      	strh	r3, [r7, #14]
 80026a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	daaa      	bge.n	8002600 <echo_filter+0x50>
 80026aa:	e02f      	b.n	800270c <echo_filter+0x15c>

	else
	{
		/*A doua jumatate a bufferului*/

		for(int16_t i=2047; i>=1024; i--)
 80026ac:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80026b0:	81bb      	strh	r3, [r7, #12]
 80026b2:	e026      	b.n	8002702 <echo_filter+0x152>
		{

			buffer[i] += (uint32_t)alpha*buffer[i-index];
 80026b4:	4b21      	ldr	r3, [pc, #132]	@ (800273c <echo_filter+0x18c>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	6819      	ldr	r1, [r3, #0]
 80026c2:	edd7 7a00 	vldr	s15, [r7]
 80026c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026ca:	ee17 4a90 	vmov	r4, s15
 80026ce:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <echo_filter+0x18c>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 80026d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80026da:	1ac3      	subs	r3, r0, r3
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fb03 f204 	mul.w	r2, r3, r4
 80026e6:	4b15      	ldr	r3, [pc, #84]	@ (800273c <echo_filter+0x18c>)
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4403      	add	r3, r0
 80026f2:	440a      	add	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]
		for(int16_t i=2047; i>=1024; i--)
 80026f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29b      	uxth	r3, r3
 8002700:	81bb      	strh	r3, [r7, #12]
 8002702:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800270a:	dad3      	bge.n	80026b4 <echo_filter+0x104>
		}

	}


	flagBuffer = !flagBuffer; /*schimbam jumatatea bufferului*/
 800270c:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <echo_filter+0x188>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf14      	ite	ne
 8002714:	2301      	movne	r3, #1
 8002716:	2300      	moveq	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f083 0301 	eor.w	r3, r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <echo_filter+0x188>)
 8002728:	701a      	strb	r2, [r3, #0]


}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bd90      	pop	{r4, r7, pc}
 8002732:	bf00      	nop
 8002734:	f3af 8000 	nop.w
 8002738:	20000090 	.word	0x20000090
 800273c:	2000008c 	.word	0x2000008c
 8002740:	1eb851ec 	.word	0x1eb851ec
 8002744:	4036ab85 	.word	0x4036ab85

08002748 <play_audio_file_echo>:


void play_audio_file_echo(char *path, int8_t delay, float alpha)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	460b      	mov	r3, r1
 8002752:	ed87 0a01 	vstr	s0, [r7, #4]
 8002756:	72fb      	strb	r3, [r7, #11]
	 * Functie pentru redarea unui fisier audio din cardul cu efect ecou SD.
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 8002758:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800275c:	f00d ff4c 	bl	80105f8 <malloc>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	4b40      	ldr	r3, [pc, #256]	@ (8002868 <play_audio_file_echo+0x120>)
 8002766:	601a      	str	r2, [r3, #0]

	bool flagAudioDone = 1;
 8002768:	2301      	movs	r3, #1
 800276a:	75fb      	strb	r3, [r7, #23]
	flagBuffer = 1; /*Incepem din a doua jumatate*/
 800276c:	4b3f      	ldr	r3, [pc, #252]	@ (800286c <play_audio_file_echo+0x124>)
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]


	if(buffer == NULL)
 8002772:	4b3d      	ldr	r3, [pc, #244]	@ (8002868 <play_audio_file_echo+0x120>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d072      	beq.n	8002860 <play_audio_file_echo+0x118>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	currentDx = 0;
 800277a:	4b3d      	ldr	r3, [pc, #244]	@ (8002870 <play_audio_file_echo+0x128>)
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
	read_audio_file(path, buffer, &flagAudioDone); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 8002780:	4b39      	ldr	r3, [pc, #228]	@ (8002868 <play_audio_file_echo+0x120>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f107 0217 	add.w	r2, r7, #23
 8002788:	4619      	mov	r1, r3
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f003 f82a 	bl	80057e4 <read_audio_file>

	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 8002790:	4b35      	ldr	r3, [pc, #212]	@ (8002868 <play_audio_file_echo+0x120>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	2300      	movs	r3, #0
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800279c:	2100      	movs	r1, #0
 800279e:	4835      	ldr	r0, [pc, #212]	@ (8002874 <play_audio_file_echo+0x12c>)
 80027a0:	f004 fbd8 	bl	8006f54 <HAL_DAC_Start_DMA>

	while(!flagAudioDone && currentDx!=DxSelect)
 80027a4:	e037      	b.n	8002816 <play_audio_file_echo+0xce>
	{
		read_audio_file(path, buffer+1024, &flagAudioDone);
 80027a6:	4b30      	ldr	r3, [pc, #192]	@ (8002868 <play_audio_file_echo+0x120>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ae:	f107 0217 	add.w	r2, r7, #23
 80027b2:	4619      	mov	r1, r3
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f003 f815 	bl	80057e4 <read_audio_file>
		echo_filter(delay, alpha);
 80027ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80027be:	ed97 0a01 	vldr	s0, [r7, #4]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fef4 	bl	80025b0 <echo_filter>

		while(flagDmaDAC == 0);
 80027c8:	bf00      	nop
 80027ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002878 <play_audio_file_echo+0x130>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f083 0301 	eor.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f7      	bne.n	80027ca <play_audio_file_echo+0x82>
		flagDmaDAC = 0;
 80027da:	4b27      	ldr	r3, [pc, #156]	@ (8002878 <play_audio_file_echo+0x130>)
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]

		read_audio_file(path, buffer, &flagAudioDone);
 80027e0:	4b21      	ldr	r3, [pc, #132]	@ (8002868 <play_audio_file_echo+0x120>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f107 0217 	add.w	r2, r7, #23
 80027e8:	4619      	mov	r1, r3
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f002 fffa 	bl	80057e4 <read_audio_file>
		echo_filter(delay, alpha);
 80027f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80027f4:	ed97 0a01 	vldr	s0, [r7, #4]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff fed9 	bl	80025b0 <echo_filter>

		while(flagDmaDAC == 0);
 80027fe:	bf00      	nop
 8002800:	4b1d      	ldr	r3, [pc, #116]	@ (8002878 <play_audio_file_echo+0x130>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f083 0301 	eor.w	r3, r3, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f7      	bne.n	8002800 <play_audio_file_echo+0xb8>
		flagDmaDAC = 0;
 8002810:	4b19      	ldr	r3, [pc, #100]	@ (8002878 <play_audio_file_echo+0x130>)
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
	while(!flagAudioDone && currentDx!=DxSelect)
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	f083 0301 	eor.w	r3, r3, #1
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <play_audio_file_echo+0xe2>
 8002822:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <play_audio_file_echo+0x128>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2bbb      	cmp	r3, #187	@ 0xbb
 8002828:	d1bd      	bne.n	80027a6 <play_audio_file_echo+0x5e>
	}

	while(flagDmaDAC == 0);
 800282a:	bf00      	nop
 800282c:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <play_audio_file_echo+0x130>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	f083 0301 	eor.w	r3, r3, #1
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f7      	bne.n	800282c <play_audio_file_echo+0xe4>
	flagDmaDAC = 0;
 800283c:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <play_audio_file_echo+0x130>)
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
	currentDx = 0;
 8002842:	4b0b      	ldr	r3, [pc, #44]	@ (8002870 <play_audio_file_echo+0x128>)
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]
	flagAudioDone = 1;
 8002848:	2301      	movs	r3, #1
 800284a:	75fb      	strb	r3, [r7, #23]

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800284c:	2100      	movs	r1, #0
 800284e:	4809      	ldr	r0, [pc, #36]	@ (8002874 <play_audio_file_echo+0x12c>)
 8002850:	f004 fc42 	bl	80070d8 <HAL_DAC_Stop_DMA>

	free(buffer);
 8002854:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <play_audio_file_echo+0x120>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f00d fed5 	bl	8010608 <free>
 800285e:	e000      	b.n	8002862 <play_audio_file_echo+0x11a>
		return;
 8002860:	bf00      	nop

}
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	2000008c 	.word	0x2000008c
 800286c:	20000090 	.word	0x20000090
 8002870:	20000092 	.word	0x20000092
 8002874:	20014184 	.word	0x20014184
 8002878:	200144c6 	.word	0x200144c6

0800287c <reverb_filter>:


static void reverb_filter(void)
{
 800287c:	b490      	push	{r4, r7}
 800287e:	b08a      	sub	sp, #40	@ 0x28
 8002880:	af00      	add	r7, sp, #0
	 * stabil pentru SUM g < 1
	 * Input: void
	 * Output: void
	 */

	int16_t k[4] = {220,440,660,880}; /*coeficientii efectului Reverb precalculati (delayurile)*/
 8002882:	4a8d      	ldr	r2, [pc, #564]	@ (8002ab8 <reverb_filter+0x23c>)
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	e892 0003 	ldmia.w	r2, {r0, r1}
 800288c:	e883 0003 	stmia.w	r3, {r0, r1}
	float gain[4] = {0.3,0.25,0.2,0.15}; /*valorile de gain asociate*/
 8002890:	4b8a      	ldr	r3, [pc, #552]	@ (8002abc <reverb_filter+0x240>)
 8002892:	1d3c      	adds	r4, r7, #4
 8002894:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002896:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	float coefSum = 0; /*variabila intermediara de calculare a sumei de coeficienti*/
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24

	if(flagBuffer == 0)
 80028a0:	4b87      	ldr	r3, [pc, #540]	@ (8002ac0 <reverb_filter+0x244>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	f083 0301 	eor.w	r3, r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8094 	beq.w	80029d8 <reverb_filter+0x15c>
	{
		/*Prima jumatate a bufferului*/

		for(int16_t i=0; i<1024; i++)
 80028b0:	2300      	movs	r3, #0
 80028b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80028b4:	e089      	b.n	80029ca <reverb_filter+0x14e>
		{

			for(int8_t j=0; j<4; j++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80028bc:	e063      	b.n	8002986 <reverb_filter+0x10a>
			{

				if(i<k[j])
 80028be:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	3328      	adds	r3, #40	@ 0x28
 80028c6:	443b      	add	r3, r7
 80028c8:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80028cc:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 80028d0:	429a      	cmp	r2, r3
 80028d2:	da2a      	bge.n	800292a <reverb_filter+0xae>
				{

					coefSum += (uint32_t)gain[j]*buffer[2047-(k[j]-i)+1];
 80028d4:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	3328      	adds	r3, #40	@ 0x28
 80028dc:	443b      	add	r3, r7
 80028de:	3b24      	subs	r3, #36	@ 0x24
 80028e0:	edd3 7a00 	vldr	s15, [r3]
 80028e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028e8:	ee17 0a90 	vmov	r0, s15
 80028ec:	4b75      	ldr	r3, [pc, #468]	@ (8002ac4 <reverb_filter+0x248>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	3328      	adds	r3, #40	@ 0x28
 80028f8:	443b      	add	r3, r7
 80028fa:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80028fe:	4619      	mov	r1, r3
 8002900:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002904:	1acb      	subs	r3, r1, r3
 8002906:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	fb00 f303 	mul.w	r3, r0, r3
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002924:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
					continue;
 8002928:	e026      	b.n	8002978 <reverb_filter+0xfc>
				}

				coefSum += (uint32_t)gain[j]*buffer[i-k[j]];
 800292a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	3328      	adds	r3, #40	@ 0x28
 8002932:	443b      	add	r3, r7
 8002934:	3b24      	subs	r3, #36	@ 0x24
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800293e:	ee17 0a90 	vmov	r0, s15
 8002942:	4b60      	ldr	r3, [pc, #384]	@ (8002ac4 <reverb_filter+0x248>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	@ 0x22
 800294a:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	3328      	adds	r3, #40	@ 0x28
 8002952:	443b      	add	r3, r7
 8002954:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8002958:	1acb      	subs	r3, r1, r3
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	fb00 f303 	mul.w	r3, r0, r3
 8002964:	ee07 3a90 	vmov	s15, r3
 8002968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800296c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002970:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002974:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			for(int8_t j=0; j<4; j++)
 8002978:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800297c:	b2db      	uxtb	r3, r3
 800297e:	3301      	adds	r3, #1
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8002986:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800298a:	2b03      	cmp	r3, #3
 800298c:	dd97      	ble.n	80028be <reverb_filter+0x42>

			}


			buffer[i] += (uint32_t)coefSum;
 800298e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ac4 <reverb_filter+0x248>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80029a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029a4:	ee17 0a90 	vmov	r0, s15
 80029a8:	4b46      	ldr	r3, [pc, #280]	@ (8002ac4 <reverb_filter+0x248>)
 80029aa:	6819      	ldr	r1, [r3, #0]
 80029ac:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	4402      	add	r2, r0
 80029b6:	601a      	str	r2, [r3, #0]
			coefSum = 0;
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int16_t i=0; i<1024; i++)
 80029be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80029ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80029ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d2:	f6ff af70 	blt.w	80028b6 <reverb_filter+0x3a>
 80029d6:	e05a      	b.n	8002a8e <reverb_filter+0x212>

	else
	{
		/*A doua jumatate a bufferului*/

		for(int16_t i=1024; i<2048; i++)
 80029d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029dc:	83fb      	strh	r3, [r7, #30]
 80029de:	e051      	b.n	8002a84 <reverb_filter+0x208>
		{

			for(int8_t j=0; j<4; j++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	777b      	strb	r3, [r7, #29]
 80029e4:	e02c      	b.n	8002a40 <reverb_filter+0x1c4>
			{

				coefSum += (uint32_t)gain[j]*buffer[i-k[j]];
 80029e6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	3328      	adds	r3, #40	@ 0x28
 80029ee:	443b      	add	r3, r7
 80029f0:	3b24      	subs	r3, #36	@ 0x24
 80029f2:	edd3 7a00 	vldr	s15, [r3]
 80029f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029fa:	ee17 0a90 	vmov	r0, s15
 80029fe:	4b31      	ldr	r3, [pc, #196]	@ (8002ac4 <reverb_filter+0x248>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8002a06:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	3328      	adds	r3, #40	@ 0x28
 8002a0e:	443b      	add	r3, r7
 8002a10:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8002a14:	1acb      	subs	r3, r1, r3
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fb00 f303 	mul.w	r3, r0, r3
 8002a20:	ee07 3a90 	vmov	s15, r3
 8002a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a28:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a30:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			for(int8_t j=0; j<4; j++)
 8002a34:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	777b      	strb	r3, [r7, #29]
 8002a40:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	ddce      	ble.n	80029e6 <reverb_filter+0x16a>

			}

			buffer[i] += (uint32_t)coefSum;
 8002a48:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac4 <reverb_filter+0x248>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a5e:	ee17 0a90 	vmov	r0, s15
 8002a62:	4b18      	ldr	r3, [pc, #96]	@ (8002ac4 <reverb_filter+0x248>)
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	4402      	add	r2, r0
 8002a70:	601a      	str	r2, [r3, #0]
			coefSum = 0;
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int16_t i=1024; i<2048; i++)
 8002a78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	83fb      	strh	r3, [r7, #30]
 8002a84:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a8c:	dba8      	blt.n	80029e0 <reverb_filter+0x164>
		}

	}


	flagBuffer = !flagBuffer; /*schimbam jumatatea bufferului*/
 8002a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <reverb_filter+0x244>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f083 0301 	eor.w	r3, r3, #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <reverb_filter+0x244>)
 8002aaa:	701a      	strb	r2, [r3, #0]


}
 8002aac:	bf00      	nop
 8002aae:	3728      	adds	r7, #40	@ 0x28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc90      	pop	{r4, r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	08010b0c 	.word	0x08010b0c
 8002abc:	08010b14 	.word	0x08010b14
 8002ac0:	20000090 	.word	0x20000090
 8002ac4:	2000008c 	.word	0x2000008c

08002ac8 <play_audio_file_reverb>:



void play_audio_file_reverb(char *path)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	6078      	str	r0, [r7, #4]
	 * Functie pentru redarea unui fisier audio din cardul cu efect ecou SD.
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 8002ad0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002ad4:	f00d fd90 	bl	80105f8 <malloc>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	4b3b      	ldr	r3, [pc, #236]	@ (8002bcc <play_audio_file_reverb+0x104>)
 8002ade:	601a      	str	r2, [r3, #0]

	bool flagAudioDone = 1;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
	flagBuffer = 1; /*Incepem din a doua jumatate*/
 8002ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8002bd0 <play_audio_file_reverb+0x108>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]


	if(buffer == NULL)
 8002aea:	4b38      	ldr	r3, [pc, #224]	@ (8002bcc <play_audio_file_reverb+0x104>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d068      	beq.n	8002bc4 <play_audio_file_reverb+0xfc>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	currentDx = 0;
 8002af2:	4b38      	ldr	r3, [pc, #224]	@ (8002bd4 <play_audio_file_reverb+0x10c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
	read_audio_file(path, buffer, &flagAudioDone); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 8002af8:	4b34      	ldr	r3, [pc, #208]	@ (8002bcc <play_audio_file_reverb+0x104>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f107 020f 	add.w	r2, r7, #15
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f002 fe6e 	bl	80057e4 <read_audio_file>

	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 8002b08:	4b30      	ldr	r3, [pc, #192]	@ (8002bcc <play_audio_file_reverb+0x104>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b14:	2100      	movs	r1, #0
 8002b16:	4830      	ldr	r0, [pc, #192]	@ (8002bd8 <play_audio_file_reverb+0x110>)
 8002b18:	f004 fa1c 	bl	8006f54 <HAL_DAC_Start_DMA>

	while(!flagAudioDone && currentDx!=DxSelect)
 8002b1c:	e02d      	b.n	8002b7a <play_audio_file_reverb+0xb2>
	{
		read_audio_file(path, buffer+1024, &flagAudioDone);
 8002b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002bcc <play_audio_file_reverb+0x104>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b26:	f107 020f 	add.w	r2, r7, #15
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f002 fe59 	bl	80057e4 <read_audio_file>
		reverb_filter();
 8002b32:	f7ff fea3 	bl	800287c <reverb_filter>

		while(flagDmaDAC == 0);
 8002b36:	bf00      	nop
 8002b38:	4b28      	ldr	r3, [pc, #160]	@ (8002bdc <play_audio_file_reverb+0x114>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f083 0301 	eor.w	r3, r3, #1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1f7      	bne.n	8002b38 <play_audio_file_reverb+0x70>
		flagDmaDAC = 0;
 8002b48:	4b24      	ldr	r3, [pc, #144]	@ (8002bdc <play_audio_file_reverb+0x114>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]

		read_audio_file(path, buffer, &flagAudioDone);
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bcc <play_audio_file_reverb+0x104>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f107 020f 	add.w	r2, r7, #15
 8002b56:	4619      	mov	r1, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f002 fe43 	bl	80057e4 <read_audio_file>
		reverb_filter();
 8002b5e:	f7ff fe8d 	bl	800287c <reverb_filter>

		while(flagDmaDAC == 0);
 8002b62:	bf00      	nop
 8002b64:	4b1d      	ldr	r3, [pc, #116]	@ (8002bdc <play_audio_file_reverb+0x114>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f083 0301 	eor.w	r3, r3, #1
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f7      	bne.n	8002b64 <play_audio_file_reverb+0x9c>
		flagDmaDAC = 0;
 8002b74:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <play_audio_file_reverb+0x114>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
	while(!flagAudioDone && currentDx!=DxSelect)
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
 8002b7c:	f083 0301 	eor.w	r3, r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <play_audio_file_reverb+0xc6>
 8002b86:	4b13      	ldr	r3, [pc, #76]	@ (8002bd4 <play_audio_file_reverb+0x10c>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2bbb      	cmp	r3, #187	@ 0xbb
 8002b8c:	d1c7      	bne.n	8002b1e <play_audio_file_reverb+0x56>
	}

	while(flagDmaDAC == 0);
 8002b8e:	bf00      	nop
 8002b90:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <play_audio_file_reverb+0x114>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f083 0301 	eor.w	r3, r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f7      	bne.n	8002b90 <play_audio_file_reverb+0xc8>
	flagDmaDAC = 0;
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <play_audio_file_reverb+0x114>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
	currentDx = 0;
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <play_audio_file_reverb+0x10c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
	flagAudioDone = 1;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4809      	ldr	r0, [pc, #36]	@ (8002bd8 <play_audio_file_reverb+0x110>)
 8002bb4:	f004 fa90 	bl	80070d8 <HAL_DAC_Stop_DMA>

	free(buffer);
 8002bb8:	4b04      	ldr	r3, [pc, #16]	@ (8002bcc <play_audio_file_reverb+0x104>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f00d fd23 	bl	8010608 <free>
 8002bc2:	e000      	b.n	8002bc6 <play_audio_file_reverb+0xfe>
		return;
 8002bc4:	bf00      	nop

}
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	2000008c 	.word	0x2000008c
 8002bd0:	20000090 	.word	0x20000090
 8002bd4:	20000092 	.word	0x20000092
 8002bd8:	20014184 	.word	0x20014184
 8002bdc:	200144c6 	.word	0x200144c6

08002be0 <init_cursor>:
uint16_t BackGroundColor = 0xFFFF; /*Variabila globala pentru culoarea de fundal curenta*/

ENTITY cursor;

void init_cursor()
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
	cursor.id = 0x88;
 8002be4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <init_cursor+0x34>)
 8002be6:	2288      	movs	r2, #136	@ 0x88
 8002be8:	701a      	strb	r2, [r3, #0]
	cursor.x0 = 0;
 8002bea:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <init_cursor+0x34>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	805a      	strh	r2, [r3, #2]
	cursor.y0 = 0;
 8002bf0:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <init_cursor+0x34>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	809a      	strh	r2, [r3, #4]
	cursor.x1 = 16;
 8002bf6:	4b07      	ldr	r3, [pc, #28]	@ (8002c14 <init_cursor+0x34>)
 8002bf8:	2210      	movs	r2, #16
 8002bfa:	80da      	strh	r2, [r3, #6]
	cursor.y1 = 16;
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <init_cursor+0x34>)
 8002bfe:	2210      	movs	r2, #16
 8002c00:	811a      	strh	r2, [r3, #8]
	cursor.ST.color = RED;
 8002c02:	4b04      	ldr	r3, [pc, #16]	@ (8002c14 <init_cursor+0x34>)
 8002c04:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002c08:	819a      	strh	r2, [r3, #12]
}
 8002c0a:	bf00      	nop
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	20000094 	.word	0x20000094

08002c18 <convert_color_16_to_18>:


void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	0adb      	lsrs	r3, r3, #11
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	115b      	asrs	r3, r3, #5
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c36:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	4613      	mov	r3, r2
 8002c46:	019b      	lsls	r3, r3, #6
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	4a16      	ldr	r2, [pc, #88]	@ (8002ca4 <convert_color_16_to_18+0x8c>)
 8002c4c:	fb82 1203 	smull	r1, r2, r2, r3
 8002c50:	441a      	add	r2, r3
 8002c52:	1112      	asrs	r2, r2, #4
 8002c54:	17db      	asrs	r3, r3, #31
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 8002c5e:	7bbb      	ldrb	r3, [r7, #14]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 8002c64:	7b7a      	ldrb	r2, [r7, #13]
 8002c66:	4613      	mov	r3, r2
 8002c68:	019b      	lsls	r3, r3, #6
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca4 <convert_color_16_to_18+0x8c>)
 8002c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8002c72:	441a      	add	r2, r3
 8002c74:	1112      	asrs	r2, r2, #4
 8002c76:	17db      	asrs	r3, r3, #31
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	7bba      	ldrb	r2, [r7, #14]
 8002c8c:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	3302      	adds	r3, #2
 8002c92:	7b7a      	ldrb	r2, [r7, #13]
 8002c94:	701a      	strb	r2, [r3, #0]

}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	84210843 	.word	0x84210843

08002ca8 <write_color>:


void write_color(uint16_t color)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 8002cb2:	f107 020c 	add.w	r2, r7, #12
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ffac 	bl	8002c18 <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8002cc0:	f107 010c 	add.w	r1, r7, #12
 8002cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc8:	2203      	movs	r2, #3
 8002cca:	4803      	ldr	r0, [pc, #12]	@ (8002cd8 <write_color+0x30>)
 8002ccc:	f006 fdb9 	bl	8009842 <HAL_SPI_Transmit>


}
 8002cd0:	bf00      	nop
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	2001427c 	.word	0x2001427c

08002cdc <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	80fb      	strh	r3, [r7, #6]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	80bb      	strh	r3, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 8002cee:	88bb      	ldrh	r3, [r7, #4]
 8002cf0:	88fa      	ldrh	r2, [r7, #6]
 8002cf2:	88b9      	ldrh	r1, [r7, #4]
 8002cf4:	88f8      	ldrh	r0, [r7, #6]
 8002cf6:	2477      	movs	r4, #119	@ 0x77
 8002cf8:	9400      	str	r4, [sp, #0]
 8002cfa:	f001 fd4b 	bl	8004794 <set_adress_window>

	DC_DATA();
 8002cfe:	2201      	movs	r2, #1
 8002d00:	2108      	movs	r1, #8
 8002d02:	480a      	ldr	r0, [pc, #40]	@ (8002d2c <draw_pixel+0x50>)
 8002d04:	f005 f8ca 	bl	8007e9c <HAL_GPIO_WritePin>
	CS_A();
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2110      	movs	r1, #16
 8002d0c:	4807      	ldr	r0, [pc, #28]	@ (8002d2c <draw_pixel+0x50>)
 8002d0e:	f005 f8c5 	bl	8007e9c <HAL_GPIO_WritePin>

	write_color(color);
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ffc7 	bl	8002ca8 <write_color>

	CS_D();
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	2110      	movs	r1, #16
 8002d1e:	4803      	ldr	r0, [pc, #12]	@ (8002d2c <draw_pixel+0x50>)
 8002d20:	f005 f8bc 	bl	8007e9c <HAL_GPIO_WritePin>

}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	40020c00 	.word	0x40020c00

08002d30 <draw_pixel_data>:


static inline void draw_pixel_data(uint16_t x, uint16_t y, uint8_t *data)
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	4603      	mov	r3, r0
 8002d38:	603a      	str	r2, [r7, #0]
 8002d3a:	80fb      	strh	r3, [r7, #6]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	80bb      	strh	r3, [r7, #4]
	set_adress_window(x,y,x,y, 'w');
 8002d40:	88bb      	ldrh	r3, [r7, #4]
 8002d42:	88fa      	ldrh	r2, [r7, #6]
 8002d44:	88b9      	ldrh	r1, [r7, #4]
 8002d46:	88f8      	ldrh	r0, [r7, #6]
 8002d48:	2477      	movs	r4, #119	@ 0x77
 8002d4a:	9400      	str	r4, [sp, #0]
 8002d4c:	f001 fd22 	bl	8004794 <set_adress_window>

	DC_DATA();
 8002d50:	2201      	movs	r2, #1
 8002d52:	2108      	movs	r1, #8
 8002d54:	480b      	ldr	r0, [pc, #44]	@ (8002d84 <draw_pixel_data+0x54>)
 8002d56:	f005 f8a1 	bl	8007e9c <HAL_GPIO_WritePin>
	CS_A();
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2110      	movs	r1, #16
 8002d5e:	4809      	ldr	r0, [pc, #36]	@ (8002d84 <draw_pixel_data+0x54>)
 8002d60:	f005 f89c 	bl	8007e9c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295
 8002d68:	2203      	movs	r2, #3
 8002d6a:	6839      	ldr	r1, [r7, #0]
 8002d6c:	4806      	ldr	r0, [pc, #24]	@ (8002d88 <draw_pixel_data+0x58>)
 8002d6e:	f006 fd68 	bl	8009842 <HAL_SPI_Transmit>

	CS_D();
 8002d72:	2201      	movs	r2, #1
 8002d74:	2110      	movs	r1, #16
 8002d76:	4803      	ldr	r0, [pc, #12]	@ (8002d84 <draw_pixel_data+0x54>)
 8002d78:	f005 f890 	bl	8007e9c <HAL_GPIO_WritePin>

}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd90      	pop	{r4, r7, pc}
 8002d84:	40020c00 	.word	0x40020c00
 8002d88:	2001427c 	.word	0x2001427c

08002d8c <fill_screen1>:



void fill_screen1(uint16_t color)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	4603      	mov	r3, r0
 8002d94:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8002d96:	f107 020c 	add.w	r2, r7, #12
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff3a 	bl	8002c18 <convert_color_16_to_18>

	uint8_t *line = malloc(320*sizeof(pixel));
 8002da4:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8002da8:	f00d fc26 	bl	80105f8 <malloc>
 8002dac:	4603      	mov	r3, r0
 8002dae:	613b      	str	r3, [r7, #16]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8002db0:	2377      	movs	r3, #119	@ 0x77
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	f240 13df 	movw	r3, #479	@ 0x1df
 8002db8:	f240 123f 	movw	r2, #319	@ 0x13f
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f001 fce8 	bl	8004794 <set_adress_window>

	DC_DATA();
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2108      	movs	r1, #8
 8002dc8:	481e      	ldr	r0, [pc, #120]	@ (8002e44 <fill_screen1+0xb8>)
 8002dca:	f005 f867 	bl	8007e9c <HAL_GPIO_WritePin>
	CS_A();
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2110      	movs	r1, #16
 8002dd2:	481c      	ldr	r0, [pc, #112]	@ (8002e44 <fill_screen1+0xb8>)
 8002dd4:	f005 f862 	bl	8007e9c <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	82fb      	strh	r3, [r7, #22]
 8002ddc:	e00f      	b.n	8002dfe <fill_screen1+0x72>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 8002dde:	8afa      	ldrh	r2, [r7, #22]
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4413      	add	r3, r2
 8002dea:	461a      	mov	r2, r3
 8002dec:	f107 030c 	add.w	r3, r7, #12
 8002df0:	8819      	ldrh	r1, [r3, #0]
 8002df2:	789b      	ldrb	r3, [r3, #2]
 8002df4:	8011      	strh	r1, [r2, #0]
 8002df6:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 8002df8:	8afb      	ldrh	r3, [r7, #22]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	82fb      	strh	r3, [r7, #22]
 8002dfe:	8afb      	ldrh	r3, [r7, #22]
 8002e00:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002e04:	d3eb      	bcc.n	8002dde <fill_screen1+0x52>
	}

	for(uint16_t y=0; y<480; y++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	82bb      	strh	r3, [r7, #20]
 8002e0a:	e00a      	b.n	8002e22 <fill_screen1+0x96>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 8002e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e10:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8002e14:	6939      	ldr	r1, [r7, #16]
 8002e16:	480c      	ldr	r0, [pc, #48]	@ (8002e48 <fill_screen1+0xbc>)
 8002e18:	f006 fd13 	bl	8009842 <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 8002e1c:	8abb      	ldrh	r3, [r7, #20]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	82bb      	strh	r3, [r7, #20]
 8002e22:	8abb      	ldrh	r3, [r7, #20]
 8002e24:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8002e28:	d3f0      	bcc.n	8002e0c <fill_screen1+0x80>

	}

	free(line);
 8002e2a:	6938      	ldr	r0, [r7, #16]
 8002e2c:	f00d fbec 	bl	8010608 <free>

	CS_D();
 8002e30:	2201      	movs	r2, #1
 8002e32:	2110      	movs	r1, #16
 8002e34:	4803      	ldr	r0, [pc, #12]	@ (8002e44 <fill_screen1+0xb8>)
 8002e36:	f005 f831 	bl	8007e9c <HAL_GPIO_WritePin>

}
 8002e3a:	bf00      	nop
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40020c00 	.word	0x40020c00
 8002e48:	2001427c 	.word	0x2001427c

08002e4c <fill_screen2>:


void fill_screen2(uint16_t color)
{
 8002e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e50:	b08f      	sub	sp, #60	@ 0x3c
 8002e52:	af02      	add	r7, sp, #8
 8002e54:	4603      	mov	r3, r0
 8002e56:	80fb      	strh	r3, [r7, #6]
 8002e58:	466b      	mov	r3, sp
 8002e5a:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8002e5c:	2377      	movs	r3, #119	@ 0x77
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	f240 13df 	movw	r3, #479	@ 0x1df
 8002e64:	f240 123f 	movw	r2, #319	@ 0x13f
 8002e68:	2100      	movs	r1, #0
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f001 fc92 	bl	8004794 <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 8002e70:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 8002e76:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8002e7a:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8002e7c:	88fb      	ldrh	r3, [r7, #6]
 8002e7e:	0adb      	lsrs	r3, r3, #11
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	115b      	asrs	r3, r3, #5
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e8e:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 8002e9a:	7ffa      	ldrb	r2, [r7, #31]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	4a4f      	ldr	r2, [pc, #316]	@ (8002fe0 <fill_screen2+0x194>)
 8002ea4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ea8:	441a      	add	r2, r3
 8002eaa:	1112      	asrs	r2, r2, #4
 8002eac:	17db      	asrs	r3, r3, #31
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 8002eb2:	7fba      	ldrb	r2, [r7, #30]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	4a4a      	ldr	r2, [pc, #296]	@ (8002fe4 <fill_screen2+0x198>)
 8002ebc:	fb82 1203 	smull	r1, r2, r2, r3
 8002ec0:	441a      	add	r2, r3
 8002ec2:	1152      	asrs	r2, r2, #5
 8002ec4:	17db      	asrs	r3, r3, #31
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 8002eca:	7f7a      	ldrb	r2, [r7, #29]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	4a43      	ldr	r2, [pc, #268]	@ (8002fe0 <fill_screen2+0x194>)
 8002ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ed8:	441a      	add	r2, r3
 8002eda:	1112      	asrs	r2, r2, #4
 8002edc:	17db      	asrs	r3, r3, #31
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	2108      	movs	r1, #8
 8002ee6:	4840      	ldr	r0, [pc, #256]	@ (8002fe8 <fill_screen2+0x19c>)
 8002ee8:	f004 ffd8 	bl	8007e9c <HAL_GPIO_WritePin>
	CS_A();
 8002eec:	2200      	movs	r2, #0
 8002eee:	2110      	movs	r1, #16
 8002ef0:	483d      	ldr	r0, [pc, #244]	@ (8002fe8 <fill_screen2+0x19c>)
 8002ef2:	f004 ffd3 	bl	8007e9c <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 8002ef6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ef8:	460b      	mov	r3, r1
 8002efa:	3b01      	subs	r3, #1
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	2300      	movs	r3, #0
 8002f00:	4688      	mov	r8, r1
 8002f02:	4699      	mov	r9, r3
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f18:	2300      	movs	r3, #0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	461d      	mov	r5, r3
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	00eb      	lsls	r3, r5, #3
 8002f28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f2c:	00e2      	lsls	r2, r4, #3
 8002f2e:	1dcb      	adds	r3, r1, #7
 8002f30:	08db      	lsrs	r3, r3, #3
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	ebad 0d03 	sub.w	sp, sp, r3
 8002f38:	ab02      	add	r3, sp, #8
 8002f3a:	3300      	adds	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f42:	e011      	b.n	8002f68 <fill_screen2+0x11c>
	{
		frame[j] = r;
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f48:	4413      	add	r3, r2
 8002f4a:	7ffa      	ldrb	r2, [r7, #31]
 8002f4c:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 8002f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f50:	3301      	adds	r3, #1
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	7fb9      	ldrb	r1, [r7, #30]
 8002f56:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 8002f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	7f79      	ldrb	r1, [r7, #29]
 8002f60:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 8002f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f64:	3303      	adds	r3, #3
 8002f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d3e9      	bcc.n	8002f44 <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 8002f70:	6a3a      	ldr	r2, [r7, #32]
 8002f72:	4613      	mov	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4413      	add	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 8002f84:	4b19      	ldr	r3, [pc, #100]	@ (8002fec <fill_screen2+0x1a0>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f8e:	e012      	b.n	8002fb6 <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 8002f90:	bf00      	nop
 8002f92:	4b16      	ldr	r3, [pc, #88]	@ (8002fec <fill_screen2+0x1a0>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0fa      	beq.n	8002f92 <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 8002f9c:	4b13      	ldr	r3, [pc, #76]	@ (8002fec <fill_screen2+0x1a0>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	6979      	ldr	r1, [r7, #20]
 8002faa:	4811      	ldr	r0, [pc, #68]	@ (8002ff0 <fill_screen2+0x1a4>)
 8002fac:	f007 f976 	bl	800a29c <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 8002fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d3e8      	bcc.n	8002f90 <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 8002fbe:	bf00      	nop
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <fill_screen2+0x1a0>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0fa      	beq.n	8002fc0 <fill_screen2+0x174>
	CS_D();
 8002fca:	2201      	movs	r2, #1
 8002fcc:	2110      	movs	r1, #16
 8002fce:	4806      	ldr	r0, [pc, #24]	@ (8002fe8 <fill_screen2+0x19c>)
 8002fd0:	f004 ff64 	bl	8007e9c <HAL_GPIO_WritePin>
 8002fd4:	46b5      	mov	sp, r6
}
 8002fd6:	bf00      	nop
 8002fd8:	3734      	adds	r7, #52	@ 0x34
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fe0:	84210843 	.word	0x84210843
 8002fe4:	82082083 	.word	0x82082083
 8002fe8:	40020c00 	.word	0x40020c00
 8002fec:	200144c4 	.word	0x200144c4
 8002ff0:	2001427c 	.word	0x2001427c

08002ff4 <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b089      	sub	sp, #36	@ 0x24
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	4604      	mov	r4, r0
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	461a      	mov	r2, r3
 8003002:	4623      	mov	r3, r4
 8003004:	80fb      	strh	r3, [r7, #6]
 8003006:	4603      	mov	r3, r0
 8003008:	80bb      	strh	r3, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	70fb      	strb	r3, [r7, #3]
 800300e:	4613      	mov	r3, r2
 8003010:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 8003012:	4b3a      	ldr	r3, [pc, #232]	@ (80030fc <print_character+0x108>)
 8003014:	889a      	ldrh	r2, [r3, #4]
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	4413      	add	r3, r2
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29c      	uxth	r4, r3
 8003020:	4b36      	ldr	r3, [pc, #216]	@ (80030fc <print_character+0x108>)
 8003022:	88da      	ldrh	r2, [r3, #6]
 8003024:	88bb      	ldrh	r3, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29b      	uxth	r3, r3
 800302e:	88b9      	ldrh	r1, [r7, #4]
 8003030:	88f8      	ldrh	r0, [r7, #6]
 8003032:	2277      	movs	r2, #119	@ 0x77
 8003034:	9200      	str	r2, [sp, #0]
 8003036:	4622      	mov	r2, r4
 8003038:	f001 fbac 	bl	8004794 <set_adress_window>

	uint16_t mask = 0x8000;
 800303c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003040:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 8003046:	f107 020c 	add.w	r2, r7, #12
 800304a:	883b      	ldrh	r3, [r7, #0]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fde2 	bl	8002c18 <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 8003054:	f107 0208 	add.w	r2, r7, #8
 8003058:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fddb 	bl	8002c18 <convert_color_16_to_18>


	DC_DATA();
 8003062:	2201      	movs	r2, #1
 8003064:	2108      	movs	r1, #8
 8003066:	4826      	ldr	r0, [pc, #152]	@ (8003100 <print_character+0x10c>)
 8003068:	f004 ff18 	bl	8007e9c <HAL_GPIO_WritePin>
	CS_A();
 800306c:	2200      	movs	r2, #0
 800306e:	2110      	movs	r1, #16
 8003070:	4823      	ldr	r0, [pc, #140]	@ (8003100 <print_character+0x10c>)
 8003072:	f004 ff13 	bl	8007e9c <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 8003076:	2300      	movs	r3, #0
 8003078:	75fb      	strb	r3, [r7, #23]
 800307a:	e030      	b.n	80030de <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 800307c:	4b1f      	ldr	r3, [pc, #124]	@ (80030fc <print_character+0x108>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	3b20      	subs	r3, #32
 8003084:	491d      	ldr	r1, [pc, #116]	@ (80030fc <print_character+0x108>)
 8003086:	88c9      	ldrh	r1, [r1, #6]
 8003088:	fb03 f101 	mul.w	r1, r3, r1
 800308c:	7dfb      	ldrb	r3, [r7, #23]
 800308e:	440b      	add	r3, r1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8003098:	2300      	movs	r3, #0
 800309a:	75bb      	strb	r3, [r7, #22]
 800309c:	e016      	b.n	80030cc <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 800309e:	8a7a      	ldrh	r2, [r7, #18]
 80030a0:	7dbb      	ldrb	r3, [r7, #22]
 80030a2:	409a      	lsls	r2, r3
 80030a4:	8abb      	ldrh	r3, [r7, #20]
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 80030ac:	f107 030c 	add.w	r3, r7, #12
 80030b0:	2103      	movs	r1, #3
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 f9d6 	bl	8004464 <LCD_send_data_multi>
 80030b8:	e005      	b.n	80030c6 <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 80030ba:	f107 0308 	add.w	r3, r7, #8
 80030be:	2103      	movs	r1, #3
 80030c0:	4618      	mov	r0, r3
 80030c2:	f001 f9cf 	bl	8004464 <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 80030c6:	7dbb      	ldrb	r3, [r7, #22]
 80030c8:	3301      	adds	r3, #1
 80030ca:	75bb      	strb	r3, [r7, #22]
 80030cc:	7dbb      	ldrb	r3, [r7, #22]
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	4b0a      	ldr	r3, [pc, #40]	@ (80030fc <print_character+0x108>)
 80030d2:	889b      	ldrh	r3, [r3, #4]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d3e2      	bcc.n	800309e <print_character+0xaa>
	for(i=0; i<font.height; i++)
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	3301      	adds	r3, #1
 80030dc:	75fb      	strb	r3, [r7, #23]
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <print_character+0x108>)
 80030e4:	88db      	ldrh	r3, [r3, #6]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d3c8      	bcc.n	800307c <print_character+0x88>
			}
		}
	}

	CS_D();
 80030ea:	2201      	movs	r2, #1
 80030ec:	2110      	movs	r1, #16
 80030ee:	4804      	ldr	r0, [pc, #16]	@ (8003100 <print_character+0x10c>)
 80030f0:	f004 fed4 	bl	8007e9c <HAL_GPIO_WritePin>

}
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd90      	pop	{r4, r7, pc}
 80030fc:	20000000 	.word	0x20000000
 8003100:	40020c00 	.word	0x40020c00

08003104 <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint16_t fontColor, uint16_t backColor)
{
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b089      	sub	sp, #36	@ 0x24
 8003108:	af02      	add	r7, sp, #8
 800310a:	60ba      	str	r2, [r7, #8]
 800310c:	461a      	mov	r2, r3
 800310e:	4603      	mov	r3, r0
 8003110:	81fb      	strh	r3, [r7, #14]
 8003112:	460b      	mov	r3, r1
 8003114:	81bb      	strh	r3, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]

	char *temp = string;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	617b      	str	r3, [r7, #20]

	while((*string)!='\0')
 800311e:	e027      	b.n	8003170 <print_string+0x6c>
	{
		if(x + font.width > 320)
 8003120:	89fb      	ldrh	r3, [r7, #14]
 8003122:	4a18      	ldr	r2, [pc, #96]	@ (8003184 <print_string+0x80>)
 8003124:	8892      	ldrh	r2, [r2, #4]
 8003126:	4413      	add	r3, r2
 8003128:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800312c:	dd07      	ble.n	800313e <print_string+0x3a>
		{
			x = font.width;
 800312e:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <print_string+0x80>)
 8003130:	889b      	ldrh	r3, [r3, #4]
 8003132:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 8003134:	4b13      	ldr	r3, [pc, #76]	@ (8003184 <print_string+0x80>)
 8003136:	88da      	ldrh	r2, [r3, #6]
 8003138:	89bb      	ldrh	r3, [r7, #12]
 800313a:	4413      	add	r3, r2
 800313c:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 800313e:	89bb      	ldrh	r3, [r7, #12]
 8003140:	4a10      	ldr	r2, [pc, #64]	@ (8003184 <print_string+0x80>)
 8003142:	88d2      	ldrh	r2, [r2, #6]
 8003144:	4413      	add	r3, r2
 8003146:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 800314a:	dc16      	bgt.n	800317a <print_string+0x76>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	781a      	ldrb	r2, [r3, #0]
 8003150:	88fc      	ldrh	r4, [r7, #6]
 8003152:	89b9      	ldrh	r1, [r7, #12]
 8003154:	89f8      	ldrh	r0, [r7, #14]
 8003156:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	4623      	mov	r3, r4
 800315c:	f7ff ff4a 	bl	8002ff4 <print_character>
		string++;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	3301      	adds	r3, #1
 8003164:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8003166:	4b07      	ldr	r3, [pc, #28]	@ (8003184 <print_string+0x80>)
 8003168:	889a      	ldrh	r2, [r3, #4]
 800316a:	89fb      	ldrh	r3, [r7, #14]
 800316c:	4413      	add	r3, r2
 800316e:	81fb      	strh	r3, [r7, #14]
	while((*string)!='\0')
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1d3      	bne.n	8003120 <print_string+0x1c>
 8003178:	e000      	b.n	800317c <print_string+0x78>
			return;
 800317a:	bf00      	nop
	}

}
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	bd90      	pop	{r4, r7, pc}
 8003182:	bf00      	nop
 8003184:	20000000 	.word	0x20000000

08003188 <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b087      	sub	sp, #28
 800318c:	af02      	add	r7, sp, #8
 800318e:	4604      	mov	r4, r0
 8003190:	4608      	mov	r0, r1
 8003192:	4611      	mov	r1, r2
 8003194:	461a      	mov	r2, r3
 8003196:	4623      	mov	r3, r4
 8003198:	80fb      	strh	r3, [r7, #6]
 800319a:	4603      	mov	r3, r0
 800319c:	80bb      	strh	r3, [r7, #4]
 800319e:	460b      	mov	r3, r1
 80031a0:	807b      	strh	r3, [r7, #2]
 80031a2:	4613      	mov	r3, r2
 80031a4:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 80031a6:	88fa      	ldrh	r2, [r7, #6]
 80031a8:	887b      	ldrh	r3, [r7, #2]
 80031aa:	4413      	add	r3, r2
 80031ac:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	88bb      	ldrh	r3, [r7, #4]
 80031b6:	88b9      	ldrh	r1, [r7, #4]
 80031b8:	88f8      	ldrh	r0, [r7, #6]
 80031ba:	2477      	movs	r4, #119	@ 0x77
 80031bc:	9400      	str	r4, [sp, #0]
 80031be:	f001 fae9 	bl	8004794 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 80031c2:	f107 0208 	add.w	r2, r7, #8
 80031c6:	883b      	ldrh	r3, [r7, #0]
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fd24 	bl	8002c18 <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	81fb      	strh	r3, [r7, #14]
 80031d4:	e008      	b.n	80031e8 <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 80031d6:	f107 0308 	add.w	r3, r7, #8
 80031da:	2103      	movs	r1, #3
 80031dc:	4618      	mov	r0, r3
 80031de:	f001 f941 	bl	8004464 <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 80031e2:	89fb      	ldrh	r3, [r7, #14]
 80031e4:	3301      	adds	r3, #1
 80031e6:	81fb      	strh	r3, [r7, #14]
 80031e8:	89fa      	ldrh	r2, [r7, #14]
 80031ea:	8879      	ldrh	r1, [r7, #2]
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	1acb      	subs	r3, r1, r3
 80031f0:	429a      	cmp	r2, r3
 80031f2:	dbf0      	blt.n	80031d6 <draw_horizontal_line+0x4e>
	}


}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd90      	pop	{r4, r7, pc}

080031fe <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 80031fe:	b590      	push	{r4, r7, lr}
 8003200:	b087      	sub	sp, #28
 8003202:	af02      	add	r7, sp, #8
 8003204:	4604      	mov	r4, r0
 8003206:	4608      	mov	r0, r1
 8003208:	4611      	mov	r1, r2
 800320a:	461a      	mov	r2, r3
 800320c:	4623      	mov	r3, r4
 800320e:	80fb      	strh	r3, [r7, #6]
 8003210:	4603      	mov	r3, r0
 8003212:	80bb      	strh	r3, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	807b      	strh	r3, [r7, #2]
 8003218:	4613      	mov	r3, r2
 800321a:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 800321c:	88ba      	ldrh	r2, [r7, #4]
 800321e:	887b      	ldrh	r3, [r7, #2]
 8003220:	4413      	add	r3, r2
 8003222:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8003224:	887b      	ldrh	r3, [r7, #2]
 8003226:	3b01      	subs	r3, #1
 8003228:	b29b      	uxth	r3, r3
 800322a:	88fa      	ldrh	r2, [r7, #6]
 800322c:	88b9      	ldrh	r1, [r7, #4]
 800322e:	88f8      	ldrh	r0, [r7, #6]
 8003230:	2477      	movs	r4, #119	@ 0x77
 8003232:	9400      	str	r4, [sp, #0]
 8003234:	f001 faae 	bl	8004794 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8003238:	f107 0208 	add.w	r2, r7, #8
 800323c:	883b      	ldrh	r3, [r7, #0]
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fce9 	bl	8002c18 <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8003246:	2300      	movs	r3, #0
 8003248:	81fb      	strh	r3, [r7, #14]
 800324a:	e008      	b.n	800325e <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 800324c:	f107 0308 	add.w	r3, r7, #8
 8003250:	2103      	movs	r1, #3
 8003252:	4618      	mov	r0, r3
 8003254:	f001 f906 	bl	8004464 <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8003258:	89fb      	ldrh	r3, [r7, #14]
 800325a:	3301      	adds	r3, #1
 800325c:	81fb      	strh	r3, [r7, #14]
 800325e:	89fa      	ldrh	r2, [r7, #14]
 8003260:	8879      	ldrh	r1, [r7, #2]
 8003262:	88bb      	ldrh	r3, [r7, #4]
 8003264:	1acb      	subs	r3, r1, r3
 8003266:	429a      	cmp	r2, r3
 8003268:	dbf0      	blt.n	800324c <draw_vertical_line+0x4e>
	}


}
 800326a:	bf00      	nop
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	bd90      	pop	{r4, r7, pc}

08003274 <draw_rectangle_slow>:


void draw_rectangle_slow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b08b      	sub	sp, #44	@ 0x2c
 8003278:	af02      	add	r7, sp, #8
 800327a:	4604      	mov	r4, r0
 800327c:	4608      	mov	r0, r1
 800327e:	4611      	mov	r1, r2
 8003280:	461a      	mov	r2, r3
 8003282:	4623      	mov	r3, r4
 8003284:	80fb      	strh	r3, [r7, #6]
 8003286:	4603      	mov	r3, r0
 8003288:	80bb      	strh	r3, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	807b      	strh	r3, [r7, #2]
 800328e:	4613      	mov	r3, r2
 8003290:	803b      	strh	r3, [r7, #0]
	 * 		  (x1,y1) offseturile fata de coordonatele initiale (numarul de pixeli)
	 * Output: Void
	 */


	uint16_t frameSize = 1024; /*nr de pixel dintr-un frame*/
 8003292:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003296:	833b      	strh	r3, [r7, #24]
	uint8_t pixel[3];
	unsigned int pixelNr = x1*y1;
 8003298:	887b      	ldrh	r3, [r7, #2]
 800329a:	883a      	ldrh	r2, [r7, #0]
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	617b      	str	r3, [r7, #20]
	uint16_t frameNr = pixelNr/frameSize;
 80032a2:	8b3b      	ldrh	r3, [r7, #24]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	83fb      	strh	r3, [r7, #30]
	uint16_t reaminder = pixelNr%frameSize;
 80032ac:	8b3a      	ldrh	r2, [r7, #24]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80032b4:	fb01 f202 	mul.w	r2, r1, r2
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	827b      	strh	r3, [r7, #18]

	if(pixelNr%frameSize != 0)
 80032bc:	8b3a      	ldrh	r2, [r7, #24]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80032c4:	fb01 f202 	mul.w	r2, r1, r2
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <draw_rectangle_slow+0x60>
	{
		frameNr++;
 80032ce:	8bfb      	ldrh	r3, [r7, #30]
 80032d0:	3301      	adds	r3, #1
 80032d2:	83fb      	strh	r3, [r7, #30]
	}

	convert_color_16_to_18(color, pixel);
 80032d4:	f107 0208 	add.w	r2, r7, #8
 80032d8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80032da:	4611      	mov	r1, r2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fc9b 	bl	8002c18 <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*frameSize);
 80032e2:	8b3a      	ldrh	r2, [r7, #24]
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f00d f984 	bl	80105f8 <malloc>
 80032f0:	4603      	mov	r3, r0
 80032f2:	60fb      	str	r3, [r7, #12]

	for(uint16_t i=0; i<frameSize; i++)
 80032f4:	2300      	movs	r3, #0
 80032f6:	83bb      	strh	r3, [r7, #28]
 80032f8:	e00f      	b.n	800331a <draw_rectangle_slow+0xa6>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 80032fa:	8bba      	ldrh	r2, [r7, #28]
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4413      	add	r3, r2
 8003306:	461a      	mov	r2, r3
 8003308:	f107 0308 	add.w	r3, r7, #8
 800330c:	8819      	ldrh	r1, [r3, #0]
 800330e:	789b      	ldrb	r3, [r3, #2]
 8003310:	8011      	strh	r1, [r2, #0]
 8003312:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<frameSize; i++)
 8003314:	8bbb      	ldrh	r3, [r7, #28]
 8003316:	3301      	adds	r3, #1
 8003318:	83bb      	strh	r3, [r7, #28]
 800331a:	8bba      	ldrh	r2, [r7, #28]
 800331c:	8b3b      	ldrh	r3, [r7, #24]
 800331e:	429a      	cmp	r2, r3
 8003320:	d3eb      	bcc.n	80032fa <draw_rectangle_slow+0x86>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 8003322:	88fa      	ldrh	r2, [r7, #6]
 8003324:	887b      	ldrh	r3, [r7, #2]
 8003326:	4413      	add	r3, r2
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29c      	uxth	r4, r3
 800332e:	88ba      	ldrh	r2, [r7, #4]
 8003330:	883b      	ldrh	r3, [r7, #0]
 8003332:	4413      	add	r3, r2
 8003334:	b29b      	uxth	r3, r3
 8003336:	3b01      	subs	r3, #1
 8003338:	b29b      	uxth	r3, r3
 800333a:	88b9      	ldrh	r1, [r7, #4]
 800333c:	88f8      	ldrh	r0, [r7, #6]
 800333e:	2277      	movs	r2, #119	@ 0x77
 8003340:	9200      	str	r2, [sp, #0]
 8003342:	4622      	mov	r2, r4
 8003344:	f001 fa26 	bl	8004794 <set_adress_window>

	for (uint16_t i=0; i<frameNr; i++)
 8003348:	2300      	movs	r3, #0
 800334a:	837b      	strh	r3, [r7, #26]
 800334c:	e01b      	b.n	8003386 <draw_rectangle_slow+0x112>
	{
		if (i==frameNr-1 && reaminder!=0)
 800334e:	8b7a      	ldrh	r2, [r7, #26]
 8003350:	8bfb      	ldrh	r3, [r7, #30]
 8003352:	3b01      	subs	r3, #1
 8003354:	429a      	cmp	r2, r3
 8003356:	d10b      	bne.n	8003370 <draw_rectangle_slow+0xfc>
 8003358:	8a7b      	ldrh	r3, [r7, #18]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d008      	beq.n	8003370 <draw_rectangle_slow+0xfc>
		{
			LCD_send_data_multi(data, reaminder*sizeof(pixel));
 800335e:	8a7a      	ldrh	r2, [r7, #18]
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	4619      	mov	r1, r3
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f001 f87b 	bl	8004464 <LCD_send_data_multi>
 800336e:	e007      	b.n	8003380 <draw_rectangle_slow+0x10c>
		}

		else
		{
			LCD_send_data_multi(data, frameSize*sizeof(pixel));
 8003370:	8b3a      	ldrh	r2, [r7, #24]
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	4619      	mov	r1, r3
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f001 f872 	bl	8004464 <LCD_send_data_multi>
	for (uint16_t i=0; i<frameNr; i++)
 8003380:	8b7b      	ldrh	r3, [r7, #26]
 8003382:	3301      	adds	r3, #1
 8003384:	837b      	strh	r3, [r7, #26]
 8003386:	8b7a      	ldrh	r2, [r7, #26]
 8003388:	8bfb      	ldrh	r3, [r7, #30]
 800338a:	429a      	cmp	r2, r3
 800338c:	d3df      	bcc.n	800334e <draw_rectangle_slow+0xda>
		}

	}

	free(data);
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f00d f93a 	bl	8010608 <free>

}
 8003394:	bf00      	nop
 8003396:	3724      	adds	r7, #36	@ 0x24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd90      	pop	{r4, r7, pc}

0800339c <draw_rectangle>:


void draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b089      	sub	sp, #36	@ 0x24
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	4604      	mov	r4, r0
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	461a      	mov	r2, r3
 80033aa:	4623      	mov	r3, r4
 80033ac:	80fb      	strh	r3, [r7, #6]
 80033ae:	4603      	mov	r3, r0
 80033b0:	80bb      	strh	r3, [r7, #4]
 80033b2:	460b      	mov	r3, r1
 80033b4:	807b      	strh	r3, [r7, #2]
 80033b6:	4613      	mov	r3, r2
 80033b8:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */


	uint8_t pixel[3];
	uint16_t pixelNr = x1*y1;
 80033ba:	887a      	ldrh	r2, [r7, #2]
 80033bc:	883b      	ldrh	r3, [r7, #0]
 80033be:	fb12 f303 	smulbb	r3, r2, r3
 80033c2:	82bb      	strh	r3, [r7, #20]
	convert_color_16_to_18(color, pixel);
 80033c4:	f107 020c 	add.w	r2, r7, #12
 80033c8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fc23 	bl	8002c18 <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*pixelNr);
 80033d2:	8aba      	ldrh	r2, [r7, #20]
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	4618      	mov	r0, r3
 80033dc:	f00d f90c 	bl	80105f8 <malloc>
 80033e0:	4603      	mov	r3, r0
 80033e2:	613b      	str	r3, [r7, #16]

	for(uint16_t i=0; i<pixelNr; i++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	82fb      	strh	r3, [r7, #22]
 80033e8:	e00f      	b.n	800340a <draw_rectangle+0x6e>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 80033ea:	8afa      	ldrh	r2, [r7, #22]
 80033ec:	4613      	mov	r3, r2
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4413      	add	r3, r2
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4413      	add	r3, r2
 80033f6:	461a      	mov	r2, r3
 80033f8:	f107 030c 	add.w	r3, r7, #12
 80033fc:	8819      	ldrh	r1, [r3, #0]
 80033fe:	789b      	ldrb	r3, [r3, #2]
 8003400:	8011      	strh	r1, [r2, #0]
 8003402:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<pixelNr; i++)
 8003404:	8afb      	ldrh	r3, [r7, #22]
 8003406:	3301      	adds	r3, #1
 8003408:	82fb      	strh	r3, [r7, #22]
 800340a:	8afa      	ldrh	r2, [r7, #22]
 800340c:	8abb      	ldrh	r3, [r7, #20]
 800340e:	429a      	cmp	r2, r3
 8003410:	d3eb      	bcc.n	80033ea <draw_rectangle+0x4e>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	887b      	ldrh	r3, [r7, #2]
 8003416:	4413      	add	r3, r2
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29c      	uxth	r4, r3
 800341e:	88ba      	ldrh	r2, [r7, #4]
 8003420:	883b      	ldrh	r3, [r7, #0]
 8003422:	4413      	add	r3, r2
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29b      	uxth	r3, r3
 800342a:	88b9      	ldrh	r1, [r7, #4]
 800342c:	88f8      	ldrh	r0, [r7, #6]
 800342e:	2277      	movs	r2, #119	@ 0x77
 8003430:	9200      	str	r2, [sp, #0]
 8003432:	4622      	mov	r2, r4
 8003434:	f001 f9ae 	bl	8004794 <set_adress_window>
	LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8003438:	8aba      	ldrh	r2, [r7, #20]
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	4619      	mov	r1, r3
 8003442:	6938      	ldr	r0, [r7, #16]
 8003444:	f001 f80e 	bl	8004464 <LCD_send_data_multi>

	free(data);
 8003448:	6938      	ldr	r0, [r7, #16]
 800344a:	f00d f8dd 	bl	8010608 <free>

}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	bd90      	pop	{r4, r7, pc}

08003456 <init_entity_sd>:



void init_entity_sd(ENTITY *entity)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
	entity->x0 = 0;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	805a      	strh	r2, [r3, #2]
	entity->y0 = 0;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	809a      	strh	r2, [r3, #4]
	entity->y1 = 0;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	811a      	strh	r2, [r3, #8]
	entity->x1 = 0;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	80da      	strh	r2, [r3, #6]

	entity->ST.SD.filePathName = malloc(sizeof(char)*20);
 8003476:	2014      	movs	r0, #20
 8003478:	f00d f8be 	bl	80105f8 <malloc>
 800347c:	4603      	mov	r3, r0
 800347e:	461a      	mov	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	611a      	str	r2, [r3, #16]
}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <free_entity_sd>:


void free_entity_sd(ENTITY *entity)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	free(entity->ST.SD.filePathName);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	4618      	mov	r0, r3
 800349a:	f00d f8b5 	bl	8010608 <free>
	free(entity->ST.SD.data);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f00d f8b0 	bl	8010608 <free>
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <draw_entity>:


void draw_entity(ENTITY *entity)
{
 80034b0:	b590      	push	{r4, r7, lr}
 80034b2:	b089      	sub	sp, #36	@ 0x24
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	6078      	str	r0, [r7, #4]
	 * Feature: De dat ca parametru numele unui fisier ce contine datele imaginii
	 * de afisat si nu culoarea, parametrul color e doar de test
	 */

	uint8_t *data;
	bool flagImgDone = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]

	if(((entity->id & 1<<7) != 0))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	b25b      	sxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da72      	bge.n	80035ac <draw_entity+0xfc>
	{
		/*Avem imagine monocolor <= 32x32 -> imagine nu se afla pe cardul SD!*/

		if((entity->id & (0xC0)) == 0xC0)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80034ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80034d0:	d108      	bne.n	80034e4 <draw_entity+0x34>
		{
			/*
			 * Imagine stocata local in bufferul *data din afara structurii
			 */

			LCD_send_data_multi(entity->ST.LC.data, entity->ST.LC.size);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	4619      	mov	r1, r3
 80034dc:	4610      	mov	r0, r2
 80034de:	f000 ffc1 	bl	8004464 <LCD_send_data_multi>
 80034e2:	e0e8      	b.n	80036b6 <draw_entity+0x206>
			return;

		}

		uint16_t pixelNr = (entity->x1)*(entity->y1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	fb12 f303 	smulbb	r3, r2, r3
 80034f8:	82bb      	strh	r3, [r7, #20]

		uint8_t pixel[3];
		convert_color_16_to_18(entity->ST.color, pixel);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	899b      	ldrh	r3, [r3, #12]
 80034fe:	f107 020c 	add.w	r2, r7, #12
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fb87 	bl	8002c18 <convert_color_16_to_18>

		data = malloc(sizeof(pixel)*pixelNr);
 800350a:	8aba      	ldrh	r2, [r7, #20]
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f00d f870 	bl	80105f8 <malloc>
 8003518:	4603      	mov	r3, r0
 800351a:	613b      	str	r3, [r7, #16]

		for(uint16_t i=0;i<pixelNr;i++ )
 800351c:	2300      	movs	r3, #0
 800351e:	82fb      	strh	r3, [r7, #22]
 8003520:	e00f      	b.n	8003542 <draw_entity+0x92>
		{
			memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8003522:	8afa      	ldrh	r2, [r7, #22]
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4413      	add	r3, r2
 800352e:	461a      	mov	r2, r3
 8003530:	f107 030c 	add.w	r3, r7, #12
 8003534:	8819      	ldrh	r1, [r3, #0]
 8003536:	789b      	ldrb	r3, [r3, #2]
 8003538:	8011      	strh	r1, [r2, #0]
 800353a:	7093      	strb	r3, [r2, #2]
		for(uint16_t i=0;i<pixelNr;i++ )
 800353c:	8afb      	ldrh	r3, [r7, #22]
 800353e:	3301      	adds	r3, #1
 8003540:	82fb      	strh	r3, [r7, #22]
 8003542:	8afa      	ldrh	r2, [r7, #22]
 8003544:	8abb      	ldrh	r3, [r7, #20]
 8003546:	429a      	cmp	r2, r3
 8003548:	d3eb      	bcc.n	8003522 <draw_entity+0x72>
		}

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003550:	b298      	uxth	r0, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003558:	b299      	uxth	r1, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003560:	b29a      	uxth	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003568:	b29b      	uxth	r3, r3
 800356a:	4413      	add	r3, r2
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29c      	uxth	r4, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003578:	b29a      	uxth	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003580:	b29b      	uxth	r3, r3
 8003582:	4413      	add	r3, r2
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29b      	uxth	r3, r3
 800358a:	2277      	movs	r2, #119	@ 0x77
 800358c:	9200      	str	r2, [sp, #0]
 800358e:	4622      	mov	r2, r4
 8003590:	f001 f900 	bl	8004794 <set_adress_window>
		LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8003594:	8aba      	ldrh	r2, [r7, #20]
 8003596:	4613      	mov	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4413      	add	r3, r2
 800359c:	4619      	mov	r1, r3
 800359e:	6938      	ldr	r0, [r7, #16]
 80035a0:	f000 ff60 	bl	8004464 <LCD_send_data_multi>

		free(data);
 80035a4:	6938      	ldr	r0, [r7, #16]
 80035a6:	f00d f82f 	bl	8010608 <free>
 80035aa:	e084      	b.n	80036b6 <draw_entity+0x206>

	else
	{
		/*Imagine stocata in bufferul *data din cardul SD*/

		uint16_t byteNr = 0; /*index*/
 80035ac:	2300      	movs	r3, #0
 80035ae:	817b      	strh	r3, [r7, #10]

		read_image_file(entity, &byteNr, &flagImgDone);
 80035b0:	f107 020f 	add.w	r2, r7, #15
 80035b4:	f107 030a 	add.w	r3, r7, #10
 80035b8:	4619      	mov	r1, r3
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f002 fa58 	bl	8005a70 <read_image_file>

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035c6:	b298      	uxth	r0, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035ce:	b299      	uxth	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4413      	add	r3, r2
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29c      	uxth	r4, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2277      	movs	r2, #119	@ 0x77
 8003602:	9200      	str	r2, [sp, #0]
 8003604:	4622      	mov	r2, r4
 8003606:	f001 f8c5 	bl	8004794 <set_adress_window>

		DC_DATA();
 800360a:	2201      	movs	r2, #1
 800360c:	2108      	movs	r1, #8
 800360e:	482b      	ldr	r0, [pc, #172]	@ (80036bc <draw_entity+0x20c>)
 8003610:	f004 fc44 	bl	8007e9c <HAL_GPIO_WritePin>
		CS_A();
 8003614:	2200      	movs	r2, #0
 8003616:	2110      	movs	r1, #16
 8003618:	4828      	ldr	r0, [pc, #160]	@ (80036bc <draw_entity+0x20c>)
 800361a:	f004 fc3f 	bl	8007e9c <HAL_GPIO_WritePin>

		if(byteNr < 3072)
 800361e:	897b      	ldrh	r3, [r7, #10]
 8003620:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003624:	d20c      	bcs.n	8003640 <draw_entity+0x190>
		{
			/*
			 * Pentru cazul unui singur frame de transmis
			 */

			LCD_send_data_multi(entity->ST.SD.data, byteNr);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	897a      	ldrh	r2, [r7, #10]
 800362c:	4611      	mov	r1, r2
 800362e:	4618      	mov	r0, r3
 8003630:	f000 ff18 	bl	8004464 <LCD_send_data_multi>
			free(entity->ST.SD.data);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4618      	mov	r0, r3
 800363a:	f00c ffe5 	bl	8010608 <free>
 800363e:	e03a      	b.n	80036b6 <draw_entity+0x206>
		else
		{
			/*
			 * Pentru cazul mai multor frameuri
			 */
			flagDmaSpiTx = 0;
 8003640:	4b1f      	ldr	r3, [pc, #124]	@ (80036c0 <draw_entity+0x210>)
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]

			//LCD_send_data_multi(entity->data, byteNr);
			HAL_SPI_Transmit_DMA(&hspi1, entity->ST.SD.data, byteNr);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	897a      	ldrh	r2, [r7, #10]
 800364c:	4619      	mov	r1, r3
 800364e:	481d      	ldr	r0, [pc, #116]	@ (80036c4 <draw_entity+0x214>)
 8003650:	f006 fe24 	bl	800a29c <HAL_SPI_Transmit_DMA>

			do
			{
				if(flagImgDone == 1)
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d11c      	bne.n	8003694 <draw_entity+0x1e4>
				{
					break;
				}

				read_image_file(entity, &byteNr, &flagImgDone);
 800365a:	f107 020f 	add.w	r2, r7, #15
 800365e:	f107 030a 	add.w	r3, r7, #10
 8003662:	4619      	mov	r1, r3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f002 fa03 	bl	8005a70 <read_image_file>

				while(flagDmaSpiTx == 0);
 800366a:	bf00      	nop
 800366c:	4b14      	ldr	r3, [pc, #80]	@ (80036c0 <draw_entity+0x210>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0fa      	beq.n	800366c <draw_entity+0x1bc>
				flagDmaSpiTx = 0;
 8003676:	4b12      	ldr	r3, [pc, #72]	@ (80036c0 <draw_entity+0x210>)
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, entity->ST.SD.data, byteNr);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	897a      	ldrh	r2, [r7, #10]
 8003682:	4619      	mov	r1, r3
 8003684:	480f      	ldr	r0, [pc, #60]	@ (80036c4 <draw_entity+0x214>)
 8003686:	f006 fe09 	bl	800a29c <HAL_SPI_Transmit_DMA>

			}while(byteNr >= 3072);
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003690:	d2e0      	bcs.n	8003654 <draw_entity+0x1a4>
 8003692:	e000      	b.n	8003696 <draw_entity+0x1e6>
					break;
 8003694:	bf00      	nop

		}

		while(flagDmaSpiTx == 0);
 8003696:	bf00      	nop
 8003698:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <draw_entity+0x210>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0fa      	beq.n	8003698 <draw_entity+0x1e8>
		free(entity->ST.SD.data);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f00c ffae 	bl	8010608 <free>
		CS_D();
 80036ac:	2201      	movs	r2, #1
 80036ae:	2110      	movs	r1, #16
 80036b0:	4802      	ldr	r0, [pc, #8]	@ (80036bc <draw_entity+0x20c>)
 80036b2:	f004 fbf3 	bl	8007e9c <HAL_GPIO_WritePin>

	}


}
 80036b6:	371c      	adds	r7, #28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	40020c00 	.word	0x40020c00
 80036c0:	200144c4 	.word	0x200144c4
 80036c4:	2001427c 	.word	0x2001427c

080036c8 <translation_entity>:



void translation_entity(ENTITY *const restrict entity, int16_t x, int16_t y, bool TurnOnStep)
{
 80036c8:	b5b0      	push	{r4, r5, r7, lr}
 80036ca:	b08c      	sub	sp, #48	@ 0x30
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	4608      	mov	r0, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	817b      	strh	r3, [r7, #10]
 80036da:	460b      	mov	r3, r1
 80036dc:	813b      	strh	r3, [r7, #8]
 80036de:	4613      	mov	r3, r2
 80036e0:	71fb      	strb	r3, [r7, #7]
	 * 		  Modul de Step activ 1, neactiv 0 (deplasare in interiorul ferestrei initiale)
	 * Output: Void
	 */


	if((x)<0 || (x+entity->x1)>LCD_Width || (y)<0 || (y+entity->y1)> LCD_Length)
 80036e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f2c0 8117 	blt.w	800391a <translation_entity+0x252>
 80036ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80036f6:	4413      	add	r3, r2
 80036f8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80036fc:	f300 810d 	bgt.w	800391a <translation_entity+0x252>
 8003700:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	f2c0 8108 	blt.w	800391a <translation_entity+0x252>
 800370a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003714:	4413      	add	r3, r2
 8003716:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 800371a:	f300 80fe 	bgt.w	800391a <translation_entity+0x252>

		return;
	}


	ENTITY temp = *entity;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f107 0414 	add.w	r4, r7, #20
 8003724:	461d      	mov	r5, r3
 8003726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800372a:	682b      	ldr	r3, [r5, #0]
 800372c:	6023      	str	r3, [r4, #0]

	entity->x0 = x;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	897a      	ldrh	r2, [r7, #10]
 8003732:	805a      	strh	r2, [r3, #2]
	entity->y0 = y;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	893a      	ldrh	r2, [r7, #8]
 8003738:	809a      	strh	r2, [r3, #4]


	if((temp.y0 == y) && (TurnOnStep==1))
 800373a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800373e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003742:	429a      	cmp	r2, r3
 8003744:	d163      	bne.n	800380e <translation_entity+0x146>
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d060      	beq.n	800380e <translation_entity+0x146>
	{
		/*Pentru cazul unui Step cuprins in cadrul anterior pe axa x*/

		if((x < (temp.x0+temp.x1)) && (x > (temp.x0)))
 800374c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003750:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003754:	4619      	mov	r1, r3
 8003756:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800375a:	440b      	add	r3, r1
 800375c:	429a      	cmp	r2, r3
 800375e:	da23      	bge.n	80037a8 <translation_entity+0xe0>
 8003760:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003764:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003768:	429a      	cmp	r2, r3
 800376a:	dd1d      	ble.n	80037a8 <translation_entity+0xe0>
		{
			/*Pentru cazul deplasarii pe +x*/
			mutex = 1;
 800376c:	4b6f      	ldr	r3, [pc, #444]	@ (800392c <translation_entity+0x264>)
 800376e:	2201      	movs	r2, #1
 8003770:	601a      	str	r2, [r3, #0]
			draw_entity(entity);
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff fe9c 	bl	80034b0 <draw_entity>
			draw_rectangle(temp.x0, temp.y0, x-temp.x0, temp.y1, BackGroundColor); /*Culoare background*/
 8003778:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800377c:	b298      	uxth	r0, r3
 800377e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003782:	b299      	uxth	r1, r3
 8003784:	897a      	ldrh	r2, [r7, #10]
 8003786:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800378a:	b29b      	uxth	r3, r3
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	b29a      	uxth	r2, r3
 8003790:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003794:	b29c      	uxth	r4, r3
 8003796:	4b66      	ldr	r3, [pc, #408]	@ (8003930 <translation_entity+0x268>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4623      	mov	r3, r4
 800379e:	f7ff fdfd 	bl	800339c <draw_rectangle>
			mutex = 0;
 80037a2:	4b62      	ldr	r3, [pc, #392]	@ (800392c <translation_entity+0x264>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
		}

		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 80037a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80037ac:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	f280 80b4 	bge.w	800391e <translation_entity+0x256>
 80037b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80037ba:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80037be:	4413      	add	r3, r2
 80037c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80037c4:	4293      	cmp	r3, r2
 80037c6:	f340 80aa 	ble.w	800391e <translation_entity+0x256>
		{
			/*Pentru cazul deplasarii pe -x*/
			mutex = 1;
 80037ca:	4b58      	ldr	r3, [pc, #352]	@ (800392c <translation_entity+0x264>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
			draw_entity(entity);
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7ff fe6d 	bl	80034b0 <draw_entity>
			draw_rectangle(temp.x0+temp.x1-(temp.x0-x), temp.y0, temp.x0-x, temp.y1, BackGroundColor); /*Culoare background*/
 80037d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80037da:	b29a      	uxth	r2, r3
 80037dc:	897b      	ldrh	r3, [r7, #10]
 80037de:	4413      	add	r3, r2
 80037e0:	b298      	uxth	r0, r3
 80037e2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80037e6:	b299      	uxth	r1, r3
 80037e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80037f8:	b29c      	uxth	r4, r3
 80037fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003930 <translation_entity+0x268>)
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	4623      	mov	r3, r4
 8003802:	f7ff fdcb 	bl	800339c <draw_rectangle>
			mutex = 0;
 8003806:	4b49      	ldr	r3, [pc, #292]	@ (800392c <translation_entity+0x264>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 800380c:	e087      	b.n	800391e <translation_entity+0x256>

	}

	else

		if((temp.x0==x) && (TurnOnStep==1))
 800380e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003812:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003816:	429a      	cmp	r2, r3
 8003818:	d163      	bne.n	80038e2 <translation_entity+0x21a>
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d060      	beq.n	80038e2 <translation_entity+0x21a>
		{
			if((y < (temp.y0+temp.y1)) && (y > (temp.y0)))
 8003820:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003824:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003828:	4619      	mov	r1, r3
 800382a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800382e:	440b      	add	r3, r1
 8003830:	429a      	cmp	r2, r3
 8003832:	da24      	bge.n	800387e <translation_entity+0x1b6>
 8003834:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003838:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800383c:	429a      	cmp	r2, r3
 800383e:	dd1e      	ble.n	800387e <translation_entity+0x1b6>
			{
				/*Pentru cazul deplasarii pe +y*/
				mutex = 1;
 8003840:	4b3a      	ldr	r3, [pc, #232]	@ (800392c <translation_entity+0x264>)
 8003842:	2201      	movs	r2, #1
 8003844:	601a      	str	r2, [r3, #0]
				draw_entity(entity);
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff fe32 	bl	80034b0 <draw_entity>
				draw_rectangle(temp.x0, temp.y0, temp.x1, y-temp.y0, BackGroundColor);
 800384c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003850:	b298      	uxth	r0, r3
 8003852:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003856:	b299      	uxth	r1, r3
 8003858:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800385c:	b29c      	uxth	r4, r3
 800385e:	893a      	ldrh	r2, [r7, #8]
 8003860:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003864:	b29b      	uxth	r3, r3
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	b29a      	uxth	r2, r3
 800386a:	4b31      	ldr	r3, [pc, #196]	@ (8003930 <translation_entity+0x268>)
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	4613      	mov	r3, r2
 8003872:	4622      	mov	r2, r4
 8003874:	f7ff fd92 	bl	800339c <draw_rectangle>
				mutex = 0;
 8003878:	4b2c      	ldr	r3, [pc, #176]	@ (800392c <translation_entity+0x264>)
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
			}

			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 800387e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003882:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	da4b      	bge.n	8003922 <translation_entity+0x25a>
 800388a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800388e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003892:	4413      	add	r3, r2
 8003894:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003898:	4293      	cmp	r3, r2
 800389a:	dd42      	ble.n	8003922 <translation_entity+0x25a>
			{
				/*Pentru cazul deplasarii pe -y*/
				mutex = 1;
 800389c:	4b23      	ldr	r3, [pc, #140]	@ (800392c <translation_entity+0x264>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]
				draw_entity(entity);
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff fe04 	bl	80034b0 <draw_entity>
				draw_rectangle(temp.x0, temp.y0+temp.y1-(temp.y0-y), temp.x1, temp.y0-y, BackGroundColor);
 80038a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80038ac:	b298      	uxth	r0, r3
 80038ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	893b      	ldrh	r3, [r7, #8]
 80038b6:	4413      	add	r3, r2
 80038b8:	b299      	uxth	r1, r3
 80038ba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80038be:	b29c      	uxth	r4, r3
 80038c0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	893b      	ldrh	r3, [r7, #8]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	4b18      	ldr	r3, [pc, #96]	@ (8003930 <translation_entity+0x268>)
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	4613      	mov	r3, r2
 80038d4:	4622      	mov	r2, r4
 80038d6:	f7ff fd61 	bl	800339c <draw_rectangle>
				mutex = 0;
 80038da:	4b14      	ldr	r3, [pc, #80]	@ (800392c <translation_entity+0x264>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 80038e0:	e01f      	b.n	8003922 <translation_entity+0x25a>
		}

		else
		{
			/*Pentru orice alt caz (deplasare pe diagonala sau aleatoriu)*/
			mutex = 1;
 80038e2:	4b12      	ldr	r3, [pc, #72]	@ (800392c <translation_entity+0x264>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
			draw_rectangle(temp.x0, temp.y0, temp.x1, temp.y1, BackGroundColor);
 80038e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80038ec:	b298      	uxth	r0, r3
 80038ee:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80038f2:	b299      	uxth	r1, r3
 80038f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80038fe:	b29c      	uxth	r4, r3
 8003900:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <translation_entity+0x268>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	4623      	mov	r3, r4
 8003908:	f7ff fd48 	bl	800339c <draw_rectangle>
			draw_entity(entity);
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f7ff fdcf 	bl	80034b0 <draw_entity>
			mutex = 0;
 8003912:	4b06      	ldr	r3, [pc, #24]	@ (800392c <translation_entity+0x264>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	e004      	b.n	8003924 <translation_entity+0x25c>
		return;
 800391a:	bf00      	nop
 800391c:	e002      	b.n	8003924 <translation_entity+0x25c>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <translation_entity+0x25c>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 8003922:	bf00      	nop
		}


}
 8003924:	3728      	adds	r7, #40	@ 0x28
 8003926:	46bd      	mov	sp, r7
 8003928:	bdb0      	pop	{r4, r5, r7, pc}
 800392a:	bf00      	nop
 800392c:	200000ac 	.word	0x200000ac
 8003930:	20000008 	.word	0x20000008

08003934 <translation_test>:


void translation_test(ENTITY *entity, uint8_t step, uint16_t delay)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	70fb      	strb	r3, [r7, #3]
 8003940:	4613      	mov	r3, r2
 8003942:	803b      	strh	r3, [r7, #0]


	while(1)
	{
		while((entity->x0 + entity->x1) < LCD_Width)
 8003944:	e013      	b.n	800396e <translation_test+0x3a>
		{
			translation_entity(entity, entity->x0+step, entity->y0, 1);//, color);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800394c:	b29a      	uxth	r2, r3
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	b29b      	uxth	r3, r3
 8003952:	4413      	add	r3, r2
 8003954:	b29b      	uxth	r3, r3
 8003956:	b219      	sxth	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800395e:	2301      	movs	r3, #1
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff feb1 	bl	80036c8 <translation_entity>
			HAL_Delay(delay);
 8003966:	883b      	ldrh	r3, [r7, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f003 f99b 	bl	8006ca4 <HAL_Delay>
		while((entity->x0 + entity->x1) < LCD_Width)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003974:	461a      	mov	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800397c:	4413      	add	r3, r2
 800397e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003982:	dbe0      	blt.n	8003946 <translation_test+0x12>
		}
		mutex = 1;
 8003984:	4b54      	ldr	r3, [pc, #336]	@ (8003ad8 <translation_test+0x1a4>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff fd90 	bl	80034b0 <draw_entity>
		mutex = 0;
 8003990:	4b51      	ldr	r3, [pc, #324]	@ (8003ad8 <translation_test+0x1a4>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
		entity->x0 = LCD_Width - entity->x1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	b21a      	sxth	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	805a      	strh	r2, [r3, #2]

		while((entity->y0 + entity->y1) < LCD_Length)
 80039aa:	e013      	b.n	80039d4 <translation_test+0xa0>
		{

			translation_entity(entity, entity->x0, entity->y0+step, 1);//, color);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	4413      	add	r3, r2
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	b21a      	sxth	r2, r3
 80039c4:	2301      	movs	r3, #1
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff fe7e 	bl	80036c8 <translation_entity>
			HAL_Delay(delay);
 80039cc:	883b      	ldrh	r3, [r7, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f003 f968 	bl	8006ca4 <HAL_Delay>
		while((entity->y0 + entity->y1) < LCD_Length)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80039da:	461a      	mov	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80039e2:	4413      	add	r3, r2
 80039e4:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80039e8:	dbe0      	blt.n	80039ac <translation_test+0x78>
		}

		mutex = 1;
 80039ea:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad8 <translation_test+0x1a4>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff fd5d 	bl	80034b0 <draw_entity>
		mutex = 0;
 80039f6:	4b38      	ldr	r3, [pc, #224]	@ (8003ad8 <translation_test+0x1a4>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
		entity->y0 = LCD_Length - entity->y1;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	b21a      	sxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	809a      	strh	r2, [r3, #4]

		while((entity->x0 - step) > 0)
 8003a10:	e013      	b.n	8003a3a <translation_test+0x106>
		{
			translation_entity(entity, entity->x0-step, entity->y0, 1);//, color);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	b219      	sxth	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fe4b 	bl	80036c8 <translation_entity>
			HAL_Delay(delay);
 8003a32:	883b      	ldrh	r3, [r7, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f003 f935 	bl	8006ca4 <HAL_Delay>
		while((entity->x0 - step) > 0)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a40:	461a      	mov	r2, r3
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	dce3      	bgt.n	8003a12 <translation_test+0xde>
		}

		entity->ST.color = 0xFFFF;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a50:	819a      	strh	r2, [r3, #12]
		mutex = 1;
 8003a52:	4b21      	ldr	r3, [pc, #132]	@ (8003ad8 <translation_test+0x1a4>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff fd29 	bl	80034b0 <draw_entity>
		mutex = 0;
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad8 <translation_test+0x1a4>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
		entity->ST.color = 0xF100;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8003a6a:	819a      	strh	r2, [r3, #12]
		entity->x0 = 0;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	805a      	strh	r2, [r3, #2]

		while((entity->y0 - step) > 0)
 8003a72:	e013      	b.n	8003a9c <translation_test+0x168>
		{
			translation_entity(entity, entity->x0, entity->y0-step, 1);//, color);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	b21a      	sxth	r2, r3
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff fe1a 	bl	80036c8 <translation_entity>
			HAL_Delay(delay);
 8003a94:	883b      	ldrh	r3, [r7, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f003 f904 	bl	8006ca4 <HAL_Delay>
		while((entity->y0 - step) > 0)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	dce3      	bgt.n	8003a74 <translation_test+0x140>
		}
		entity->ST.color = 0xFFFF;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ab2:	819a      	strh	r2, [r3, #12]
		mutex = 1;
 8003ab4:	4b08      	ldr	r3, [pc, #32]	@ (8003ad8 <translation_test+0x1a4>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fcf8 	bl	80034b0 <draw_entity>
		mutex = 0;
 8003ac0:	4b05      	ldr	r3, [pc, #20]	@ (8003ad8 <translation_test+0x1a4>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
		entity->ST.color = 0xF100;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8003acc:	819a      	strh	r2, [r3, #12]
		entity->y0 = 0;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	809a      	strh	r2, [r3, #4]
		while((entity->x0 + entity->x1) < LCD_Width)
 8003ad4:	e74b      	b.n	800396e <translation_test+0x3a>
 8003ad6:	bf00      	nop
 8003ad8:	200000ac 	.word	0x200000ac

08003adc <scaling_entity>:
	}
}


void scaling_entity(ENTITY *entity, const float factor)
{
 8003adc:	b590      	push	{r4, r7, lr}
 8003ade:	b093      	sub	sp, #76	@ 0x4c
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	ed87 0a00 	vstr	s0, [r7]
	/*
	 * Initial vom afla noile marimi pentru imaginea
	 * de scalat
	 */

	int16_t x1 = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int16_t y1 = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	x1 = (int16_t)((entity->x1)*factor);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003afe:	edd7 7a00 	vldr	s15, [r7]
 8003b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b0a:	ee17 3a90 	vmov	r3, s15
 8003b0e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	y1 = (int16_t)((entity->y1)*factor);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b1e:	edd7 7a00 	vldr	s15, [r7]
 8003b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b2a:	ee17 3a90 	vmov	r3, s15
 8003b2e:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	if((entity->x0+x1) > 320 || (entity->y0+y1)>480)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b36:	461a      	mov	r2, r3
 8003b38:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003b42:	f300 8141 	bgt.w	8003dc8 <scaling_entity+0x2ec>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003b52:	4413      	add	r3, r2
 8003b54:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8003b58:	f300 8136 	bgt.w	8003dc8 <scaling_entity+0x2ec>
		return;
	}

	FRESULT res;
	char *scalFilePath;
	char *tempFile = "graphic/scalare/temp.bin";
 8003b5c:	4b9e      	ldr	r3, [pc, #632]	@ (8003dd8 <scaling_entity+0x2fc>)
 8003b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
	char *fileName = return_file_name_current_path(entity->ST.SD.filePathName);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f001 fe08 	bl	800577a <return_file_name_current_path>
 8003b6a:	6278      	str	r0, [r7, #36]	@ 0x24

	scalFilePath = assign_filePath("graphic/scalare/");
 8003b6c:	489b      	ldr	r0, [pc, #620]	@ (8003ddc <scaling_entity+0x300>)
 8003b6e:	f001 fde0 	bl	8005732 <assign_filePath>
 8003b72:	6238      	str	r0, [r7, #32]
	scalFilePath = realloc(scalFilePath, strlen(scalFilePath)+ strlen(fileName) +1 );
 8003b74:	6a38      	ldr	r0, [r7, #32]
 8003b76:	f7fc fb27 	bl	80001c8 <strlen>
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b7e:	f7fc fb23 	bl	80001c8 <strlen>
 8003b82:	4603      	mov	r3, r0
 8003b84:	4423      	add	r3, r4
 8003b86:	3301      	adds	r3, #1
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6a38      	ldr	r0, [r7, #32]
 8003b8c:	f00c fdf2 	bl	8010774 <realloc>
 8003b90:	6238      	str	r0, [r7, #32]
	strcat(scalFilePath, fileName);
 8003b92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b94:	6a38      	ldr	r0, [r7, #32]
 8003b96:	f00c fe2b 	bl	80107f0 <strcat>

	uint16_t x = 0; /*nr d elinii de prelucrat din M1 ai sa avem 32x32 pixeli de prelucrat in M2*/
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	81fb      	strh	r3, [r7, #14]
	bool flagTerm = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	737b      	strb	r3, [r7, #13]

	int i = 0; /*indexi de referinta in M2*/
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int j = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
	int ik = 0; /*indexi de referinta in M1*/
 8003baa:	2300      	movs	r3, #0
 8003bac:	61fb      	str	r3, [r7, #28]
	int jk = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]

	bool flagPixel = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37


	uint8_t *data = malloc(sizeof(uint8_t)*3072);
 8003bb8:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003bbc:	f00c fd1c 	bl	80105f8 <malloc>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	617b      	str	r3, [r7, #20]
	int16_t index = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	827b      	strh	r3, [r7, #18]



	while(!flagTerm)
 8003bc8:	e0d2      	b.n	8003d70 <scaling_entity+0x294>
	{
		read_image_file_scaling(entity->ST.SD.filePathName, entity, factor, &x, &flagTerm);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6918      	ldr	r0, [r3, #16]
 8003bce:	f107 030d 	add.w	r3, r7, #13
 8003bd2:	f107 020e 	add.w	r2, r7, #14
 8003bd6:	ed97 0a00 	vldr	s0, [r7]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	f002 f9b4 	bl	8005f48 <read_image_file_scaling>

		i = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		j = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	63bb      	str	r3, [r7, #56]	@ 0x38

		ik = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61fb      	str	r3, [r7, #28]
		jk = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]

		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bf4:	e07d      	b.n	8003cf2 <scaling_entity+0x216>
		{
			/*
			 * Parcurgem frameul asociat matricei scalate M2
			 */

			if((k%(x1*3)==0) && (k!=0))
 8003bf6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	441a      	add	r2, r3
 8003c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c02:	fb93 f1f2 	sdiv	r1, r3, r2
 8003c06:	fb01 f202 	mul.w	r2, r1, r2
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d107      	bne.n	8003c20 <scaling_entity+0x144>
 8003c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d004      	beq.n	8003c20 <scaling_entity+0x144>
			{
				/*
				 * new line
				 */

				i++;
 8003c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c18:	3301      	adds	r3, #1
 8003c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
				j = 0;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			if(k%3 == 0)
 8003c20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c22:	4b6f      	ldr	r3, [pc, #444]	@ (8003de0 <scaling_entity+0x304>)
 8003c24:	fb83 3201 	smull	r3, r2, r3, r1
 8003c28:	17cb      	asrs	r3, r1, #31
 8003c2a:	1ad2      	subs	r2, r2, r3
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	4413      	add	r3, r2
 8003c32:	1aca      	subs	r2, r1, r3
 8003c34:	2a00      	cmp	r2, #0
 8003c36:	d102      	bne.n	8003c3e <scaling_entity+0x162>
			{
				flagPixel = 1;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			}

			if(flagPixel == 1)
 8003c3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d052      	beq.n	8003cec <scaling_entity+0x210>
			{
				ik = (int)i/factor;
 8003c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c48:	ee07 3a90 	vmov	s15, r3
 8003c4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c50:	ed97 7a00 	vldr	s14, [r7]
 8003c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c5c:	ee17 3a90 	vmov	r3, s15
 8003c60:	61fb      	str	r3, [r7, #28]
				jk = (int)j/factor;
 8003c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c64:	ee07 3a90 	vmov	s15, r3
 8003c68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003c6c:	ed97 7a00 	vldr	s14, [r7]
 8003c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c78:	ee17 3a90 	vmov	r3, s15
 8003c7c:	61bb      	str	r3, [r7, #24]

				index = ik*(entity->x1)*3 + jk*3; /*index normat la M1*/
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003c84:	461a      	mov	r2, r3
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	fb03 f202 	mul.w	r2, r3, r2
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	4413      	add	r3, r2
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	0052      	lsls	r2, r2, #1
 8003c96:	4413      	add	r3, r2
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	827b      	strh	r3, [r7, #18]

				data[k] = entity->ST.SD.data[index];
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003ca4:	441a      	add	r2, r3
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	6979      	ldr	r1, [r7, #20]
 8003caa:	440b      	add	r3, r1
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	701a      	strb	r2, [r3, #0]
				data[k+1] = entity->ST.SD.data[index + 1];
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	441a      	add	r2, r3
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	6979      	ldr	r1, [r7, #20]
 8003cc2:	440b      	add	r3, r1
 8003cc4:	7812      	ldrb	r2, [r2, #0]
 8003cc6:	701a      	strb	r2, [r3, #0]
				data[k+2] = entity->ST.SD.data[index + 2];
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	441a      	add	r2, r3
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	6979      	ldr	r1, [r7, #20]
 8003cda:	440b      	add	r3, r1
 8003cdc:	7812      	ldrb	r2, [r2, #0]
 8003cde:	701a      	strb	r2, [r3, #0]

				j++;
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
				flagPixel = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 8003cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cee:	3301      	adds	r3, #1
 8003cf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cf2:	89fb      	ldrh	r3, [r7, #14]
 8003cf4:	ee07 3a90 	vmov	s15, r3
 8003cf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cfc:	edd7 7a00 	vldr	s15, [r7]
 8003d00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d04:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d14:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003d18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d20:	ee17 2a90 	vmov	r2, s15
 8003d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d26:	4293      	cmp	r3, r2
 8003d28:	f6ff af65 	blt.w	8003bf6 <scaling_entity+0x11a>
		/*
		 * Scriem in fisier datele obitnute din frame-ul curent in fisiserul aferent.
		 * Fisiserul va fi salvat in folderul de scalare
		 */

		write_image_file(tempFile, data, (int)(x1*factor)*x*3, x1, y1, flagTerm);
 8003d2c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003d30:	ee07 3a90 	vmov	s15, r3
 8003d34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d38:	edd7 7a00 	vldr	s15, [r7]
 8003d3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d44:	ee17 2a90 	vmov	r2, s15
 8003d48:	89fb      	ldrh	r3, [r7, #14]
 8003d4a:	fb03 f202 	mul.w	r2, r3, r2
 8003d4e:	4613      	mov	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	4413      	add	r3, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	7b7b      	ldrb	r3, [r7, #13]
 8003d58:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8003d5c:	9301      	str	r3, [sp, #4]
 8003d5e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	460a      	mov	r2, r1
 8003d68:	6979      	ldr	r1, [r7, #20]
 8003d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d6c:	f002 faea 	bl	8006344 <write_image_file>
	while(!flagTerm)
 8003d70:	7b7b      	ldrb	r3, [r7, #13]
 8003d72:	f083 0301 	eor.w	r3, r3, #1
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f47f af26 	bne.w	8003bca <scaling_entity+0xee>
	 * renumind fisiserul tempFile in care ne-am scris datele din temp.bin in
	 * numele aferent acestuia stocat in scalFilePath
	 */


	res = f_unlink(scalFilePath);
 8003d7e:	6a38      	ldr	r0, [r7, #32]
 8003d80:	f00c fa39 	bl	80101f6 <f_unlink>
 8003d84:	4603      	mov	r3, r0
 8003d86:	747b      	strb	r3, [r7, #17]

	if((res != FR_OK) && (res != FR_NO_FILE))
 8003d88:	7c7b      	ldrb	r3, [r7, #17]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <scaling_entity+0x2b8>
 8003d8e:	7c7b      	ldrb	r3, [r7, #17]
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d11b      	bne.n	8003dcc <scaling_entity+0x2f0>
	{
		return;
	}

	res = f_rename(tempFile, scalFilePath);
 8003d94:	6a39      	ldr	r1, [r7, #32]
 8003d96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d98:	f00c fad8 	bl	801034c <f_rename>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	747b      	strb	r3, [r7, #17]

	if(res != FR_OK)
 8003da0:	7c7b      	ldrb	r3, [r7, #17]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d114      	bne.n	8003dd0 <scaling_entity+0x2f4>
	 * Atribuim noile valori entitatii prelucrate
	 */

	//free(entity->filePathName);

	entity->x1=x1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8003daa:	80da      	strh	r2, [r3, #6]
	entity->y1=y1;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003db0:	811a      	strh	r2, [r3, #8]
	assign_file_path_entity(entity, scalFilePath);
 8003db2:	6a39      	ldr	r1, [r7, #32]
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f001 fd06 	bl	80057c6 <assign_file_path_entity>

	free(data);
 8003dba:	6978      	ldr	r0, [r7, #20]
 8003dbc:	f00c fc24 	bl	8010608 <free>
	free(scalFilePath);
 8003dc0:	6a38      	ldr	r0, [r7, #32]
 8003dc2:	f00c fc21 	bl	8010608 <free>
 8003dc6:	e004      	b.n	8003dd2 <scaling_entity+0x2f6>
		return;
 8003dc8:	bf00      	nop
 8003dca:	e002      	b.n	8003dd2 <scaling_entity+0x2f6>
		return;
 8003dcc:	bf00      	nop
 8003dce:	e000      	b.n	8003dd2 <scaling_entity+0x2f6>
		return;
 8003dd0:	bf00      	nop
	//free(entity->data);

}
 8003dd2:	3744      	adds	r7, #68	@ 0x44
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd90      	pop	{r4, r7, pc}
 8003dd8:	08010b24 	.word	0x08010b24
 8003ddc:	08010b40 	.word	0x08010b40
 8003de0:	55555556 	.word	0x55555556

08003de4 <rotate_entity>:


void rotate_entity(ENTITY *entity, int theta)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08a      	sub	sp, #40	@ 0x28
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
	 */


	/*Vom elimina din campul vizual imaginea curenta*/

	erase_entity(*entity);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	9200      	str	r2, [sp, #0]
 8003df4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003df6:	f000 f8ef 	bl	8003fd8 <erase_entity>

	/*Aflam initial coordonatele pivotului de referinta*/

	const int16_t pivotX = entity->x0 + (int16_t)(entity->x1/2);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e08:	0fd9      	lsrs	r1, r3, #31
 8003e0a:	440b      	add	r3, r1
 8003e0c:	105b      	asrs	r3, r3, #1
 8003e0e:	b21b      	sxth	r3, r3
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	4413      	add	r3, r2
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	827b      	strh	r3, [r7, #18]
	const int16_t pivotY = entity->y0 + (int16_t)(entity->y1/2);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e26:	0fd9      	lsrs	r1, r3, #31
 8003e28:	440b      	add	r3, r1
 8003e2a:	105b      	asrs	r3, r3, #1
 8003e2c:	b21b      	sxth	r3, r3
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	4413      	add	r3, r2
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	823b      	strh	r3, [r7, #16]

	int16_t i = (int16_t)(-(entity->y1/2));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e3c:	0fda      	lsrs	r2, r3, #31
 8003e3e:	4413      	add	r3, r2
 8003e40:	105b      	asrs	r3, r3, #1
 8003e42:	b21b      	sxth	r3, r3
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	425b      	negs	r3, r3
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	83fb      	strh	r3, [r7, #30]
	int16_t j = (int16_t)(-(entity->x1/2));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e52:	0fda      	lsrs	r2, r3, #31
 8003e54:	4413      	add	r3, r2
 8003e56:	105b      	asrs	r3, r3, #1
 8003e58:	b21b      	sxth	r3, r3
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	425b      	negs	r3, r3
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	83bb      	strh	r3, [r7, #28]

	int16_t rotPosX = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	837b      	strh	r3, [r7, #26]
	int16_t rotPosY = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	833b      	strh	r3, [r7, #24]

	bool flagImgDone = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	73fb      	strb	r3, [r7, #15]
	bool flagPixel = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	75fb      	strb	r3, [r7, #23]
	uint16_t byteNr = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	81bb      	strh	r3, [r7, #12]

	uint8_t pixel[3];


	while(!flagImgDone)
 8003e76:	e09c      	b.n	8003fb2 <rotate_entity+0x1ce>
	{
		read_image_file(entity, &byteNr, &flagImgDone);
 8003e78:	f107 020f 	add.w	r2, r7, #15
 8003e7c:	f107 030c 	add.w	r3, r7, #12
 8003e80:	4619      	mov	r1, r3
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f001 fdf4 	bl	8005a70 <read_image_file>


		for(int16_t k = 0; k<byteNr; k++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	82bb      	strh	r3, [r7, #20]
 8003e8c:	e08b      	b.n	8003fa6 <rotate_entity+0x1c2>
		{
			if(j == (entity->x1/2))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003e94:	0fda      	lsrs	r2, r3, #31
 8003e96:	4413      	add	r3, r2
 8003e98:	105b      	asrs	r3, r3, #1
 8003e9a:	b21b      	sxth	r3, r3
 8003e9c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d110      	bne.n	8003ec6 <rotate_entity+0xe2>
			{
				i++;
 8003ea4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	83fb      	strh	r3, [r7, #30]
				j = (int16_t)(-(entity->x1/2));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003eb6:	0fda      	lsrs	r2, r3, #31
 8003eb8:	4413      	add	r3, r2
 8003eba:	105b      	asrs	r3, r3, #1
 8003ebc:	b21b      	sxth	r3, r3
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	425b      	negs	r3, r3
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	83bb      	strh	r3, [r7, #28]

			}

			if(k%3 == 0)
 8003ec6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003eca:	4b42      	ldr	r3, [pc, #264]	@ (8003fd4 <rotate_entity+0x1f0>)
 8003ecc:	fb83 3102 	smull	r3, r1, r3, r2
 8003ed0:	17d3      	asrs	r3, r2, #31
 8003ed2:	1ac9      	subs	r1, r1, r3
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	440b      	add	r3, r1
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	b21b      	sxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <rotate_entity+0x102>
			{
				flagPixel = 1;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
			}

			if(flagPixel == 1)
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d056      	beq.n	8003f9a <rotate_entity+0x1b6>
			{
				pixel[0] = entity->ST.SD.data[k];
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	723b      	strb	r3, [r7, #8]
				pixel[1] = entity->ST.SD.data[k+1];
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f02:	3301      	adds	r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	727b      	strb	r3, [r7, #9]
				pixel[2] = entity->ST.SD.data[k+2];
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f12:	3302      	adds	r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	72bb      	strb	r3, [r7, #10]


				switch(theta)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8003f20:	d020      	beq.n	8003f64 <rotate_entity+0x180>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8003f28:	dc27      	bgt.n	8003f7a <rotate_entity+0x196>
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	2b5a      	cmp	r3, #90	@ 0x5a
 8003f2e:	d003      	beq.n	8003f38 <rotate_entity+0x154>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2bb4      	cmp	r3, #180	@ 0xb4
 8003f34:	d00b      	beq.n	8003f4e <rotate_entity+0x16a>
					case 270:
						rotPosX = i + pivotX;
						rotPosY = j + pivotY;
						break;
					default:
						break;
 8003f36:	e020      	b.n	8003f7a <rotate_entity+0x196>
						rotPosX = -i + pivotX;
 8003f38:	8a7a      	ldrh	r2, [r7, #18]
 8003f3a:	8bfb      	ldrh	r3, [r7, #30]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	837b      	strh	r3, [r7, #26]
						rotPosY =  j + pivotY;
 8003f42:	8bba      	ldrh	r2, [r7, #28]
 8003f44:	8a3b      	ldrh	r3, [r7, #16]
 8003f46:	4413      	add	r3, r2
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	833b      	strh	r3, [r7, #24]
						break;
 8003f4c:	e016      	b.n	8003f7c <rotate_entity+0x198>
						rotPosX = -i + pivotX;
 8003f4e:	8a7a      	ldrh	r2, [r7, #18]
 8003f50:	8bfb      	ldrh	r3, [r7, #30]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	837b      	strh	r3, [r7, #26]
						rotPosY = -j + pivotY;
 8003f58:	8a3a      	ldrh	r2, [r7, #16]
 8003f5a:	8bbb      	ldrh	r3, [r7, #28]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	833b      	strh	r3, [r7, #24]
						break;
 8003f62:	e00b      	b.n	8003f7c <rotate_entity+0x198>
						rotPosX = i + pivotX;
 8003f64:	8bfa      	ldrh	r2, [r7, #30]
 8003f66:	8a7b      	ldrh	r3, [r7, #18]
 8003f68:	4413      	add	r3, r2
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	837b      	strh	r3, [r7, #26]
						rotPosY = j + pivotY;
 8003f6e:	8bba      	ldrh	r2, [r7, #28]
 8003f70:	8a3b      	ldrh	r3, [r7, #16]
 8003f72:	4413      	add	r3, r2
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	833b      	strh	r3, [r7, #24]
						break;
 8003f78:	e000      	b.n	8003f7c <rotate_entity+0x198>
						break;
 8003f7a:	bf00      	nop
				}

				draw_pixel_data(rotPosX, rotPosY, pixel); /*i->Y si j->X*/
 8003f7c:	8b7b      	ldrh	r3, [r7, #26]
 8003f7e:	8b39      	ldrh	r1, [r7, #24]
 8003f80:	f107 0208 	add.w	r2, r7, #8
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe fed3 	bl	8002d30 <draw_pixel_data>

				j++;
 8003f8a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3301      	adds	r3, #1
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	83bb      	strh	r3, [r7, #28]
				flagPixel = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	75fb      	strb	r3, [r7, #23]
		for(int16_t k = 0; k<byteNr; k++)
 8003f9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	82bb      	strh	r3, [r7, #20]
 8003fa6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003faa:	89ba      	ldrh	r2, [r7, #12]
 8003fac:	4293      	cmp	r3, r2
 8003fae:	f6ff af6e 	blt.w	8003e8e <rotate_entity+0xaa>
	while(!flagImgDone)
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	f083 0301 	eor.w	r3, r3, #1
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f47f af5c 	bne.w	8003e78 <rotate_entity+0x94>

		}
	}


	free(entity->ST.SD.data);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f00c fb1f 	bl	8010608 <free>

}
 8003fca:	bf00      	nop
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	55555556 	.word	0x55555556

08003fd8 <erase_entity>:


void erase_entity(ENTITY entity)
{
 8003fd8:	b084      	sub	sp, #16
 8003fda:	b590      	push	{r4, r7, lr}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af02      	add	r7, sp, #8
 8003fe0:	f107 0410 	add.w	r4, r7, #16
 8003fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/*
	 * Fucntie pentru a sterge entitatea din campul vizual
	 */

	draw_rectangle_slow(entity.x0, entity.y0, entity.x1+1, entity.y1, BackGroundColor);
 8003fe8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003fec:	b298      	uxth	r0, r3
 8003fee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003ff2:	b299      	uxth	r1, r3
 8003ff4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004002:	b29c      	uxth	r4, r3
 8004004:	4b06      	ldr	r3, [pc, #24]	@ (8004020 <erase_entity+0x48>)
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	4623      	mov	r3, r4
 800400c:	f7ff f932 	bl	8003274 <draw_rectangle_slow>
}
 8004010:	bf00      	nop
 8004012:	3704      	adds	r7, #4
 8004014:	46bd      	mov	sp, r7
 8004016:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800401a:	b004      	add	sp, #16
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000008 	.word	0x20000008

08004024 <HAL_TIM_PeriodElapsedCallback>:
TCB tcb[MAXPR];
TCB *currentProcess;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	/*
	 * ISR aferent timerului sistemului de operare.
	 * Perioada: Ts = 1ms
	 */

	kernel_count_sleep(); /*modifica flagAllSleep in 1 sau 0*/
 800402c:	f000 f988 	bl	8004340 <kernel_count_sleep>

    if (htim->Instance == TIM4)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0c      	ldr	r2, [pc, #48]	@ (8004068 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d111      	bne.n	800405e <HAL_TIM_PeriodElapsedCallback+0x3a>
    {

    	if(startOS == 1 && mutex==0 && flagAllSleep==0)
 800403a:	4b0c      	ldr	r3, [pc, #48]	@ (800406c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d10d      	bne.n	800405e <HAL_TIM_PeriodElapsedCallback+0x3a>
 8004042:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d109      	bne.n	800405e <HAL_TIM_PeriodElapsedCallback+0x3a>
 800404a:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d105      	bne.n	800405e <HAL_TIM_PeriodElapsedCallback+0x3a>
    	{
    		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; /*comutare de context cu ISR PendSV*/
 8004052:	4b09      	ldr	r3, [pc, #36]	@ (8004078 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4a08      	ldr	r2, [pc, #32]	@ (8004078 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800405c:	6053      	str	r3, [r2, #4]
    	}
    }


}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40000800 	.word	0x40000800
 800406c:	200000a9 	.word	0x200000a9
 8004070:	200000ac 	.word	0x200000ac
 8004074:	200000b0 	.word	0x200000b0
 8004078:	e000ed00 	.word	0xe000ed00

0800407c <PendSV_Handler>:
	 * citirea datelor de pe cardul SD prin SDIO)
	 * Feature: De comutat in functie de o politica de planificare,
	 * momentan se comuta circular intre 2 procese de test!
	 */

    __asm("CPSID I");
 800407c:	b672      	cpsid	i

    /*salvare context curent*/
    __asm("PUSH {R4-R7}");
 800407e:	b4f0      	push	{r4, r5, r6, r7}
    __asm("MOV R4, R8");
 8004080:	4644      	mov	r4, r8
    __asm("MOV R5, R9");
 8004082:	464d      	mov	r5, r9
    __asm("MOV R6, R10");
 8004084:	4656      	mov	r6, sl
    __asm("MOV R7, R11");
 8004086:	465f      	mov	r7, fp
    __asm("PUSH {R4-R7}");
 8004088:	b4f0      	push	{r4, r5, r6, r7}
    __asm("LDR R4, =currentProcess");
 800408a:	4c0b      	ldr	r4, [pc, #44]	@ (80040b8 <PendSV_Handler+0x3c>)
    __asm("LDR R5, [R4]"); /*R5->pstack*/
 800408c:	6825      	ldr	r5, [r4, #0]
    __asm("MOV R6, SP");
 800408e:	466e      	mov	r6, sp
    __asm("STR R6, [R5]"); /*salvam PS curent in pstack*/
 8004090:	602e      	str	r6, [r5, #0]

    /*apel scheduler pentru adresa next proces*/
    __asm("PUSH {R0-R3, LR}");
 8004092:	b50f      	push	{r0, r1, r2, r3, lr}
    __asm("LDR R0, =kernel_scheduler");
 8004094:	4809      	ldr	r0, [pc, #36]	@ (80040bc <PendSV_Handler+0x40>)
    __asm("BLX R0");
 8004096:	4780      	blx	r0
    __asm("POP {R1-R3, R12, LR}");
 8004098:	e8bd 500e 	ldmia.w	sp!, {r1, r2, r3, ip, lr}

    /*restaurare context al proc ales de scheduler*/
    __asm("LDR R4, =currentProcess");
 800409c:	4c06      	ldr	r4, [pc, #24]	@ (80040b8 <PendSV_Handler+0x3c>)
    __asm("STR R0, [R4]");
 800409e:	6020      	str	r0, [r4, #0]
    __asm("LDR R5, [R0]");
 80040a0:	6805      	ldr	r5, [r0, #0]
    __asm("MOV SP, R5");
 80040a2:	46ad      	mov	sp, r5
    __asm("POP {R4-R7}");
 80040a4:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV R8, R4");
 80040a6:	46a0      	mov	r8, r4
    __asm("MOV R9, R5");
 80040a8:	46a9      	mov	r9, r5
    __asm("MOV R10, R6");
 80040aa:	46b2      	mov	sl, r6
    __asm("MOV R11, R7");
 80040ac:	46bb      	mov	fp, r7
    __asm("POP {R4-R7}");
 80040ae:	bcf0      	pop	{r4, r5, r6, r7}

    __asm("CPSIE I");
 80040b0:	b662      	cpsie	i
    __asm("BX LR");
 80040b2:	4770      	bx	lr
}
 80040b4:	bf00      	nop
 80040b6:	0000      	.short	0x0000
 80040b8:	2001417c 	.word	0x2001417c
 80040bc:	080042fd 	.word	0x080042fd

080040c0 <kernel_add_process>:


void kernel_add_process(void (*adrFunction)(void))
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

	__asm("CPSID   I");
 80040c8:	b672      	cpsid	i

	if(nrProc==MAXPR)
 80040ca:	4b68      	ldr	r3, [pc, #416]	@ (800426c <kernel_add_process+0x1ac>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b0a      	cmp	r3, #10
 80040d0:	d101      	bne.n	80040d6 <kernel_add_process+0x16>
	{
	    __asm("CPSIE   I ");
 80040d2:	b662      	cpsie	i
		return;
 80040d4:	e0c4      	b.n	8004260 <kernel_add_process+0x1a0>
	}

	if(nrProc == 0)
 80040d6:	4b65      	ldr	r3, [pc, #404]	@ (800426c <kernel_add_process+0x1ac>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d126      	bne.n	800412c <kernel_add_process+0x6c>
	{
		tcb[0].pnext = &tcb[0];
 80040de:	4b64      	ldr	r3, [pc, #400]	@ (8004270 <kernel_add_process+0x1b0>)
 80040e0:	4a63      	ldr	r2, [pc, #396]	@ (8004270 <kernel_add_process+0x1b0>)
 80040e2:	605a      	str	r2, [r3, #4]

		tcb[0].pstack = &tcb[0].stack[STACKSIZE-16];            /*Atribuire SP*/
 80040e4:	4b62      	ldr	r3, [pc, #392]	@ (8004270 <kernel_add_process+0x1b0>)
 80040e6:	4a63      	ldr	r2, [pc, #396]	@ (8004274 <kernel_add_process+0x1b4>)
 80040e8:	601a      	str	r2, [r3, #0]
		tcb[0].pfunction = adrFunction;                         /*Atribuire adr task in TCB*/
 80040ea:	4a61      	ldr	r2, [pc, #388]	@ (8004270 <kernel_add_process+0x1b0>)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6093      	str	r3, [r2, #8]
		tcb[0].stack[STACKSIZE-1] = 0x01000000;                 /*Atribuire thumb mod operare reg*/
 80040f0:	4b5f      	ldr	r3, [pc, #380]	@ (8004270 <kernel_add_process+0x1b0>)
 80040f2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80040f6:	461a      	mov	r2, r3
 80040f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040fc:	6093      	str	r3, [r2, #8]
		tcb[0].stack[STACKSIZE-2] = (int32_t)tcb[0].pfunction;  /*Atribuire reg PC catre adr incep Task/functie*/
 80040fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004270 <kernel_add_process+0x1b0>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	461a      	mov	r2, r3
 8004104:	4b5a      	ldr	r3, [pc, #360]	@ (8004270 <kernel_add_process+0x1b0>)
 8004106:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800410a:	605a      	str	r2, [r3, #4]
		tcb[0].pID = nrProc++;
 800410c:	4b57      	ldr	r3, [pc, #348]	@ (800426c <kernel_add_process+0x1ac>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	b2d1      	uxtb	r1, r2
 8004114:	4a55      	ldr	r2, [pc, #340]	@ (800426c <kernel_add_process+0x1ac>)
 8004116:	7011      	strb	r1, [r2, #0]
 8004118:	4a55      	ldr	r2, [pc, #340]	@ (8004270 <kernel_add_process+0x1b0>)
 800411a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800411e:	7313      	strb	r3, [r2, #12]
		tcb[0].state = awake;
 8004120:	4b53      	ldr	r3, [pc, #332]	@ (8004270 <kernel_add_process+0x1b0>)
 8004122:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004126:	2201      	movs	r2, #1
 8004128:	735a      	strb	r2, [r3, #13]
 800412a:	e098      	b.n	800425e <kernel_add_process+0x19e>

	}

	else
	{
		tcb[nrProc].pnext = &tcb[nrProc-1];
 800412c:	4b4f      	ldr	r3, [pc, #316]	@ (800426c <kernel_add_process+0x1ac>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	3b01      	subs	r3, #1
 8004132:	4a4e      	ldr	r2, [pc, #312]	@ (800426c <kernel_add_process+0x1ac>)
 8004134:	7812      	ldrb	r2, [r2, #0]
 8004136:	4610      	mov	r0, r2
 8004138:	f242 0214 	movw	r2, #8212	@ 0x2014
 800413c:	fb02 f303 	mul.w	r3, r2, r3
 8004140:	4a4b      	ldr	r2, [pc, #300]	@ (8004270 <kernel_add_process+0x1b0>)
 8004142:	441a      	add	r2, r3
 8004144:	494a      	ldr	r1, [pc, #296]	@ (8004270 <kernel_add_process+0x1b0>)
 8004146:	f242 0314 	movw	r3, #8212	@ 0x2014
 800414a:	fb00 f303 	mul.w	r3, r0, r3
 800414e:	440b      	add	r3, r1
 8004150:	3304      	adds	r3, #4
 8004152:	601a      	str	r2, [r3, #0]
		tcb[0].pnext = &tcb[nrProc];
 8004154:	4b45      	ldr	r3, [pc, #276]	@ (800426c <kernel_add_process+0x1ac>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	f242 0314 	movw	r3, #8212	@ 0x2014
 800415e:	fb02 f303 	mul.w	r3, r2, r3
 8004162:	4a43      	ldr	r2, [pc, #268]	@ (8004270 <kernel_add_process+0x1b0>)
 8004164:	4413      	add	r3, r2
 8004166:	4a42      	ldr	r2, [pc, #264]	@ (8004270 <kernel_add_process+0x1b0>)
 8004168:	6053      	str	r3, [r2, #4]

		tcb[nrProc].pstack = &tcb[nrProc].stack[STACKSIZE-16];           /*Atribuire SP*/
 800416a:	4b40      	ldr	r3, [pc, #256]	@ (800426c <kernel_add_process+0x1ac>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	4b3e      	ldr	r3, [pc, #248]	@ (800426c <kernel_add_process+0x1ac>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f242 0314 	movw	r3, #8212	@ 0x2014
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	f503 53fe 	add.w	r3, r3, #8128	@ 0x1fc0
 8004182:	3308      	adds	r3, #8
 8004184:	4a3a      	ldr	r2, [pc, #232]	@ (8004270 <kernel_add_process+0x1b0>)
 8004186:	4413      	add	r3, r2
 8004188:	1d1a      	adds	r2, r3, #4
 800418a:	4939      	ldr	r1, [pc, #228]	@ (8004270 <kernel_add_process+0x1b0>)
 800418c:	f242 0314 	movw	r3, #8212	@ 0x2014
 8004190:	fb00 f303 	mul.w	r3, r0, r3
 8004194:	440b      	add	r3, r1
 8004196:	601a      	str	r2, [r3, #0]
		tcb[nrProc].pfunction = adrFunction;                             /*Atribuire adr task in TCB*/
 8004198:	4b34      	ldr	r3, [pc, #208]	@ (800426c <kernel_add_process+0x1ac>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	4619      	mov	r1, r3
 800419e:	4a34      	ldr	r2, [pc, #208]	@ (8004270 <kernel_add_process+0x1b0>)
 80041a0:	f242 0314 	movw	r3, #8212	@ 0x2014
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	4413      	add	r3, r2
 80041aa:	3308      	adds	r3, #8
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	601a      	str	r2, [r3, #0]
		tcb[nrProc].stack[STACKSIZE-1] = 0x01000000;                     /*Atribuire thumb mod operare reg*/
 80041b0:	4b2e      	ldr	r3, [pc, #184]	@ (800426c <kernel_add_process+0x1ac>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	4619      	mov	r1, r3
 80041b6:	4a2e      	ldr	r2, [pc, #184]	@ (8004270 <kernel_add_process+0x1b0>)
 80041b8:	f242 0314 	movw	r3, #8212	@ 0x2014
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80041c6:	3308      	adds	r3, #8
 80041c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041cc:	601a      	str	r2, [r3, #0]
		tcb[nrProc].stack[STACKSIZE-2] = (int32_t)tcb[nrProc].pfunction; /*Atribuire reg PC catre adr incep Task/functie*/
 80041ce:	4b27      	ldr	r3, [pc, #156]	@ (800426c <kernel_add_process+0x1ac>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	4619      	mov	r1, r3
 80041d4:	4a26      	ldr	r2, [pc, #152]	@ (8004270 <kernel_add_process+0x1b0>)
 80041d6:	f242 0314 	movw	r3, #8212	@ 0x2014
 80041da:	fb01 f303 	mul.w	r3, r1, r3
 80041de:	4413      	add	r3, r2
 80041e0:	3308      	adds	r3, #8
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	4b21      	ldr	r3, [pc, #132]	@ (800426c <kernel_add_process+0x1ac>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	4611      	mov	r1, r2
 80041ec:	4a20      	ldr	r2, [pc, #128]	@ (8004270 <kernel_add_process+0x1b0>)
 80041ee:	f242 0314 	movw	r3, #8212	@ 0x2014
 80041f2:	fb00 f303 	mul.w	r3, r0, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80041fc:	3304      	adds	r3, #4
 80041fe:	6019      	str	r1, [r3, #0]
		tcb[nrProc].pID = nrProc;
 8004200:	4b1a      	ldr	r3, [pc, #104]	@ (800426c <kernel_add_process+0x1ac>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	4b19      	ldr	r3, [pc, #100]	@ (800426c <kernel_add_process+0x1ac>)
 8004208:	7819      	ldrb	r1, [r3, #0]
 800420a:	4a19      	ldr	r2, [pc, #100]	@ (8004270 <kernel_add_process+0x1b0>)
 800420c:	f242 0314 	movw	r3, #8212	@ 0x2014
 8004210:	fb00 f303 	mul.w	r3, r0, r3
 8004214:	4413      	add	r3, r2
 8004216:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800421a:	330c      	adds	r3, #12
 800421c:	460a      	mov	r2, r1
 800421e:	701a      	strb	r2, [r3, #0]
		tcb[nrProc].state = awake;
 8004220:	4b12      	ldr	r3, [pc, #72]	@ (800426c <kernel_add_process+0x1ac>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	4619      	mov	r1, r3
 8004226:	4a12      	ldr	r2, [pc, #72]	@ (8004270 <kernel_add_process+0x1b0>)
 8004228:	f242 0314 	movw	r3, #8212	@ 0x2014
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	4413      	add	r3, r2
 8004232:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004236:	330d      	adds	r3, #13
 8004238:	2201      	movs	r2, #1
 800423a:	701a      	strb	r2, [r3, #0]

	    currentProcess = &tcb[nrProc];
 800423c:	4b0b      	ldr	r3, [pc, #44]	@ (800426c <kernel_add_process+0x1ac>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	f242 0314 	movw	r3, #8212	@ 0x2014
 8004246:	fb02 f303 	mul.w	r3, r2, r3
 800424a:	4a09      	ldr	r2, [pc, #36]	@ (8004270 <kernel_add_process+0x1b0>)
 800424c:	4413      	add	r3, r2
 800424e:	4a0a      	ldr	r2, [pc, #40]	@ (8004278 <kernel_add_process+0x1b8>)
 8004250:	6013      	str	r3, [r2, #0]
	    nrProc++;
 8004252:	4b06      	ldr	r3, [pc, #24]	@ (800426c <kernel_add_process+0x1ac>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	3301      	adds	r3, #1
 8004258:	b2da      	uxtb	r2, r3
 800425a:	4b04      	ldr	r3, [pc, #16]	@ (800426c <kernel_add_process+0x1ac>)
 800425c:	701a      	strb	r2, [r3, #0]
	}

    __asm("CPSIE   I ");
 800425e:	b662      	cpsie	i

}
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	200000a8 	.word	0x200000a8
 8004270:	200000b4 	.word	0x200000b4
 8004274:	20002080 	.word	0x20002080
 8004278:	2001417c 	.word	0x2001417c

0800427c <kernel_start>:
{
	/*
	 * Functie de start a kernelului.
	 */

	__asm("CPSID   I");
 800427c:	b672      	cpsid	i

	__asm("LDR     R0, =startOS");
 800427e:	480c      	ldr	r0, [pc, #48]	@ (80042b0 <kernel_start+0x34>)
	__asm("MOV     R1, 1");
 8004280:	f04f 0101 	mov.w	r1, #1
	__asm("STR     R1, [R0]");
 8004284:	6001      	str	r1, [r0, #0]
    __asm("LDR     R0, =currentProcess");
 8004286:	480b      	ldr	r0, [pc, #44]	@ (80042b4 <kernel_start+0x38>)
    __asm("LDR     R2, [R0]");
 8004288:	6802      	ldr	r2, [r0, #0]
    __asm("LDR     R4, [R2]");
 800428a:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4"); /*punem in SP procesorului pstack al &curentProc*/
 800428c:	46a5      	mov	sp, r4
    /*restauram contextul initial, emuland o intr*/
    __asm("POP     {R4-R7}");
 800428e:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8004290:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8004292:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8004294:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 8004296:	46bb      	mov	fp, r7
    __asm("POP     {R4-R7}");
 8004298:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("POP     {R0-R3}");
 800429a:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 800429c:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 800429e:	46a4      	mov	ip, r4
    __asm("ADD     SP,SP,#4"); /*restauram registrul LR sarind peste R12*/
 80042a0:	b001      	add	sp, #4
    __asm("POP     {R4}");		/*deaorece nu se poate face pop pentru R12*/
 80042a2:	bc10      	pop	{r4}

    __asm("MOV     LR, R4");
 80042a4:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4"); /*simulam comportamentul procesorului sarind la PC*/
 80042a6:	b001      	add	sp, #4

    __asm("CPSIE   I ");
 80042a8:	b662      	cpsie	i
    __asm("BX      LR");
 80042aa:	4770      	bx	lr

}
 80042ac:	bf00      	nop
 80042ae:	0000      	.short	0x0000
 80042b0:	200000a9 	.word	0x200000a9
 80042b4:	2001417c 	.word	0x2001417c

080042b8 <kernel_delay>:


void kernel_delay(unsigned int delay)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	 * currentProcess.
	 * Input: void
	 * Output: void
	 */

	currentProcess->state = sleep;
 80042c0:	4b0c      	ldr	r3, [pc, #48]	@ (80042f4 <kernel_delay+0x3c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80042c8:	2200      	movs	r2, #0
 80042ca:	735a      	strb	r2, [r3, #13]
	currentProcess->n = delay;
 80042cc:	4b09      	ldr	r3, [pc, #36]	@ (80042f4 <kernel_delay+0x3c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80042d4:	461a      	mov	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6113      	str	r3, [r2, #16]

	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; /*comutare de context cu ISR PendSV*/
 80042da:	4b07      	ldr	r3, [pc, #28]	@ (80042f8 <kernel_delay+0x40>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4a06      	ldr	r2, [pc, #24]	@ (80042f8 <kernel_delay+0x40>)
 80042e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e4:	6053      	str	r3, [r2, #4]

}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	2001417c 	.word	0x2001417c
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <kernel_scheduler>:


static TCB* kernel_scheduler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
	 * Input: void
	 * Output: TCB*(adresa TCB al procesului)
	 */


	TCB *temp = currentProcess->pnext;
 8004302:	4b0e      	ldr	r3, [pc, #56]	@ (800433c <kernel_scheduler+0x40>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	607b      	str	r3, [r7, #4]

	while(temp!=currentProcess)
 800430a:	e00a      	b.n	8004322 <kernel_scheduler+0x26>
	{
		if(temp->state == awake)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004312:	7b5b      	ldrb	r3, [r3, #13]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <kernel_scheduler+0x20>
		{
			return temp;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	e009      	b.n	8004330 <kernel_scheduler+0x34>
		}

		else
		{
			temp = temp->pnext;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	607b      	str	r3, [r7, #4]
	while(temp!=currentProcess)
 8004322:	4b06      	ldr	r3, [pc, #24]	@ (800433c <kernel_scheduler+0x40>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	429a      	cmp	r2, r3
 800432a:	d1ef      	bne.n	800430c <kernel_scheduler+0x10>
	}

	/*In cazul in care toate procesele sunt in sleep
	 * Se va returna adresa procesului curent*/

	return currentProcess;
 800432c:	4b03      	ldr	r3, [pc, #12]	@ (800433c <kernel_scheduler+0x40>)
 800432e:	681b      	ldr	r3, [r3, #0]

}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	2001417c 	.word	0x2001417c

08004340 <kernel_count_sleep>:



void kernel_count_sleep(void)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
	 * Output: void
	 */

	static uint8_t nrProcSleep = 0;

	nrProcSleep = 0;
 8004346:	4b31      	ldr	r3, [pc, #196]	@ (800440c <kernel_count_sleep+0xcc>)
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
	flagAllSleep = 0;
 800434c:	4b30      	ldr	r3, [pc, #192]	@ (8004410 <kernel_count_sleep+0xd0>)
 800434e:	2200      	movs	r2, #0
 8004350:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<nrProc; i++)
 8004352:	2300      	movs	r3, #0
 8004354:	71fb      	strb	r3, [r7, #7]
 8004356:	e044      	b.n	80043e2 <kernel_count_sleep+0xa2>
	{
		if(tcb[i].state == sleep)
 8004358:	79fb      	ldrb	r3, [r7, #7]
 800435a:	4a2e      	ldr	r2, [pc, #184]	@ (8004414 <kernel_count_sleep+0xd4>)
 800435c:	f242 0114 	movw	r1, #8212	@ 0x2014
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	4413      	add	r3, r2
 8004366:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800436a:	330d      	adds	r3, #13
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d134      	bne.n	80043dc <kernel_count_sleep+0x9c>
		{
			nrProcSleep++;
 8004372:	4b26      	ldr	r3, [pc, #152]	@ (800440c <kernel_count_sleep+0xcc>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	3301      	adds	r3, #1
 8004378:	b2da      	uxtb	r2, r3
 800437a:	4b24      	ldr	r3, [pc, #144]	@ (800440c <kernel_count_sleep+0xcc>)
 800437c:	701a      	strb	r2, [r3, #0]

			tcb[i].n--;
 800437e:	79fa      	ldrb	r2, [r7, #7]
 8004380:	4924      	ldr	r1, [pc, #144]	@ (8004414 <kernel_count_sleep+0xd4>)
 8004382:	f242 0314 	movw	r3, #8212	@ 0x2014
 8004386:	fb02 f303 	mul.w	r3, r2, r3
 800438a:	440b      	add	r3, r1
 800438c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004390:	3310      	adds	r3, #16
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	1e59      	subs	r1, r3, #1
 8004396:	481f      	ldr	r0, [pc, #124]	@ (8004414 <kernel_count_sleep+0xd4>)
 8004398:	f242 0314 	movw	r3, #8212	@ 0x2014
 800439c:	fb02 f303 	mul.w	r3, r2, r3
 80043a0:	4403      	add	r3, r0
 80043a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80043a6:	3310      	adds	r3, #16
 80043a8:	6019      	str	r1, [r3, #0]

			if(tcb[i].n == 0)
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	4a19      	ldr	r2, [pc, #100]	@ (8004414 <kernel_count_sleep+0xd4>)
 80043ae:	f242 0114 	movw	r1, #8212	@ 0x2014
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80043bc:	3310      	adds	r3, #16
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <kernel_count_sleep+0x9c>
			{
				tcb[i].state = awake;
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	4a13      	ldr	r2, [pc, #76]	@ (8004414 <kernel_count_sleep+0xd4>)
 80043c8:	f242 0114 	movw	r1, #8212	@ 0x2014
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80043d6:	330d      	adds	r3, #13
 80043d8:	2201      	movs	r2, #1
 80043da:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<nrProc; i++)
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	3301      	adds	r3, #1
 80043e0:	71fb      	strb	r3, [r7, #7]
 80043e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004418 <kernel_count_sleep+0xd8>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	79fa      	ldrb	r2, [r7, #7]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d3b5      	bcc.n	8004358 <kernel_count_sleep+0x18>
			}
		}
	}

	if(nrProcSleep == nrProc)
 80043ec:	4b07      	ldr	r3, [pc, #28]	@ (800440c <kernel_count_sleep+0xcc>)
 80043ee:	781a      	ldrb	r2, [r3, #0]
 80043f0:	4b09      	ldr	r3, [pc, #36]	@ (8004418 <kernel_count_sleep+0xd8>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d102      	bne.n	80043fe <kernel_count_sleep+0xbe>
	{
		flagAllSleep = 1;
 80043f8:	4b05      	ldr	r3, [pc, #20]	@ (8004410 <kernel_count_sleep+0xd0>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	701a      	strb	r2, [r3, #0]
	}


}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	20014180 	.word	0x20014180
 8004410:	200000b0 	.word	0x200000b0
 8004414:	200000b4 	.word	0x200000b4
 8004418:	200000a8 	.word	0x200000a8

0800441c <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 8004426:	2200      	movs	r2, #0
 8004428:	2108      	movs	r1, #8
 800442a:	480c      	ldr	r0, [pc, #48]	@ (800445c <LCD_send_command+0x40>)
 800442c:	f003 fd36 	bl	8007e9c <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8004430:	2200      	movs	r2, #0
 8004432:	2110      	movs	r1, #16
 8004434:	4809      	ldr	r0, [pc, #36]	@ (800445c <LCD_send_command+0x40>)
 8004436:	f003 fd31 	bl	8007e9c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 800443a:	1df9      	adds	r1, r7, #7
 800443c:	f04f 33ff 	mov.w	r3, #4294967295
 8004440:	2201      	movs	r2, #1
 8004442:	4807      	ldr	r0, [pc, #28]	@ (8004460 <LCD_send_command+0x44>)
 8004444:	f005 f9fd 	bl	8009842 <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 8004448:	2201      	movs	r2, #1
 800444a:	2110      	movs	r1, #16
 800444c:	4803      	ldr	r0, [pc, #12]	@ (800445c <LCD_send_command+0x40>)
 800444e:	f003 fd25 	bl	8007e9c <HAL_GPIO_WritePin>


}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40020c00 	.word	0x40020c00
 8004460:	2001427c 	.word	0x2001427c

08004464 <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 800446e:	4b34      	ldr	r3, [pc, #208]	@ (8004540 <LCD_send_data_multi+0xdc>)
 8004470:	2201      	movs	r2, #1
 8004472:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 8004474:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004478:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004482:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	fbb3 f2f2 	udiv	r2, r3, r2
 800448c:	6939      	ldr	r1, [r7, #16]
 800448e:	fb01 f202 	mul.w	r2, r1, r2
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 8004496:	2201      	movs	r2, #1
 8004498:	2108      	movs	r1, #8
 800449a:	482a      	ldr	r0, [pc, #168]	@ (8004544 <LCD_send_data_multi+0xe0>)
 800449c:	f003 fcfe 	bl	8007e9c <HAL_GPIO_WritePin>
	CS_A();
 80044a0:	2200      	movs	r2, #0
 80044a2:	2110      	movs	r1, #16
 80044a4:	4827      	ldr	r0, [pc, #156]	@ (8004544 <LCD_send_data_multi+0xe0>)
 80044a6:	f003 fcf9 	bl	8007e9c <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d821      	bhi.n	80044f6 <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 80044b2:	4b23      	ldr	r3, [pc, #140]	@ (8004540 <LCD_send_data_multi+0xdc>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4821      	ldr	r0, [pc, #132]	@ (8004548 <LCD_send_data_multi+0xe4>)
 80044c2:	f005 feeb 	bl	800a29c <HAL_SPI_Transmit_DMA>
 80044c6:	e02c      	b.n	8004522 <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 80044c8:	bf00      	nop
 80044ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004540 <LCD_send_data_multi+0xdc>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0fa      	beq.n	80044ca <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 80044d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004540 <LCD_send_data_multi+0xdc>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4819      	ldr	r0, [pc, #100]	@ (8004548 <LCD_send_data_multi+0xe4>)
 80044e4:	f005 feda 	bl	800a29c <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4413      	add	r3, r2
 80044ee:	607b      	str	r3, [r7, #4]
			nrFrames--;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e5      	bne.n	80044c8 <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00f      	beq.n	8004522 <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 8004502:	bf00      	nop
 8004504:	4b0e      	ldr	r3, [pc, #56]	@ (8004540 <LCD_send_data_multi+0xdc>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0fa      	beq.n	8004504 <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 800450e:	4b0c      	ldr	r3, [pc, #48]	@ (8004540 <LCD_send_data_multi+0xdc>)
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	b29b      	uxth	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	480a      	ldr	r0, [pc, #40]	@ (8004548 <LCD_send_data_multi+0xe4>)
 800451e:	f005 febd 	bl	800a29c <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 8004522:	bf00      	nop
 8004524:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <LCD_send_data_multi+0xdc>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0fa      	beq.n	8004524 <LCD_send_data_multi+0xc0>
	CS_D();
 800452e:	2201      	movs	r2, #1
 8004530:	2110      	movs	r1, #16
 8004532:	4804      	ldr	r0, [pc, #16]	@ (8004544 <LCD_send_data_multi+0xe0>)
 8004534:	f003 fcb2 	bl	8007e9c <HAL_GPIO_WritePin>

}
 8004538:	bf00      	nop
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	200144c4 	.word	0x200144c4
 8004544:	40020c00 	.word	0x40020c00
 8004548:	2001427c 	.word	0x2001427c

0800454c <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 8004556:	2201      	movs	r2, #1
 8004558:	2108      	movs	r1, #8
 800455a:	480c      	ldr	r0, [pc, #48]	@ (800458c <LCD_send_data+0x40>)
 800455c:	f003 fc9e 	bl	8007e9c <HAL_GPIO_WritePin>
	CS_A();
 8004560:	2200      	movs	r2, #0
 8004562:	2110      	movs	r1, #16
 8004564:	4809      	ldr	r0, [pc, #36]	@ (800458c <LCD_send_data+0x40>)
 8004566:	f003 fc99 	bl	8007e9c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 800456a:	1df9      	adds	r1, r7, #7
 800456c:	f04f 33ff 	mov.w	r3, #4294967295
 8004570:	2201      	movs	r2, #1
 8004572:	4807      	ldr	r0, [pc, #28]	@ (8004590 <LCD_send_data+0x44>)
 8004574:	f005 f965 	bl	8009842 <HAL_SPI_Transmit>

	CS_D();
 8004578:	2201      	movs	r2, #1
 800457a:	2110      	movs	r1, #16
 800457c:	4803      	ldr	r0, [pc, #12]	@ (800458c <LCD_send_data+0x40>)
 800457e:	f003 fc8d 	bl	8007e9c <HAL_GPIO_WritePin>

}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40020c00 	.word	0x40020c00
 8004590:	2001427c 	.word	0x2001427c

08004594 <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 8004598:	2200      	movs	r2, #0
 800459a:	2140      	movs	r1, #64	@ 0x40
 800459c:	487c      	ldr	r0, [pc, #496]	@ (8004790 <ILI9488_driver_init+0x1fc>)
 800459e:	f003 fc7d 	bl	8007e9c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80045a2:	200a      	movs	r0, #10
 80045a4:	f002 fb7e 	bl	8006ca4 <HAL_Delay>
	RST_D();
 80045a8:	2201      	movs	r2, #1
 80045aa:	2140      	movs	r1, #64	@ 0x40
 80045ac:	4878      	ldr	r0, [pc, #480]	@ (8004790 <ILI9488_driver_init+0x1fc>)
 80045ae:	f003 fc75 	bl	8007e9c <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 80045b2:	2001      	movs	r0, #1
 80045b4:	f7ff ff32 	bl	800441c <LCD_send_command>
	HAL_Delay(150);
 80045b8:	2096      	movs	r0, #150	@ 0x96
 80045ba:	f002 fb73 	bl	8006ca4 <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 80045be:	2011      	movs	r0, #17
 80045c0:	f7ff ff2c 	bl	800441c <LCD_send_command>
	HAL_Delay(255);
 80045c4:	20ff      	movs	r0, #255	@ 0xff
 80045c6:	f002 fb6d 	bl	8006ca4 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 80045ca:	20e0      	movs	r0, #224	@ 0xe0
 80045cc:	f7ff ff26 	bl	800441c <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 80045d0:	2000      	movs	r0, #0
 80045d2:	f7ff ffbb 	bl	800454c <LCD_send_data>
	LCD_send_data(0x0C);
 80045d6:	200c      	movs	r0, #12
 80045d8:	f7ff ffb8 	bl	800454c <LCD_send_data>
	LCD_send_data(0x05);
 80045dc:	2005      	movs	r0, #5
 80045de:	f7ff ffb5 	bl	800454c <LCD_send_data>
	LCD_send_data(0x04);
 80045e2:	2004      	movs	r0, #4
 80045e4:	f7ff ffb2 	bl	800454c <LCD_send_data>
	LCD_send_data(0x0F);
 80045e8:	200f      	movs	r0, #15
 80045ea:	f7ff ffaf 	bl	800454c <LCD_send_data>
	LCD_send_data(0x06);
 80045ee:	2006      	movs	r0, #6
 80045f0:	f7ff ffac 	bl	800454c <LCD_send_data>
	LCD_send_data(0x3A);
 80045f4:	203a      	movs	r0, #58	@ 0x3a
 80045f6:	f7ff ffa9 	bl	800454c <LCD_send_data>
	LCD_send_data(0x56);
 80045fa:	2056      	movs	r0, #86	@ 0x56
 80045fc:	f7ff ffa6 	bl	800454c <LCD_send_data>
	LCD_send_data(0x4D);
 8004600:	204d      	movs	r0, #77	@ 0x4d
 8004602:	f7ff ffa3 	bl	800454c <LCD_send_data>
	LCD_send_data(0x03);
 8004606:	2003      	movs	r0, #3
 8004608:	f7ff ffa0 	bl	800454c <LCD_send_data>
	LCD_send_data(0x0A);
 800460c:	200a      	movs	r0, #10
 800460e:	f7ff ff9d 	bl	800454c <LCD_send_data>
	LCD_send_data(0x06);
 8004612:	2006      	movs	r0, #6
 8004614:	f7ff ff9a 	bl	800454c <LCD_send_data>
	LCD_send_data(0x30);
 8004618:	2030      	movs	r0, #48	@ 0x30
 800461a:	f7ff ff97 	bl	800454c <LCD_send_data>
	LCD_send_data(0x3E);
 800461e:	203e      	movs	r0, #62	@ 0x3e
 8004620:	f7ff ff94 	bl	800454c <LCD_send_data>
	LCD_send_data(0x0F);
 8004624:	200f      	movs	r0, #15
 8004626:	f7ff ff91 	bl	800454c <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 800462a:	20e1      	movs	r0, #225	@ 0xe1
 800462c:	f7ff fef6 	bl	800441c <LCD_send_command>
	LCD_send_data(0x00);
 8004630:	2000      	movs	r0, #0
 8004632:	f7ff ff8b 	bl	800454c <LCD_send_data>
	LCD_send_data(0x13);
 8004636:	2013      	movs	r0, #19
 8004638:	f7ff ff88 	bl	800454c <LCD_send_data>
	LCD_send_data(0x18);
 800463c:	2018      	movs	r0, #24
 800463e:	f7ff ff85 	bl	800454c <LCD_send_data>
	LCD_send_data(0x01);
 8004642:	2001      	movs	r0, #1
 8004644:	f7ff ff82 	bl	800454c <LCD_send_data>
	LCD_send_data(0x11);
 8004648:	2011      	movs	r0, #17
 800464a:	f7ff ff7f 	bl	800454c <LCD_send_data>
	LCD_send_data(0x06);
 800464e:	2006      	movs	r0, #6
 8004650:	f7ff ff7c 	bl	800454c <LCD_send_data>
	LCD_send_data(0x38);
 8004654:	2038      	movs	r0, #56	@ 0x38
 8004656:	f7ff ff79 	bl	800454c <LCD_send_data>
	LCD_send_data(0x34);
 800465a:	2034      	movs	r0, #52	@ 0x34
 800465c:	f7ff ff76 	bl	800454c <LCD_send_data>
	LCD_send_data(0x4D);
 8004660:	204d      	movs	r0, #77	@ 0x4d
 8004662:	f7ff ff73 	bl	800454c <LCD_send_data>
	LCD_send_data(0x06);
 8004666:	2006      	movs	r0, #6
 8004668:	f7ff ff70 	bl	800454c <LCD_send_data>
	LCD_send_data(0x0D);
 800466c:	200d      	movs	r0, #13
 800466e:	f7ff ff6d 	bl	800454c <LCD_send_data>
	LCD_send_data(0x0B);
 8004672:	200b      	movs	r0, #11
 8004674:	f7ff ff6a 	bl	800454c <LCD_send_data>
	LCD_send_data(0x31);
 8004678:	2031      	movs	r0, #49	@ 0x31
 800467a:	f7ff ff67 	bl	800454c <LCD_send_data>
	LCD_send_data(0x37);
 800467e:	2037      	movs	r0, #55	@ 0x37
 8004680:	f7ff ff64 	bl	800454c <LCD_send_data>
	LCD_send_data(0x0F);
 8004684:	200f      	movs	r0, #15
 8004686:	f7ff ff61 	bl	800454c <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 800468a:	20c0      	movs	r0, #192	@ 0xc0
 800468c:	f7ff fec6 	bl	800441c <LCD_send_command>
	LCD_send_data(0x18);
 8004690:	2018      	movs	r0, #24
 8004692:	f7ff ff5b 	bl	800454c <LCD_send_data>
	LCD_send_data(0x16);
 8004696:	2016      	movs	r0, #22
 8004698:	f7ff ff58 	bl	800454c <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 800469c:	20c1      	movs	r0, #193	@ 0xc1
 800469e:	f7ff febd 	bl	800441c <LCD_send_command>
	LCD_send_data(0x45);
 80046a2:	2045      	movs	r0, #69	@ 0x45
 80046a4:	f7ff ff52 	bl	800454c <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 80046a8:	20c2      	movs	r0, #194	@ 0xc2
 80046aa:	f7ff feb7 	bl	800441c <LCD_send_command>
	LCD_send_data(0x33);
 80046ae:	2033      	movs	r0, #51	@ 0x33
 80046b0:	f7ff ff4c 	bl	800454c <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 80046b4:	20c3      	movs	r0, #195	@ 0xc3
 80046b6:	f7ff feb1 	bl	800441c <LCD_send_command>
	LCD_send_data(0x33);
 80046ba:	2033      	movs	r0, #51	@ 0x33
 80046bc:	f7ff ff46 	bl	800454c <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 80046c0:	2036      	movs	r0, #54	@ 0x36
 80046c2:	f7ff feab 	bl	800441c <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 80046c6:	205c      	movs	r0, #92	@ 0x5c
 80046c8:	f7ff ff40 	bl	800454c <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 80046cc:	203a      	movs	r0, #58	@ 0x3a
 80046ce:	f7ff fea5 	bl	800441c <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 80046d2:	2006      	movs	r0, #6
 80046d4:	f7ff ff3a 	bl	800454c <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 80046d8:	2000      	movs	r0, #0
 80046da:	f7ff fe9f 	bl	800441c <LCD_send_command>
	LCD_send_command(0x00);
 80046de:	2000      	movs	r0, #0
 80046e0:	f7ff fe9c 	bl	800441c <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 80046e4:	20b0      	movs	r0, #176	@ 0xb0
 80046e6:	f7ff fe99 	bl	800441c <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 80046ea:	2000      	movs	r0, #0
 80046ec:	f7ff ff2e 	bl	800454c <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 80046f0:	20b1      	movs	r0, #177	@ 0xb1
 80046f2:	f7ff fe93 	bl	800441c <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 80046f6:	20a0      	movs	r0, #160	@ 0xa0
 80046f8:	f7ff ff28 	bl	800454c <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 80046fc:	2011      	movs	r0, #17
 80046fe:	f7ff ff25 	bl	800454c <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 8004702:	20b4      	movs	r0, #180	@ 0xb4
 8004704:	f7ff fe8a 	bl	800441c <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 8004708:	2002      	movs	r0, #2
 800470a:	f7ff ff1f 	bl	800454c <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 800470e:	20b5      	movs	r0, #181	@ 0xb5
 8004710:	f7ff fe84 	bl	800441c <LCD_send_command>
	LCD_send_data(0x02);
 8004714:	2002      	movs	r0, #2
 8004716:	f7ff ff19 	bl	800454c <LCD_send_data>
	LCD_send_data(0x02);
 800471a:	2002      	movs	r0, #2
 800471c:	f7ff ff16 	bl	800454c <LCD_send_data>
	LCD_send_data(0x0A);
 8004720:	200a      	movs	r0, #10
 8004722:	f7ff ff13 	bl	800454c <LCD_send_data>
	LCD_send_data(0x04);
 8004726:	2004      	movs	r0, #4
 8004728:	f7ff ff10 	bl	800454c <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 800472c:	20b6      	movs	r0, #182	@ 0xb6
 800472e:	f7ff fe75 	bl	800441c <LCD_send_command>
	LCD_send_data(0x02);
 8004732:	2002      	movs	r0, #2
 8004734:	f7ff ff0a 	bl	800454c <LCD_send_data>
	LCD_send_data(0x02);
 8004738:	2002      	movs	r0, #2
 800473a:	f7ff ff07 	bl	800454c <LCD_send_data>
	LCD_send_data(0x3B);
 800473e:	203b      	movs	r0, #59	@ 0x3b
 8004740:	f7ff ff04 	bl	800454c <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 8004744:	20e9      	movs	r0, #233	@ 0xe9
 8004746:	f7ff fe69 	bl	800441c <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 800474a:	2000      	movs	r0, #0
 800474c:	f7ff fefe 	bl	800454c <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8004750:	20f7      	movs	r0, #247	@ 0xf7
 8004752:	f7ff fe63 	bl	800441c <LCD_send_command>
	LCD_send_data(0xA9);
 8004756:	20a9      	movs	r0, #169	@ 0xa9
 8004758:	f7ff fef8 	bl	800454c <LCD_send_data>
	LCD_send_data(0x51);
 800475c:	2051      	movs	r0, #81	@ 0x51
 800475e:	f7ff fef5 	bl	800454c <LCD_send_data>
	LCD_send_data(0x2C);
 8004762:	202c      	movs	r0, #44	@ 0x2c
 8004764:	f7ff fef2 	bl	800454c <LCD_send_data>
	LCD_send_data(0x82);
 8004768:	2082      	movs	r0, #130	@ 0x82
 800476a:	f7ff feef 	bl	800454c <LCD_send_data>


	LCD_send_command(0x11);
 800476e:	2011      	movs	r0, #17
 8004770:	f7ff fe54 	bl	800441c <LCD_send_command>
	HAL_Delay(255);
 8004774:	20ff      	movs	r0, #255	@ 0xff
 8004776:	f002 fa95 	bl	8006ca4 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 800477a:	2051      	movs	r0, #81	@ 0x51
 800477c:	f7ff fe4e 	bl	800441c <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 8004780:	20ff      	movs	r0, #255	@ 0xff
 8004782:	f7ff fee3 	bl	800454c <LCD_send_data>
	LCD_send_command(0x29); //Display on
 8004786:	2029      	movs	r0, #41	@ 0x29
 8004788:	f7ff fe48 	bl	800441c <LCD_send_command>


}
 800478c:	bf00      	nop
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40020c00 	.word	0x40020c00

08004794 <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 8004794:	b590      	push	{r4, r7, lr}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	4604      	mov	r4, r0
 800479c:	4608      	mov	r0, r1
 800479e:	4611      	mov	r1, r2
 80047a0:	461a      	mov	r2, r3
 80047a2:	4623      	mov	r3, r4
 80047a4:	80fb      	strh	r3, [r7, #6]
 80047a6:	4603      	mov	r3, r0
 80047a8:	80bb      	strh	r3, [r7, #4]
 80047aa:	460b      	mov	r3, r1
 80047ac:	807b      	strh	r3, [r7, #2]
 80047ae:	4613      	mov	r3, r2
 80047b0:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 80047b2:	202a      	movs	r0, #42	@ 0x2a
 80047b4:	f7ff fe32 	bl	800441c <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	b29b      	uxth	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	733b      	strb	r3, [r7, #12]
 80047c2:	88fb      	ldrh	r3, [r7, #6]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 80047c8:	887b      	ldrh	r3, [r7, #2]
 80047ca:	0a1b      	lsrs	r3, r3, #8
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	73bb      	strb	r3, [r7, #14]
 80047d2:	887b      	ldrh	r3, [r7, #2]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 80047d8:	f107 030c 	add.w	r3, r7, #12
 80047dc:	2104      	movs	r1, #4
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fe40 	bl	8004464 <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 80047e4:	202b      	movs	r0, #43	@ 0x2b
 80047e6:	f7ff fe19 	bl	800441c <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 80047ea:	88bb      	ldrh	r3, [r7, #4]
 80047ec:	0a1b      	lsrs	r3, r3, #8
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	733b      	strb	r3, [r7, #12]
 80047f4:	88bb      	ldrh	r3, [r7, #4]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 80047fa:	883b      	ldrh	r3, [r7, #0]
 80047fc:	0a1b      	lsrs	r3, r3, #8
 80047fe:	b29b      	uxth	r3, r3
 8004800:	b2db      	uxtb	r3, r3
 8004802:	73bb      	strb	r3, [r7, #14]
 8004804:	883b      	ldrh	r3, [r7, #0]
 8004806:	b2db      	uxtb	r3, r3
 8004808:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 800480a:	f107 030c 	add.w	r3, r7, #12
 800480e:	2104      	movs	r1, #4
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fe27 	bl	8004464 <LCD_send_data_multi>

	if(x == 'w')
 8004816:	f897 3020 	ldrb.w	r3, [r7, #32]
 800481a:	2b77      	cmp	r3, #119	@ 0x77
 800481c:	d102      	bne.n	8004824 <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 800481e:	202c      	movs	r0, #44	@ 0x2c
 8004820:	f7ff fdfc 	bl	800441c <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 8004824:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004828:	2b72      	cmp	r3, #114	@ 0x72
 800482a:	d102      	bne.n	8004832 <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 800482c:	202e      	movs	r0, #46	@ 0x2e
 800482e:	f7ff fdf5 	bl	800441c <LCD_send_command>
	}


}
 8004832:	bf00      	nop
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	bd90      	pop	{r4, r7, pc}
	...

0800483c <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	4604      	mov	r4, r0
 8004844:	4608      	mov	r0, r1
 8004846:	4611      	mov	r1, r2
 8004848:	461a      	mov	r2, r3
 800484a:	4623      	mov	r3, r4
 800484c:	80fb      	strh	r3, [r7, #6]
 800484e:	4603      	mov	r3, r0
 8004850:	80bb      	strh	r3, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	807b      	strh	r3, [r7, #2]
 8004856:	4613      	mov	r3, r2
 8004858:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 800485a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a50 <read_pixel_frame+0x214>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4b7b      	ldr	r3, [pc, #492]	@ (8004a50 <read_pixel_frame+0x214>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004868:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 800486a:	4b79      	ldr	r3, [pc, #484]	@ (8004a50 <read_pixel_frame+0x214>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	4b77      	ldr	r3, [pc, #476]	@ (8004a50 <read_pixel_frame+0x214>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8004878:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 800487a:	4b75      	ldr	r3, [pc, #468]	@ (8004a50 <read_pixel_frame+0x214>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	4b73      	ldr	r3, [pc, #460]	@ (8004a50 <read_pixel_frame+0x214>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0210 	orr.w	r2, r2, #16
 8004888:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 800488a:	4b71      	ldr	r3, [pc, #452]	@ (8004a50 <read_pixel_frame+0x214>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b6f      	ldr	r3, [pc, #444]	@ (8004a50 <read_pixel_frame+0x214>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004898:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 800489a:	4b6e      	ldr	r3, [pc, #440]	@ (8004a54 <read_pixel_frame+0x218>)
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 80048a4:	887a      	ldrh	r2, [r7, #2]
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bfb8      	it	lt
 80048ae:	425b      	neglt	r3, r3
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	8839      	ldrh	r1, [r7, #0]
 80048b4:	88bb      	ldrh	r3, [r7, #4]
 80048b6:	1acb      	subs	r3, r1, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bfb8      	it	lt
 80048bc:	425b      	neglt	r3, r3
 80048be:	b29b      	uxth	r3, r3
 80048c0:	fb12 f303 	smulbb	r3, r2, r3
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	0052      	lsls	r2, r2, #1
 80048ca:	4413      	add	r3, r2
 80048cc:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 80048ce:	2300      	movs	r3, #0
 80048d0:	753b      	strb	r3, [r7, #20]

    free(data);
 80048d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048d4:	f00b fe98 	bl	8010608 <free>
    data = malloc(byteNr);
 80048d8:	8afb      	ldrh	r3, [r7, #22]
 80048da:	4618      	mov	r0, r3
 80048dc:	f00b fe8c 	bl	80105f8 <malloc>
 80048e0:	4603      	mov	r3, r0
 80048e2:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 80048e4:	887b      	ldrh	r3, [r7, #2]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	807b      	strh	r3, [r7, #2]
    y--;
 80048ea:	883b      	ldrh	r3, [r7, #0]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	743b      	strb	r3, [r7, #16]
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	747b      	strb	r3, [r7, #17]
 8004900:	887b      	ldrh	r3, [r7, #2]
 8004902:	0a1b      	lsrs	r3, r3, #8
 8004904:	b29b      	uxth	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	74bb      	strb	r3, [r7, #18]
 800490a:	887b      	ldrh	r3, [r7, #2]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 8004910:	88bb      	ldrh	r3, [r7, #4]
 8004912:	0a1b      	lsrs	r3, r3, #8
 8004914:	b29b      	uxth	r3, r3
 8004916:	b2db      	uxtb	r3, r3
 8004918:	733b      	strb	r3, [r7, #12]
 800491a:	88bb      	ldrh	r3, [r7, #4]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	737b      	strb	r3, [r7, #13]
 8004920:	883b      	ldrh	r3, [r7, #0]
 8004922:	0a1b      	lsrs	r3, r3, #8
 8004924:	b29b      	uxth	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	73bb      	strb	r3, [r7, #14]
 800492a:	883b      	ldrh	r3, [r7, #0]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	73fb      	strb	r3, [r7, #15]

    CS_A();
 8004930:	2200      	movs	r2, #0
 8004932:	2110      	movs	r1, #16
 8004934:	4848      	ldr	r0, [pc, #288]	@ (8004a58 <read_pixel_frame+0x21c>)
 8004936:	f003 fab1 	bl	8007e9c <HAL_GPIO_WritePin>

    DC_COMMAND();
 800493a:	2200      	movs	r2, #0
 800493c:	2108      	movs	r1, #8
 800493e:	4846      	ldr	r0, [pc, #280]	@ (8004a58 <read_pixel_frame+0x21c>)
 8004940:	f003 faac 	bl	8007e9c <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 8004944:	232a      	movs	r3, #42	@ 0x2a
 8004946:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 8004948:	f107 010b 	add.w	r1, r7, #11
 800494c:	f04f 33ff 	mov.w	r3, #4294967295
 8004950:	2201      	movs	r2, #1
 8004952:	483f      	ldr	r0, [pc, #252]	@ (8004a50 <read_pixel_frame+0x214>)
 8004954:	f004 ff75 	bl	8009842 <HAL_SPI_Transmit>
    DC_DATA();
 8004958:	2201      	movs	r2, #1
 800495a:	2108      	movs	r1, #8
 800495c:	483e      	ldr	r0, [pc, #248]	@ (8004a58 <read_pixel_frame+0x21c>)
 800495e:	f003 fa9d 	bl	8007e9c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 8004962:	f107 0110 	add.w	r1, r7, #16
 8004966:	f04f 33ff 	mov.w	r3, #4294967295
 800496a:	2204      	movs	r2, #4
 800496c:	4838      	ldr	r0, [pc, #224]	@ (8004a50 <read_pixel_frame+0x214>)
 800496e:	f004 ff68 	bl	8009842 <HAL_SPI_Transmit>

    DC_COMMAND();
 8004972:	2200      	movs	r2, #0
 8004974:	2108      	movs	r1, #8
 8004976:	4838      	ldr	r0, [pc, #224]	@ (8004a58 <read_pixel_frame+0x21c>)
 8004978:	f003 fa90 	bl	8007e9c <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 800497c:	232b      	movs	r3, #43	@ 0x2b
 800497e:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 8004980:	f107 010a 	add.w	r1, r7, #10
 8004984:	f04f 33ff 	mov.w	r3, #4294967295
 8004988:	2201      	movs	r2, #1
 800498a:	4831      	ldr	r0, [pc, #196]	@ (8004a50 <read_pixel_frame+0x214>)
 800498c:	f004 ff59 	bl	8009842 <HAL_SPI_Transmit>
    DC_DATA();
 8004990:	2201      	movs	r2, #1
 8004992:	2108      	movs	r1, #8
 8004994:	4830      	ldr	r0, [pc, #192]	@ (8004a58 <read_pixel_frame+0x21c>)
 8004996:	f003 fa81 	bl	8007e9c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 800499a:	f107 010c 	add.w	r1, r7, #12
 800499e:	f04f 33ff 	mov.w	r3, #4294967295
 80049a2:	2204      	movs	r2, #4
 80049a4:	482a      	ldr	r0, [pc, #168]	@ (8004a50 <read_pixel_frame+0x214>)
 80049a6:	f004 ff4c 	bl	8009842 <HAL_SPI_Transmit>

    DC_COMMAND();
 80049aa:	2200      	movs	r2, #0
 80049ac:	2108      	movs	r1, #8
 80049ae:	482a      	ldr	r0, [pc, #168]	@ (8004a58 <read_pixel_frame+0x21c>)
 80049b0:	f003 fa74 	bl	8007e9c <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 80049b4:	232e      	movs	r3, #46	@ 0x2e
 80049b6:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 80049b8:	f107 0109 	add.w	r1, r7, #9
 80049bc:	f04f 33ff 	mov.w	r3, #4294967295
 80049c0:	2201      	movs	r2, #1
 80049c2:	4823      	ldr	r0, [pc, #140]	@ (8004a50 <read_pixel_frame+0x214>)
 80049c4:	f004 ff3d 	bl	8009842 <HAL_SPI_Transmit>
    DC_DATA();
 80049c8:	2201      	movs	r2, #1
 80049ca:	2108      	movs	r1, #8
 80049cc:	4822      	ldr	r0, [pc, #136]	@ (8004a58 <read_pixel_frame+0x21c>)
 80049ce:	f003 fa65 	bl	8007e9c <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 80049d2:	f107 0114 	add.w	r1, r7, #20
 80049d6:	f04f 33ff 	mov.w	r3, #4294967295
 80049da:	2201      	movs	r2, #1
 80049dc:	481c      	ldr	r0, [pc, #112]	@ (8004a50 <read_pixel_frame+0x214>)
 80049de:	f005 f874 	bl	8009aca <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 80049e2:	8afb      	ldrh	r3, [r7, #22]
 80049e4:	461a      	mov	r2, r3
 80049e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049e8:	4819      	ldr	r0, [pc, #100]	@ (8004a50 <read_pixel_frame+0x214>)
 80049ea:	f005 fd09 	bl	800a400 <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 80049ee:	bf00      	nop
 80049f0:	4b18      	ldr	r3, [pc, #96]	@ (8004a54 <read_pixel_frame+0x218>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0fa      	beq.n	80049f0 <read_pixel_frame+0x1b4>
    CS_D();
 80049fa:	2201      	movs	r2, #1
 80049fc:	2110      	movs	r1, #16
 80049fe:	4816      	ldr	r0, [pc, #88]	@ (8004a58 <read_pixel_frame+0x21c>)
 8004a00:	f003 fa4c 	bl	8007e9c <HAL_GPIO_WritePin>

    free(data);
 8004a04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a06:	f00b fdff 	bl	8010608 <free>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 8004a0a:	4b11      	ldr	r3, [pc, #68]	@ (8004a50 <read_pixel_frame+0x214>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b0f      	ldr	r3, [pc, #60]	@ (8004a50 <read_pixel_frame+0x214>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a18:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 8004a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a50 <read_pixel_frame+0x214>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <read_pixel_frame+0x214>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8004a28:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 8004a2a:	4b09      	ldr	r3, [pc, #36]	@ (8004a50 <read_pixel_frame+0x214>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b08      	ldr	r3, [pc, #32]	@ (8004a50 <read_pixel_frame+0x214>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8004a36:	4b06      	ldr	r3, [pc, #24]	@ (8004a50 <read_pixel_frame+0x214>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	4b04      	ldr	r3, [pc, #16]	@ (8004a50 <read_pixel_frame+0x214>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a44:	601a      	str	r2, [r3, #0]

}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd90      	pop	{r4, r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	2001427c 	.word	0x2001427c
 8004a54:	200144c5 	.word	0x200144c5
 8004a58:	40020c00 	.word	0x40020c00

08004a5c <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	 * folosind DMA. Odata terminat transferul SPI prin DMA,
	 * aceasta functia de CallBack se va apela, setandu-ne un flag
	 * pentru a indica starea acestui transfer de date.
	 */

	if(hspi->Instance == SPI1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a05      	ldr	r2, [pc, #20]	@ (8004a80 <HAL_SPI_TxCpltCallback+0x24>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d102      	bne.n	8004a74 <HAL_SPI_TxCpltCallback+0x18>
	{
		flagDmaSpiTx = 1;
 8004a6e:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <HAL_SPI_TxCpltCallback+0x28>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	701a      	strb	r2, [r3, #0]
	}



}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	40013000 	.word	0x40013000
 8004a84:	200144c4 	.word	0x200144c4

08004a88 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	/*
	 * Functie de CallBack pentru terminarea receptiei datelor
	 * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	 */

	if(hspi->Instance == SPI1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a23      	ldr	r2, [pc, #140]	@ (8004b24 <HAL_SPI_RxCpltCallback+0x9c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d102      	bne.n	8004aa0 <HAL_SPI_RxCpltCallback+0x18>
	{
		/*
		 * SPI1 folosit pentru LCD
		 */

		flagDmaSpiRx = 1;
 8004a9a:	4b23      	ldr	r3, [pc, #140]	@ (8004b28 <HAL_SPI_RxCpltCallback+0xa0>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	701a      	strb	r2, [r3, #0]

	}


	if(hspi->Instance == SPI2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a21      	ldr	r2, [pc, #132]	@ (8004b2c <HAL_SPI_RxCpltCallback+0xa4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d137      	bne.n	8004b1a <HAL_SPI_RxCpltCallback+0x92>
	{
		/*
		 * Receptionare comenzi controller
		 */

		switch(dataController)
 8004aaa:	4b21      	ldr	r3, [pc, #132]	@ (8004b30 <HAL_SPI_RxCpltCallback+0xa8>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2bbb      	cmp	r3, #187	@ 0xbb
 8004ab0:	d026      	beq.n	8004b00 <HAL_SPI_RxCpltCallback+0x78>
 8004ab2:	2bbb      	cmp	r3, #187	@ 0xbb
 8004ab4:	dc28      	bgt.n	8004b08 <HAL_SPI_RxCpltCallback+0x80>
 8004ab6:	2b99      	cmp	r3, #153	@ 0x99
 8004ab8:	d01e      	beq.n	8004af8 <HAL_SPI_RxCpltCallback+0x70>
 8004aba:	2b99      	cmp	r3, #153	@ 0x99
 8004abc:	dc24      	bgt.n	8004b08 <HAL_SPI_RxCpltCallback+0x80>
 8004abe:	2b77      	cmp	r3, #119	@ 0x77
 8004ac0:	d016      	beq.n	8004af0 <HAL_SPI_RxCpltCallback+0x68>
 8004ac2:	2b77      	cmp	r3, #119	@ 0x77
 8004ac4:	dc20      	bgt.n	8004b08 <HAL_SPI_RxCpltCallback+0x80>
 8004ac6:	2b55      	cmp	r3, #85	@ 0x55
 8004ac8:	d00e      	beq.n	8004ae8 <HAL_SPI_RxCpltCallback+0x60>
 8004aca:	2b55      	cmp	r3, #85	@ 0x55
 8004acc:	dc1c      	bgt.n	8004b08 <HAL_SPI_RxCpltCallback+0x80>
 8004ace:	2b11      	cmp	r3, #17
 8004ad0:	d002      	beq.n	8004ad8 <HAL_SPI_RxCpltCallback+0x50>
 8004ad2:	2b33      	cmp	r3, #51	@ 0x33
 8004ad4:	d004      	beq.n	8004ae0 <HAL_SPI_RxCpltCallback+0x58>
 8004ad6:	e017      	b.n	8004b08 <HAL_SPI_RxCpltCallback+0x80>
		{
		  	case DxRight:
		  	  currentDx = DxRight;
 8004ad8:	4b16      	ldr	r3, [pc, #88]	@ (8004b34 <HAL_SPI_RxCpltCallback+0xac>)
 8004ada:	2211      	movs	r2, #17
 8004adc:	701a      	strb	r2, [r3, #0]
		  	  break;
 8004ade:	e017      	b.n	8004b10 <HAL_SPI_RxCpltCallback+0x88>
		  	case DxLeft:
		  	  currentDx = DxLeft;
 8004ae0:	4b14      	ldr	r3, [pc, #80]	@ (8004b34 <HAL_SPI_RxCpltCallback+0xac>)
 8004ae2:	2233      	movs	r2, #51	@ 0x33
 8004ae4:	701a      	strb	r2, [r3, #0]
		  	  break;
 8004ae6:	e013      	b.n	8004b10 <HAL_SPI_RxCpltCallback+0x88>
		  	case DxUp:
		  	  currentDx = DxUp;
 8004ae8:	4b12      	ldr	r3, [pc, #72]	@ (8004b34 <HAL_SPI_RxCpltCallback+0xac>)
 8004aea:	2255      	movs	r2, #85	@ 0x55
 8004aec:	701a      	strb	r2, [r3, #0]
		  	  break;
 8004aee:	e00f      	b.n	8004b10 <HAL_SPI_RxCpltCallback+0x88>
		  	case DxDown:
		  	  currentDx = DxDown;
 8004af0:	4b10      	ldr	r3, [pc, #64]	@ (8004b34 <HAL_SPI_RxCpltCallback+0xac>)
 8004af2:	2277      	movs	r2, #119	@ 0x77
 8004af4:	701a      	strb	r2, [r3, #0]
		  	  break;
 8004af6:	e00b      	b.n	8004b10 <HAL_SPI_RxCpltCallback+0x88>
		  	case DxStart:
		  	  currentDx = DxStart;
 8004af8:	4b0e      	ldr	r3, [pc, #56]	@ (8004b34 <HAL_SPI_RxCpltCallback+0xac>)
 8004afa:	2299      	movs	r2, #153	@ 0x99
 8004afc:	701a      	strb	r2, [r3, #0]
		  	  break;
 8004afe:	e007      	b.n	8004b10 <HAL_SPI_RxCpltCallback+0x88>
		  	case DxSelect:
		  	  currentDx = DxSelect;
 8004b00:	4b0c      	ldr	r3, [pc, #48]	@ (8004b34 <HAL_SPI_RxCpltCallback+0xac>)
 8004b02:	22bb      	movs	r2, #187	@ 0xbb
 8004b04:	701a      	strb	r2, [r3, #0]
		  	  break;
 8004b06:	e003      	b.n	8004b10 <HAL_SPI_RxCpltCallback+0x88>
		  	default:
		  	  currentDx = 0x00;
 8004b08:	4b0a      	ldr	r3, [pc, #40]	@ (8004b34 <HAL_SPI_RxCpltCallback+0xac>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	701a      	strb	r2, [r3, #0]
		  	  break;
 8004b0e:	bf00      	nop
		}

		/*Reinitializare intrerupere rcpt SPI2 intr Controller*/

		HAL_SPI_Receive_IT(&hspi2, &dataController, sizeof(dataController));
 8004b10:	2201      	movs	r2, #1
 8004b12:	4907      	ldr	r1, [pc, #28]	@ (8004b30 <HAL_SPI_RxCpltCallback+0xa8>)
 8004b14:	4808      	ldr	r0, [pc, #32]	@ (8004b38 <HAL_SPI_RxCpltCallback+0xb0>)
 8004b16:	f005 fa9b 	bl	800a050 <HAL_SPI_Receive_IT>

	}

}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	40013000 	.word	0x40013000
 8004b28:	200144c5 	.word	0x200144c5
 8004b2c:	40003800 	.word	0x40003800
 8004b30:	20000091 	.word	0x20000091
 8004b34:	20000092 	.word	0x20000092
 8004b38:	200142d4 	.word	0x200142d4

08004b3c <HAL_DAC_ConvHalfCpltCallbackCh1>:


void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
    /*
     * Functie de CallBack pentru finalizare 1/2 din transfer DMA pe DAC
     */

	flagDmaDAC = 1;
 8004b44:	4b04      	ldr	r3, [pc, #16]	@ (8004b58 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	701a      	strb	r2, [r3, #0]

}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	200144c6 	.word	0x200144c6

08004b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b5c:	b590      	push	{r4, r7, lr}
 8004b5e:	b093      	sub	sp, #76	@ 0x4c
 8004b60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b62:	f002 f82d 	bl	8006bc0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b66:	2200      	movs	r2, #0
 8004b68:	210f      	movs	r1, #15
 8004b6a:	f06f 0001 	mvn.w	r0, #1
 8004b6e:	f002 f998 	bl	8006ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM4_IRQn, 14, 0);
 8004b72:	2200      	movs	r2, #0
 8004b74:	210e      	movs	r1, #14
 8004b76:	201e      	movs	r0, #30
 8004b78:	f002 f993 	bl	8006ea2 <HAL_NVIC_SetPriority>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b7c:	f000 faec 	bl	8005158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b80:	f000 fd0a 	bl	8005598 <MX_GPIO_Init>
  MX_DMA_Init();
 8004b84:	f000 fcca 	bl	800551c <MX_DMA_Init>
  MX_SPI1_Init();
 8004b88:	f000 fb9a 	bl	80052c0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004b8c:	f000 fc9c 	bl	80054c8 <MX_USART1_UART_Init>
  MX_DAC_Init();
 8004b90:	f000 fb4c 	bl	800522c <MX_DAC_Init>
  MX_TIM2_Init();
 8004b94:	f000 fbfe 	bl	8005394 <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 8004b98:	f000 fb72 	bl	8005280 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8004b9c:	f008 fc90 	bl	800d4c0 <MX_FATFS_Init>
  MX_SPI2_Init();
 8004ba0:	f000 fbc4 	bl	800532c <MX_SPI2_Init>
  MX_TIM4_Init();
 8004ba4:	f000 fc42 	bl	800542c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 8004ba8:	f000 fd8c 	bl	80056c4 <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 8004bac:	f7ff fcf2 	bl	8004594 <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 8004bb0:	48dc      	ldr	r0, [pc, #880]	@ (8004f24 <main+0x3c8>)
 8004bb2:	f006 fba7 	bl	800b304 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8004bb6:	48dc      	ldr	r0, [pc, #880]	@ (8004f28 <main+0x3cc>)
 8004bb8:	f006 fc0c 	bl	800b3d4 <HAL_TIM_Base_Start_IT>
  HAL_SPI_Receive_IT(&hspi2, &dataController, sizeof(dataController)); /*Initializare SPI2 intr Controller*/
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	49db      	ldr	r1, [pc, #876]	@ (8004f2c <main+0x3d0>)
 8004bc0:	48db      	ldr	r0, [pc, #876]	@ (8004f30 <main+0x3d4>)
 8004bc2:	f005 fa45 	bl	800a050 <HAL_SPI_Receive_IT>

  main_app(); /*FSM principal al sistemului*/
 8004bc6:	f7fd fa1d 	bl	8002004 <main_app>

  fill_screen1(0xFFFF);
 8004bca:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004bce:	f7fe f8dd 	bl	8002d8c <fill_screen1>

  //fill_screen1(0xF100);
  //HAL_Delay(1000);
  //fill_screen2(0xF00F);
  //HAL_Delay(1000);
  fill_screen2(0xFFFF);
 8004bd2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004bd6:	f7fe f939 	bl	8002e4c <fill_screen2>
  //HAL_Delay(1000);

  unsigned int startTick = 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int endTick = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned int getTime = 0;
 8004be2:	2300      	movs	r3, #0
 8004be4:	633b      	str	r3, [r7, #48]	@ 0x30

  ENTITY entity;
  init_entity_sd(&entity);
 8004be6:	f107 0318 	add.w	r3, r7, #24
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe fc33 	bl	8003456 <init_entity_sd>

  /*Test SCALARE*/

  fill_screen2(0xFFFF);
 8004bf0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004bf4:	f7fe f92a 	bl	8002e4c <fill_screen2>

  BackGroundColor = 0xFFFF;
 8004bf8:	4bce      	ldr	r3, [pc, #824]	@ (8004f34 <main+0x3d8>)
 8004bfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bfe:	801a      	strh	r2, [r3, #0]


  entity.x0 = 100;
 8004c00:	2364      	movs	r3, #100	@ 0x64
 8004c02:	837b      	strh	r3, [r7, #26]
  entity.y0 = 100;
 8004c04:	2364      	movs	r3, #100	@ 0x64
 8004c06:	83bb      	strh	r3, [r7, #28]
  entity.id = 0;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	763b      	strb	r3, [r7, #24]
  assign_file_path_entity(&entity, "graphic/multi2.bin");
 8004c0c:	f107 0318 	add.w	r3, r7, #24
 8004c10:	49c9      	ldr	r1, [pc, #804]	@ (8004f38 <main+0x3dc>)
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fdd7 	bl	80057c6 <assign_file_path_entity>
  draw_entity(&entity);
 8004c18:	f107 0318 	add.w	r3, r7, #24
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe fc47 	bl	80034b0 <draw_entity>
  HAL_Delay(1000);
 8004c22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c26:	f002 f83d 	bl	8006ca4 <HAL_Delay>
  scaling_entity(&entity, 38);
 8004c2a:	f107 0318 	add.w	r3, r7, #24
 8004c2e:	ed9f 0ac3 	vldr	s0, [pc, #780]	@ 8004f3c <main+0x3e0>
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe ff52 	bl	8003adc <scaling_entity>
  erase_entity(entity);
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	f107 0318 	add.w	r3, r7, #24
 8004c40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c42:	f7ff f9c9 	bl	8003fd8 <erase_entity>
  draw_entity(&entity);
 8004c46:	f107 0318 	add.w	r3, r7, #24
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe fc30 	bl	80034b0 <draw_entity>
  HAL_Delay(1000);
 8004c50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c54:	f002 f826 	bl	8006ca4 <HAL_Delay>

  //--------------------------------------------

  HAL_Delay(1000);
 8004c58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004c5c:	f002 f822 	bl	8006ca4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8004c60:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004c64:	f7fe f8f2 	bl	8002e4c <fill_screen2>
  rotate_entity(&entity, 90);
 8004c68:	f107 0318 	add.w	r3, r7, #24
 8004c6c:	215a      	movs	r1, #90	@ 0x5a
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff f8b8 	bl	8003de4 <rotate_entity>
  HAL_Delay(5000);
 8004c74:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004c78:	f002 f814 	bl	8006ca4 <HAL_Delay>
  rotate_entity(&entity, 180);
 8004c7c:	f107 0318 	add.w	r3, r7, #24
 8004c80:	21b4      	movs	r1, #180	@ 0xb4
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff f8ae 	bl	8003de4 <rotate_entity>
  HAL_Delay(5000);
 8004c88:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004c8c:	f002 f80a 	bl	8006ca4 <HAL_Delay>
  rotate_entity(&entity, 270);
 8004c90:	f107 0318 	add.w	r3, r7, #24
 8004c94:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff f8a3 	bl	8003de4 <rotate_entity>
  HAL_Delay(5000);
 8004c9e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8004ca2:	f001 ffff 	bl	8006ca4 <HAL_Delay>

  //---------------------------------------------

  HAL_Delay(1000);
 8004ca6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004caa:	f001 fffb 	bl	8006ca4 <HAL_Delay>

  //fill_screen2(0xFFFF);
  draw_rectangle(entity.x0, entity.y0, entity.x1, entity.y1, BackGroundColor);
 8004cae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004cb2:	b298      	uxth	r0, r3
 8004cb4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004cb8:	b299      	uxth	r1, r3
 8004cba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004cc4:	b29c      	uxth	r4, r3
 8004cc6:	4b9b      	ldr	r3, [pc, #620]	@ (8004f34 <main+0x3d8>)
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	4623      	mov	r3, r4
 8004cce:	f7fe fb65 	bl	800339c <draw_rectangle>
  draw_entity(&entity);
 8004cd2:	f107 0318 	add.w	r3, r7, #24
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fbea 	bl	80034b0 <draw_entity>
  HAL_Delay(1000);
 8004cdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ce0:	f001 ffe0 	bl	8006ca4 <HAL_Delay>
  //fill_screen2(0xFFFF);
  scaling_entity(&entity, 0.5);
 8004ce4:	f107 0318 	add.w	r3, r7, #24
 8004ce8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7fe fef5 	bl	8003adc <scaling_entity>
  HAL_Delay(1000);
 8004cf2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004cf6:	f001 ffd5 	bl	8006ca4 <HAL_Delay>
  draw_rectangle(entity.x0, entity.y0, entity.x1, entity.y1, BackGroundColor);
 8004cfa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004cfe:	b298      	uxth	r0, r3
 8004d00:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004d04:	b299      	uxth	r1, r3
 8004d06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004d10:	b29c      	uxth	r4, r3
 8004d12:	4b88      	ldr	r3, [pc, #544]	@ (8004f34 <main+0x3d8>)
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	4623      	mov	r3, r4
 8004d1a:	f7fe fb3f 	bl	800339c <draw_rectangle>
  draw_entity(&entity);
 8004d1e:	f107 0318 	add.w	r3, r7, #24
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fe fbc4 	bl	80034b0 <draw_entity>
  HAL_Delay(1000);
 8004d28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d2c:	f001 ffba 	bl	8006ca4 <HAL_Delay>

  fill_screen2(0xFFFF);
 8004d30:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004d34:	f7fe f88a 	bl	8002e4c <fill_screen2>
  entity.x0 = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	837b      	strh	r3, [r7, #26]
  entity.y0 = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	83bb      	strh	r3, [r7, #28]
  assign_file_path_entity(&entity, "graphic/img9.bin");
 8004d40:	f107 0318 	add.w	r3, r7, #24
 8004d44:	497e      	ldr	r1, [pc, #504]	@ (8004f40 <main+0x3e4>)
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fd3d 	bl	80057c6 <assign_file_path_entity>
  draw_entity(&entity);
 8004d4c:	f107 0318 	add.w	r3, r7, #24
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fe fbad 	bl	80034b0 <draw_entity>
  HAL_Delay(1000);
 8004d56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d5a:	f001 ffa3 	bl	8006ca4 <HAL_Delay>
  fill_screen2(0xFFFF);
 8004d5e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004d62:	f7fe f873 	bl	8002e4c <fill_screen2>
  scaling_entity(&entity, 0.5);
 8004d66:	f107 0318 	add.w	r3, r7, #24
 8004d6a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe feb4 	bl	8003adc <scaling_entity>
  draw_entity(&entity);
 8004d74:	f107 0318 	add.w	r3, r7, #24
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fe fb99 	bl	80034b0 <draw_entity>
  HAL_Delay(1000);
 8004d7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004d82:	f001 ff8f 	bl	8006ca4 <HAL_Delay>
  scaling_entity(&entity, 2);
 8004d86:	f107 0318 	add.w	r3, r7, #24
 8004d8a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fe fea4 	bl	8003adc <scaling_entity>
  draw_entity(&entity);
 8004d94:	f107 0318 	add.w	r3, r7, #24
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fe fb89 	bl	80034b0 <draw_entity>
  HAL_Delay(1000);
 8004d9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004da2:	f001 ff7f 	bl	8006ca4 <HAL_Delay>

  //free(dataRec1);

  //Test image print from SD card
  ENTITY ent;
  ent.x0 = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	80fb      	strh	r3, [r7, #6]
  ent.y0 = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	813b      	strh	r3, [r7, #8]
  ent.id = 0x00;
 8004dae:	2300      	movs	r3, #0
 8004db0:	713b      	strb	r3, [r7, #4]
  init_entity_sd(&ent);
 8004db2:	1d3b      	adds	r3, r7, #4
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fe fb4e 	bl	8003456 <init_entity_sd>
  assign_file_path_entity(&ent, "graphic/img5.bin");
 8004dba:	1d3b      	adds	r3, r7, #4
 8004dbc:	4961      	ldr	r1, [pc, #388]	@ (8004f44 <main+0x3e8>)
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fd01 	bl	80057c6 <assign_file_path_entity>
  draw_entity(&ent);
 8004dc4:	1d3b      	adds	r3, r7, #4
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fe fb72 	bl	80034b0 <draw_entity>
  HAL_Delay(2000);
 8004dcc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004dd0:	f001 ff68 	bl	8006ca4 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img6.bin");
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	495c      	ldr	r1, [pc, #368]	@ (8004f48 <main+0x3ec>)
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 fcf4 	bl	80057c6 <assign_file_path_entity>
  draw_entity(&ent);
 8004dde:	1d3b      	adds	r3, r7, #4
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe fb65 	bl	80034b0 <draw_entity>
  HAL_Delay(2000);
 8004de6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004dea:	f001 ff5b 	bl	8006ca4 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img8.bin");
 8004dee:	1d3b      	adds	r3, r7, #4
 8004df0:	4956      	ldr	r1, [pc, #344]	@ (8004f4c <main+0x3f0>)
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fce7 	bl	80057c6 <assign_file_path_entity>
  draw_entity(&ent);
 8004df8:	1d3b      	adds	r3, r7, #4
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fe fb58 	bl	80034b0 <draw_entity>
  HAL_Delay(2000);
 8004e00:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004e04:	f001 ff4e 	bl	8006ca4 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img9.bin");
 8004e08:	1d3b      	adds	r3, r7, #4
 8004e0a:	494d      	ldr	r1, [pc, #308]	@ (8004f40 <main+0x3e4>)
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fcda 	bl	80057c6 <assign_file_path_entity>
  draw_entity(&ent);
 8004e12:	1d3b      	adds	r3, r7, #4
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7fe fb4b 	bl	80034b0 <draw_entity>
  HAL_Delay(2000);
 8004e1a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004e1e:	f001 ff41 	bl	8006ca4 <HAL_Delay>
  startTick = HAL_GetTick();
 8004e22:	f001 ff33 	bl	8006c8c <HAL_GetTick>
 8004e26:	63b8      	str	r0, [r7, #56]	@ 0x38
  assign_file_path_entity(&ent, "graphic/img92.bin");
 8004e28:	1d3b      	adds	r3, r7, #4
 8004e2a:	4949      	ldr	r1, [pc, #292]	@ (8004f50 <main+0x3f4>)
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fcca 	bl	80057c6 <assign_file_path_entity>
  draw_entity(&ent);
 8004e32:	1d3b      	adds	r3, r7, #4
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fe fb3b 	bl	80034b0 <draw_entity>
  endTick = HAL_GetTick();
 8004e3a:	f001 ff27 	bl	8006c8c <HAL_GetTick>
 8004e3e:	6378      	str	r0, [r7, #52]	@ 0x34
  getTime = endTick - startTick;
 8004e40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	633b      	str	r3, [r7, #48]	@ 0x30

  fill_screen2(0x0000);
 8004e48:	2000      	movs	r0, #0
 8004e4a:	f7fd ffff 	bl	8002e4c <fill_screen2>
  assign_file_path_entity(&ent, "graphic/pixel1.bin");
 8004e4e:	1d3b      	adds	r3, r7, #4
 8004e50:	4940      	ldr	r1, [pc, #256]	@ (8004f54 <main+0x3f8>)
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fcb7 	bl	80057c6 <assign_file_path_entity>
  draw_entity(&ent);
 8004e58:	1d3b      	adds	r3, r7, #4
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fe fb28 	bl	80034b0 <draw_entity>
  HAL_Delay(3000);
 8004e60:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8004e64:	f001 ff1e 	bl	8006ca4 <HAL_Delay>

  //Test translation

  //ENTITY entity;

  free_entity_sd(&entity);
 8004e68:	f107 0318 	add.w	r3, r7, #24
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fe fb0d 	bl	800348c <free_entity_sd>

  entity.x0 = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	837b      	strh	r3, [r7, #26]
  entity.y0 = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	83bb      	strh	r3, [r7, #28]
  entity.x1 = 64;
 8004e7a:	2340      	movs	r3, #64	@ 0x40
 8004e7c:	83fb      	strh	r3, [r7, #30]
  entity.y1 = 64;
 8004e7e:	2340      	movs	r3, #64	@ 0x40
 8004e80:	843b      	strh	r3, [r7, #32]
  entity.id = 0x80;
 8004e82:	2380      	movs	r3, #128	@ 0x80
 8004e84:	763b      	strb	r3, [r7, #24]
  entity.ST.color = 0xF100;
 8004e86:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8004e8a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  //draw_entity(&entity,NULL);

  translation_test(&entity, 1, 0);
 8004e8c:	f107 0318 	add.w	r3, r7, #24
 8004e90:	2200      	movs	r2, #0
 8004e92:	2101      	movs	r1, #1
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7fe fd4d 	bl	8003934 <translation_test>

  HAL_Delay(500);
 8004e9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004e9e:	f001 ff01 	bl	8006ca4 <HAL_Delay>
  translation_entity(&entity, entity.x0+100, entity.y0+100, 0);//, 0xF100);
 8004ea2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3364      	adds	r3, #100	@ 0x64
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	b219      	sxth	r1, r3
 8004eae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3364      	adds	r3, #100	@ 0x64
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	b21a      	sxth	r2, r3
 8004eba:	f107 0018 	add.w	r0, r7, #24
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f7fe fc02 	bl	80036c8 <translation_entity>
  HAL_Delay(2000);
 8004ec4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004ec8:	f001 feec 	bl	8006ca4 <HAL_Delay>
  translation_entity(&entity, entity.x0+32, entity.y0+32, 0);//, 0xF100);
 8004ecc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3320      	adds	r3, #32
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	b219      	sxth	r1, r3
 8004ed8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3320      	adds	r3, #32
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	b21a      	sxth	r2, r3
 8004ee4:	f107 0018 	add.w	r0, r7, #24
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f7fe fbed 	bl	80036c8 <translation_entity>
  HAL_Delay(500);
 8004eee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004ef2:	f001 fed7 	bl	8006ca4 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0+32, 0);//, 0xF100);
 8004ef6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	330c      	adds	r3, #12
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	b219      	sxth	r1, r3
 8004f02:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3320      	adds	r3, #32
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	b21a      	sxth	r2, r3
 8004f0e:	f107 0018 	add.w	r0, r7, #24
 8004f12:	2300      	movs	r3, #0
 8004f14:	f7fe fbd8 	bl	80036c8 <translation_entity>
  HAL_Delay(500);
 8004f18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004f1c:	f001 fec2 	bl	8006ca4 <HAL_Delay>
 8004f20:	e01a      	b.n	8004f58 <main+0x3fc>
 8004f22:	bf00      	nop
 8004f24:	200143ec 	.word	0x200143ec
 8004f28:	20014434 	.word	0x20014434
 8004f2c:	20000091 	.word	0x20000091
 8004f30:	200142d4 	.word	0x200142d4
 8004f34:	20000008 	.word	0x20000008
 8004f38:	08010b70 	.word	0x08010b70
 8004f3c:	42180000 	.word	0x42180000
 8004f40:	08010b84 	.word	0x08010b84
 8004f44:	08010b98 	.word	0x08010b98
 8004f48:	08010bac 	.word	0x08010bac
 8004f4c:	08010bc0 	.word	0x08010bc0
 8004f50:	08010bd4 	.word	0x08010bd4
 8004f54:	08010be8 	.word	0x08010be8
  translation_entity(&entity, entity.x0+12, entity.y0, 0);//, 0xF100);
 8004f58:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	330c      	adds	r3, #12
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	b219      	sxth	r1, r3
 8004f64:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004f68:	f107 0018 	add.w	r0, r7, #24
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f7fe fbab 	bl	80036c8 <translation_entity>
  HAL_Delay(500);
 8004f72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004f76:	f001 fe95 	bl	8006ca4 <HAL_Delay>

  //Test_SD_Card();

  //play_audio_file("audio/mine.txt"); //doremi mine songita song22

  fill_screen2(0xF100);
 8004f7a:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8004f7e:	f7fd ff65 	bl	8002e4c <fill_screen2>
  //startTick = HAL_GetTick();
  //read_audio_file("audio/random.txt", sampleData);
  //endTick = HAL_GetTick();
  //getTime = endTick - startTick;

  HAL_Delay(100);
 8004f82:	2064      	movs	r0, #100	@ 0x64
 8004f84:	f001 fe8e 	bl	8006ca4 <HAL_Delay>


  for(uint8_t i=0;i<100;i++)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004f8e:	e059      	b.n	8005044 <main+0x4e8>
  {
	  for(uint8_t j=0; j<100;j++)
 8004f90:	2300      	movs	r3, #0
 8004f92:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8004f96:	e04c      	b.n	8005032 <main+0x4d6>
	  {

		  if(i==j)
 8004f98:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8004f9c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d10b      	bne.n	8004fbc <main+0x460>
		  {
			  draw_pixel(i,j,0xF100);
 8004fa4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8004fae:	b291      	uxth	r1, r2
 8004fb0:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fd fe91 	bl	8002cdc <draw_pixel>
			  continue;
 8004fba:	e035      	b.n	8005028 <main+0x4cc>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 8004fbc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004fc0:	2b50      	cmp	r3, #80	@ 0x50
 8004fc2:	d103      	bne.n	8004fcc <main+0x470>
 8004fc4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004fc8:	2b14      	cmp	r3, #20
 8004fca:	d017      	beq.n	8004ffc <main+0x4a0>
 8004fcc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004fd0:	2b50      	cmp	r3, #80	@ 0x50
 8004fd2:	d103      	bne.n	8004fdc <main+0x480>
 8004fd4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004fd8:	2b13      	cmp	r3, #19
 8004fda:	d00f      	beq.n	8004ffc <main+0x4a0>
 8004fdc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004fe0:	2b51      	cmp	r3, #81	@ 0x51
 8004fe2:	d103      	bne.n	8004fec <main+0x490>
 8004fe4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004fe8:	2b14      	cmp	r3, #20
 8004fea:	d007      	beq.n	8004ffc <main+0x4a0>
 8004fec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004ff0:	2b51      	cmp	r3, #81	@ 0x51
 8004ff2:	d10e      	bne.n	8005012 <main+0x4b6>
 8004ff4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004ff8:	2b13      	cmp	r3, #19
 8004ffa:	d10a      	bne.n	8005012 <main+0x4b6>
		  {
			  draw_pixel(i,j,0x001F);
 8004ffc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005000:	b29b      	uxth	r3, r3
 8005002:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8005006:	b291      	uxth	r1, r2
 8005008:	221f      	movs	r2, #31
 800500a:	4618      	mov	r0, r3
 800500c:	f7fd fe66 	bl	8002cdc <draw_pixel>
			  continue;
 8005010:	e00a      	b.n	8005028 <main+0x4cc>
		  }


		  draw_pixel(i,j,0xFFFF);
 8005012:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005016:	b29b      	uxth	r3, r3
 8005018:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800501c:	b291      	uxth	r1, r2
 800501e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005022:	4618      	mov	r0, r3
 8005024:	f7fd fe5a 	bl	8002cdc <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 8005028:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800502c:	3301      	adds	r3, #1
 800502e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8005032:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005036:	2b63      	cmp	r3, #99	@ 0x63
 8005038:	d9ae      	bls.n	8004f98 <main+0x43c>
  for(uint8_t i=0;i<100;i++)
 800503a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800503e:	3301      	adds	r3, #1
 8005040:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8005044:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005048:	2b63      	cmp	r3, #99	@ 0x63
 800504a:	d9a1      	bls.n	8004f90 <main+0x434>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 800504c:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8005050:	f7fd fefc 	bl	8002e4c <fill_screen2>
  HAL_Delay(1000);
 8005054:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005058:	f001 fe24 	bl	8006ca4 <HAL_Delay>
  fill_screen2(0xF150);
 800505c:	f24f 1050 	movw	r0, #61776	@ 0xf150
 8005060:	f7fd fef4 	bl	8002e4c <fill_screen2>
  HAL_Delay(1000);
 8005064:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005068:	f001 fe1c 	bl	8006ca4 <HAL_Delay>
  fill_screen2(0xF111);
 800506c:	f24f 1011 	movw	r0, #61713	@ 0xf111
 8005070:	f7fd feec 	bl	8002e4c <fill_screen2>
  HAL_Delay(1000);
 8005074:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005078:	f001 fe14 	bl	8006ca4 <HAL_Delay>
  fill_screen2(0xF10F);
 800507c:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 8005080:	f7fd fee4 	bl	8002e4c <fill_screen2>
  HAL_Delay(1000);
 8005084:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005088:	f001 fe0c 	bl	8006ca4 <HAL_Delay>
  fill_screen2(0xFFFF);
 800508c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8005090:	f7fd fedc 	bl	8002e4c <fill_screen2>
  HAL_Delay(1000);
 8005094:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005098:	f001 fe04 	bl	8006ca4 <HAL_Delay>
  fill_screen2(0xFFFF);
 800509c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80050a0:	f7fd fed4 	bl	8002e4c <fill_screen2>

  print_string(36, 200, "Licenta 2025", 0x1F00, 0x001F);
 80050a4:	231f      	movs	r3, #31
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80050ac:	4a26      	ldr	r2, [pc, #152]	@ (8005148 <main+0x5ec>)
 80050ae:	21c8      	movs	r1, #200	@ 0xc8
 80050b0:	2024      	movs	r0, #36	@ 0x24
 80050b2:	f7fe f827 	bl	8003104 <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 80050b6:	4b25      	ldr	r3, [pc, #148]	@ (800514c <main+0x5f0>)
 80050b8:	603b      	str	r3, [r7, #0]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 80050ba:	463b      	mov	r3, r7
 80050bc:	2204      	movs	r2, #4
 80050be:	4619      	mov	r1, r3
 80050c0:	4823      	ldr	r0, [pc, #140]	@ (8005150 <main+0x5f4>)
 80050c2:	f005 f8eb 	bl	800a29c <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 80050c6:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80050ca:	2250      	movs	r2, #80	@ 0x50
 80050cc:	2114      	movs	r1, #20
 80050ce:	2014      	movs	r0, #20
 80050d0:	f7fe f85a 	bl	8003188 <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 80050d4:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80050d8:	2250      	movs	r2, #80	@ 0x50
 80050da:	2114      	movs	r1, #20
 80050dc:	2014      	movs	r0, #20
 80050de:	f7fe f88e 	bl	80031fe <draw_vertical_line>

  flagDmaSpiTx = 0;
 80050e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005154 <main+0x5f8>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 80050e8:	221f      	movs	r2, #31
 80050ea:	2100      	movs	r1, #0
 80050ec:	2000      	movs	r0, #0
 80050ee:	f7fd fdf5 	bl	8002cdc <draw_pixel>
  draw_pixel(1,0,0xF800);
 80050f2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80050f6:	2100      	movs	r1, #0
 80050f8:	2001      	movs	r0, #1
 80050fa:	f7fd fdef 	bl	8002cdc <draw_pixel>
  draw_pixel(0,1,0x001F);
 80050fe:	221f      	movs	r2, #31
 8005100:	2101      	movs	r1, #1
 8005102:	2000      	movs	r0, #0
 8005104:	f7fd fdea 	bl	8002cdc <draw_pixel>
  draw_pixel(1,1,0xF800);
 8005108:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800510c:	2101      	movs	r1, #1
 800510e:	2001      	movs	r0, #1
 8005110:	f7fd fde4 	bl	8002cdc <draw_pixel>

  HAL_Delay(50);
 8005114:	2032      	movs	r0, #50	@ 0x32
 8005116:	f001 fdc5 	bl	8006ca4 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 800511a:	2001      	movs	r0, #1
 800511c:	f00b fa6c 	bl	80105f8 <malloc>
 8005120:	4603      	mov	r3, r0
 8005122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 8005124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	2302      	movs	r3, #2
 800512a:	2202      	movs	r2, #2
 800512c:	2100      	movs	r1, #0
 800512e:	2000      	movs	r0, #0
 8005130:	f7ff fb84 	bl	800483c <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 8005134:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005136:	f00b fa67 	bl	8010608 <free>

  HAL_Delay(3000);
 800513a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800513e:	f001 fdb1 	bl	8006ca4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005142:	bf00      	nop
 8005144:	e7fd      	b.n	8005142 <main+0x5e6>
 8005146:	bf00      	nop
 8005148:	08010bfc 	.word	0x08010bfc
 800514c:	04030201 	.word	0x04030201
 8005150:	2001427c 	.word	0x2001427c
 8005154:	200144c4 	.word	0x200144c4

08005158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b094      	sub	sp, #80	@ 0x50
 800515c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800515e:	f107 0320 	add.w	r3, r7, #32
 8005162:	2230      	movs	r2, #48	@ 0x30
 8005164:	2100      	movs	r1, #0
 8005166:	4618      	mov	r0, r3
 8005168:	f00b fb3a 	bl	80107e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800516c:	f107 030c 	add.w	r3, r7, #12
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	60da      	str	r2, [r3, #12]
 800517a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800517c:	2300      	movs	r3, #0
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	4b28      	ldr	r3, [pc, #160]	@ (8005224 <SystemClock_Config+0xcc>)
 8005182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005184:	4a27      	ldr	r2, [pc, #156]	@ (8005224 <SystemClock_Config+0xcc>)
 8005186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800518a:	6413      	str	r3, [r2, #64]	@ 0x40
 800518c:	4b25      	ldr	r3, [pc, #148]	@ (8005224 <SystemClock_Config+0xcc>)
 800518e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005194:	60bb      	str	r3, [r7, #8]
 8005196:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005198:	2300      	movs	r3, #0
 800519a:	607b      	str	r3, [r7, #4]
 800519c:	4b22      	ldr	r3, [pc, #136]	@ (8005228 <SystemClock_Config+0xd0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a21      	ldr	r2, [pc, #132]	@ (8005228 <SystemClock_Config+0xd0>)
 80051a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051a6:	6013      	str	r3, [r2, #0]
 80051a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005228 <SystemClock_Config+0xd0>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051b0:	607b      	str	r3, [r7, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80051b4:	2301      	movs	r3, #1
 80051b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80051b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80051bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051be:	2302      	movs	r3, #2
 80051c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80051c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80051c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80051c8:	2304      	movs	r3, #4
 80051ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80051cc:	23a8      	movs	r3, #168	@ 0xa8
 80051ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80051d0:	2302      	movs	r3, #2
 80051d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80051d4:	2307      	movs	r3, #7
 80051d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051d8:	f107 0320 	add.w	r3, r7, #32
 80051dc:	4618      	mov	r0, r3
 80051de:	f002 fe77 	bl	8007ed0 <HAL_RCC_OscConfig>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80051e8:	f000 fa66 	bl	80056b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051ec:	230f      	movs	r3, #15
 80051ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051f0:	2302      	movs	r3, #2
 80051f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80051f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80051fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80051fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005202:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005204:	f107 030c 	add.w	r3, r7, #12
 8005208:	2105      	movs	r1, #5
 800520a:	4618      	mov	r0, r3
 800520c:	f003 f8d8 	bl	80083c0 <HAL_RCC_ClockConfig>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005216:	f000 fa4f 	bl	80056b8 <Error_Handler>
  }
}
 800521a:	bf00      	nop
 800521c:	3750      	adds	r7, #80	@ 0x50
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40023800 	.word	0x40023800
 8005228:	40007000 	.word	0x40007000

0800522c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8005232:	463b      	mov	r3, r7
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800523a:	4b0f      	ldr	r3, [pc, #60]	@ (8005278 <MX_DAC_Init+0x4c>)
 800523c:	4a0f      	ldr	r2, [pc, #60]	@ (800527c <MX_DAC_Init+0x50>)
 800523e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8005240:	480d      	ldr	r0, [pc, #52]	@ (8005278 <MX_DAC_Init+0x4c>)
 8005242:	f001 fe64 	bl	8006f0e <HAL_DAC_Init>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800524c:	f000 fa34 	bl	80056b8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8005250:	2324      	movs	r3, #36	@ 0x24
 8005252:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005254:	2300      	movs	r3, #0
 8005256:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005258:	463b      	mov	r3, r7
 800525a:	2200      	movs	r2, #0
 800525c:	4619      	mov	r1, r3
 800525e:	4806      	ldr	r0, [pc, #24]	@ (8005278 <MX_DAC_Init+0x4c>)
 8005260:	f001 ff9b 	bl	800719a <HAL_DAC_ConfigChannel>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800526a:	f000 fa25 	bl	80056b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800526e:	bf00      	nop
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20014184 	.word	0x20014184
 800527c:	40007400 	.word	0x40007400

08005280 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005284:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <MX_SDIO_SD_Init+0x38>)
 8005286:	4a0d      	ldr	r2, [pc, #52]	@ (80052bc <MX_SDIO_SD_Init+0x3c>)
 8005288:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800528a:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <MX_SDIO_SD_Init+0x38>)
 800528c:	2200      	movs	r2, #0
 800528e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005290:	4b09      	ldr	r3, [pc, #36]	@ (80052b8 <MX_SDIO_SD_Init+0x38>)
 8005292:	2200      	movs	r2, #0
 8005294:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005296:	4b08      	ldr	r3, [pc, #32]	@ (80052b8 <MX_SDIO_SD_Init+0x38>)
 8005298:	2200      	movs	r2, #0
 800529a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800529c:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <MX_SDIO_SD_Init+0x38>)
 800529e:	2200      	movs	r2, #0
 80052a0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80052a2:	4b05      	ldr	r3, [pc, #20]	@ (80052b8 <MX_SDIO_SD_Init+0x38>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 80052a8:	4b03      	ldr	r3, [pc, #12]	@ (80052b8 <MX_SDIO_SD_Init+0x38>)
 80052aa:	2208      	movs	r2, #8
 80052ac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80052ae:	bf00      	nop
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	200141f8 	.word	0x200141f8
 80052bc:	40012c00 	.word	0x40012c00

080052c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80052c4:	4b17      	ldr	r3, [pc, #92]	@ (8005324 <MX_SPI1_Init+0x64>)
 80052c6:	4a18      	ldr	r2, [pc, #96]	@ (8005328 <MX_SPI1_Init+0x68>)
 80052c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80052ca:	4b16      	ldr	r3, [pc, #88]	@ (8005324 <MX_SPI1_Init+0x64>)
 80052cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80052d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80052d2:	4b14      	ldr	r3, [pc, #80]	@ (8005324 <MX_SPI1_Init+0x64>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80052d8:	4b12      	ldr	r3, [pc, #72]	@ (8005324 <MX_SPI1_Init+0x64>)
 80052da:	2200      	movs	r2, #0
 80052dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052de:	4b11      	ldr	r3, [pc, #68]	@ (8005324 <MX_SPI1_Init+0x64>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005324 <MX_SPI1_Init+0x64>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80052ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005324 <MX_SPI1_Init+0x64>)
 80052ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005324 <MX_SPI1_Init+0x64>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005324 <MX_SPI1_Init+0x64>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80052fe:	4b09      	ldr	r3, [pc, #36]	@ (8005324 <MX_SPI1_Init+0x64>)
 8005300:	2200      	movs	r2, #0
 8005302:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005304:	4b07      	ldr	r3, [pc, #28]	@ (8005324 <MX_SPI1_Init+0x64>)
 8005306:	2200      	movs	r2, #0
 8005308:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800530a:	4b06      	ldr	r3, [pc, #24]	@ (8005324 <MX_SPI1_Init+0x64>)
 800530c:	220a      	movs	r2, #10
 800530e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005310:	4804      	ldr	r0, [pc, #16]	@ (8005324 <MX_SPI1_Init+0x64>)
 8005312:	f004 fa0d 	bl	8009730 <HAL_SPI_Init>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800531c:	f000 f9cc 	bl	80056b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005320:	bf00      	nop
 8005322:	bd80      	pop	{r7, pc}
 8005324:	2001427c 	.word	0x2001427c
 8005328:	40013000 	.word	0x40013000

0800532c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005330:	4b16      	ldr	r3, [pc, #88]	@ (800538c <MX_SPI2_Init+0x60>)
 8005332:	4a17      	ldr	r2, [pc, #92]	@ (8005390 <MX_SPI2_Init+0x64>)
 8005334:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8005336:	4b15      	ldr	r3, [pc, #84]	@ (800538c <MX_SPI2_Init+0x60>)
 8005338:	2200      	movs	r2, #0
 800533a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800533c:	4b13      	ldr	r3, [pc, #76]	@ (800538c <MX_SPI2_Init+0x60>)
 800533e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005342:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005344:	4b11      	ldr	r3, [pc, #68]	@ (800538c <MX_SPI2_Init+0x60>)
 8005346:	2200      	movs	r2, #0
 8005348:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800534a:	4b10      	ldr	r3, [pc, #64]	@ (800538c <MX_SPI2_Init+0x60>)
 800534c:	2200      	movs	r2, #0
 800534e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005350:	4b0e      	ldr	r3, [pc, #56]	@ (800538c <MX_SPI2_Init+0x60>)
 8005352:	2200      	movs	r2, #0
 8005354:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005356:	4b0d      	ldr	r3, [pc, #52]	@ (800538c <MX_SPI2_Init+0x60>)
 8005358:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800535c:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800535e:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <MX_SPI2_Init+0x60>)
 8005360:	2200      	movs	r2, #0
 8005362:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005364:	4b09      	ldr	r3, [pc, #36]	@ (800538c <MX_SPI2_Init+0x60>)
 8005366:	2200      	movs	r2, #0
 8005368:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800536a:	4b08      	ldr	r3, [pc, #32]	@ (800538c <MX_SPI2_Init+0x60>)
 800536c:	2200      	movs	r2, #0
 800536e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005370:	4b06      	ldr	r3, [pc, #24]	@ (800538c <MX_SPI2_Init+0x60>)
 8005372:	220a      	movs	r2, #10
 8005374:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005376:	4805      	ldr	r0, [pc, #20]	@ (800538c <MX_SPI2_Init+0x60>)
 8005378:	f004 f9da 	bl	8009730 <HAL_SPI_Init>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8005382:	f000 f999 	bl	80056b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005386:	bf00      	nop
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	200142d4 	.word	0x200142d4
 8005390:	40003800 	.word	0x40003800

08005394 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800539a:	f107 0308 	add.w	r3, r7, #8
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	605a      	str	r2, [r3, #4]
 80053a4:	609a      	str	r2, [r3, #8]
 80053a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053a8:	463b      	mov	r3, r7
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80053b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80053b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;
 80053b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053ba:	2229      	movs	r2, #41	@ 0x29
 80053bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053be:	4b1a      	ldr	r3, [pc, #104]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 27;
 80053c4:	4b18      	ldr	r3, [pc, #96]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053c6:	221b      	movs	r2, #27
 80053c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053ca:	4b17      	ldr	r3, [pc, #92]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053d0:	4b15      	ldr	r3, [pc, #84]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80053d6:	4814      	ldr	r0, [pc, #80]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053d8:	f005 ff45 	bl	800b266 <HAL_TIM_Base_Init>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80053e2:	f000 f969 	bl	80056b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80053ec:	f107 0308 	add.w	r3, r7, #8
 80053f0:	4619      	mov	r1, r3
 80053f2:	480d      	ldr	r0, [pc, #52]	@ (8005428 <MX_TIM2_Init+0x94>)
 80053f4:	f006 f94e 	bl	800b694 <HAL_TIM_ConfigClockSource>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80053fe:	f000 f95b 	bl	80056b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005402:	2320      	movs	r3, #32
 8005404:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005406:	2300      	movs	r3, #0
 8005408:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800540a:	463b      	mov	r3, r7
 800540c:	4619      	mov	r1, r3
 800540e:	4806      	ldr	r0, [pc, #24]	@ (8005428 <MX_TIM2_Init+0x94>)
 8005410:	f006 fb76 	bl	800bb00 <HAL_TIMEx_MasterConfigSynchronization>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800541a:	f000 f94d 	bl	80056b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800541e:	bf00      	nop
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	200143ec 	.word	0x200143ec

0800542c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005432:	f107 0308 	add.w	r3, r7, #8
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	605a      	str	r2, [r3, #4]
 800543c:	609a      	str	r2, [r3, #8]
 800543e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005440:	463b      	mov	r3, r7
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005448:	4b1d      	ldr	r3, [pc, #116]	@ (80054c0 <MX_TIM4_Init+0x94>)
 800544a:	4a1e      	ldr	r2, [pc, #120]	@ (80054c4 <MX_TIM4_Init+0x98>)
 800544c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 800544e:	4b1c      	ldr	r3, [pc, #112]	@ (80054c0 <MX_TIM4_Init+0x94>)
 8005450:	2254      	movs	r2, #84	@ 0x54
 8005452:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005454:	4b1a      	ldr	r3, [pc, #104]	@ (80054c0 <MX_TIM4_Init+0x94>)
 8005456:	2200      	movs	r2, #0
 8005458:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800545a:	4b19      	ldr	r3, [pc, #100]	@ (80054c0 <MX_TIM4_Init+0x94>)
 800545c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005460:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005462:	4b17      	ldr	r3, [pc, #92]	@ (80054c0 <MX_TIM4_Init+0x94>)
 8005464:	2200      	movs	r2, #0
 8005466:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005468:	4b15      	ldr	r3, [pc, #84]	@ (80054c0 <MX_TIM4_Init+0x94>)
 800546a:	2200      	movs	r2, #0
 800546c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800546e:	4814      	ldr	r0, [pc, #80]	@ (80054c0 <MX_TIM4_Init+0x94>)
 8005470:	f005 fef9 	bl	800b266 <HAL_TIM_Base_Init>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800547a:	f000 f91d 	bl	80056b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800547e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005482:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005484:	f107 0308 	add.w	r3, r7, #8
 8005488:	4619      	mov	r1, r3
 800548a:	480d      	ldr	r0, [pc, #52]	@ (80054c0 <MX_TIM4_Init+0x94>)
 800548c:	f006 f902 	bl	800b694 <HAL_TIM_ConfigClockSource>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8005496:	f000 f90f 	bl	80056b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800549a:	2300      	movs	r3, #0
 800549c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800549e:	2300      	movs	r3, #0
 80054a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80054a2:	463b      	mov	r3, r7
 80054a4:	4619      	mov	r1, r3
 80054a6:	4806      	ldr	r0, [pc, #24]	@ (80054c0 <MX_TIM4_Init+0x94>)
 80054a8:	f006 fb2a 	bl	800bb00 <HAL_TIMEx_MasterConfigSynchronization>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80054b2:	f000 f901 	bl	80056b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80054b6:	bf00      	nop
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20014434 	.word	0x20014434
 80054c4:	40000800 	.word	0x40000800

080054c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80054cc:	4b11      	ldr	r3, [pc, #68]	@ (8005514 <MX_USART1_UART_Init+0x4c>)
 80054ce:	4a12      	ldr	r2, [pc, #72]	@ (8005518 <MX_USART1_UART_Init+0x50>)
 80054d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80054d2:	4b10      	ldr	r3, [pc, #64]	@ (8005514 <MX_USART1_UART_Init+0x4c>)
 80054d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80054d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80054da:	4b0e      	ldr	r3, [pc, #56]	@ (8005514 <MX_USART1_UART_Init+0x4c>)
 80054dc:	2200      	movs	r2, #0
 80054de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80054e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005514 <MX_USART1_UART_Init+0x4c>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80054e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005514 <MX_USART1_UART_Init+0x4c>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80054ec:	4b09      	ldr	r3, [pc, #36]	@ (8005514 <MX_USART1_UART_Init+0x4c>)
 80054ee:	220c      	movs	r2, #12
 80054f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054f2:	4b08      	ldr	r3, [pc, #32]	@ (8005514 <MX_USART1_UART_Init+0x4c>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054f8:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <MX_USART1_UART_Init+0x4c>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80054fe:	4805      	ldr	r0, [pc, #20]	@ (8005514 <MX_USART1_UART_Init+0x4c>)
 8005500:	f006 fb8e 	bl	800bc20 <HAL_UART_Init>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800550a:	f000 f8d5 	bl	80056b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800550e:	bf00      	nop
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	2001447c 	.word	0x2001447c
 8005518:	40011000 	.word	0x40011000

0800551c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005522:	2300      	movs	r3, #0
 8005524:	607b      	str	r3, [r7, #4]
 8005526:	4b1b      	ldr	r3, [pc, #108]	@ (8005594 <MX_DMA_Init+0x78>)
 8005528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552a:	4a1a      	ldr	r2, [pc, #104]	@ (8005594 <MX_DMA_Init+0x78>)
 800552c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005530:	6313      	str	r3, [r2, #48]	@ 0x30
 8005532:	4b18      	ldr	r3, [pc, #96]	@ (8005594 <MX_DMA_Init+0x78>)
 8005534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800553a:	607b      	str	r3, [r7, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800553e:	2300      	movs	r3, #0
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	4b14      	ldr	r3, [pc, #80]	@ (8005594 <MX_DMA_Init+0x78>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005546:	4a13      	ldr	r2, [pc, #76]	@ (8005594 <MX_DMA_Init+0x78>)
 8005548:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800554c:	6313      	str	r3, [r2, #48]	@ 0x30
 800554e:	4b11      	ldr	r3, [pc, #68]	@ (8005594 <MX_DMA_Init+0x78>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005552:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800555a:	2200      	movs	r2, #0
 800555c:	2100      	movs	r1, #0
 800555e:	2010      	movs	r0, #16
 8005560:	f001 fc9f 	bl	8006ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005564:	2010      	movs	r0, #16
 8005566:	f001 fcb8 	bl	8006eda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800556a:	2200      	movs	r2, #0
 800556c:	2100      	movs	r1, #0
 800556e:	2038      	movs	r0, #56	@ 0x38
 8005570:	f001 fc97 	bl	8006ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005574:	2038      	movs	r0, #56	@ 0x38
 8005576:	f001 fcb0 	bl	8006eda <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800557a:	2200      	movs	r2, #0
 800557c:	2100      	movs	r1, #0
 800557e:	203b      	movs	r0, #59	@ 0x3b
 8005580:	f001 fc8f 	bl	8006ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005584:	203b      	movs	r0, #59	@ 0x3b
 8005586:	f001 fca8 	bl	8006eda <HAL_NVIC_EnableIRQ>

}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40023800 	.word	0x40023800

08005598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08c      	sub	sp, #48	@ 0x30
 800559c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800559e:	f107 031c 	add.w	r3, r7, #28
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	605a      	str	r2, [r3, #4]
 80055a8:	609a      	str	r2, [r3, #8]
 80055aa:	60da      	str	r2, [r3, #12]
 80055ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	4b3e      	ldr	r3, [pc, #248]	@ (80056ac <MX_GPIO_Init+0x114>)
 80055b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b6:	4a3d      	ldr	r2, [pc, #244]	@ (80056ac <MX_GPIO_Init+0x114>)
 80055b8:	f043 0310 	orr.w	r3, r3, #16
 80055bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80055be:	4b3b      	ldr	r3, [pc, #236]	@ (80056ac <MX_GPIO_Init+0x114>)
 80055c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	61bb      	str	r3, [r7, #24]
 80055c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	4b37      	ldr	r3, [pc, #220]	@ (80056ac <MX_GPIO_Init+0x114>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d2:	4a36      	ldr	r2, [pc, #216]	@ (80056ac <MX_GPIO_Init+0x114>)
 80055d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80055da:	4b34      	ldr	r3, [pc, #208]	@ (80056ac <MX_GPIO_Init+0x114>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80055e6:	2300      	movs	r3, #0
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	4b30      	ldr	r3, [pc, #192]	@ (80056ac <MX_GPIO_Init+0x114>)
 80055ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ee:	4a2f      	ldr	r2, [pc, #188]	@ (80056ac <MX_GPIO_Init+0x114>)
 80055f0:	f043 0304 	orr.w	r3, r3, #4
 80055f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80055f6:	4b2d      	ldr	r3, [pc, #180]	@ (80056ac <MX_GPIO_Init+0x114>)
 80055f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	4b29      	ldr	r3, [pc, #164]	@ (80056ac <MX_GPIO_Init+0x114>)
 8005608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560a:	4a28      	ldr	r2, [pc, #160]	@ (80056ac <MX_GPIO_Init+0x114>)
 800560c:	f043 0301 	orr.w	r3, r3, #1
 8005610:	6313      	str	r3, [r2, #48]	@ 0x30
 8005612:	4b26      	ldr	r3, [pc, #152]	@ (80056ac <MX_GPIO_Init+0x114>)
 8005614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	4b22      	ldr	r3, [pc, #136]	@ (80056ac <MX_GPIO_Init+0x114>)
 8005624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005626:	4a21      	ldr	r2, [pc, #132]	@ (80056ac <MX_GPIO_Init+0x114>)
 8005628:	f043 0302 	orr.w	r3, r3, #2
 800562c:	6313      	str	r3, [r2, #48]	@ 0x30
 800562e:	4b1f      	ldr	r3, [pc, #124]	@ (80056ac <MX_GPIO_Init+0x114>)
 8005630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	60bb      	str	r3, [r7, #8]
 8005638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800563a:	2300      	movs	r3, #0
 800563c:	607b      	str	r3, [r7, #4]
 800563e:	4b1b      	ldr	r3, [pc, #108]	@ (80056ac <MX_GPIO_Init+0x114>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005642:	4a1a      	ldr	r2, [pc, #104]	@ (80056ac <MX_GPIO_Init+0x114>)
 8005644:	f043 0308 	orr.w	r3, r3, #8
 8005648:	6313      	str	r3, [r2, #48]	@ 0x30
 800564a:	4b18      	ldr	r3, [pc, #96]	@ (80056ac <MX_GPIO_Init+0x114>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	607b      	str	r3, [r7, #4]
 8005654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8005656:	2200      	movs	r2, #0
 8005658:	2110      	movs	r1, #16
 800565a:	4815      	ldr	r0, [pc, #84]	@ (80056b0 <MX_GPIO_Init+0x118>)
 800565c:	f002 fc1e 	bl	8007e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8005660:	2200      	movs	r2, #0
 8005662:	2158      	movs	r1, #88	@ 0x58
 8005664:	4813      	ldr	r0, [pc, #76]	@ (80056b4 <MX_GPIO_Init+0x11c>)
 8005666:	f002 fc19 	bl	8007e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800566a:	2310      	movs	r3, #16
 800566c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800566e:	2301      	movs	r3, #1
 8005670:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005672:	2300      	movs	r3, #0
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005676:	2300      	movs	r3, #0
 8005678:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800567a:	f107 031c 	add.w	r3, r7, #28
 800567e:	4619      	mov	r1, r3
 8005680:	480b      	ldr	r0, [pc, #44]	@ (80056b0 <MX_GPIO_Init+0x118>)
 8005682:	f002 fa6f 	bl	8007b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8005686:	2358      	movs	r3, #88	@ 0x58
 8005688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800568a:	2301      	movs	r3, #1
 800568c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800568e:	2300      	movs	r3, #0
 8005690:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005692:	2300      	movs	r3, #0
 8005694:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005696:	f107 031c 	add.w	r3, r7, #28
 800569a:	4619      	mov	r1, r3
 800569c:	4805      	ldr	r0, [pc, #20]	@ (80056b4 <MX_GPIO_Init+0x11c>)
 800569e:	f002 fa61 	bl	8007b64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80056a2:	bf00      	nop
 80056a4:	3730      	adds	r7, #48	@ 0x30
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40023800 	.word	0x40023800
 80056b0:	40021000 	.word	0x40021000
 80056b4:	40020c00 	.word	0x40020c00

080056b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056b8:	b480      	push	{r7}
 80056ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80056bc:	b672      	cpsid	i
}
 80056be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80056c0:	bf00      	nop
 80056c2:	e7fd      	b.n	80056c0 <Error_Handler+0x8>

080056c4 <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 80056c8:	2201      	movs	r2, #1
 80056ca:	4903      	ldr	r1, [pc, #12]	@ (80056d8 <init_cardSD+0x14>)
 80056cc:	4803      	ldr	r0, [pc, #12]	@ (80056dc <init_cardSD+0x18>)
 80056ce:	f009 fe2d 	bl	800f32c <f_mount>

}
 80056d2:	bf00      	nop
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	08010c0c 	.word	0x08010c0c
 80056dc:	200144c8 	.word	0x200144c8

080056e0 <string_to_int>:
}



inline static uint16_t string_to_int(char *string)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]

	while((*string) != '\n')
 80056ec:	e015      	b.n	800571a <string_to_int+0x3a>
	{
		if(((*string) >= '0') && ((*string)<='9'))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80056f4:	d90e      	bls.n	8005714 <string_to_int+0x34>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b39      	cmp	r3, #57	@ 0x39
 80056fc:	d80a      	bhi.n	8005714 <string_to_int+0x34>
		{
			number = number * 10 + ((*string) - '0');
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	4613      	mov	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	461a      	mov	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	4413      	add	r3, r2
 8005710:	3b30      	subs	r3, #48	@ 0x30
 8005712:	60fb      	str	r3, [r7, #12]
		}

		string++;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3301      	adds	r3, #1
 8005718:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b0a      	cmp	r3, #10
 8005720:	d1e5      	bne.n	80056ee <string_to_int+0xe>
	}

	return number;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	b29b      	uxth	r3, r3
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <assign_filePath>:

}


char* assign_filePath(const char *filePathName)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b084      	sub	sp, #16
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
	 * Output: adresa char* catre calea
	 * ! alocat dinamic
	 */

	char *string;
	uint8_t i = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]


	while(filePathName[i] != '\0')
 800573e:	e002      	b.n	8005746 <assign_filePath+0x14>
	{
		i++;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	3301      	adds	r3, #1
 8005744:	73fb      	strb	r3, [r7, #15]
	while(filePathName[i] != '\0')
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	4413      	add	r3, r2
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f6      	bne.n	8005740 <assign_filePath+0xe>
	}

	i++;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	3301      	adds	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]

	string = (char*)malloc(sizeof(char)*i);
 8005758:	7bfb      	ldrb	r3, [r7, #15]
 800575a:	4618      	mov	r0, r3
 800575c:	f00a ff4c 	bl	80105f8 <malloc>
 8005760:	4603      	mov	r3, r0
 8005762:	60bb      	str	r3, [r7, #8]
	memcpy(string, filePathName, i);
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	461a      	mov	r2, r3
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	68b8      	ldr	r0, [r7, #8]
 800576c:	f00b f8aa 	bl	80108c4 <memcpy>

	return string;
 8005770:	68bb      	ldr	r3, [r7, #8]


}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <return_file_name_current_path>:


char* return_file_name_current_path(char *filePathName)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
	 * Input: calea fisierului
	 * Output: pointer catre nume
	 */


	char *fileName = strrchr(filePathName, '/');
 8005782:	212f      	movs	r1, #47	@ 0x2f
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f00b f842 	bl	801080e <strrchr>
 800578a:	60f8      	str	r0, [r7, #12]

	if(fileName == NULL)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <return_file_name_current_path+0x20>
	{
		fileName = filePathName;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	60fb      	str	r3, [r7, #12]
		return fileName;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	e011      	b.n	80057be <return_file_name_current_path+0x44>
	}

	else
	{
		fileName++;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3301      	adds	r3, #1
 800579e:	60fb      	str	r3, [r7, #12]
	}

	char *string = malloc(strlen(fileName) + 1);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7fa fd11 	bl	80001c8 <strlen>
 80057a6:	4603      	mov	r3, r0
 80057a8:	3301      	adds	r3, #1
 80057aa:	4618      	mov	r0, r3
 80057ac:	f00a ff24 	bl	80105f8 <malloc>
 80057b0:	4603      	mov	r3, r0
 80057b2:	60bb      	str	r3, [r7, #8]
	strcpy(string, fileName);
 80057b4:	68f9      	ldr	r1, [r7, #12]
 80057b6:	68b8      	ldr	r0, [r7, #8]
 80057b8:	f00b f87c 	bl	80108b4 <strcpy>

	return string;
 80057bc:	68bb      	ldr	r3, [r7, #8]

}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <assign_file_path_entity>:


void assign_file_path_entity(ENTITY *entity, const char *filePathName)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
	 * Input: adresa entitatii si calea literara
	 * Output: Void
	 */


	strcpy(entity->ST.SD.filePathName, filePathName);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	6839      	ldr	r1, [r7, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f00b f86c 	bl	80108b4 <strcpy>

}
 80057dc:	bf00      	nop
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <read_audio_file>:


void read_audio_file(char *filePathName, uint32_t *buffer, bool *flagAudioDone)
{
 80057e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057e8:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80057f2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80057f6:	6018      	str	r0, [r3, #0]
 80057f8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80057fc:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8005800:	6019      	str	r1, [r3, #0]
 8005802:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8005806:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	466b      	mov	r3, sp
 800580e:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8005810:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8005814:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8005818:	f107 0020 	add.w	r0, r7, #32
 800581c:	2201      	movs	r2, #1
 800581e:	6819      	ldr	r1, [r3, #0]
 8005820:	f009 fdca 	bl	800f3b8 <f_open>
 8005824:	4603      	mov	r3, r0
 8005826:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f

	if(res != FR_OK)
 800582a:	f897 325f 	ldrb.w	r3, [r7, #607]	@ 0x25f
 800582e:	2b00      	cmp	r3, #0
 8005830:	f040 8110 	bne.w	8005a54 <read_audio_file+0x270>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8005834:	4b8a      	ldr	r3, [pc, #552]	@ (8005a60 <read_audio_file+0x27c>)
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	f107 0320 	add.w	r3, r7, #32
 800583c:	4611      	mov	r1, r2
 800583e:	4618      	mov	r0, r3
 8005840:	f00a fad0 	bl	800fde4 <f_lseek>


	if(flagNewAudioFile == 1 || *flagAudioDone==1)
 8005844:	4b87      	ldr	r3, [pc, #540]	@ (8005a64 <read_audio_file+0x280>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d107      	bne.n	800585c <read_audio_file+0x78>
 800584c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8005850:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01e      	beq.n	800589a <read_audio_file+0xb6>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		*/

		*flagAudioDone=0;
 800585c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8005860:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
		flagNewAudioFile = 0;
 800586a:	4b7e      	ldr	r3, [pc, #504]	@ (8005a64 <read_audio_file+0x280>)
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8005870:	4b7d      	ldr	r3, [pc, #500]	@ (8005a68 <read_audio_file+0x284>)
 8005872:	2200      	movs	r2, #0
 8005874:	801a      	strh	r2, [r3, #0]

		currentPosition = 0;
 8005876:	4b7a      	ldr	r3, [pc, #488]	@ (8005a60 <read_audio_file+0x27c>)
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul la inceputul fisierului*/
 800587c:	4b78      	ldr	r3, [pc, #480]	@ (8005a60 <read_audio_file+0x27c>)
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	f107 0320 	add.w	r3, r7, #32
 8005884:	4611      	mov	r1, r2
 8005886:	4618      	mov	r0, r3
 8005888:	f00a faac 	bl	800fde4 <f_lseek>

		fileSize = f_size(&file); /*Aflam dimensiune in octeti a fisierului*/
 800588c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8005890:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	4a75      	ldr	r2, [pc, #468]	@ (8005a6c <read_audio_file+0x288>)
 8005898:	6013      	str	r3, [r2, #0]
	}

	const int n = 5120; /*1024 *5 caractere de prelucrat*/
 800589a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800589e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
	unsigned int nrFrames = fileSize / n;
 80058a2:	4b72      	ldr	r3, [pc, #456]	@ (8005a6c <read_audio_file+0x288>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80058aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ae:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

	if(fileSize%n != 0)
 80058b2:	4b6e      	ldr	r3, [pc, #440]	@ (8005a6c <read_audio_file+0x288>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 80058ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80058be:	fb01 f202 	mul.w	r2, r1, r2
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d004      	beq.n	80058d2 <read_audio_file+0xee>
	{
		nrFrames++;
 80058c8:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80058cc:	3301      	adds	r3, #1
 80058ce:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
	}

	uint8_t index = 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	char tempBuffer[n];
 80058d8:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80058dc:	3b01      	subs	r3, #1
 80058de:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 80058e2:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80058e6:	2200      	movs	r2, #0
 80058e8:	4698      	mov	r8, r3
 80058ea:	4691      	mov	r9, r2
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005900:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8005904:	2200      	movs	r2, #0
 8005906:	461c      	mov	r4, r3
 8005908:	4615      	mov	r5, r2
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	00eb      	lsls	r3, r5, #3
 8005914:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005918:	00e2      	lsls	r2, r4, #3
 800591a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800591e:	3307      	adds	r3, #7
 8005920:	08db      	lsrs	r3, r3, #3
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	ebad 0d03 	sub.w	sp, sp, r3
 8005928:	466b      	mov	r3, sp
 800592a:	3300      	adds	r3, #0
 800592c:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	char nrCharBuffer[5];

	f_read(&file, tempBuffer, (sizeof(char)*n)-1, &byteRead);
 8005930:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8005934:	1e5a      	subs	r2, r3, #1
 8005936:	f107 031c 	add.w	r3, r7, #28
 800593a:	f107 0020 	add.w	r0, r7, #32
 800593e:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8005942:	f009 fef3 	bl	800f72c <f_read>
	tempBuffer[byteRead] = '\n';
 8005946:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800594a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8005954:	210a      	movs	r1, #10
 8005956:	54d1      	strb	r1, [r2, r3]


	for(uint16_t i=0; i< byteRead; i++)
 8005958:	2300      	movs	r3, #0
 800595a:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 800595e:	e040      	b.n	80059e2 <read_audio_file+0x1fe>
		/*
		 * Vom parcurge tempBuffer si vom transforma caracterele citite
		 * in numere zecimale de interes
		 */

		if(tempBuffer[i] != '\n')
 8005960:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 8005964:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8005968:	5cd3      	ldrb	r3, [r2, r3]
 800596a:	2b0a      	cmp	r3, #10
 800596c:	d011      	beq.n	8005992 <read_audio_file+0x1ae>
		{
			nrCharBuffer[index] = tempBuffer[i];
 800596e:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 8005972:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8005976:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 800597a:	5c89      	ldrb	r1, [r1, r2]
 800597c:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8005980:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8005984:	54d1      	strb	r1, [r2, r3]
			index++;
 8005986:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 800598a:	3301      	adds	r3, #1
 800598c:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
 8005990:	e022      	b.n	80059d8 <read_audio_file+0x1f4>
		else
		{
			/*Vom avea in nrCharBuffer esantionul in char si il vom
			 * converti la int*/

			nrCharBuffer[index] = '\n';
 8005992:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8005996:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800599a:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 800599e:	210a      	movs	r1, #10
 80059a0:	54d1      	strb	r1, [r2, r3]
			*buffer = string_to_int(nrCharBuffer);
 80059a2:	f107 0314 	add.w	r3, r7, #20
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff fe9a 	bl	80056e0 <string_to_int>
 80059ac:	4603      	mov	r3, r0
 80059ae:	461a      	mov	r2, r3
 80059b0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80059b4:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	601a      	str	r2, [r3, #0]
			buffer++;
 80059bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80059c0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80059c4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80059c8:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	3204      	adds	r2, #4
 80059d0:	601a      	str	r2, [r3, #0]

			index = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	for(uint16_t i=0; i< byteRead; i++)
 80059d8:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 80059dc:	3301      	adds	r3, #1
 80059de:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 80059e2:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 80059e6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80059ea:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d3b5      	bcc.n	8005960 <read_audio_file+0x17c>


	}


	if(currentFrame == nrFrames)
 80059f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a68 <read_audio_file+0x284>)
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d10f      	bne.n	8005a22 <read_audio_file+0x23e>
	{
		/*Resetare flag pentru reinitializare*/

		flagNewAudioFile = 1;
 8005a02:	4b18      	ldr	r3, [pc, #96]	@ (8005a64 <read_audio_file+0x280>)
 8005a04:	2201      	movs	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
		*flagAudioDone = 1;
 8005a08:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8005a0c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2201      	movs	r2, #1
 8005a14:	701a      	strb	r2, [r3, #0]

		f_close(&file);
 8005a16:	f107 0320 	add.w	r3, r7, #32
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f00a f9b8 	bl	800fd90 <f_close>
		return;
 8005a20:	e018      	b.n	8005a54 <read_audio_file+0x270>
	}

	currentFrame++;
 8005a22:	4b11      	ldr	r3, [pc, #68]	@ (8005a68 <read_audio_file+0x284>)
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	3301      	adds	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a68 <read_audio_file+0x284>)
 8005a2c:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 8005a2e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8005a32:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	4a09      	ldr	r2, [pc, #36]	@ (8005a60 <read_audio_file+0x27c>)
 8005a3a:	6013      	str	r3, [r2, #0]
	currentPosition++;
 8005a3c:	4b08      	ldr	r3, [pc, #32]	@ (8005a60 <read_audio_file+0x27c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3301      	adds	r3, #1
 8005a42:	4a07      	ldr	r2, [pc, #28]	@ (8005a60 <read_audio_file+0x27c>)
 8005a44:	6013      	str	r3, [r2, #0]

	f_close(&file);
 8005a46:	f107 0320 	add.w	r3, r7, #32
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f00a f9a0 	bl	800fd90 <f_close>
 8005a50:	46b5      	mov	sp, r6
 8005a52:	e000      	b.n	8005a56 <read_audio_file+0x272>
		return;
 8005a54:	46b5      	mov	sp, r6


}
 8005a56:	f507 771b 	add.w	r7, r7, #620	@ 0x26c
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a60:	200146f8 	.word	0x200146f8
 8005a64:	2000000a 	.word	0x2000000a
 8005a68:	200146fc 	.word	0x200146fc
 8005a6c:	20014700 	.word	0x20014700

08005a70 <read_image_file>:


void read_image_file(ENTITY *entity, uint16_t *indexFlag, bool *flagImgDone)
{
 8005a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a74:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005a7e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005a82:	6018      	str	r0, [r3, #0]
 8005a84:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005a88:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8005a8c:	6019      	str	r1, [r3, #0]
 8005a8e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005a92:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	466b      	mov	r3, sp
 8005a9a:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, entity->ST.SD.filePathName, FA_READ);
 8005a9c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005aa0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6919      	ldr	r1, [r3, #16]
 8005aa8:	f107 031c 	add.w	r3, r7, #28
 8005aac:	2201      	movs	r2, #1
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f009 fc82 	bl	800f3b8 <f_open>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255

	if(res != FR_OK)
 8005aba:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f040 81af 	bne.w	8005e22 <read_image_file+0x3b2>
	static const int n = 3072;
	static unsigned int nrFrames = 0;



	if(flagNewImageFile == 1)
 8005ac4:	4ba8      	ldr	r3, [pc, #672]	@ (8005d68 <read_image_file+0x2f8>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 80d6 	beq.w	8005c7a <read_image_file+0x20a>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 8005ace:	4ba7      	ldr	r3, [pc, #668]	@ (8005d6c <read_image_file+0x2fc>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 8005ad4:	4ba5      	ldr	r3, [pc, #660]	@ (8005d6c <read_image_file+0x2fc>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	f107 031c 	add.w	r3, r7, #28
 8005adc:	4611      	mov	r1, r2
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f00a f980 	bl	800fde4 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 8005ae4:	f107 0318 	add.w	r3, r7, #24
 8005ae8:	f107 0114 	add.w	r1, r7, #20
 8005aec:	f107 001c 	add.w	r0, r7, #28
 8005af0:	2204      	movs	r2, #4
 8005af2:	f009 fe1b 	bl	800f72c <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8005af6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005afa:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2200      	movs	r2, #0
 8005b02:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8005b04:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005b08:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8005b12:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005b16:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005b20:	461a      	mov	r2, r3
 8005b22:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005b26:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005b2a:	785b      	ldrb	r3, [r3, #1]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	021b      	lsls	r3, r3, #8
 8005b30:	b21a      	sxth	r2, r3
 8005b32:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005b36:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8005b40:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005b44:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	b21b      	sxth	r3, r3
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	b21b      	sxth	r3, r3
 8005b50:	4313      	orrs	r3, r2
 8005b52:	b21a      	sxth	r2, r3
 8005b54:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005b58:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8005b60:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005b64:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005b74:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005b78:	78db      	ldrb	r3, [r3, #3]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	b21a      	sxth	r2, r3
 8005b80:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005b84:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8005b8e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005b92:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005b96:	789b      	ldrb	r3, [r3, #2]
 8005b98:	b21b      	sxth	r3, r3
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	b21b      	sxth	r3, r3
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	b21a      	sxth	r2, r3
 8005ba2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005ba6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	811a      	strh	r2, [r3, #8]


		if((entity->x1)*(entity->y1) < 1024)
 8005bae:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005bb2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005bc2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005bcc:	fb02 f303 	mul.w	r3, r2, r3
 8005bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bd4:	da1f      	bge.n	8005c16 <read_image_file+0x1a6>
		{
			/*Pentru un singur frame alocam exact cat trebuie */
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8005bd6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005bda:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005be4:	461a      	mov	r2, r3
 8005be6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005bea:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005bf4:	fb03 f202 	mul.w	r2, r3, r2
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	4413      	add	r3, r2
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f00a fcfa 	bl	80105f8 <malloc>
 8005c04:	4603      	mov	r3, r0
 8005c06:	461a      	mov	r2, r3
 8005c08:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005c0c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60da      	str	r2, [r3, #12]
 8005c14:	e00b      	b.n	8005c2e <read_image_file+0x1be>
		}

		else
		{
			/*Alocam maxim 3072 de octeti per frame*/
			entity->ST.SD.data = malloc(sizeof(char)*3072);
 8005c16:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8005c1a:	f00a fced 	bl	80105f8 <malloc>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	461a      	mov	r2, r3
 8005c22:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005c26:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60da      	str	r2, [r3, #12]
		}

		flagNewImageFile = 0;
 8005c2e:	4b4e      	ldr	r3, [pc, #312]	@ (8005d68 <read_image_file+0x2f8>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8005c34:	4b4e      	ldr	r3, [pc, #312]	@ (8005d70 <read_image_file+0x300>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	801a      	strh	r2, [r3, #0]

		currentPosition = byteRead;
 8005c3a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005c3e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a49      	ldr	r2, [pc, #292]	@ (8005d6c <read_image_file+0x2fc>)
 8005c46:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8005c48:	4b48      	ldr	r3, [pc, #288]	@ (8005d6c <read_image_file+0x2fc>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	f107 031c 	add.w	r3, r7, #28
 8005c50:	4611      	mov	r1, r2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f00a f8c6 	bl	800fde4 <f_lseek>

		/*Aflam dimensiune in octeti a imaginii de citit (scadem dimensiunea headerului)*/
		fileSize = f_size(&file) - 4;
 8005c58:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005c5c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	3b04      	subs	r3, #4
 8005c64:	4a43      	ldr	r2, [pc, #268]	@ (8005d74 <read_image_file+0x304>)
 8005c66:	6013      	str	r3, [r2, #0]

		/*calculam numarul de frameuri*/

		nrFrames = fileSize / n;
 8005c68:	4b42      	ldr	r3, [pc, #264]	@ (8005d74 <read_image_file+0x304>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a42      	ldr	r2, [pc, #264]	@ (8005d78 <read_image_file+0x308>)
 8005c6e:	6812      	ldr	r2, [r2, #0]
 8005c70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c74:	4a41      	ldr	r2, [pc, #260]	@ (8005d7c <read_image_file+0x30c>)
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	e007      	b.n	8005c8a <read_image_file+0x21a>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8005c7a:	4b3c      	ldr	r3, [pc, #240]	@ (8005d6c <read_image_file+0x2fc>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	f107 031c 	add.w	r3, r7, #28
 8005c82:	4611      	mov	r1, r2
 8005c84:	4618      	mov	r0, r3
 8005c86:	f00a f8ad 	bl	800fde4 <f_lseek>
	}



	if(fileSize == n)
 8005c8a:	4b3a      	ldr	r3, [pc, #232]	@ (8005d74 <read_image_file+0x304>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a3a      	ldr	r2, [pc, #232]	@ (8005d78 <read_image_file+0x308>)
 8005c90:	6812      	ldr	r2, [r2, #0]
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d104      	bne.n	8005ca0 <read_image_file+0x230>
	{
		nrFrames--; /*pastram logica primului frame pana la n*/
 8005c96:	4b39      	ldr	r3, [pc, #228]	@ (8005d7c <read_image_file+0x30c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	4a37      	ldr	r2, [pc, #220]	@ (8005d7c <read_image_file+0x30c>)
 8005c9e:	6013      	str	r3, [r2, #0]
	}

	if(fileSize%n != 0 && nrFrames!=0)
 8005ca0:	4b34      	ldr	r3, [pc, #208]	@ (8005d74 <read_image_file+0x304>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a34      	ldr	r2, [pc, #208]	@ (8005d78 <read_image_file+0x308>)
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cac:	fb01 f202 	mul.w	r2, r1, r2
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d008      	beq.n	8005cc8 <read_image_file+0x258>
 8005cb6:	4b31      	ldr	r3, [pc, #196]	@ (8005d7c <read_image_file+0x30c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d004      	beq.n	8005cc8 <read_image_file+0x258>
	{
		nrFrames++;
 8005cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8005d7c <read_image_file+0x30c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8005d7c <read_image_file+0x30c>)
 8005cc6:	6013      	str	r3, [r2, #0]
	}

	*indexFlag = 0;
 8005cc8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005ccc:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	801a      	strh	r2, [r3, #0]
	char tempBuffer[n];
 8005cd6:	4b28      	ldr	r3, [pc, #160]	@ (8005d78 <read_image_file+0x308>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8005ce0:	4b25      	ldr	r3, [pc, #148]	@ (8005d78 <read_image_file+0x308>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	4690      	mov	r8, r2
 8005cea:	4699      	mov	r9, r3
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cf8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cfc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d00:	4b1d      	ldr	r3, [pc, #116]	@ (8005d78 <read_image_file+0x308>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	2300      	movs	r3, #0
 8005d08:	4614      	mov	r4, r2
 8005d0a:	461d      	mov	r5, r3
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	f04f 0300 	mov.w	r3, #0
 8005d14:	00eb      	lsls	r3, r5, #3
 8005d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d1a:	00e2      	lsls	r2, r4, #3
 8005d1c:	4b16      	ldr	r3, [pc, #88]	@ (8005d78 <read_image_file+0x308>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3307      	adds	r3, #7
 8005d22:	08db      	lsrs	r3, r3, #3
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	ebad 0d03 	sub.w	sp, sp, r3
 8005d2a:	466b      	mov	r3, sp
 8005d2c:	3300      	adds	r3, #0
 8005d2e:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

	f_read(&file, tempBuffer, (sizeof(char)*n), &byteRead);
 8005d32:	4b11      	ldr	r3, [pc, #68]	@ (8005d78 <read_image_file+0x308>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	f107 0318 	add.w	r3, r7, #24
 8005d3c:	f107 001c 	add.w	r0, r7, #28
 8005d40:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8005d44:	f009 fcf2 	bl	800f72c <f_read>
	(*indexFlag) = byteRead;
 8005d48:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005d4c:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005d58:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	801a      	strh	r2, [r3, #0]

	for(uint16_t i=0; i<byteRead; i++)
 8005d60:	2300      	movs	r3, #0
 8005d62:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8005d66:	e01f      	b.n	8005da8 <read_image_file+0x338>
 8005d68:	2000000b 	.word	0x2000000b
 8005d6c:	20014704 	.word	0x20014704
 8005d70:	20014708 	.word	0x20014708
 8005d74:	2001470c 	.word	0x2001470c
 8005d78:	080119b0 	.word	0x080119b0
 8005d7c:	20014710 	.word	0x20014710
	{
		/*Vom parcurge bufferul la intervale de 2 valori HEXA, preluand caracterele ascii
		 * pe care le vom transforma in zecimal ex: FF1200FE3000...*/

		entity->ST.SD.data[i] = tempBuffer[i];
 8005d80:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8005d84:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005d88:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68d9      	ldr	r1, [r3, #12]
 8005d90:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8005d94:	440b      	add	r3, r1
 8005d96:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8005d9a:	5c8a      	ldrb	r2, [r1, r2]
 8005d9c:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<byteRead; i++)
 8005d9e:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8005da2:	3301      	adds	r3, #1
 8005da4:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8005da8:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8005dac:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005db0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d3e2      	bcc.n	8005d80 <read_image_file+0x310>

	}


	currentFrame++;
 8005dba:	4b1d      	ldr	r3, [pc, #116]	@ (8005e30 <read_image_file+0x3c0>)
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e30 <read_image_file+0x3c0>)
 8005dc4:	801a      	strh	r2, [r3, #0]

	if((currentFrame >= nrFrames) || ((*(indexFlag)) < 3072))
 8005dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e30 <read_image_file+0x3c0>)
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	4b19      	ldr	r3, [pc, #100]	@ (8005e34 <read_image_file+0x3c4>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d208      	bcs.n	8005de6 <read_image_file+0x376>
 8005dd4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005dd8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005de4:	d20f      	bcs.n	8005e06 <read_image_file+0x396>
	{
		/*Resetare flag pentru reinitializare*/

		*flagImgDone = 1;
 8005de6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005dea:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2201      	movs	r2, #1
 8005df2:	701a      	strb	r2, [r3, #0]

		flagNewImageFile = 1;
 8005df4:	4b10      	ldr	r3, [pc, #64]	@ (8005e38 <read_image_file+0x3c8>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8005dfa:	f107 031c 	add.w	r3, r7, #28
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f009 ffc6 	bl	800fd90 <f_close>
		return;
 8005e04:	e00d      	b.n	8005e22 <read_image_file+0x3b2>
	}


	currentPosition = f_tell(&file);
 8005e06:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005e0a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	4a0a      	ldr	r2, [pc, #40]	@ (8005e3c <read_image_file+0x3cc>)
 8005e12:	6013      	str	r3, [r2, #0]


	f_close(&file);
 8005e14:	f107 031c 	add.w	r3, r7, #28
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f009 ffb9 	bl	800fd90 <f_close>
 8005e1e:	46b5      	mov	sp, r6
 8005e20:	e000      	b.n	8005e24 <read_image_file+0x3b4>
		return;
 8005e22:	46b5      	mov	sp, r6


}
 8005e24:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e2e:	bf00      	nop
 8005e30:	20014708 	.word	0x20014708
 8005e34:	20014710 	.word	0x20014710
 8005e38:	2000000b 	.word	0x2000000b
 8005e3c:	20014704 	.word	0x20014704

08005e40 <frame_number_x>:



static uint16_t frame_number_x(ENTITY *entity, const float factor)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	ed87 0a02 	vstr	s0, [r7, #8]

	uint8_t x = 1;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	75fb      	strb	r3, [r7, #23]

	if(factor > 1)
 8005e50:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e60:	dd33      	ble.n	8005eca <frame_number_x+0x8a>
	{
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8005e62:	e00b      	b.n	8005e7c <frame_number_x+0x3c>
		{
			if(x == entity->y1)
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d102      	bne.n	8005e76 <frame_number_x+0x36>
			{
				return x;
 8005e70:	7dfb      	ldrb	r3, [r7, #23]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	e05f      	b.n	8005f36 <frame_number_x+0xf6>
			}

			x++;
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e92:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	ee07 3a90 	vmov	s15, r3
 8005ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8005f44 <frame_number_x+0x104>
 8005eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb4:	d9d6      	bls.n	8005e64 <frame_number_x+0x24>
		}


		if(x==1)
 8005eb6:	7dfb      	ldrb	r3, [r7, #23]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <frame_number_x+0x80>
		{
			return 1;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e03a      	b.n	8005f36 <frame_number_x+0xf6>
		}

		else
		{
			return (x-1);
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	e035      	b.n	8005f36 <frame_number_x+0xf6>
	}


	else
	{
		x = 0;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	75fb      	strb	r3, [r7, #23]

		while((((int)(entity->x1)*x) <= (32*32)))
 8005ece:	e016      	b.n	8005efe <frame_number_x+0xbe>
		{
			if(x == entity->y1)
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d102      	bne.n	8005ee2 <frame_number_x+0xa2>
			{
				return x;
 8005edc:	7dfb      	ldrb	r3, [r7, #23]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	e029      	b.n	8005f36 <frame_number_x+0xf6>
			}

			x = x + (int)(1/factor);
 8005ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ee6:	ed97 7a02 	vldr	s14, [r7, #8]
 8005eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ef2:	edc7 7a01 	vstr	s15, [r7, #4]
 8005ef6:	793a      	ldrb	r2, [r7, #4]
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
 8005efa:	4413      	add	r3, r2
 8005efc:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*x) <= (32*32)))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005f04:	461a      	mov	r2, r3
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
 8005f08:	fb02 f303 	mul.w	r3, r2, r3
 8005f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f10:	ddde      	ble.n	8005ed0 <frame_number_x+0x90>
		}


		return (x-(1/factor));
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
 8005f14:	ee07 3a90 	vmov	s15, r3
 8005f18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f1c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8005f20:	edd7 6a02 	vldr	s13, [r7, #8]
 8005f24:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f30:	ee17 3a90 	vmov	r3, s15
 8005f34:	b29b      	uxth	r3, r3

	}


}
 8005f36:	4618      	mov	r0, r3
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	44800000 	.word	0x44800000

08005f48 <read_image_file_scaling>:



void read_image_file_scaling(char *filePathName, ENTITY *entity, const float factor, uint16_t *px, bool *flagTerm)
{
 8005f48:	b590      	push	{r4, r7, lr}
 8005f4a:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8005f54:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8005f58:	6020      	str	r0, [r4, #0]
 8005f5a:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 8005f5e:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8005f62:	6001      	str	r1, [r0, #0]
 8005f64:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8005f68:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8005f6c:	ed81 0a00 	vstr	s0, [r1]
 8005f70:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8005f74:	f5a1 7114 	sub.w	r1, r1, #592	@ 0x250
 8005f78:	600a      	str	r2, [r1, #0]
 8005f7a:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8005f7e:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8005f82:	6013      	str	r3, [r2, #0]

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8005f84:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005f88:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8005f8c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005f90:	2201      	movs	r2, #1
 8005f92:	6819      	ldr	r1, [r3, #0]
 8005f94:	f009 fa10 	bl	800f3b8 <f_open>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 8005f9e:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f040 81be 	bne.w	8006324 <read_image_file_scaling+0x3dc>
	static FSIZE_t currentPosition = 0;

	static uint16_t x = 0; /*Numarul de linii din M1 ai sa avem sub 32x32 pixeli de prelucrat in M2*/
	static unsigned int nrFrames = 0;

	if(flagNewImageFile == 1)
 8005fa8:	4ba9      	ldr	r3, [pc, #676]	@ (8006250 <read_image_file_scaling+0x308>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 8112 	beq.w	80061d6 <read_image_file_scaling+0x28e>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 8005fb2:	4ba8      	ldr	r3, [pc, #672]	@ (8006254 <read_image_file_scaling+0x30c>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 8005fb8:	4ba6      	ldr	r3, [pc, #664]	@ (8006254 <read_image_file_scaling+0x30c>)
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f009 ff0e 	bl	800fde4 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 8005fc8:	f107 0320 	add.w	r3, r7, #32
 8005fcc:	f107 011c 	add.w	r1, r7, #28
 8005fd0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	f009 fba9 	bl	800f72c <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8005fda:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005fde:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8005fe8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005fec:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8005ff6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8005ffa:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006004:	461a      	mov	r2, r3
 8006006:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800600a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800600e:	785b      	ldrb	r3, [r3, #1]
 8006010:	4313      	orrs	r3, r2
 8006012:	021b      	lsls	r3, r3, #8
 8006014:	b21a      	sxth	r2, r3
 8006016:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800601a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8006024:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8006028:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	b21b      	sxth	r3, r3
 8006030:	430b      	orrs	r3, r1
 8006032:	b21b      	sxth	r3, r3
 8006034:	4313      	orrs	r3, r2
 8006036:	b21a      	sxth	r2, r3
 8006038:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800603c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8006044:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8006048:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006052:	461a      	mov	r2, r3
 8006054:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8006058:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800605c:	78db      	ldrb	r3, [r3, #3]
 800605e:	4313      	orrs	r3, r2
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	b21a      	sxth	r2, r3
 8006064:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8006068:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8006072:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8006076:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800607a:	789b      	ldrb	r3, [r3, #2]
 800607c:	b21b      	sxth	r3, r3
 800607e:	430b      	orrs	r3, r1
 8006080:	b21b      	sxth	r3, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	b21a      	sxth	r2, r3
 8006086:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800608a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	811a      	strh	r2, [r3, #8]


		flagNewImageFile = 0;
 8006092:	4b6f      	ldr	r3, [pc, #444]	@ (8006250 <read_image_file_scaling+0x308>)
 8006094:	2200      	movs	r2, #0
 8006096:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8006098:	4b6f      	ldr	r3, [pc, #444]	@ (8006258 <read_image_file_scaling+0x310>)
 800609a:	2200      	movs	r2, #0
 800609c:	801a      	strh	r2, [r3, #0]
		flagOneFrame = 0;
 800609e:	4b6f      	ldr	r3, [pc, #444]	@ (800625c <read_image_file_scaling+0x314>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	701a      	strb	r2, [r3, #0]

		currentPosition = byteRead;
 80060a4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80060a8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a69      	ldr	r2, [pc, #420]	@ (8006254 <read_image_file_scaling+0x30c>)
 80060b0:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 80060b2:	4b68      	ldr	r3, [pc, #416]	@ (8006254 <read_image_file_scaling+0x30c>)
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f009 fe91 	bl	800fde4 <f_lseek>


		x = frame_number_x(entity, factor); /*numarul de linii cuprins in fiecare frame al matricei M1*/
 80060c2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80060c6:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 80060ca:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80060ce:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80060d2:	ed92 0a00 	vldr	s0, [r2]
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	f7ff feb2 	bl	8005e40 <frame_number_x>
 80060dc:	4603      	mov	r3, r0
 80060de:	461a      	mov	r2, r3
 80060e0:	4b5f      	ldr	r3, [pc, #380]	@ (8006260 <read_image_file_scaling+0x318>)
 80060e2:	801a      	strh	r2, [r3, #0]
		*px = x;
 80060e4:	4b5e      	ldr	r3, [pc, #376]	@ (8006260 <read_image_file_scaling+0x318>)
 80060e6:	881a      	ldrh	r2, [r3, #0]
 80060e8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80060ec:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	801a      	strh	r2, [r3, #0]

		if(x == entity->y1)
 80060f4:	4b5a      	ldr	r3, [pc, #360]	@ (8006260 <read_image_file_scaling+0x318>)
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80060fe:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006108:	429a      	cmp	r2, r3
 800610a:	d125      	bne.n	8006158 <read_image_file_scaling+0x210>
		{
			flagOneFrame = 1;
 800610c:	4b53      	ldr	r3, [pc, #332]	@ (800625c <read_image_file_scaling+0x314>)
 800610e:	2201      	movs	r2, #1
 8006110:	701a      	strb	r2, [r3, #0]
			nrFrames = 1; /*Avem o imagine care scalata are mai putini de 32x32 pixeli*/
 8006112:	4b54      	ldr	r3, [pc, #336]	@ (8006264 <read_image_file_scaling+0x31c>)
 8006114:	2201      	movs	r2, #1
 8006116:	601a      	str	r2, [r3, #0]
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8006118:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800611c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006126:	461a      	mov	r2, r3
 8006128:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800612c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006136:	fb03 f202 	mul.w	r2, r3, r2
 800613a:	4613      	mov	r3, r2
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	4413      	add	r3, r2
 8006140:	4618      	mov	r0, r3
 8006142:	f00a fa59 	bl	80105f8 <malloc>
 8006146:	4603      	mov	r3, r0
 8006148:	461a      	mov	r2, r3
 800614a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800614e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60da      	str	r2, [r3, #12]
 8006156:	e046      	b.n	80061e6 <read_image_file_scaling+0x29e>

		}

		else
		{
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*x);
 8006158:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800615c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006166:	461a      	mov	r2, r3
 8006168:	4b3d      	ldr	r3, [pc, #244]	@ (8006260 <read_image_file_scaling+0x318>)
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	fb03 f202 	mul.w	r2, r3, r2
 8006170:	4613      	mov	r3, r2
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	4413      	add	r3, r2
 8006176:	4618      	mov	r0, r3
 8006178:	f00a fa3e 	bl	80105f8 <malloc>
 800617c:	4603      	mov	r3, r0
 800617e:	461a      	mov	r2, r3
 8006180:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8006184:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60da      	str	r2, [r3, #12]

			nrFrames = (entity->y1) / x;
 800618c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8006190:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800619a:	461a      	mov	r2, r3
 800619c:	4b30      	ldr	r3, [pc, #192]	@ (8006260 <read_image_file_scaling+0x318>)
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80061a4:	461a      	mov	r2, r3
 80061a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006264 <read_image_file_scaling+0x31c>)
 80061a8:	601a      	str	r2, [r3, #0]

			if((entity->y1) % x != 0)
 80061aa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80061ae:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80061b8:	4a29      	ldr	r2, [pc, #164]	@ (8006260 <read_image_file_scaling+0x318>)
 80061ba:	8812      	ldrh	r2, [r2, #0]
 80061bc:	fb93 f1f2 	sdiv	r1, r3, r2
 80061c0:	fb01 f202 	mul.w	r2, r1, r2
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00d      	beq.n	80061e6 <read_image_file_scaling+0x29e>
			{
				nrFrames++;
 80061ca:	4b26      	ldr	r3, [pc, #152]	@ (8006264 <read_image_file_scaling+0x31c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3301      	adds	r3, #1
 80061d0:	4a24      	ldr	r2, [pc, #144]	@ (8006264 <read_image_file_scaling+0x31c>)
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	e007      	b.n	80061e6 <read_image_file_scaling+0x29e>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 80061d6:	4b1f      	ldr	r3, [pc, #124]	@ (8006254 <read_image_file_scaling+0x30c>)
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061de:	4611      	mov	r1, r2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f009 fdff 	bl	800fde4 <f_lseek>
	}


	/*Vom pune in entity->data primele valori*/

	if(flagOneFrame == 1)
 80061e6:	4b1d      	ldr	r3, [pc, #116]	@ (800625c <read_image_file_scaling+0x314>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d03c      	beq.n	8006268 <read_image_file_scaling+0x320>
	{
		f_read(&file, entity->ST.SD.data, (3*sizeof(char)*(entity->x1)*(entity->y1)), &byteRead);
 80061ee:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80061f2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68d9      	ldr	r1, [r3, #12]
 80061fa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80061fe:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006208:	461a      	mov	r2, r3
 800620a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800620e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006218:	fb03 f202 	mul.w	r2, r3, r2
 800621c:	4613      	mov	r3, r2
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	441a      	add	r2, r3
 8006222:	f107 0320 	add.w	r3, r7, #32
 8006226:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800622a:	f009 fa7f 	bl	800f72c <f_read>

		*flagTerm = 1;
 800622e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8006232:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2201      	movs	r2, #1
 800623a:	701a      	strb	r2, [r3, #0]
		flagNewImageFile = 1;
 800623c:	4b04      	ldr	r3, [pc, #16]	@ (8006250 <read_image_file_scaling+0x308>)
 800623e:	2201      	movs	r2, #1
 8006240:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8006242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006246:	4618      	mov	r0, r3
 8006248:	f009 fda2 	bl	800fd90 <f_close>
		return;
 800624c:	e06b      	b.n	8006326 <read_image_file_scaling+0x3de>
 800624e:	bf00      	nop
 8006250:	2000000c 	.word	0x2000000c
 8006254:	20014714 	.word	0x20014714
 8006258:	20014718 	.word	0x20014718
 800625c:	2001471a 	.word	0x2001471a
 8006260:	2001471c 	.word	0x2001471c
 8006264:	20014720 	.word	0x20014720

	}

	else
	{
		f_read(&file, entity->ST.SD.data, (3*sizeof(char)*(entity->x1)*x), &byteRead);
 8006268:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800626c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68d9      	ldr	r1, [r3, #12]
 8006274:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8006278:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006282:	461a      	mov	r2, r3
 8006284:	4b2a      	ldr	r3, [pc, #168]	@ (8006330 <read_image_file_scaling+0x3e8>)
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	fb03 f202 	mul.w	r2, r3, r2
 800628c:	4613      	mov	r3, r2
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	441a      	add	r2, r3
 8006292:	f107 0320 	add.w	r3, r7, #32
 8006296:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800629a:	f009 fa47 	bl	800f72c <f_read>

		currentFrame++;
 800629e:	4b25      	ldr	r3, [pc, #148]	@ (8006334 <read_image_file_scaling+0x3ec>)
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	3301      	adds	r3, #1
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	4b23      	ldr	r3, [pc, #140]	@ (8006334 <read_image_file_scaling+0x3ec>)
 80062a8:	801a      	strh	r2, [r3, #0]

		if((currentFrame >= nrFrames))
 80062aa:	4b22      	ldr	r3, [pc, #136]	@ (8006334 <read_image_file_scaling+0x3ec>)
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	4b21      	ldr	r3, [pc, #132]	@ (8006338 <read_image_file_scaling+0x3f0>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d328      	bcc.n	800630a <read_image_file_scaling+0x3c2>
		{
			*px = (entity->y1) - x*(nrFrames-1); /*recalculam ultimul numar de linii de citit*/
 80062b8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80062bc:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006338 <read_image_file_scaling+0x3f0>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b299      	uxth	r1, r3
 80062d0:	4b17      	ldr	r3, [pc, #92]	@ (8006330 <read_image_file_scaling+0x3e8>)
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	fb11 f303 	smulbb	r3, r1, r3
 80062d8:	b29b      	uxth	r3, r3
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	b29a      	uxth	r2, r3
 80062de:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80062e2:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	801a      	strh	r2, [r3, #0]
			*flagTerm = 1;
 80062ea:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80062ee:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2201      	movs	r2, #1
 80062f6:	701a      	strb	r2, [r3, #0]
			flagNewImageFile = 1;
 80062f8:	4b10      	ldr	r3, [pc, #64]	@ (800633c <read_image_file_scaling+0x3f4>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	701a      	strb	r2, [r3, #0]
			f_close(&file);
 80062fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006302:	4618      	mov	r0, r3
 8006304:	f009 fd44 	bl	800fd90 <f_close>
			return;
 8006308:	e00d      	b.n	8006326 <read_image_file_scaling+0x3de>
		}



		currentPosition = f_tell(&file);
 800630a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800630e:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	4a0a      	ldr	r2, [pc, #40]	@ (8006340 <read_image_file_scaling+0x3f8>)
 8006316:	6013      	str	r3, [r2, #0]
		f_close(&file);
 8006318:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800631c:	4618      	mov	r0, r3
 800631e:	f009 fd37 	bl	800fd90 <f_close>
 8006322:	e000      	b.n	8006326 <read_image_file_scaling+0x3de>
		return;
 8006324:	bf00      	nop

	}



}
 8006326:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 800632a:	46bd      	mov	sp, r7
 800632c:	bd90      	pop	{r4, r7, pc}
 800632e:	bf00      	nop
 8006330:	2001471c 	.word	0x2001471c
 8006334:	20014718 	.word	0x20014718
 8006338:	20014720 	.word	0x20014720
 800633c:	2000000c 	.word	0x2000000c
 8006340:	20014714 	.word	0x20014714

08006344 <write_image_file>:



void write_image_file(char *filePathName, uint8_t *data, size_t nrBytesData, int16_t x1, int16_t y1, bool flagTerm)
{
 8006344:	b590      	push	{r4, r7, lr}
 8006346:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 800634a:	af00      	add	r7, sp, #0
 800634c:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8006350:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8006354:	6020      	str	r0, [r4, #0]
 8006356:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 800635a:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 800635e:	6001      	str	r1, [r0, #0]
 8006360:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8006364:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8006368:	600a      	str	r2, [r1, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006370:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8006374:	801a      	strh	r2, [r3, #0]


	static bool flagStart = 0;
	static FSIZE_t currentPosition = 0;

	if(flagStart == 0)
 8006376:	4b4b      	ldr	r3, [pc, #300]	@ (80064a4 <write_image_file+0x160>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	f083 0301 	eor.w	r3, r3, #1
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	d04b      	beq.n	800641c <write_image_file+0xd8>
	{

		res = f_open(&file, filePathName, FA_WRITE | FA_CREATE_ALWAYS);
 8006384:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006388:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800638c:	f107 001c 	add.w	r0, r7, #28
 8006390:	220a      	movs	r2, #10
 8006392:	6819      	ldr	r1, [r3, #0]
 8006394:	f009 f810 	bl	800f3b8 <f_open>
 8006398:	4603      	mov	r3, r0
 800639a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f


		if (res != FR_OK)
 800639e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d177      	bne.n	8006496 <write_image_file+0x152>
		{
		    return;
		}


		currentPosition = 0;
 80063a6:	4b40      	ldr	r3, [pc, #256]	@ (80064a8 <write_image_file+0x164>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]
		/*
		 * Scriem mai intai headerul anume
		 * dimensiunea imaginii asociate
		 */

		header[0] = (int8_t)(x1);
 80063ac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80063b0:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b2da      	uxtb	r2, r3
 80063b8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80063bc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80063c0:	701a      	strb	r2, [r3, #0]
		header[1] = (int8_t)(x1>>8);
 80063c2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80063c6:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 80063ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063ce:	121b      	asrs	r3, r3, #8
 80063d0:	b21b      	sxth	r3, r3
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80063d8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80063dc:	705a      	strb	r2, [r3, #1]
		header[2] = (int8_t)(y1);
 80063de:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80063e8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80063ec:	709a      	strb	r2, [r3, #2]
		header[3] = (int8_t)(y1>>8);
 80063ee:	f9b7 3260 	ldrsh.w	r3, [r7, #608]	@ 0x260
 80063f2:	121b      	asrs	r3, r3, #8
 80063f4:	b21b      	sxth	r3, r3
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80063fc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8006400:	70da      	strb	r2, [r3, #3]

		f_write(&file, header, 4, &byteWr);
 8006402:	f107 0318 	add.w	r3, r7, #24
 8006406:	f107 0114 	add.w	r1, r7, #20
 800640a:	f107 001c 	add.w	r0, r7, #28
 800640e:	2204      	movs	r2, #4
 8006410:	f009 facb 	bl	800f9aa <f_write>

		flagStart = 1;
 8006414:	4b23      	ldr	r3, [pc, #140]	@ (80064a4 <write_image_file+0x160>)
 8006416:	2201      	movs	r2, #1
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	e018      	b.n	800644e <write_image_file+0x10a>
	}


	else
	{
		res = f_open(&file, filePathName, FA_WRITE | FA_OPEN_ALWAYS);
 800641c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006420:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8006424:	f107 001c 	add.w	r0, r7, #28
 8006428:	2212      	movs	r2, #18
 800642a:	6819      	ldr	r1, [r3, #0]
 800642c:	f008 ffc4 	bl	800f3b8 <f_open>
 8006430:	4603      	mov	r3, r0
 8006432:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f

		if (res != FR_OK)
 8006436:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800643a:	2b00      	cmp	r3, #0
 800643c:	d12d      	bne.n	800649a <write_image_file+0x156>
		{
		    return;
		}

		f_lseek(&file, currentPosition);
 800643e:	4b1a      	ldr	r3, [pc, #104]	@ (80064a8 <write_image_file+0x164>)
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	f107 031c 	add.w	r3, r7, #28
 8006446:	4611      	mov	r1, r2
 8006448:	4618      	mov	r0, r3
 800644a:	f009 fccb 	bl	800fde4 <f_lseek>

	}


	if(flagTerm == 1)
 800644e:	f897 3264 	ldrb.w	r3, [r7, #612]	@ 0x264
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <write_image_file+0x118>
	{
		flagStart = 0;
 8006456:	4b13      	ldr	r3, [pc, #76]	@ (80064a4 <write_image_file+0x160>)
 8006458:	2200      	movs	r2, #0
 800645a:	701a      	strb	r2, [r3, #0]

	}


	f_write(&file, data, nrBytesData, &byteWr);
 800645c:	f107 0318 	add.w	r3, r7, #24
 8006460:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8006464:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8006468:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 800646c:	f5a1 7112 	sub.w	r1, r1, #584	@ 0x248
 8006470:	f107 001c 	add.w	r0, r7, #28
 8006474:	6812      	ldr	r2, [r2, #0]
 8006476:	6809      	ldr	r1, [r1, #0]
 8006478:	f009 fa97 	bl	800f9aa <f_write>
	currentPosition = f_tell(&file);
 800647c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006480:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	4a08      	ldr	r2, [pc, #32]	@ (80064a8 <write_image_file+0x164>)
 8006488:	6013      	str	r3, [r2, #0]

	f_close(&file);
 800648a:	f107 031c 	add.w	r3, r7, #28
 800648e:	4618      	mov	r0, r3
 8006490:	f009 fc7e 	bl	800fd90 <f_close>
 8006494:	e002      	b.n	800649c <write_image_file+0x158>
		    return;
 8006496:	bf00      	nop
 8006498:	e000      	b.n	800649c <write_image_file+0x158>
		    return;
 800649a:	bf00      	nop

}
 800649c:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd90      	pop	{r4, r7, pc}
 80064a4:	20014724 	.word	0x20014724
 80064a8:	20014728 	.word	0x20014728

080064ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064b2:	2300      	movs	r3, #0
 80064b4:	607b      	str	r3, [r7, #4]
 80064b6:	4b10      	ldr	r3, [pc, #64]	@ (80064f8 <HAL_MspInit+0x4c>)
 80064b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ba:	4a0f      	ldr	r2, [pc, #60]	@ (80064f8 <HAL_MspInit+0x4c>)
 80064bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80064c2:	4b0d      	ldr	r3, [pc, #52]	@ (80064f8 <HAL_MspInit+0x4c>)
 80064c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ca:	607b      	str	r3, [r7, #4]
 80064cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80064ce:	2300      	movs	r3, #0
 80064d0:	603b      	str	r3, [r7, #0]
 80064d2:	4b09      	ldr	r3, [pc, #36]	@ (80064f8 <HAL_MspInit+0x4c>)
 80064d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d6:	4a08      	ldr	r2, [pc, #32]	@ (80064f8 <HAL_MspInit+0x4c>)
 80064d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80064de:	4b06      	ldr	r3, [pc, #24]	@ (80064f8 <HAL_MspInit+0x4c>)
 80064e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064e6:	603b      	str	r3, [r7, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064ea:	bf00      	nop
 80064ec:	370c      	adds	r7, #12
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40023800 	.word	0x40023800

080064fc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	@ 0x28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006504:	f107 0314 	add.w	r3, r7, #20
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	605a      	str	r2, [r3, #4]
 800650e:	609a      	str	r2, [r3, #8]
 8006510:	60da      	str	r2, [r3, #12]
 8006512:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a30      	ldr	r2, [pc, #192]	@ (80065dc <HAL_DAC_MspInit+0xe0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d159      	bne.n	80065d2 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800651e:	2300      	movs	r3, #0
 8006520:	613b      	str	r3, [r7, #16]
 8006522:	4b2f      	ldr	r3, [pc, #188]	@ (80065e0 <HAL_DAC_MspInit+0xe4>)
 8006524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006526:	4a2e      	ldr	r2, [pc, #184]	@ (80065e0 <HAL_DAC_MspInit+0xe4>)
 8006528:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800652c:	6413      	str	r3, [r2, #64]	@ 0x40
 800652e:	4b2c      	ldr	r3, [pc, #176]	@ (80065e0 <HAL_DAC_MspInit+0xe4>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006536:	613b      	str	r3, [r7, #16]
 8006538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	4b28      	ldr	r3, [pc, #160]	@ (80065e0 <HAL_DAC_MspInit+0xe4>)
 8006540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006542:	4a27      	ldr	r2, [pc, #156]	@ (80065e0 <HAL_DAC_MspInit+0xe4>)
 8006544:	f043 0301 	orr.w	r3, r3, #1
 8006548:	6313      	str	r3, [r2, #48]	@ 0x30
 800654a:	4b25      	ldr	r3, [pc, #148]	@ (80065e0 <HAL_DAC_MspInit+0xe4>)
 800654c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006556:	2310      	movs	r3, #16
 8006558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800655a:	2303      	movs	r3, #3
 800655c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800655e:	2300      	movs	r3, #0
 8006560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006562:	f107 0314 	add.w	r3, r7, #20
 8006566:	4619      	mov	r1, r3
 8006568:	481e      	ldr	r0, [pc, #120]	@ (80065e4 <HAL_DAC_MspInit+0xe8>)
 800656a:	f001 fafb 	bl	8007b64 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800656e:	4b1e      	ldr	r3, [pc, #120]	@ (80065e8 <HAL_DAC_MspInit+0xec>)
 8006570:	4a1e      	ldr	r2, [pc, #120]	@ (80065ec <HAL_DAC_MspInit+0xf0>)
 8006572:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8006574:	4b1c      	ldr	r3, [pc, #112]	@ (80065e8 <HAL_DAC_MspInit+0xec>)
 8006576:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800657a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800657c:	4b1a      	ldr	r3, [pc, #104]	@ (80065e8 <HAL_DAC_MspInit+0xec>)
 800657e:	2240      	movs	r2, #64	@ 0x40
 8006580:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006582:	4b19      	ldr	r3, [pc, #100]	@ (80065e8 <HAL_DAC_MspInit+0xec>)
 8006584:	2200      	movs	r2, #0
 8006586:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8006588:	4b17      	ldr	r3, [pc, #92]	@ (80065e8 <HAL_DAC_MspInit+0xec>)
 800658a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800658e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006590:	4b15      	ldr	r3, [pc, #84]	@ (80065e8 <HAL_DAC_MspInit+0xec>)
 8006592:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006596:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006598:	4b13      	ldr	r3, [pc, #76]	@ (80065e8 <HAL_DAC_MspInit+0xec>)
 800659a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800659e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80065a0:	4b11      	ldr	r3, [pc, #68]	@ (80065e8 <HAL_DAC_MspInit+0xec>)
 80065a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065a6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80065a8:	4b0f      	ldr	r3, [pc, #60]	@ (80065e8 <HAL_DAC_MspInit+0xec>)
 80065aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80065ae:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065b0:	4b0d      	ldr	r3, [pc, #52]	@ (80065e8 <HAL_DAC_MspInit+0xec>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80065b6:	480c      	ldr	r0, [pc, #48]	@ (80065e8 <HAL_DAC_MspInit+0xec>)
 80065b8:	f000 fed2 	bl	8007360 <HAL_DMA_Init>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80065c2:	f7ff f879 	bl	80056b8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a07      	ldr	r2, [pc, #28]	@ (80065e8 <HAL_DAC_MspInit+0xec>)
 80065ca:	609a      	str	r2, [r3, #8]
 80065cc:	4a06      	ldr	r2, [pc, #24]	@ (80065e8 <HAL_DAC_MspInit+0xec>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80065d2:	bf00      	nop
 80065d4:	3728      	adds	r7, #40	@ 0x28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	40007400 	.word	0x40007400
 80065e0:	40023800 	.word	0x40023800
 80065e4:	40020000 	.word	0x40020000
 80065e8:	20014198 	.word	0x20014198
 80065ec:	40026088 	.word	0x40026088

080065f0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b08a      	sub	sp, #40	@ 0x28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065f8:	f107 0314 	add.w	r3, r7, #20
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	605a      	str	r2, [r3, #4]
 8006602:	609a      	str	r2, [r3, #8]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a31      	ldr	r2, [pc, #196]	@ (80066d4 <HAL_SD_MspInit+0xe4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d15b      	bne.n	80066ca <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006612:	2300      	movs	r3, #0
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	4b30      	ldr	r3, [pc, #192]	@ (80066d8 <HAL_SD_MspInit+0xe8>)
 8006618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800661a:	4a2f      	ldr	r2, [pc, #188]	@ (80066d8 <HAL_SD_MspInit+0xe8>)
 800661c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006620:	6453      	str	r3, [r2, #68]	@ 0x44
 8006622:	4b2d      	ldr	r3, [pc, #180]	@ (80066d8 <HAL_SD_MspInit+0xe8>)
 8006624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006626:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	4b29      	ldr	r3, [pc, #164]	@ (80066d8 <HAL_SD_MspInit+0xe8>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006636:	4a28      	ldr	r2, [pc, #160]	@ (80066d8 <HAL_SD_MspInit+0xe8>)
 8006638:	f043 0304 	orr.w	r3, r3, #4
 800663c:	6313      	str	r3, [r2, #48]	@ 0x30
 800663e:	4b26      	ldr	r3, [pc, #152]	@ (80066d8 <HAL_SD_MspInit+0xe8>)
 8006640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800664a:	2300      	movs	r3, #0
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	4b22      	ldr	r3, [pc, #136]	@ (80066d8 <HAL_SD_MspInit+0xe8>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006652:	4a21      	ldr	r2, [pc, #132]	@ (80066d8 <HAL_SD_MspInit+0xe8>)
 8006654:	f043 0308 	orr.w	r3, r3, #8
 8006658:	6313      	str	r3, [r2, #48]	@ 0x30
 800665a:	4b1f      	ldr	r3, [pc, #124]	@ (80066d8 <HAL_SD_MspInit+0xe8>)
 800665c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	60bb      	str	r3, [r7, #8]
 8006664:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006666:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800666a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800666c:	2302      	movs	r3, #2
 800666e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006670:	2301      	movs	r3, #1
 8006672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006674:	2303      	movs	r3, #3
 8006676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006678:	230c      	movs	r3, #12
 800667a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800667c:	f107 0314 	add.w	r3, r7, #20
 8006680:	4619      	mov	r1, r3
 8006682:	4816      	ldr	r0, [pc, #88]	@ (80066dc <HAL_SD_MspInit+0xec>)
 8006684:	f001 fa6e 	bl	8007b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800668c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800668e:	2302      	movs	r3, #2
 8006690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006692:	2300      	movs	r3, #0
 8006694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006696:	2303      	movs	r3, #3
 8006698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800669a:	230c      	movs	r3, #12
 800669c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800669e:	f107 0314 	add.w	r3, r7, #20
 80066a2:	4619      	mov	r1, r3
 80066a4:	480d      	ldr	r0, [pc, #52]	@ (80066dc <HAL_SD_MspInit+0xec>)
 80066a6:	f001 fa5d 	bl	8007b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80066aa:	2304      	movs	r3, #4
 80066ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ae:	2302      	movs	r3, #2
 80066b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066b2:	2301      	movs	r3, #1
 80066b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066b6:	2303      	movs	r3, #3
 80066b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80066ba:	230c      	movs	r3, #12
 80066bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066be:	f107 0314 	add.w	r3, r7, #20
 80066c2:	4619      	mov	r1, r3
 80066c4:	4806      	ldr	r0, [pc, #24]	@ (80066e0 <HAL_SD_MspInit+0xf0>)
 80066c6:	f001 fa4d 	bl	8007b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80066ca:	bf00      	nop
 80066cc:	3728      	adds	r7, #40	@ 0x28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	40012c00 	.word	0x40012c00
 80066d8:	40023800 	.word	0x40023800
 80066dc:	40020800 	.word	0x40020800
 80066e0:	40020c00 	.word	0x40020c00

080066e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08c      	sub	sp, #48	@ 0x30
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066ec:	f107 031c 	add.w	r3, r7, #28
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	605a      	str	r2, [r3, #4]
 80066f6:	609a      	str	r2, [r3, #8]
 80066f8:	60da      	str	r2, [r3, #12]
 80066fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a74      	ldr	r2, [pc, #464]	@ (80068d4 <HAL_SPI_MspInit+0x1f0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	f040 8089 	bne.w	800681a <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006708:	2300      	movs	r3, #0
 800670a:	61bb      	str	r3, [r7, #24]
 800670c:	4b72      	ldr	r3, [pc, #456]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 800670e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006710:	4a71      	ldr	r2, [pc, #452]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 8006712:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006716:	6453      	str	r3, [r2, #68]	@ 0x44
 8006718:	4b6f      	ldr	r3, [pc, #444]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 800671a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006720:	61bb      	str	r3, [r7, #24]
 8006722:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006724:	2300      	movs	r3, #0
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	4b6b      	ldr	r3, [pc, #428]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 800672a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800672c:	4a6a      	ldr	r2, [pc, #424]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 800672e:	f043 0301 	orr.w	r3, r3, #1
 8006732:	6313      	str	r3, [r2, #48]	@ 0x30
 8006734:	4b68      	ldr	r3, [pc, #416]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 8006736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006740:	23e0      	movs	r3, #224	@ 0xe0
 8006742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006744:	2302      	movs	r3, #2
 8006746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006748:	2300      	movs	r3, #0
 800674a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800674c:	2303      	movs	r3, #3
 800674e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006750:	2305      	movs	r3, #5
 8006752:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006754:	f107 031c 	add.w	r3, r7, #28
 8006758:	4619      	mov	r1, r3
 800675a:	4860      	ldr	r0, [pc, #384]	@ (80068dc <HAL_SPI_MspInit+0x1f8>)
 800675c:	f001 fa02 	bl	8007b64 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8006760:	4b5f      	ldr	r3, [pc, #380]	@ (80068e0 <HAL_SPI_MspInit+0x1fc>)
 8006762:	4a60      	ldr	r2, [pc, #384]	@ (80068e4 <HAL_SPI_MspInit+0x200>)
 8006764:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8006766:	4b5e      	ldr	r3, [pc, #376]	@ (80068e0 <HAL_SPI_MspInit+0x1fc>)
 8006768:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800676c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800676e:	4b5c      	ldr	r3, [pc, #368]	@ (80068e0 <HAL_SPI_MspInit+0x1fc>)
 8006770:	2240      	movs	r2, #64	@ 0x40
 8006772:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006774:	4b5a      	ldr	r3, [pc, #360]	@ (80068e0 <HAL_SPI_MspInit+0x1fc>)
 8006776:	2200      	movs	r2, #0
 8006778:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800677a:	4b59      	ldr	r3, [pc, #356]	@ (80068e0 <HAL_SPI_MspInit+0x1fc>)
 800677c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006780:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006782:	4b57      	ldr	r3, [pc, #348]	@ (80068e0 <HAL_SPI_MspInit+0x1fc>)
 8006784:	2200      	movs	r2, #0
 8006786:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006788:	4b55      	ldr	r3, [pc, #340]	@ (80068e0 <HAL_SPI_MspInit+0x1fc>)
 800678a:	2200      	movs	r2, #0
 800678c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800678e:	4b54      	ldr	r3, [pc, #336]	@ (80068e0 <HAL_SPI_MspInit+0x1fc>)
 8006790:	2200      	movs	r2, #0
 8006792:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006794:	4b52      	ldr	r3, [pc, #328]	@ (80068e0 <HAL_SPI_MspInit+0x1fc>)
 8006796:	2200      	movs	r2, #0
 8006798:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800679a:	4b51      	ldr	r3, [pc, #324]	@ (80068e0 <HAL_SPI_MspInit+0x1fc>)
 800679c:	2200      	movs	r2, #0
 800679e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80067a0:	484f      	ldr	r0, [pc, #316]	@ (80068e0 <HAL_SPI_MspInit+0x1fc>)
 80067a2:	f000 fddd 	bl	8007360 <HAL_DMA_Init>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80067ac:	f7fe ff84 	bl	80056b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a4b      	ldr	r2, [pc, #300]	@ (80068e0 <HAL_SPI_MspInit+0x1fc>)
 80067b4:	649a      	str	r2, [r3, #72]	@ 0x48
 80067b6:	4a4a      	ldr	r2, [pc, #296]	@ (80068e0 <HAL_SPI_MspInit+0x1fc>)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80067bc:	4b4a      	ldr	r3, [pc, #296]	@ (80068e8 <HAL_SPI_MspInit+0x204>)
 80067be:	4a4b      	ldr	r2, [pc, #300]	@ (80068ec <HAL_SPI_MspInit+0x208>)
 80067c0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80067c2:	4b49      	ldr	r3, [pc, #292]	@ (80068e8 <HAL_SPI_MspInit+0x204>)
 80067c4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80067c8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067ca:	4b47      	ldr	r3, [pc, #284]	@ (80068e8 <HAL_SPI_MspInit+0x204>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067d0:	4b45      	ldr	r3, [pc, #276]	@ (80068e8 <HAL_SPI_MspInit+0x204>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80067d6:	4b44      	ldr	r3, [pc, #272]	@ (80068e8 <HAL_SPI_MspInit+0x204>)
 80067d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80067dc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067de:	4b42      	ldr	r3, [pc, #264]	@ (80068e8 <HAL_SPI_MspInit+0x204>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067e4:	4b40      	ldr	r3, [pc, #256]	@ (80068e8 <HAL_SPI_MspInit+0x204>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80067ea:	4b3f      	ldr	r3, [pc, #252]	@ (80068e8 <HAL_SPI_MspInit+0x204>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80067f0:	4b3d      	ldr	r3, [pc, #244]	@ (80068e8 <HAL_SPI_MspInit+0x204>)
 80067f2:	2200      	movs	r2, #0
 80067f4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067f6:	4b3c      	ldr	r3, [pc, #240]	@ (80068e8 <HAL_SPI_MspInit+0x204>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80067fc:	483a      	ldr	r0, [pc, #232]	@ (80068e8 <HAL_SPI_MspInit+0x204>)
 80067fe:	f000 fdaf 	bl	8007360 <HAL_DMA_Init>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8006808:	f7fe ff56 	bl	80056b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a36      	ldr	r2, [pc, #216]	@ (80068e8 <HAL_SPI_MspInit+0x204>)
 8006810:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006812:	4a35      	ldr	r2, [pc, #212]	@ (80068e8 <HAL_SPI_MspInit+0x204>)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006818:	e057      	b.n	80068ca <HAL_SPI_MspInit+0x1e6>
  else if(hspi->Instance==SPI2)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a34      	ldr	r2, [pc, #208]	@ (80068f0 <HAL_SPI_MspInit+0x20c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d152      	bne.n	80068ca <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006824:	2300      	movs	r3, #0
 8006826:	613b      	str	r3, [r7, #16]
 8006828:	4b2b      	ldr	r3, [pc, #172]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 800682a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682c:	4a2a      	ldr	r2, [pc, #168]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 800682e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006832:	6413      	str	r3, [r2, #64]	@ 0x40
 8006834:	4b28      	ldr	r3, [pc, #160]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 8006836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006838:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	4b24      	ldr	r3, [pc, #144]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 8006846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006848:	4a23      	ldr	r2, [pc, #140]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 800684a:	f043 0304 	orr.w	r3, r3, #4
 800684e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006850:	4b21      	ldr	r3, [pc, #132]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 8006852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006854:	f003 0304 	and.w	r3, r3, #4
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800685c:	2300      	movs	r3, #0
 800685e:	60bb      	str	r3, [r7, #8]
 8006860:	4b1d      	ldr	r3, [pc, #116]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 8006862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006864:	4a1c      	ldr	r2, [pc, #112]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 8006866:	f043 0302 	orr.w	r3, r3, #2
 800686a:	6313      	str	r3, [r2, #48]	@ 0x30
 800686c:	4b1a      	ldr	r3, [pc, #104]	@ (80068d8 <HAL_SPI_MspInit+0x1f4>)
 800686e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	60bb      	str	r3, [r7, #8]
 8006876:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006878:	2308      	movs	r3, #8
 800687a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800687c:	2302      	movs	r3, #2
 800687e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006880:	2300      	movs	r3, #0
 8006882:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006884:	2303      	movs	r3, #3
 8006886:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006888:	2305      	movs	r3, #5
 800688a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800688c:	f107 031c 	add.w	r3, r7, #28
 8006890:	4619      	mov	r1, r3
 8006892:	4818      	ldr	r0, [pc, #96]	@ (80068f4 <HAL_SPI_MspInit+0x210>)
 8006894:	f001 f966 	bl	8007b64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006898:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800689c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800689e:	2302      	movs	r3, #2
 80068a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068a6:	2303      	movs	r3, #3
 80068a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80068aa:	2305      	movs	r3, #5
 80068ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068ae:	f107 031c 	add.w	r3, r7, #28
 80068b2:	4619      	mov	r1, r3
 80068b4:	4810      	ldr	r0, [pc, #64]	@ (80068f8 <HAL_SPI_MspInit+0x214>)
 80068b6:	f001 f955 	bl	8007b64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80068ba:	2200      	movs	r2, #0
 80068bc:	2100      	movs	r1, #0
 80068be:	2024      	movs	r0, #36	@ 0x24
 80068c0:	f000 faef 	bl	8006ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80068c4:	2024      	movs	r0, #36	@ 0x24
 80068c6:	f000 fb08 	bl	8006eda <HAL_NVIC_EnableIRQ>
}
 80068ca:	bf00      	nop
 80068cc:	3730      	adds	r7, #48	@ 0x30
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	40013000 	.word	0x40013000
 80068d8:	40023800 	.word	0x40023800
 80068dc:	40020000 	.word	0x40020000
 80068e0:	2001432c 	.word	0x2001432c
 80068e4:	40026458 	.word	0x40026458
 80068e8:	2001438c 	.word	0x2001438c
 80068ec:	40026410 	.word	0x40026410
 80068f0:	40003800 	.word	0x40003800
 80068f4:	40020800 	.word	0x40020800
 80068f8:	40020400 	.word	0x40020400

080068fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800690c:	d10e      	bne.n	800692c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800690e:	2300      	movs	r3, #0
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	4b16      	ldr	r3, [pc, #88]	@ (800696c <HAL_TIM_Base_MspInit+0x70>)
 8006914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006916:	4a15      	ldr	r2, [pc, #84]	@ (800696c <HAL_TIM_Base_MspInit+0x70>)
 8006918:	f043 0301 	orr.w	r3, r3, #1
 800691c:	6413      	str	r3, [r2, #64]	@ 0x40
 800691e:	4b13      	ldr	r3, [pc, #76]	@ (800696c <HAL_TIM_Base_MspInit+0x70>)
 8006920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800692a:	e01a      	b.n	8006962 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a0f      	ldr	r2, [pc, #60]	@ (8006970 <HAL_TIM_Base_MspInit+0x74>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d115      	bne.n	8006962 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006936:	2300      	movs	r3, #0
 8006938:	60bb      	str	r3, [r7, #8]
 800693a:	4b0c      	ldr	r3, [pc, #48]	@ (800696c <HAL_TIM_Base_MspInit+0x70>)
 800693c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693e:	4a0b      	ldr	r2, [pc, #44]	@ (800696c <HAL_TIM_Base_MspInit+0x70>)
 8006940:	f043 0304 	orr.w	r3, r3, #4
 8006944:	6413      	str	r3, [r2, #64]	@ 0x40
 8006946:	4b09      	ldr	r3, [pc, #36]	@ (800696c <HAL_TIM_Base_MspInit+0x70>)
 8006948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694a:	f003 0304 	and.w	r3, r3, #4
 800694e:	60bb      	str	r3, [r7, #8]
 8006950:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006952:	2200      	movs	r2, #0
 8006954:	2100      	movs	r1, #0
 8006956:	201e      	movs	r0, #30
 8006958:	f000 faa3 	bl	8006ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800695c:	201e      	movs	r0, #30
 800695e:	f000 fabc 	bl	8006eda <HAL_NVIC_EnableIRQ>
}
 8006962:	bf00      	nop
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40023800 	.word	0x40023800
 8006970:	40000800 	.word	0x40000800

08006974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08a      	sub	sp, #40	@ 0x28
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800697c:	f107 0314 	add.w	r3, r7, #20
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	609a      	str	r2, [r3, #8]
 8006988:	60da      	str	r2, [r3, #12]
 800698a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a1d      	ldr	r2, [pc, #116]	@ (8006a08 <HAL_UART_MspInit+0x94>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d134      	bne.n	8006a00 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006996:	2300      	movs	r3, #0
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	4b1c      	ldr	r3, [pc, #112]	@ (8006a0c <HAL_UART_MspInit+0x98>)
 800699c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800699e:	4a1b      	ldr	r2, [pc, #108]	@ (8006a0c <HAL_UART_MspInit+0x98>)
 80069a0:	f043 0310 	orr.w	r3, r3, #16
 80069a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80069a6:	4b19      	ldr	r3, [pc, #100]	@ (8006a0c <HAL_UART_MspInit+0x98>)
 80069a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069b2:	2300      	movs	r3, #0
 80069b4:	60fb      	str	r3, [r7, #12]
 80069b6:	4b15      	ldr	r3, [pc, #84]	@ (8006a0c <HAL_UART_MspInit+0x98>)
 80069b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ba:	4a14      	ldr	r2, [pc, #80]	@ (8006a0c <HAL_UART_MspInit+0x98>)
 80069bc:	f043 0301 	orr.w	r3, r3, #1
 80069c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80069c2:	4b12      	ldr	r3, [pc, #72]	@ (8006a0c <HAL_UART_MspInit+0x98>)
 80069c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80069ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80069d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069d4:	2302      	movs	r3, #2
 80069d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d8:	2300      	movs	r3, #0
 80069da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069dc:	2303      	movs	r3, #3
 80069de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80069e0:	2307      	movs	r3, #7
 80069e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069e4:	f107 0314 	add.w	r3, r7, #20
 80069e8:	4619      	mov	r1, r3
 80069ea:	4809      	ldr	r0, [pc, #36]	@ (8006a10 <HAL_UART_MspInit+0x9c>)
 80069ec:	f001 f8ba 	bl	8007b64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80069f0:	2200      	movs	r2, #0
 80069f2:	2100      	movs	r1, #0
 80069f4:	2025      	movs	r0, #37	@ 0x25
 80069f6:	f000 fa54 	bl	8006ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80069fa:	2025      	movs	r0, #37	@ 0x25
 80069fc:	f000 fa6d 	bl	8006eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006a00:	bf00      	nop
 8006a02:	3728      	adds	r7, #40	@ 0x28
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40011000 	.word	0x40011000
 8006a0c:	40023800 	.word	0x40023800
 8006a10:	40020000 	.word	0x40020000

08006a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006a18:	bf00      	nop
 8006a1a:	e7fd      	b.n	8006a18 <NMI_Handler+0x4>

08006a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a20:	bf00      	nop
 8006a22:	e7fd      	b.n	8006a20 <HardFault_Handler+0x4>

08006a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a28:	bf00      	nop
 8006a2a:	e7fd      	b.n	8006a28 <MemManage_Handler+0x4>

08006a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a30:	bf00      	nop
 8006a32:	e7fd      	b.n	8006a30 <BusFault_Handler+0x4>

08006a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a38:	bf00      	nop
 8006a3a:	e7fd      	b.n	8006a38 <UsageFault_Handler+0x4>

08006a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006a40:	bf00      	nop
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a4e:	bf00      	nop
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a5c:	f000 f902 	bl	8006c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a60:	bf00      	nop
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8006a68:	4802      	ldr	r0, [pc, #8]	@ (8006a74 <DMA1_Stream5_IRQHandler+0x10>)
 8006a6a:	f000 fe11 	bl	8007690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006a6e:	bf00      	nop
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20014198 	.word	0x20014198

08006a78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006a7c:	4802      	ldr	r0, [pc, #8]	@ (8006a88 <TIM4_IRQHandler+0x10>)
 8006a7e:	f004 fd19 	bl	800b4b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006a82:	bf00      	nop
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20014434 	.word	0x20014434

08006a8c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006a90:	4802      	ldr	r0, [pc, #8]	@ (8006a9c <SPI2_IRQHandler+0x10>)
 8006a92:	f003 fe75 	bl	800a780 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006a96:	bf00      	nop
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	200142d4 	.word	0x200142d4

08006aa0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006aa4:	4802      	ldr	r0, [pc, #8]	@ (8006ab0 <USART1_IRQHandler+0x10>)
 8006aa6:	f005 f90b 	bl	800bcc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006aaa:	bf00      	nop
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	2001447c 	.word	0x2001447c

08006ab4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006ab8:	4802      	ldr	r0, [pc, #8]	@ (8006ac4 <DMA2_Stream0_IRQHandler+0x10>)
 8006aba:	f000 fde9 	bl	8007690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006abe:	bf00      	nop
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	2001438c 	.word	0x2001438c

08006ac8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006acc:	4802      	ldr	r0, [pc, #8]	@ (8006ad8 <DMA2_Stream3_IRQHandler+0x10>)
 8006ace:	f000 fddf 	bl	8007690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006ad2:	bf00      	nop
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	2001432c 	.word	0x2001432c

08006adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ae4:	4a14      	ldr	r2, [pc, #80]	@ (8006b38 <_sbrk+0x5c>)
 8006ae6:	4b15      	ldr	r3, [pc, #84]	@ (8006b3c <_sbrk+0x60>)
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006af0:	4b13      	ldr	r3, [pc, #76]	@ (8006b40 <_sbrk+0x64>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006af8:	4b11      	ldr	r3, [pc, #68]	@ (8006b40 <_sbrk+0x64>)
 8006afa:	4a12      	ldr	r2, [pc, #72]	@ (8006b44 <_sbrk+0x68>)
 8006afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006afe:	4b10      	ldr	r3, [pc, #64]	@ (8006b40 <_sbrk+0x64>)
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4413      	add	r3, r2
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d207      	bcs.n	8006b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b0c:	f009 fea6 	bl	801085c <__errno>
 8006b10:	4603      	mov	r3, r0
 8006b12:	220c      	movs	r2, #12
 8006b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b16:	f04f 33ff 	mov.w	r3, #4294967295
 8006b1a:	e009      	b.n	8006b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b1c:	4b08      	ldr	r3, [pc, #32]	@ (8006b40 <_sbrk+0x64>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b22:	4b07      	ldr	r3, [pc, #28]	@ (8006b40 <_sbrk+0x64>)
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4413      	add	r3, r2
 8006b2a:	4a05      	ldr	r2, [pc, #20]	@ (8006b40 <_sbrk+0x64>)
 8006b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	20020000 	.word	0x20020000
 8006b3c:	00000400 	.word	0x00000400
 8006b40:	2001472c 	.word	0x2001472c
 8006b44:	200148b8 	.word	0x200148b8

08006b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b4c:	4b06      	ldr	r3, [pc, #24]	@ (8006b68 <SystemInit+0x20>)
 8006b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b52:	4a05      	ldr	r2, [pc, #20]	@ (8006b68 <SystemInit+0x20>)
 8006b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b5c:	bf00      	nop
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	e000ed00 	.word	0xe000ed00

08006b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006ba4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006b70:	f7ff ffea 	bl	8006b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006b74:	480c      	ldr	r0, [pc, #48]	@ (8006ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006b76:	490d      	ldr	r1, [pc, #52]	@ (8006bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006b78:	4a0d      	ldr	r2, [pc, #52]	@ (8006bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b7c:	e002      	b.n	8006b84 <LoopCopyDataInit>

08006b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b82:	3304      	adds	r3, #4

08006b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b88:	d3f9      	bcc.n	8006b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8006bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006b8c:	4c0a      	ldr	r4, [pc, #40]	@ (8006bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b90:	e001      	b.n	8006b96 <LoopFillZerobss>

08006b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b94:	3204      	adds	r2, #4

08006b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b98:	d3fb      	bcc.n	8006b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006b9a:	f009 fe65 	bl	8010868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b9e:	f7fd ffdd 	bl	8004b5c <main>
  bx  lr    
 8006ba2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006bac:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8006bb0:	08011a78 	.word	0x08011a78
  ldr r2, =_sbss
 8006bb4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8006bb8:	200148b8 	.word	0x200148b8

08006bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006bbc:	e7fe      	b.n	8006bbc <ADC_IRQHandler>
	...

08006bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006c00 <HAL_Init+0x40>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8006c00 <HAL_Init+0x40>)
 8006bca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006c00 <HAL_Init+0x40>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8006c00 <HAL_Init+0x40>)
 8006bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006bdc:	4b08      	ldr	r3, [pc, #32]	@ (8006c00 <HAL_Init+0x40>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a07      	ldr	r2, [pc, #28]	@ (8006c00 <HAL_Init+0x40>)
 8006be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006be8:	2003      	movs	r0, #3
 8006bea:	f000 f94f 	bl	8006e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006bee:	200f      	movs	r0, #15
 8006bf0:	f000 f808 	bl	8006c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006bf4:	f7ff fc5a 	bl	80064ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	40023c00 	.word	0x40023c00

08006c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c0c:	4b12      	ldr	r3, [pc, #72]	@ (8006c58 <HAL_InitTick+0x54>)
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	4b12      	ldr	r3, [pc, #72]	@ (8006c5c <HAL_InitTick+0x58>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	4619      	mov	r1, r3
 8006c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c22:	4618      	mov	r0, r3
 8006c24:	f000 f967 	bl	8006ef6 <HAL_SYSTICK_Config>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e00e      	b.n	8006c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b0f      	cmp	r3, #15
 8006c36:	d80a      	bhi.n	8006c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c38:	2200      	movs	r2, #0
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c40:	f000 f92f 	bl	8006ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c44:	4a06      	ldr	r2, [pc, #24]	@ (8006c60 <HAL_InitTick+0x5c>)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e000      	b.n	8006c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	20000010 	.word	0x20000010
 8006c5c:	20000018 	.word	0x20000018
 8006c60:	20000014 	.word	0x20000014

08006c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c68:	4b06      	ldr	r3, [pc, #24]	@ (8006c84 <HAL_IncTick+0x20>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4b06      	ldr	r3, [pc, #24]	@ (8006c88 <HAL_IncTick+0x24>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4413      	add	r3, r2
 8006c74:	4a04      	ldr	r2, [pc, #16]	@ (8006c88 <HAL_IncTick+0x24>)
 8006c76:	6013      	str	r3, [r2, #0]
}
 8006c78:	bf00      	nop
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20000018 	.word	0x20000018
 8006c88:	20014730 	.word	0x20014730

08006c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8006c90:	4b03      	ldr	r3, [pc, #12]	@ (8006ca0 <HAL_GetTick+0x14>)
 8006c92:	681b      	ldr	r3, [r3, #0]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	20014730 	.word	0x20014730

08006ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006cac:	f7ff ffee 	bl	8006c8c <HAL_GetTick>
 8006cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbc:	d005      	beq.n	8006cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8006ce8 <HAL_Delay+0x44>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006cca:	bf00      	nop
 8006ccc:	f7ff ffde 	bl	8006c8c <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d8f7      	bhi.n	8006ccc <HAL_Delay+0x28>
  {
  }
}
 8006cdc:	bf00      	nop
 8006cde:	bf00      	nop
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20000018 	.word	0x20000018

08006cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8006d30 <__NVIC_SetPriorityGrouping+0x44>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006d08:	4013      	ands	r3, r2
 8006d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d1e:	4a04      	ldr	r2, [pc, #16]	@ (8006d30 <__NVIC_SetPriorityGrouping+0x44>)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	60d3      	str	r3, [r2, #12]
}
 8006d24:	bf00      	nop
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	e000ed00 	.word	0xe000ed00

08006d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d38:	4b04      	ldr	r3, [pc, #16]	@ (8006d4c <__NVIC_GetPriorityGrouping+0x18>)
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	0a1b      	lsrs	r3, r3, #8
 8006d3e:	f003 0307 	and.w	r3, r3, #7
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	e000ed00 	.word	0xe000ed00

08006d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	4603      	mov	r3, r0
 8006d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	db0b      	blt.n	8006d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	f003 021f 	and.w	r2, r3, #31
 8006d68:	4907      	ldr	r1, [pc, #28]	@ (8006d88 <__NVIC_EnableIRQ+0x38>)
 8006d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d6e:	095b      	lsrs	r3, r3, #5
 8006d70:	2001      	movs	r0, #1
 8006d72:	fa00 f202 	lsl.w	r2, r0, r2
 8006d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	e000e100 	.word	0xe000e100

08006d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	6039      	str	r1, [r7, #0]
 8006d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	db0a      	blt.n	8006db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	490c      	ldr	r1, [pc, #48]	@ (8006dd8 <__NVIC_SetPriority+0x4c>)
 8006da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006daa:	0112      	lsls	r2, r2, #4
 8006dac:	b2d2      	uxtb	r2, r2
 8006dae:	440b      	add	r3, r1
 8006db0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006db4:	e00a      	b.n	8006dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	4908      	ldr	r1, [pc, #32]	@ (8006ddc <__NVIC_SetPriority+0x50>)
 8006dbc:	79fb      	ldrb	r3, [r7, #7]
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	3b04      	subs	r3, #4
 8006dc4:	0112      	lsls	r2, r2, #4
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	440b      	add	r3, r1
 8006dca:	761a      	strb	r2, [r3, #24]
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	e000e100 	.word	0xe000e100
 8006ddc:	e000ed00 	.word	0xe000ed00

08006de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b089      	sub	sp, #36	@ 0x24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f003 0307 	and.w	r3, r3, #7
 8006df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	f1c3 0307 	rsb	r3, r3, #7
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	bf28      	it	cs
 8006dfe:	2304      	movcs	r3, #4
 8006e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	3304      	adds	r3, #4
 8006e06:	2b06      	cmp	r3, #6
 8006e08:	d902      	bls.n	8006e10 <NVIC_EncodePriority+0x30>
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	3b03      	subs	r3, #3
 8006e0e:	e000      	b.n	8006e12 <NVIC_EncodePriority+0x32>
 8006e10:	2300      	movs	r3, #0
 8006e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e14:	f04f 32ff 	mov.w	r2, #4294967295
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1e:	43da      	mvns	r2, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	401a      	ands	r2, r3
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e28:	f04f 31ff 	mov.w	r1, #4294967295
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e32:	43d9      	mvns	r1, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e38:	4313      	orrs	r3, r2
         );
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3724      	adds	r7, #36	@ 0x24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
	...

08006e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e58:	d301      	bcc.n	8006e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e00f      	b.n	8006e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e88 <SysTick_Config+0x40>)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e66:	210f      	movs	r1, #15
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6c:	f7ff ff8e 	bl	8006d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e70:	4b05      	ldr	r3, [pc, #20]	@ (8006e88 <SysTick_Config+0x40>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e76:	4b04      	ldr	r3, [pc, #16]	@ (8006e88 <SysTick_Config+0x40>)
 8006e78:	2207      	movs	r2, #7
 8006e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	e000e010 	.word	0xe000e010

08006e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff ff29 	bl	8006cec <__NVIC_SetPriorityGrouping>
}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	607a      	str	r2, [r7, #4]
 8006eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006eb4:	f7ff ff3e 	bl	8006d34 <__NVIC_GetPriorityGrouping>
 8006eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	6978      	ldr	r0, [r7, #20]
 8006ec0:	f7ff ff8e 	bl	8006de0 <NVIC_EncodePriority>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eca:	4611      	mov	r1, r2
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff ff5d 	bl	8006d8c <__NVIC_SetPriority>
}
 8006ed2:	bf00      	nop
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7ff ff31 	bl	8006d50 <__NVIC_EnableIRQ>
}
 8006eee:	bf00      	nop
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b082      	sub	sp, #8
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7ff ffa2 	bl	8006e48 <SysTick_Config>
 8006f04:	4603      	mov	r3, r0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e014      	b.n	8006f4a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	791b      	ldrb	r3, [r3, #4]
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d105      	bne.n	8006f36 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f7ff fae3 	bl	80064fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2202      	movs	r2, #2
 8006f3a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
	...

08006f54 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e0a2      	b.n	80070b6 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	795b      	ldrb	r3, [r3, #5]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_DAC_Start_DMA+0x28>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e09c      	b.n	80070b6 <HAL_DAC_Start_DMA+0x162>
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2202      	movs	r2, #2
 8006f86:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d129      	bne.n	8006fe2 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	4a4b      	ldr	r2, [pc, #300]	@ (80070c0 <HAL_DAC_Start_DMA+0x16c>)
 8006f94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80070c4 <HAL_DAC_Start_DMA+0x170>)
 8006f9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	4a49      	ldr	r2, [pc, #292]	@ (80070c8 <HAL_DAC_Start_DMA+0x174>)
 8006fa4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006fb4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_DAC_Start_DMA+0x70>
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d005      	beq.n	8006fce <HAL_DAC_Start_DMA+0x7a>
 8006fc2:	e009      	b.n	8006fd8 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3308      	adds	r3, #8
 8006fca:	613b      	str	r3, [r7, #16]
        break;
 8006fcc:	e033      	b.n	8007036 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	613b      	str	r3, [r7, #16]
        break;
 8006fd6:	e02e      	b.n	8007036 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3310      	adds	r3, #16
 8006fde:	613b      	str	r3, [r7, #16]
        break;
 8006fe0:	e029      	b.n	8007036 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	4a39      	ldr	r2, [pc, #228]	@ (80070cc <HAL_DAC_Start_DMA+0x178>)
 8006fe8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	4a38      	ldr	r2, [pc, #224]	@ (80070d0 <HAL_DAC_Start_DMA+0x17c>)
 8006ff0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	4a37      	ldr	r2, [pc, #220]	@ (80070d4 <HAL_DAC_Start_DMA+0x180>)
 8006ff8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007008:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_DAC_Start_DMA+0xc4>
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	2b04      	cmp	r3, #4
 8007014:	d005      	beq.n	8007022 <HAL_DAC_Start_DMA+0xce>
 8007016:	e009      	b.n	800702c <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3314      	adds	r3, #20
 800701e:	613b      	str	r3, [r7, #16]
        break;
 8007020:	e009      	b.n	8007036 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	3318      	adds	r3, #24
 8007028:	613b      	str	r3, [r7, #16]
        break;
 800702a:	e004      	b.n	8007036 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	331c      	adds	r3, #28
 8007032:	613b      	str	r3, [r7, #16]
        break;
 8007034:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d111      	bne.n	8007060 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800704a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6898      	ldr	r0, [r3, #8]
 8007050:	6879      	ldr	r1, [r7, #4]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	f000 fa31 	bl	80074bc <HAL_DMA_Start_IT>
 800705a:	4603      	mov	r3, r0
 800705c:	75fb      	strb	r3, [r7, #23]
 800705e:	e010      	b.n	8007082 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800706e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68d8      	ldr	r0, [r3, #12]
 8007074:	6879      	ldr	r1, [r7, #4]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	f000 fa1f 	bl	80074bc <HAL_DMA_Start_IT>
 800707e:	4603      	mov	r3, r0
 8007080:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007088:	7dfb      	ldrb	r3, [r7, #23]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10c      	bne.n	80070a8 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6819      	ldr	r1, [r3, #0]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	f003 0310 	and.w	r3, r3, #16
 800709a:	2201      	movs	r2, #1
 800709c:	409a      	lsls	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	e005      	b.n	80070b4 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	f043 0204 	orr.w	r2, r3, #4
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	0800724d 	.word	0x0800724d
 80070c4:	0800726f 	.word	0x0800726f
 80070c8:	0800728b 	.word	0x0800728b
 80070cc:	080072f5 	.word	0x080072f5
 80070d0:	08007317 	.word	0x08007317
 80070d4:	08007333 	.word	0x08007333

080070d8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e03e      	b.n	800716a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6819      	ldr	r1, [r3, #0]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80070fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007100:	43da      	mvns	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	400a      	ands	r2, r1
 8007108:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6819      	ldr	r1, [r3, #0]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	f003 0310 	and.w	r3, r3, #16
 8007116:	2201      	movs	r2, #1
 8007118:	fa02 f303 	lsl.w	r3, r2, r3
 800711c:	43da      	mvns	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	400a      	ands	r2, r1
 8007124:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10d      	bne.n	8007148 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fa1b 	bl	800756c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	e00c      	b.n	8007162 <HAL_DAC_Stop_DMA+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	4618      	mov	r0, r3
 800714e:	f000 fa0d 	bl	800756c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8007160:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800717a:	bf00      	nop
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800718e:	bf00      	nop
 8007190:	370c      	adds	r7, #12
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800719a:	b480      	push	{r7}
 800719c:	b089      	sub	sp, #36	@ 0x24
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <HAL_DAC_ConfigChannel+0x1c>
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e042      	b.n	8007240 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	795b      	ldrb	r3, [r3, #5]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <HAL_DAC_ConfigChannel+0x2c>
 80071c2:	2302      	movs	r3, #2
 80071c4:	e03c      	b.n	8007240 <HAL_DAC_ConfigChannel+0xa6>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2202      	movs	r2, #2
 80071d0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80071e4:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80071e8:	43db      	mvns	r3, r3
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	4013      	ands	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f003 0310 	and.w	r3, r3, #16
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	fa02 f303 	lsl.w	r3, r2, r3
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	4313      	orrs	r3, r2
 800720c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6819      	ldr	r1, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f003 0310 	and.w	r3, r3, #16
 8007222:	22c0      	movs	r2, #192	@ 0xc0
 8007224:	fa02 f303 	lsl.w	r3, r2, r3
 8007228:	43da      	mvns	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	400a      	ands	r2, r1
 8007230:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800723e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3724      	adds	r7, #36	@ 0x24
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007258:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f7ff ff89 	bl	8007172 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2201      	movs	r2, #1
 8007264:	711a      	strb	r2, [r3, #4]
}
 8007266:	bf00      	nop
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800727a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f7fd fc5d 	bl	8004b3c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007296:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	f043 0204 	orr.w	r2, r3, #4
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7ff ff6e 	bl	8007186 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	711a      	strb	r2, [r3, #4]
}
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007300:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7ff ffd8 	bl	80072b8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	711a      	strb	r2, [r3, #4]
}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007322:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7ff ffd1 	bl	80072cc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b084      	sub	sp, #16
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f043 0204 	orr.w	r2, r3, #4
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f7ff ffc7 	bl	80072e0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	711a      	strb	r2, [r3, #4]
}
 8007358:	bf00      	nop
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800736c:	f7ff fc8e 	bl	8006c8c <HAL_GetTick>
 8007370:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e099      	b.n	80074b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800739c:	e00f      	b.n	80073be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800739e:	f7ff fc75 	bl	8006c8c <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2b05      	cmp	r3, #5
 80073aa:	d908      	bls.n	80073be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2203      	movs	r2, #3
 80073b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e078      	b.n	80074b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e8      	bne.n	800739e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	4b38      	ldr	r3, [pc, #224]	@ (80074b8 <HAL_DMA_Init+0x158>)
 80073d8:	4013      	ands	r3, r2
 80073da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	4313      	orrs	r3, r2
 800740e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007414:	2b04      	cmp	r3, #4
 8007416:	d107      	bne.n	8007428 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007420:	4313      	orrs	r3, r2
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f023 0307 	bic.w	r3, r3, #7
 800743e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744e:	2b04      	cmp	r3, #4
 8007450:	d117      	bne.n	8007482 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00e      	beq.n	8007482 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fb01 	bl	8007a6c <DMA_CheckFifoParam>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2240      	movs	r2, #64	@ 0x40
 8007474:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800747e:	2301      	movs	r3, #1
 8007480:	e016      	b.n	80074b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fab8 	bl	8007a00 <DMA_CalcBaseAndBitshift>
 8007490:	4603      	mov	r3, r0
 8007492:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007498:	223f      	movs	r2, #63	@ 0x3f
 800749a:	409a      	lsls	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	f010803f 	.word	0xf010803f

080074bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_DMA_Start_IT+0x26>
 80074de:	2302      	movs	r3, #2
 80074e0:	e040      	b.n	8007564 <HAL_DMA_Start_IT+0xa8>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d12f      	bne.n	8007556 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2202      	movs	r2, #2
 80074fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	68b9      	ldr	r1, [r7, #8]
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 fa4a 	bl	80079a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007514:	223f      	movs	r2, #63	@ 0x3f
 8007516:	409a      	lsls	r2, r3
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f042 0216 	orr.w	r2, r2, #22
 800752a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f042 0208 	orr.w	r2, r2, #8
 8007542:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0201 	orr.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	e005      	b.n	8007562 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800755e:	2302      	movs	r3, #2
 8007560:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007562:	7dfb      	ldrb	r3, [r7, #23]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3718      	adds	r7, #24
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007578:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800757a:	f7ff fb87 	bl	8006c8c <HAL_GetTick>
 800757e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b02      	cmp	r3, #2
 800758a:	d008      	beq.n	800759e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2280      	movs	r2, #128	@ 0x80
 8007590:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e052      	b.n	8007644 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0216 	bic.w	r2, r2, #22
 80075ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695a      	ldr	r2, [r3, #20]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d103      	bne.n	80075ce <HAL_DMA_Abort+0x62>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d007      	beq.n	80075de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0208 	bic.w	r2, r2, #8
 80075dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0201 	bic.w	r2, r2, #1
 80075ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075ee:	e013      	b.n	8007618 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075f0:	f7ff fb4c 	bl	8006c8c <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b05      	cmp	r3, #5
 80075fc:	d90c      	bls.n	8007618 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2203      	movs	r2, #3
 8007608:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e015      	b.n	8007644 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e4      	bne.n	80075f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800762a:	223f      	movs	r2, #63	@ 0x3f
 800762c:	409a      	lsls	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800765a:	b2db      	uxtb	r3, r3
 800765c:	2b02      	cmp	r3, #2
 800765e:	d004      	beq.n	800766a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2280      	movs	r2, #128	@ 0x80
 8007664:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e00c      	b.n	8007684 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2205      	movs	r2, #5
 800766e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0201 	bic.w	r2, r2, #1
 8007680:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800769c:	4b8e      	ldr	r3, [pc, #568]	@ (80078d8 <HAL_DMA_IRQHandler+0x248>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a8e      	ldr	r2, [pc, #568]	@ (80078dc <HAL_DMA_IRQHandler+0x24c>)
 80076a2:	fba2 2303 	umull	r2, r3, r2, r3
 80076a6:	0a9b      	lsrs	r3, r3, #10
 80076a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076ba:	2208      	movs	r2, #8
 80076bc:	409a      	lsls	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	4013      	ands	r3, r2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d01a      	beq.n	80076fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0304 	and.w	r3, r3, #4
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d013      	beq.n	80076fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0204 	bic.w	r2, r2, #4
 80076e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076e8:	2208      	movs	r2, #8
 80076ea:	409a      	lsls	r2, r3
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f4:	f043 0201 	orr.w	r2, r3, #1
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007700:	2201      	movs	r2, #1
 8007702:	409a      	lsls	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4013      	ands	r3, r2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d012      	beq.n	8007732 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00b      	beq.n	8007732 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800771e:	2201      	movs	r2, #1
 8007720:	409a      	lsls	r2, r3
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800772a:	f043 0202 	orr.w	r2, r3, #2
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007736:	2204      	movs	r2, #4
 8007738:	409a      	lsls	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4013      	ands	r3, r2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d012      	beq.n	8007768 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00b      	beq.n	8007768 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007754:	2204      	movs	r2, #4
 8007756:	409a      	lsls	r2, r3
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007760:	f043 0204 	orr.w	r2, r3, #4
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800776c:	2210      	movs	r2, #16
 800776e:	409a      	lsls	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4013      	ands	r3, r2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d043      	beq.n	8007800 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0308 	and.w	r3, r3, #8
 8007782:	2b00      	cmp	r3, #0
 8007784:	d03c      	beq.n	8007800 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800778a:	2210      	movs	r2, #16
 800778c:	409a      	lsls	r2, r3
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d018      	beq.n	80077d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d108      	bne.n	80077c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d024      	beq.n	8007800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
 80077be:	e01f      	b.n	8007800 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d01b      	beq.n	8007800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	4798      	blx	r3
 80077d0:	e016      	b.n	8007800 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d107      	bne.n	80077f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0208 	bic.w	r2, r2, #8
 80077ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007804:	2220      	movs	r2, #32
 8007806:	409a      	lsls	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4013      	ands	r3, r2
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 808f 	beq.w	8007930 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0310 	and.w	r3, r3, #16
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 8087 	beq.w	8007930 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007826:	2220      	movs	r2, #32
 8007828:	409a      	lsls	r2, r3
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b05      	cmp	r3, #5
 8007838:	d136      	bne.n	80078a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0216 	bic.w	r2, r2, #22
 8007848:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	695a      	ldr	r2, [r3, #20]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007858:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d103      	bne.n	800786a <HAL_DMA_IRQHandler+0x1da>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007866:	2b00      	cmp	r3, #0
 8007868:	d007      	beq.n	800787a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 0208 	bic.w	r2, r2, #8
 8007878:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800787e:	223f      	movs	r2, #63	@ 0x3f
 8007880:	409a      	lsls	r2, r3
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800789a:	2b00      	cmp	r3, #0
 800789c:	d07e      	beq.n	800799c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	4798      	blx	r3
        }
        return;
 80078a6:	e079      	b.n	800799c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01d      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10d      	bne.n	80078e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d031      	beq.n	8007930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	4798      	blx	r3
 80078d4:	e02c      	b.n	8007930 <HAL_DMA_IRQHandler+0x2a0>
 80078d6:	bf00      	nop
 80078d8:	20000010 	.word	0x20000010
 80078dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d023      	beq.n	8007930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
 80078f0:	e01e      	b.n	8007930 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10f      	bne.n	8007920 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0210 	bic.w	r2, r2, #16
 800790e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007934:	2b00      	cmp	r3, #0
 8007936:	d032      	beq.n	800799e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d022      	beq.n	800798a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2205      	movs	r2, #5
 8007948:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0201 	bic.w	r2, r2, #1
 800795a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	3301      	adds	r3, #1
 8007960:	60bb      	str	r3, [r7, #8]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	429a      	cmp	r2, r3
 8007966:	d307      	bcc.n	8007978 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1f2      	bne.n	800795c <HAL_DMA_IRQHandler+0x2cc>
 8007976:	e000      	b.n	800797a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007978:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d005      	beq.n	800799e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	4798      	blx	r3
 800799a:	e000      	b.n	800799e <HAL_DMA_IRQHandler+0x30e>
        return;
 800799c:	bf00      	nop
    }
  }
}
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80079c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	2b40      	cmp	r3, #64	@ 0x40
 80079d0:	d108      	bne.n	80079e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80079e2:	e007      	b.n	80079f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	60da      	str	r2, [r3, #12]
}
 80079f4:	bf00      	nop
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	3b10      	subs	r3, #16
 8007a10:	4a14      	ldr	r2, [pc, #80]	@ (8007a64 <DMA_CalcBaseAndBitshift+0x64>)
 8007a12:	fba2 2303 	umull	r2, r3, r2, r3
 8007a16:	091b      	lsrs	r3, r3, #4
 8007a18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007a1a:	4a13      	ldr	r2, [pc, #76]	@ (8007a68 <DMA_CalcBaseAndBitshift+0x68>)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4413      	add	r3, r2
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d909      	bls.n	8007a42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007a36:	f023 0303 	bic.w	r3, r3, #3
 8007a3a:	1d1a      	adds	r2, r3, #4
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a40:	e007      	b.n	8007a52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	aaaaaaab 	.word	0xaaaaaaab
 8007a68:	080119cc 	.word	0x080119cc

08007a6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d11f      	bne.n	8007ac6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d856      	bhi.n	8007b3a <DMA_CheckFifoParam+0xce>
 8007a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a94 <DMA_CheckFifoParam+0x28>)
 8007a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a92:	bf00      	nop
 8007a94:	08007aa5 	.word	0x08007aa5
 8007a98:	08007ab7 	.word	0x08007ab7
 8007a9c:	08007aa5 	.word	0x08007aa5
 8007aa0:	08007b3b 	.word	0x08007b3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d046      	beq.n	8007b3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ab4:	e043      	b.n	8007b3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007abe:	d140      	bne.n	8007b42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ac4:	e03d      	b.n	8007b42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ace:	d121      	bne.n	8007b14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d837      	bhi.n	8007b46 <DMA_CheckFifoParam+0xda>
 8007ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8007adc <DMA_CheckFifoParam+0x70>)
 8007ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007adc:	08007aed 	.word	0x08007aed
 8007ae0:	08007af3 	.word	0x08007af3
 8007ae4:	08007aed 	.word	0x08007aed
 8007ae8:	08007b05 	.word	0x08007b05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	73fb      	strb	r3, [r7, #15]
      break;
 8007af0:	e030      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d025      	beq.n	8007b4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b02:	e022      	b.n	8007b4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007b0c:	d11f      	bne.n	8007b4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007b12:	e01c      	b.n	8007b4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d903      	bls.n	8007b22 <DMA_CheckFifoParam+0xb6>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	d003      	beq.n	8007b28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007b20:	e018      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	73fb      	strb	r3, [r7, #15]
      break;
 8007b26:	e015      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00e      	beq.n	8007b52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	73fb      	strb	r3, [r7, #15]
      break;
 8007b38:	e00b      	b.n	8007b52 <DMA_CheckFifoParam+0xe6>
      break;
 8007b3a:	bf00      	nop
 8007b3c:	e00a      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
      break;
 8007b3e:	bf00      	nop
 8007b40:	e008      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
      break;
 8007b42:	bf00      	nop
 8007b44:	e006      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
      break;
 8007b46:	bf00      	nop
 8007b48:	e004      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
      break;
 8007b4a:	bf00      	nop
 8007b4c:	e002      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
      break;   
 8007b4e:	bf00      	nop
 8007b50:	e000      	b.n	8007b54 <DMA_CheckFifoParam+0xe8>
      break;
 8007b52:	bf00      	nop
    }
  } 
  
  return status; 
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop

08007b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b089      	sub	sp, #36	@ 0x24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]
 8007b7e:	e16b      	b.n	8007e58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007b80:	2201      	movs	r2, #1
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	fa02 f303 	lsl.w	r3, r2, r3
 8007b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	4013      	ands	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	f040 815a 	bne.w	8007e52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d005      	beq.n	8007bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d130      	bne.n	8007c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	005b      	lsls	r3, r3, #1
 8007bc0:	2203      	movs	r2, #3
 8007bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc6:	43db      	mvns	r3, r3
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007bec:	2201      	movs	r2, #1
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf4:	43db      	mvns	r3, r3
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	091b      	lsrs	r3, r3, #4
 8007c02:	f003 0201 	and.w	r2, r3, #1
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	69ba      	ldr	r2, [r7, #24]
 8007c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d017      	beq.n	8007c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	2203      	movs	r2, #3
 8007c30:	fa02 f303 	lsl.w	r3, r2, r3
 8007c34:	43db      	mvns	r3, r3
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	4013      	ands	r3, r2
 8007c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	fa02 f303 	lsl.w	r3, r2, r3
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f003 0303 	and.w	r3, r3, #3
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d123      	bne.n	8007ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	08da      	lsrs	r2, r3, #3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3208      	adds	r2, #8
 8007c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	220f      	movs	r2, #15
 8007c78:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7c:	43db      	mvns	r3, r3
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	4013      	ands	r3, r2
 8007c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	691a      	ldr	r2, [r3, #16]
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	f003 0307 	and.w	r3, r3, #7
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	fa02 f303 	lsl.w	r3, r2, r3
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	08da      	lsrs	r2, r3, #3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	3208      	adds	r2, #8
 8007ca2:	69b9      	ldr	r1, [r7, #24]
 8007ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	2203      	movs	r2, #3
 8007cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb8:	43db      	mvns	r3, r3
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f003 0203 	and.w	r2, r3, #3
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	69ba      	ldr	r2, [r7, #24]
 8007cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 80b4 	beq.w	8007e52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	4b60      	ldr	r3, [pc, #384]	@ (8007e70 <HAL_GPIO_Init+0x30c>)
 8007cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cf2:	4a5f      	ldr	r2, [pc, #380]	@ (8007e70 <HAL_GPIO_Init+0x30c>)
 8007cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8007cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8007e70 <HAL_GPIO_Init+0x30c>)
 8007cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d06:	4a5b      	ldr	r2, [pc, #364]	@ (8007e74 <HAL_GPIO_Init+0x310>)
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	089b      	lsrs	r3, r3, #2
 8007d0c:	3302      	adds	r3, #2
 8007d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	f003 0303 	and.w	r3, r3, #3
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	220f      	movs	r2, #15
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	43db      	mvns	r3, r3
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	4013      	ands	r3, r2
 8007d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a52      	ldr	r2, [pc, #328]	@ (8007e78 <HAL_GPIO_Init+0x314>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d02b      	beq.n	8007d8a <HAL_GPIO_Init+0x226>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a51      	ldr	r2, [pc, #324]	@ (8007e7c <HAL_GPIO_Init+0x318>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d025      	beq.n	8007d86 <HAL_GPIO_Init+0x222>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a50      	ldr	r2, [pc, #320]	@ (8007e80 <HAL_GPIO_Init+0x31c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d01f      	beq.n	8007d82 <HAL_GPIO_Init+0x21e>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a4f      	ldr	r2, [pc, #316]	@ (8007e84 <HAL_GPIO_Init+0x320>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d019      	beq.n	8007d7e <HAL_GPIO_Init+0x21a>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a4e      	ldr	r2, [pc, #312]	@ (8007e88 <HAL_GPIO_Init+0x324>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d013      	beq.n	8007d7a <HAL_GPIO_Init+0x216>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a4d      	ldr	r2, [pc, #308]	@ (8007e8c <HAL_GPIO_Init+0x328>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d00d      	beq.n	8007d76 <HAL_GPIO_Init+0x212>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a4c      	ldr	r2, [pc, #304]	@ (8007e90 <HAL_GPIO_Init+0x32c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d007      	beq.n	8007d72 <HAL_GPIO_Init+0x20e>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a4b      	ldr	r2, [pc, #300]	@ (8007e94 <HAL_GPIO_Init+0x330>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d101      	bne.n	8007d6e <HAL_GPIO_Init+0x20a>
 8007d6a:	2307      	movs	r3, #7
 8007d6c:	e00e      	b.n	8007d8c <HAL_GPIO_Init+0x228>
 8007d6e:	2308      	movs	r3, #8
 8007d70:	e00c      	b.n	8007d8c <HAL_GPIO_Init+0x228>
 8007d72:	2306      	movs	r3, #6
 8007d74:	e00a      	b.n	8007d8c <HAL_GPIO_Init+0x228>
 8007d76:	2305      	movs	r3, #5
 8007d78:	e008      	b.n	8007d8c <HAL_GPIO_Init+0x228>
 8007d7a:	2304      	movs	r3, #4
 8007d7c:	e006      	b.n	8007d8c <HAL_GPIO_Init+0x228>
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e004      	b.n	8007d8c <HAL_GPIO_Init+0x228>
 8007d82:	2302      	movs	r3, #2
 8007d84:	e002      	b.n	8007d8c <HAL_GPIO_Init+0x228>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e000      	b.n	8007d8c <HAL_GPIO_Init+0x228>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	69fa      	ldr	r2, [r7, #28]
 8007d8e:	f002 0203 	and.w	r2, r2, #3
 8007d92:	0092      	lsls	r2, r2, #2
 8007d94:	4093      	lsls	r3, r2
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d9c:	4935      	ldr	r1, [pc, #212]	@ (8007e74 <HAL_GPIO_Init+0x310>)
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	089b      	lsrs	r3, r3, #2
 8007da2:	3302      	adds	r3, #2
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007daa:	4b3b      	ldr	r3, [pc, #236]	@ (8007e98 <HAL_GPIO_Init+0x334>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	43db      	mvns	r3, r3
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	4013      	ands	r3, r2
 8007db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007dce:	4a32      	ldr	r2, [pc, #200]	@ (8007e98 <HAL_GPIO_Init+0x334>)
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007dd4:	4b30      	ldr	r3, [pc, #192]	@ (8007e98 <HAL_GPIO_Init+0x334>)
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	43db      	mvns	r3, r3
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	4013      	ands	r3, r2
 8007de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007df8:	4a27      	ldr	r2, [pc, #156]	@ (8007e98 <HAL_GPIO_Init+0x334>)
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007dfe:	4b26      	ldr	r3, [pc, #152]	@ (8007e98 <HAL_GPIO_Init+0x334>)
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	43db      	mvns	r3, r3
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d003      	beq.n	8007e22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007e22:	4a1d      	ldr	r2, [pc, #116]	@ (8007e98 <HAL_GPIO_Init+0x334>)
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e28:	4b1b      	ldr	r3, [pc, #108]	@ (8007e98 <HAL_GPIO_Init+0x334>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	43db      	mvns	r3, r3
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	4013      	ands	r3, r2
 8007e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d003      	beq.n	8007e4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007e4c:	4a12      	ldr	r2, [pc, #72]	@ (8007e98 <HAL_GPIO_Init+0x334>)
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	3301      	adds	r3, #1
 8007e56:	61fb      	str	r3, [r7, #28]
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	2b0f      	cmp	r3, #15
 8007e5c:	f67f ae90 	bls.w	8007b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007e60:	bf00      	nop
 8007e62:	bf00      	nop
 8007e64:	3724      	adds	r7, #36	@ 0x24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	40023800 	.word	0x40023800
 8007e74:	40013800 	.word	0x40013800
 8007e78:	40020000 	.word	0x40020000
 8007e7c:	40020400 	.word	0x40020400
 8007e80:	40020800 	.word	0x40020800
 8007e84:	40020c00 	.word	0x40020c00
 8007e88:	40021000 	.word	0x40021000
 8007e8c:	40021400 	.word	0x40021400
 8007e90:	40021800 	.word	0x40021800
 8007e94:	40021c00 	.word	0x40021c00
 8007e98:	40013c00 	.word	0x40013c00

08007e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	807b      	strh	r3, [r7, #2]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007eac:	787b      	ldrb	r3, [r7, #1]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007eb2:	887a      	ldrh	r2, [r7, #2]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007eb8:	e003      	b.n	8007ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007eba:	887b      	ldrh	r3, [r7, #2]
 8007ebc:	041a      	lsls	r2, r3, #16
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	619a      	str	r2, [r3, #24]
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
	...

08007ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e267      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d075      	beq.n	8007fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007eee:	4b88      	ldr	r3, [pc, #544]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f003 030c 	and.w	r3, r3, #12
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	d00c      	beq.n	8007f14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007efa:	4b85      	ldr	r3, [pc, #532]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007f02:	2b08      	cmp	r3, #8
 8007f04:	d112      	bne.n	8007f2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f06:	4b82      	ldr	r3, [pc, #520]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f12:	d10b      	bne.n	8007f2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f14:	4b7e      	ldr	r3, [pc, #504]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d05b      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x108>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d157      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e242      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f34:	d106      	bne.n	8007f44 <HAL_RCC_OscConfig+0x74>
 8007f36:	4b76      	ldr	r3, [pc, #472]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a75      	ldr	r2, [pc, #468]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	e01d      	b.n	8007f80 <HAL_RCC_OscConfig+0xb0>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f4c:	d10c      	bne.n	8007f68 <HAL_RCC_OscConfig+0x98>
 8007f4e:	4b70      	ldr	r3, [pc, #448]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a6f      	ldr	r2, [pc, #444]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f58:	6013      	str	r3, [r2, #0]
 8007f5a:	4b6d      	ldr	r3, [pc, #436]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a6c      	ldr	r2, [pc, #432]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	e00b      	b.n	8007f80 <HAL_RCC_OscConfig+0xb0>
 8007f68:	4b69      	ldr	r3, [pc, #420]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a68      	ldr	r2, [pc, #416]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	4b66      	ldr	r3, [pc, #408]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a65      	ldr	r2, [pc, #404]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d013      	beq.n	8007fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f88:	f7fe fe80 	bl	8006c8c <HAL_GetTick>
 8007f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f8e:	e008      	b.n	8007fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f90:	f7fe fe7c 	bl	8006c8c <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b64      	cmp	r3, #100	@ 0x64
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e207      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0f0      	beq.n	8007f90 <HAL_RCC_OscConfig+0xc0>
 8007fae:	e014      	b.n	8007fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fb0:	f7fe fe6c 	bl	8006c8c <HAL_GetTick>
 8007fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fb6:	e008      	b.n	8007fca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fb8:	f7fe fe68 	bl	8006c8c <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b64      	cmp	r3, #100	@ 0x64
 8007fc4:	d901      	bls.n	8007fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e1f3      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fca:	4b51      	ldr	r3, [pc, #324]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1f0      	bne.n	8007fb8 <HAL_RCC_OscConfig+0xe8>
 8007fd6:	e000      	b.n	8007fda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d063      	beq.n	80080ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f003 030c 	and.w	r3, r3, #12
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00b      	beq.n	800800a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ff2:	4b47      	ldr	r3, [pc, #284]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	d11c      	bne.n	8008038 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ffe:	4b44      	ldr	r3, [pc, #272]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d116      	bne.n	8008038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800800a:	4b41      	ldr	r3, [pc, #260]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f003 0302 	and.w	r3, r3, #2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d005      	beq.n	8008022 <HAL_RCC_OscConfig+0x152>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d001      	beq.n	8008022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e1c7      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008022:	4b3b      	ldr	r3, [pc, #236]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	00db      	lsls	r3, r3, #3
 8008030:	4937      	ldr	r1, [pc, #220]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8008032:	4313      	orrs	r3, r2
 8008034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008036:	e03a      	b.n	80080ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d020      	beq.n	8008082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008040:	4b34      	ldr	r3, [pc, #208]	@ (8008114 <HAL_RCC_OscConfig+0x244>)
 8008042:	2201      	movs	r2, #1
 8008044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008046:	f7fe fe21 	bl	8006c8c <HAL_GetTick>
 800804a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800804c:	e008      	b.n	8008060 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800804e:	f7fe fe1d 	bl	8006c8c <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	2b02      	cmp	r3, #2
 800805a:	d901      	bls.n	8008060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e1a8      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008060:	4b2b      	ldr	r3, [pc, #172]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0302 	and.w	r3, r3, #2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0f0      	beq.n	800804e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800806c:	4b28      	ldr	r3, [pc, #160]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	00db      	lsls	r3, r3, #3
 800807a:	4925      	ldr	r1, [pc, #148]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 800807c:	4313      	orrs	r3, r2
 800807e:	600b      	str	r3, [r1, #0]
 8008080:	e015      	b.n	80080ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008082:	4b24      	ldr	r3, [pc, #144]	@ (8008114 <HAL_RCC_OscConfig+0x244>)
 8008084:	2200      	movs	r2, #0
 8008086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008088:	f7fe fe00 	bl	8006c8c <HAL_GetTick>
 800808c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800808e:	e008      	b.n	80080a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008090:	f7fe fdfc 	bl	8006c8c <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	2b02      	cmp	r3, #2
 800809c:	d901      	bls.n	80080a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e187      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1f0      	bne.n	8008090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0308 	and.w	r3, r3, #8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d036      	beq.n	8008128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d016      	beq.n	80080f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080c2:	4b15      	ldr	r3, [pc, #84]	@ (8008118 <HAL_RCC_OscConfig+0x248>)
 80080c4:	2201      	movs	r2, #1
 80080c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080c8:	f7fe fde0 	bl	8006c8c <HAL_GetTick>
 80080cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080d0:	f7fe fddc 	bl	8006c8c <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e167      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008110 <HAL_RCC_OscConfig+0x240>)
 80080e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0f0      	beq.n	80080d0 <HAL_RCC_OscConfig+0x200>
 80080ee:	e01b      	b.n	8008128 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080f0:	4b09      	ldr	r3, [pc, #36]	@ (8008118 <HAL_RCC_OscConfig+0x248>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080f6:	f7fe fdc9 	bl	8006c8c <HAL_GetTick>
 80080fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080fc:	e00e      	b.n	800811c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080fe:	f7fe fdc5 	bl	8006c8c <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	2b02      	cmp	r3, #2
 800810a:	d907      	bls.n	800811c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e150      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
 8008110:	40023800 	.word	0x40023800
 8008114:	42470000 	.word	0x42470000
 8008118:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800811c:	4b88      	ldr	r3, [pc, #544]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 800811e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d1ea      	bne.n	80080fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 8097 	beq.w	8008264 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008136:	2300      	movs	r3, #0
 8008138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800813a:	4b81      	ldr	r3, [pc, #516]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 800813c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800813e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10f      	bne.n	8008166 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008146:	2300      	movs	r3, #0
 8008148:	60bb      	str	r3, [r7, #8]
 800814a:	4b7d      	ldr	r3, [pc, #500]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 800814c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800814e:	4a7c      	ldr	r2, [pc, #496]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 8008150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008154:	6413      	str	r3, [r2, #64]	@ 0x40
 8008156:	4b7a      	ldr	r3, [pc, #488]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 8008158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800815e:	60bb      	str	r3, [r7, #8]
 8008160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008162:	2301      	movs	r3, #1
 8008164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008166:	4b77      	ldr	r3, [pc, #476]	@ (8008344 <HAL_RCC_OscConfig+0x474>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800816e:	2b00      	cmp	r3, #0
 8008170:	d118      	bne.n	80081a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008172:	4b74      	ldr	r3, [pc, #464]	@ (8008344 <HAL_RCC_OscConfig+0x474>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a73      	ldr	r2, [pc, #460]	@ (8008344 <HAL_RCC_OscConfig+0x474>)
 8008178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800817c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800817e:	f7fe fd85 	bl	8006c8c <HAL_GetTick>
 8008182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008184:	e008      	b.n	8008198 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008186:	f7fe fd81 	bl	8006c8c <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	2b02      	cmp	r3, #2
 8008192:	d901      	bls.n	8008198 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e10c      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008198:	4b6a      	ldr	r3, [pc, #424]	@ (8008344 <HAL_RCC_OscConfig+0x474>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0f0      	beq.n	8008186 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d106      	bne.n	80081ba <HAL_RCC_OscConfig+0x2ea>
 80081ac:	4b64      	ldr	r3, [pc, #400]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 80081ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081b0:	4a63      	ldr	r2, [pc, #396]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 80081b2:	f043 0301 	orr.w	r3, r3, #1
 80081b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80081b8:	e01c      	b.n	80081f4 <HAL_RCC_OscConfig+0x324>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	2b05      	cmp	r3, #5
 80081c0:	d10c      	bne.n	80081dc <HAL_RCC_OscConfig+0x30c>
 80081c2:	4b5f      	ldr	r3, [pc, #380]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 80081c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081c6:	4a5e      	ldr	r2, [pc, #376]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 80081c8:	f043 0304 	orr.w	r3, r3, #4
 80081cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80081ce:	4b5c      	ldr	r3, [pc, #368]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 80081d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081d2:	4a5b      	ldr	r2, [pc, #364]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 80081d4:	f043 0301 	orr.w	r3, r3, #1
 80081d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80081da:	e00b      	b.n	80081f4 <HAL_RCC_OscConfig+0x324>
 80081dc:	4b58      	ldr	r3, [pc, #352]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 80081de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081e0:	4a57      	ldr	r2, [pc, #348]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 80081e2:	f023 0301 	bic.w	r3, r3, #1
 80081e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80081e8:	4b55      	ldr	r3, [pc, #340]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 80081ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ec:	4a54      	ldr	r2, [pc, #336]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 80081ee:	f023 0304 	bic.w	r3, r3, #4
 80081f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d015      	beq.n	8008228 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081fc:	f7fe fd46 	bl	8006c8c <HAL_GetTick>
 8008200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008202:	e00a      	b.n	800821a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008204:	f7fe fd42 	bl	8006c8c <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008212:	4293      	cmp	r3, r2
 8008214:	d901      	bls.n	800821a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e0cb      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800821a:	4b49      	ldr	r3, [pc, #292]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 800821c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821e:	f003 0302 	and.w	r3, r3, #2
 8008222:	2b00      	cmp	r3, #0
 8008224:	d0ee      	beq.n	8008204 <HAL_RCC_OscConfig+0x334>
 8008226:	e014      	b.n	8008252 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008228:	f7fe fd30 	bl	8006c8c <HAL_GetTick>
 800822c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800822e:	e00a      	b.n	8008246 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008230:	f7fe fd2c 	bl	8006c8c <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800823e:	4293      	cmp	r3, r2
 8008240:	d901      	bls.n	8008246 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008242:	2303      	movs	r3, #3
 8008244:	e0b5      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008246:	4b3e      	ldr	r3, [pc, #248]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 8008248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824a:	f003 0302 	and.w	r3, r3, #2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1ee      	bne.n	8008230 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008252:	7dfb      	ldrb	r3, [r7, #23]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d105      	bne.n	8008264 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008258:	4b39      	ldr	r3, [pc, #228]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 800825a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825c:	4a38      	ldr	r2, [pc, #224]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 800825e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008262:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	f000 80a1 	beq.w	80083b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800826e:	4b34      	ldr	r3, [pc, #208]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f003 030c 	and.w	r3, r3, #12
 8008276:	2b08      	cmp	r3, #8
 8008278:	d05c      	beq.n	8008334 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	2b02      	cmp	r3, #2
 8008280:	d141      	bne.n	8008306 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008282:	4b31      	ldr	r3, [pc, #196]	@ (8008348 <HAL_RCC_OscConfig+0x478>)
 8008284:	2200      	movs	r2, #0
 8008286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008288:	f7fe fd00 	bl	8006c8c <HAL_GetTick>
 800828c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800828e:	e008      	b.n	80082a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008290:	f7fe fcfc 	bl	8006c8c <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	2b02      	cmp	r3, #2
 800829c:	d901      	bls.n	80082a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e087      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082a2:	4b27      	ldr	r3, [pc, #156]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1f0      	bne.n	8008290 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69da      	ldr	r2, [r3, #28]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	431a      	orrs	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082bc:	019b      	lsls	r3, r3, #6
 80082be:	431a      	orrs	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c4:	085b      	lsrs	r3, r3, #1
 80082c6:	3b01      	subs	r3, #1
 80082c8:	041b      	lsls	r3, r3, #16
 80082ca:	431a      	orrs	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d0:	061b      	lsls	r3, r3, #24
 80082d2:	491b      	ldr	r1, [pc, #108]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 80082d4:	4313      	orrs	r3, r2
 80082d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008348 <HAL_RCC_OscConfig+0x478>)
 80082da:	2201      	movs	r2, #1
 80082dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082de:	f7fe fcd5 	bl	8006c8c <HAL_GetTick>
 80082e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082e4:	e008      	b.n	80082f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082e6:	f7fe fcd1 	bl	8006c8c <HAL_GetTick>
 80082ea:	4602      	mov	r2, r0
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d901      	bls.n	80082f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e05c      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082f8:	4b11      	ldr	r3, [pc, #68]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d0f0      	beq.n	80082e6 <HAL_RCC_OscConfig+0x416>
 8008304:	e054      	b.n	80083b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008306:	4b10      	ldr	r3, [pc, #64]	@ (8008348 <HAL_RCC_OscConfig+0x478>)
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800830c:	f7fe fcbe 	bl	8006c8c <HAL_GetTick>
 8008310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008312:	e008      	b.n	8008326 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008314:	f7fe fcba 	bl	8006c8c <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d901      	bls.n	8008326 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e045      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008326:	4b06      	ldr	r3, [pc, #24]	@ (8008340 <HAL_RCC_OscConfig+0x470>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1f0      	bne.n	8008314 <HAL_RCC_OscConfig+0x444>
 8008332:	e03d      	b.n	80083b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d107      	bne.n	800834c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	e038      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
 8008340:	40023800 	.word	0x40023800
 8008344:	40007000 	.word	0x40007000
 8008348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800834c:	4b1b      	ldr	r3, [pc, #108]	@ (80083bc <HAL_RCC_OscConfig+0x4ec>)
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d028      	beq.n	80083ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008364:	429a      	cmp	r2, r3
 8008366:	d121      	bne.n	80083ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008372:	429a      	cmp	r2, r3
 8008374:	d11a      	bne.n	80083ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800837c:	4013      	ands	r3, r2
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008384:	4293      	cmp	r3, r2
 8008386:	d111      	bne.n	80083ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008392:	085b      	lsrs	r3, r3, #1
 8008394:	3b01      	subs	r3, #1
 8008396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008398:	429a      	cmp	r2, r3
 800839a:	d107      	bne.n	80083ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d001      	beq.n	80083b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e000      	b.n	80083b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3718      	adds	r7, #24
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	40023800 	.word	0x40023800

080083c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e0cc      	b.n	800856e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083d4:	4b68      	ldr	r3, [pc, #416]	@ (8008578 <HAL_RCC_ClockConfig+0x1b8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0307 	and.w	r3, r3, #7
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d90c      	bls.n	80083fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083e2:	4b65      	ldr	r3, [pc, #404]	@ (8008578 <HAL_RCC_ClockConfig+0x1b8>)
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ea:	4b63      	ldr	r3, [pc, #396]	@ (8008578 <HAL_RCC_ClockConfig+0x1b8>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0307 	and.w	r3, r3, #7
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d001      	beq.n	80083fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e0b8      	b.n	800856e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b00      	cmp	r3, #0
 8008406:	d020      	beq.n	800844a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0304 	and.w	r3, r3, #4
 8008410:	2b00      	cmp	r3, #0
 8008412:	d005      	beq.n	8008420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008414:	4b59      	ldr	r3, [pc, #356]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	4a58      	ldr	r2, [pc, #352]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 800841a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800841e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0308 	and.w	r3, r3, #8
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800842c:	4b53      	ldr	r3, [pc, #332]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	4a52      	ldr	r2, [pc, #328]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 8008432:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008438:	4b50      	ldr	r3, [pc, #320]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	494d      	ldr	r1, [pc, #308]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 8008446:	4313      	orrs	r3, r2
 8008448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	2b00      	cmp	r3, #0
 8008454:	d044      	beq.n	80084e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d107      	bne.n	800846e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800845e:	4b47      	ldr	r3, [pc, #284]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d119      	bne.n	800849e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e07f      	b.n	800856e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	2b02      	cmp	r3, #2
 8008474:	d003      	beq.n	800847e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800847a:	2b03      	cmp	r3, #3
 800847c:	d107      	bne.n	800848e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800847e:	4b3f      	ldr	r3, [pc, #252]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d109      	bne.n	800849e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e06f      	b.n	800856e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800848e:	4b3b      	ldr	r3, [pc, #236]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0302 	and.w	r3, r3, #2
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e067      	b.n	800856e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800849e:	4b37      	ldr	r3, [pc, #220]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f023 0203 	bic.w	r2, r3, #3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	4934      	ldr	r1, [pc, #208]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084b0:	f7fe fbec 	bl	8006c8c <HAL_GetTick>
 80084b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084b6:	e00a      	b.n	80084ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084b8:	f7fe fbe8 	bl	8006c8c <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d901      	bls.n	80084ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e04f      	b.n	800856e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ce:	4b2b      	ldr	r3, [pc, #172]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f003 020c 	and.w	r2, r3, #12
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	429a      	cmp	r2, r3
 80084de:	d1eb      	bne.n	80084b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084e0:	4b25      	ldr	r3, [pc, #148]	@ (8008578 <HAL_RCC_ClockConfig+0x1b8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0307 	and.w	r3, r3, #7
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d20c      	bcs.n	8008508 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084ee:	4b22      	ldr	r3, [pc, #136]	@ (8008578 <HAL_RCC_ClockConfig+0x1b8>)
 80084f0:	683a      	ldr	r2, [r7, #0]
 80084f2:	b2d2      	uxtb	r2, r2
 80084f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084f6:	4b20      	ldr	r3, [pc, #128]	@ (8008578 <HAL_RCC_ClockConfig+0x1b8>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0307 	and.w	r3, r3, #7
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d001      	beq.n	8008508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e032      	b.n	800856e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d008      	beq.n	8008526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008514:	4b19      	ldr	r3, [pc, #100]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	4916      	ldr	r1, [pc, #88]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 8008522:	4313      	orrs	r3, r2
 8008524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0308 	and.w	r3, r3, #8
 800852e:	2b00      	cmp	r3, #0
 8008530:	d009      	beq.n	8008546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008532:	4b12      	ldr	r3, [pc, #72]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	00db      	lsls	r3, r3, #3
 8008540:	490e      	ldr	r1, [pc, #56]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 8008542:	4313      	orrs	r3, r2
 8008544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008546:	f000 f821 	bl	800858c <HAL_RCC_GetSysClockFreq>
 800854a:	4602      	mov	r2, r0
 800854c:	4b0b      	ldr	r3, [pc, #44]	@ (800857c <HAL_RCC_ClockConfig+0x1bc>)
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	091b      	lsrs	r3, r3, #4
 8008552:	f003 030f 	and.w	r3, r3, #15
 8008556:	490a      	ldr	r1, [pc, #40]	@ (8008580 <HAL_RCC_ClockConfig+0x1c0>)
 8008558:	5ccb      	ldrb	r3, [r1, r3]
 800855a:	fa22 f303 	lsr.w	r3, r2, r3
 800855e:	4a09      	ldr	r2, [pc, #36]	@ (8008584 <HAL_RCC_ClockConfig+0x1c4>)
 8008560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008562:	4b09      	ldr	r3, [pc, #36]	@ (8008588 <HAL_RCC_ClockConfig+0x1c8>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4618      	mov	r0, r3
 8008568:	f7fe fb4c 	bl	8006c04 <HAL_InitTick>

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	40023c00 	.word	0x40023c00
 800857c:	40023800 	.word	0x40023800
 8008580:	080119b4 	.word	0x080119b4
 8008584:	20000010 	.word	0x20000010
 8008588:	20000014 	.word	0x20000014

0800858c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800858c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008590:	b094      	sub	sp, #80	@ 0x50
 8008592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008594:	2300      	movs	r3, #0
 8008596:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800859c:	2300      	movs	r3, #0
 800859e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80085a0:	2300      	movs	r3, #0
 80085a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085a4:	4b79      	ldr	r3, [pc, #484]	@ (800878c <HAL_RCC_GetSysClockFreq+0x200>)
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f003 030c 	and.w	r3, r3, #12
 80085ac:	2b08      	cmp	r3, #8
 80085ae:	d00d      	beq.n	80085cc <HAL_RCC_GetSysClockFreq+0x40>
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	f200 80e1 	bhi.w	8008778 <HAL_RCC_GetSysClockFreq+0x1ec>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <HAL_RCC_GetSysClockFreq+0x34>
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	d003      	beq.n	80085c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80085be:	e0db      	b.n	8008778 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085c0:	4b73      	ldr	r3, [pc, #460]	@ (8008790 <HAL_RCC_GetSysClockFreq+0x204>)
 80085c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80085c4:	e0db      	b.n	800877e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085c6:	4b73      	ldr	r3, [pc, #460]	@ (8008794 <HAL_RCC_GetSysClockFreq+0x208>)
 80085c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80085ca:	e0d8      	b.n	800877e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085cc:	4b6f      	ldr	r3, [pc, #444]	@ (800878c <HAL_RCC_GetSysClockFreq+0x200>)
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085d6:	4b6d      	ldr	r3, [pc, #436]	@ (800878c <HAL_RCC_GetSysClockFreq+0x200>)
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d063      	beq.n	80086aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085e2:	4b6a      	ldr	r3, [pc, #424]	@ (800878c <HAL_RCC_GetSysClockFreq+0x200>)
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	099b      	lsrs	r3, r3, #6
 80085e8:	2200      	movs	r2, #0
 80085ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80085ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80085f6:	2300      	movs	r3, #0
 80085f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80085fe:	4622      	mov	r2, r4
 8008600:	462b      	mov	r3, r5
 8008602:	f04f 0000 	mov.w	r0, #0
 8008606:	f04f 0100 	mov.w	r1, #0
 800860a:	0159      	lsls	r1, r3, #5
 800860c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008610:	0150      	lsls	r0, r2, #5
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4621      	mov	r1, r4
 8008618:	1a51      	subs	r1, r2, r1
 800861a:	6139      	str	r1, [r7, #16]
 800861c:	4629      	mov	r1, r5
 800861e:	eb63 0301 	sbc.w	r3, r3, r1
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008630:	4659      	mov	r1, fp
 8008632:	018b      	lsls	r3, r1, #6
 8008634:	4651      	mov	r1, sl
 8008636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800863a:	4651      	mov	r1, sl
 800863c:	018a      	lsls	r2, r1, #6
 800863e:	4651      	mov	r1, sl
 8008640:	ebb2 0801 	subs.w	r8, r2, r1
 8008644:	4659      	mov	r1, fp
 8008646:	eb63 0901 	sbc.w	r9, r3, r1
 800864a:	f04f 0200 	mov.w	r2, #0
 800864e:	f04f 0300 	mov.w	r3, #0
 8008652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800865a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800865e:	4690      	mov	r8, r2
 8008660:	4699      	mov	r9, r3
 8008662:	4623      	mov	r3, r4
 8008664:	eb18 0303 	adds.w	r3, r8, r3
 8008668:	60bb      	str	r3, [r7, #8]
 800866a:	462b      	mov	r3, r5
 800866c:	eb49 0303 	adc.w	r3, r9, r3
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	f04f 0200 	mov.w	r2, #0
 8008676:	f04f 0300 	mov.w	r3, #0
 800867a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800867e:	4629      	mov	r1, r5
 8008680:	024b      	lsls	r3, r1, #9
 8008682:	4621      	mov	r1, r4
 8008684:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008688:	4621      	mov	r1, r4
 800868a:	024a      	lsls	r2, r1, #9
 800868c:	4610      	mov	r0, r2
 800868e:	4619      	mov	r1, r3
 8008690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008692:	2200      	movs	r2, #0
 8008694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008696:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800869c:	f7f8 f992 	bl	80009c4 <__aeabi_uldivmod>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4613      	mov	r3, r2
 80086a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086a8:	e058      	b.n	800875c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086aa:	4b38      	ldr	r3, [pc, #224]	@ (800878c <HAL_RCC_GetSysClockFreq+0x200>)
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	099b      	lsrs	r3, r3, #6
 80086b0:	2200      	movs	r2, #0
 80086b2:	4618      	mov	r0, r3
 80086b4:	4611      	mov	r1, r2
 80086b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80086ba:	623b      	str	r3, [r7, #32]
 80086bc:	2300      	movs	r3, #0
 80086be:	627b      	str	r3, [r7, #36]	@ 0x24
 80086c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80086c4:	4642      	mov	r2, r8
 80086c6:	464b      	mov	r3, r9
 80086c8:	f04f 0000 	mov.w	r0, #0
 80086cc:	f04f 0100 	mov.w	r1, #0
 80086d0:	0159      	lsls	r1, r3, #5
 80086d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086d6:	0150      	lsls	r0, r2, #5
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	4641      	mov	r1, r8
 80086de:	ebb2 0a01 	subs.w	sl, r2, r1
 80086e2:	4649      	mov	r1, r9
 80086e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80086e8:	f04f 0200 	mov.w	r2, #0
 80086ec:	f04f 0300 	mov.w	r3, #0
 80086f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80086f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80086f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80086fc:	ebb2 040a 	subs.w	r4, r2, sl
 8008700:	eb63 050b 	sbc.w	r5, r3, fp
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	f04f 0300 	mov.w	r3, #0
 800870c:	00eb      	lsls	r3, r5, #3
 800870e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008712:	00e2      	lsls	r2, r4, #3
 8008714:	4614      	mov	r4, r2
 8008716:	461d      	mov	r5, r3
 8008718:	4643      	mov	r3, r8
 800871a:	18e3      	adds	r3, r4, r3
 800871c:	603b      	str	r3, [r7, #0]
 800871e:	464b      	mov	r3, r9
 8008720:	eb45 0303 	adc.w	r3, r5, r3
 8008724:	607b      	str	r3, [r7, #4]
 8008726:	f04f 0200 	mov.w	r2, #0
 800872a:	f04f 0300 	mov.w	r3, #0
 800872e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008732:	4629      	mov	r1, r5
 8008734:	028b      	lsls	r3, r1, #10
 8008736:	4621      	mov	r1, r4
 8008738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800873c:	4621      	mov	r1, r4
 800873e:	028a      	lsls	r2, r1, #10
 8008740:	4610      	mov	r0, r2
 8008742:	4619      	mov	r1, r3
 8008744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008746:	2200      	movs	r2, #0
 8008748:	61bb      	str	r3, [r7, #24]
 800874a:	61fa      	str	r2, [r7, #28]
 800874c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008750:	f7f8 f938 	bl	80009c4 <__aeabi_uldivmod>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4613      	mov	r3, r2
 800875a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800875c:	4b0b      	ldr	r3, [pc, #44]	@ (800878c <HAL_RCC_GetSysClockFreq+0x200>)
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	0c1b      	lsrs	r3, r3, #16
 8008762:	f003 0303 	and.w	r3, r3, #3
 8008766:	3301      	adds	r3, #1
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800876c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800876e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008770:	fbb2 f3f3 	udiv	r3, r2, r3
 8008774:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008776:	e002      	b.n	800877e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008778:	4b05      	ldr	r3, [pc, #20]	@ (8008790 <HAL_RCC_GetSysClockFreq+0x204>)
 800877a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800877c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800877e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008780:	4618      	mov	r0, r3
 8008782:	3750      	adds	r7, #80	@ 0x50
 8008784:	46bd      	mov	sp, r7
 8008786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800878a:	bf00      	nop
 800878c:	40023800 	.word	0x40023800
 8008790:	00f42400 	.word	0x00f42400
 8008794:	007a1200 	.word	0x007a1200

08008798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008798:	b480      	push	{r7}
 800879a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800879c:	4b03      	ldr	r3, [pc, #12]	@ (80087ac <HAL_RCC_GetHCLKFreq+0x14>)
 800879e:	681b      	ldr	r3, [r3, #0]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20000010 	.word	0x20000010

080087b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80087b4:	f7ff fff0 	bl	8008798 <HAL_RCC_GetHCLKFreq>
 80087b8:	4602      	mov	r2, r0
 80087ba:	4b05      	ldr	r3, [pc, #20]	@ (80087d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	0a9b      	lsrs	r3, r3, #10
 80087c0:	f003 0307 	and.w	r3, r3, #7
 80087c4:	4903      	ldr	r1, [pc, #12]	@ (80087d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087c6:	5ccb      	ldrb	r3, [r1, r3]
 80087c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	40023800 	.word	0x40023800
 80087d4:	080119c4 	.word	0x080119c4

080087d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80087dc:	f7ff ffdc 	bl	8008798 <HAL_RCC_GetHCLKFreq>
 80087e0:	4602      	mov	r2, r0
 80087e2:	4b05      	ldr	r3, [pc, #20]	@ (80087f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	0b5b      	lsrs	r3, r3, #13
 80087e8:	f003 0307 	and.w	r3, r3, #7
 80087ec:	4903      	ldr	r1, [pc, #12]	@ (80087fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80087ee:	5ccb      	ldrb	r3, [r1, r3]
 80087f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	40023800 	.word	0x40023800
 80087fc:	080119c4 	.word	0x080119c4

08008800 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e022      	b.n	8008858 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d105      	bne.n	800882a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7fd fee3 	bl	80065f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2203      	movs	r2, #3
 800882e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f814 	bl	8008860 <HAL_SD_InitCard>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d001      	beq.n	8008842 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e00a      	b.n	8008858 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008860:	b5b0      	push	{r4, r5, r7, lr}
 8008862:	b08e      	sub	sp, #56	@ 0x38
 8008864:	af04      	add	r7, sp, #16
 8008866:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008868:	2300      	movs	r3, #0
 800886a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800886c:	2300      	movs	r3, #0
 800886e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008870:	2300      	movs	r3, #0
 8008872:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008874:	2300      	movs	r3, #0
 8008876:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008878:	2300      	movs	r3, #0
 800887a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800887c:	2376      	movs	r3, #118	@ 0x76
 800887e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681d      	ldr	r5, [r3, #0]
 8008884:	466c      	mov	r4, sp
 8008886:	f107 0314 	add.w	r3, r7, #20
 800888a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800888e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008892:	f107 0308 	add.w	r3, r7, #8
 8008896:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008898:	4628      	mov	r0, r5
 800889a:	f004 f8df 	bl	800ca5c <SDIO_Init>
 800889e:	4603      	mov	r3, r0
 80088a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80088a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e04f      	b.n	8008950 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80088b0:	4b29      	ldr	r3, [pc, #164]	@ (8008958 <HAL_SD_InitCard+0xf8>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f004 f917 	bl	800caee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80088c0:	4b25      	ldr	r3, [pc, #148]	@ (8008958 <HAL_SD_InitCard+0xf8>)
 80088c2:	2201      	movs	r2, #1
 80088c4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80088c6:	2002      	movs	r0, #2
 80088c8:	f7fe f9ec 	bl	8006ca4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fe79 	bl	80095c4 <SD_PowerON>
 80088d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088d4:	6a3b      	ldr	r3, [r7, #32]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00b      	beq.n	80088f2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088e6:	6a3b      	ldr	r3, [r7, #32]
 80088e8:	431a      	orrs	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e02e      	b.n	8008950 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fd98 	bl	8009428 <SD_InitCard>
 80088f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088fa:	6a3b      	ldr	r3, [r7, #32]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00b      	beq.n	8008918 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	431a      	orrs	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e01b      	b.n	8008950 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008920:	4618      	mov	r0, r3
 8008922:	f004 f976 	bl	800cc12 <SDMMC_CmdBlockLength>
 8008926:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00f      	beq.n	800894e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a0a      	ldr	r2, [pc, #40]	@ (800895c <HAL_SD_InitCard+0xfc>)
 8008934:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	431a      	orrs	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e000      	b.n	8008950 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3728      	adds	r7, #40	@ 0x28
 8008954:	46bd      	mov	sp, r7
 8008956:	bdb0      	pop	{r4, r5, r7, pc}
 8008958:	422580a0 	.word	0x422580a0
 800895c:	004005ff 	.word	0x004005ff

08008960 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b092      	sub	sp, #72	@ 0x48
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
 800896c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800896e:	f7fe f98d 	bl	8006c8c <HAL_GetTick>
 8008972:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d107      	bne.n	8008992 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008986:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e1c5      	b.n	8008d1e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b01      	cmp	r3, #1
 800899c:	f040 81b8 	bne.w	8008d10 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80089a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	441a      	add	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d907      	bls.n	80089c4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e1ac      	b.n	8008d1e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2203      	movs	r2, #3
 80089c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2200      	movs	r2, #0
 80089d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d002      	beq.n	80089e2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80089dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089de:	025b      	lsls	r3, r3, #9
 80089e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089e2:	f04f 33ff 	mov.w	r3, #4294967295
 80089e6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	025b      	lsls	r3, r3, #9
 80089ec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80089ee:	2390      	movs	r3, #144	@ 0x90
 80089f0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80089f2:	2302      	movs	r3, #2
 80089f4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80089f6:	2300      	movs	r3, #0
 80089f8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80089fa:	2301      	movs	r3, #1
 80089fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f107 0214 	add.w	r2, r7, #20
 8008a06:	4611      	mov	r1, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f004 f8d6 	bl	800cbba <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d90a      	bls.n	8008a2a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2202      	movs	r2, #2
 8008a18:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008a20:	4618      	mov	r0, r3
 8008a22:	f004 f93a 	bl	800cc9a <SDMMC_CmdReadMultiBlock>
 8008a26:	6478      	str	r0, [r7, #68]	@ 0x44
 8008a28:	e009      	b.n	8008a3e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008a36:	4618      	mov	r0, r3
 8008a38:	f004 f90d 	bl	800cc56 <SDMMC_CmdReadSingleBlock>
 8008a3c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d012      	beq.n	8008a6a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a7e      	ldr	r2, [pc, #504]	@ (8008c44 <HAL_SD_ReadBlocks+0x2e4>)
 8008a4a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a52:	431a      	orrs	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	e159      	b.n	8008d1e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008a6e:	e061      	b.n	8008b34 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d03c      	beq.n	8008af8 <HAL_SD_ReadBlocks+0x198>
 8008a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d039      	beq.n	8008af8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008a84:	2300      	movs	r3, #0
 8008a86:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a88:	e033      	b.n	8008af2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f004 f80f 	bl	800cab2 <SDIO_ReadFIFO>
 8008a94:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aac:	0a1b      	lsrs	r3, r3, #8
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008abc:	3b01      	subs	r3, #1
 8008abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac2:	0c1b      	lsrs	r3, r3, #16
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008acc:	3301      	adds	r3, #1
 8008ace:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad8:	0e1b      	lsrs	r3, r3, #24
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ade:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8008aec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008aee:	3301      	adds	r3, #1
 8008af0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008af2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008af4:	2b07      	cmp	r3, #7
 8008af6:	d9c8      	bls.n	8008a8a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008af8:	f7fe f8c8 	bl	8006c8c <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d902      	bls.n	8008b0e <HAL_SD_ReadBlocks+0x1ae>
 8008b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d112      	bne.n	8008b34 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a4c      	ldr	r2, [pc, #304]	@ (8008c44 <HAL_SD_ReadBlocks+0x2e4>)
 8008b14:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b1a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e0f4      	b.n	8008d1e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b3a:	f240 332a 	movw	r3, #810	@ 0x32a
 8008b3e:	4013      	ands	r3, r2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d095      	beq.n	8008a70 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d022      	beq.n	8008b98 <HAL_SD_ReadBlocks+0x238>
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d91f      	bls.n	8008b98 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d01b      	beq.n	8008b98 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f004 f8ff 	bl	800cd68 <SDMMC_CmdStopTransfer>
 8008b6a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d012      	beq.n	8008b98 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a33      	ldr	r2, [pc, #204]	@ (8008c44 <HAL_SD_ReadBlocks+0x2e4>)
 8008b78:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b80:	431a      	orrs	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e0c2      	b.n	8008d1e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b9e:	f003 0308 	and.w	r3, r3, #8
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d106      	bne.n	8008bb4 <HAL_SD_ReadBlocks+0x254>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d012      	beq.n	8008bda <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a22      	ldr	r2, [pc, #136]	@ (8008c44 <HAL_SD_ReadBlocks+0x2e4>)
 8008bba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc0:	f043 0208 	orr.w	r2, r3, #8
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e0a1      	b.n	8008d1e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008be0:	f003 0302 	and.w	r3, r3, #2
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d012      	beq.n	8008c0e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a15      	ldr	r2, [pc, #84]	@ (8008c44 <HAL_SD_ReadBlocks+0x2e4>)
 8008bee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf4:	f043 0202 	orr.w	r2, r3, #2
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e087      	b.n	8008d1e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c14:	f003 0320 	and.w	r3, r3, #32
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d064      	beq.n	8008ce6 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a08      	ldr	r2, [pc, #32]	@ (8008c44 <HAL_SD_ReadBlocks+0x2e4>)
 8008c22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c28:	f043 0220 	orr.w	r2, r3, #32
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e06d      	b.n	8008d1e <HAL_SD_ReadBlocks+0x3be>
 8008c42:	bf00      	nop
 8008c44:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f003 ff30 	bl	800cab2 <SDIO_ReadFIFO>
 8008c52:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c5a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c5e:	3301      	adds	r3, #1
 8008c60:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c64:	3b01      	subs	r3, #1
 8008c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6a:	0a1b      	lsrs	r3, r3, #8
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c70:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c74:	3301      	adds	r3, #1
 8008c76:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c80:	0c1b      	lsrs	r3, r3, #16
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c86:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c90:	3b01      	subs	r3, #1
 8008c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c96:	0e1b      	lsrs	r3, r3, #24
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c9c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008caa:	f7fd ffef 	bl	8006c8c <HAL_GetTick>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d902      	bls.n	8008cc0 <HAL_SD_ReadBlocks+0x360>
 8008cba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d112      	bne.n	8008ce6 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a18      	ldr	r2, [pc, #96]	@ (8008d28 <HAL_SD_ReadBlocks+0x3c8>)
 8008cc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ccc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e01b      	b.n	8008d1e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <HAL_SD_ReadBlocks+0x39a>
 8008cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1a6      	bne.n	8008c48 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008d02:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	e006      	b.n	8008d1e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d14:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
  }
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3748      	adds	r7, #72	@ 0x48
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	004005ff 	.word	0x004005ff

08008d2c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b092      	sub	sp, #72	@ 0x48
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d3a:	f7fd ffa7 	bl	8006c8c <HAL_GetTick>
 8008d3e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d107      	bne.n	8008d5e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d52:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e16d      	b.n	800903a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	f040 8160 	bne.w	800902c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	441a      	add	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d907      	bls.n	8008d90 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d84:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e154      	b.n	800903a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2203      	movs	r2, #3
 8008d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d002      	beq.n	8008dae <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008daa:	025b      	lsls	r3, r3, #9
 8008dac:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008dae:	f04f 33ff 	mov.w	r3, #4294967295
 8008db2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	025b      	lsls	r3, r3, #9
 8008db8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008dba:	2390      	movs	r3, #144	@ 0x90
 8008dbc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f107 0218 	add.w	r2, r7, #24
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f003 fef0 	bl	800cbba <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d90a      	bls.n	8008df6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2220      	movs	r2, #32
 8008de4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008dec:	4618      	mov	r0, r3
 8008dee:	f003 ff98 	bl	800cd22 <SDMMC_CmdWriteMultiBlock>
 8008df2:	6478      	str	r0, [r7, #68]	@ 0x44
 8008df4:	e009      	b.n	8008e0a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2210      	movs	r2, #16
 8008dfa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008e02:	4618      	mov	r0, r3
 8008e04:	f003 ff6b 	bl	800ccde <SDMMC_CmdWriteSingleBlock>
 8008e08:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d012      	beq.n	8008e36 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a8b      	ldr	r2, [pc, #556]	@ (8009044 <HAL_SD_WriteBlocks+0x318>)
 8008e16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e101      	b.n	800903a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008e3a:	e065      	b.n	8008f08 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d040      	beq.n	8008ecc <HAL_SD_WriteBlocks+0x1a0>
 8008e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d03d      	beq.n	8008ecc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008e50:	2300      	movs	r3, #0
 8008e52:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e54:	e037      	b.n	8008ec6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e5e:	3301      	adds	r3, #1
 8008e60:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e64:	3b01      	subs	r3, #1
 8008e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	021a      	lsls	r2, r3, #8
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e76:	3301      	adds	r3, #1
 8008e78:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	041a      	lsls	r2, r3, #16
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e8e:	3301      	adds	r3, #1
 8008e90:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e94:	3b01      	subs	r3, #1
 8008e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	061a      	lsls	r2, r3, #24
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eac:	3b01      	subs	r3, #1
 8008eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f107 0214 	add.w	r2, r7, #20
 8008eb8:	4611      	mov	r1, r2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f003 fe06 	bl	800cacc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ec8:	2b07      	cmp	r3, #7
 8008eca:	d9c4      	bls.n	8008e56 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008ecc:	f7fd fede 	bl	8006c8c <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d902      	bls.n	8008ee2 <HAL_SD_WriteBlocks+0x1b6>
 8008edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d112      	bne.n	8008f08 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a57      	ldr	r2, [pc, #348]	@ (8009044 <HAL_SD_WriteBlocks+0x318>)
 8008ee8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2201      	movs	r2, #1
 8008efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e098      	b.n	800903a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f0e:	f240 331a 	movw	r3, #794	@ 0x31a
 8008f12:	4013      	ands	r3, r2
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d091      	beq.n	8008e3c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d022      	beq.n	8008f6c <HAL_SD_WriteBlocks+0x240>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d91f      	bls.n	8008f6c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d01b      	beq.n	8008f6c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f003 ff15 	bl	800cd68 <SDMMC_CmdStopTransfer>
 8008f3e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d012      	beq.n	8008f6c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a3e      	ldr	r2, [pc, #248]	@ (8009044 <HAL_SD_WriteBlocks+0x318>)
 8008f4c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f54:	431a      	orrs	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e066      	b.n	800903a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f72:	f003 0308 	and.w	r3, r3, #8
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <HAL_SD_WriteBlocks+0x25c>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d012      	beq.n	8008fae <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8009044 <HAL_SD_WriteBlocks+0x318>)
 8008f8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f94:	f043 0208 	orr.w	r2, r3, #8
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e045      	b.n	800903a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fb4:	f003 0302 	and.w	r3, r3, #2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d012      	beq.n	8008fe2 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a20      	ldr	r2, [pc, #128]	@ (8009044 <HAL_SD_WriteBlocks+0x318>)
 8008fc2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc8:	f043 0202 	orr.w	r2, r3, #2
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e02b      	b.n	800903a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fe8:	f003 0310 	and.w	r3, r3, #16
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d012      	beq.n	8009016 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a13      	ldr	r2, [pc, #76]	@ (8009044 <HAL_SD_WriteBlocks+0x318>)
 8008ff6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffc:	f043 0210 	orr.w	r2, r3, #16
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e011      	b.n	800903a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800901e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	e006      	b.n	800903a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009030:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009038:	2301      	movs	r3, #1
  }
}
 800903a:	4618      	mov	r0, r3
 800903c:	3748      	adds	r7, #72	@ 0x48
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	004005ff 	.word	0x004005ff

08009048 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009056:	0f9b      	lsrs	r3, r3, #30
 8009058:	b2da      	uxtb	r2, r3
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009062:	0e9b      	lsrs	r3, r3, #26
 8009064:	b2db      	uxtb	r3, r3
 8009066:	f003 030f 	and.w	r3, r3, #15
 800906a:	b2da      	uxtb	r2, r3
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009074:	0e1b      	lsrs	r3, r3, #24
 8009076:	b2db      	uxtb	r3, r3
 8009078:	f003 0303 	and.w	r3, r3, #3
 800907c:	b2da      	uxtb	r2, r3
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009086:	0c1b      	lsrs	r3, r3, #16
 8009088:	b2da      	uxtb	r2, r3
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009092:	0a1b      	lsrs	r3, r3, #8
 8009094:	b2da      	uxtb	r2, r3
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090a8:	0d1b      	lsrs	r3, r3, #20
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090b4:	0c1b      	lsrs	r3, r3, #16
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	f003 030f 	and.w	r3, r3, #15
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090c6:	0bdb      	lsrs	r3, r3, #15
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090d8:	0b9b      	lsrs	r3, r3, #14
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090ea:	0b5b      	lsrs	r3, r3, #13
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	b2da      	uxtb	r2, r3
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090fc:	0b1b      	lsrs	r3, r3, #12
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	b2da      	uxtb	r2, r3
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	2200      	movs	r2, #0
 800910e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009114:	2b00      	cmp	r3, #0
 8009116:	d163      	bne.n	80091e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800911c:	009a      	lsls	r2, r3, #2
 800911e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009122:	4013      	ands	r3, r2
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009128:	0f92      	lsrs	r2, r2, #30
 800912a:	431a      	orrs	r2, r3
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009134:	0edb      	lsrs	r3, r3, #27
 8009136:	b2db      	uxtb	r3, r3
 8009138:	f003 0307 	and.w	r3, r3, #7
 800913c:	b2da      	uxtb	r2, r3
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009146:	0e1b      	lsrs	r3, r3, #24
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	b2da      	uxtb	r2, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009158:	0d5b      	lsrs	r3, r3, #21
 800915a:	b2db      	uxtb	r3, r3
 800915c:	f003 0307 	and.w	r3, r3, #7
 8009160:	b2da      	uxtb	r2, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800916a:	0c9b      	lsrs	r3, r3, #18
 800916c:	b2db      	uxtb	r3, r3
 800916e:	f003 0307 	and.w	r3, r3, #7
 8009172:	b2da      	uxtb	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800917c:	0bdb      	lsrs	r3, r3, #15
 800917e:	b2db      	uxtb	r3, r3
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	b2da      	uxtb	r2, r3
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	7e1b      	ldrb	r3, [r3, #24]
 8009198:	b2db      	uxtb	r3, r3
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	3302      	adds	r3, #2
 80091a0:	2201      	movs	r2, #1
 80091a2:	fa02 f303 	lsl.w	r3, r2, r3
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80091aa:	fb03 f202 	mul.w	r2, r3, r2
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	7a1b      	ldrb	r3, [r3, #8]
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	f003 030f 	and.w	r3, r3, #15
 80091bc:	2201      	movs	r2, #1
 80091be:	409a      	lsls	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80091cc:	0a52      	lsrs	r2, r2, #9
 80091ce:	fb03 f202 	mul.w	r2, r3, r2
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091dc:	661a      	str	r2, [r3, #96]	@ 0x60
 80091de:	e031      	b.n	8009244 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d11d      	bne.n	8009224 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091ec:	041b      	lsls	r3, r3, #16
 80091ee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091f6:	0c1b      	lsrs	r3, r3, #16
 80091f8:	431a      	orrs	r2, r3
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	3301      	adds	r3, #1
 8009204:	029a      	lsls	r2, r3, #10
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009218:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	661a      	str	r2, [r3, #96]	@ 0x60
 8009222:	e00f      	b.n	8009244 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a58      	ldr	r2, [pc, #352]	@ (800938c <HAL_SD_GetCardCSD+0x344>)
 800922a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009230:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e09d      	b.n	8009380 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009248:	0b9b      	lsrs	r3, r3, #14
 800924a:	b2db      	uxtb	r3, r3
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	b2da      	uxtb	r2, r3
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800925a:	09db      	lsrs	r3, r3, #7
 800925c:	b2db      	uxtb	r3, r3
 800925e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009262:	b2da      	uxtb	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800926c:	b2db      	uxtb	r3, r3
 800926e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009272:	b2da      	uxtb	r2, r3
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800927c:	0fdb      	lsrs	r3, r3, #31
 800927e:	b2da      	uxtb	r2, r3
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009288:	0f5b      	lsrs	r3, r3, #29
 800928a:	b2db      	uxtb	r3, r3
 800928c:	f003 0303 	and.w	r3, r3, #3
 8009290:	b2da      	uxtb	r2, r3
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800929a:	0e9b      	lsrs	r3, r3, #26
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f003 0307 	and.w	r3, r3, #7
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ac:	0d9b      	lsrs	r3, r3, #22
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	f003 030f 	and.w	r3, r3, #15
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092be:	0d5b      	lsrs	r3, r3, #21
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092da:	0c1b      	lsrs	r3, r3, #16
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092ee:	0bdb      	lsrs	r3, r3, #15
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	b2da      	uxtb	r2, r3
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009302:	0b9b      	lsrs	r3, r3, #14
 8009304:	b2db      	uxtb	r3, r3
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	b2da      	uxtb	r2, r3
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009316:	0b5b      	lsrs	r3, r3, #13
 8009318:	b2db      	uxtb	r3, r3
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	b2da      	uxtb	r2, r3
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800932a:	0b1b      	lsrs	r3, r3, #12
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	b2da      	uxtb	r2, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800933e:	0a9b      	lsrs	r3, r3, #10
 8009340:	b2db      	uxtb	r3, r3
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	b2da      	uxtb	r2, r3
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009352:	0a1b      	lsrs	r3, r3, #8
 8009354:	b2db      	uxtb	r3, r3
 8009356:	f003 0303 	and.w	r3, r3, #3
 800935a:	b2da      	uxtb	r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009366:	085b      	lsrs	r3, r3, #1
 8009368:	b2db      	uxtb	r3, r3
 800936a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800936e:	b2da      	uxtb	r2, r3
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	004005ff 	.word	0x004005ff

08009390 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80093da:	2300      	movs	r3, #0
}
 80093dc:	4618      	mov	r0, r3
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b086      	sub	sp, #24
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80093f4:	f107 030c 	add.w	r3, r7, #12
 80093f8:	4619      	mov	r1, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f970 	bl	80096e0 <SD_SendStatus>
 8009400:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d005      	beq.n	8009414 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	431a      	orrs	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	0a5b      	lsrs	r3, r3, #9
 8009418:	f003 030f 	and.w	r3, r3, #15
 800941c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800941e:	693b      	ldr	r3, [r7, #16]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3718      	adds	r7, #24
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009428:	b5b0      	push	{r4, r5, r7, lr}
 800942a:	b094      	sub	sp, #80	@ 0x50
 800942c:	af04      	add	r7, sp, #16
 800942e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009430:	2301      	movs	r3, #1
 8009432:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4618      	mov	r0, r3
 800943a:	f003 fb66 	bl	800cb0a <SDIO_GetPowerState>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d102      	bne.n	800944a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009444:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009448:	e0b8      	b.n	80095bc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800944e:	2b03      	cmp	r3, #3
 8009450:	d02f      	beq.n	80094b2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4618      	mov	r0, r3
 8009458:	f003 fd4d 	bl	800cef6 <SDMMC_CmdSendCID>
 800945c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800945e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009460:	2b00      	cmp	r3, #0
 8009462:	d001      	beq.n	8009468 <SD_InitCard+0x40>
    {
      return errorstate;
 8009464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009466:	e0a9      	b.n	80095bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2100      	movs	r1, #0
 800946e:	4618      	mov	r0, r3
 8009470:	f003 fb90 	bl	800cb94 <SDIO_GetResponse>
 8009474:	4602      	mov	r2, r0
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2104      	movs	r1, #4
 8009480:	4618      	mov	r0, r3
 8009482:	f003 fb87 	bl	800cb94 <SDIO_GetResponse>
 8009486:	4602      	mov	r2, r0
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2108      	movs	r1, #8
 8009492:	4618      	mov	r0, r3
 8009494:	f003 fb7e 	bl	800cb94 <SDIO_GetResponse>
 8009498:	4602      	mov	r2, r0
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	210c      	movs	r1, #12
 80094a4:	4618      	mov	r0, r3
 80094a6:	f003 fb75 	bl	800cb94 <SDIO_GetResponse>
 80094aa:	4602      	mov	r2, r0
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d00d      	beq.n	80094d6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f107 020e 	add.w	r2, r7, #14
 80094c2:	4611      	mov	r1, r2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f003 fd53 	bl	800cf70 <SDMMC_CmdSetRelAdd>
 80094ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80094cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <SD_InitCard+0xae>
    {
      return errorstate;
 80094d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094d4:	e072      	b.n	80095bc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094da:	2b03      	cmp	r3, #3
 80094dc:	d036      	beq.n	800954c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80094de:	89fb      	ldrh	r3, [r7, #14]
 80094e0:	461a      	mov	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ee:	041b      	lsls	r3, r3, #16
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f003 fd1d 	bl	800cf32 <SDMMC_CmdSendCSD>
 80094f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80094fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009502:	e05b      	b.n	80095bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2100      	movs	r1, #0
 800950a:	4618      	mov	r0, r3
 800950c:	f003 fb42 	bl	800cb94 <SDIO_GetResponse>
 8009510:	4602      	mov	r2, r0
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2104      	movs	r1, #4
 800951c:	4618      	mov	r0, r3
 800951e:	f003 fb39 	bl	800cb94 <SDIO_GetResponse>
 8009522:	4602      	mov	r2, r0
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2108      	movs	r1, #8
 800952e:	4618      	mov	r0, r3
 8009530:	f003 fb30 	bl	800cb94 <SDIO_GetResponse>
 8009534:	4602      	mov	r2, r0
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	210c      	movs	r1, #12
 8009540:	4618      	mov	r0, r3
 8009542:	f003 fb27 	bl	800cb94 <SDIO_GetResponse>
 8009546:	4602      	mov	r2, r0
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2104      	movs	r1, #4
 8009552:	4618      	mov	r0, r3
 8009554:	f003 fb1e 	bl	800cb94 <SDIO_GetResponse>
 8009558:	4603      	mov	r3, r0
 800955a:	0d1a      	lsrs	r2, r3, #20
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009560:	f107 0310 	add.w	r3, r7, #16
 8009564:	4619      	mov	r1, r3
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff fd6e 	bl	8009048 <HAL_SD_GetCardCSD>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d002      	beq.n	8009578 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009572:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009576:	e021      	b.n	80095bc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6819      	ldr	r1, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009580:	041b      	lsls	r3, r3, #16
 8009582:	2200      	movs	r2, #0
 8009584:	461c      	mov	r4, r3
 8009586:	4615      	mov	r5, r2
 8009588:	4622      	mov	r2, r4
 800958a:	462b      	mov	r3, r5
 800958c:	4608      	mov	r0, r1
 800958e:	f003 fc0d 	bl	800cdac <SDMMC_CmdSelDesel>
 8009592:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <SD_InitCard+0x176>
  {
    return errorstate;
 800959a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800959c:	e00e      	b.n	80095bc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681d      	ldr	r5, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	466c      	mov	r4, sp
 80095a6:	f103 0210 	add.w	r2, r3, #16
 80095aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80095ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80095b0:	3304      	adds	r3, #4
 80095b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095b4:	4628      	mov	r0, r5
 80095b6:	f003 fa51 	bl	800ca5c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3740      	adds	r7, #64	@ 0x40
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bdb0      	pop	{r4, r5, r7, pc}

080095c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80095d0:	2300      	movs	r3, #0
 80095d2:	617b      	str	r3, [r7, #20]
 80095d4:	2300      	movs	r3, #0
 80095d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4618      	mov	r0, r3
 80095de:	f003 fc08 	bl	800cdf2 <SDMMC_CmdGoIdleState>
 80095e2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <SD_PowerON+0x2a>
  {
    return errorstate;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	e072      	b.n	80096d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f003 fc1b 	bl	800ce2e <SDMMC_CmdOperCond>
 80095f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00d      	beq.n	800961c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4618      	mov	r0, r3
 800960c:	f003 fbf1 	bl	800cdf2 <SDMMC_CmdGoIdleState>
 8009610:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d004      	beq.n	8009622 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	e05b      	b.n	80096d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009626:	2b01      	cmp	r3, #1
 8009628:	d137      	bne.n	800969a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2100      	movs	r1, #0
 8009630:	4618      	mov	r0, r3
 8009632:	f003 fc1b 	bl	800ce6c <SDMMC_CmdAppCommand>
 8009636:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d02d      	beq.n	800969a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800963e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009642:	e047      	b.n	80096d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2100      	movs	r1, #0
 800964a:	4618      	mov	r0, r3
 800964c:	f003 fc0e 	bl	800ce6c <SDMMC_CmdAppCommand>
 8009650:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <SD_PowerON+0x98>
    {
      return errorstate;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	e03b      	b.n	80096d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	491e      	ldr	r1, [pc, #120]	@ (80096dc <SD_PowerON+0x118>)
 8009662:	4618      	mov	r0, r3
 8009664:	f003 fc24 	bl	800ceb0 <SDMMC_CmdAppOperCommand>
 8009668:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d002      	beq.n	8009676 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009670:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009674:	e02e      	b.n	80096d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2100      	movs	r1, #0
 800967c:	4618      	mov	r0, r3
 800967e:	f003 fa89 	bl	800cb94 <SDIO_GetResponse>
 8009682:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	0fdb      	lsrs	r3, r3, #31
 8009688:	2b01      	cmp	r3, #1
 800968a:	d101      	bne.n	8009690 <SD_PowerON+0xcc>
 800968c:	2301      	movs	r3, #1
 800968e:	e000      	b.n	8009692 <SD_PowerON+0xce>
 8009690:	2300      	movs	r3, #0
 8009692:	613b      	str	r3, [r7, #16]

    count++;
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	3301      	adds	r3, #1
 8009698:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d802      	bhi.n	80096aa <SD_PowerON+0xe6>
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0cc      	beq.n	8009644 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d902      	bls.n	80096ba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80096b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80096b8:	e00c      	b.n	80096d4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d003      	beq.n	80096cc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	645a      	str	r2, [r3, #68]	@ 0x44
 80096ca:	e002      	b.n	80096d2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3718      	adds	r7, #24
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	c1100000 	.word	0xc1100000

080096e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80096f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80096f4:	e018      	b.n	8009728 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096fe:	041b      	lsls	r3, r3, #16
 8009700:	4619      	mov	r1, r3
 8009702:	4610      	mov	r0, r2
 8009704:	f003 fc55 	bl	800cfb2 <SDMMC_CmdSendStatus>
 8009708:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	e009      	b.n	8009728 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2100      	movs	r1, #0
 800971a:	4618      	mov	r0, r3
 800971c:	f003 fa3a 	bl	800cb94 <SDIO_GetResponse>
 8009720:	4602      	mov	r2, r0
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d101      	bne.n	8009742 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e07b      	b.n	800983a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009746:	2b00      	cmp	r3, #0
 8009748:	d108      	bne.n	800975c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009752:	d009      	beq.n	8009768 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	61da      	str	r2, [r3, #28]
 800975a:	e005      	b.n	8009768 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b00      	cmp	r3, #0
 8009778:	d106      	bne.n	8009788 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f7fc ffae 	bl	80066e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800979e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80097b0:	431a      	orrs	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097ba:	431a      	orrs	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	431a      	orrs	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	431a      	orrs	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097d8:	431a      	orrs	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80097e2:	431a      	orrs	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a1b      	ldr	r3, [r3, #32]
 80097e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ec:	ea42 0103 	orr.w	r1, r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	430a      	orrs	r2, r1
 80097fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	0c1b      	lsrs	r3, r3, #16
 8009806:	f003 0104 	and.w	r1, r3, #4
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800980e:	f003 0210 	and.w	r2, r3, #16
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69da      	ldr	r2, [r3, #28]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009828:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b088      	sub	sp, #32
 8009846:	af00      	add	r7, sp, #0
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	603b      	str	r3, [r7, #0]
 800984e:	4613      	mov	r3, r2
 8009850:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009852:	f7fd fa1b 	bl	8006c8c <HAL_GetTick>
 8009856:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009858:	88fb      	ldrh	r3, [r7, #6]
 800985a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b01      	cmp	r3, #1
 8009866:	d001      	beq.n	800986c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009868:	2302      	movs	r3, #2
 800986a:	e12a      	b.n	8009ac2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d002      	beq.n	8009878 <HAL_SPI_Transmit+0x36>
 8009872:	88fb      	ldrh	r3, [r7, #6]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e122      	b.n	8009ac2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009882:	2b01      	cmp	r3, #1
 8009884:	d101      	bne.n	800988a <HAL_SPI_Transmit+0x48>
 8009886:	2302      	movs	r3, #2
 8009888:	e11b      	b.n	8009ac2 <HAL_SPI_Transmit+0x280>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2203      	movs	r2, #3
 8009896:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2200      	movs	r2, #0
 800989e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	68ba      	ldr	r2, [r7, #8]
 80098a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	88fa      	ldrh	r2, [r7, #6]
 80098aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	88fa      	ldrh	r2, [r7, #6]
 80098b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098d8:	d10f      	bne.n	80098fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80098f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009904:	2b40      	cmp	r3, #64	@ 0x40
 8009906:	d007      	beq.n	8009918 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009916:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009920:	d152      	bne.n	80099c8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d002      	beq.n	8009930 <HAL_SPI_Transmit+0xee>
 800992a:	8b7b      	ldrh	r3, [r7, #26]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d145      	bne.n	80099bc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009934:	881a      	ldrh	r2, [r3, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009940:	1c9a      	adds	r2, r3, #2
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800994a:	b29b      	uxth	r3, r3
 800994c:	3b01      	subs	r3, #1
 800994e:	b29a      	uxth	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009954:	e032      	b.n	80099bc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	f003 0302 	and.w	r3, r3, #2
 8009960:	2b02      	cmp	r3, #2
 8009962:	d112      	bne.n	800998a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009968:	881a      	ldrh	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009974:	1c9a      	adds	r2, r3, #2
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800997e:	b29b      	uxth	r3, r3
 8009980:	3b01      	subs	r3, #1
 8009982:	b29a      	uxth	r2, r3
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009988:	e018      	b.n	80099bc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800998a:	f7fd f97f 	bl	8006c8c <HAL_GetTick>
 800998e:	4602      	mov	r2, r0
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	1ad3      	subs	r3, r2, r3
 8009994:	683a      	ldr	r2, [r7, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	d803      	bhi.n	80099a2 <HAL_SPI_Transmit+0x160>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a0:	d102      	bne.n	80099a8 <HAL_SPI_Transmit+0x166>
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d109      	bne.n	80099bc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e082      	b.n	8009ac2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1c7      	bne.n	8009956 <HAL_SPI_Transmit+0x114>
 80099c6:	e053      	b.n	8009a70 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <HAL_SPI_Transmit+0x194>
 80099d0:	8b7b      	ldrh	r3, [r7, #26]
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d147      	bne.n	8009a66 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	330c      	adds	r3, #12
 80099e0:	7812      	ldrb	r2, [r2, #0]
 80099e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	3b01      	subs	r3, #1
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80099fc:	e033      	b.n	8009a66 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f003 0302 	and.w	r3, r3, #2
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d113      	bne.n	8009a34 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	330c      	adds	r3, #12
 8009a16:	7812      	ldrb	r2, [r2, #0]
 8009a18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009a32:	e018      	b.n	8009a66 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a34:	f7fd f92a 	bl	8006c8c <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d803      	bhi.n	8009a4c <HAL_SPI_Transmit+0x20a>
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4a:	d102      	bne.n	8009a52 <HAL_SPI_Transmit+0x210>
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d109      	bne.n	8009a66 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e02d      	b.n	8009ac2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1c6      	bne.n	80099fe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a70:	69fa      	ldr	r2, [r7, #28]
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f001 faef 	bl	800b058 <SPI_EndRxTxTransaction>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d002      	beq.n	8009a86 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2220      	movs	r2, #32
 8009a84:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10a      	bne.n	8009aa4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a8e:	2300      	movs	r3, #0
 8009a90:	617b      	str	r3, [r7, #20]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	617b      	str	r3, [r7, #20]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	617b      	str	r3, [r7, #20]
 8009aa2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e000      	b.n	8009ac2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
  }
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3720      	adds	r7, #32
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b088      	sub	sp, #32
 8009ace:	af02      	add	r7, sp, #8
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	60b9      	str	r1, [r7, #8]
 8009ad4:	603b      	str	r3, [r7, #0]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d001      	beq.n	8009aea <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	e104      	b.n	8009cf4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009af2:	d112      	bne.n	8009b1a <HAL_SPI_Receive+0x50>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10e      	bne.n	8009b1a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2204      	movs	r2, #4
 8009b00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009b04:	88fa      	ldrh	r2, [r7, #6]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 f8f3 	bl	8009cfc <HAL_SPI_TransmitReceive>
 8009b16:	4603      	mov	r3, r0
 8009b18:	e0ec      	b.n	8009cf4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b1a:	f7fd f8b7 	bl	8006c8c <HAL_GetTick>
 8009b1e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d002      	beq.n	8009b2c <HAL_SPI_Receive+0x62>
 8009b26:	88fb      	ldrh	r3, [r7, #6]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d101      	bne.n	8009b30 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e0e1      	b.n	8009cf4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009b36:	2b01      	cmp	r3, #1
 8009b38:	d101      	bne.n	8009b3e <HAL_SPI_Receive+0x74>
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	e0da      	b.n	8009cf4 <HAL_SPI_Receive+0x22a>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2204      	movs	r2, #4
 8009b4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	88fa      	ldrh	r2, [r7, #6]
 8009b5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	88fa      	ldrh	r2, [r7, #6]
 8009b64:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2200      	movs	r2, #0
 8009b82:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b8c:	d10f      	bne.n	8009bae <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009bac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bb8:	2b40      	cmp	r3, #64	@ 0x40
 8009bba:	d007      	beq.n	8009bcc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d170      	bne.n	8009cb6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009bd4:	e035      	b.n	8009c42 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d115      	bne.n	8009c10 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f103 020c 	add.w	r2, r3, #12
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf0:	7812      	ldrb	r2, [r2, #0]
 8009bf2:	b2d2      	uxtb	r2, r2
 8009bf4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bfa:	1c5a      	adds	r2, r3, #1
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009c0e:	e018      	b.n	8009c42 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c10:	f7fd f83c 	bl	8006c8c <HAL_GetTick>
 8009c14:	4602      	mov	r2, r0
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	683a      	ldr	r2, [r7, #0]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d803      	bhi.n	8009c28 <HAL_SPI_Receive+0x15e>
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c26:	d102      	bne.n	8009c2e <HAL_SPI_Receive+0x164>
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d109      	bne.n	8009c42 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e058      	b.n	8009cf4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1c4      	bne.n	8009bd6 <HAL_SPI_Receive+0x10c>
 8009c4c:	e038      	b.n	8009cc0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f003 0301 	and.w	r3, r3, #1
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d113      	bne.n	8009c84 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68da      	ldr	r2, [r3, #12]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c66:	b292      	uxth	r2, r2
 8009c68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c6e:	1c9a      	adds	r2, r3, #2
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009c82:	e018      	b.n	8009cb6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c84:	f7fd f802 	bl	8006c8c <HAL_GetTick>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	1ad3      	subs	r3, r2, r3
 8009c8e:	683a      	ldr	r2, [r7, #0]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d803      	bhi.n	8009c9c <HAL_SPI_Receive+0x1d2>
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9a:	d102      	bne.n	8009ca2 <HAL_SPI_Receive+0x1d8>
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d109      	bne.n	8009cb6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	e01e      	b.n	8009cf4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1c6      	bne.n	8009c4e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f001 f961 	bl	800af8c <SPI_EndRxTransaction>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e000      	b.n	8009cf4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
  }
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08a      	sub	sp, #40	@ 0x28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d0e:	f7fc ffbd 	bl	8006c8c <HAL_GetTick>
 8009d12:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d1a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009d22:	887b      	ldrh	r3, [r7, #2]
 8009d24:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009d26:	7ffb      	ldrb	r3, [r7, #31]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d00c      	beq.n	8009d46 <HAL_SPI_TransmitReceive+0x4a>
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d32:	d106      	bne.n	8009d42 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d102      	bne.n	8009d42 <HAL_SPI_TransmitReceive+0x46>
 8009d3c:	7ffb      	ldrb	r3, [r7, #31]
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	d001      	beq.n	8009d46 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8009d42:	2302      	movs	r3, #2
 8009d44:	e17f      	b.n	800a046 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d005      	beq.n	8009d58 <HAL_SPI_TransmitReceive+0x5c>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d002      	beq.n	8009d58 <HAL_SPI_TransmitReceive+0x5c>
 8009d52:	887b      	ldrh	r3, [r7, #2]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e174      	b.n	800a046 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d101      	bne.n	8009d6a <HAL_SPI_TransmitReceive+0x6e>
 8009d66:	2302      	movs	r3, #2
 8009d68:	e16d      	b.n	800a046 <HAL_SPI_TransmitReceive+0x34a>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b04      	cmp	r3, #4
 8009d7c:	d003      	beq.n	8009d86 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2205      	movs	r2, #5
 8009d82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	887a      	ldrh	r2, [r7, #2]
 8009d96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	887a      	ldrh	r2, [r7, #2]
 8009d9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	887a      	ldrh	r2, [r7, #2]
 8009da8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	887a      	ldrh	r2, [r7, #2]
 8009dae:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2200      	movs	r2, #0
 8009db4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2200      	movs	r2, #0
 8009dba:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dc6:	2b40      	cmp	r3, #64	@ 0x40
 8009dc8:	d007      	beq.n	8009dda <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009de2:	d17e      	bne.n	8009ee2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <HAL_SPI_TransmitReceive+0xf6>
 8009dec:	8afb      	ldrh	r3, [r7, #22]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d16c      	bne.n	8009ecc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009df6:	881a      	ldrh	r2, [r3, #0]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e02:	1c9a      	adds	r2, r3, #2
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e16:	e059      	b.n	8009ecc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f003 0302 	and.w	r3, r3, #2
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d11b      	bne.n	8009e5e <HAL_SPI_TransmitReceive+0x162>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d016      	beq.n	8009e5e <HAL_SPI_TransmitReceive+0x162>
 8009e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d113      	bne.n	8009e5e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e3a:	881a      	ldrh	r2, [r3, #0]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e46:	1c9a      	adds	r2, r3, #2
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f003 0301 	and.w	r3, r3, #1
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d119      	bne.n	8009ea0 <HAL_SPI_TransmitReceive+0x1a4>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d014      	beq.n	8009ea0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68da      	ldr	r2, [r3, #12]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e80:	b292      	uxth	r2, r2
 8009e82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e88:	1c9a      	adds	r2, r3, #2
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	3b01      	subs	r3, #1
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ea0:	f7fc fef4 	bl	8006c8c <HAL_GetTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	6a3b      	ldr	r3, [r7, #32]
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d80d      	bhi.n	8009ecc <HAL_SPI_TransmitReceive+0x1d0>
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb6:	d009      	beq.n	8009ecc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e0bc      	b.n	800a046 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1a0      	bne.n	8009e18 <HAL_SPI_TransmitReceive+0x11c>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d19b      	bne.n	8009e18 <HAL_SPI_TransmitReceive+0x11c>
 8009ee0:	e082      	b.n	8009fe8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <HAL_SPI_TransmitReceive+0x1f4>
 8009eea:	8afb      	ldrh	r3, [r7, #22]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d171      	bne.n	8009fd4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	330c      	adds	r3, #12
 8009efa:	7812      	ldrb	r2, [r2, #0]
 8009efc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f02:	1c5a      	adds	r2, r3, #1
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f16:	e05d      	b.n	8009fd4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f003 0302 	and.w	r3, r3, #2
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d11c      	bne.n	8009f60 <HAL_SPI_TransmitReceive+0x264>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f2a:	b29b      	uxth	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d017      	beq.n	8009f60 <HAL_SPI_TransmitReceive+0x264>
 8009f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d114      	bne.n	8009f60 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	330c      	adds	r3, #12
 8009f40:	7812      	ldrb	r2, [r2, #0]
 8009f42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f48:	1c5a      	adds	r2, r3, #1
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	3b01      	subs	r3, #1
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d119      	bne.n	8009fa2 <HAL_SPI_TransmitReceive+0x2a6>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d014      	beq.n	8009fa2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	68da      	ldr	r2, [r3, #12]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f82:	b2d2      	uxtb	r2, r2
 8009f84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f8a:	1c5a      	adds	r2, r3, #1
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	3b01      	subs	r3, #1
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009fa2:	f7fc fe73 	bl	8006c8c <HAL_GetTick>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d803      	bhi.n	8009fba <HAL_SPI_TransmitReceive+0x2be>
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb8:	d102      	bne.n	8009fc0 <HAL_SPI_TransmitReceive+0x2c4>
 8009fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d109      	bne.n	8009fd4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e038      	b.n	800a046 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d19c      	bne.n	8009f18 <HAL_SPI_TransmitReceive+0x21c>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d197      	bne.n	8009f18 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009fe8:	6a3a      	ldr	r2, [r7, #32]
 8009fea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f001 f833 	bl	800b058 <SPI_EndRxTxTransaction>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d008      	beq.n	800a00a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e01d      	b.n	800a046 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d10a      	bne.n	800a028 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a012:	2300      	movs	r3, #0
 800a014:	613b      	str	r3, [r7, #16]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	613b      	str	r3, [r7, #16]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	613b      	str	r3, [r7, #16]
 800a026:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d001      	beq.n	800a044 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e000      	b.n	800a046 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800a044:	2300      	movs	r3, #0
  }
}
 800a046:	4618      	mov	r0, r3
 800a048:	3728      	adds	r7, #40	@ 0x28
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
	...

0800a050 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	4613      	mov	r3, r2
 800a05c:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b01      	cmp	r3, #1
 800a068:	d001      	beq.n	800a06e <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800a06a:	2302      	movs	r3, #2
 800a06c:	e07f      	b.n	800a16e <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d110      	bne.n	800a098 <HAL_SPI_Receive_IT+0x48>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a07e:	d10b      	bne.n	800a098 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2204      	movs	r2, #4
 800a084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800a088:	88fb      	ldrh	r3, [r7, #6]
 800a08a:	68ba      	ldr	r2, [r7, #8]
 800a08c:	68b9      	ldr	r1, [r7, #8]
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f000 f876 	bl	800a180 <HAL_SPI_TransmitReceive_IT>
 800a094:	4603      	mov	r3, r0
 800a096:	e06a      	b.n	800a16e <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d002      	beq.n	800a0a4 <HAL_SPI_Receive_IT+0x54>
 800a09e:	88fb      	ldrh	r3, [r7, #6]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d101      	bne.n	800a0a8 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e062      	b.n	800a16e <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d101      	bne.n	800a0b6 <HAL_SPI_Receive_IT+0x66>
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	e05b      	b.n	800a16e <HAL_SPI_Receive_IT+0x11e>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2204      	movs	r2, #4
 800a0c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	88fa      	ldrh	r2, [r7, #6]
 800a0d6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	88fa      	ldrh	r2, [r7, #6]
 800a0dc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	4a1d      	ldr	r2, [pc, #116]	@ (800a178 <HAL_SPI_Receive_IT+0x128>)
 800a102:	641a      	str	r2, [r3, #64]	@ 0x40
 800a104:	e002      	b.n	800a10c <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	4a1c      	ldr	r2, [pc, #112]	@ (800a17c <HAL_SPI_Receive_IT+0x12c>)
 800a10a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a114:	d10f      	bne.n	800a136 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a124:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a134:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a140:	2b40      	cmp	r3, #64	@ 0x40
 800a142:	d007      	beq.n	800a154 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a152:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a16a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	0800ae35 	.word	0x0800ae35
 800a17c:	0800adeb 	.word	0x0800adeb

0800a180 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 800a180:	b480      	push	{r7}
 800a182:	b087      	sub	sp, #28
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a194:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a19c:	7dfb      	ldrb	r3, [r7, #23]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d00c      	beq.n	800a1bc <HAL_SPI_TransmitReceive_IT+0x3c>
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a1a8:	d106      	bne.n	800a1b8 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d102      	bne.n	800a1b8 <HAL_SPI_TransmitReceive_IT+0x38>
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d001      	beq.n	800a1bc <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_BUSY;
 800a1b8:	2302      	movs	r3, #2
 800a1ba:	e061      	b.n	800a280 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d005      	beq.n	800a1ce <HAL_SPI_TransmitReceive_IT+0x4e>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <HAL_SPI_TransmitReceive_IT+0x4e>
 800a1c8:	887b      	ldrh	r3, [r7, #2]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e056      	b.n	800a280 <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d101      	bne.n	800a1e0 <HAL_SPI_TransmitReceive_IT+0x60>
 800a1dc:	2302      	movs	r3, #2
 800a1de:	e04f      	b.n	800a280 <HAL_SPI_TransmitReceive_IT+0x100>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d003      	beq.n	800a1fc <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2205      	movs	r2, #5
 800a1f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	887a      	ldrh	r2, [r7, #2]
 800a20c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	887a      	ldrh	r2, [r7, #2]
 800a212:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	887a      	ldrh	r2, [r7, #2]
 800a21e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	887a      	ldrh	r2, [r7, #2]
 800a224:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d006      	beq.n	800a23c <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	4a16      	ldr	r2, [pc, #88]	@ (800a28c <HAL_SPI_TransmitReceive_IT+0x10c>)
 800a232:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4a16      	ldr	r2, [pc, #88]	@ (800a290 <HAL_SPI_TransmitReceive_IT+0x110>)
 800a238:	645a      	str	r2, [r3, #68]	@ 0x44
 800a23a:	e005      	b.n	800a248 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4a15      	ldr	r2, [pc, #84]	@ (800a294 <HAL_SPI_TransmitReceive_IT+0x114>)
 800a240:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	4a14      	ldr	r2, [pc, #80]	@ (800a298 <HAL_SPI_TransmitReceive_IT+0x118>)
 800a246:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a252:	2b40      	cmp	r3, #64	@ 0x40
 800a254:	d007      	beq.n	800a266 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a264:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	685a      	ldr	r2, [r3, #4]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 800a27c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	371c      	adds	r7, #28
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	0800ad2d 	.word	0x0800ad2d
 800a290:	0800ad8d 	.word	0x0800ad8d
 800a294:	0800ac69 	.word	0x0800ac69
 800a298:	0800accd 	.word	0x0800accd

0800a29c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d001      	beq.n	800a2ba <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800a2b6:	2302      	movs	r3, #2
 800a2b8:	e097      	b.n	800a3ea <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <HAL_SPI_Transmit_DMA+0x2a>
 800a2c0:	88fb      	ldrh	r3, [r7, #6]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e08f      	b.n	800a3ea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d101      	bne.n	800a2d8 <HAL_SPI_Transmit_DMA+0x3c>
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	e088      	b.n	800a3ea <HAL_SPI_Transmit_DMA+0x14e>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2203      	movs	r2, #3
 800a2e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	88fa      	ldrh	r2, [r7, #6]
 800a2f8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	88fa      	ldrh	r2, [r7, #6]
 800a2fe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2200      	movs	r2, #0
 800a31c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a326:	d10f      	bne.n	800a348 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a336:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a346:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a34c:	4a29      	ldr	r2, [pc, #164]	@ (800a3f4 <HAL_SPI_Transmit_DMA+0x158>)
 800a34e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a354:	4a28      	ldr	r2, [pc, #160]	@ (800a3f8 <HAL_SPI_Transmit_DMA+0x15c>)
 800a356:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a35c:	4a27      	ldr	r2, [pc, #156]	@ (800a3fc <HAL_SPI_Transmit_DMA+0x160>)
 800a35e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a364:	2200      	movs	r2, #0
 800a366:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a370:	4619      	mov	r1, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	330c      	adds	r3, #12
 800a378:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a37e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a380:	f7fd f89c 	bl	80074bc <HAL_DMA_Start_IT>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00b      	beq.n	800a3a2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a38e:	f043 0210 	orr.w	r2, r3, #16
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e023      	b.n	800a3ea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3ac:	2b40      	cmp	r3, #64	@ 0x40
 800a3ae:	d007      	beq.n	800a3c0 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3be:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685a      	ldr	r2, [r3, #4]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f042 0220 	orr.w	r2, r2, #32
 800a3d6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685a      	ldr	r2, [r3, #4]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f042 0202 	orr.w	r2, r2, #2
 800a3e6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	0800abad 	.word	0x0800abad
 800a3f8:	0800a9cd 	.word	0x0800a9cd
 800a3fc:	0800ac01 	.word	0x0800ac01

0800a400 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	4613      	mov	r3, r2
 800a40c:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b01      	cmp	r3, #1
 800a418:	d001      	beq.n	800a41e <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 800a41a:	2302      	movs	r3, #2
 800a41c:	e0a9      	b.n	800a572 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d110      	bne.n	800a448 <HAL_SPI_Receive_DMA+0x48>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a42e:	d10b      	bne.n	800a448 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2204      	movs	r2, #4
 800a434:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800a438:	88fb      	ldrh	r3, [r7, #6]
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	68b9      	ldr	r1, [r7, #8]
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 f8a2 	bl	800a588 <HAL_SPI_TransmitReceive_DMA>
 800a444:	4603      	mov	r3, r0
 800a446:	e094      	b.n	800a572 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <HAL_SPI_Receive_DMA+0x54>
 800a44e:	88fb      	ldrh	r3, [r7, #6]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	e08c      	b.n	800a572 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d101      	bne.n	800a466 <HAL_SPI_Receive_DMA+0x66>
 800a462:	2302      	movs	r3, #2
 800a464:	e085      	b.n	800a572 <HAL_SPI_Receive_DMA+0x172>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2201      	movs	r2, #1
 800a46a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2204      	movs	r2, #4
 800a472:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	88fa      	ldrh	r2, [r7, #6]
 800a486:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	88fa      	ldrh	r2, [r7, #6]
 800a48c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4ae:	d10f      	bne.n	800a4d0 <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a4be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a4ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4d4:	4a29      	ldr	r2, [pc, #164]	@ (800a57c <HAL_SPI_Receive_DMA+0x17c>)
 800a4d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4dc:	4a28      	ldr	r2, [pc, #160]	@ (800a580 <HAL_SPI_Receive_DMA+0x180>)
 800a4de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4e4:	4a27      	ldr	r2, [pc, #156]	@ (800a584 <HAL_SPI_Receive_DMA+0x184>)
 800a4e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	330c      	adds	r3, #12
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a500:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a506:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a508:	f7fc ffd8 	bl	80074bc <HAL_DMA_Start_IT>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00b      	beq.n	800a52a <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a516:	f043 0210 	orr.w	r2, r3, #16
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	e023      	b.n	800a572 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a534:	2b40      	cmp	r3, #64	@ 0x40
 800a536:	d007      	beq.n	800a548 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a546:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f042 0220 	orr.w	r2, r2, #32
 800a55e:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685a      	ldr	r2, [r3, #4]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f042 0201 	orr.w	r2, r2, #1
 800a56e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	0800abc9 	.word	0x0800abc9
 800a580:	0800aa75 	.word	0x0800aa75
 800a584:	0800ac01 	.word	0x0800ac01

0800a588 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	60b9      	str	r1, [r7, #8]
 800a592:	607a      	str	r2, [r7, #4]
 800a594:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a59c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a5a4:	7dfb      	ldrb	r3, [r7, #23]
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d00c      	beq.n	800a5c4 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a5b0:	d106      	bne.n	800a5c0 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d102      	bne.n	800a5c0 <HAL_SPI_TransmitReceive_DMA+0x38>
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	2b04      	cmp	r3, #4
 800a5be:	d001      	beq.n	800a5c4 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	e0cf      	b.n	800a764 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d005      	beq.n	800a5d6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d002      	beq.n	800a5d6 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800a5d0:	887b      	ldrh	r3, [r7, #2]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e0c4      	b.n	800a764 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d101      	bne.n	800a5e8 <HAL_SPI_TransmitReceive_DMA+0x60>
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	e0bd      	b.n	800a764 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b04      	cmp	r3, #4
 800a5fa:	d003      	beq.n	800a604 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2205      	movs	r2, #5
 800a600:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	887a      	ldrh	r2, [r7, #2]
 800a614:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	887a      	ldrh	r2, [r7, #2]
 800a61a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	687a      	ldr	r2, [r7, #4]
 800a620:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	887a      	ldrh	r2, [r7, #2]
 800a626:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	887a      	ldrh	r2, [r7, #2]
 800a62c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a640:	b2db      	uxtb	r3, r3
 800a642:	2b04      	cmp	r3, #4
 800a644:	d108      	bne.n	800a658 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a64a:	4a48      	ldr	r2, [pc, #288]	@ (800a76c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 800a64c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a652:	4a47      	ldr	r2, [pc, #284]	@ (800a770 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800a654:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a656:	e007      	b.n	800a668 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a65c:	4a45      	ldr	r2, [pc, #276]	@ (800a774 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800a65e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a664:	4a44      	ldr	r2, [pc, #272]	@ (800a778 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800a666:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a66c:	4a43      	ldr	r2, [pc, #268]	@ (800a77c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800a66e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a674:	2200      	movs	r2, #0
 800a676:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	330c      	adds	r3, #12
 800a682:	4619      	mov	r1, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a688:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a68e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a690:	f7fc ff14 	bl	80074bc <HAL_DMA_Start_IT>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00b      	beq.n	800a6b2 <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a69e:	f043 0210 	orr.w	r2, r3, #16
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e058      	b.n	800a764 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f042 0201 	orr.w	r2, r2, #1
 800a6c0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6de:	2200      	movs	r2, #0
 800a6e0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	330c      	adds	r3, #12
 800a6f2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a6f8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a6fa:	f7fc fedf 	bl	80074bc <HAL_DMA_Start_IT>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00b      	beq.n	800a71c <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a708:	f043 0210 	orr.w	r2, r3, #16
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e023      	b.n	800a764 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a726:	2b40      	cmp	r3, #64	@ 0x40
 800a728:	d007      	beq.n	800a73a <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a738:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	685a      	ldr	r2, [r3, #4]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f042 0220 	orr.w	r2, r2, #32
 800a750:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f042 0202 	orr.w	r2, r2, #2
 800a760:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a762:	2300      	movs	r3, #0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3718      	adds	r7, #24
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	0800abc9 	.word	0x0800abc9
 800a770:	0800aa75 	.word	0x0800aa75
 800a774:	0800abe5 	.word	0x0800abe5
 800a778:	0800ab1d 	.word	0x0800ab1d
 800a77c:	0800ac01 	.word	0x0800ac01

0800a780 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b088      	sub	sp, #32
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10e      	bne.n	800a7c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d009      	beq.n	800a7c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d004      	beq.n	800a7c0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	4798      	blx	r3
    return;
 800a7be:	e0ce      	b.n	800a95e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	f003 0302 	and.w	r3, r3, #2
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d009      	beq.n	800a7de <HAL_SPI_IRQHandler+0x5e>
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d004      	beq.n	800a7de <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	4798      	blx	r3
    return;
 800a7dc:	e0bf      	b.n	800a95e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	f003 0320 	and.w	r3, r3, #32
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d10a      	bne.n	800a7fe <HAL_SPI_IRQHandler+0x7e>
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d105      	bne.n	800a7fe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 80b0 	beq.w	800a95e <HAL_SPI_IRQHandler+0x1de>
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	f003 0320 	and.w	r3, r3, #32
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 80aa 	beq.w	800a95e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a80a:	69bb      	ldr	r3, [r7, #24]
 800a80c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a810:	2b00      	cmp	r3, #0
 800a812:	d023      	beq.n	800a85c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b03      	cmp	r3, #3
 800a81e:	d011      	beq.n	800a844 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a824:	f043 0204 	orr.w	r2, r3, #4
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a82c:	2300      	movs	r3, #0
 800a82e:	617b      	str	r3, [r7, #20]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	617b      	str	r3, [r7, #20]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	617b      	str	r3, [r7, #20]
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	e00b      	b.n	800a85c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a844:	2300      	movs	r3, #0
 800a846:	613b      	str	r3, [r7, #16]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	613b      	str	r3, [r7, #16]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	613b      	str	r3, [r7, #16]
 800a858:	693b      	ldr	r3, [r7, #16]
        return;
 800a85a:	e080      	b.n	800a95e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	f003 0320 	and.w	r3, r3, #32
 800a862:	2b00      	cmp	r3, #0
 800a864:	d014      	beq.n	800a890 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a86a:	f043 0201 	orr.w	r2, r3, #1
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a872:	2300      	movs	r3, #0
 800a874:	60fb      	str	r3, [r7, #12]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	60fb      	str	r3, [r7, #12]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a88c:	601a      	str	r2, [r3, #0]
 800a88e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00c      	beq.n	800a8b4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a89e:	f043 0208 	orr.w	r2, r3, #8
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	60bb      	str	r3, [r7, #8]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	60bb      	str	r3, [r7, #8]
 800a8b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d04f      	beq.n	800a95c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	685a      	ldr	r2, [r3, #4]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a8ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a8d4:	69fb      	ldr	r3, [r7, #28]
 800a8d6:	f003 0302 	and.w	r3, r3, #2
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d104      	bne.n	800a8e8 <HAL_SPI_IRQHandler+0x168>
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	f003 0301 	and.w	r3, r3, #1
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d034      	beq.n	800a952 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	685a      	ldr	r2, [r3, #4]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f022 0203 	bic.w	r2, r2, #3
 800a8f6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d011      	beq.n	800a924 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a904:	4a17      	ldr	r2, [pc, #92]	@ (800a964 <HAL_SPI_IRQHandler+0x1e4>)
 800a906:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fc fe9d 	bl	800764c <HAL_DMA_Abort_IT>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d005      	beq.n	800a924 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a91c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d016      	beq.n	800a95a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a930:	4a0c      	ldr	r2, [pc, #48]	@ (800a964 <HAL_SPI_IRQHandler+0x1e4>)
 800a932:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fc fe87 	bl	800764c <HAL_DMA_Abort_IT>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d00a      	beq.n	800a95a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a948:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800a950:	e003      	b.n	800a95a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f830 	bl	800a9b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a958:	e000      	b.n	800a95c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800a95a:	bf00      	nop
    return;
 800a95c:	bf00      	nop
  }
}
 800a95e:	3720      	adds	r7, #32
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	0800ac41 	.word	0x0800ac41

0800a968 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9da:	f7fc f957 	bl	8006c8c <HAL_GetTick>
 800a9de:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9ee:	d03b      	beq.n	800aa68 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	685a      	ldr	r2, [r3, #4]
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f022 0220 	bic.w	r2, r2, #32
 800a9fe:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	685a      	ldr	r2, [r3, #4]
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f022 0202 	bic.w	r2, r2, #2
 800aa0e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	2164      	movs	r1, #100	@ 0x64
 800aa14:	6978      	ldr	r0, [r7, #20]
 800aa16:	f000 fb1f 	bl	800b058 <SPI_EndRxTxTransaction>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d005      	beq.n	800aa2c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa24:	f043 0220 	orr.w	r2, r3, #32
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10a      	bne.n	800aa4a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa34:	2300      	movs	r3, #0
 800aa36:	60fb      	str	r3, [r7, #12]
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	60fb      	str	r3, [r7, #12]
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	60fb      	str	r3, [r7, #12]
 800aa48:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d003      	beq.n	800aa68 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800aa60:	6978      	ldr	r0, [r7, #20]
 800aa62:	f7ff ffa9 	bl	800a9b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800aa66:	e002      	b.n	800aa6e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800aa68:	6978      	ldr	r0, [r7, #20]
 800aa6a:	f7f9 fff7 	bl	8004a5c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa80:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa82:	f7fc f903 	bl	8006c8c <HAL_GetTick>
 800aa86:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa96:	d03b      	beq.n	800ab10 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	685a      	ldr	r2, [r3, #4]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f022 0220 	bic.w	r2, r2, #32
 800aaa6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10d      	bne.n	800aacc <SPI_DMAReceiveCplt+0x58>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aab8:	d108      	bne.n	800aacc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	685a      	ldr	r2, [r3, #4]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f022 0203 	bic.w	r2, r2, #3
 800aac8:	605a      	str	r2, [r3, #4]
 800aaca:	e007      	b.n	800aadc <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	685a      	ldr	r2, [r3, #4]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f022 0201 	bic.w	r2, r2, #1
 800aada:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aadc:	68ba      	ldr	r2, [r7, #8]
 800aade:	2164      	movs	r1, #100	@ 0x64
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f000 fa53 	bl	800af8c <SPI_EndRxTransaction>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d002      	beq.n	800aaf2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2220      	movs	r2, #32
 800aaf0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d003      	beq.n	800ab10 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f7ff ff55 	bl	800a9b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ab0e:	e002      	b.n	800ab16 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f7f9 ffb9 	bl	8004a88 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab28:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab2a:	f7fc f8af 	bl	8006c8c <HAL_GetTick>
 800ab2e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab3e:	d02f      	beq.n	800aba0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f022 0220 	bic.w	r2, r2, #32
 800ab4e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	2164      	movs	r1, #100	@ 0x64
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f000 fa7f 	bl	800b058 <SPI_EndRxTxTransaction>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d005      	beq.n	800ab6c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab64:	f043 0220 	orr.w	r2, r3, #32
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	685a      	ldr	r2, [r3, #4]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f022 0203 	bic.w	r2, r2, #3
 800ab7a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d003      	beq.n	800aba0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f7ff ff0d 	bl	800a9b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ab9e:	e002      	b.n	800aba6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f7ff fee1 	bl	800a968 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7ff fede 	bl	800a97c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800abc0:	bf00      	nop
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abd4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f7ff feda 	bl	800a990 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800abdc:	bf00      	nop
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abf0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800abf2:	68f8      	ldr	r0, [r7, #12]
 800abf4:	f7ff fed6 	bl	800a9a4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800abf8:	bf00      	nop
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac0c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	685a      	ldr	r2, [r3, #4]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f022 0203 	bic.w	r2, r2, #3
 800ac1c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac22:	f043 0210 	orr.w	r2, r3, #16
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f7ff fec0 	bl	800a9b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac38:	bf00      	nop
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac4c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f7ff feac 	bl	800a9b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac60:	bf00      	nop
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f103 020c 	add.w	r2, r3, #12
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac7c:	7812      	ldrb	r2, [r2, #0]
 800ac7e:	b2d2      	uxtb	r2, r2
 800ac80:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac86:	1c5a      	adds	r2, r3, #1
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	3b01      	subs	r3, #1
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10f      	bne.n	800acc4 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800acb2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800acb8:	b29b      	uxth	r3, r3
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d102      	bne.n	800acc4 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fa1e 	bl	800b100 <SPI_CloseRxTx_ISR>
    }
  }
}
 800acc4:	bf00      	nop
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	330c      	adds	r3, #12
 800acde:	7812      	ldrb	r2, [r2, #0]
 800ace0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ace6:	1c5a      	adds	r2, r3, #1
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	3b01      	subs	r3, #1
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10f      	bne.n	800ad24 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685a      	ldr	r2, [r3, #4]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ad12:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d102      	bne.n	800ad24 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f9ee 	bl	800b100 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ad24:	bf00      	nop
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68da      	ldr	r2, [r3, #12]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad3e:	b292      	uxth	r2, r2
 800ad40:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad46:	1c9a      	adds	r2, r3, #2
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	3b01      	subs	r3, #1
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10f      	bne.n	800ad84 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	685a      	ldr	r2, [r3, #4]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad72:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d102      	bne.n	800ad84 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f9be 	bl	800b100 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ad84:	bf00      	nop
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad98:	881a      	ldrh	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ada4:	1c9a      	adds	r2, r3, #2
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800adae:	b29b      	uxth	r3, r3
 800adb0:	3b01      	subs	r3, #1
 800adb2:	b29a      	uxth	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d10f      	bne.n	800ade2 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	685a      	ldr	r2, [r3, #4]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800add0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800add6:	b29b      	uxth	r3, r3
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f98f 	bl	800b100 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ade2:	bf00      	nop
 800ade4:	3708      	adds	r7, #8
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b082      	sub	sp, #8
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f103 020c 	add.w	r2, r3, #12
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adfe:	7812      	ldrb	r2, [r2, #0]
 800ae00:	b2d2      	uxtb	r2, r2
 800ae02:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae08:	1c5a      	adds	r2, r3, #1
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	3b01      	subs	r3, #1
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d102      	bne.n	800ae2c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 f9de 	bl	800b1e8 <SPI_CloseRx_ISR>
  }
}
 800ae2c:	bf00      	nop
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68da      	ldr	r2, [r3, #12]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae46:	b292      	uxth	r2, r2
 800ae48:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae4e:	1c9a      	adds	r2, r3, #2
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	b29a      	uxth	r2, r3
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d102      	bne.n	800ae72 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f9bb 	bl	800b1e8 <SPI_CloseRx_ISR>
  }
}
 800ae72:	bf00      	nop
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
	...

0800ae7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b088      	sub	sp, #32
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	603b      	str	r3, [r7, #0]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ae8c:	f7fb fefe 	bl	8006c8c <HAL_GetTick>
 800ae90:	4602      	mov	r2, r0
 800ae92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae94:	1a9b      	subs	r3, r3, r2
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	4413      	add	r3, r2
 800ae9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ae9c:	f7fb fef6 	bl	8006c8c <HAL_GetTick>
 800aea0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800aea2:	4b39      	ldr	r3, [pc, #228]	@ (800af88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	015b      	lsls	r3, r3, #5
 800aea8:	0d1b      	lsrs	r3, r3, #20
 800aeaa:	69fa      	ldr	r2, [r7, #28]
 800aeac:	fb02 f303 	mul.w	r3, r2, r3
 800aeb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aeb2:	e054      	b.n	800af5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeba:	d050      	beq.n	800af5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aebc:	f7fb fee6 	bl	8006c8c <HAL_GetTick>
 800aec0:	4602      	mov	r2, r0
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	69fa      	ldr	r2, [r7, #28]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d902      	bls.n	800aed2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d13d      	bne.n	800af4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	685a      	ldr	r2, [r3, #4]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800aee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aeea:	d111      	bne.n	800af10 <SPI_WaitFlagStateUntilTimeout+0x94>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aef4:	d004      	beq.n	800af00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aefe:	d107      	bne.n	800af10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800af0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800af18:	d10f      	bne.n	800af3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800af38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800af4a:	2303      	movs	r3, #3
 800af4c:	e017      	b.n	800af7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d101      	bne.n	800af58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800af54:	2300      	movs	r3, #0
 800af56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	689a      	ldr	r2, [r3, #8]
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	4013      	ands	r3, r2
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	bf0c      	ite	eq
 800af6e:	2301      	moveq	r3, #1
 800af70:	2300      	movne	r3, #0
 800af72:	b2db      	uxtb	r3, r3
 800af74:	461a      	mov	r2, r3
 800af76:	79fb      	ldrb	r3, [r7, #7]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d19b      	bne.n	800aeb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3720      	adds	r7, #32
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	20000010 	.word	0x20000010

0800af8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af02      	add	r7, sp, #8
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800afa0:	d111      	bne.n	800afc6 <SPI_EndRxTransaction+0x3a>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afaa:	d004      	beq.n	800afb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afb4:	d107      	bne.n	800afc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800afc4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800afce:	d12a      	bne.n	800b026 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afd8:	d012      	beq.n	800b000 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2200      	movs	r2, #0
 800afe2:	2180      	movs	r1, #128	@ 0x80
 800afe4:	68f8      	ldr	r0, [r7, #12]
 800afe6:	f7ff ff49 	bl	800ae7c <SPI_WaitFlagStateUntilTimeout>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d02d      	beq.n	800b04c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aff4:	f043 0220 	orr.w	r2, r3, #32
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800affc:	2303      	movs	r3, #3
 800affe:	e026      	b.n	800b04e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	2200      	movs	r2, #0
 800b008:	2101      	movs	r1, #1
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f7ff ff36 	bl	800ae7c <SPI_WaitFlagStateUntilTimeout>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d01a      	beq.n	800b04c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b01a:	f043 0220 	orr.w	r2, r3, #32
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	e013      	b.n	800b04e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2200      	movs	r2, #0
 800b02e:	2101      	movs	r1, #1
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f7ff ff23 	bl	800ae7c <SPI_WaitFlagStateUntilTimeout>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d007      	beq.n	800b04c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b040:	f043 0220 	orr.w	r2, r3, #32
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b048:	2303      	movs	r3, #3
 800b04a:	e000      	b.n	800b04e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
	...

0800b058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b088      	sub	sp, #32
 800b05c:	af02      	add	r7, sp, #8
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2201      	movs	r2, #1
 800b06c:	2102      	movs	r1, #2
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f7ff ff04 	bl	800ae7c <SPI_WaitFlagStateUntilTimeout>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d007      	beq.n	800b08a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b07e:	f043 0220 	orr.w	r2, r3, #32
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b086:	2303      	movs	r3, #3
 800b088:	e032      	b.n	800b0f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b08a:	4b1b      	ldr	r3, [pc, #108]	@ (800b0f8 <SPI_EndRxTxTransaction+0xa0>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a1b      	ldr	r2, [pc, #108]	@ (800b0fc <SPI_EndRxTxTransaction+0xa4>)
 800b090:	fba2 2303 	umull	r2, r3, r2, r3
 800b094:	0d5b      	lsrs	r3, r3, #21
 800b096:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b09a:	fb02 f303 	mul.w	r3, r2, r3
 800b09e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b0a8:	d112      	bne.n	800b0d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	2180      	movs	r1, #128	@ 0x80
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f7ff fee1 	bl	800ae7c <SPI_WaitFlagStateUntilTimeout>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d016      	beq.n	800b0ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0c4:	f043 0220 	orr.w	r2, r3, #32
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e00f      	b.n	800b0f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00a      	beq.n	800b0ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0e6:	2b80      	cmp	r3, #128	@ 0x80
 800b0e8:	d0f2      	beq.n	800b0d0 <SPI_EndRxTxTransaction+0x78>
 800b0ea:	e000      	b.n	800b0ee <SPI_EndRxTxTransaction+0x96>
        break;
 800b0ec:	bf00      	nop
  }

  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3718      	adds	r7, #24
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	20000010 	.word	0x20000010
 800b0fc:	165e9f81 	.word	0x165e9f81

0800b100 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800b108:	4b35      	ldr	r3, [pc, #212]	@ (800b1e0 <SPI_CloseRxTx_ISR+0xe0>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a35      	ldr	r2, [pc, #212]	@ (800b1e4 <SPI_CloseRxTx_ISR+0xe4>)
 800b10e:	fba2 2303 	umull	r2, r3, r2, r3
 800b112:	0a5b      	lsrs	r3, r3, #9
 800b114:	2264      	movs	r2, #100	@ 0x64
 800b116:	fb02 f303 	mul.w	r3, r2, r3
 800b11a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b11c:	f7fb fdb6 	bl	8006c8c <HAL_GetTick>
 800b120:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	685a      	ldr	r2, [r3, #4]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	f022 0220 	bic.w	r2, r2, #32
 800b130:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d106      	bne.n	800b146 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b13c:	f043 0220 	orr.w	r2, r3, #32
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b144:	e009      	b.n	800b15a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	3b01      	subs	r3, #1
 800b14a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	f003 0302 	and.w	r3, r3, #2
 800b156:	2b00      	cmp	r3, #0
 800b158:	d0eb      	beq.n	800b132 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	2164      	movs	r1, #100	@ 0x64
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f7ff ff7a 	bl	800b058 <SPI_EndRxTxTransaction>
 800b164:	4603      	mov	r3, r0
 800b166:	2b00      	cmp	r3, #0
 800b168:	d005      	beq.n	800b176 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b16e:	f043 0220 	orr.w	r2, r3, #32
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10a      	bne.n	800b194 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b17e:	2300      	movs	r3, #0
 800b180:	60fb      	str	r3, [r7, #12]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	60fb      	str	r3, [r7, #12]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d115      	bne.n	800b1c8 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	2b04      	cmp	r3, #4
 800b1a6:	d107      	bne.n	800b1b8 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f7f9 fc69 	bl	8004a88 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800b1b6:	e00e      	b.n	800b1d6 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7ff fbd1 	bl	800a968 <HAL_SPI_TxRxCpltCallback>
}
 800b1c6:	e006      	b.n	800b1d6 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7ff fbf1 	bl	800a9b8 <HAL_SPI_ErrorCallback>
}
 800b1d6:	bf00      	nop
 800b1d8:	3718      	adds	r7, #24
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	20000010 	.word	0x20000010
 800b1e4:	057619f1 	.word	0x057619f1

0800b1e8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	685a      	ldr	r2, [r3, #4]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800b1fe:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b200:	f7fb fd44 	bl	8006c8c <HAL_GetTick>
 800b204:	4603      	mov	r3, r0
 800b206:	461a      	mov	r2, r3
 800b208:	2164      	movs	r1, #100	@ 0x64
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7ff febe 	bl	800af8c <SPI_EndRxTransaction>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d005      	beq.n	800b222 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b21a:	f043 0220 	orr.w	r2, r3, #32
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d10a      	bne.n	800b240 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b22a:	2300      	movs	r3, #0
 800b22c:	60fb      	str	r3, [r7, #12]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	60fb      	str	r3, [r7, #12]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	60fb      	str	r3, [r7, #12]
 800b23e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d103      	bne.n	800b258 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7f9 fc19 	bl	8004a88 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800b256:	e002      	b.n	800b25e <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7ff fbad 	bl	800a9b8 <HAL_SPI_ErrorCallback>
}
 800b25e:	bf00      	nop
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b266:	b580      	push	{r7, lr}
 800b268:	b082      	sub	sp, #8
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	e041      	b.n	800b2fc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b00      	cmp	r3, #0
 800b282:	d106      	bne.n	800b292 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f7fb fb35 	bl	80068fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2202      	movs	r2, #2
 800b296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	f000 fae5 	bl	800b874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b01      	cmp	r3, #1
 800b316:	d001      	beq.n	800b31c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	e046      	b.n	800b3aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2202      	movs	r2, #2
 800b320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a23      	ldr	r2, [pc, #140]	@ (800b3b8 <HAL_TIM_Base_Start+0xb4>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d022      	beq.n	800b374 <HAL_TIM_Base_Start+0x70>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b336:	d01d      	beq.n	800b374 <HAL_TIM_Base_Start+0x70>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a1f      	ldr	r2, [pc, #124]	@ (800b3bc <HAL_TIM_Base_Start+0xb8>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d018      	beq.n	800b374 <HAL_TIM_Base_Start+0x70>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a1e      	ldr	r2, [pc, #120]	@ (800b3c0 <HAL_TIM_Base_Start+0xbc>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d013      	beq.n	800b374 <HAL_TIM_Base_Start+0x70>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a1c      	ldr	r2, [pc, #112]	@ (800b3c4 <HAL_TIM_Base_Start+0xc0>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d00e      	beq.n	800b374 <HAL_TIM_Base_Start+0x70>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a1b      	ldr	r2, [pc, #108]	@ (800b3c8 <HAL_TIM_Base_Start+0xc4>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d009      	beq.n	800b374 <HAL_TIM_Base_Start+0x70>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a19      	ldr	r2, [pc, #100]	@ (800b3cc <HAL_TIM_Base_Start+0xc8>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d004      	beq.n	800b374 <HAL_TIM_Base_Start+0x70>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a18      	ldr	r2, [pc, #96]	@ (800b3d0 <HAL_TIM_Base_Start+0xcc>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d111      	bne.n	800b398 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	f003 0307 	and.w	r3, r3, #7
 800b37e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2b06      	cmp	r3, #6
 800b384:	d010      	beq.n	800b3a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f042 0201 	orr.w	r2, r2, #1
 800b394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b396:	e007      	b.n	800b3a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f042 0201 	orr.w	r2, r2, #1
 800b3a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3714      	adds	r7, #20
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	40010000 	.word	0x40010000
 800b3bc:	40000400 	.word	0x40000400
 800b3c0:	40000800 	.word	0x40000800
 800b3c4:	40000c00 	.word	0x40000c00
 800b3c8:	40010400 	.word	0x40010400
 800b3cc:	40014000 	.word	0x40014000
 800b3d0:	40001800 	.word	0x40001800

0800b3d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d001      	beq.n	800b3ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e04e      	b.n	800b48a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	68da      	ldr	r2, [r3, #12]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f042 0201 	orr.w	r2, r2, #1
 800b402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a23      	ldr	r2, [pc, #140]	@ (800b498 <HAL_TIM_Base_Start_IT+0xc4>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d022      	beq.n	800b454 <HAL_TIM_Base_Start_IT+0x80>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b416:	d01d      	beq.n	800b454 <HAL_TIM_Base_Start_IT+0x80>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a1f      	ldr	r2, [pc, #124]	@ (800b49c <HAL_TIM_Base_Start_IT+0xc8>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d018      	beq.n	800b454 <HAL_TIM_Base_Start_IT+0x80>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a1e      	ldr	r2, [pc, #120]	@ (800b4a0 <HAL_TIM_Base_Start_IT+0xcc>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d013      	beq.n	800b454 <HAL_TIM_Base_Start_IT+0x80>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a1c      	ldr	r2, [pc, #112]	@ (800b4a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d00e      	beq.n	800b454 <HAL_TIM_Base_Start_IT+0x80>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a1b      	ldr	r2, [pc, #108]	@ (800b4a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d009      	beq.n	800b454 <HAL_TIM_Base_Start_IT+0x80>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a19      	ldr	r2, [pc, #100]	@ (800b4ac <HAL_TIM_Base_Start_IT+0xd8>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d004      	beq.n	800b454 <HAL_TIM_Base_Start_IT+0x80>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a18      	ldr	r2, [pc, #96]	@ (800b4b0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d111      	bne.n	800b478 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	f003 0307 	and.w	r3, r3, #7
 800b45e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2b06      	cmp	r3, #6
 800b464:	d010      	beq.n	800b488 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f042 0201 	orr.w	r2, r2, #1
 800b474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b476:	e007      	b.n	800b488 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f042 0201 	orr.w	r2, r2, #1
 800b486:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3714      	adds	r7, #20
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	40010000 	.word	0x40010000
 800b49c:	40000400 	.word	0x40000400
 800b4a0:	40000800 	.word	0x40000800
 800b4a4:	40000c00 	.word	0x40000c00
 800b4a8:	40010400 	.word	0x40010400
 800b4ac:	40014000 	.word	0x40014000
 800b4b0:	40001800 	.word	0x40001800

0800b4b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	f003 0302 	and.w	r3, r3, #2
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d020      	beq.n	800b518 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f003 0302 	and.w	r3, r3, #2
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d01b      	beq.n	800b518 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f06f 0202 	mvn.w	r2, #2
 800b4e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	699b      	ldr	r3, [r3, #24]
 800b4f6:	f003 0303 	and.w	r3, r3, #3
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d003      	beq.n	800b506 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f999 	bl	800b836 <HAL_TIM_IC_CaptureCallback>
 800b504:	e005      	b.n	800b512 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 f98b 	bl	800b822 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 f99c 	bl	800b84a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	f003 0304 	and.w	r3, r3, #4
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d020      	beq.n	800b564 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f003 0304 	and.w	r3, r3, #4
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d01b      	beq.n	800b564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f06f 0204 	mvn.w	r2, #4
 800b534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2202      	movs	r2, #2
 800b53a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	699b      	ldr	r3, [r3, #24]
 800b542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b546:	2b00      	cmp	r3, #0
 800b548:	d003      	beq.n	800b552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f973 	bl	800b836 <HAL_TIM_IC_CaptureCallback>
 800b550:	e005      	b.n	800b55e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f965 	bl	800b822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f976 	bl	800b84a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	f003 0308 	and.w	r3, r3, #8
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d020      	beq.n	800b5b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f003 0308 	and.w	r3, r3, #8
 800b574:	2b00      	cmp	r3, #0
 800b576:	d01b      	beq.n	800b5b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f06f 0208 	mvn.w	r2, #8
 800b580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2204      	movs	r2, #4
 800b586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	69db      	ldr	r3, [r3, #28]
 800b58e:	f003 0303 	and.w	r3, r3, #3
 800b592:	2b00      	cmp	r3, #0
 800b594:	d003      	beq.n	800b59e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f94d 	bl	800b836 <HAL_TIM_IC_CaptureCallback>
 800b59c:	e005      	b.n	800b5aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 f93f 	bl	800b822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 f950 	bl	800b84a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	f003 0310 	and.w	r3, r3, #16
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d020      	beq.n	800b5fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f003 0310 	and.w	r3, r3, #16
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d01b      	beq.n	800b5fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f06f 0210 	mvn.w	r2, #16
 800b5cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2208      	movs	r2, #8
 800b5d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	69db      	ldr	r3, [r3, #28]
 800b5da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d003      	beq.n	800b5ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f927 	bl	800b836 <HAL_TIM_IC_CaptureCallback>
 800b5e8:	e005      	b.n	800b5f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f919 	bl	800b822 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 f92a 	bl	800b84a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	f003 0301 	and.w	r3, r3, #1
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00c      	beq.n	800b620 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f003 0301 	and.w	r3, r3, #1
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d007      	beq.n	800b620 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f06f 0201 	mvn.w	r2, #1
 800b618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7f8 fd02 	bl	8004024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00c      	beq.n	800b644 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b630:	2b00      	cmp	r3, #0
 800b632:	d007      	beq.n	800b644 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b63c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 fae4 	bl	800bc0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00c      	beq.n	800b668 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b654:	2b00      	cmp	r3, #0
 800b656:	d007      	beq.n	800b668 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 f8fb 	bl	800b85e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	f003 0320 	and.w	r3, r3, #32
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00c      	beq.n	800b68c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f003 0320 	and.w	r3, r3, #32
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d007      	beq.n	800b68c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f06f 0220 	mvn.w	r2, #32
 800b684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 fab6 	bl	800bbf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b68c:	bf00      	nop
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d101      	bne.n	800b6b0 <HAL_TIM_ConfigClockSource+0x1c>
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	e0b4      	b.n	800b81a <HAL_TIM_ConfigClockSource+0x186>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b6ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b6d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68ba      	ldr	r2, [r7, #8]
 800b6de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6e8:	d03e      	beq.n	800b768 <HAL_TIM_ConfigClockSource+0xd4>
 800b6ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b6ee:	f200 8087 	bhi.w	800b800 <HAL_TIM_ConfigClockSource+0x16c>
 800b6f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6f6:	f000 8086 	beq.w	800b806 <HAL_TIM_ConfigClockSource+0x172>
 800b6fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b6fe:	d87f      	bhi.n	800b800 <HAL_TIM_ConfigClockSource+0x16c>
 800b700:	2b70      	cmp	r3, #112	@ 0x70
 800b702:	d01a      	beq.n	800b73a <HAL_TIM_ConfigClockSource+0xa6>
 800b704:	2b70      	cmp	r3, #112	@ 0x70
 800b706:	d87b      	bhi.n	800b800 <HAL_TIM_ConfigClockSource+0x16c>
 800b708:	2b60      	cmp	r3, #96	@ 0x60
 800b70a:	d050      	beq.n	800b7ae <HAL_TIM_ConfigClockSource+0x11a>
 800b70c:	2b60      	cmp	r3, #96	@ 0x60
 800b70e:	d877      	bhi.n	800b800 <HAL_TIM_ConfigClockSource+0x16c>
 800b710:	2b50      	cmp	r3, #80	@ 0x50
 800b712:	d03c      	beq.n	800b78e <HAL_TIM_ConfigClockSource+0xfa>
 800b714:	2b50      	cmp	r3, #80	@ 0x50
 800b716:	d873      	bhi.n	800b800 <HAL_TIM_ConfigClockSource+0x16c>
 800b718:	2b40      	cmp	r3, #64	@ 0x40
 800b71a:	d058      	beq.n	800b7ce <HAL_TIM_ConfigClockSource+0x13a>
 800b71c:	2b40      	cmp	r3, #64	@ 0x40
 800b71e:	d86f      	bhi.n	800b800 <HAL_TIM_ConfigClockSource+0x16c>
 800b720:	2b30      	cmp	r3, #48	@ 0x30
 800b722:	d064      	beq.n	800b7ee <HAL_TIM_ConfigClockSource+0x15a>
 800b724:	2b30      	cmp	r3, #48	@ 0x30
 800b726:	d86b      	bhi.n	800b800 <HAL_TIM_ConfigClockSource+0x16c>
 800b728:	2b20      	cmp	r3, #32
 800b72a:	d060      	beq.n	800b7ee <HAL_TIM_ConfigClockSource+0x15a>
 800b72c:	2b20      	cmp	r3, #32
 800b72e:	d867      	bhi.n	800b800 <HAL_TIM_ConfigClockSource+0x16c>
 800b730:	2b00      	cmp	r3, #0
 800b732:	d05c      	beq.n	800b7ee <HAL_TIM_ConfigClockSource+0x15a>
 800b734:	2b10      	cmp	r3, #16
 800b736:	d05a      	beq.n	800b7ee <HAL_TIM_ConfigClockSource+0x15a>
 800b738:	e062      	b.n	800b800 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b74a:	f000 f9b9 	bl	800bac0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b75c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	609a      	str	r2, [r3, #8]
      break;
 800b766:	e04f      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b778:	f000 f9a2 	bl	800bac0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	689a      	ldr	r2, [r3, #8]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b78a:	609a      	str	r2, [r3, #8]
      break;
 800b78c:	e03c      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b79a:	461a      	mov	r2, r3
 800b79c:	f000 f916 	bl	800b9cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2150      	movs	r1, #80	@ 0x50
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f000 f96f 	bl	800ba8a <TIM_ITRx_SetConfig>
      break;
 800b7ac:	e02c      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	f000 f935 	bl	800ba2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2160      	movs	r1, #96	@ 0x60
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 f95f 	bl	800ba8a <TIM_ITRx_SetConfig>
      break;
 800b7cc:	e01c      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f000 f8f6 	bl	800b9cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2140      	movs	r1, #64	@ 0x40
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f000 f94f 	bl	800ba8a <TIM_ITRx_SetConfig>
      break;
 800b7ec:	e00c      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	f000 f946 	bl	800ba8a <TIM_ITRx_SetConfig>
      break;
 800b7fe:	e003      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	73fb      	strb	r3, [r7, #15]
      break;
 800b804:	e000      	b.n	800b808 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b806:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b818:	7bfb      	ldrb	r3, [r7, #15]
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b822:	b480      	push	{r7}
 800b824:	b083      	sub	sp, #12
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b82a:	bf00      	nop
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b836:	b480      	push	{r7}
 800b838:	b083      	sub	sp, #12
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b83e:	bf00      	nop
 800b840:	370c      	adds	r7, #12
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr

0800b84a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b84a:	b480      	push	{r7}
 800b84c:	b083      	sub	sp, #12
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b852:	bf00      	nop
 800b854:	370c      	adds	r7, #12
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr

0800b85e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b85e:	b480      	push	{r7}
 800b860:	b083      	sub	sp, #12
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b866:	bf00      	nop
 800b868:	370c      	adds	r7, #12
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
	...

0800b874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	4a46      	ldr	r2, [pc, #280]	@ (800b9a0 <TIM_Base_SetConfig+0x12c>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d013      	beq.n	800b8b4 <TIM_Base_SetConfig+0x40>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b892:	d00f      	beq.n	800b8b4 <TIM_Base_SetConfig+0x40>
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	4a43      	ldr	r2, [pc, #268]	@ (800b9a4 <TIM_Base_SetConfig+0x130>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d00b      	beq.n	800b8b4 <TIM_Base_SetConfig+0x40>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	4a42      	ldr	r2, [pc, #264]	@ (800b9a8 <TIM_Base_SetConfig+0x134>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d007      	beq.n	800b8b4 <TIM_Base_SetConfig+0x40>
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4a41      	ldr	r2, [pc, #260]	@ (800b9ac <TIM_Base_SetConfig+0x138>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d003      	beq.n	800b8b4 <TIM_Base_SetConfig+0x40>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	4a40      	ldr	r2, [pc, #256]	@ (800b9b0 <TIM_Base_SetConfig+0x13c>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d108      	bne.n	800b8c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4a35      	ldr	r2, [pc, #212]	@ (800b9a0 <TIM_Base_SetConfig+0x12c>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d02b      	beq.n	800b926 <TIM_Base_SetConfig+0xb2>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8d4:	d027      	beq.n	800b926 <TIM_Base_SetConfig+0xb2>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4a32      	ldr	r2, [pc, #200]	@ (800b9a4 <TIM_Base_SetConfig+0x130>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d023      	beq.n	800b926 <TIM_Base_SetConfig+0xb2>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4a31      	ldr	r2, [pc, #196]	@ (800b9a8 <TIM_Base_SetConfig+0x134>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d01f      	beq.n	800b926 <TIM_Base_SetConfig+0xb2>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4a30      	ldr	r2, [pc, #192]	@ (800b9ac <TIM_Base_SetConfig+0x138>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d01b      	beq.n	800b926 <TIM_Base_SetConfig+0xb2>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a2f      	ldr	r2, [pc, #188]	@ (800b9b0 <TIM_Base_SetConfig+0x13c>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d017      	beq.n	800b926 <TIM_Base_SetConfig+0xb2>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4a2e      	ldr	r2, [pc, #184]	@ (800b9b4 <TIM_Base_SetConfig+0x140>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d013      	beq.n	800b926 <TIM_Base_SetConfig+0xb2>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a2d      	ldr	r2, [pc, #180]	@ (800b9b8 <TIM_Base_SetConfig+0x144>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d00f      	beq.n	800b926 <TIM_Base_SetConfig+0xb2>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a2c      	ldr	r2, [pc, #176]	@ (800b9bc <TIM_Base_SetConfig+0x148>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d00b      	beq.n	800b926 <TIM_Base_SetConfig+0xb2>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a2b      	ldr	r2, [pc, #172]	@ (800b9c0 <TIM_Base_SetConfig+0x14c>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d007      	beq.n	800b926 <TIM_Base_SetConfig+0xb2>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4a2a      	ldr	r2, [pc, #168]	@ (800b9c4 <TIM_Base_SetConfig+0x150>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d003      	beq.n	800b926 <TIM_Base_SetConfig+0xb2>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4a29      	ldr	r2, [pc, #164]	@ (800b9c8 <TIM_Base_SetConfig+0x154>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d108      	bne.n	800b938 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b92c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	4313      	orrs	r3, r2
 800b936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	695b      	ldr	r3, [r3, #20]
 800b942:	4313      	orrs	r3, r2
 800b944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	689a      	ldr	r2, [r3, #8]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a10      	ldr	r2, [pc, #64]	@ (800b9a0 <TIM_Base_SetConfig+0x12c>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d003      	beq.n	800b96c <TIM_Base_SetConfig+0xf8>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a12      	ldr	r2, [pc, #72]	@ (800b9b0 <TIM_Base_SetConfig+0x13c>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d103      	bne.n	800b974 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	691a      	ldr	r2, [r3, #16]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	f003 0301 	and.w	r3, r3, #1
 800b982:	2b01      	cmp	r3, #1
 800b984:	d105      	bne.n	800b992 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	691b      	ldr	r3, [r3, #16]
 800b98a:	f023 0201 	bic.w	r2, r3, #1
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	611a      	str	r2, [r3, #16]
  }
}
 800b992:	bf00      	nop
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	40010000 	.word	0x40010000
 800b9a4:	40000400 	.word	0x40000400
 800b9a8:	40000800 	.word	0x40000800
 800b9ac:	40000c00 	.word	0x40000c00
 800b9b0:	40010400 	.word	0x40010400
 800b9b4:	40014000 	.word	0x40014000
 800b9b8:	40014400 	.word	0x40014400
 800b9bc:	40014800 	.word	0x40014800
 800b9c0:	40001800 	.word	0x40001800
 800b9c4:	40001c00 	.word	0x40001c00
 800b9c8:	40002000 	.word	0x40002000

0800b9cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b087      	sub	sp, #28
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6a1b      	ldr	r3, [r3, #32]
 800b9dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6a1b      	ldr	r3, [r3, #32]
 800b9e2:	f023 0201 	bic.w	r2, r3, #1
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	699b      	ldr	r3, [r3, #24]
 800b9ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b9f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	011b      	lsls	r3, r3, #4
 800b9fc:	693a      	ldr	r2, [r7, #16]
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	f023 030a 	bic.w	r3, r3, #10
 800ba08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba0a:	697a      	ldr	r2, [r7, #20]
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	697a      	ldr	r2, [r7, #20]
 800ba1c:	621a      	str	r2, [r3, #32]
}
 800ba1e:	bf00      	nop
 800ba20:	371c      	adds	r7, #28
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	b087      	sub	sp, #28
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	60f8      	str	r0, [r7, #12]
 800ba32:	60b9      	str	r1, [r7, #8]
 800ba34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6a1b      	ldr	r3, [r3, #32]
 800ba40:	f023 0210 	bic.w	r2, r3, #16
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	699b      	ldr	r3, [r3, #24]
 800ba4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ba54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	031b      	lsls	r3, r3, #12
 800ba5a:	693a      	ldr	r2, [r7, #16]
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ba66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	011b      	lsls	r3, r3, #4
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	693a      	ldr	r2, [r7, #16]
 800ba76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	697a      	ldr	r2, [r7, #20]
 800ba7c:	621a      	str	r2, [r3, #32]
}
 800ba7e:	bf00      	nop
 800ba80:	371c      	adds	r7, #28
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr

0800ba8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba8a:	b480      	push	{r7}
 800ba8c:	b085      	sub	sp, #20
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800baa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	4313      	orrs	r3, r2
 800baa8:	f043 0307 	orr.w	r3, r3, #7
 800baac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	68fa      	ldr	r2, [r7, #12]
 800bab2:	609a      	str	r2, [r3, #8]
}
 800bab4:	bf00      	nop
 800bab6:	3714      	adds	r7, #20
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b087      	sub	sp, #28
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
 800bacc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	021a      	lsls	r2, r3, #8
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	431a      	orrs	r2, r3
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	4313      	orrs	r3, r2
 800bae8:	697a      	ldr	r2, [r7, #20]
 800baea:	4313      	orrs	r3, r2
 800baec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	697a      	ldr	r2, [r7, #20]
 800baf2:	609a      	str	r2, [r3, #8]
}
 800baf4:	bf00      	nop
 800baf6:	371c      	adds	r7, #28
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b085      	sub	sp, #20
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d101      	bne.n	800bb18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb14:	2302      	movs	r3, #2
 800bb16:	e05a      	b.n	800bbce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2202      	movs	r2, #2
 800bb24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a21      	ldr	r2, [pc, #132]	@ (800bbdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d022      	beq.n	800bba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb64:	d01d      	beq.n	800bba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4a1d      	ldr	r2, [pc, #116]	@ (800bbe0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d018      	beq.n	800bba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a1b      	ldr	r2, [pc, #108]	@ (800bbe4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d013      	beq.n	800bba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a1a      	ldr	r2, [pc, #104]	@ (800bbe8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d00e      	beq.n	800bba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a18      	ldr	r2, [pc, #96]	@ (800bbec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d009      	beq.n	800bba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a17      	ldr	r2, [pc, #92]	@ (800bbf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d004      	beq.n	800bba2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4a15      	ldr	r2, [pc, #84]	@ (800bbf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d10c      	bne.n	800bbbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3714      	adds	r7, #20
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	40010000 	.word	0x40010000
 800bbe0:	40000400 	.word	0x40000400
 800bbe4:	40000800 	.word	0x40000800
 800bbe8:	40000c00 	.word	0x40000c00
 800bbec:	40010400 	.word	0x40010400
 800bbf0:	40014000 	.word	0x40014000
 800bbf4:	40001800 	.word	0x40001800

0800bbf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc00:	bf00      	nop
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d101      	bne.n	800bc32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e042      	b.n	800bcb8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d106      	bne.n	800bc4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7fa fe94 	bl	8006974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2224      	movs	r2, #36	@ 0x24
 800bc50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	68da      	ldr	r2, [r3, #12]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bc62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 fc85 	bl	800c574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	691a      	ldr	r2, [r3, #16]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bc78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	695a      	ldr	r2, [r3, #20]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bc88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68da      	ldr	r2, [r3, #12]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bc98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2220      	movs	r2, #32
 800bca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2220      	movs	r2, #32
 800bcac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b0ba      	sub	sp, #232	@ 0xe8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	695b      	ldr	r3, [r3, #20]
 800bce2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800bce6:	2300      	movs	r3, #0
 800bce8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800bcec:	2300      	movs	r3, #0
 800bcee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bcf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcf6:	f003 030f 	and.w	r3, r3, #15
 800bcfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800bcfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10f      	bne.n	800bd26 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd0a:	f003 0320 	and.w	r3, r3, #32
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d009      	beq.n	800bd26 <HAL_UART_IRQHandler+0x66>
 800bd12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd16:	f003 0320 	and.w	r3, r3, #32
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d003      	beq.n	800bd26 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 fb69 	bl	800c3f6 <UART_Receive_IT>
      return;
 800bd24:	e25b      	b.n	800c1de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bd26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f000 80de 	beq.w	800beec <HAL_UART_IRQHandler+0x22c>
 800bd30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd34:	f003 0301 	and.w	r3, r3, #1
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d106      	bne.n	800bd4a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bd3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd40:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f000 80d1 	beq.w	800beec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bd4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd4e:	f003 0301 	and.w	r3, r3, #1
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00b      	beq.n	800bd6e <HAL_UART_IRQHandler+0xae>
 800bd56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d005      	beq.n	800bd6e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd66:	f043 0201 	orr.w	r2, r3, #1
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd72:	f003 0304 	and.w	r3, r3, #4
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00b      	beq.n	800bd92 <HAL_UART_IRQHandler+0xd2>
 800bd7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd7e:	f003 0301 	and.w	r3, r3, #1
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d005      	beq.n	800bd92 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd8a:	f043 0202 	orr.w	r2, r3, #2
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd96:	f003 0302 	and.w	r3, r3, #2
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00b      	beq.n	800bdb6 <HAL_UART_IRQHandler+0xf6>
 800bd9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bda2:	f003 0301 	and.w	r3, r3, #1
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d005      	beq.n	800bdb6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdae:	f043 0204 	orr.w	r2, r3, #4
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bdb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdba:	f003 0308 	and.w	r3, r3, #8
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d011      	beq.n	800bde6 <HAL_UART_IRQHandler+0x126>
 800bdc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bdc6:	f003 0320 	and.w	r3, r3, #32
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d105      	bne.n	800bdda <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bdce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bdd2:	f003 0301 	and.w	r3, r3, #1
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d005      	beq.n	800bde6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdde:	f043 0208 	orr.w	r2, r3, #8
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	f000 81f2 	beq.w	800c1d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bdf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bdf4:	f003 0320 	and.w	r3, r3, #32
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d008      	beq.n	800be0e <HAL_UART_IRQHandler+0x14e>
 800bdfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be00:	f003 0320 	and.w	r3, r3, #32
 800be04:	2b00      	cmp	r3, #0
 800be06:	d002      	beq.n	800be0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 faf4 	bl	800c3f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	695b      	ldr	r3, [r3, #20]
 800be14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be18:	2b40      	cmp	r3, #64	@ 0x40
 800be1a:	bf0c      	ite	eq
 800be1c:	2301      	moveq	r3, #1
 800be1e:	2300      	movne	r3, #0
 800be20:	b2db      	uxtb	r3, r3
 800be22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be2a:	f003 0308 	and.w	r3, r3, #8
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d103      	bne.n	800be3a <HAL_UART_IRQHandler+0x17a>
 800be32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800be36:	2b00      	cmp	r3, #0
 800be38:	d04f      	beq.n	800beda <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f9fc 	bl	800c238 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	695b      	ldr	r3, [r3, #20]
 800be46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be4a:	2b40      	cmp	r3, #64	@ 0x40
 800be4c:	d141      	bne.n	800bed2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	3314      	adds	r3, #20
 800be54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800be5c:	e853 3f00 	ldrex	r3, [r3]
 800be60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800be64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800be68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	3314      	adds	r3, #20
 800be76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800be7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800be7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800be86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800be8a:	e841 2300 	strex	r3, r2, [r1]
 800be8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800be92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1d9      	bne.n	800be4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d013      	beq.n	800beca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bea6:	4a7e      	ldr	r2, [pc, #504]	@ (800c0a0 <HAL_UART_IRQHandler+0x3e0>)
 800bea8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fb fbcc 	bl	800764c <HAL_DMA_Abort_IT>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d016      	beq.n	800bee8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bec4:	4610      	mov	r0, r2
 800bec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bec8:	e00e      	b.n	800bee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f99e 	bl	800c20c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bed0:	e00a      	b.n	800bee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 f99a 	bl	800c20c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bed8:	e006      	b.n	800bee8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 f996 	bl	800c20c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800bee6:	e175      	b.n	800c1d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bee8:	bf00      	nop
    return;
 800beea:	e173      	b.n	800c1d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	f040 814f 	bne.w	800c194 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800befa:	f003 0310 	and.w	r3, r3, #16
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f000 8148 	beq.w	800c194 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bf04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf08:	f003 0310 	and.w	r3, r3, #16
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f000 8141 	beq.w	800c194 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf12:	2300      	movs	r3, #0
 800bf14:	60bb      	str	r3, [r7, #8]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	60bb      	str	r3, [r7, #8]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	60bb      	str	r3, [r7, #8]
 800bf26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	695b      	ldr	r3, [r3, #20]
 800bf2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf32:	2b40      	cmp	r3, #64	@ 0x40
 800bf34:	f040 80b6 	bne.w	800c0a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 8145 	beq.w	800c1d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bf52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bf56:	429a      	cmp	r2, r3
 800bf58:	f080 813e 	bcs.w	800c1d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bf62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf68:	69db      	ldr	r3, [r3, #28]
 800bf6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf6e:	f000 8088 	beq.w	800c082 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	330c      	adds	r3, #12
 800bf78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bf80:	e853 3f00 	ldrex	r3, [r3]
 800bf84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800bf88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bf8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	330c      	adds	r3, #12
 800bf9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bf9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bfa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bfaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bfae:	e841 2300 	strex	r3, r2, [r1]
 800bfb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bfb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d1d9      	bne.n	800bf72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	3314      	adds	r3, #20
 800bfc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bfc8:	e853 3f00 	ldrex	r3, [r3]
 800bfcc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bfce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bfd0:	f023 0301 	bic.w	r3, r3, #1
 800bfd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	3314      	adds	r3, #20
 800bfde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bfe2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bfe6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bfea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bfee:	e841 2300 	strex	r3, r2, [r1]
 800bff2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d1e1      	bne.n	800bfbe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	3314      	adds	r3, #20
 800c000:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c002:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c004:	e853 3f00 	ldrex	r3, [r3]
 800c008:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c00a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c00c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c010:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	3314      	adds	r3, #20
 800c01a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c01e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c020:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c022:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c024:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c026:	e841 2300 	strex	r3, r2, [r1]
 800c02a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c02c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1e3      	bne.n	800bffa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2220      	movs	r2, #32
 800c036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2200      	movs	r2, #0
 800c03e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	330c      	adds	r3, #12
 800c046:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c04a:	e853 3f00 	ldrex	r3, [r3]
 800c04e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c052:	f023 0310 	bic.w	r3, r3, #16
 800c056:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	330c      	adds	r3, #12
 800c060:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c064:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c066:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c068:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c06a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c06c:	e841 2300 	strex	r3, r2, [r1]
 800c070:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1e3      	bne.n	800c040 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c07c:	4618      	mov	r0, r3
 800c07e:	f7fb fa75 	bl	800756c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2202      	movs	r2, #2
 800c086:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c090:	b29b      	uxth	r3, r3
 800c092:	1ad3      	subs	r3, r2, r3
 800c094:	b29b      	uxth	r3, r3
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f8c1 	bl	800c220 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c09e:	e09b      	b.n	800c1d8 <HAL_UART_IRQHandler+0x518>
 800c0a0:	0800c2ff 	.word	0x0800c2ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f000 808e 	beq.w	800c1dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c0c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f000 8089 	beq.w	800c1dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	330c      	adds	r3, #12
 800c0d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d4:	e853 3f00 	ldrex	r3, [r3]
 800c0d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	330c      	adds	r3, #12
 800c0ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c0ee:	647a      	str	r2, [r7, #68]	@ 0x44
 800c0f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c0f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0f6:	e841 2300 	strex	r3, r2, [r1]
 800c0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c0fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1e3      	bne.n	800c0ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3314      	adds	r3, #20
 800c108:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10c:	e853 3f00 	ldrex	r3, [r3]
 800c110:	623b      	str	r3, [r7, #32]
   return(result);
 800c112:	6a3b      	ldr	r3, [r7, #32]
 800c114:	f023 0301 	bic.w	r3, r3, #1
 800c118:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	3314      	adds	r3, #20
 800c122:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c126:	633a      	str	r2, [r7, #48]	@ 0x30
 800c128:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c12c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c12e:	e841 2300 	strex	r3, r2, [r1]
 800c132:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1e3      	bne.n	800c102 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2220      	movs	r2, #32
 800c13e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2200      	movs	r2, #0
 800c146:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	330c      	adds	r3, #12
 800c14e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	e853 3f00 	ldrex	r3, [r3]
 800c156:	60fb      	str	r3, [r7, #12]
   return(result);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f023 0310 	bic.w	r3, r3, #16
 800c15e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	330c      	adds	r3, #12
 800c168:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c16c:	61fa      	str	r2, [r7, #28]
 800c16e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c170:	69b9      	ldr	r1, [r7, #24]
 800c172:	69fa      	ldr	r2, [r7, #28]
 800c174:	e841 2300 	strex	r3, r2, [r1]
 800c178:	617b      	str	r3, [r7, #20]
   return(result);
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1e3      	bne.n	800c148 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2202      	movs	r2, #2
 800c184:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c186:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c18a:	4619      	mov	r1, r3
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 f847 	bl	800c220 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c192:	e023      	b.n	800c1dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d009      	beq.n	800c1b4 <HAL_UART_IRQHandler+0x4f4>
 800c1a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d003      	beq.n	800c1b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 f8ba 	bl	800c326 <UART_Transmit_IT>
    return;
 800c1b2:	e014      	b.n	800c1de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c1b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00e      	beq.n	800c1de <HAL_UART_IRQHandler+0x51e>
 800c1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d008      	beq.n	800c1de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 f8fa 	bl	800c3c6 <UART_EndTransmit_IT>
    return;
 800c1d2:	e004      	b.n	800c1de <HAL_UART_IRQHandler+0x51e>
    return;
 800c1d4:	bf00      	nop
 800c1d6:	e002      	b.n	800c1de <HAL_UART_IRQHandler+0x51e>
      return;
 800c1d8:	bf00      	nop
 800c1da:	e000      	b.n	800c1de <HAL_UART_IRQHandler+0x51e>
      return;
 800c1dc:	bf00      	nop
  }
}
 800c1de:	37e8      	adds	r7, #232	@ 0xe8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c1ec:	bf00      	nop
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b083      	sub	sp, #12
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c214:	bf00      	nop
 800c216:	370c      	adds	r7, #12
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	460b      	mov	r3, r1
 800c22a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c238:	b480      	push	{r7}
 800c23a:	b095      	sub	sp, #84	@ 0x54
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	330c      	adds	r3, #12
 800c246:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c24a:	e853 3f00 	ldrex	r3, [r3]
 800c24e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c252:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	330c      	adds	r3, #12
 800c25e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c260:	643a      	str	r2, [r7, #64]	@ 0x40
 800c262:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c264:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c266:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c268:	e841 2300 	strex	r3, r2, [r1]
 800c26c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c270:	2b00      	cmp	r3, #0
 800c272:	d1e5      	bne.n	800c240 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3314      	adds	r3, #20
 800c27a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27c:	6a3b      	ldr	r3, [r7, #32]
 800c27e:	e853 3f00 	ldrex	r3, [r3]
 800c282:	61fb      	str	r3, [r7, #28]
   return(result);
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	f023 0301 	bic.w	r3, r3, #1
 800c28a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	3314      	adds	r3, #20
 800c292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c294:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c296:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c298:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c29a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c29c:	e841 2300 	strex	r3, r2, [r1]
 800c2a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1e5      	bne.n	800c274 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d119      	bne.n	800c2e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	330c      	adds	r3, #12
 800c2b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	e853 3f00 	ldrex	r3, [r3]
 800c2be:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	f023 0310 	bic.w	r3, r3, #16
 800c2c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	330c      	adds	r3, #12
 800c2ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c2d0:	61ba      	str	r2, [r7, #24]
 800c2d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d4:	6979      	ldr	r1, [r7, #20]
 800c2d6:	69ba      	ldr	r2, [r7, #24]
 800c2d8:	e841 2300 	strex	r3, r2, [r1]
 800c2dc:	613b      	str	r3, [r7, #16]
   return(result);
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1e5      	bne.n	800c2b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2220      	movs	r2, #32
 800c2e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c2f2:	bf00      	nop
 800c2f4:	3754      	adds	r7, #84	@ 0x54
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b084      	sub	sp, #16
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c30a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2200      	movs	r2, #0
 800c310:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2200      	movs	r2, #0
 800c316:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f7ff ff77 	bl	800c20c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c31e:	bf00      	nop
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c326:	b480      	push	{r7}
 800c328:	b085      	sub	sp, #20
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b21      	cmp	r3, #33	@ 0x21
 800c338:	d13e      	bne.n	800c3b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	689b      	ldr	r3, [r3, #8]
 800c33e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c342:	d114      	bne.n	800c36e <UART_Transmit_IT+0x48>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	691b      	ldr	r3, [r3, #16]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d110      	bne.n	800c36e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6a1b      	ldr	r3, [r3, #32]
 800c350:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	881b      	ldrh	r3, [r3, #0]
 800c356:	461a      	mov	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c360:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6a1b      	ldr	r3, [r3, #32]
 800c366:	1c9a      	adds	r2, r3, #2
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	621a      	str	r2, [r3, #32]
 800c36c:	e008      	b.n	800c380 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6a1b      	ldr	r3, [r3, #32]
 800c372:	1c59      	adds	r1, r3, #1
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	6211      	str	r1, [r2, #32]
 800c378:	781a      	ldrb	r2, [r3, #0]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c384:	b29b      	uxth	r3, r3
 800c386:	3b01      	subs	r3, #1
 800c388:	b29b      	uxth	r3, r3
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	4619      	mov	r1, r3
 800c38e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c390:	2b00      	cmp	r3, #0
 800c392:	d10f      	bne.n	800c3b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68da      	ldr	r2, [r3, #12]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c3a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	68da      	ldr	r2, [r3, #12]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c3b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	e000      	b.n	800c3ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c3b8:	2302      	movs	r3, #2
  }
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr

0800c3c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b082      	sub	sp, #8
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68da      	ldr	r2, [r3, #12]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c3dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2220      	movs	r2, #32
 800c3e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f7ff fefc 	bl	800c1e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c3ec:	2300      	movs	r3, #0
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3708      	adds	r7, #8
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b08c      	sub	sp, #48	@ 0x30
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c404:	b2db      	uxtb	r3, r3
 800c406:	2b22      	cmp	r3, #34	@ 0x22
 800c408:	f040 80ae 	bne.w	800c568 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c414:	d117      	bne.n	800c446 <UART_Receive_IT+0x50>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d113      	bne.n	800c446 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c41e:	2300      	movs	r3, #0
 800c420:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c426:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	b29b      	uxth	r3, r3
 800c430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c434:	b29a      	uxth	r2, r3
 800c436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c438:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c43e:	1c9a      	adds	r2, r3, #2
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	629a      	str	r2, [r3, #40]	@ 0x28
 800c444:	e026      	b.n	800c494 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c44a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800c44c:	2300      	movs	r3, #0
 800c44e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c458:	d007      	beq.n	800c46a <UART_Receive_IT+0x74>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10a      	bne.n	800c478 <UART_Receive_IT+0x82>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d106      	bne.n	800c478 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	b2da      	uxtb	r2, r3
 800c472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c474:	701a      	strb	r2, [r3, #0]
 800c476:	e008      	b.n	800c48a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c484:	b2da      	uxtb	r2, r3
 800c486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c488:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c48e:	1c5a      	adds	r2, r3, #1
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c498:	b29b      	uxth	r3, r3
 800c49a:	3b01      	subs	r3, #1
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d15d      	bne.n	800c564 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	68da      	ldr	r2, [r3, #12]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f022 0220 	bic.w	r2, r2, #32
 800c4b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68da      	ldr	r2, [r3, #12]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c4c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	695a      	ldr	r2, [r3, #20]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f022 0201 	bic.w	r2, r2, #1
 800c4d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2220      	movs	r2, #32
 800c4dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d135      	bne.n	800c55a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	330c      	adds	r3, #12
 800c4fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	e853 3f00 	ldrex	r3, [r3]
 800c502:	613b      	str	r3, [r7, #16]
   return(result);
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	f023 0310 	bic.w	r3, r3, #16
 800c50a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	330c      	adds	r3, #12
 800c512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c514:	623a      	str	r2, [r7, #32]
 800c516:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c518:	69f9      	ldr	r1, [r7, #28]
 800c51a:	6a3a      	ldr	r2, [r7, #32]
 800c51c:	e841 2300 	strex	r3, r2, [r1]
 800c520:	61bb      	str	r3, [r7, #24]
   return(result);
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1e5      	bne.n	800c4f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f003 0310 	and.w	r3, r3, #16
 800c532:	2b10      	cmp	r3, #16
 800c534:	d10a      	bne.n	800c54c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c536:	2300      	movs	r3, #0
 800c538:	60fb      	str	r3, [r7, #12]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	60fb      	str	r3, [r7, #12]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	60fb      	str	r3, [r7, #12]
 800c54a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c550:	4619      	mov	r1, r3
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f7ff fe64 	bl	800c220 <HAL_UARTEx_RxEventCallback>
 800c558:	e002      	b.n	800c560 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f7ff fe4c 	bl	800c1f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c560:	2300      	movs	r3, #0
 800c562:	e002      	b.n	800c56a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c564:	2300      	movs	r3, #0
 800c566:	e000      	b.n	800c56a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c568:	2302      	movs	r3, #2
  }
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3730      	adds	r7, #48	@ 0x30
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
	...

0800c574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c578:	b0c0      	sub	sp, #256	@ 0x100
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c58c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c590:	68d9      	ldr	r1, [r3, #12]
 800c592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	ea40 0301 	orr.w	r3, r0, r1
 800c59c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c59e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5a2:	689a      	ldr	r2, [r3, #8]
 800c5a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	431a      	orrs	r2, r3
 800c5ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5b0:	695b      	ldr	r3, [r3, #20]
 800c5b2:	431a      	orrs	r2, r3
 800c5b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5b8:	69db      	ldr	r3, [r3, #28]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800c5cc:	f021 010c 	bic.w	r1, r1, #12
 800c5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c5da:	430b      	orrs	r3, r1
 800c5dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c5de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	695b      	ldr	r3, [r3, #20]
 800c5e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800c5ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5ee:	6999      	ldr	r1, [r3, #24]
 800c5f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	ea40 0301 	orr.w	r3, r0, r1
 800c5fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c5fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	4b8f      	ldr	r3, [pc, #572]	@ (800c840 <UART_SetConfig+0x2cc>)
 800c604:	429a      	cmp	r2, r3
 800c606:	d005      	beq.n	800c614 <UART_SetConfig+0xa0>
 800c608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	4b8d      	ldr	r3, [pc, #564]	@ (800c844 <UART_SetConfig+0x2d0>)
 800c610:	429a      	cmp	r2, r3
 800c612:	d104      	bne.n	800c61e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c614:	f7fc f8e0 	bl	80087d8 <HAL_RCC_GetPCLK2Freq>
 800c618:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c61c:	e003      	b.n	800c626 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c61e:	f7fc f8c7 	bl	80087b0 <HAL_RCC_GetPCLK1Freq>
 800c622:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c62a:	69db      	ldr	r3, [r3, #28]
 800c62c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c630:	f040 810c 	bne.w	800c84c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c638:	2200      	movs	r2, #0
 800c63a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c63e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c642:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c646:	4622      	mov	r2, r4
 800c648:	462b      	mov	r3, r5
 800c64a:	1891      	adds	r1, r2, r2
 800c64c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800c64e:	415b      	adcs	r3, r3
 800c650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c652:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c656:	4621      	mov	r1, r4
 800c658:	eb12 0801 	adds.w	r8, r2, r1
 800c65c:	4629      	mov	r1, r5
 800c65e:	eb43 0901 	adc.w	r9, r3, r1
 800c662:	f04f 0200 	mov.w	r2, #0
 800c666:	f04f 0300 	mov.w	r3, #0
 800c66a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c66e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c676:	4690      	mov	r8, r2
 800c678:	4699      	mov	r9, r3
 800c67a:	4623      	mov	r3, r4
 800c67c:	eb18 0303 	adds.w	r3, r8, r3
 800c680:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c684:	462b      	mov	r3, r5
 800c686:	eb49 0303 	adc.w	r3, r9, r3
 800c68a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c68e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c69a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c69e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	18db      	adds	r3, r3, r3
 800c6a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c6a8:	4613      	mov	r3, r2
 800c6aa:	eb42 0303 	adc.w	r3, r2, r3
 800c6ae:	657b      	str	r3, [r7, #84]	@ 0x54
 800c6b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c6b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c6b8:	f7f4 f984 	bl	80009c4 <__aeabi_uldivmod>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4b61      	ldr	r3, [pc, #388]	@ (800c848 <UART_SetConfig+0x2d4>)
 800c6c2:	fba3 2302 	umull	r2, r3, r3, r2
 800c6c6:	095b      	lsrs	r3, r3, #5
 800c6c8:	011c      	lsls	r4, r3, #4
 800c6ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c6d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800c6d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800c6dc:	4642      	mov	r2, r8
 800c6de:	464b      	mov	r3, r9
 800c6e0:	1891      	adds	r1, r2, r2
 800c6e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c6e4:	415b      	adcs	r3, r3
 800c6e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800c6ec:	4641      	mov	r1, r8
 800c6ee:	eb12 0a01 	adds.w	sl, r2, r1
 800c6f2:	4649      	mov	r1, r9
 800c6f4:	eb43 0b01 	adc.w	fp, r3, r1
 800c6f8:	f04f 0200 	mov.w	r2, #0
 800c6fc:	f04f 0300 	mov.w	r3, #0
 800c700:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c704:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c708:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c70c:	4692      	mov	sl, r2
 800c70e:	469b      	mov	fp, r3
 800c710:	4643      	mov	r3, r8
 800c712:	eb1a 0303 	adds.w	r3, sl, r3
 800c716:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c71a:	464b      	mov	r3, r9
 800c71c:	eb4b 0303 	adc.w	r3, fp, r3
 800c720:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c730:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c734:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c738:	460b      	mov	r3, r1
 800c73a:	18db      	adds	r3, r3, r3
 800c73c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c73e:	4613      	mov	r3, r2
 800c740:	eb42 0303 	adc.w	r3, r2, r3
 800c744:	647b      	str	r3, [r7, #68]	@ 0x44
 800c746:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c74a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800c74e:	f7f4 f939 	bl	80009c4 <__aeabi_uldivmod>
 800c752:	4602      	mov	r2, r0
 800c754:	460b      	mov	r3, r1
 800c756:	4611      	mov	r1, r2
 800c758:	4b3b      	ldr	r3, [pc, #236]	@ (800c848 <UART_SetConfig+0x2d4>)
 800c75a:	fba3 2301 	umull	r2, r3, r3, r1
 800c75e:	095b      	lsrs	r3, r3, #5
 800c760:	2264      	movs	r2, #100	@ 0x64
 800c762:	fb02 f303 	mul.w	r3, r2, r3
 800c766:	1acb      	subs	r3, r1, r3
 800c768:	00db      	lsls	r3, r3, #3
 800c76a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c76e:	4b36      	ldr	r3, [pc, #216]	@ (800c848 <UART_SetConfig+0x2d4>)
 800c770:	fba3 2302 	umull	r2, r3, r3, r2
 800c774:	095b      	lsrs	r3, r3, #5
 800c776:	005b      	lsls	r3, r3, #1
 800c778:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c77c:	441c      	add	r4, r3
 800c77e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c782:	2200      	movs	r2, #0
 800c784:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c788:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800c78c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800c790:	4642      	mov	r2, r8
 800c792:	464b      	mov	r3, r9
 800c794:	1891      	adds	r1, r2, r2
 800c796:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c798:	415b      	adcs	r3, r3
 800c79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c79c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c7a0:	4641      	mov	r1, r8
 800c7a2:	1851      	adds	r1, r2, r1
 800c7a4:	6339      	str	r1, [r7, #48]	@ 0x30
 800c7a6:	4649      	mov	r1, r9
 800c7a8:	414b      	adcs	r3, r1
 800c7aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7ac:	f04f 0200 	mov.w	r2, #0
 800c7b0:	f04f 0300 	mov.w	r3, #0
 800c7b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c7b8:	4659      	mov	r1, fp
 800c7ba:	00cb      	lsls	r3, r1, #3
 800c7bc:	4651      	mov	r1, sl
 800c7be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c7c2:	4651      	mov	r1, sl
 800c7c4:	00ca      	lsls	r2, r1, #3
 800c7c6:	4610      	mov	r0, r2
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	4642      	mov	r2, r8
 800c7ce:	189b      	adds	r3, r3, r2
 800c7d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c7d4:	464b      	mov	r3, r9
 800c7d6:	460a      	mov	r2, r1
 800c7d8:	eb42 0303 	adc.w	r3, r2, r3
 800c7dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c7ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c7f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	18db      	adds	r3, r3, r3
 800c7f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	eb42 0303 	adc.w	r3, r2, r3
 800c800:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c802:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c806:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800c80a:	f7f4 f8db 	bl	80009c4 <__aeabi_uldivmod>
 800c80e:	4602      	mov	r2, r0
 800c810:	460b      	mov	r3, r1
 800c812:	4b0d      	ldr	r3, [pc, #52]	@ (800c848 <UART_SetConfig+0x2d4>)
 800c814:	fba3 1302 	umull	r1, r3, r3, r2
 800c818:	095b      	lsrs	r3, r3, #5
 800c81a:	2164      	movs	r1, #100	@ 0x64
 800c81c:	fb01 f303 	mul.w	r3, r1, r3
 800c820:	1ad3      	subs	r3, r2, r3
 800c822:	00db      	lsls	r3, r3, #3
 800c824:	3332      	adds	r3, #50	@ 0x32
 800c826:	4a08      	ldr	r2, [pc, #32]	@ (800c848 <UART_SetConfig+0x2d4>)
 800c828:	fba2 2303 	umull	r2, r3, r2, r3
 800c82c:	095b      	lsrs	r3, r3, #5
 800c82e:	f003 0207 	and.w	r2, r3, #7
 800c832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4422      	add	r2, r4
 800c83a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c83c:	e106      	b.n	800ca4c <UART_SetConfig+0x4d8>
 800c83e:	bf00      	nop
 800c840:	40011000 	.word	0x40011000
 800c844:	40011400 	.word	0x40011400
 800c848:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c84c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c850:	2200      	movs	r2, #0
 800c852:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c856:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c85a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c85e:	4642      	mov	r2, r8
 800c860:	464b      	mov	r3, r9
 800c862:	1891      	adds	r1, r2, r2
 800c864:	6239      	str	r1, [r7, #32]
 800c866:	415b      	adcs	r3, r3
 800c868:	627b      	str	r3, [r7, #36]	@ 0x24
 800c86a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c86e:	4641      	mov	r1, r8
 800c870:	1854      	adds	r4, r2, r1
 800c872:	4649      	mov	r1, r9
 800c874:	eb43 0501 	adc.w	r5, r3, r1
 800c878:	f04f 0200 	mov.w	r2, #0
 800c87c:	f04f 0300 	mov.w	r3, #0
 800c880:	00eb      	lsls	r3, r5, #3
 800c882:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c886:	00e2      	lsls	r2, r4, #3
 800c888:	4614      	mov	r4, r2
 800c88a:	461d      	mov	r5, r3
 800c88c:	4643      	mov	r3, r8
 800c88e:	18e3      	adds	r3, r4, r3
 800c890:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c894:	464b      	mov	r3, r9
 800c896:	eb45 0303 	adc.w	r3, r5, r3
 800c89a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c89e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c8aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c8ae:	f04f 0200 	mov.w	r2, #0
 800c8b2:	f04f 0300 	mov.w	r3, #0
 800c8b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	008b      	lsls	r3, r1, #2
 800c8be:	4621      	mov	r1, r4
 800c8c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c8c4:	4621      	mov	r1, r4
 800c8c6:	008a      	lsls	r2, r1, #2
 800c8c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c8cc:	f7f4 f87a 	bl	80009c4 <__aeabi_uldivmod>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	4b60      	ldr	r3, [pc, #384]	@ (800ca58 <UART_SetConfig+0x4e4>)
 800c8d6:	fba3 2302 	umull	r2, r3, r3, r2
 800c8da:	095b      	lsrs	r3, r3, #5
 800c8dc:	011c      	lsls	r4, r3, #4
 800c8de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c8e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c8ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c8f0:	4642      	mov	r2, r8
 800c8f2:	464b      	mov	r3, r9
 800c8f4:	1891      	adds	r1, r2, r2
 800c8f6:	61b9      	str	r1, [r7, #24]
 800c8f8:	415b      	adcs	r3, r3
 800c8fa:	61fb      	str	r3, [r7, #28]
 800c8fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c900:	4641      	mov	r1, r8
 800c902:	1851      	adds	r1, r2, r1
 800c904:	6139      	str	r1, [r7, #16]
 800c906:	4649      	mov	r1, r9
 800c908:	414b      	adcs	r3, r1
 800c90a:	617b      	str	r3, [r7, #20]
 800c90c:	f04f 0200 	mov.w	r2, #0
 800c910:	f04f 0300 	mov.w	r3, #0
 800c914:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c918:	4659      	mov	r1, fp
 800c91a:	00cb      	lsls	r3, r1, #3
 800c91c:	4651      	mov	r1, sl
 800c91e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c922:	4651      	mov	r1, sl
 800c924:	00ca      	lsls	r2, r1, #3
 800c926:	4610      	mov	r0, r2
 800c928:	4619      	mov	r1, r3
 800c92a:	4603      	mov	r3, r0
 800c92c:	4642      	mov	r2, r8
 800c92e:	189b      	adds	r3, r3, r2
 800c930:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c934:	464b      	mov	r3, r9
 800c936:	460a      	mov	r2, r1
 800c938:	eb42 0303 	adc.w	r3, r2, r3
 800c93c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c94a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c94c:	f04f 0200 	mov.w	r2, #0
 800c950:	f04f 0300 	mov.w	r3, #0
 800c954:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c958:	4649      	mov	r1, r9
 800c95a:	008b      	lsls	r3, r1, #2
 800c95c:	4641      	mov	r1, r8
 800c95e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c962:	4641      	mov	r1, r8
 800c964:	008a      	lsls	r2, r1, #2
 800c966:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c96a:	f7f4 f82b 	bl	80009c4 <__aeabi_uldivmod>
 800c96e:	4602      	mov	r2, r0
 800c970:	460b      	mov	r3, r1
 800c972:	4611      	mov	r1, r2
 800c974:	4b38      	ldr	r3, [pc, #224]	@ (800ca58 <UART_SetConfig+0x4e4>)
 800c976:	fba3 2301 	umull	r2, r3, r3, r1
 800c97a:	095b      	lsrs	r3, r3, #5
 800c97c:	2264      	movs	r2, #100	@ 0x64
 800c97e:	fb02 f303 	mul.w	r3, r2, r3
 800c982:	1acb      	subs	r3, r1, r3
 800c984:	011b      	lsls	r3, r3, #4
 800c986:	3332      	adds	r3, #50	@ 0x32
 800c988:	4a33      	ldr	r2, [pc, #204]	@ (800ca58 <UART_SetConfig+0x4e4>)
 800c98a:	fba2 2303 	umull	r2, r3, r2, r3
 800c98e:	095b      	lsrs	r3, r3, #5
 800c990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c994:	441c      	add	r4, r3
 800c996:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c99a:	2200      	movs	r2, #0
 800c99c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c99e:	677a      	str	r2, [r7, #116]	@ 0x74
 800c9a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c9a4:	4642      	mov	r2, r8
 800c9a6:	464b      	mov	r3, r9
 800c9a8:	1891      	adds	r1, r2, r2
 800c9aa:	60b9      	str	r1, [r7, #8]
 800c9ac:	415b      	adcs	r3, r3
 800c9ae:	60fb      	str	r3, [r7, #12]
 800c9b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c9b4:	4641      	mov	r1, r8
 800c9b6:	1851      	adds	r1, r2, r1
 800c9b8:	6039      	str	r1, [r7, #0]
 800c9ba:	4649      	mov	r1, r9
 800c9bc:	414b      	adcs	r3, r1
 800c9be:	607b      	str	r3, [r7, #4]
 800c9c0:	f04f 0200 	mov.w	r2, #0
 800c9c4:	f04f 0300 	mov.w	r3, #0
 800c9c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c9cc:	4659      	mov	r1, fp
 800c9ce:	00cb      	lsls	r3, r1, #3
 800c9d0:	4651      	mov	r1, sl
 800c9d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c9d6:	4651      	mov	r1, sl
 800c9d8:	00ca      	lsls	r2, r1, #3
 800c9da:	4610      	mov	r0, r2
 800c9dc:	4619      	mov	r1, r3
 800c9de:	4603      	mov	r3, r0
 800c9e0:	4642      	mov	r2, r8
 800c9e2:	189b      	adds	r3, r3, r2
 800c9e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c9e6:	464b      	mov	r3, r9
 800c9e8:	460a      	mov	r2, r1
 800c9ea:	eb42 0303 	adc.w	r3, r2, r3
 800c9ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c9f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c9fa:	667a      	str	r2, [r7, #100]	@ 0x64
 800c9fc:	f04f 0200 	mov.w	r2, #0
 800ca00:	f04f 0300 	mov.w	r3, #0
 800ca04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ca08:	4649      	mov	r1, r9
 800ca0a:	008b      	lsls	r3, r1, #2
 800ca0c:	4641      	mov	r1, r8
 800ca0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca12:	4641      	mov	r1, r8
 800ca14:	008a      	lsls	r2, r1, #2
 800ca16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ca1a:	f7f3 ffd3 	bl	80009c4 <__aeabi_uldivmod>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	460b      	mov	r3, r1
 800ca22:	4b0d      	ldr	r3, [pc, #52]	@ (800ca58 <UART_SetConfig+0x4e4>)
 800ca24:	fba3 1302 	umull	r1, r3, r3, r2
 800ca28:	095b      	lsrs	r3, r3, #5
 800ca2a:	2164      	movs	r1, #100	@ 0x64
 800ca2c:	fb01 f303 	mul.w	r3, r1, r3
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	011b      	lsls	r3, r3, #4
 800ca34:	3332      	adds	r3, #50	@ 0x32
 800ca36:	4a08      	ldr	r2, [pc, #32]	@ (800ca58 <UART_SetConfig+0x4e4>)
 800ca38:	fba2 2303 	umull	r2, r3, r2, r3
 800ca3c:	095b      	lsrs	r3, r3, #5
 800ca3e:	f003 020f 	and.w	r2, r3, #15
 800ca42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4422      	add	r2, r4
 800ca4a:	609a      	str	r2, [r3, #8]
}
 800ca4c:	bf00      	nop
 800ca4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ca52:	46bd      	mov	sp, r7
 800ca54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca58:	51eb851f 	.word	0x51eb851f

0800ca5c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ca5c:	b084      	sub	sp, #16
 800ca5e:	b480      	push	{r7}
 800ca60:	b085      	sub	sp, #20
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
 800ca66:	f107 001c 	add.w	r0, r7, #28
 800ca6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ca72:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ca74:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ca76:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ca78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800ca7a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ca7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800ca7e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ca80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800ca82:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ca84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800ca86:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800ca96:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	431a      	orrs	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3714      	adds	r7, #20
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	b004      	add	sp, #16
 800cab0:	4770      	bx	lr

0800cab2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cab2:	b480      	push	{r7}
 800cab4:	b083      	sub	sp, #12
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	370c      	adds	r7, #12
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr

0800caee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800caee:	b480      	push	{r7}
 800caf0:	b083      	sub	sp, #12
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2203      	movs	r2, #3
 800cafa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	370c      	adds	r7, #12
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr

0800cb0a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cb0a:	b480      	push	{r7}
 800cb0c:	b083      	sub	sp, #12
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f003 0303 	and.w	r3, r3, #3
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	370c      	adds	r7, #12
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb24:	4770      	bx	lr

0800cb26 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cb26:	b480      	push	{r7}
 800cb28:	b085      	sub	sp, #20
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
 800cb2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb30:	2300      	movs	r3, #0
 800cb32:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb44:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cb4a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cb50:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800cb60:	f023 030f 	bic.w	r3, r3, #15
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	431a      	orrs	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cb6c:	2300      	movs	r3, #0
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3714      	adds	r7, #20
 800cb72:	46bd      	mov	sp, r7
 800cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb78:	4770      	bx	lr

0800cb7a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cb7a:	b480      	push	{r7}
 800cb7c:	b083      	sub	sp, #12
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	b2db      	uxtb	r3, r3
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	370c      	adds	r7, #12
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b085      	sub	sp, #20
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	3314      	adds	r3, #20
 800cba2:	461a      	mov	r2, r3
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	4413      	add	r3, r2
 800cba8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
}  
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3714      	adds	r7, #20
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr

0800cbba <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cbba:	b480      	push	{r7}
 800cbbc:	b085      	sub	sp, #20
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
 800cbc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	685a      	ldr	r2, [r3, #4]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cbe0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cbe6:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cbec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cbee:	68fa      	ldr	r2, [r7, #12]
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbf8:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	431a      	orrs	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cc04:	2300      	movs	r3, #0

}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3714      	adds	r7, #20
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr

0800cc12 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b088      	sub	sp, #32
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
 800cc1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cc20:	2310      	movs	r3, #16
 800cc22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc24:	2340      	movs	r3, #64	@ 0x40
 800cc26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc32:	f107 0308 	add.w	r3, r7, #8
 800cc36:	4619      	mov	r1, r3
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f7ff ff74 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cc3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc42:	2110      	movs	r1, #16
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 f9d7 	bl	800cff8 <SDMMC_GetCmdResp1>
 800cc4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc4c:	69fb      	ldr	r3, [r7, #28]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3720      	adds	r7, #32
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b088      	sub	sp, #32
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
 800cc5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cc64:	2311      	movs	r3, #17
 800cc66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc68:	2340      	movs	r3, #64	@ 0x40
 800cc6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc76:	f107 0308 	add.w	r3, r7, #8
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7ff ff52 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cc82:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc86:	2111      	movs	r1, #17
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 f9b5 	bl	800cff8 <SDMMC_GetCmdResp1>
 800cc8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc90:	69fb      	ldr	r3, [r7, #28]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3720      	adds	r7, #32
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b088      	sub	sp, #32
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cca8:	2312      	movs	r3, #18
 800ccaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccac:	2340      	movs	r3, #64	@ 0x40
 800ccae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccba:	f107 0308 	add.w	r3, r7, #8
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f7ff ff30 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ccc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccca:	2112      	movs	r1, #18
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 f993 	bl	800cff8 <SDMMC_GetCmdResp1>
 800ccd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccd4:	69fb      	ldr	r3, [r7, #28]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3720      	adds	r7, #32
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b088      	sub	sp, #32
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ccec:	2318      	movs	r3, #24
 800ccee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccf0:	2340      	movs	r3, #64	@ 0x40
 800ccf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccfc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccfe:	f107 0308 	add.w	r3, r7, #8
 800cd02:	4619      	mov	r1, r3
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7ff ff0e 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cd0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd0e:	2118      	movs	r1, #24
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 f971 	bl	800cff8 <SDMMC_GetCmdResp1>
 800cd16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd18:	69fb      	ldr	r3, [r7, #28]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3720      	adds	r7, #32
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b088      	sub	sp, #32
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
 800cd2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cd30:	2319      	movs	r3, #25
 800cd32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd34:	2340      	movs	r3, #64	@ 0x40
 800cd36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd42:	f107 0308 	add.w	r3, r7, #8
 800cd46:	4619      	mov	r1, r3
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7ff feec 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cd4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd52:	2119      	movs	r1, #25
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f94f 	bl	800cff8 <SDMMC_GetCmdResp1>
 800cd5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd5c:	69fb      	ldr	r3, [r7, #28]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3720      	adds	r7, #32
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
	...

0800cd68 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b088      	sub	sp, #32
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cd70:	2300      	movs	r3, #0
 800cd72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cd74:	230c      	movs	r3, #12
 800cd76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd78:	2340      	movs	r3, #64	@ 0x40
 800cd7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd86:	f107 0308 	add.w	r3, r7, #8
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f7ff feca 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800cd92:	4a05      	ldr	r2, [pc, #20]	@ (800cda8 <SDMMC_CmdStopTransfer+0x40>)
 800cd94:	210c      	movs	r1, #12
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f92e 	bl	800cff8 <SDMMC_GetCmdResp1>
 800cd9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd9e:	69fb      	ldr	r3, [r7, #28]
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3720      	adds	r7, #32
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	05f5e100 	.word	0x05f5e100

0800cdac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b08a      	sub	sp, #40	@ 0x28
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cdbc:	2307      	movs	r3, #7
 800cdbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cdc0:	2340      	movs	r3, #64	@ 0x40
 800cdc2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdcc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdce:	f107 0310 	add.w	r3, r7, #16
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f7ff fea6 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800cdda:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdde:	2107      	movs	r1, #7
 800cde0:	68f8      	ldr	r0, [r7, #12]
 800cde2:	f000 f909 	bl	800cff8 <SDMMC_GetCmdResp1>
 800cde6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800cde8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3728      	adds	r7, #40	@ 0x28
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b088      	sub	sp, #32
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ce02:	2300      	movs	r3, #0
 800ce04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce06:	2300      	movs	r3, #0
 800ce08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce10:	f107 0308 	add.w	r3, r7, #8
 800ce14:	4619      	mov	r1, r3
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7ff fe85 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 fb23 	bl	800d468 <SDMMC_GetCmdError>
 800ce22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce24:	69fb      	ldr	r3, [r7, #28]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3720      	adds	r7, #32
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b088      	sub	sp, #32
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ce36:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ce3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ce3c:	2308      	movs	r3, #8
 800ce3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce40:	2340      	movs	r3, #64	@ 0x40
 800ce42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce44:	2300      	movs	r3, #0
 800ce46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce4e:	f107 0308 	add.w	r3, r7, #8
 800ce52:	4619      	mov	r1, r3
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7ff fe66 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 fab6 	bl	800d3cc <SDMMC_GetCmdResp7>
 800ce60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce62:	69fb      	ldr	r3, [r7, #28]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3720      	adds	r7, #32
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b088      	sub	sp, #32
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ce7a:	2337      	movs	r3, #55	@ 0x37
 800ce7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce7e:	2340      	movs	r3, #64	@ 0x40
 800ce80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce82:	2300      	movs	r3, #0
 800ce84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce8c:	f107 0308 	add.w	r3, r7, #8
 800ce90:	4619      	mov	r1, r3
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7ff fe47 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ce98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce9c:	2137      	movs	r1, #55	@ 0x37
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 f8aa 	bl	800cff8 <SDMMC_GetCmdResp1>
 800cea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cea6:	69fb      	ldr	r3, [r7, #28]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3720      	adds	r7, #32
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b088      	sub	sp, #32
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cec0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cec6:	2329      	movs	r3, #41	@ 0x29
 800cec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ceca:	2340      	movs	r3, #64	@ 0x40
 800cecc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cece:	2300      	movs	r3, #0
 800ced0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ced2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ced6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ced8:	f107 0308 	add.w	r3, r7, #8
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f7ff fe21 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 f9bd 	bl	800d264 <SDMMC_GetCmdResp3>
 800ceea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceec:	69fb      	ldr	r3, [r7, #28]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3720      	adds	r7, #32
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b088      	sub	sp, #32
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cefe:	2300      	movs	r3, #0
 800cf00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cf02:	2302      	movs	r3, #2
 800cf04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cf06:	23c0      	movs	r3, #192	@ 0xc0
 800cf08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf14:	f107 0308 	add.w	r3, r7, #8
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7ff fe03 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f957 	bl	800d1d4 <SDMMC_GetCmdResp2>
 800cf26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf28:	69fb      	ldr	r3, [r7, #28]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3720      	adds	r7, #32
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b088      	sub	sp, #32
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
 800cf3a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cf40:	2309      	movs	r3, #9
 800cf42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cf44:	23c0      	movs	r3, #192	@ 0xc0
 800cf46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf52:	f107 0308 	add.w	r3, r7, #8
 800cf56:	4619      	mov	r1, r3
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7ff fde4 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 f938 	bl	800d1d4 <SDMMC_GetCmdResp2>
 800cf64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf66:	69fb      	ldr	r3, [r7, #28]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3720      	adds	r7, #32
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b088      	sub	sp, #32
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cf7e:	2303      	movs	r3, #3
 800cf80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf82:	2340      	movs	r3, #64	@ 0x40
 800cf84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf86:	2300      	movs	r3, #0
 800cf88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf90:	f107 0308 	add.w	r3, r7, #8
 800cf94:	4619      	mov	r1, r3
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7ff fdc5 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	2103      	movs	r1, #3
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 f99d 	bl	800d2e0 <SDMMC_GetCmdResp6>
 800cfa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfa8:	69fb      	ldr	r3, [r7, #28]
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3720      	adds	r7, #32
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}

0800cfb2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b088      	sub	sp, #32
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
 800cfba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cfc0:	230d      	movs	r3, #13
 800cfc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cfc4:	2340      	movs	r3, #64	@ 0x40
 800cfc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfd2:	f107 0308 	add.w	r3, r7, #8
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f7ff fda4 	bl	800cb26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800cfde:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfe2:	210d      	movs	r1, #13
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 f807 	bl	800cff8 <SDMMC_GetCmdResp1>
 800cfea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfec:	69fb      	ldr	r3, [r7, #28]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3720      	adds	r7, #32
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
	...

0800cff8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b088      	sub	sp, #32
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	460b      	mov	r3, r1
 800d002:	607a      	str	r2, [r7, #4]
 800d004:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d006:	4b70      	ldr	r3, [pc, #448]	@ (800d1c8 <SDMMC_GetCmdResp1+0x1d0>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a70      	ldr	r2, [pc, #448]	@ (800d1cc <SDMMC_GetCmdResp1+0x1d4>)
 800d00c:	fba2 2303 	umull	r2, r3, r2, r3
 800d010:	0a5a      	lsrs	r2, r3, #9
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	fb02 f303 	mul.w	r3, r2, r3
 800d018:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	1e5a      	subs	r2, r3, #1
 800d01e:	61fa      	str	r2, [r7, #28]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d102      	bne.n	800d02a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d024:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d028:	e0c9      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d02e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d036:	2b00      	cmp	r3, #0
 800d038:	d0ef      	beq.n	800d01a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1ea      	bne.n	800d01a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d048:	f003 0304 	and.w	r3, r3, #4
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d004      	beq.n	800d05a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2204      	movs	r2, #4
 800d054:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d056:	2304      	movs	r3, #4
 800d058:	e0b1      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d05e:	f003 0301 	and.w	r3, r3, #1
 800d062:	2b00      	cmp	r3, #0
 800d064:	d004      	beq.n	800d070 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2201      	movs	r2, #1
 800d06a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d06c:	2301      	movs	r3, #1
 800d06e:	e0a6      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	22c5      	movs	r2, #197	@ 0xc5
 800d074:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f7ff fd7f 	bl	800cb7a <SDIO_GetCommandResponse>
 800d07c:	4603      	mov	r3, r0
 800d07e:	461a      	mov	r2, r3
 800d080:	7afb      	ldrb	r3, [r7, #11]
 800d082:	4293      	cmp	r3, r2
 800d084:	d001      	beq.n	800d08a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d086:	2301      	movs	r3, #1
 800d088:	e099      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d08a:	2100      	movs	r1, #0
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f7ff fd81 	bl	800cb94 <SDIO_GetResponse>
 800d092:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	4b4e      	ldr	r3, [pc, #312]	@ (800d1d0 <SDMMC_GetCmdResp1+0x1d8>)
 800d098:	4013      	ands	r3, r2
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d101      	bne.n	800d0a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	e08d      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	da02      	bge.n	800d0ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d0a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d0ac:	e087      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d001      	beq.n	800d0bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d0b8:	2340      	movs	r3, #64	@ 0x40
 800d0ba:	e080      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d001      	beq.n	800d0ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d0c6:	2380      	movs	r3, #128	@ 0x80
 800d0c8:	e079      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d0ca:	697b      	ldr	r3, [r7, #20]
 800d0cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d002      	beq.n	800d0da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d0d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d0d8:	e071      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d002      	beq.n	800d0ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d0e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d0e8:	e069      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d002      	beq.n	800d0fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d0f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0f8:	e061      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d100:	2b00      	cmp	r3, #0
 800d102:	d002      	beq.n	800d10a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d104:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d108:	e059      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d110:	2b00      	cmp	r3, #0
 800d112:	d002      	beq.n	800d11a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d114:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d118:	e051      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d120:	2b00      	cmp	r3, #0
 800d122:	d002      	beq.n	800d12a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d124:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d128:	e049      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d130:	2b00      	cmp	r3, #0
 800d132:	d002      	beq.n	800d13a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d134:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d138:	e041      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d140:	2b00      	cmp	r3, #0
 800d142:	d002      	beq.n	800d14a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d144:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d148:	e039      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d150:	2b00      	cmp	r3, #0
 800d152:	d002      	beq.n	800d15a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d154:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d158:	e031      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d160:	2b00      	cmp	r3, #0
 800d162:	d002      	beq.n	800d16a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d164:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d168:	e029      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d170:	2b00      	cmp	r3, #0
 800d172:	d002      	beq.n	800d17a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d174:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d178:	e021      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d180:	2b00      	cmp	r3, #0
 800d182:	d002      	beq.n	800d18a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d184:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d188:	e019      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d190:	2b00      	cmp	r3, #0
 800d192:	d002      	beq.n	800d19a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d194:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d198:	e011      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d002      	beq.n	800d1aa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d1a4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d1a8:	e009      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	f003 0308 	and.w	r3, r3, #8
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d002      	beq.n	800d1ba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d1b4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d1b8:	e001      	b.n	800d1be <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d1ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3720      	adds	r7, #32
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20000010 	.word	0x20000010
 800d1cc:	10624dd3 	.word	0x10624dd3
 800d1d0:	fdffe008 	.word	0xfdffe008

0800d1d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b085      	sub	sp, #20
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d1dc:	4b1f      	ldr	r3, [pc, #124]	@ (800d25c <SDMMC_GetCmdResp2+0x88>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a1f      	ldr	r2, [pc, #124]	@ (800d260 <SDMMC_GetCmdResp2+0x8c>)
 800d1e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d1e6:	0a5b      	lsrs	r3, r3, #9
 800d1e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1ec:	fb02 f303 	mul.w	r3, r2, r3
 800d1f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	1e5a      	subs	r2, r3, #1
 800d1f6:	60fa      	str	r2, [r7, #12]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d102      	bne.n	800d202 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d200:	e026      	b.n	800d250 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d206:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d0ef      	beq.n	800d1f2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d1ea      	bne.n	800d1f2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d220:	f003 0304 	and.w	r3, r3, #4
 800d224:	2b00      	cmp	r3, #0
 800d226:	d004      	beq.n	800d232 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2204      	movs	r2, #4
 800d22c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d22e:	2304      	movs	r3, #4
 800d230:	e00e      	b.n	800d250 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d236:	f003 0301 	and.w	r3, r3, #1
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d004      	beq.n	800d248 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2201      	movs	r2, #1
 800d242:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d244:	2301      	movs	r3, #1
 800d246:	e003      	b.n	800d250 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	22c5      	movs	r2, #197	@ 0xc5
 800d24c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d24e:	2300      	movs	r3, #0
}
 800d250:	4618      	mov	r0, r3
 800d252:	3714      	adds	r7, #20
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr
 800d25c:	20000010 	.word	0x20000010
 800d260:	10624dd3 	.word	0x10624dd3

0800d264 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d26c:	4b1a      	ldr	r3, [pc, #104]	@ (800d2d8 <SDMMC_GetCmdResp3+0x74>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a1a      	ldr	r2, [pc, #104]	@ (800d2dc <SDMMC_GetCmdResp3+0x78>)
 800d272:	fba2 2303 	umull	r2, r3, r2, r3
 800d276:	0a5b      	lsrs	r3, r3, #9
 800d278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d27c:	fb02 f303 	mul.w	r3, r2, r3
 800d280:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	1e5a      	subs	r2, r3, #1
 800d286:	60fa      	str	r2, [r7, #12]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d102      	bne.n	800d292 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d28c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d290:	e01b      	b.n	800d2ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d296:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d0ef      	beq.n	800d282 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1ea      	bne.n	800d282 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2b0:	f003 0304 	and.w	r3, r3, #4
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d004      	beq.n	800d2c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2204      	movs	r2, #4
 800d2bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2be:	2304      	movs	r3, #4
 800d2c0:	e003      	b.n	800d2ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	22c5      	movs	r2, #197	@ 0xc5
 800d2c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d2c8:	2300      	movs	r3, #0
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3714      	adds	r7, #20
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
 800d2d6:	bf00      	nop
 800d2d8:	20000010 	.word	0x20000010
 800d2dc:	10624dd3 	.word	0x10624dd3

0800d2e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b088      	sub	sp, #32
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	607a      	str	r2, [r7, #4]
 800d2ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d2ee:	4b35      	ldr	r3, [pc, #212]	@ (800d3c4 <SDMMC_GetCmdResp6+0xe4>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4a35      	ldr	r2, [pc, #212]	@ (800d3c8 <SDMMC_GetCmdResp6+0xe8>)
 800d2f4:	fba2 2303 	umull	r2, r3, r2, r3
 800d2f8:	0a5b      	lsrs	r3, r3, #9
 800d2fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2fe:	fb02 f303 	mul.w	r3, r2, r3
 800d302:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	1e5a      	subs	r2, r3, #1
 800d308:	61fa      	str	r2, [r7, #28]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d102      	bne.n	800d314 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d30e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d312:	e052      	b.n	800d3ba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d318:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d31a:	69bb      	ldr	r3, [r7, #24]
 800d31c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d320:	2b00      	cmp	r3, #0
 800d322:	d0ef      	beq.n	800d304 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d324:	69bb      	ldr	r3, [r7, #24]
 800d326:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1ea      	bne.n	800d304 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d332:	f003 0304 	and.w	r3, r3, #4
 800d336:	2b00      	cmp	r3, #0
 800d338:	d004      	beq.n	800d344 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2204      	movs	r2, #4
 800d33e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d340:	2304      	movs	r3, #4
 800d342:	e03a      	b.n	800d3ba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d348:	f003 0301 	and.w	r3, r3, #1
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d004      	beq.n	800d35a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2201      	movs	r2, #1
 800d354:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d356:	2301      	movs	r3, #1
 800d358:	e02f      	b.n	800d3ba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f7ff fc0d 	bl	800cb7a <SDIO_GetCommandResponse>
 800d360:	4603      	mov	r3, r0
 800d362:	461a      	mov	r2, r3
 800d364:	7afb      	ldrb	r3, [r7, #11]
 800d366:	4293      	cmp	r3, r2
 800d368:	d001      	beq.n	800d36e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d36a:	2301      	movs	r3, #1
 800d36c:	e025      	b.n	800d3ba <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	22c5      	movs	r2, #197	@ 0xc5
 800d372:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d374:	2100      	movs	r1, #0
 800d376:	68f8      	ldr	r0, [r7, #12]
 800d378:	f7ff fc0c 	bl	800cb94 <SDIO_GetResponse>
 800d37c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d384:	2b00      	cmp	r3, #0
 800d386:	d106      	bne.n	800d396 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	0c1b      	lsrs	r3, r3, #16
 800d38c:	b29a      	uxth	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d392:	2300      	movs	r3, #0
 800d394:	e011      	b.n	800d3ba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d002      	beq.n	800d3a6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d3a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d3a4:	e009      	b.n	800d3ba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d002      	beq.n	800d3b6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d3b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3b4:	e001      	b.n	800d3ba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d3b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3720      	adds	r7, #32
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	20000010 	.word	0x20000010
 800d3c8:	10624dd3 	.word	0x10624dd3

0800d3cc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b085      	sub	sp, #20
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3d4:	4b22      	ldr	r3, [pc, #136]	@ (800d460 <SDMMC_GetCmdResp7+0x94>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a22      	ldr	r2, [pc, #136]	@ (800d464 <SDMMC_GetCmdResp7+0x98>)
 800d3da:	fba2 2303 	umull	r2, r3, r2, r3
 800d3de:	0a5b      	lsrs	r3, r3, #9
 800d3e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3e4:	fb02 f303 	mul.w	r3, r2, r3
 800d3e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	1e5a      	subs	r2, r3, #1
 800d3ee:	60fa      	str	r2, [r7, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d102      	bne.n	800d3fa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d3f8:	e02c      	b.n	800d454 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d406:	2b00      	cmp	r3, #0
 800d408:	d0ef      	beq.n	800d3ea <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d410:	2b00      	cmp	r3, #0
 800d412:	d1ea      	bne.n	800d3ea <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d418:	f003 0304 	and.w	r3, r3, #4
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d004      	beq.n	800d42a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2204      	movs	r2, #4
 800d424:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d426:	2304      	movs	r3, #4
 800d428:	e014      	b.n	800d454 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d42e:	f003 0301 	and.w	r3, r3, #1
 800d432:	2b00      	cmp	r3, #0
 800d434:	d004      	beq.n	800d440 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2201      	movs	r2, #1
 800d43a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d43c:	2301      	movs	r3, #1
 800d43e:	e009      	b.n	800d454 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d002      	beq.n	800d452 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2240      	movs	r2, #64	@ 0x40
 800d450:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d452:	2300      	movs	r3, #0
  
}
 800d454:	4618      	mov	r0, r3
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	20000010 	.word	0x20000010
 800d464:	10624dd3 	.word	0x10624dd3

0800d468 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d470:	4b11      	ldr	r3, [pc, #68]	@ (800d4b8 <SDMMC_GetCmdError+0x50>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a11      	ldr	r2, [pc, #68]	@ (800d4bc <SDMMC_GetCmdError+0x54>)
 800d476:	fba2 2303 	umull	r2, r3, r2, r3
 800d47a:	0a5b      	lsrs	r3, r3, #9
 800d47c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d480:	fb02 f303 	mul.w	r3, r2, r3
 800d484:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	1e5a      	subs	r2, r3, #1
 800d48a:	60fa      	str	r2, [r7, #12]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d102      	bne.n	800d496 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d490:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d494:	e009      	b.n	800d4aa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d49a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d0f1      	beq.n	800d486 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	22c5      	movs	r2, #197	@ 0xc5
 800d4a6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3714      	adds	r7, #20
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	20000010 	.word	0x20000010
 800d4bc:	10624dd3 	.word	0x10624dd3

0800d4c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d4c4:	4904      	ldr	r1, [pc, #16]	@ (800d4d8 <MX_FATFS_Init+0x18>)
 800d4c6:	4805      	ldr	r0, [pc, #20]	@ (800d4dc <MX_FATFS_Init+0x1c>)
 800d4c8:	f003 f886 	bl	80105d8 <FATFS_LinkDriver>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	4b03      	ldr	r3, [pc, #12]	@ (800d4e0 <MX_FATFS_Init+0x20>)
 800d4d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d4d4:	bf00      	nop
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	20014738 	.word	0x20014738
 800d4dc:	080119d4 	.word	0x080119d4
 800d4e0:	20014734 	.word	0x20014734

0800d4e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d4e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d4fe:	f000 f86b 	bl	800d5d8 <BSP_SD_IsDetected>
 800d502:	4603      	mov	r3, r0
 800d504:	2b01      	cmp	r3, #1
 800d506:	d001      	beq.n	800d50c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d508:	2301      	movs	r3, #1
 800d50a:	e005      	b.n	800d518 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d50c:	4804      	ldr	r0, [pc, #16]	@ (800d520 <BSP_SD_Init+0x2c>)
 800d50e:	f7fb f977 	bl	8008800 <HAL_SD_Init>
 800d512:	4603      	mov	r3, r0
 800d514:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800d516:	79fb      	ldrb	r3, [r7, #7]
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3708      	adds	r7, #8
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	200141f8 	.word	0x200141f8

0800d524 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b088      	sub	sp, #32
 800d528:	af02      	add	r7, sp, #8
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	607a      	str	r2, [r7, #4]
 800d530:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d532:	2300      	movs	r3, #0
 800d534:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	68ba      	ldr	r2, [r7, #8]
 800d53e:	68f9      	ldr	r1, [r7, #12]
 800d540:	4806      	ldr	r0, [pc, #24]	@ (800d55c <BSP_SD_ReadBlocks+0x38>)
 800d542:	f7fb fa0d 	bl	8008960 <HAL_SD_ReadBlocks>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d001      	beq.n	800d550 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d54c:	2301      	movs	r3, #1
 800d54e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d550:	7dfb      	ldrb	r3, [r7, #23]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3718      	adds	r7, #24
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	200141f8 	.word	0x200141f8

0800d560 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b088      	sub	sp, #32
 800d564:	af02      	add	r7, sp, #8
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	607a      	str	r2, [r7, #4]
 800d56c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d56e:	2300      	movs	r3, #0
 800d570:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	9300      	str	r3, [sp, #0]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	68ba      	ldr	r2, [r7, #8]
 800d57a:	68f9      	ldr	r1, [r7, #12]
 800d57c:	4806      	ldr	r0, [pc, #24]	@ (800d598 <BSP_SD_WriteBlocks+0x38>)
 800d57e:	f7fb fbd5 	bl	8008d2c <HAL_SD_WriteBlocks>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d001      	beq.n	800d58c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d58c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3718      	adds	r7, #24
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	200141f8 	.word	0x200141f8

0800d59c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d5a0:	4805      	ldr	r0, [pc, #20]	@ (800d5b8 <BSP_SD_GetCardState+0x1c>)
 800d5a2:	f7fb ff21 	bl	80093e8 <HAL_SD_GetCardState>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b04      	cmp	r3, #4
 800d5aa:	bf14      	ite	ne
 800d5ac:	2301      	movne	r3, #1
 800d5ae:	2300      	moveq	r3, #0
 800d5b0:	b2db      	uxtb	r3, r3
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	200141f8 	.word	0x200141f8

0800d5bc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d5c4:	6879      	ldr	r1, [r7, #4]
 800d5c6:	4803      	ldr	r0, [pc, #12]	@ (800d5d4 <BSP_SD_GetCardInfo+0x18>)
 800d5c8:	f7fb fee2 	bl	8009390 <HAL_SD_GetCardInfo>
}
 800d5cc:	bf00      	nop
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	200141f8 	.word	0x200141f8

0800d5d8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800d5e2:	79fb      	ldrb	r3, [r7, #7]
 800d5e4:	b2db      	uxtb	r3, r3
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	370c      	adds	r7, #12
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
	...

0800d5f4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d5fe:	4b0b      	ldr	r3, [pc, #44]	@ (800d62c <SD_CheckStatus+0x38>)
 800d600:	2201      	movs	r2, #1
 800d602:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d604:	f7ff ffca 	bl	800d59c <BSP_SD_GetCardState>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d107      	bne.n	800d61e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d60e:	4b07      	ldr	r3, [pc, #28]	@ (800d62c <SD_CheckStatus+0x38>)
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	b2db      	uxtb	r3, r3
 800d614:	f023 0301 	bic.w	r3, r3, #1
 800d618:	b2da      	uxtb	r2, r3
 800d61a:	4b04      	ldr	r3, [pc, #16]	@ (800d62c <SD_CheckStatus+0x38>)
 800d61c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d61e:	4b03      	ldr	r3, [pc, #12]	@ (800d62c <SD_CheckStatus+0x38>)
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	b2db      	uxtb	r3, r3
}
 800d624:	4618      	mov	r0, r3
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	20000019 	.word	0x20000019

0800d630 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	4603      	mov	r3, r0
 800d638:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d63a:	4b0b      	ldr	r3, [pc, #44]	@ (800d668 <SD_initialize+0x38>)
 800d63c:	2201      	movs	r2, #1
 800d63e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d640:	f7ff ff58 	bl	800d4f4 <BSP_SD_Init>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d107      	bne.n	800d65a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d64a:	79fb      	ldrb	r3, [r7, #7]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7ff ffd1 	bl	800d5f4 <SD_CheckStatus>
 800d652:	4603      	mov	r3, r0
 800d654:	461a      	mov	r2, r3
 800d656:	4b04      	ldr	r3, [pc, #16]	@ (800d668 <SD_initialize+0x38>)
 800d658:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d65a:	4b03      	ldr	r3, [pc, #12]	@ (800d668 <SD_initialize+0x38>)
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	b2db      	uxtb	r3, r3
}
 800d660:	4618      	mov	r0, r3
 800d662:	3708      	adds	r7, #8
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	20000019 	.word	0x20000019

0800d66c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	4603      	mov	r3, r0
 800d674:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d676:	79fb      	ldrb	r3, [r7, #7]
 800d678:	4618      	mov	r0, r3
 800d67a:	f7ff ffbb 	bl	800d5f4 <SD_CheckStatus>
 800d67e:	4603      	mov	r3, r0
}
 800d680:	4618      	mov	r0, r3
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60b9      	str	r1, [r7, #8]
 800d690:	607a      	str	r2, [r7, #4]
 800d692:	603b      	str	r3, [r7, #0]
 800d694:	4603      	mov	r3, r0
 800d696:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d698:	2301      	movs	r3, #1
 800d69a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d69c:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a0:	683a      	ldr	r2, [r7, #0]
 800d6a2:	6879      	ldr	r1, [r7, #4]
 800d6a4:	68b8      	ldr	r0, [r7, #8]
 800d6a6:	f7ff ff3d 	bl	800d524 <BSP_SD_ReadBlocks>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d107      	bne.n	800d6c0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d6b0:	bf00      	nop
 800d6b2:	f7ff ff73 	bl	800d59c <BSP_SD_GetCardState>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d1fa      	bne.n	800d6b2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d6c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3718      	adds	r7, #24
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}

0800d6ca <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d6ca:	b580      	push	{r7, lr}
 800d6cc:	b086      	sub	sp, #24
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	60b9      	str	r1, [r7, #8]
 800d6d2:	607a      	str	r2, [r7, #4]
 800d6d4:	603b      	str	r3, [r7, #0]
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d6de:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e2:	683a      	ldr	r2, [r7, #0]
 800d6e4:	6879      	ldr	r1, [r7, #4]
 800d6e6:	68b8      	ldr	r0, [r7, #8]
 800d6e8:	f7ff ff3a 	bl	800d560 <BSP_SD_WriteBlocks>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d107      	bne.n	800d702 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d6f2:	bf00      	nop
 800d6f4:	f7ff ff52 	bl	800d59c <BSP_SD_GetCardState>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d1fa      	bne.n	800d6f4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d6fe:	2300      	movs	r3, #0
 800d700:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d702:	7dfb      	ldrb	r3, [r7, #23]
}
 800d704:	4618      	mov	r0, r3
 800d706:	3718      	adds	r7, #24
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b08c      	sub	sp, #48	@ 0x30
 800d710:	af00      	add	r7, sp, #0
 800d712:	4603      	mov	r3, r0
 800d714:	603a      	str	r2, [r7, #0]
 800d716:	71fb      	strb	r3, [r7, #7]
 800d718:	460b      	mov	r3, r1
 800d71a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d71c:	2301      	movs	r3, #1
 800d71e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d722:	4b25      	ldr	r3, [pc, #148]	@ (800d7b8 <SD_ioctl+0xac>)
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	b2db      	uxtb	r3, r3
 800d728:	f003 0301 	and.w	r3, r3, #1
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d001      	beq.n	800d734 <SD_ioctl+0x28>
 800d730:	2303      	movs	r3, #3
 800d732:	e03c      	b.n	800d7ae <SD_ioctl+0xa2>

  switch (cmd)
 800d734:	79bb      	ldrb	r3, [r7, #6]
 800d736:	2b03      	cmp	r3, #3
 800d738:	d834      	bhi.n	800d7a4 <SD_ioctl+0x98>
 800d73a:	a201      	add	r2, pc, #4	@ (adr r2, 800d740 <SD_ioctl+0x34>)
 800d73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d740:	0800d751 	.word	0x0800d751
 800d744:	0800d759 	.word	0x0800d759
 800d748:	0800d771 	.word	0x0800d771
 800d74c:	0800d78b 	.word	0x0800d78b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d750:	2300      	movs	r3, #0
 800d752:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d756:	e028      	b.n	800d7aa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d758:	f107 030c 	add.w	r3, r7, #12
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7ff ff2d 	bl	800d5bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d768:	2300      	movs	r3, #0
 800d76a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d76e:	e01c      	b.n	800d7aa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d770:	f107 030c 	add.w	r3, r7, #12
 800d774:	4618      	mov	r0, r3
 800d776:	f7ff ff21 	bl	800d5bc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d782:	2300      	movs	r3, #0
 800d784:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d788:	e00f      	b.n	800d7aa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d78a:	f107 030c 	add.w	r3, r7, #12
 800d78e:	4618      	mov	r0, r3
 800d790:	f7ff ff14 	bl	800d5bc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d796:	0a5a      	lsrs	r2, r3, #9
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d79c:	2300      	movs	r3, #0
 800d79e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d7a2:	e002      	b.n	800d7aa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d7a4:	2304      	movs	r3, #4
 800d7a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d7aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3730      	adds	r7, #48	@ 0x30
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	20000019 	.word	0x20000019

0800d7bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b084      	sub	sp, #16
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d7c6:	79fb      	ldrb	r3, [r7, #7]
 800d7c8:	4a08      	ldr	r2, [pc, #32]	@ (800d7ec <disk_status+0x30>)
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	4413      	add	r3, r2
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	79fa      	ldrb	r2, [r7, #7]
 800d7d4:	4905      	ldr	r1, [pc, #20]	@ (800d7ec <disk_status+0x30>)
 800d7d6:	440a      	add	r2, r1
 800d7d8:	7a12      	ldrb	r2, [r2, #8]
 800d7da:	4610      	mov	r0, r2
 800d7dc:	4798      	blx	r3
 800d7de:	4603      	mov	r3, r0
 800d7e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	20014764 	.word	0x20014764

0800d7f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d7fe:	79fb      	ldrb	r3, [r7, #7]
 800d800:	4a0e      	ldr	r2, [pc, #56]	@ (800d83c <disk_initialize+0x4c>)
 800d802:	5cd3      	ldrb	r3, [r2, r3]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d114      	bne.n	800d832 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d808:	79fb      	ldrb	r3, [r7, #7]
 800d80a:	4a0c      	ldr	r2, [pc, #48]	@ (800d83c <disk_initialize+0x4c>)
 800d80c:	009b      	lsls	r3, r3, #2
 800d80e:	4413      	add	r3, r2
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	79fa      	ldrb	r2, [r7, #7]
 800d816:	4909      	ldr	r1, [pc, #36]	@ (800d83c <disk_initialize+0x4c>)
 800d818:	440a      	add	r2, r1
 800d81a:	7a12      	ldrb	r2, [r2, #8]
 800d81c:	4610      	mov	r0, r2
 800d81e:	4798      	blx	r3
 800d820:	4603      	mov	r3, r0
 800d822:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800d824:	7bfb      	ldrb	r3, [r7, #15]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d103      	bne.n	800d832 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800d82a:	79fb      	ldrb	r3, [r7, #7]
 800d82c:	4a03      	ldr	r2, [pc, #12]	@ (800d83c <disk_initialize+0x4c>)
 800d82e:	2101      	movs	r1, #1
 800d830:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800d832:	7bfb      	ldrb	r3, [r7, #15]
}
 800d834:	4618      	mov	r0, r3
 800d836:	3710      	adds	r7, #16
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	20014764 	.word	0x20014764

0800d840 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d840:	b590      	push	{r4, r7, lr}
 800d842:	b087      	sub	sp, #28
 800d844:	af00      	add	r7, sp, #0
 800d846:	60b9      	str	r1, [r7, #8]
 800d848:	607a      	str	r2, [r7, #4]
 800d84a:	603b      	str	r3, [r7, #0]
 800d84c:	4603      	mov	r3, r0
 800d84e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d850:	7bfb      	ldrb	r3, [r7, #15]
 800d852:	4a0a      	ldr	r2, [pc, #40]	@ (800d87c <disk_read+0x3c>)
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4413      	add	r3, r2
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	689c      	ldr	r4, [r3, #8]
 800d85c:	7bfb      	ldrb	r3, [r7, #15]
 800d85e:	4a07      	ldr	r2, [pc, #28]	@ (800d87c <disk_read+0x3c>)
 800d860:	4413      	add	r3, r2
 800d862:	7a18      	ldrb	r0, [r3, #8]
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	68b9      	ldr	r1, [r7, #8]
 800d86a:	47a0      	blx	r4
 800d86c:	4603      	mov	r3, r0
 800d86e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d870:	7dfb      	ldrb	r3, [r7, #23]
}
 800d872:	4618      	mov	r0, r3
 800d874:	371c      	adds	r7, #28
 800d876:	46bd      	mov	sp, r7
 800d878:	bd90      	pop	{r4, r7, pc}
 800d87a:	bf00      	nop
 800d87c:	20014764 	.word	0x20014764

0800d880 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d880:	b590      	push	{r4, r7, lr}
 800d882:	b087      	sub	sp, #28
 800d884:	af00      	add	r7, sp, #0
 800d886:	60b9      	str	r1, [r7, #8]
 800d888:	607a      	str	r2, [r7, #4]
 800d88a:	603b      	str	r3, [r7, #0]
 800d88c:	4603      	mov	r3, r0
 800d88e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d890:	7bfb      	ldrb	r3, [r7, #15]
 800d892:	4a0a      	ldr	r2, [pc, #40]	@ (800d8bc <disk_write+0x3c>)
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	4413      	add	r3, r2
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	68dc      	ldr	r4, [r3, #12]
 800d89c:	7bfb      	ldrb	r3, [r7, #15]
 800d89e:	4a07      	ldr	r2, [pc, #28]	@ (800d8bc <disk_write+0x3c>)
 800d8a0:	4413      	add	r3, r2
 800d8a2:	7a18      	ldrb	r0, [r3, #8]
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	68b9      	ldr	r1, [r7, #8]
 800d8aa:	47a0      	blx	r4
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	75fb      	strb	r3, [r7, #23]
  return res;
 800d8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	371c      	adds	r7, #28
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd90      	pop	{r4, r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	20014764 	.word	0x20014764

0800d8c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	603a      	str	r2, [r7, #0]
 800d8ca:	71fb      	strb	r3, [r7, #7]
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d8d0:	79fb      	ldrb	r3, [r7, #7]
 800d8d2:	4a09      	ldr	r2, [pc, #36]	@ (800d8f8 <disk_ioctl+0x38>)
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	4413      	add	r3, r2
 800d8d8:	685b      	ldr	r3, [r3, #4]
 800d8da:	691b      	ldr	r3, [r3, #16]
 800d8dc:	79fa      	ldrb	r2, [r7, #7]
 800d8de:	4906      	ldr	r1, [pc, #24]	@ (800d8f8 <disk_ioctl+0x38>)
 800d8e0:	440a      	add	r2, r1
 800d8e2:	7a10      	ldrb	r0, [r2, #8]
 800d8e4:	79b9      	ldrb	r1, [r7, #6]
 800d8e6:	683a      	ldr	r2, [r7, #0]
 800d8e8:	4798      	blx	r3
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	73fb      	strb	r3, [r7, #15]
  return res;
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	20014764 	.word	0x20014764

0800d8fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	3301      	adds	r3, #1
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d90c:	89fb      	ldrh	r3, [r7, #14]
 800d90e:	021b      	lsls	r3, r3, #8
 800d910:	b21a      	sxth	r2, r3
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	b21b      	sxth	r3, r3
 800d918:	4313      	orrs	r3, r2
 800d91a:	b21b      	sxth	r3, r3
 800d91c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d91e:	89fb      	ldrh	r3, [r7, #14]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3714      	adds	r7, #20
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	3303      	adds	r3, #3
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	021b      	lsls	r3, r3, #8
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	3202      	adds	r2, #2
 800d944:	7812      	ldrb	r2, [r2, #0]
 800d946:	4313      	orrs	r3, r2
 800d948:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	021b      	lsls	r3, r3, #8
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	3201      	adds	r2, #1
 800d952:	7812      	ldrb	r2, [r2, #0]
 800d954:	4313      	orrs	r3, r2
 800d956:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	021b      	lsls	r3, r3, #8
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	7812      	ldrb	r2, [r2, #0]
 800d960:	4313      	orrs	r3, r2
 800d962:	60fb      	str	r3, [r7, #12]
	return rv;
 800d964:	68fb      	ldr	r3, [r7, #12]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3714      	adds	r7, #20
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr

0800d972 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d972:	b480      	push	{r7}
 800d974:	b083      	sub	sp, #12
 800d976:	af00      	add	r7, sp, #0
 800d978:	6078      	str	r0, [r7, #4]
 800d97a:	460b      	mov	r3, r1
 800d97c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	1c5a      	adds	r2, r3, #1
 800d982:	607a      	str	r2, [r7, #4]
 800d984:	887a      	ldrh	r2, [r7, #2]
 800d986:	b2d2      	uxtb	r2, r2
 800d988:	701a      	strb	r2, [r3, #0]
 800d98a:	887b      	ldrh	r3, [r7, #2]
 800d98c:	0a1b      	lsrs	r3, r3, #8
 800d98e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	1c5a      	adds	r2, r3, #1
 800d994:	607a      	str	r2, [r7, #4]
 800d996:	887a      	ldrh	r2, [r7, #2]
 800d998:	b2d2      	uxtb	r2, r2
 800d99a:	701a      	strb	r2, [r3, #0]
}
 800d99c:	bf00      	nop
 800d99e:	370c      	adds	r7, #12
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	1c5a      	adds	r2, r3, #1
 800d9b6:	607a      	str	r2, [r7, #4]
 800d9b8:	683a      	ldr	r2, [r7, #0]
 800d9ba:	b2d2      	uxtb	r2, r2
 800d9bc:	701a      	strb	r2, [r3, #0]
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	0a1b      	lsrs	r3, r3, #8
 800d9c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	1c5a      	adds	r2, r3, #1
 800d9c8:	607a      	str	r2, [r7, #4]
 800d9ca:	683a      	ldr	r2, [r7, #0]
 800d9cc:	b2d2      	uxtb	r2, r2
 800d9ce:	701a      	strb	r2, [r3, #0]
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	0a1b      	lsrs	r3, r3, #8
 800d9d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	1c5a      	adds	r2, r3, #1
 800d9da:	607a      	str	r2, [r7, #4]
 800d9dc:	683a      	ldr	r2, [r7, #0]
 800d9de:	b2d2      	uxtb	r2, r2
 800d9e0:	701a      	strb	r2, [r3, #0]
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	0a1b      	lsrs	r3, r3, #8
 800d9e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	1c5a      	adds	r2, r3, #1
 800d9ec:	607a      	str	r2, [r7, #4]
 800d9ee:	683a      	ldr	r2, [r7, #0]
 800d9f0:	b2d2      	uxtb	r2, r2
 800d9f2:	701a      	strb	r2, [r3, #0]
}
 800d9f4:	bf00      	nop
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800da00:	b480      	push	{r7}
 800da02:	b087      	sub	sp, #28
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00d      	beq.n	800da36 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800da1a:	693a      	ldr	r2, [r7, #16]
 800da1c:	1c53      	adds	r3, r2, #1
 800da1e:	613b      	str	r3, [r7, #16]
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	1c59      	adds	r1, r3, #1
 800da24:	6179      	str	r1, [r7, #20]
 800da26:	7812      	ldrb	r2, [r2, #0]
 800da28:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	3b01      	subs	r3, #1
 800da2e:	607b      	str	r3, [r7, #4]
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d1f1      	bne.n	800da1a <mem_cpy+0x1a>
	}
}
 800da36:	bf00      	nop
 800da38:	371c      	adds	r7, #28
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr

0800da42 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800da42:	b480      	push	{r7}
 800da44:	b087      	sub	sp, #28
 800da46:	af00      	add	r7, sp, #0
 800da48:	60f8      	str	r0, [r7, #12]
 800da4a:	60b9      	str	r1, [r7, #8]
 800da4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	1c5a      	adds	r2, r3, #1
 800da56:	617a      	str	r2, [r7, #20]
 800da58:	68ba      	ldr	r2, [r7, #8]
 800da5a:	b2d2      	uxtb	r2, r2
 800da5c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	3b01      	subs	r3, #1
 800da62:	607b      	str	r3, [r7, #4]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1f3      	bne.n	800da52 <mem_set+0x10>
}
 800da6a:	bf00      	nop
 800da6c:	bf00      	nop
 800da6e:	371c      	adds	r7, #28
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800da78:	b480      	push	{r7}
 800da7a:	b089      	sub	sp, #36	@ 0x24
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	61fb      	str	r3, [r7, #28]
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	1c5a      	adds	r2, r3, #1
 800da94:	61fa      	str	r2, [r7, #28]
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	4619      	mov	r1, r3
 800da9a:	69bb      	ldr	r3, [r7, #24]
 800da9c:	1c5a      	adds	r2, r3, #1
 800da9e:	61ba      	str	r2, [r7, #24]
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	1acb      	subs	r3, r1, r3
 800daa4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	3b01      	subs	r3, #1
 800daaa:	607b      	str	r3, [r7, #4]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d002      	beq.n	800dab8 <mem_cmp+0x40>
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d0eb      	beq.n	800da90 <mem_cmp+0x18>

	return r;
 800dab8:	697b      	ldr	r3, [r7, #20]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3724      	adds	r7, #36	@ 0x24
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr

0800dac6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800dac6:	b480      	push	{r7}
 800dac8:	b083      	sub	sp, #12
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
 800dace:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800dad0:	e002      	b.n	800dad8 <chk_chr+0x12>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	3301      	adds	r3, #1
 800dad6:	607b      	str	r3, [r7, #4]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d005      	beq.n	800daec <chk_chr+0x26>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	461a      	mov	r2, r3
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	4293      	cmp	r3, r2
 800daea:	d1f2      	bne.n	800dad2 <chk_chr+0xc>
	return *str;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	781b      	ldrb	r3, [r3, #0]
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800db06:	2300      	movs	r3, #0
 800db08:	60bb      	str	r3, [r7, #8]
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	60fb      	str	r3, [r7, #12]
 800db0e:	e029      	b.n	800db64 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800db10:	4a27      	ldr	r2, [pc, #156]	@ (800dbb0 <chk_lock+0xb4>)
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	011b      	lsls	r3, r3, #4
 800db16:	4413      	add	r3, r2
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d01d      	beq.n	800db5a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800db1e:	4a24      	ldr	r2, [pc, #144]	@ (800dbb0 <chk_lock+0xb4>)
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	011b      	lsls	r3, r3, #4
 800db24:	4413      	add	r3, r2
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d116      	bne.n	800db5e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800db30:	4a1f      	ldr	r2, [pc, #124]	@ (800dbb0 <chk_lock+0xb4>)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	011b      	lsls	r3, r3, #4
 800db36:	4413      	add	r3, r2
 800db38:	3304      	adds	r3, #4
 800db3a:	681a      	ldr	r2, [r3, #0]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800db40:	429a      	cmp	r2, r3
 800db42:	d10c      	bne.n	800db5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800db44:	4a1a      	ldr	r2, [pc, #104]	@ (800dbb0 <chk_lock+0xb4>)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	011b      	lsls	r3, r3, #4
 800db4a:	4413      	add	r3, r2
 800db4c:	3308      	adds	r3, #8
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800db54:	429a      	cmp	r2, r3
 800db56:	d102      	bne.n	800db5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800db58:	e007      	b.n	800db6a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800db5a:	2301      	movs	r3, #1
 800db5c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	3301      	adds	r3, #1
 800db62:	60fb      	str	r3, [r7, #12]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2b01      	cmp	r3, #1
 800db68:	d9d2      	bls.n	800db10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2b02      	cmp	r3, #2
 800db6e:	d109      	bne.n	800db84 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d102      	bne.n	800db7c <chk_lock+0x80>
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	2b02      	cmp	r3, #2
 800db7a:	d101      	bne.n	800db80 <chk_lock+0x84>
 800db7c:	2300      	movs	r3, #0
 800db7e:	e010      	b.n	800dba2 <chk_lock+0xa6>
 800db80:	2312      	movs	r3, #18
 800db82:	e00e      	b.n	800dba2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d108      	bne.n	800db9c <chk_lock+0xa0>
 800db8a:	4a09      	ldr	r2, [pc, #36]	@ (800dbb0 <chk_lock+0xb4>)
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	011b      	lsls	r3, r3, #4
 800db90:	4413      	add	r3, r2
 800db92:	330c      	adds	r3, #12
 800db94:	881b      	ldrh	r3, [r3, #0]
 800db96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db9a:	d101      	bne.n	800dba0 <chk_lock+0xa4>
 800db9c:	2310      	movs	r3, #16
 800db9e:	e000      	b.n	800dba2 <chk_lock+0xa6>
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3714      	adds	r7, #20
 800dba6:	46bd      	mov	sp, r7
 800dba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop
 800dbb0:	20014744 	.word	0x20014744

0800dbb4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b083      	sub	sp, #12
 800dbb8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	607b      	str	r3, [r7, #4]
 800dbbe:	e002      	b.n	800dbc6 <enq_lock+0x12>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	607b      	str	r3, [r7, #4]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d806      	bhi.n	800dbda <enq_lock+0x26>
 800dbcc:	4a09      	ldr	r2, [pc, #36]	@ (800dbf4 <enq_lock+0x40>)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	011b      	lsls	r3, r3, #4
 800dbd2:	4413      	add	r3, r2
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d1f2      	bne.n	800dbc0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2b02      	cmp	r3, #2
 800dbde:	bf14      	ite	ne
 800dbe0:	2301      	movne	r3, #1
 800dbe2:	2300      	moveq	r3, #0
 800dbe4:	b2db      	uxtb	r3, r3
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	370c      	adds	r7, #12
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	20014744 	.word	0x20014744

0800dbf8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b085      	sub	sp, #20
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dc02:	2300      	movs	r3, #0
 800dc04:	60fb      	str	r3, [r7, #12]
 800dc06:	e01f      	b.n	800dc48 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800dc08:	4a41      	ldr	r2, [pc, #260]	@ (800dd10 <inc_lock+0x118>)
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	011b      	lsls	r3, r3, #4
 800dc0e:	4413      	add	r3, r2
 800dc10:	681a      	ldr	r2, [r3, #0]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d113      	bne.n	800dc42 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800dc1a:	4a3d      	ldr	r2, [pc, #244]	@ (800dd10 <inc_lock+0x118>)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	011b      	lsls	r3, r3, #4
 800dc20:	4413      	add	r3, r2
 800dc22:	3304      	adds	r3, #4
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d109      	bne.n	800dc42 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800dc2e:	4a38      	ldr	r2, [pc, #224]	@ (800dd10 <inc_lock+0x118>)
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	011b      	lsls	r3, r3, #4
 800dc34:	4413      	add	r3, r2
 800dc36:	3308      	adds	r3, #8
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d006      	beq.n	800dc50 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	3301      	adds	r3, #1
 800dc46:	60fb      	str	r3, [r7, #12]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d9dc      	bls.n	800dc08 <inc_lock+0x10>
 800dc4e:	e000      	b.n	800dc52 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800dc50:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2b02      	cmp	r3, #2
 800dc56:	d132      	bne.n	800dcbe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	60fb      	str	r3, [r7, #12]
 800dc5c:	e002      	b.n	800dc64 <inc_lock+0x6c>
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	3301      	adds	r3, #1
 800dc62:	60fb      	str	r3, [r7, #12]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d806      	bhi.n	800dc78 <inc_lock+0x80>
 800dc6a:	4a29      	ldr	r2, [pc, #164]	@ (800dd10 <inc_lock+0x118>)
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	011b      	lsls	r3, r3, #4
 800dc70:	4413      	add	r3, r2
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1f2      	bne.n	800dc5e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	2b02      	cmp	r3, #2
 800dc7c:	d101      	bne.n	800dc82 <inc_lock+0x8a>
 800dc7e:	2300      	movs	r3, #0
 800dc80:	e040      	b.n	800dd04 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	4922      	ldr	r1, [pc, #136]	@ (800dd10 <inc_lock+0x118>)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	011b      	lsls	r3, r3, #4
 800dc8c:	440b      	add	r3, r1
 800dc8e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	689a      	ldr	r2, [r3, #8]
 800dc94:	491e      	ldr	r1, [pc, #120]	@ (800dd10 <inc_lock+0x118>)
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	011b      	lsls	r3, r3, #4
 800dc9a:	440b      	add	r3, r1
 800dc9c:	3304      	adds	r3, #4
 800dc9e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	695a      	ldr	r2, [r3, #20]
 800dca4:	491a      	ldr	r1, [pc, #104]	@ (800dd10 <inc_lock+0x118>)
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	011b      	lsls	r3, r3, #4
 800dcaa:	440b      	add	r3, r1
 800dcac:	3308      	adds	r3, #8
 800dcae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800dcb0:	4a17      	ldr	r2, [pc, #92]	@ (800dd10 <inc_lock+0x118>)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	011b      	lsls	r3, r3, #4
 800dcb6:	4413      	add	r3, r2
 800dcb8:	330c      	adds	r3, #12
 800dcba:	2200      	movs	r2, #0
 800dcbc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d009      	beq.n	800dcd8 <inc_lock+0xe0>
 800dcc4:	4a12      	ldr	r2, [pc, #72]	@ (800dd10 <inc_lock+0x118>)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	011b      	lsls	r3, r3, #4
 800dcca:	4413      	add	r3, r2
 800dccc:	330c      	adds	r3, #12
 800dcce:	881b      	ldrh	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d001      	beq.n	800dcd8 <inc_lock+0xe0>
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	e015      	b.n	800dd04 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d108      	bne.n	800dcf0 <inc_lock+0xf8>
 800dcde:	4a0c      	ldr	r2, [pc, #48]	@ (800dd10 <inc_lock+0x118>)
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	011b      	lsls	r3, r3, #4
 800dce4:	4413      	add	r3, r2
 800dce6:	330c      	adds	r3, #12
 800dce8:	881b      	ldrh	r3, [r3, #0]
 800dcea:	3301      	adds	r3, #1
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	e001      	b.n	800dcf4 <inc_lock+0xfc>
 800dcf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dcf4:	4906      	ldr	r1, [pc, #24]	@ (800dd10 <inc_lock+0x118>)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	011b      	lsls	r3, r3, #4
 800dcfa:	440b      	add	r3, r1
 800dcfc:	330c      	adds	r3, #12
 800dcfe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	3301      	adds	r3, #1
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3714      	adds	r7, #20
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	20014744 	.word	0x20014744

0800dd14 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	3b01      	subs	r3, #1
 800dd20:	607b      	str	r3, [r7, #4]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d825      	bhi.n	800dd74 <dec_lock+0x60>
		n = Files[i].ctr;
 800dd28:	4a17      	ldr	r2, [pc, #92]	@ (800dd88 <dec_lock+0x74>)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	011b      	lsls	r3, r3, #4
 800dd2e:	4413      	add	r3, r2
 800dd30:	330c      	adds	r3, #12
 800dd32:	881b      	ldrh	r3, [r3, #0]
 800dd34:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800dd36:	89fb      	ldrh	r3, [r7, #14]
 800dd38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd3c:	d101      	bne.n	800dd42 <dec_lock+0x2e>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800dd42:	89fb      	ldrh	r3, [r7, #14]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d002      	beq.n	800dd4e <dec_lock+0x3a>
 800dd48:	89fb      	ldrh	r3, [r7, #14]
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800dd4e:	4a0e      	ldr	r2, [pc, #56]	@ (800dd88 <dec_lock+0x74>)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	011b      	lsls	r3, r3, #4
 800dd54:	4413      	add	r3, r2
 800dd56:	330c      	adds	r3, #12
 800dd58:	89fa      	ldrh	r2, [r7, #14]
 800dd5a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800dd5c:	89fb      	ldrh	r3, [r7, #14]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d105      	bne.n	800dd6e <dec_lock+0x5a>
 800dd62:	4a09      	ldr	r2, [pc, #36]	@ (800dd88 <dec_lock+0x74>)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	011b      	lsls	r3, r3, #4
 800dd68:	4413      	add	r3, r2
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800dd6e:	2300      	movs	r3, #0
 800dd70:	737b      	strb	r3, [r7, #13]
 800dd72:	e001      	b.n	800dd78 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800dd74:	2302      	movs	r3, #2
 800dd76:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800dd78:	7b7b      	ldrb	r3, [r7, #13]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3714      	adds	r7, #20
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop
 800dd88:	20014744 	.word	0x20014744

0800dd8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b085      	sub	sp, #20
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800dd94:	2300      	movs	r3, #0
 800dd96:	60fb      	str	r3, [r7, #12]
 800dd98:	e010      	b.n	800ddbc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dd9a:	4a0d      	ldr	r2, [pc, #52]	@ (800ddd0 <clear_lock+0x44>)
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	011b      	lsls	r3, r3, #4
 800dda0:	4413      	add	r3, r2
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d105      	bne.n	800ddb6 <clear_lock+0x2a>
 800ddaa:	4a09      	ldr	r2, [pc, #36]	@ (800ddd0 <clear_lock+0x44>)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	011b      	lsls	r3, r3, #4
 800ddb0:	4413      	add	r3, r2
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	3301      	adds	r3, #1
 800ddba:	60fb      	str	r3, [r7, #12]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2b01      	cmp	r3, #1
 800ddc0:	d9eb      	bls.n	800dd9a <clear_lock+0xe>
	}
}
 800ddc2:	bf00      	nop
 800ddc4:	bf00      	nop
 800ddc6:	3714      	adds	r7, #20
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr
 800ddd0:	20014744 	.word	0x20014744

0800ddd4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b086      	sub	sp, #24
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dddc:	2300      	movs	r3, #0
 800ddde:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	78db      	ldrb	r3, [r3, #3]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d034      	beq.n	800de52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	7858      	ldrb	r0, [r3, #1]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	697a      	ldr	r2, [r7, #20]
 800ddfc:	f7ff fd40 	bl	800d880 <disk_write>
 800de00:	4603      	mov	r3, r0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d002      	beq.n	800de0c <sync_window+0x38>
			res = FR_DISK_ERR;
 800de06:	2301      	movs	r3, #1
 800de08:	73fb      	strb	r3, [r7, #15]
 800de0a:	e022      	b.n	800de52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2200      	movs	r2, #0
 800de10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6a1b      	ldr	r3, [r3, #32]
 800de16:	697a      	ldr	r2, [r7, #20]
 800de18:	1ad2      	subs	r2, r2, r3
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	699b      	ldr	r3, [r3, #24]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d217      	bcs.n	800de52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	789b      	ldrb	r3, [r3, #2]
 800de26:	613b      	str	r3, [r7, #16]
 800de28:	e010      	b.n	800de4c <sync_window+0x78>
					wsect += fs->fsize;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	699b      	ldr	r3, [r3, #24]
 800de2e:	697a      	ldr	r2, [r7, #20]
 800de30:	4413      	add	r3, r2
 800de32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	7858      	ldrb	r0, [r3, #1]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800de3e:	2301      	movs	r3, #1
 800de40:	697a      	ldr	r2, [r7, #20]
 800de42:	f7ff fd1d 	bl	800d880 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	3b01      	subs	r3, #1
 800de4a:	613b      	str	r3, [r7, #16]
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d8eb      	bhi.n	800de2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800de52:	7bfb      	ldrb	r3, [r7, #15]
}
 800de54:	4618      	mov	r0, r3
 800de56:	3718      	adds	r7, #24
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800de66:	2300      	movs	r3, #0
 800de68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de6e:	683a      	ldr	r2, [r7, #0]
 800de70:	429a      	cmp	r2, r3
 800de72:	d01b      	beq.n	800deac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f7ff ffad 	bl	800ddd4 <sync_window>
 800de7a:	4603      	mov	r3, r0
 800de7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800de7e:	7bfb      	ldrb	r3, [r7, #15]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d113      	bne.n	800deac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	7858      	ldrb	r0, [r3, #1]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800de8e:	2301      	movs	r3, #1
 800de90:	683a      	ldr	r2, [r7, #0]
 800de92:	f7ff fcd5 	bl	800d840 <disk_read>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d004      	beq.n	800dea6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800de9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dea0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dea2:	2301      	movs	r3, #1
 800dea4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	683a      	ldr	r2, [r7, #0]
 800deaa:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800deac:	7bfb      	ldrb	r3, [r7, #15]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3710      	adds	r7, #16
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
	...

0800deb8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f7ff ff87 	bl	800ddd4 <sync_window>
 800dec6:	4603      	mov	r3, r0
 800dec8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800deca:	7bfb      	ldrb	r3, [r7, #15]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d158      	bne.n	800df82 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	2b03      	cmp	r3, #3
 800ded6:	d148      	bne.n	800df6a <sync_fs+0xb2>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	791b      	ldrb	r3, [r3, #4]
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d144      	bne.n	800df6a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	3330      	adds	r3, #48	@ 0x30
 800dee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dee8:	2100      	movs	r1, #0
 800deea:	4618      	mov	r0, r3
 800deec:	f7ff fda9 	bl	800da42 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	3330      	adds	r3, #48	@ 0x30
 800def4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800def8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800defc:	4618      	mov	r0, r3
 800defe:	f7ff fd38 	bl	800d972 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	3330      	adds	r3, #48	@ 0x30
 800df06:	4921      	ldr	r1, [pc, #132]	@ (800df8c <sync_fs+0xd4>)
 800df08:	4618      	mov	r0, r3
 800df0a:	f7ff fd4d 	bl	800d9a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	3330      	adds	r3, #48	@ 0x30
 800df12:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800df16:	491e      	ldr	r1, [pc, #120]	@ (800df90 <sync_fs+0xd8>)
 800df18:	4618      	mov	r0, r3
 800df1a:	f7ff fd45 	bl	800d9a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	3330      	adds	r3, #48	@ 0x30
 800df22:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	691b      	ldr	r3, [r3, #16]
 800df2a:	4619      	mov	r1, r3
 800df2c:	4610      	mov	r0, r2
 800df2e:	f7ff fd3b 	bl	800d9a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	3330      	adds	r3, #48	@ 0x30
 800df36:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	4619      	mov	r1, r3
 800df40:	4610      	mov	r0, r2
 800df42:	f7ff fd31 	bl	800d9a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	69db      	ldr	r3, [r3, #28]
 800df4a:	1c5a      	adds	r2, r3, #1
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	7858      	ldrb	r0, [r3, #1]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df5e:	2301      	movs	r3, #1
 800df60:	f7ff fc8e 	bl	800d880 <disk_write>
			fs->fsi_flag = 0;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2200      	movs	r2, #0
 800df68:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	785b      	ldrb	r3, [r3, #1]
 800df6e:	2200      	movs	r2, #0
 800df70:	2100      	movs	r1, #0
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff fca4 	bl	800d8c0 <disk_ioctl>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d001      	beq.n	800df82 <sync_fs+0xca>
 800df7e:	2301      	movs	r3, #1
 800df80:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800df82:	7bfb      	ldrb	r3, [r7, #15]
}
 800df84:	4618      	mov	r0, r3
 800df86:	3710      	adds	r7, #16
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	41615252 	.word	0x41615252
 800df90:	61417272 	.word	0x61417272

0800df94 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	3b02      	subs	r3, #2
 800dfa2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	695b      	ldr	r3, [r3, #20]
 800dfa8:	3b02      	subs	r3, #2
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d301      	bcc.n	800dfb4 <clust2sect+0x20>
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	e008      	b.n	800dfc6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	895b      	ldrh	r3, [r3, #10]
 800dfb8:	461a      	mov	r2, r3
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	fb03 f202 	mul.w	r2, r3, r2
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfc4:	4413      	add	r3, r2
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	370c      	adds	r7, #12
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr

0800dfd2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b086      	sub	sp, #24
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
 800dfda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d904      	bls.n	800dff2 <get_fat+0x20>
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	695b      	ldr	r3, [r3, #20]
 800dfec:	683a      	ldr	r2, [r7, #0]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d302      	bcc.n	800dff8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800dff2:	2301      	movs	r3, #1
 800dff4:	617b      	str	r3, [r7, #20]
 800dff6:	e08e      	b.n	800e116 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dff8:	f04f 33ff 	mov.w	r3, #4294967295
 800dffc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	2b03      	cmp	r3, #3
 800e004:	d061      	beq.n	800e0ca <get_fat+0xf8>
 800e006:	2b03      	cmp	r3, #3
 800e008:	dc7b      	bgt.n	800e102 <get_fat+0x130>
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d002      	beq.n	800e014 <get_fat+0x42>
 800e00e:	2b02      	cmp	r3, #2
 800e010:	d041      	beq.n	800e096 <get_fat+0xc4>
 800e012:	e076      	b.n	800e102 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	60fb      	str	r3, [r7, #12]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	085b      	lsrs	r3, r3, #1
 800e01c:	68fa      	ldr	r2, [r7, #12]
 800e01e:	4413      	add	r3, r2
 800e020:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	6a1a      	ldr	r2, [r3, #32]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	0a5b      	lsrs	r3, r3, #9
 800e02a:	4413      	add	r3, r2
 800e02c:	4619      	mov	r1, r3
 800e02e:	6938      	ldr	r0, [r7, #16]
 800e030:	f7ff ff14 	bl	800de5c <move_window>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d166      	bne.n	800e108 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	1c5a      	adds	r2, r3, #1
 800e03e:	60fa      	str	r2, [r7, #12]
 800e040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e044:	693a      	ldr	r2, [r7, #16]
 800e046:	4413      	add	r3, r2
 800e048:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e04c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	6a1a      	ldr	r2, [r3, #32]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	0a5b      	lsrs	r3, r3, #9
 800e056:	4413      	add	r3, r2
 800e058:	4619      	mov	r1, r3
 800e05a:	6938      	ldr	r0, [r7, #16]
 800e05c:	f7ff fefe 	bl	800de5c <move_window>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d152      	bne.n	800e10c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e06c:	693a      	ldr	r2, [r7, #16]
 800e06e:	4413      	add	r3, r2
 800e070:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e074:	021b      	lsls	r3, r3, #8
 800e076:	68ba      	ldr	r2, [r7, #8]
 800e078:	4313      	orrs	r3, r2
 800e07a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	f003 0301 	and.w	r3, r3, #1
 800e082:	2b00      	cmp	r3, #0
 800e084:	d002      	beq.n	800e08c <get_fat+0xba>
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	091b      	lsrs	r3, r3, #4
 800e08a:	e002      	b.n	800e092 <get_fat+0xc0>
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e092:	617b      	str	r3, [r7, #20]
			break;
 800e094:	e03f      	b.n	800e116 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	6a1a      	ldr	r2, [r3, #32]
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	0a1b      	lsrs	r3, r3, #8
 800e09e:	4413      	add	r3, r2
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	6938      	ldr	r0, [r7, #16]
 800e0a4:	f7ff feda 	bl	800de5c <move_window>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d130      	bne.n	800e110 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	005b      	lsls	r3, r3, #1
 800e0b8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e0bc:	4413      	add	r3, r2
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7ff fc1c 	bl	800d8fc <ld_word>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	617b      	str	r3, [r7, #20]
			break;
 800e0c8:	e025      	b.n	800e116 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	6a1a      	ldr	r2, [r3, #32]
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	09db      	lsrs	r3, r3, #7
 800e0d2:	4413      	add	r3, r2
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	6938      	ldr	r0, [r7, #16]
 800e0d8:	f7ff fec0 	bl	800de5c <move_window>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d118      	bne.n	800e114 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e0f0:	4413      	add	r3, r2
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7ff fc1a 	bl	800d92c <ld_dword>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e0fe:	617b      	str	r3, [r7, #20]
			break;
 800e100:	e009      	b.n	800e116 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e102:	2301      	movs	r3, #1
 800e104:	617b      	str	r3, [r7, #20]
 800e106:	e006      	b.n	800e116 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e108:	bf00      	nop
 800e10a:	e004      	b.n	800e116 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e10c:	bf00      	nop
 800e10e:	e002      	b.n	800e116 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e110:	bf00      	nop
 800e112:	e000      	b.n	800e116 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e114:	bf00      	nop
		}
	}

	return val;
 800e116:	697b      	ldr	r3, [r7, #20]
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3718      	adds	r7, #24
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e120:	b590      	push	{r4, r7, lr}
 800e122:	b089      	sub	sp, #36	@ 0x24
 800e124:	af00      	add	r7, sp, #0
 800e126:	60f8      	str	r0, [r7, #12]
 800e128:	60b9      	str	r1, [r7, #8]
 800e12a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e12c:	2302      	movs	r3, #2
 800e12e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	2b01      	cmp	r3, #1
 800e134:	f240 80d9 	bls.w	800e2ea <put_fat+0x1ca>
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	695b      	ldr	r3, [r3, #20]
 800e13c:	68ba      	ldr	r2, [r7, #8]
 800e13e:	429a      	cmp	r2, r3
 800e140:	f080 80d3 	bcs.w	800e2ea <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	2b03      	cmp	r3, #3
 800e14a:	f000 8096 	beq.w	800e27a <put_fat+0x15a>
 800e14e:	2b03      	cmp	r3, #3
 800e150:	f300 80cb 	bgt.w	800e2ea <put_fat+0x1ca>
 800e154:	2b01      	cmp	r3, #1
 800e156:	d002      	beq.n	800e15e <put_fat+0x3e>
 800e158:	2b02      	cmp	r3, #2
 800e15a:	d06e      	beq.n	800e23a <put_fat+0x11a>
 800e15c:	e0c5      	b.n	800e2ea <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	61bb      	str	r3, [r7, #24]
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	085b      	lsrs	r3, r3, #1
 800e166:	69ba      	ldr	r2, [r7, #24]
 800e168:	4413      	add	r3, r2
 800e16a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	6a1a      	ldr	r2, [r3, #32]
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	0a5b      	lsrs	r3, r3, #9
 800e174:	4413      	add	r3, r2
 800e176:	4619      	mov	r1, r3
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	f7ff fe6f 	bl	800de5c <move_window>
 800e17e:	4603      	mov	r3, r0
 800e180:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e182:	7ffb      	ldrb	r3, [r7, #31]
 800e184:	2b00      	cmp	r3, #0
 800e186:	f040 80a9 	bne.w	800e2dc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e190:	69bb      	ldr	r3, [r7, #24]
 800e192:	1c59      	adds	r1, r3, #1
 800e194:	61b9      	str	r1, [r7, #24]
 800e196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e19a:	4413      	add	r3, r2
 800e19c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	f003 0301 	and.w	r3, r3, #1
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d00d      	beq.n	800e1c4 <put_fat+0xa4>
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	b25b      	sxtb	r3, r3
 800e1ae:	f003 030f 	and.w	r3, r3, #15
 800e1b2:	b25a      	sxtb	r2, r3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	011b      	lsls	r3, r3, #4
 800e1ba:	b25b      	sxtb	r3, r3
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	b25b      	sxtb	r3, r3
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	e001      	b.n	800e1c8 <put_fat+0xa8>
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	697a      	ldr	r2, [r7, #20]
 800e1ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6a1a      	ldr	r2, [r3, #32]
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	0a5b      	lsrs	r3, r3, #9
 800e1da:	4413      	add	r3, r2
 800e1dc:	4619      	mov	r1, r3
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	f7ff fe3c 	bl	800de5c <move_window>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e1e8:	7ffb      	ldrb	r3, [r7, #31]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d178      	bne.n	800e2e0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e1f4:	69bb      	ldr	r3, [r7, #24]
 800e1f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1fa:	4413      	add	r3, r2
 800e1fc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	f003 0301 	and.w	r3, r3, #1
 800e204:	2b00      	cmp	r3, #0
 800e206:	d003      	beq.n	800e210 <put_fat+0xf0>
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	091b      	lsrs	r3, r3, #4
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	e00e      	b.n	800e22e <put_fat+0x10e>
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	b25b      	sxtb	r3, r3
 800e216:	f023 030f 	bic.w	r3, r3, #15
 800e21a:	b25a      	sxtb	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	0a1b      	lsrs	r3, r3, #8
 800e220:	b25b      	sxtb	r3, r3
 800e222:	f003 030f 	and.w	r3, r3, #15
 800e226:	b25b      	sxtb	r3, r3
 800e228:	4313      	orrs	r3, r2
 800e22a:	b25b      	sxtb	r3, r3
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	697a      	ldr	r2, [r7, #20]
 800e230:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2201      	movs	r2, #1
 800e236:	70da      	strb	r2, [r3, #3]
			break;
 800e238:	e057      	b.n	800e2ea <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	6a1a      	ldr	r2, [r3, #32]
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	0a1b      	lsrs	r3, r3, #8
 800e242:	4413      	add	r3, r2
 800e244:	4619      	mov	r1, r3
 800e246:	68f8      	ldr	r0, [r7, #12]
 800e248:	f7ff fe08 	bl	800de5c <move_window>
 800e24c:	4603      	mov	r3, r0
 800e24e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e250:	7ffb      	ldrb	r3, [r7, #31]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d146      	bne.n	800e2e4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	005b      	lsls	r3, r3, #1
 800e260:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e264:	4413      	add	r3, r2
 800e266:	687a      	ldr	r2, [r7, #4]
 800e268:	b292      	uxth	r2, r2
 800e26a:	4611      	mov	r1, r2
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7ff fb80 	bl	800d972 <st_word>
			fs->wflag = 1;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	2201      	movs	r2, #1
 800e276:	70da      	strb	r2, [r3, #3]
			break;
 800e278:	e037      	b.n	800e2ea <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	6a1a      	ldr	r2, [r3, #32]
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	09db      	lsrs	r3, r3, #7
 800e282:	4413      	add	r3, r2
 800e284:	4619      	mov	r1, r3
 800e286:	68f8      	ldr	r0, [r7, #12]
 800e288:	f7ff fde8 	bl	800de5c <move_window>
 800e28c:	4603      	mov	r3, r0
 800e28e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e290:	7ffb      	ldrb	r3, [r7, #31]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d128      	bne.n	800e2e8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e2aa:	4413      	add	r3, r2
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7ff fb3d 	bl	800d92c <ld_dword>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800e2b8:	4323      	orrs	r3, r4
 800e2ba:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e2ca:	4413      	add	r3, r2
 800e2cc:	6879      	ldr	r1, [r7, #4]
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7ff fb6a 	bl	800d9a8 <st_dword>
			fs->wflag = 1;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	70da      	strb	r2, [r3, #3]
			break;
 800e2da:	e006      	b.n	800e2ea <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e2dc:	bf00      	nop
 800e2de:	e004      	b.n	800e2ea <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e2e0:	bf00      	nop
 800e2e2:	e002      	b.n	800e2ea <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e2e4:	bf00      	nop
 800e2e6:	e000      	b.n	800e2ea <put_fat+0x1ca>
			if (res != FR_OK) break;
 800e2e8:	bf00      	nop
		}
	}
	return res;
 800e2ea:	7ffb      	ldrb	r3, [r7, #31]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3724      	adds	r7, #36	@ 0x24
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd90      	pop	{r4, r7, pc}

0800e2f4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b088      	sub	sp, #32
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	60b9      	str	r1, [r7, #8]
 800e2fe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e300:	2300      	movs	r3, #0
 800e302:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d904      	bls.n	800e31a <remove_chain+0x26>
 800e310:	69bb      	ldr	r3, [r7, #24]
 800e312:	695b      	ldr	r3, [r3, #20]
 800e314:	68ba      	ldr	r2, [r7, #8]
 800e316:	429a      	cmp	r2, r3
 800e318:	d301      	bcc.n	800e31e <remove_chain+0x2a>
 800e31a:	2302      	movs	r3, #2
 800e31c:	e04b      	b.n	800e3b6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00c      	beq.n	800e33e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e324:	f04f 32ff 	mov.w	r2, #4294967295
 800e328:	6879      	ldr	r1, [r7, #4]
 800e32a:	69b8      	ldr	r0, [r7, #24]
 800e32c:	f7ff fef8 	bl	800e120 <put_fat>
 800e330:	4603      	mov	r3, r0
 800e332:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e334:	7ffb      	ldrb	r3, [r7, #31]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <remove_chain+0x4a>
 800e33a:	7ffb      	ldrb	r3, [r7, #31]
 800e33c:	e03b      	b.n	800e3b6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e33e:	68b9      	ldr	r1, [r7, #8]
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f7ff fe46 	bl	800dfd2 <get_fat>
 800e346:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d031      	beq.n	800e3b2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d101      	bne.n	800e358 <remove_chain+0x64>
 800e354:	2302      	movs	r3, #2
 800e356:	e02e      	b.n	800e3b6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e35e:	d101      	bne.n	800e364 <remove_chain+0x70>
 800e360:	2301      	movs	r3, #1
 800e362:	e028      	b.n	800e3b6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e364:	2200      	movs	r2, #0
 800e366:	68b9      	ldr	r1, [r7, #8]
 800e368:	69b8      	ldr	r0, [r7, #24]
 800e36a:	f7ff fed9 	bl	800e120 <put_fat>
 800e36e:	4603      	mov	r3, r0
 800e370:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e372:	7ffb      	ldrb	r3, [r7, #31]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d001      	beq.n	800e37c <remove_chain+0x88>
 800e378:	7ffb      	ldrb	r3, [r7, #31]
 800e37a:	e01c      	b.n	800e3b6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	691a      	ldr	r2, [r3, #16]
 800e380:	69bb      	ldr	r3, [r7, #24]
 800e382:	695b      	ldr	r3, [r3, #20]
 800e384:	3b02      	subs	r3, #2
 800e386:	429a      	cmp	r2, r3
 800e388:	d20b      	bcs.n	800e3a2 <remove_chain+0xae>
			fs->free_clst++;
 800e38a:	69bb      	ldr	r3, [r7, #24]
 800e38c:	691b      	ldr	r3, [r3, #16]
 800e38e:	1c5a      	adds	r2, r3, #1
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800e394:	69bb      	ldr	r3, [r7, #24]
 800e396:	791b      	ldrb	r3, [r3, #4]
 800e398:	f043 0301 	orr.w	r3, r3, #1
 800e39c:	b2da      	uxtb	r2, r3
 800e39e:	69bb      	ldr	r3, [r7, #24]
 800e3a0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	695b      	ldr	r3, [r3, #20]
 800e3aa:	68ba      	ldr	r2, [r7, #8]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d3c6      	bcc.n	800e33e <remove_chain+0x4a>
 800e3b0:	e000      	b.n	800e3b4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e3b2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e3b4:	2300      	movs	r3, #0
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3720      	adds	r7, #32
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b088      	sub	sp, #32
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
 800e3c6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d10d      	bne.n	800e3f0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e3da:	69bb      	ldr	r3, [r7, #24]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d004      	beq.n	800e3ea <create_chain+0x2c>
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	695b      	ldr	r3, [r3, #20]
 800e3e4:	69ba      	ldr	r2, [r7, #24]
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d31b      	bcc.n	800e422 <create_chain+0x64>
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	61bb      	str	r3, [r7, #24]
 800e3ee:	e018      	b.n	800e422 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e3f0:	6839      	ldr	r1, [r7, #0]
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f7ff fded 	bl	800dfd2 <get_fat>
 800e3f8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	d801      	bhi.n	800e404 <create_chain+0x46>
 800e400:	2301      	movs	r3, #1
 800e402:	e070      	b.n	800e4e6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40a:	d101      	bne.n	800e410 <create_chain+0x52>
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	e06a      	b.n	800e4e6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	695b      	ldr	r3, [r3, #20]
 800e414:	68fa      	ldr	r2, [r7, #12]
 800e416:	429a      	cmp	r2, r3
 800e418:	d201      	bcs.n	800e41e <create_chain+0x60>
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	e063      	b.n	800e4e6 <create_chain+0x128>
		scl = clst;
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	3301      	adds	r3, #1
 800e42a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	695b      	ldr	r3, [r3, #20]
 800e430:	69fa      	ldr	r2, [r7, #28]
 800e432:	429a      	cmp	r2, r3
 800e434:	d307      	bcc.n	800e446 <create_chain+0x88>
				ncl = 2;
 800e436:	2302      	movs	r3, #2
 800e438:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e43a:	69fa      	ldr	r2, [r7, #28]
 800e43c:	69bb      	ldr	r3, [r7, #24]
 800e43e:	429a      	cmp	r2, r3
 800e440:	d901      	bls.n	800e446 <create_chain+0x88>
 800e442:	2300      	movs	r3, #0
 800e444:	e04f      	b.n	800e4e6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e446:	69f9      	ldr	r1, [r7, #28]
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f7ff fdc2 	bl	800dfd2 <get_fat>
 800e44e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d00e      	beq.n	800e474 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d003      	beq.n	800e464 <create_chain+0xa6>
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e462:	d101      	bne.n	800e468 <create_chain+0xaa>
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	e03e      	b.n	800e4e6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e468:	69fa      	ldr	r2, [r7, #28]
 800e46a:	69bb      	ldr	r3, [r7, #24]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d1da      	bne.n	800e426 <create_chain+0x68>
 800e470:	2300      	movs	r3, #0
 800e472:	e038      	b.n	800e4e6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e474:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e476:	f04f 32ff 	mov.w	r2, #4294967295
 800e47a:	69f9      	ldr	r1, [r7, #28]
 800e47c:	6938      	ldr	r0, [r7, #16]
 800e47e:	f7ff fe4f 	bl	800e120 <put_fat>
 800e482:	4603      	mov	r3, r0
 800e484:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e486:	7dfb      	ldrb	r3, [r7, #23]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d109      	bne.n	800e4a0 <create_chain+0xe2>
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d006      	beq.n	800e4a0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e492:	69fa      	ldr	r2, [r7, #28]
 800e494:	6839      	ldr	r1, [r7, #0]
 800e496:	6938      	ldr	r0, [r7, #16]
 800e498:	f7ff fe42 	bl	800e120 <put_fat>
 800e49c:	4603      	mov	r3, r0
 800e49e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e4a0:	7dfb      	ldrb	r3, [r7, #23]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d116      	bne.n	800e4d4 <create_chain+0x116>
		fs->last_clst = ncl;
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	69fa      	ldr	r2, [r7, #28]
 800e4aa:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	691a      	ldr	r2, [r3, #16]
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	695b      	ldr	r3, [r3, #20]
 800e4b4:	3b02      	subs	r3, #2
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d804      	bhi.n	800e4c4 <create_chain+0x106>
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	691b      	ldr	r3, [r3, #16]
 800e4be:	1e5a      	subs	r2, r3, #1
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	791b      	ldrb	r3, [r3, #4]
 800e4c8:	f043 0301 	orr.w	r3, r3, #1
 800e4cc:	b2da      	uxtb	r2, r3
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	711a      	strb	r2, [r3, #4]
 800e4d2:	e007      	b.n	800e4e4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e4d4:	7dfb      	ldrb	r3, [r7, #23]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d102      	bne.n	800e4e0 <create_chain+0x122>
 800e4da:	f04f 33ff 	mov.w	r3, #4294967295
 800e4de:	e000      	b.n	800e4e2 <create_chain+0x124>
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e4e4:	69fb      	ldr	r3, [r7, #28]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3720      	adds	r7, #32
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e4ee:	b480      	push	{r7}
 800e4f0:	b087      	sub	sp, #28
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
 800e4f6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e502:	3304      	adds	r3, #4
 800e504:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	0a5b      	lsrs	r3, r3, #9
 800e50a:	68fa      	ldr	r2, [r7, #12]
 800e50c:	8952      	ldrh	r2, [r2, #10]
 800e50e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e512:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	1d1a      	adds	r2, r3, #4
 800e518:	613a      	str	r2, [r7, #16]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d101      	bne.n	800e528 <clmt_clust+0x3a>
 800e524:	2300      	movs	r3, #0
 800e526:	e010      	b.n	800e54a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d307      	bcc.n	800e540 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e530:	697a      	ldr	r2, [r7, #20]
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	1ad3      	subs	r3, r2, r3
 800e536:	617b      	str	r3, [r7, #20]
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	3304      	adds	r3, #4
 800e53c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e53e:	e7e9      	b.n	800e514 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e540:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	4413      	add	r3, r2
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	371c      	adds	r7, #28
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr

0800e556 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e556:	b580      	push	{r7, lr}
 800e558:	b086      	sub	sp, #24
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	6078      	str	r0, [r7, #4]
 800e55e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e56c:	d204      	bcs.n	800e578 <dir_sdi+0x22>
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	f003 031f 	and.w	r3, r3, #31
 800e574:	2b00      	cmp	r3, #0
 800e576:	d001      	beq.n	800e57c <dir_sdi+0x26>
		return FR_INT_ERR;
 800e578:	2302      	movs	r3, #2
 800e57a:	e063      	b.n	800e644 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	683a      	ldr	r2, [r7, #0]
 800e580:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	689b      	ldr	r3, [r3, #8]
 800e586:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d106      	bne.n	800e59c <dir_sdi+0x46>
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	2b02      	cmp	r3, #2
 800e594:	d902      	bls.n	800e59c <dir_sdi+0x46>
		clst = fs->dirbase;
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e59a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d10c      	bne.n	800e5bc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	095b      	lsrs	r3, r3, #5
 800e5a6:	693a      	ldr	r2, [r7, #16]
 800e5a8:	8912      	ldrh	r2, [r2, #8]
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d301      	bcc.n	800e5b2 <dir_sdi+0x5c>
 800e5ae:	2302      	movs	r3, #2
 800e5b0:	e048      	b.n	800e644 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	61da      	str	r2, [r3, #28]
 800e5ba:	e029      	b.n	800e610 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	895b      	ldrh	r3, [r3, #10]
 800e5c0:	025b      	lsls	r3, r3, #9
 800e5c2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e5c4:	e019      	b.n	800e5fa <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6979      	ldr	r1, [r7, #20]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7ff fd01 	bl	800dfd2 <get_fat>
 800e5d0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5d8:	d101      	bne.n	800e5de <dir_sdi+0x88>
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e032      	b.n	800e644 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d904      	bls.n	800e5ee <dir_sdi+0x98>
 800e5e4:	693b      	ldr	r3, [r7, #16]
 800e5e6:	695b      	ldr	r3, [r3, #20]
 800e5e8:	697a      	ldr	r2, [r7, #20]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d301      	bcc.n	800e5f2 <dir_sdi+0x9c>
 800e5ee:	2302      	movs	r3, #2
 800e5f0:	e028      	b.n	800e644 <dir_sdi+0xee>
			ofs -= csz;
 800e5f2:	683a      	ldr	r2, [r7, #0]
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e5fa:	683a      	ldr	r2, [r7, #0]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d2e1      	bcs.n	800e5c6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e602:	6979      	ldr	r1, [r7, #20]
 800e604:	6938      	ldr	r0, [r7, #16]
 800e606:	f7ff fcc5 	bl	800df94 <clust2sect>
 800e60a:	4602      	mov	r2, r0
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	697a      	ldr	r2, [r7, #20]
 800e614:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	69db      	ldr	r3, [r3, #28]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d101      	bne.n	800e622 <dir_sdi+0xcc>
 800e61e:	2302      	movs	r3, #2
 800e620:	e010      	b.n	800e644 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	69da      	ldr	r2, [r3, #28]
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	0a5b      	lsrs	r3, r3, #9
 800e62a:	441a      	add	r2, r3
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e63c:	441a      	add	r2, r3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e642:	2300      	movs	r3, #0
}
 800e644:	4618      	mov	r0, r3
 800e646:	3718      	adds	r7, #24
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b086      	sub	sp, #24
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	695b      	ldr	r3, [r3, #20]
 800e660:	3320      	adds	r3, #32
 800e662:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	69db      	ldr	r3, [r3, #28]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d003      	beq.n	800e674 <dir_next+0x28>
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e672:	d301      	bcc.n	800e678 <dir_next+0x2c>
 800e674:	2304      	movs	r3, #4
 800e676:	e0aa      	b.n	800e7ce <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e67e:	2b00      	cmp	r3, #0
 800e680:	f040 8098 	bne.w	800e7b4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	69db      	ldr	r3, [r3, #28]
 800e688:	1c5a      	adds	r2, r3, #1
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	699b      	ldr	r3, [r3, #24]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d10b      	bne.n	800e6ae <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	095b      	lsrs	r3, r3, #5
 800e69a:	68fa      	ldr	r2, [r7, #12]
 800e69c:	8912      	ldrh	r2, [r2, #8]
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	f0c0 8088 	bcc.w	800e7b4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	61da      	str	r2, [r3, #28]
 800e6aa:	2304      	movs	r3, #4
 800e6ac:	e08f      	b.n	800e7ce <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	0a5b      	lsrs	r3, r3, #9
 800e6b2:	68fa      	ldr	r2, [r7, #12]
 800e6b4:	8952      	ldrh	r2, [r2, #10]
 800e6b6:	3a01      	subs	r2, #1
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d17a      	bne.n	800e7b4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e6be:	687a      	ldr	r2, [r7, #4]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	699b      	ldr	r3, [r3, #24]
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	4610      	mov	r0, r2
 800e6c8:	f7ff fc83 	bl	800dfd2 <get_fat>
 800e6cc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d801      	bhi.n	800e6d8 <dir_next+0x8c>
 800e6d4:	2302      	movs	r3, #2
 800e6d6:	e07a      	b.n	800e7ce <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6de:	d101      	bne.n	800e6e4 <dir_next+0x98>
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	e074      	b.n	800e7ce <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	695b      	ldr	r3, [r3, #20]
 800e6e8:	697a      	ldr	r2, [r7, #20]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d358      	bcc.n	800e7a0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d104      	bne.n	800e6fe <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	61da      	str	r2, [r3, #28]
 800e6fa:	2304      	movs	r3, #4
 800e6fc:	e067      	b.n	800e7ce <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	699b      	ldr	r3, [r3, #24]
 800e704:	4619      	mov	r1, r3
 800e706:	4610      	mov	r0, r2
 800e708:	f7ff fe59 	bl	800e3be <create_chain>
 800e70c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d101      	bne.n	800e718 <dir_next+0xcc>
 800e714:	2307      	movs	r3, #7
 800e716:	e05a      	b.n	800e7ce <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	2b01      	cmp	r3, #1
 800e71c:	d101      	bne.n	800e722 <dir_next+0xd6>
 800e71e:	2302      	movs	r3, #2
 800e720:	e055      	b.n	800e7ce <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e728:	d101      	bne.n	800e72e <dir_next+0xe2>
 800e72a:	2301      	movs	r3, #1
 800e72c:	e04f      	b.n	800e7ce <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e72e:	68f8      	ldr	r0, [r7, #12]
 800e730:	f7ff fb50 	bl	800ddd4 <sync_window>
 800e734:	4603      	mov	r3, r0
 800e736:	2b00      	cmp	r3, #0
 800e738:	d001      	beq.n	800e73e <dir_next+0xf2>
 800e73a:	2301      	movs	r3, #1
 800e73c:	e047      	b.n	800e7ce <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	3330      	adds	r3, #48	@ 0x30
 800e742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e746:	2100      	movs	r1, #0
 800e748:	4618      	mov	r0, r3
 800e74a:	f7ff f97a 	bl	800da42 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e74e:	2300      	movs	r3, #0
 800e750:	613b      	str	r3, [r7, #16]
 800e752:	6979      	ldr	r1, [r7, #20]
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f7ff fc1d 	bl	800df94 <clust2sect>
 800e75a:	4602      	mov	r2, r0
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e760:	e012      	b.n	800e788 <dir_next+0x13c>
						fs->wflag = 1;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2201      	movs	r2, #1
 800e766:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	f7ff fb33 	bl	800ddd4 <sync_window>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	d001      	beq.n	800e778 <dir_next+0x12c>
 800e774:	2301      	movs	r3, #1
 800e776:	e02a      	b.n	800e7ce <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	3301      	adds	r3, #1
 800e77c:	613b      	str	r3, [r7, #16]
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e782:	1c5a      	adds	r2, r3, #1
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	895b      	ldrh	r3, [r3, #10]
 800e78c:	461a      	mov	r2, r3
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	4293      	cmp	r3, r2
 800e792:	d3e6      	bcc.n	800e762 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	1ad2      	subs	r2, r2, r3
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	697a      	ldr	r2, [r7, #20]
 800e7a4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e7a6:	6979      	ldr	r1, [r7, #20]
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	f7ff fbf3 	bl	800df94 <clust2sect>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	68ba      	ldr	r2, [r7, #8]
 800e7b8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7c6:	441a      	add	r2, r3
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e7cc:	2300      	movs	r3, #0
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3718      	adds	r7, #24
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}

0800e7d6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e7d6:	b580      	push	{r7, lr}
 800e7d8:	b086      	sub	sp, #24
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]
 800e7de:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e7e6:	2100      	movs	r1, #0
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f7ff feb4 	bl	800e556 <dir_sdi>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e7f2:	7dfb      	ldrb	r3, [r7, #23]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d12b      	bne.n	800e850 <dir_alloc+0x7a>
		n = 0;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	69db      	ldr	r3, [r3, #28]
 800e800:	4619      	mov	r1, r3
 800e802:	68f8      	ldr	r0, [r7, #12]
 800e804:	f7ff fb2a 	bl	800de5c <move_window>
 800e808:	4603      	mov	r3, r0
 800e80a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e80c:	7dfb      	ldrb	r3, [r7, #23]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d11d      	bne.n	800e84e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6a1b      	ldr	r3, [r3, #32]
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	2be5      	cmp	r3, #229	@ 0xe5
 800e81a:	d004      	beq.n	800e826 <dir_alloc+0x50>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6a1b      	ldr	r3, [r3, #32]
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d107      	bne.n	800e836 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	3301      	adds	r3, #1
 800e82a:	613b      	str	r3, [r7, #16]
 800e82c:	693a      	ldr	r2, [r7, #16]
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	429a      	cmp	r2, r3
 800e832:	d102      	bne.n	800e83a <dir_alloc+0x64>
 800e834:	e00c      	b.n	800e850 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e836:	2300      	movs	r3, #0
 800e838:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e83a:	2101      	movs	r1, #1
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f7ff ff05 	bl	800e64c <dir_next>
 800e842:	4603      	mov	r3, r0
 800e844:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e846:	7dfb      	ldrb	r3, [r7, #23]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d0d7      	beq.n	800e7fc <dir_alloc+0x26>
 800e84c:	e000      	b.n	800e850 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e84e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e850:	7dfb      	ldrb	r3, [r7, #23]
 800e852:	2b04      	cmp	r3, #4
 800e854:	d101      	bne.n	800e85a <dir_alloc+0x84>
 800e856:	2307      	movs	r3, #7
 800e858:	75fb      	strb	r3, [r7, #23]
	return res;
 800e85a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3718      	adds	r7, #24
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	331a      	adds	r3, #26
 800e872:	4618      	mov	r0, r3
 800e874:	f7ff f842 	bl	800d8fc <ld_word>
 800e878:	4603      	mov	r3, r0
 800e87a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	2b03      	cmp	r3, #3
 800e882:	d109      	bne.n	800e898 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	3314      	adds	r3, #20
 800e888:	4618      	mov	r0, r3
 800e88a:	f7ff f837 	bl	800d8fc <ld_word>
 800e88e:	4603      	mov	r3, r0
 800e890:	041b      	lsls	r3, r3, #16
 800e892:	68fa      	ldr	r2, [r7, #12]
 800e894:	4313      	orrs	r3, r2
 800e896:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e898:	68fb      	ldr	r3, [r7, #12]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b084      	sub	sp, #16
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	60f8      	str	r0, [r7, #12]
 800e8aa:	60b9      	str	r1, [r7, #8]
 800e8ac:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	331a      	adds	r3, #26
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	b292      	uxth	r2, r2
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7ff f85a 	bl	800d972 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	2b03      	cmp	r3, #3
 800e8c4:	d109      	bne.n	800e8da <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	f103 0214 	add.w	r2, r3, #20
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	0c1b      	lsrs	r3, r3, #16
 800e8d0:	b29b      	uxth	r3, r3
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	4610      	mov	r0, r2
 800e8d6:	f7ff f84c 	bl	800d972 <st_word>
	}
}
 800e8da:	bf00      	nop
 800e8dc:	3710      	adds	r7, #16
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e8e2:	b580      	push	{r7, lr}
 800e8e4:	b086      	sub	sp, #24
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
 800e8ea:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e8ec:	2304      	movs	r3, #4
 800e8ee:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800e8f6:	e03c      	b.n	800e972 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	69db      	ldr	r3, [r3, #28]
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	6938      	ldr	r0, [r7, #16]
 800e900:	f7ff faac 	bl	800de5c <move_window>
 800e904:	4603      	mov	r3, r0
 800e906:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e908:	7dfb      	ldrb	r3, [r7, #23]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d136      	bne.n	800e97c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6a1b      	ldr	r3, [r3, #32]
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800e916:	7bfb      	ldrb	r3, [r7, #15]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d102      	bne.n	800e922 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e91c:	2304      	movs	r3, #4
 800e91e:	75fb      	strb	r3, [r7, #23]
 800e920:	e031      	b.n	800e986 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6a1b      	ldr	r3, [r3, #32]
 800e926:	330b      	adds	r3, #11
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e92e:	73bb      	strb	r3, [r7, #14]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	7bba      	ldrb	r2, [r7, #14]
 800e934:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800e936:	7bfb      	ldrb	r3, [r7, #15]
 800e938:	2be5      	cmp	r3, #229	@ 0xe5
 800e93a:	d011      	beq.n	800e960 <dir_read+0x7e>
 800e93c:	7bfb      	ldrb	r3, [r7, #15]
 800e93e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e940:	d00e      	beq.n	800e960 <dir_read+0x7e>
 800e942:	7bbb      	ldrb	r3, [r7, #14]
 800e944:	2b0f      	cmp	r3, #15
 800e946:	d00b      	beq.n	800e960 <dir_read+0x7e>
 800e948:	7bbb      	ldrb	r3, [r7, #14]
 800e94a:	f023 0320 	bic.w	r3, r3, #32
 800e94e:	2b08      	cmp	r3, #8
 800e950:	bf0c      	ite	eq
 800e952:	2301      	moveq	r3, #1
 800e954:	2300      	movne	r3, #0
 800e956:	b2db      	uxtb	r3, r3
 800e958:	461a      	mov	r2, r3
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d00f      	beq.n	800e980 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e960:	2100      	movs	r1, #0
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f7ff fe72 	bl	800e64c <dir_next>
 800e968:	4603      	mov	r3, r0
 800e96a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e96c:	7dfb      	ldrb	r3, [r7, #23]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d108      	bne.n	800e984 <dir_read+0xa2>
	while (dp->sect) {
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	69db      	ldr	r3, [r3, #28]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d1be      	bne.n	800e8f8 <dir_read+0x16>
 800e97a:	e004      	b.n	800e986 <dir_read+0xa4>
		if (res != FR_OK) break;
 800e97c:	bf00      	nop
 800e97e:	e002      	b.n	800e986 <dir_read+0xa4>
				break;
 800e980:	bf00      	nop
 800e982:	e000      	b.n	800e986 <dir_read+0xa4>
		if (res != FR_OK) break;
 800e984:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e986:	7dfb      	ldrb	r3, [r7, #23]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d002      	beq.n	800e992 <dir_read+0xb0>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2200      	movs	r2, #0
 800e990:	61da      	str	r2, [r3, #28]
	return res;
 800e992:	7dfb      	ldrb	r3, [r7, #23]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3718      	adds	r7, #24
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b086      	sub	sp, #24
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e9aa:	2100      	movs	r1, #0
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f7ff fdd2 	bl	800e556 <dir_sdi>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e9b6:	7dfb      	ldrb	r3, [r7, #23]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d001      	beq.n	800e9c0 <dir_find+0x24>
 800e9bc:	7dfb      	ldrb	r3, [r7, #23]
 800e9be:	e03e      	b.n	800ea3e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	69db      	ldr	r3, [r3, #28]
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	6938      	ldr	r0, [r7, #16]
 800e9c8:	f7ff fa48 	bl	800de5c <move_window>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e9d0:	7dfb      	ldrb	r3, [r7, #23]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d12f      	bne.n	800ea36 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a1b      	ldr	r3, [r3, #32]
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e9de:	7bfb      	ldrb	r3, [r7, #15]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d102      	bne.n	800e9ea <dir_find+0x4e>
 800e9e4:	2304      	movs	r3, #4
 800e9e6:	75fb      	strb	r3, [r7, #23]
 800e9e8:	e028      	b.n	800ea3c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6a1b      	ldr	r3, [r3, #32]
 800e9ee:	330b      	adds	r3, #11
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e9f6:	b2da      	uxtb	r2, r3
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6a1b      	ldr	r3, [r3, #32]
 800ea00:	330b      	adds	r3, #11
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	f003 0308 	and.w	r3, r3, #8
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d10a      	bne.n	800ea22 <dir_find+0x86>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6a18      	ldr	r0, [r3, #32]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	3324      	adds	r3, #36	@ 0x24
 800ea14:	220b      	movs	r2, #11
 800ea16:	4619      	mov	r1, r3
 800ea18:	f7ff f82e 	bl	800da78 <mem_cmp>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d00b      	beq.n	800ea3a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ea22:	2100      	movs	r1, #0
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7ff fe11 	bl	800e64c <dir_next>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ea2e:	7dfb      	ldrb	r3, [r7, #23]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d0c5      	beq.n	800e9c0 <dir_find+0x24>
 800ea34:	e002      	b.n	800ea3c <dir_find+0xa0>
		if (res != FR_OK) break;
 800ea36:	bf00      	nop
 800ea38:	e000      	b.n	800ea3c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ea3a:	bf00      	nop

	return res;
 800ea3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3718      	adds	r7, #24
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}

0800ea46 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b084      	sub	sp, #16
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ea54:	2101      	movs	r1, #1
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f7ff febd 	bl	800e7d6 <dir_alloc>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ea60:	7bfb      	ldrb	r3, [r7, #15]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d11c      	bne.n	800eaa0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	69db      	ldr	r3, [r3, #28]
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	68b8      	ldr	r0, [r7, #8]
 800ea6e:	f7ff f9f5 	bl	800de5c <move_window>
 800ea72:	4603      	mov	r3, r0
 800ea74:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ea76:	7bfb      	ldrb	r3, [r7, #15]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d111      	bne.n	800eaa0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6a1b      	ldr	r3, [r3, #32]
 800ea80:	2220      	movs	r2, #32
 800ea82:	2100      	movs	r1, #0
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fe ffdc 	bl	800da42 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6a18      	ldr	r0, [r3, #32]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	3324      	adds	r3, #36	@ 0x24
 800ea92:	220b      	movs	r2, #11
 800ea94:	4619      	mov	r1, r3
 800ea96:	f7fe ffb3 	bl	800da00 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	2201      	movs	r2, #1
 800ea9e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800eaa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}

0800eaaa <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b084      	sub	sp, #16
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	69db      	ldr	r3, [r3, #28]
 800eabc:	4619      	mov	r1, r3
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f7ff f9cc 	bl	800de5c <move_window>
 800eac4:	4603      	mov	r3, r0
 800eac6:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800eac8:	7afb      	ldrb	r3, [r7, #11]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d106      	bne.n	800eadc <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6a1b      	ldr	r3, [r3, #32]
 800ead2:	22e5      	movs	r2, #229	@ 0xe5
 800ead4:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2201      	movs	r2, #1
 800eada:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800eadc:	7afb      	ldrb	r3, [r7, #11]
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3710      	adds	r7, #16
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
	...

0800eae8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b088      	sub	sp, #32
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	60fb      	str	r3, [r7, #12]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	3324      	adds	r3, #36	@ 0x24
 800eafc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800eafe:	220b      	movs	r2, #11
 800eb00:	2120      	movs	r1, #32
 800eb02:	68b8      	ldr	r0, [r7, #8]
 800eb04:	f7fe ff9d 	bl	800da42 <mem_set>
	si = i = 0; ni = 8;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	613b      	str	r3, [r7, #16]
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	61fb      	str	r3, [r7, #28]
 800eb10:	2308      	movs	r3, #8
 800eb12:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	1c5a      	adds	r2, r3, #1
 800eb18:	61fa      	str	r2, [r7, #28]
 800eb1a:	68fa      	ldr	r2, [r7, #12]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800eb22:	7efb      	ldrb	r3, [r7, #27]
 800eb24:	2b20      	cmp	r3, #32
 800eb26:	d94e      	bls.n	800ebc6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800eb28:	7efb      	ldrb	r3, [r7, #27]
 800eb2a:	2b2f      	cmp	r3, #47	@ 0x2f
 800eb2c:	d006      	beq.n	800eb3c <create_name+0x54>
 800eb2e:	7efb      	ldrb	r3, [r7, #27]
 800eb30:	2b5c      	cmp	r3, #92	@ 0x5c
 800eb32:	d110      	bne.n	800eb56 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eb34:	e002      	b.n	800eb3c <create_name+0x54>
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	3301      	adds	r3, #1
 800eb3a:	61fb      	str	r3, [r7, #28]
 800eb3c:	68fa      	ldr	r2, [r7, #12]
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	4413      	add	r3, r2
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	2b2f      	cmp	r3, #47	@ 0x2f
 800eb46:	d0f6      	beq.n	800eb36 <create_name+0x4e>
 800eb48:	68fa      	ldr	r2, [r7, #12]
 800eb4a:	69fb      	ldr	r3, [r7, #28]
 800eb4c:	4413      	add	r3, r2
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	2b5c      	cmp	r3, #92	@ 0x5c
 800eb52:	d0f0      	beq.n	800eb36 <create_name+0x4e>
			break;
 800eb54:	e038      	b.n	800ebc8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800eb56:	7efb      	ldrb	r3, [r7, #27]
 800eb58:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb5a:	d003      	beq.n	800eb64 <create_name+0x7c>
 800eb5c:	693a      	ldr	r2, [r7, #16]
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d30c      	bcc.n	800eb7e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	2b0b      	cmp	r3, #11
 800eb68:	d002      	beq.n	800eb70 <create_name+0x88>
 800eb6a:	7efb      	ldrb	r3, [r7, #27]
 800eb6c:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb6e:	d001      	beq.n	800eb74 <create_name+0x8c>
 800eb70:	2306      	movs	r3, #6
 800eb72:	e044      	b.n	800ebfe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800eb74:	2308      	movs	r3, #8
 800eb76:	613b      	str	r3, [r7, #16]
 800eb78:	230b      	movs	r3, #11
 800eb7a:	617b      	str	r3, [r7, #20]
			continue;
 800eb7c:	e022      	b.n	800ebc4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800eb7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	da04      	bge.n	800eb90 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800eb86:	7efb      	ldrb	r3, [r7, #27]
 800eb88:	3b80      	subs	r3, #128	@ 0x80
 800eb8a:	4a1f      	ldr	r2, [pc, #124]	@ (800ec08 <create_name+0x120>)
 800eb8c:	5cd3      	ldrb	r3, [r2, r3]
 800eb8e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800eb90:	7efb      	ldrb	r3, [r7, #27]
 800eb92:	4619      	mov	r1, r3
 800eb94:	481d      	ldr	r0, [pc, #116]	@ (800ec0c <create_name+0x124>)
 800eb96:	f7fe ff96 	bl	800dac6 <chk_chr>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d001      	beq.n	800eba4 <create_name+0xbc>
 800eba0:	2306      	movs	r3, #6
 800eba2:	e02c      	b.n	800ebfe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800eba4:	7efb      	ldrb	r3, [r7, #27]
 800eba6:	2b60      	cmp	r3, #96	@ 0x60
 800eba8:	d905      	bls.n	800ebb6 <create_name+0xce>
 800ebaa:	7efb      	ldrb	r3, [r7, #27]
 800ebac:	2b7a      	cmp	r3, #122	@ 0x7a
 800ebae:	d802      	bhi.n	800ebb6 <create_name+0xce>
 800ebb0:	7efb      	ldrb	r3, [r7, #27]
 800ebb2:	3b20      	subs	r3, #32
 800ebb4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	1c5a      	adds	r2, r3, #1
 800ebba:	613a      	str	r2, [r7, #16]
 800ebbc:	68ba      	ldr	r2, [r7, #8]
 800ebbe:	4413      	add	r3, r2
 800ebc0:	7efa      	ldrb	r2, [r7, #27]
 800ebc2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ebc4:	e7a6      	b.n	800eb14 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ebc6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ebc8:	68fa      	ldr	r2, [r7, #12]
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	441a      	add	r2, r3
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d101      	bne.n	800ebdc <create_name+0xf4>
 800ebd8:	2306      	movs	r3, #6
 800ebda:	e010      	b.n	800ebfe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	2be5      	cmp	r3, #229	@ 0xe5
 800ebe2:	d102      	bne.n	800ebea <create_name+0x102>
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	2205      	movs	r2, #5
 800ebe8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ebea:	7efb      	ldrb	r3, [r7, #27]
 800ebec:	2b20      	cmp	r3, #32
 800ebee:	d801      	bhi.n	800ebf4 <create_name+0x10c>
 800ebf0:	2204      	movs	r2, #4
 800ebf2:	e000      	b.n	800ebf6 <create_name+0x10e>
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	330b      	adds	r3, #11
 800ebfa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ebfc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3720      	adds	r7, #32
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	080119e8 	.word	0x080119e8
 800ec0c:	08010c10 	.word	0x08010c10

0800ec10 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b086      	sub	sp, #24
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ec24:	e002      	b.n	800ec2c <follow_path+0x1c>
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	603b      	str	r3, [r7, #0]
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	2b2f      	cmp	r3, #47	@ 0x2f
 800ec32:	d0f8      	beq.n	800ec26 <follow_path+0x16>
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	2b5c      	cmp	r3, #92	@ 0x5c
 800ec3a:	d0f4      	beq.n	800ec26 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	2b1f      	cmp	r3, #31
 800ec48:	d80a      	bhi.n	800ec60 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2280      	movs	r2, #128	@ 0x80
 800ec4e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ec52:	2100      	movs	r1, #0
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f7ff fc7e 	bl	800e556 <dir_sdi>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	75fb      	strb	r3, [r7, #23]
 800ec5e:	e043      	b.n	800ece8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ec60:	463b      	mov	r3, r7
 800ec62:	4619      	mov	r1, r3
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f7ff ff3f 	bl	800eae8 <create_name>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ec6e:	7dfb      	ldrb	r3, [r7, #23]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d134      	bne.n	800ecde <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7ff fe91 	bl	800e99c <dir_find>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ec84:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ec86:	7dfb      	ldrb	r3, [r7, #23]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d00a      	beq.n	800eca2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ec8c:	7dfb      	ldrb	r3, [r7, #23]
 800ec8e:	2b04      	cmp	r3, #4
 800ec90:	d127      	bne.n	800ece2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ec92:	7afb      	ldrb	r3, [r7, #11]
 800ec94:	f003 0304 	and.w	r3, r3, #4
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d122      	bne.n	800ece2 <follow_path+0xd2>
 800ec9c:	2305      	movs	r3, #5
 800ec9e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eca0:	e01f      	b.n	800ece2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eca2:	7afb      	ldrb	r3, [r7, #11]
 800eca4:	f003 0304 	and.w	r3, r3, #4
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d11c      	bne.n	800ece6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	799b      	ldrb	r3, [r3, #6]
 800ecb0:	f003 0310 	and.w	r3, r3, #16
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d102      	bne.n	800ecbe <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ecb8:	2305      	movs	r3, #5
 800ecba:	75fb      	strb	r3, [r7, #23]
 800ecbc:	e014      	b.n	800ece8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	695b      	ldr	r3, [r3, #20]
 800ecc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eccc:	4413      	add	r3, r2
 800ecce:	4619      	mov	r1, r3
 800ecd0:	68f8      	ldr	r0, [r7, #12]
 800ecd2:	f7ff fdc7 	bl	800e864 <ld_clust>
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ecdc:	e7c0      	b.n	800ec60 <follow_path+0x50>
			if (res != FR_OK) break;
 800ecde:	bf00      	nop
 800ece0:	e002      	b.n	800ece8 <follow_path+0xd8>
				break;
 800ece2:	bf00      	nop
 800ece4:	e000      	b.n	800ece8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ece6:	bf00      	nop
			}
		}
	}

	return res;
 800ece8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3718      	adds	r7, #24
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}

0800ecf2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ecf2:	b480      	push	{r7}
 800ecf4:	b087      	sub	sp, #28
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ecfa:	f04f 33ff 	mov.w	r3, #4294967295
 800ecfe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d031      	beq.n	800ed6c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	617b      	str	r3, [r7, #20]
 800ed0e:	e002      	b.n	800ed16 <get_ldnumber+0x24>
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	3301      	adds	r3, #1
 800ed14:	617b      	str	r3, [r7, #20]
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	781b      	ldrb	r3, [r3, #0]
 800ed1a:	2b20      	cmp	r3, #32
 800ed1c:	d903      	bls.n	800ed26 <get_ldnumber+0x34>
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	2b3a      	cmp	r3, #58	@ 0x3a
 800ed24:	d1f4      	bne.n	800ed10 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	2b3a      	cmp	r3, #58	@ 0x3a
 800ed2c:	d11c      	bne.n	800ed68 <get_ldnumber+0x76>
			tp = *path;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	1c5a      	adds	r2, r3, #1
 800ed38:	60fa      	str	r2, [r7, #12]
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	3b30      	subs	r3, #48	@ 0x30
 800ed3e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	2b09      	cmp	r3, #9
 800ed44:	d80e      	bhi.n	800ed64 <get_ldnumber+0x72>
 800ed46:	68fa      	ldr	r2, [r7, #12]
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d10a      	bne.n	800ed64 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d107      	bne.n	800ed64 <get_ldnumber+0x72>
					vol = (int)i;
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	617b      	str	r3, [r7, #20]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	697a      	ldr	r2, [r7, #20]
 800ed62:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	e002      	b.n	800ed6e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ed68:	2300      	movs	r3, #0
 800ed6a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ed6c:	693b      	ldr	r3, [r7, #16]
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	371c      	adds	r7, #28
 800ed72:	46bd      	mov	sp, r7
 800ed74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed78:	4770      	bx	lr
	...

0800ed7c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	70da      	strb	r2, [r3, #3]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed92:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ed94:	6839      	ldr	r1, [r7, #0]
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f7ff f860 	bl	800de5c <move_window>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d001      	beq.n	800eda6 <check_fs+0x2a>
 800eda2:	2304      	movs	r3, #4
 800eda4:	e038      	b.n	800ee18 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	3330      	adds	r3, #48	@ 0x30
 800edaa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800edae:	4618      	mov	r0, r3
 800edb0:	f7fe fda4 	bl	800d8fc <ld_word>
 800edb4:	4603      	mov	r3, r0
 800edb6:	461a      	mov	r2, r3
 800edb8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d001      	beq.n	800edc4 <check_fs+0x48>
 800edc0:	2303      	movs	r3, #3
 800edc2:	e029      	b.n	800ee18 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800edca:	2be9      	cmp	r3, #233	@ 0xe9
 800edcc:	d009      	beq.n	800ede2 <check_fs+0x66>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800edd4:	2beb      	cmp	r3, #235	@ 0xeb
 800edd6:	d11e      	bne.n	800ee16 <check_fs+0x9a>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800edde:	2b90      	cmp	r3, #144	@ 0x90
 800ede0:	d119      	bne.n	800ee16 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	3330      	adds	r3, #48	@ 0x30
 800ede6:	3336      	adds	r3, #54	@ 0x36
 800ede8:	4618      	mov	r0, r3
 800edea:	f7fe fd9f 	bl	800d92c <ld_dword>
 800edee:	4603      	mov	r3, r0
 800edf0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800edf4:	4a0a      	ldr	r2, [pc, #40]	@ (800ee20 <check_fs+0xa4>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d101      	bne.n	800edfe <check_fs+0x82>
 800edfa:	2300      	movs	r3, #0
 800edfc:	e00c      	b.n	800ee18 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	3330      	adds	r3, #48	@ 0x30
 800ee02:	3352      	adds	r3, #82	@ 0x52
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fe fd91 	bl	800d92c <ld_dword>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	4a05      	ldr	r2, [pc, #20]	@ (800ee24 <check_fs+0xa8>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d101      	bne.n	800ee16 <check_fs+0x9a>
 800ee12:	2300      	movs	r3, #0
 800ee14:	e000      	b.n	800ee18 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ee16:	2302      	movs	r3, #2
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3708      	adds	r7, #8
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	00544146 	.word	0x00544146
 800ee24:	33544146 	.word	0x33544146

0800ee28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b096      	sub	sp, #88	@ 0x58
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	4613      	mov	r3, r2
 800ee34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ee3c:	68f8      	ldr	r0, [r7, #12]
 800ee3e:	f7ff ff58 	bl	800ecf2 <get_ldnumber>
 800ee42:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ee44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	da01      	bge.n	800ee4e <find_volume+0x26>
 800ee4a:	230b      	movs	r3, #11
 800ee4c:	e22d      	b.n	800f2aa <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ee4e:	4aa1      	ldr	r2, [pc, #644]	@ (800f0d4 <find_volume+0x2ac>)
 800ee50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee56:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ee58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d101      	bne.n	800ee62 <find_volume+0x3a>
 800ee5e:	230c      	movs	r3, #12
 800ee60:	e223      	b.n	800f2aa <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ee66:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ee68:	79fb      	ldrb	r3, [r7, #7]
 800ee6a:	f023 0301 	bic.w	r3, r3, #1
 800ee6e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ee70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d01a      	beq.n	800eeae <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ee78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee7a:	785b      	ldrb	r3, [r3, #1]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fe fc9d 	bl	800d7bc <disk_status>
 800ee82:	4603      	mov	r3, r0
 800ee84:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ee88:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ee8c:	f003 0301 	and.w	r3, r3, #1
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d10c      	bne.n	800eeae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ee94:	79fb      	ldrb	r3, [r7, #7]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d007      	beq.n	800eeaa <find_volume+0x82>
 800ee9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ee9e:	f003 0304 	and.w	r3, r3, #4
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d001      	beq.n	800eeaa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800eea6:	230a      	movs	r3, #10
 800eea8:	e1ff      	b.n	800f2aa <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800eeaa:	2300      	movs	r3, #0
 800eeac:	e1fd      	b.n	800f2aa <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800eeae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800eeb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eeb6:	b2da      	uxtb	r2, r3
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800eebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eebe:	785b      	ldrb	r3, [r3, #1]
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fe fc95 	bl	800d7f0 <disk_initialize>
 800eec6:	4603      	mov	r3, r0
 800eec8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800eecc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eed0:	f003 0301 	and.w	r3, r3, #1
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d001      	beq.n	800eedc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eed8:	2303      	movs	r3, #3
 800eeda:	e1e6      	b.n	800f2aa <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800eedc:	79fb      	ldrb	r3, [r7, #7]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d007      	beq.n	800eef2 <find_volume+0xca>
 800eee2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eee6:	f003 0304 	and.w	r3, r3, #4
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d001      	beq.n	800eef2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800eeee:	230a      	movs	r3, #10
 800eef0:	e1db      	b.n	800f2aa <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800eef2:	2300      	movs	r3, #0
 800eef4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800eef6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eef8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800eefa:	f7ff ff3f 	bl	800ed7c <check_fs>
 800eefe:	4603      	mov	r3, r0
 800ef00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ef04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ef08:	2b02      	cmp	r3, #2
 800ef0a:	d149      	bne.n	800efa0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef10:	e01e      	b.n	800ef50 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ef12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ef18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef1a:	011b      	lsls	r3, r3, #4
 800ef1c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ef20:	4413      	add	r3, r2
 800ef22:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ef24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef26:	3304      	adds	r3, #4
 800ef28:	781b      	ldrb	r3, [r3, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d006      	beq.n	800ef3c <find_volume+0x114>
 800ef2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef30:	3308      	adds	r3, #8
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fe fcfa 	bl	800d92c <ld_dword>
 800ef38:	4602      	mov	r2, r0
 800ef3a:	e000      	b.n	800ef3e <find_volume+0x116>
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	3358      	adds	r3, #88	@ 0x58
 800ef44:	443b      	add	r3, r7
 800ef46:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ef4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef52:	2b03      	cmp	r3, #3
 800ef54:	d9dd      	bls.n	800ef12 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ef56:	2300      	movs	r3, #0
 800ef58:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ef5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d002      	beq.n	800ef66 <find_volume+0x13e>
 800ef60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef62:	3b01      	subs	r3, #1
 800ef64:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ef66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef68:	009b      	lsls	r3, r3, #2
 800ef6a:	3358      	adds	r3, #88	@ 0x58
 800ef6c:	443b      	add	r3, r7
 800ef6e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ef72:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ef74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d005      	beq.n	800ef86 <find_volume+0x15e>
 800ef7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ef7c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ef7e:	f7ff fefd 	bl	800ed7c <check_fs>
 800ef82:	4603      	mov	r3, r0
 800ef84:	e000      	b.n	800ef88 <find_volume+0x160>
 800ef86:	2303      	movs	r3, #3
 800ef88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ef8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d905      	bls.n	800efa0 <find_volume+0x178>
 800ef94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef96:	3301      	adds	r3, #1
 800ef98:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef9c:	2b03      	cmp	r3, #3
 800ef9e:	d9e2      	bls.n	800ef66 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800efa0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800efa4:	2b04      	cmp	r3, #4
 800efa6:	d101      	bne.n	800efac <find_volume+0x184>
 800efa8:	2301      	movs	r3, #1
 800efaa:	e17e      	b.n	800f2aa <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800efac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d901      	bls.n	800efb8 <find_volume+0x190>
 800efb4:	230d      	movs	r3, #13
 800efb6:	e178      	b.n	800f2aa <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800efb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efba:	3330      	adds	r3, #48	@ 0x30
 800efbc:	330b      	adds	r3, #11
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7fe fc9c 	bl	800d8fc <ld_word>
 800efc4:	4603      	mov	r3, r0
 800efc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800efca:	d001      	beq.n	800efd0 <find_volume+0x1a8>
 800efcc:	230d      	movs	r3, #13
 800efce:	e16c      	b.n	800f2aa <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800efd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efd2:	3330      	adds	r3, #48	@ 0x30
 800efd4:	3316      	adds	r3, #22
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7fe fc90 	bl	800d8fc <ld_word>
 800efdc:	4603      	mov	r3, r0
 800efde:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800efe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d106      	bne.n	800eff4 <find_volume+0x1cc>
 800efe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efe8:	3330      	adds	r3, #48	@ 0x30
 800efea:	3324      	adds	r3, #36	@ 0x24
 800efec:	4618      	mov	r0, r3
 800efee:	f7fe fc9d 	bl	800d92c <ld_dword>
 800eff2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800eff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eff6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eff8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800effa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800effc:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800f000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f002:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f006:	789b      	ldrb	r3, [r3, #2]
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d005      	beq.n	800f018 <find_volume+0x1f0>
 800f00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f00e:	789b      	ldrb	r3, [r3, #2]
 800f010:	2b02      	cmp	r3, #2
 800f012:	d001      	beq.n	800f018 <find_volume+0x1f0>
 800f014:	230d      	movs	r3, #13
 800f016:	e148      	b.n	800f2aa <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f01a:	789b      	ldrb	r3, [r3, #2]
 800f01c:	461a      	mov	r2, r3
 800f01e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f020:	fb02 f303 	mul.w	r3, r2, r3
 800f024:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f02c:	461a      	mov	r2, r3
 800f02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f030:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f034:	895b      	ldrh	r3, [r3, #10]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d008      	beq.n	800f04c <find_volume+0x224>
 800f03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f03c:	895b      	ldrh	r3, [r3, #10]
 800f03e:	461a      	mov	r2, r3
 800f040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f042:	895b      	ldrh	r3, [r3, #10]
 800f044:	3b01      	subs	r3, #1
 800f046:	4013      	ands	r3, r2
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d001      	beq.n	800f050 <find_volume+0x228>
 800f04c:	230d      	movs	r3, #13
 800f04e:	e12c      	b.n	800f2aa <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f052:	3330      	adds	r3, #48	@ 0x30
 800f054:	3311      	adds	r3, #17
 800f056:	4618      	mov	r0, r3
 800f058:	f7fe fc50 	bl	800d8fc <ld_word>
 800f05c:	4603      	mov	r3, r0
 800f05e:	461a      	mov	r2, r3
 800f060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f062:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f066:	891b      	ldrh	r3, [r3, #8]
 800f068:	f003 030f 	and.w	r3, r3, #15
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d001      	beq.n	800f076 <find_volume+0x24e>
 800f072:	230d      	movs	r3, #13
 800f074:	e119      	b.n	800f2aa <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f078:	3330      	adds	r3, #48	@ 0x30
 800f07a:	3313      	adds	r3, #19
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7fe fc3d 	bl	800d8fc <ld_word>
 800f082:	4603      	mov	r3, r0
 800f084:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d106      	bne.n	800f09a <find_volume+0x272>
 800f08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f08e:	3330      	adds	r3, #48	@ 0x30
 800f090:	3320      	adds	r3, #32
 800f092:	4618      	mov	r0, r3
 800f094:	f7fe fc4a 	bl	800d92c <ld_dword>
 800f098:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f09c:	3330      	adds	r3, #48	@ 0x30
 800f09e:	330e      	adds	r3, #14
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7fe fc2b 	bl	800d8fc <ld_word>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f0aa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d101      	bne.n	800f0b4 <find_volume+0x28c>
 800f0b0:	230d      	movs	r3, #13
 800f0b2:	e0fa      	b.n	800f2aa <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f0b4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f0b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0b8:	4413      	add	r3, r2
 800f0ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f0bc:	8912      	ldrh	r2, [r2, #8]
 800f0be:	0912      	lsrs	r2, r2, #4
 800f0c0:	b292      	uxth	r2, r2
 800f0c2:	4413      	add	r3, r2
 800f0c4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f0c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d204      	bcs.n	800f0d8 <find_volume+0x2b0>
 800f0ce:	230d      	movs	r3, #13
 800f0d0:	e0eb      	b.n	800f2aa <find_volume+0x482>
 800f0d2:	bf00      	nop
 800f0d4:	2001473c 	.word	0x2001473c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f0d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f0da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0dc:	1ad3      	subs	r3, r2, r3
 800f0de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f0e0:	8952      	ldrh	r2, [r2, #10]
 800f0e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0e6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d101      	bne.n	800f0f2 <find_volume+0x2ca>
 800f0ee:	230d      	movs	r3, #13
 800f0f0:	e0db      	b.n	800f2aa <find_volume+0x482>
		fmt = FS_FAT32;
 800f0f2:	2303      	movs	r3, #3
 800f0f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0fa:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d802      	bhi.n	800f108 <find_volume+0x2e0>
 800f102:	2302      	movs	r3, #2
 800f104:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f10a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f10e:	4293      	cmp	r3, r2
 800f110:	d802      	bhi.n	800f118 <find_volume+0x2f0>
 800f112:	2301      	movs	r3, #1
 800f114:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f11a:	1c9a      	adds	r2, r3, #2
 800f11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f11e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800f120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f122:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f124:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f126:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f12a:	441a      	add	r2, r3
 800f12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f12e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800f130:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f134:	441a      	add	r2, r3
 800f136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f138:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800f13a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f13e:	2b03      	cmp	r3, #3
 800f140:	d11e      	bne.n	800f180 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f144:	3330      	adds	r3, #48	@ 0x30
 800f146:	332a      	adds	r3, #42	@ 0x2a
 800f148:	4618      	mov	r0, r3
 800f14a:	f7fe fbd7 	bl	800d8fc <ld_word>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d001      	beq.n	800f158 <find_volume+0x330>
 800f154:	230d      	movs	r3, #13
 800f156:	e0a8      	b.n	800f2aa <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f15a:	891b      	ldrh	r3, [r3, #8]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d001      	beq.n	800f164 <find_volume+0x33c>
 800f160:	230d      	movs	r3, #13
 800f162:	e0a2      	b.n	800f2aa <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f166:	3330      	adds	r3, #48	@ 0x30
 800f168:	332c      	adds	r3, #44	@ 0x2c
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7fe fbde 	bl	800d92c <ld_dword>
 800f170:	4602      	mov	r2, r0
 800f172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f174:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f178:	695b      	ldr	r3, [r3, #20]
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f17e:	e01f      	b.n	800f1c0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f182:	891b      	ldrh	r3, [r3, #8]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d101      	bne.n	800f18c <find_volume+0x364>
 800f188:	230d      	movs	r3, #13
 800f18a:	e08e      	b.n	800f2aa <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f18e:	6a1a      	ldr	r2, [r3, #32]
 800f190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f192:	441a      	add	r2, r3
 800f194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f196:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f198:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f19c:	2b02      	cmp	r3, #2
 800f19e:	d103      	bne.n	800f1a8 <find_volume+0x380>
 800f1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1a2:	695b      	ldr	r3, [r3, #20]
 800f1a4:	005b      	lsls	r3, r3, #1
 800f1a6:	e00a      	b.n	800f1be <find_volume+0x396>
 800f1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1aa:	695a      	ldr	r2, [r3, #20]
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	005b      	lsls	r3, r3, #1
 800f1b0:	4413      	add	r3, r2
 800f1b2:	085a      	lsrs	r2, r3, #1
 800f1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1b6:	695b      	ldr	r3, [r3, #20]
 800f1b8:	f003 0301 	and.w	r3, r3, #1
 800f1bc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f1be:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c2:	699a      	ldr	r2, [r3, #24]
 800f1c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1c6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f1ca:	0a5b      	lsrs	r3, r3, #9
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d201      	bcs.n	800f1d4 <find_volume+0x3ac>
 800f1d0:	230d      	movs	r3, #13
 800f1d2:	e06a      	b.n	800f2aa <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f1da:	611a      	str	r2, [r3, #16]
 800f1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1de:	691a      	ldr	r2, [r3, #16]
 800f1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800f1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e6:	2280      	movs	r2, #128	@ 0x80
 800f1e8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f1ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f1ee:	2b03      	cmp	r3, #3
 800f1f0:	d149      	bne.n	800f286 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f4:	3330      	adds	r3, #48	@ 0x30
 800f1f6:	3330      	adds	r3, #48	@ 0x30
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7fe fb7f 	bl	800d8fc <ld_word>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b01      	cmp	r3, #1
 800f202:	d140      	bne.n	800f286 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f206:	3301      	adds	r3, #1
 800f208:	4619      	mov	r1, r3
 800f20a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f20c:	f7fe fe26 	bl	800de5c <move_window>
 800f210:	4603      	mov	r3, r0
 800f212:	2b00      	cmp	r3, #0
 800f214:	d137      	bne.n	800f286 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f218:	2200      	movs	r2, #0
 800f21a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f21e:	3330      	adds	r3, #48	@ 0x30
 800f220:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f224:	4618      	mov	r0, r3
 800f226:	f7fe fb69 	bl	800d8fc <ld_word>
 800f22a:	4603      	mov	r3, r0
 800f22c:	461a      	mov	r2, r3
 800f22e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f232:	429a      	cmp	r2, r3
 800f234:	d127      	bne.n	800f286 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f238:	3330      	adds	r3, #48	@ 0x30
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7fe fb76 	bl	800d92c <ld_dword>
 800f240:	4603      	mov	r3, r0
 800f242:	4a1c      	ldr	r2, [pc, #112]	@ (800f2b4 <find_volume+0x48c>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d11e      	bne.n	800f286 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f24a:	3330      	adds	r3, #48	@ 0x30
 800f24c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f250:	4618      	mov	r0, r3
 800f252:	f7fe fb6b 	bl	800d92c <ld_dword>
 800f256:	4603      	mov	r3, r0
 800f258:	4a17      	ldr	r2, [pc, #92]	@ (800f2b8 <find_volume+0x490>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d113      	bne.n	800f286 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f260:	3330      	adds	r3, #48	@ 0x30
 800f262:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f266:	4618      	mov	r0, r3
 800f268:	f7fe fb60 	bl	800d92c <ld_dword>
 800f26c:	4602      	mov	r2, r0
 800f26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f270:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f274:	3330      	adds	r3, #48	@ 0x30
 800f276:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7fe fb56 	bl	800d92c <ld_dword>
 800f280:	4602      	mov	r2, r0
 800f282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f284:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f288:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f28c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f28e:	4b0b      	ldr	r3, [pc, #44]	@ (800f2bc <find_volume+0x494>)
 800f290:	881b      	ldrh	r3, [r3, #0]
 800f292:	3301      	adds	r3, #1
 800f294:	b29a      	uxth	r2, r3
 800f296:	4b09      	ldr	r3, [pc, #36]	@ (800f2bc <find_volume+0x494>)
 800f298:	801a      	strh	r2, [r3, #0]
 800f29a:	4b08      	ldr	r3, [pc, #32]	@ (800f2bc <find_volume+0x494>)
 800f29c:	881a      	ldrh	r2, [r3, #0]
 800f29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2a0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f2a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f2a4:	f7fe fd72 	bl	800dd8c <clear_lock>
#endif
	return FR_OK;
 800f2a8:	2300      	movs	r3, #0
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3758      	adds	r7, #88	@ 0x58
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	41615252 	.word	0x41615252
 800f2b8:	61417272 	.word	0x61417272
 800f2bc:	20014740 	.word	0x20014740

0800f2c0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f2ca:	2309      	movs	r3, #9
 800f2cc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d01c      	beq.n	800f30e <validate+0x4e>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d018      	beq.n	800f30e <validate+0x4e>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d013      	beq.n	800f30e <validate+0x4e>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	889a      	ldrh	r2, [r3, #4]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	88db      	ldrh	r3, [r3, #6]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d10c      	bne.n	800f30e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	785b      	ldrb	r3, [r3, #1]
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7fe fa5e 	bl	800d7bc <disk_status>
 800f300:	4603      	mov	r3, r0
 800f302:	f003 0301 	and.w	r3, r3, #1
 800f306:	2b00      	cmp	r3, #0
 800f308:	d101      	bne.n	800f30e <validate+0x4e>
			res = FR_OK;
 800f30a:	2300      	movs	r3, #0
 800f30c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f30e:	7bfb      	ldrb	r3, [r7, #15]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d102      	bne.n	800f31a <validate+0x5a>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	e000      	b.n	800f31c <validate+0x5c>
 800f31a:	2300      	movs	r3, #0
 800f31c:	683a      	ldr	r2, [r7, #0]
 800f31e:	6013      	str	r3, [r2, #0]
	return res;
 800f320:	7bfb      	ldrb	r3, [r7, #15]
}
 800f322:	4618      	mov	r0, r3
 800f324:	3710      	adds	r7, #16
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
	...

0800f32c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b088      	sub	sp, #32
 800f330:	af00      	add	r7, sp, #0
 800f332:	60f8      	str	r0, [r7, #12]
 800f334:	60b9      	str	r1, [r7, #8]
 800f336:	4613      	mov	r3, r2
 800f338:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f33e:	f107 0310 	add.w	r3, r7, #16
 800f342:	4618      	mov	r0, r3
 800f344:	f7ff fcd5 	bl	800ecf2 <get_ldnumber>
 800f348:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	da01      	bge.n	800f354 <f_mount+0x28>
 800f350:	230b      	movs	r3, #11
 800f352:	e02b      	b.n	800f3ac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f354:	4a17      	ldr	r2, [pc, #92]	@ (800f3b4 <f_mount+0x88>)
 800f356:	69fb      	ldr	r3, [r7, #28]
 800f358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f35c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d005      	beq.n	800f370 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f364:	69b8      	ldr	r0, [r7, #24]
 800f366:	f7fe fd11 	bl	800dd8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f36a:	69bb      	ldr	r3, [r7, #24]
 800f36c:	2200      	movs	r2, #0
 800f36e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d002      	beq.n	800f37c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2200      	movs	r2, #0
 800f37a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f37c:	68fa      	ldr	r2, [r7, #12]
 800f37e:	490d      	ldr	r1, [pc, #52]	@ (800f3b4 <f_mount+0x88>)
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d002      	beq.n	800f392 <f_mount+0x66>
 800f38c:	79fb      	ldrb	r3, [r7, #7]
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d001      	beq.n	800f396 <f_mount+0x6a>
 800f392:	2300      	movs	r3, #0
 800f394:	e00a      	b.n	800f3ac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f396:	f107 010c 	add.w	r1, r7, #12
 800f39a:	f107 0308 	add.w	r3, r7, #8
 800f39e:	2200      	movs	r2, #0
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7ff fd41 	bl	800ee28 <find_volume>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f3aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3720      	adds	r7, #32
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	2001473c 	.word	0x2001473c

0800f3b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b098      	sub	sp, #96	@ 0x60
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	4613      	mov	r3, r2
 800f3c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d101      	bne.n	800f3d0 <f_open+0x18>
 800f3cc:	2309      	movs	r3, #9
 800f3ce:	e1a9      	b.n	800f724 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f3d0:	79fb      	ldrb	r3, [r7, #7]
 800f3d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f3d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f3d8:	79fa      	ldrb	r2, [r7, #7]
 800f3da:	f107 0110 	add.w	r1, r7, #16
 800f3de:	f107 0308 	add.w	r3, r7, #8
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7ff fd20 	bl	800ee28 <find_volume>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800f3ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	f040 818d 	bne.w	800f712 <f_open+0x35a>
		dj.obj.fs = fs;
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f3fc:	68ba      	ldr	r2, [r7, #8]
 800f3fe:	f107 0314 	add.w	r3, r7, #20
 800f402:	4611      	mov	r1, r2
 800f404:	4618      	mov	r0, r3
 800f406:	f7ff fc03 	bl	800ec10 <follow_path>
 800f40a:	4603      	mov	r3, r0
 800f40c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f410:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f414:	2b00      	cmp	r3, #0
 800f416:	d118      	bne.n	800f44a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f418:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800f41c:	b25b      	sxtb	r3, r3
 800f41e:	2b00      	cmp	r3, #0
 800f420:	da03      	bge.n	800f42a <f_open+0x72>
				res = FR_INVALID_NAME;
 800f422:	2306      	movs	r3, #6
 800f424:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800f428:	e00f      	b.n	800f44a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f42a:	79fb      	ldrb	r3, [r7, #7]
 800f42c:	2b01      	cmp	r3, #1
 800f42e:	bf8c      	ite	hi
 800f430:	2301      	movhi	r3, #1
 800f432:	2300      	movls	r3, #0
 800f434:	b2db      	uxtb	r3, r3
 800f436:	461a      	mov	r2, r3
 800f438:	f107 0314 	add.w	r3, r7, #20
 800f43c:	4611      	mov	r1, r2
 800f43e:	4618      	mov	r0, r3
 800f440:	f7fe fb5c 	bl	800dafc <chk_lock>
 800f444:	4603      	mov	r3, r0
 800f446:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f44a:	79fb      	ldrb	r3, [r7, #7]
 800f44c:	f003 031c 	and.w	r3, r3, #28
 800f450:	2b00      	cmp	r3, #0
 800f452:	d07f      	beq.n	800f554 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800f454:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d017      	beq.n	800f48c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f45c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f460:	2b04      	cmp	r3, #4
 800f462:	d10e      	bne.n	800f482 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f464:	f7fe fba6 	bl	800dbb4 <enq_lock>
 800f468:	4603      	mov	r3, r0
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d006      	beq.n	800f47c <f_open+0xc4>
 800f46e:	f107 0314 	add.w	r3, r7, #20
 800f472:	4618      	mov	r0, r3
 800f474:	f7ff fae7 	bl	800ea46 <dir_register>
 800f478:	4603      	mov	r3, r0
 800f47a:	e000      	b.n	800f47e <f_open+0xc6>
 800f47c:	2312      	movs	r3, #18
 800f47e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f482:	79fb      	ldrb	r3, [r7, #7]
 800f484:	f043 0308 	orr.w	r3, r3, #8
 800f488:	71fb      	strb	r3, [r7, #7]
 800f48a:	e010      	b.n	800f4ae <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f48c:	7ebb      	ldrb	r3, [r7, #26]
 800f48e:	f003 0311 	and.w	r3, r3, #17
 800f492:	2b00      	cmp	r3, #0
 800f494:	d003      	beq.n	800f49e <f_open+0xe6>
					res = FR_DENIED;
 800f496:	2307      	movs	r3, #7
 800f498:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800f49c:	e007      	b.n	800f4ae <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f49e:	79fb      	ldrb	r3, [r7, #7]
 800f4a0:	f003 0304 	and.w	r3, r3, #4
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d002      	beq.n	800f4ae <f_open+0xf6>
 800f4a8:	2308      	movs	r3, #8
 800f4aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f4ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d168      	bne.n	800f588 <f_open+0x1d0>
 800f4b6:	79fb      	ldrb	r3, [r7, #7]
 800f4b8:	f003 0308 	and.w	r3, r3, #8
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d063      	beq.n	800f588 <f_open+0x1d0>
				dw = GET_FATTIME();
 800f4c0:	f7fe f810 	bl	800d4e4 <get_fattime>
 800f4c4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f4c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4c8:	330e      	adds	r3, #14
 800f4ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7fe fa6b 	bl	800d9a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f4d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4d4:	3316      	adds	r3, #22
 800f4d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7fe fa65 	bl	800d9a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f4de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4e0:	330b      	adds	r3, #11
 800f4e2:	2220      	movs	r2, #32
 800f4e4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f4ea:	4611      	mov	r1, r2
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7ff f9b9 	bl	800e864 <ld_clust>
 800f4f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7ff f9d1 	bl	800e8a2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f502:	331c      	adds	r3, #28
 800f504:	2100      	movs	r1, #0
 800f506:	4618      	mov	r0, r3
 800f508:	f7fe fa4e 	bl	800d9a8 <st_dword>
					fs->wflag = 1;
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	2201      	movs	r2, #1
 800f510:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f514:	2b00      	cmp	r3, #0
 800f516:	d037      	beq.n	800f588 <f_open+0x1d0>
						dw = fs->winsect;
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f51c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f51e:	f107 0314 	add.w	r3, r7, #20
 800f522:	2200      	movs	r2, #0
 800f524:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800f526:	4618      	mov	r0, r3
 800f528:	f7fe fee4 	bl	800e2f4 <remove_chain>
 800f52c:	4603      	mov	r3, r0
 800f52e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800f532:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f536:	2b00      	cmp	r3, #0
 800f538:	d126      	bne.n	800f588 <f_open+0x1d0>
							res = move_window(fs, dw);
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fe fc8c 	bl	800de5c <move_window>
 800f544:	4603      	mov	r3, r0
 800f546:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f54e:	3a01      	subs	r2, #1
 800f550:	60da      	str	r2, [r3, #12]
 800f552:	e019      	b.n	800f588 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f554:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d115      	bne.n	800f588 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f55c:	7ebb      	ldrb	r3, [r7, #26]
 800f55e:	f003 0310 	and.w	r3, r3, #16
 800f562:	2b00      	cmp	r3, #0
 800f564:	d003      	beq.n	800f56e <f_open+0x1b6>
					res = FR_NO_FILE;
 800f566:	2304      	movs	r3, #4
 800f568:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800f56c:	e00c      	b.n	800f588 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f56e:	79fb      	ldrb	r3, [r7, #7]
 800f570:	f003 0302 	and.w	r3, r3, #2
 800f574:	2b00      	cmp	r3, #0
 800f576:	d007      	beq.n	800f588 <f_open+0x1d0>
 800f578:	7ebb      	ldrb	r3, [r7, #26]
 800f57a:	f003 0301 	and.w	r3, r3, #1
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d002      	beq.n	800f588 <f_open+0x1d0>
						res = FR_DENIED;
 800f582:	2307      	movs	r3, #7
 800f584:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f588:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d126      	bne.n	800f5de <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f590:	79fb      	ldrb	r3, [r7, #7]
 800f592:	f003 0308 	and.w	r3, r3, #8
 800f596:	2b00      	cmp	r3, #0
 800f598:	d003      	beq.n	800f5a2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800f59a:	79fb      	ldrb	r3, [r7, #7]
 800f59c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5a0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800f5aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f5b0:	79fb      	ldrb	r3, [r7, #7]
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	bf8c      	ite	hi
 800f5b6:	2301      	movhi	r3, #1
 800f5b8:	2300      	movls	r3, #0
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	461a      	mov	r2, r3
 800f5be:	f107 0314 	add.w	r3, r7, #20
 800f5c2:	4611      	mov	r1, r2
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7fe fb17 	bl	800dbf8 <inc_lock>
 800f5ca:	4602      	mov	r2, r0
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	691b      	ldr	r3, [r3, #16]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d102      	bne.n	800f5de <f_open+0x226>
 800f5d8:	2302      	movs	r3, #2
 800f5da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f5de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	f040 8095 	bne.w	800f712 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f5ec:	4611      	mov	r1, r2
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7ff f938 	bl	800e864 <ld_clust>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f5fc:	331c      	adds	r3, #28
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7fe f994 	bl	800d92c <ld_dword>
 800f604:	4602      	mov	r2, r0
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2200      	movs	r2, #0
 800f60e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f610:	693a      	ldr	r2, [r7, #16]
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	88da      	ldrh	r2, [r3, #6]
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	79fa      	ldrb	r2, [r7, #7]
 800f622:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2200      	movs	r2, #0
 800f628:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	2200      	movs	r2, #0
 800f62e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	2200      	movs	r2, #0
 800f634:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	3330      	adds	r3, #48	@ 0x30
 800f63a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f63e:	2100      	movs	r1, #0
 800f640:	4618      	mov	r0, r3
 800f642:	f7fe f9fe 	bl	800da42 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f646:	79fb      	ldrb	r3, [r7, #7]
 800f648:	f003 0320 	and.w	r3, r3, #32
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d060      	beq.n	800f712 <f_open+0x35a>
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d05c      	beq.n	800f712 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	68da      	ldr	r2, [r3, #12]
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	895b      	ldrh	r3, [r3, #10]
 800f664:	025b      	lsls	r3, r3, #9
 800f666:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	689b      	ldr	r3, [r3, #8]
 800f66c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	68db      	ldr	r3, [r3, #12]
 800f672:	657b      	str	r3, [r7, #84]	@ 0x54
 800f674:	e016      	b.n	800f6a4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fe fca9 	bl	800dfd2 <get_fat>
 800f680:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f682:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f684:	2b01      	cmp	r3, #1
 800f686:	d802      	bhi.n	800f68e <f_open+0x2d6>
 800f688:	2302      	movs	r3, #2
 800f68a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f68e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f690:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f694:	d102      	bne.n	800f69c <f_open+0x2e4>
 800f696:	2301      	movs	r3, #1
 800f698:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f69c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f69e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6a0:	1ad3      	subs	r3, r2, r3
 800f6a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800f6a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d103      	bne.n	800f6b4 <f_open+0x2fc>
 800f6ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f6ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d8e0      	bhi.n	800f676 <f_open+0x2be>
				}
				fp->clust = clst;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f6b8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f6ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d127      	bne.n	800f712 <f_open+0x35a>
 800f6c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d022      	beq.n	800f712 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7fe fc5f 	bl	800df94 <clust2sect>
 800f6d6:	6478      	str	r0, [r7, #68]	@ 0x44
 800f6d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d103      	bne.n	800f6e6 <f_open+0x32e>
						res = FR_INT_ERR;
 800f6de:	2302      	movs	r3, #2
 800f6e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800f6e4:	e015      	b.n	800f712 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f6e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f6e8:	0a5a      	lsrs	r2, r3, #9
 800f6ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f6ec:	441a      	add	r2, r3
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	7858      	ldrb	r0, [r3, #1]
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	6a1a      	ldr	r2, [r3, #32]
 800f700:	2301      	movs	r3, #1
 800f702:	f7fe f89d 	bl	800d840 <disk_read>
 800f706:	4603      	mov	r3, r0
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d002      	beq.n	800f712 <f_open+0x35a>
 800f70c:	2301      	movs	r3, #1
 800f70e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f712:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800f716:	2b00      	cmp	r3, #0
 800f718:	d002      	beq.n	800f720 <f_open+0x368>
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2200      	movs	r2, #0
 800f71e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f720:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800f724:	4618      	mov	r0, r3
 800f726:	3760      	adds	r7, #96	@ 0x60
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b08e      	sub	sp, #56	@ 0x38
 800f730:	af00      	add	r7, sp, #0
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	607a      	str	r2, [r7, #4]
 800f738:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	2200      	movs	r2, #0
 800f742:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f107 0214 	add.w	r2, r7, #20
 800f74a:	4611      	mov	r1, r2
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7ff fdb7 	bl	800f2c0 <validate>
 800f752:	4603      	mov	r3, r0
 800f754:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f758:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d107      	bne.n	800f770 <f_read+0x44>
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	7d5b      	ldrb	r3, [r3, #21]
 800f764:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f768:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d002      	beq.n	800f776 <f_read+0x4a>
 800f770:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f774:	e115      	b.n	800f9a2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	7d1b      	ldrb	r3, [r3, #20]
 800f77a:	f003 0301 	and.w	r3, r3, #1
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d101      	bne.n	800f786 <f_read+0x5a>
 800f782:	2307      	movs	r3, #7
 800f784:	e10d      	b.n	800f9a2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	68da      	ldr	r2, [r3, #12]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	699b      	ldr	r3, [r3, #24]
 800f78e:	1ad3      	subs	r3, r2, r3
 800f790:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	6a3b      	ldr	r3, [r7, #32]
 800f796:	429a      	cmp	r2, r3
 800f798:	f240 80fe 	bls.w	800f998 <f_read+0x26c>
 800f79c:	6a3b      	ldr	r3, [r7, #32]
 800f79e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f7a0:	e0fa      	b.n	800f998 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	699b      	ldr	r3, [r3, #24]
 800f7a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	f040 80c6 	bne.w	800f93c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	699b      	ldr	r3, [r3, #24]
 800f7b4:	0a5b      	lsrs	r3, r3, #9
 800f7b6:	697a      	ldr	r2, [r7, #20]
 800f7b8:	8952      	ldrh	r2, [r2, #10]
 800f7ba:	3a01      	subs	r2, #1
 800f7bc:	4013      	ands	r3, r2
 800f7be:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f7c0:	69fb      	ldr	r3, [r7, #28]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d12f      	bne.n	800f826 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	699b      	ldr	r3, [r3, #24]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d103      	bne.n	800f7d6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f7d4:	e013      	b.n	800f7fe <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d007      	beq.n	800f7ee <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	699b      	ldr	r3, [r3, #24]
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	68f8      	ldr	r0, [r7, #12]
 800f7e6:	f7fe fe82 	bl	800e4ee <clmt_clust>
 800f7ea:	6338      	str	r0, [r7, #48]	@ 0x30
 800f7ec:	e007      	b.n	800f7fe <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f7ee:	68fa      	ldr	r2, [r7, #12]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	69db      	ldr	r3, [r3, #28]
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	4610      	mov	r0, r2
 800f7f8:	f7fe fbeb 	bl	800dfd2 <get_fat>
 800f7fc:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f7fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f800:	2b01      	cmp	r3, #1
 800f802:	d804      	bhi.n	800f80e <f_read+0xe2>
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	2202      	movs	r2, #2
 800f808:	755a      	strb	r2, [r3, #21]
 800f80a:	2302      	movs	r3, #2
 800f80c:	e0c9      	b.n	800f9a2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f814:	d104      	bne.n	800f820 <f_read+0xf4>
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2201      	movs	r2, #1
 800f81a:	755a      	strb	r2, [r3, #21]
 800f81c:	2301      	movs	r3, #1
 800f81e:	e0c0      	b.n	800f9a2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f824:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f826:	697a      	ldr	r2, [r7, #20]
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	69db      	ldr	r3, [r3, #28]
 800f82c:	4619      	mov	r1, r3
 800f82e:	4610      	mov	r0, r2
 800f830:	f7fe fbb0 	bl	800df94 <clust2sect>
 800f834:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f836:	69bb      	ldr	r3, [r7, #24]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d104      	bne.n	800f846 <f_read+0x11a>
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2202      	movs	r2, #2
 800f840:	755a      	strb	r2, [r3, #21]
 800f842:	2302      	movs	r3, #2
 800f844:	e0ad      	b.n	800f9a2 <f_read+0x276>
			sect += csect;
 800f846:	69ba      	ldr	r2, [r7, #24]
 800f848:	69fb      	ldr	r3, [r7, #28]
 800f84a:	4413      	add	r3, r2
 800f84c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	0a5b      	lsrs	r3, r3, #9
 800f852:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f856:	2b00      	cmp	r3, #0
 800f858:	d039      	beq.n	800f8ce <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f85a:	69fa      	ldr	r2, [r7, #28]
 800f85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f85e:	4413      	add	r3, r2
 800f860:	697a      	ldr	r2, [r7, #20]
 800f862:	8952      	ldrh	r2, [r2, #10]
 800f864:	4293      	cmp	r3, r2
 800f866:	d905      	bls.n	800f874 <f_read+0x148>
					cc = fs->csize - csect;
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	895b      	ldrh	r3, [r3, #10]
 800f86c:	461a      	mov	r2, r3
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	1ad3      	subs	r3, r2, r3
 800f872:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	7858      	ldrb	r0, [r3, #1]
 800f878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f87a:	69ba      	ldr	r2, [r7, #24]
 800f87c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f87e:	f7fd ffdf 	bl	800d840 <disk_read>
 800f882:	4603      	mov	r3, r0
 800f884:	2b00      	cmp	r3, #0
 800f886:	d004      	beq.n	800f892 <f_read+0x166>
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2201      	movs	r2, #1
 800f88c:	755a      	strb	r2, [r3, #21]
 800f88e:	2301      	movs	r3, #1
 800f890:	e087      	b.n	800f9a2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	7d1b      	ldrb	r3, [r3, #20]
 800f896:	b25b      	sxtb	r3, r3
 800f898:	2b00      	cmp	r3, #0
 800f89a:	da14      	bge.n	800f8c6 <f_read+0x19a>
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	6a1a      	ldr	r2, [r3, #32]
 800f8a0:	69bb      	ldr	r3, [r7, #24]
 800f8a2:	1ad3      	subs	r3, r2, r3
 800f8a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d90d      	bls.n	800f8c6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	6a1a      	ldr	r2, [r3, #32]
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	1ad3      	subs	r3, r2, r3
 800f8b2:	025b      	lsls	r3, r3, #9
 800f8b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8b6:	18d0      	adds	r0, r2, r3
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	3330      	adds	r3, #48	@ 0x30
 800f8bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	f7fe f89d 	bl	800da00 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f8c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c8:	025b      	lsls	r3, r3, #9
 800f8ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800f8cc:	e050      	b.n	800f970 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	6a1b      	ldr	r3, [r3, #32]
 800f8d2:	69ba      	ldr	r2, [r7, #24]
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d02e      	beq.n	800f936 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	7d1b      	ldrb	r3, [r3, #20]
 800f8dc:	b25b      	sxtb	r3, r3
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	da18      	bge.n	800f914 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	7858      	ldrb	r0, [r3, #1]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	6a1a      	ldr	r2, [r3, #32]
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	f7fd ffc5 	bl	800d880 <disk_write>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d004      	beq.n	800f906 <f_read+0x1da>
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	2201      	movs	r2, #1
 800f900:	755a      	strb	r2, [r3, #21]
 800f902:	2301      	movs	r3, #1
 800f904:	e04d      	b.n	800f9a2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	7d1b      	ldrb	r3, [r3, #20]
 800f90a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f90e:	b2da      	uxtb	r2, r3
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	7858      	ldrb	r0, [r3, #1]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800f91e:	2301      	movs	r3, #1
 800f920:	69ba      	ldr	r2, [r7, #24]
 800f922:	f7fd ff8d 	bl	800d840 <disk_read>
 800f926:	4603      	mov	r3, r0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d004      	beq.n	800f936 <f_read+0x20a>
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2201      	movs	r2, #1
 800f930:	755a      	strb	r2, [r3, #21]
 800f932:	2301      	movs	r3, #1
 800f934:	e035      	b.n	800f9a2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	69ba      	ldr	r2, [r7, #24]
 800f93a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	699b      	ldr	r3, [r3, #24]
 800f940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f944:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800f948:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f94a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d901      	bls.n	800f956 <f_read+0x22a>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	699b      	ldr	r3, [r3, #24]
 800f960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f964:	4413      	add	r3, r2
 800f966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f968:	4619      	mov	r1, r3
 800f96a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f96c:	f7fe f848 	bl	800da00 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f974:	4413      	add	r3, r2
 800f976:	627b      	str	r3, [r7, #36]	@ 0x24
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	699a      	ldr	r2, [r3, #24]
 800f97c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f97e:	441a      	add	r2, r3
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	619a      	str	r2, [r3, #24]
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f98a:	441a      	add	r2, r3
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	601a      	str	r2, [r3, #0]
 800f990:	687a      	ldr	r2, [r7, #4]
 800f992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f994:	1ad3      	subs	r3, r2, r3
 800f996:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f47f af01 	bne.w	800f7a2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f9a0:	2300      	movs	r3, #0
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3738      	adds	r7, #56	@ 0x38
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}

0800f9aa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f9aa:	b580      	push	{r7, lr}
 800f9ac:	b08c      	sub	sp, #48	@ 0x30
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	60f8      	str	r0, [r7, #12]
 800f9b2:	60b9      	str	r1, [r7, #8]
 800f9b4:	607a      	str	r2, [r7, #4]
 800f9b6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f107 0210 	add.w	r2, r7, #16
 800f9c8:	4611      	mov	r1, r2
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7ff fc78 	bl	800f2c0 <validate>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f9d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d107      	bne.n	800f9ee <f_write+0x44>
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	7d5b      	ldrb	r3, [r3, #21]
 800f9e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f9e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d002      	beq.n	800f9f4 <f_write+0x4a>
 800f9ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f9f2:	e14b      	b.n	800fc8c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	7d1b      	ldrb	r3, [r3, #20]
 800f9f8:	f003 0302 	and.w	r3, r3, #2
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d101      	bne.n	800fa04 <f_write+0x5a>
 800fa00:	2307      	movs	r3, #7
 800fa02:	e143      	b.n	800fc8c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	699a      	ldr	r2, [r3, #24]
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	441a      	add	r2, r3
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	699b      	ldr	r3, [r3, #24]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	f080 812d 	bcs.w	800fc70 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	699b      	ldr	r3, [r3, #24]
 800fa1a:	43db      	mvns	r3, r3
 800fa1c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fa1e:	e127      	b.n	800fc70 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	699b      	ldr	r3, [r3, #24]
 800fa24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	f040 80e3 	bne.w	800fbf4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	699b      	ldr	r3, [r3, #24]
 800fa32:	0a5b      	lsrs	r3, r3, #9
 800fa34:	693a      	ldr	r2, [r7, #16]
 800fa36:	8952      	ldrh	r2, [r2, #10]
 800fa38:	3a01      	subs	r2, #1
 800fa3a:	4013      	ands	r3, r2
 800fa3c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d143      	bne.n	800facc <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	699b      	ldr	r3, [r3, #24]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d10c      	bne.n	800fa66 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	689b      	ldr	r3, [r3, #8]
 800fa50:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fa52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d11a      	bne.n	800fa8e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	2100      	movs	r1, #0
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7fe fcae 	bl	800e3be <create_chain>
 800fa62:	62b8      	str	r0, [r7, #40]	@ 0x28
 800fa64:	e013      	b.n	800fa8e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d007      	beq.n	800fa7e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	699b      	ldr	r3, [r3, #24]
 800fa72:	4619      	mov	r1, r3
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f7fe fd3a 	bl	800e4ee <clmt_clust>
 800fa7a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800fa7c:	e007      	b.n	800fa8e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fa7e:	68fa      	ldr	r2, [r7, #12]
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	69db      	ldr	r3, [r3, #28]
 800fa84:	4619      	mov	r1, r3
 800fa86:	4610      	mov	r0, r2
 800fa88:	f7fe fc99 	bl	800e3be <create_chain>
 800fa8c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fa8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	f000 80f2 	beq.w	800fc7a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fa96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa98:	2b01      	cmp	r3, #1
 800fa9a:	d104      	bne.n	800faa6 <f_write+0xfc>
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	2202      	movs	r2, #2
 800faa0:	755a      	strb	r2, [r3, #21]
 800faa2:	2302      	movs	r3, #2
 800faa4:	e0f2      	b.n	800fc8c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800faa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faac:	d104      	bne.n	800fab8 <f_write+0x10e>
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2201      	movs	r2, #1
 800fab2:	755a      	strb	r2, [r3, #21]
 800fab4:	2301      	movs	r3, #1
 800fab6:	e0e9      	b.n	800fc8c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fabc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	689b      	ldr	r3, [r3, #8]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d102      	bne.n	800facc <f_write+0x122>
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800faca:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	7d1b      	ldrb	r3, [r3, #20]
 800fad0:	b25b      	sxtb	r3, r3
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	da18      	bge.n	800fb08 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	7858      	ldrb	r0, [r3, #1]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	6a1a      	ldr	r2, [r3, #32]
 800fae4:	2301      	movs	r3, #1
 800fae6:	f7fd fecb 	bl	800d880 <disk_write>
 800faea:	4603      	mov	r3, r0
 800faec:	2b00      	cmp	r3, #0
 800faee:	d004      	beq.n	800fafa <f_write+0x150>
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2201      	movs	r2, #1
 800faf4:	755a      	strb	r2, [r3, #21]
 800faf6:	2301      	movs	r3, #1
 800faf8:	e0c8      	b.n	800fc8c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	7d1b      	ldrb	r3, [r3, #20]
 800fafe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb02:	b2da      	uxtb	r2, r3
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fb08:	693a      	ldr	r2, [r7, #16]
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	69db      	ldr	r3, [r3, #28]
 800fb0e:	4619      	mov	r1, r3
 800fb10:	4610      	mov	r0, r2
 800fb12:	f7fe fa3f 	bl	800df94 <clust2sect>
 800fb16:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d104      	bne.n	800fb28 <f_write+0x17e>
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2202      	movs	r2, #2
 800fb22:	755a      	strb	r2, [r3, #21]
 800fb24:	2302      	movs	r3, #2
 800fb26:	e0b1      	b.n	800fc8c <f_write+0x2e2>
			sect += csect;
 800fb28:	697a      	ldr	r2, [r7, #20]
 800fb2a:	69bb      	ldr	r3, [r7, #24]
 800fb2c:	4413      	add	r3, r2
 800fb2e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	0a5b      	lsrs	r3, r3, #9
 800fb34:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fb36:	6a3b      	ldr	r3, [r7, #32]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d03c      	beq.n	800fbb6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fb3c:	69ba      	ldr	r2, [r7, #24]
 800fb3e:	6a3b      	ldr	r3, [r7, #32]
 800fb40:	4413      	add	r3, r2
 800fb42:	693a      	ldr	r2, [r7, #16]
 800fb44:	8952      	ldrh	r2, [r2, #10]
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d905      	bls.n	800fb56 <f_write+0x1ac>
					cc = fs->csize - csect;
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	895b      	ldrh	r3, [r3, #10]
 800fb4e:	461a      	mov	r2, r3
 800fb50:	69bb      	ldr	r3, [r7, #24]
 800fb52:	1ad3      	subs	r3, r2, r3
 800fb54:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	7858      	ldrb	r0, [r3, #1]
 800fb5a:	6a3b      	ldr	r3, [r7, #32]
 800fb5c:	697a      	ldr	r2, [r7, #20]
 800fb5e:	69f9      	ldr	r1, [r7, #28]
 800fb60:	f7fd fe8e 	bl	800d880 <disk_write>
 800fb64:	4603      	mov	r3, r0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d004      	beq.n	800fb74 <f_write+0x1ca>
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	755a      	strb	r2, [r3, #21]
 800fb70:	2301      	movs	r3, #1
 800fb72:	e08b      	b.n	800fc8c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6a1a      	ldr	r2, [r3, #32]
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	6a3a      	ldr	r2, [r7, #32]
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d915      	bls.n	800fbae <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	6a1a      	ldr	r2, [r3, #32]
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	1ad3      	subs	r3, r2, r3
 800fb90:	025b      	lsls	r3, r3, #9
 800fb92:	69fa      	ldr	r2, [r7, #28]
 800fb94:	4413      	add	r3, r2
 800fb96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	f7fd ff30 	bl	800da00 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	7d1b      	ldrb	r3, [r3, #20]
 800fba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fba8:	b2da      	uxtb	r2, r3
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fbae:	6a3b      	ldr	r3, [r7, #32]
 800fbb0:	025b      	lsls	r3, r3, #9
 800fbb2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800fbb4:	e03f      	b.n	800fc36 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	6a1b      	ldr	r3, [r3, #32]
 800fbba:	697a      	ldr	r2, [r7, #20]
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d016      	beq.n	800fbee <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	699a      	ldr	r2, [r3, #24]
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d210      	bcs.n	800fbee <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	7858      	ldrb	r0, [r3, #1]
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	697a      	ldr	r2, [r7, #20]
 800fbda:	f7fd fe31 	bl	800d840 <disk_read>
 800fbde:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d004      	beq.n	800fbee <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	755a      	strb	r2, [r3, #21]
 800fbea:	2301      	movs	r3, #1
 800fbec:	e04e      	b.n	800fc8c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	697a      	ldr	r2, [r7, #20]
 800fbf2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	699b      	ldr	r3, [r3, #24]
 800fbf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbfc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800fc00:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fc02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d901      	bls.n	800fc0e <f_write+0x264>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	699b      	ldr	r3, [r3, #24]
 800fc18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc1c:	4413      	add	r3, r2
 800fc1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc20:	69f9      	ldr	r1, [r7, #28]
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fd feec 	bl	800da00 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	7d1b      	ldrb	r3, [r3, #20]
 800fc2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fc30:	b2da      	uxtb	r2, r3
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fc36:	69fa      	ldr	r2, [r7, #28]
 800fc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc3a:	4413      	add	r3, r2
 800fc3c:	61fb      	str	r3, [r7, #28]
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	699a      	ldr	r2, [r3, #24]
 800fc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc44:	441a      	add	r2, r3
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	619a      	str	r2, [r3, #24]
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	68da      	ldr	r2, [r3, #12]
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	699b      	ldr	r3, [r3, #24]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	bf38      	it	cc
 800fc56:	461a      	movcc	r2, r3
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	60da      	str	r2, [r3, #12]
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	681a      	ldr	r2, [r3, #0]
 800fc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc62:	441a      	add	r2, r3
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	601a      	str	r2, [r3, #0]
 800fc68:	687a      	ldr	r2, [r7, #4]
 800fc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc6c:	1ad3      	subs	r3, r2, r3
 800fc6e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	f47f aed4 	bne.w	800fa20 <f_write+0x76>
 800fc78:	e000      	b.n	800fc7c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fc7a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	7d1b      	ldrb	r3, [r3, #20]
 800fc80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc84:	b2da      	uxtb	r2, r3
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fc8a:	2300      	movs	r3, #0
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3730      	adds	r7, #48	@ 0x30
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b086      	sub	sp, #24
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f107 0208 	add.w	r2, r7, #8
 800fca2:	4611      	mov	r1, r2
 800fca4:	4618      	mov	r0, r3
 800fca6:	f7ff fb0b 	bl	800f2c0 <validate>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fcae:	7dfb      	ldrb	r3, [r7, #23]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d168      	bne.n	800fd86 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	7d1b      	ldrb	r3, [r3, #20]
 800fcb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d062      	beq.n	800fd86 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	7d1b      	ldrb	r3, [r3, #20]
 800fcc4:	b25b      	sxtb	r3, r3
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	da15      	bge.n	800fcf6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	7858      	ldrb	r0, [r3, #1]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6a1a      	ldr	r2, [r3, #32]
 800fcd8:	2301      	movs	r3, #1
 800fcda:	f7fd fdd1 	bl	800d880 <disk_write>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d001      	beq.n	800fce8 <f_sync+0x54>
 800fce4:	2301      	movs	r3, #1
 800fce6:	e04f      	b.n	800fd88 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	7d1b      	ldrb	r3, [r3, #20]
 800fcec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fcf0:	b2da      	uxtb	r2, r3
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fcf6:	f7fd fbf5 	bl	800d4e4 <get_fattime>
 800fcfa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fcfc:	68ba      	ldr	r2, [r7, #8]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd02:	4619      	mov	r1, r3
 800fd04:	4610      	mov	r0, r2
 800fd06:	f7fe f8a9 	bl	800de5c <move_window>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fd0e:	7dfb      	ldrb	r3, [r7, #23]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d138      	bne.n	800fd86 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd18:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	330b      	adds	r3, #11
 800fd1e:	781a      	ldrb	r2, [r3, #0]
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	330b      	adds	r3, #11
 800fd24:	f042 0220 	orr.w	r2, r2, #32
 800fd28:	b2d2      	uxtb	r2, r2
 800fd2a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6818      	ldr	r0, [r3, #0]
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	689b      	ldr	r3, [r3, #8]
 800fd34:	461a      	mov	r2, r3
 800fd36:	68f9      	ldr	r1, [r7, #12]
 800fd38:	f7fe fdb3 	bl	800e8a2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	f103 021c 	add.w	r2, r3, #28
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	4619      	mov	r1, r3
 800fd48:	4610      	mov	r0, r2
 800fd4a:	f7fd fe2d 	bl	800d9a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	3316      	adds	r3, #22
 800fd52:	6939      	ldr	r1, [r7, #16]
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fd fe27 	bl	800d9a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	3312      	adds	r3, #18
 800fd5e:	2100      	movs	r1, #0
 800fd60:	4618      	mov	r0, r3
 800fd62:	f7fd fe06 	bl	800d972 <st_word>
					fs->wflag = 1;
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	2201      	movs	r2, #1
 800fd6a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7fe f8a2 	bl	800deb8 <sync_fs>
 800fd74:	4603      	mov	r3, r0
 800fd76:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	7d1b      	ldrb	r3, [r3, #20]
 800fd7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd80:	b2da      	uxtb	r2, r3
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fd86:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	3718      	adds	r7, #24
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd80      	pop	{r7, pc}

0800fd90 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b084      	sub	sp, #16
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	f7ff ff7b 	bl	800fc94 <f_sync>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fda2:	7bfb      	ldrb	r3, [r7, #15]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d118      	bne.n	800fdda <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f107 0208 	add.w	r2, r7, #8
 800fdae:	4611      	mov	r1, r2
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f7ff fa85 	bl	800f2c0 <validate>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fdba:	7bfb      	ldrb	r3, [r7, #15]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d10c      	bne.n	800fdda <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	691b      	ldr	r3, [r3, #16]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7fd ffa5 	bl	800dd14 <dec_lock>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fdce:	7bfb      	ldrb	r3, [r7, #15]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d102      	bne.n	800fdda <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fdda:	7bfb      	ldrb	r3, [r7, #15]
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3710      	adds	r7, #16
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}

0800fde4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b090      	sub	sp, #64	@ 0x40
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f107 0208 	add.w	r2, r7, #8
 800fdf4:	4611      	mov	r1, r2
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7ff fa62 	bl	800f2c0 <validate>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fe02:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d103      	bne.n	800fe12 <f_lseek+0x2e>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	7d5b      	ldrb	r3, [r3, #21]
 800fe0e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fe12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d002      	beq.n	800fe20 <f_lseek+0x3c>
 800fe1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fe1e:	e1e6      	b.n	80101ee <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f000 80d1 	beq.w	800ffcc <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe30:	d15a      	bne.n	800fee8 <f_lseek+0x104>
			tbl = fp->cltbl;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe36:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fe38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe3a:	1d1a      	adds	r2, r3, #4
 800fe3c:	627a      	str	r2, [r7, #36]	@ 0x24
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	617b      	str	r3, [r7, #20]
 800fe42:	2302      	movs	r3, #2
 800fe44:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	689b      	ldr	r3, [r3, #8]
 800fe4a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800fe4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d03a      	beq.n	800fec8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fe52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe54:	613b      	str	r3, [r7, #16]
 800fe56:	2300      	movs	r3, #0
 800fe58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fe5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe5c:	3302      	adds	r3, #2
 800fe5e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800fe60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe62:	60fb      	str	r3, [r7, #12]
 800fe64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe66:	3301      	adds	r3, #1
 800fe68:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fe f8af 	bl	800dfd2 <get_fat>
 800fe74:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fe76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe78:	2b01      	cmp	r3, #1
 800fe7a:	d804      	bhi.n	800fe86 <f_lseek+0xa2>
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2202      	movs	r2, #2
 800fe80:	755a      	strb	r2, [r3, #21]
 800fe82:	2302      	movs	r3, #2
 800fe84:	e1b3      	b.n	80101ee <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe8c:	d104      	bne.n	800fe98 <f_lseek+0xb4>
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2201      	movs	r2, #1
 800fe92:	755a      	strb	r2, [r3, #21]
 800fe94:	2301      	movs	r3, #1
 800fe96:	e1aa      	b.n	80101ee <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	3301      	adds	r3, #1
 800fe9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d0de      	beq.n	800fe60 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d809      	bhi.n	800febe <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800feaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feac:	1d1a      	adds	r2, r3, #4
 800feae:	627a      	str	r2, [r7, #36]	@ 0x24
 800feb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800feb2:	601a      	str	r2, [r3, #0]
 800feb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feb6:	1d1a      	adds	r2, r3, #4
 800feb8:	627a      	str	r2, [r7, #36]	@ 0x24
 800feba:	693a      	ldr	r2, [r7, #16]
 800febc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	695b      	ldr	r3, [r3, #20]
 800fec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d3c4      	bcc.n	800fe52 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fecc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fece:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800fed0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fed2:	697b      	ldr	r3, [r7, #20]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d803      	bhi.n	800fee0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800fed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feda:	2200      	movs	r2, #0
 800fedc:	601a      	str	r2, [r3, #0]
 800fede:	e184      	b.n	80101ea <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800fee0:	2311      	movs	r3, #17
 800fee2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800fee6:	e180      	b.n	80101ea <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	68db      	ldr	r3, [r3, #12]
 800feec:	683a      	ldr	r2, [r7, #0]
 800feee:	429a      	cmp	r2, r3
 800fef0:	d902      	bls.n	800fef8 <f_lseek+0x114>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	68db      	ldr	r3, [r3, #12]
 800fef6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	683a      	ldr	r2, [r7, #0]
 800fefc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f000 8172 	beq.w	80101ea <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	3b01      	subs	r3, #1
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f7fe faee 	bl	800e4ee <clmt_clust>
 800ff12:	4602      	mov	r2, r0
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ff18:	68ba      	ldr	r2, [r7, #8]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	69db      	ldr	r3, [r3, #28]
 800ff1e:	4619      	mov	r1, r3
 800ff20:	4610      	mov	r0, r2
 800ff22:	f7fe f837 	bl	800df94 <clust2sect>
 800ff26:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d104      	bne.n	800ff38 <f_lseek+0x154>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	2202      	movs	r2, #2
 800ff32:	755a      	strb	r2, [r3, #21]
 800ff34:	2302      	movs	r3, #2
 800ff36:	e15a      	b.n	80101ee <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	3b01      	subs	r3, #1
 800ff3c:	0a5b      	lsrs	r3, r3, #9
 800ff3e:	68ba      	ldr	r2, [r7, #8]
 800ff40:	8952      	ldrh	r2, [r2, #10]
 800ff42:	3a01      	subs	r2, #1
 800ff44:	4013      	ands	r3, r2
 800ff46:	69ba      	ldr	r2, [r7, #24]
 800ff48:	4413      	add	r3, r2
 800ff4a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	699b      	ldr	r3, [r3, #24]
 800ff50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	f000 8148 	beq.w	80101ea <f_lseek+0x406>
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6a1b      	ldr	r3, [r3, #32]
 800ff5e:	69ba      	ldr	r2, [r7, #24]
 800ff60:	429a      	cmp	r2, r3
 800ff62:	f000 8142 	beq.w	80101ea <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	7d1b      	ldrb	r3, [r3, #20]
 800ff6a:	b25b      	sxtb	r3, r3
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	da18      	bge.n	800ffa2 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	7858      	ldrb	r0, [r3, #1]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6a1a      	ldr	r2, [r3, #32]
 800ff7e:	2301      	movs	r3, #1
 800ff80:	f7fd fc7e 	bl	800d880 <disk_write>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d004      	beq.n	800ff94 <f_lseek+0x1b0>
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	755a      	strb	r2, [r3, #21]
 800ff90:	2301      	movs	r3, #1
 800ff92:	e12c      	b.n	80101ee <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	7d1b      	ldrb	r3, [r3, #20]
 800ff98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff9c:	b2da      	uxtb	r2, r3
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	7858      	ldrb	r0, [r3, #1]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ffac:	2301      	movs	r3, #1
 800ffae:	69ba      	ldr	r2, [r7, #24]
 800ffb0:	f7fd fc46 	bl	800d840 <disk_read>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d004      	beq.n	800ffc4 <f_lseek+0x1e0>
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	755a      	strb	r2, [r3, #21]
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	e114      	b.n	80101ee <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	69ba      	ldr	r2, [r7, #24]
 800ffc8:	621a      	str	r2, [r3, #32]
 800ffca:	e10e      	b.n	80101ea <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	683a      	ldr	r2, [r7, #0]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d908      	bls.n	800ffe8 <f_lseek+0x204>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	7d1b      	ldrb	r3, [r3, #20]
 800ffda:	f003 0302 	and.w	r3, r3, #2
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d102      	bne.n	800ffe8 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	699b      	ldr	r3, [r3, #24]
 800ffec:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ffee:	2300      	movs	r3, #0
 800fff0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fff6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	f000 80a7 	beq.w	801014e <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	895b      	ldrh	r3, [r3, #10]
 8010004:	025b      	lsls	r3, r3, #9
 8010006:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010008:	6a3b      	ldr	r3, [r7, #32]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d01b      	beq.n	8010046 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	1e5a      	subs	r2, r3, #1
 8010012:	69fb      	ldr	r3, [r7, #28]
 8010014:	fbb2 f2f3 	udiv	r2, r2, r3
 8010018:	6a3b      	ldr	r3, [r7, #32]
 801001a:	1e59      	subs	r1, r3, #1
 801001c:	69fb      	ldr	r3, [r7, #28]
 801001e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010022:	429a      	cmp	r2, r3
 8010024:	d30f      	bcc.n	8010046 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010026:	6a3b      	ldr	r3, [r7, #32]
 8010028:	1e5a      	subs	r2, r3, #1
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	425b      	negs	r3, r3
 801002e:	401a      	ands	r2, r3
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	699b      	ldr	r3, [r3, #24]
 8010038:	683a      	ldr	r2, [r7, #0]
 801003a:	1ad3      	subs	r3, r2, r3
 801003c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	69db      	ldr	r3, [r3, #28]
 8010042:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010044:	e022      	b.n	801008c <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	689b      	ldr	r3, [r3, #8]
 801004a:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801004c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801004e:	2b00      	cmp	r3, #0
 8010050:	d119      	bne.n	8010086 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2100      	movs	r1, #0
 8010056:	4618      	mov	r0, r3
 8010058:	f7fe f9b1 	bl	800e3be <create_chain>
 801005c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801005e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010060:	2b01      	cmp	r3, #1
 8010062:	d104      	bne.n	801006e <f_lseek+0x28a>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2202      	movs	r2, #2
 8010068:	755a      	strb	r2, [r3, #21]
 801006a:	2302      	movs	r3, #2
 801006c:	e0bf      	b.n	80101ee <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801006e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010074:	d104      	bne.n	8010080 <f_lseek+0x29c>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2201      	movs	r2, #1
 801007a:	755a      	strb	r2, [r3, #21]
 801007c:	2301      	movs	r3, #1
 801007e:	e0b6      	b.n	80101ee <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010084:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801008a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801008c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801008e:	2b00      	cmp	r3, #0
 8010090:	d05d      	beq.n	801014e <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010092:	e03a      	b.n	801010a <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8010094:	683a      	ldr	r2, [r7, #0]
 8010096:	69fb      	ldr	r3, [r7, #28]
 8010098:	1ad3      	subs	r3, r2, r3
 801009a:	603b      	str	r3, [r7, #0]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	699a      	ldr	r2, [r3, #24]
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	441a      	add	r2, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	7d1b      	ldrb	r3, [r3, #20]
 80100ac:	f003 0302 	and.w	r3, r3, #2
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d00b      	beq.n	80100cc <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fe f980 	bl	800e3be <create_chain>
 80100be:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80100c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d108      	bne.n	80100d8 <f_lseek+0x2f4>
							ofs = 0; break;
 80100c6:	2300      	movs	r3, #0
 80100c8:	603b      	str	r3, [r7, #0]
 80100ca:	e022      	b.n	8010112 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7fd ff7e 	bl	800dfd2 <get_fat>
 80100d6:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80100d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100de:	d104      	bne.n	80100ea <f_lseek+0x306>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2201      	movs	r2, #1
 80100e4:	755a      	strb	r2, [r3, #21]
 80100e6:	2301      	movs	r3, #1
 80100e8:	e081      	b.n	80101ee <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80100ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	d904      	bls.n	80100fa <f_lseek+0x316>
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	695b      	ldr	r3, [r3, #20]
 80100f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d304      	bcc.n	8010104 <f_lseek+0x320>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2202      	movs	r2, #2
 80100fe:	755a      	strb	r2, [r3, #21]
 8010100:	2302      	movs	r3, #2
 8010102:	e074      	b.n	80101ee <f_lseek+0x40a>
					fp->clust = clst;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010108:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801010a:	683a      	ldr	r2, [r7, #0]
 801010c:	69fb      	ldr	r3, [r7, #28]
 801010e:	429a      	cmp	r2, r3
 8010110:	d8c0      	bhi.n	8010094 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	699a      	ldr	r2, [r3, #24]
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	441a      	add	r2, r3
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010124:	2b00      	cmp	r3, #0
 8010126:	d012      	beq.n	801014e <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801012c:	4618      	mov	r0, r3
 801012e:	f7fd ff31 	bl	800df94 <clust2sect>
 8010132:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010136:	2b00      	cmp	r3, #0
 8010138:	d104      	bne.n	8010144 <f_lseek+0x360>
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2202      	movs	r2, #2
 801013e:	755a      	strb	r2, [r3, #21]
 8010140:	2302      	movs	r3, #2
 8010142:	e054      	b.n	80101ee <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	0a5b      	lsrs	r3, r3, #9
 8010148:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801014a:	4413      	add	r3, r2
 801014c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	699a      	ldr	r2, [r3, #24]
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	68db      	ldr	r3, [r3, #12]
 8010156:	429a      	cmp	r2, r3
 8010158:	d90a      	bls.n	8010170 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	699a      	ldr	r2, [r3, #24]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	7d1b      	ldrb	r3, [r3, #20]
 8010166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801016a:	b2da      	uxtb	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	699b      	ldr	r3, [r3, #24]
 8010174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010178:	2b00      	cmp	r3, #0
 801017a:	d036      	beq.n	80101ea <f_lseek+0x406>
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6a1b      	ldr	r3, [r3, #32]
 8010180:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010182:	429a      	cmp	r2, r3
 8010184:	d031      	beq.n	80101ea <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	7d1b      	ldrb	r3, [r3, #20]
 801018a:	b25b      	sxtb	r3, r3
 801018c:	2b00      	cmp	r3, #0
 801018e:	da18      	bge.n	80101c2 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	7858      	ldrb	r0, [r3, #1]
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6a1a      	ldr	r2, [r3, #32]
 801019e:	2301      	movs	r3, #1
 80101a0:	f7fd fb6e 	bl	800d880 <disk_write>
 80101a4:	4603      	mov	r3, r0
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d004      	beq.n	80101b4 <f_lseek+0x3d0>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2201      	movs	r2, #1
 80101ae:	755a      	strb	r2, [r3, #21]
 80101b0:	2301      	movs	r3, #1
 80101b2:	e01c      	b.n	80101ee <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	7d1b      	ldrb	r3, [r3, #20]
 80101b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80101bc:	b2da      	uxtb	r2, r3
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	7858      	ldrb	r0, [r3, #1]
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80101cc:	2301      	movs	r3, #1
 80101ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80101d0:	f7fd fb36 	bl	800d840 <disk_read>
 80101d4:	4603      	mov	r3, r0
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d004      	beq.n	80101e4 <f_lseek+0x400>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2201      	movs	r2, #1
 80101de:	755a      	strb	r2, [r3, #21]
 80101e0:	2301      	movs	r3, #1
 80101e2:	e004      	b.n	80101ee <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80101e8:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80101ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3740      	adds	r7, #64	@ 0x40
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b09e      	sub	sp, #120	@ 0x78
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80101fe:	2300      	movs	r3, #0
 8010200:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010202:	f107 010c 	add.w	r1, r7, #12
 8010206:	1d3b      	adds	r3, r7, #4
 8010208:	2202      	movs	r2, #2
 801020a:	4618      	mov	r0, r3
 801020c:	f7fe fe0c 	bl	800ee28 <find_volume>
 8010210:	4603      	mov	r3, r0
 8010212:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 801021a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801021e:	2b00      	cmp	r3, #0
 8010220:	f040 808e 	bne.w	8010340 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801022a:	4611      	mov	r1, r2
 801022c:	4618      	mov	r0, r3
 801022e:	f7fe fcef 	bl	800ec10 <follow_path>
 8010232:	4603      	mov	r3, r0
 8010234:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8010238:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801023c:	2b00      	cmp	r3, #0
 801023e:	d108      	bne.n	8010252 <f_unlink+0x5c>
 8010240:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8010244:	2102      	movs	r1, #2
 8010246:	4618      	mov	r0, r3
 8010248:	f7fd fc58 	bl	800dafc <chk_lock>
 801024c:	4603      	mov	r3, r0
 801024e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8010252:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010256:	2b00      	cmp	r3, #0
 8010258:	d172      	bne.n	8010340 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801025a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 801025e:	b25b      	sxtb	r3, r3
 8010260:	2b00      	cmp	r3, #0
 8010262:	da03      	bge.n	801026c <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8010264:	2306      	movs	r3, #6
 8010266:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 801026a:	e008      	b.n	801027e <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801026c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8010270:	f003 0301 	and.w	r3, r3, #1
 8010274:	2b00      	cmp	r3, #0
 8010276:	d002      	beq.n	801027e <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8010278:	2307      	movs	r3, #7
 801027a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 801027e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8010282:	2b00      	cmp	r3, #0
 8010284:	d134      	bne.n	80102f0 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801028a:	4611      	mov	r1, r2
 801028c:	4618      	mov	r0, r3
 801028e:	f7fe fae9 	bl	800e864 <ld_clust>
 8010292:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8010294:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8010298:	f003 0310 	and.w	r3, r3, #16
 801029c:	2b00      	cmp	r3, #0
 801029e:	d027      	beq.n	80102f0 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80102a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80102a6:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80102a8:	f107 0310 	add.w	r3, r7, #16
 80102ac:	2100      	movs	r1, #0
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fe f951 	bl	800e556 <dir_sdi>
 80102b4:	4603      	mov	r3, r0
 80102b6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 80102ba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d116      	bne.n	80102f0 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80102c2:	f107 0310 	add.w	r3, r7, #16
 80102c6:	2100      	movs	r1, #0
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7fe fb0a 	bl	800e8e2 <dir_read>
 80102ce:	4603      	mov	r3, r0
 80102d0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80102d4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d102      	bne.n	80102e2 <f_unlink+0xec>
 80102dc:	2307      	movs	r3, #7
 80102de:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80102e2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80102e6:	2b04      	cmp	r3, #4
 80102e8:	d102      	bne.n	80102f0 <f_unlink+0xfa>
 80102ea:	2300      	movs	r3, #0
 80102ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80102f0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d123      	bne.n	8010340 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80102f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7fe fbd4 	bl	800eaaa <dir_remove>
 8010302:	4603      	mov	r3, r0
 8010304:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8010308:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801030c:	2b00      	cmp	r3, #0
 801030e:	d10c      	bne.n	801032a <f_unlink+0x134>
 8010310:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010312:	2b00      	cmp	r3, #0
 8010314:	d009      	beq.n	801032a <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8010316:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801031a:	2200      	movs	r2, #0
 801031c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801031e:	4618      	mov	r0, r3
 8010320:	f7fd ffe8 	bl	800e2f4 <remove_chain>
 8010324:	4603      	mov	r3, r0
 8010326:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801032a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801032e:	2b00      	cmp	r3, #0
 8010330:	d106      	bne.n	8010340 <f_unlink+0x14a>
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	4618      	mov	r0, r3
 8010336:	f7fd fdbf 	bl	800deb8 <sync_fs>
 801033a:	4603      	mov	r3, r0
 801033c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010340:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8010344:	4618      	mov	r0, r3
 8010346:	3778      	adds	r7, #120	@ 0x78
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 801034c:	b590      	push	{r4, r7, lr}
 801034e:	b0a5      	sub	sp, #148	@ 0x94
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 8010356:	463b      	mov	r3, r7
 8010358:	4618      	mov	r0, r3
 801035a:	f7fe fcca 	bl	800ecf2 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 801035e:	f107 0120 	add.w	r1, r7, #32
 8010362:	1d3b      	adds	r3, r7, #4
 8010364:	2202      	movs	r2, #2
 8010366:	4618      	mov	r0, r3
 8010368:	f7fe fd5e 	bl	800ee28 <find_volume>
 801036c:	4603      	mov	r3, r0
 801036e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 8010372:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8010376:	2b00      	cmp	r3, #0
 8010378:	f040 80db 	bne.w	8010532 <f_rename+0x1e6>
		djo.obj.fs = fs;
 801037c:	6a3b      	ldr	r3, [r7, #32]
 801037e:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 8010380:	687a      	ldr	r2, [r7, #4]
 8010382:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8010386:	4611      	mov	r1, r2
 8010388:	4618      	mov	r0, r3
 801038a:	f7fe fc41 	bl	800ec10 <follow_path>
 801038e:	4603      	mov	r3, r0
 8010390:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 8010394:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8010398:	2b00      	cmp	r3, #0
 801039a:	d108      	bne.n	80103ae <f_rename+0x62>
 801039c:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80103a0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d002      	beq.n	80103ae <f_rename+0x62>
 80103a8:	2306      	movs	r3, #6
 80103aa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 80103ae:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d108      	bne.n	80103c8 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 80103b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80103ba:	2102      	movs	r1, #2
 80103bc:	4618      	mov	r0, r3
 80103be:	f7fd fb9d 	bl	800dafc <chk_lock>
 80103c2:	4603      	mov	r3, r0
 80103c4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 80103c8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	f040 80b0 	bne.w	8010532 <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 80103d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80103d4:	f103 010b 	add.w	r1, r3, #11
 80103d8:	f107 0308 	add.w	r3, r7, #8
 80103dc:	2215      	movs	r2, #21
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fd fb0e 	bl	800da00 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 80103e4:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80103e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80103ec:	2230      	movs	r2, #48	@ 0x30
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7fd fb06 	bl	800da00 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 80103f4:	683a      	ldr	r2, [r7, #0]
 80103f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80103fa:	4611      	mov	r1, r2
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7fe fc07 	bl	800ec10 <follow_path>
 8010402:	4603      	mov	r3, r0
 8010404:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 8010408:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801040c:	2b00      	cmp	r3, #0
 801040e:	d10c      	bne.n	801042a <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 8010410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010414:	429a      	cmp	r2, r3
 8010416:	d105      	bne.n	8010424 <f_rename+0xd8>
 8010418:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801041a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801041c:	429a      	cmp	r2, r3
 801041e:	d101      	bne.n	8010424 <f_rename+0xd8>
 8010420:	2304      	movs	r3, #4
 8010422:	e000      	b.n	8010426 <f_rename+0xda>
 8010424:	2308      	movs	r3, #8
 8010426:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 801042a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 801042e:	2b04      	cmp	r3, #4
 8010430:	d168      	bne.n	8010504 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 8010432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010436:	4618      	mov	r0, r3
 8010438:	f7fe fb05 	bl	800ea46 <dir_register>
 801043c:	4603      	mov	r3, r0
 801043e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 8010442:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8010446:	2b00      	cmp	r3, #0
 8010448:	d15c      	bne.n	8010504 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 801044a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801044c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 8010450:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010454:	f103 000d 	add.w	r0, r3, #13
 8010458:	f107 0308 	add.w	r3, r7, #8
 801045c:	3302      	adds	r3, #2
 801045e:	2213      	movs	r2, #19
 8010460:	4619      	mov	r1, r3
 8010462:	f7fd facd 	bl	800da00 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 8010466:	7a3a      	ldrb	r2, [r7, #8]
 8010468:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801046c:	330b      	adds	r3, #11
 801046e:	f042 0220 	orr.w	r2, r2, #32
 8010472:	b2d2      	uxtb	r2, r2
 8010474:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 8010476:	6a3b      	ldr	r3, [r7, #32]
 8010478:	2201      	movs	r2, #1
 801047a:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 801047c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010480:	330b      	adds	r3, #11
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	f003 0310 	and.w	r3, r3, #16
 8010488:	2b00      	cmp	r3, #0
 801048a:	d03b      	beq.n	8010504 <f_rename+0x1b8>
 801048c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801048e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010490:	429a      	cmp	r2, r3
 8010492:	d037      	beq.n	8010504 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 8010494:	6a3c      	ldr	r4, [r7, #32]
 8010496:	6a3b      	ldr	r3, [r7, #32]
 8010498:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801049c:	4618      	mov	r0, r3
 801049e:	f7fe f9e1 	bl	800e864 <ld_clust>
 80104a2:	4603      	mov	r3, r0
 80104a4:	4619      	mov	r1, r3
 80104a6:	4620      	mov	r0, r4
 80104a8:	f7fd fd74 	bl	800df94 <clust2sect>
 80104ac:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 80104b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d103      	bne.n	80104c0 <f_rename+0x174>
								res = FR_INT_ERR;
 80104b8:	2302      	movs	r3, #2
 80104ba:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 80104be:	e021      	b.n	8010504 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 80104c0:	6a3b      	ldr	r3, [r7, #32]
 80104c2:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7fd fcc8 	bl	800de5c <move_window>
 80104cc:	4603      	mov	r3, r0
 80104ce:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 80104d2:	6a3b      	ldr	r3, [r7, #32]
 80104d4:	3330      	adds	r3, #48	@ 0x30
 80104d6:	3320      	adds	r3, #32
 80104d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 80104dc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d10f      	bne.n	8010504 <f_rename+0x1b8>
 80104e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80104e8:	3301      	adds	r3, #1
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80104ee:	d109      	bne.n	8010504 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 80104f0:	6a3b      	ldr	r3, [r7, #32]
 80104f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80104f4:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7fe f9d2 	bl	800e8a2 <st_clust>
									fs->wflag = 1;
 80104fe:	6a3b      	ldr	r3, [r7, #32]
 8010500:	2201      	movs	r2, #1
 8010502:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 8010504:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8010508:	2b00      	cmp	r3, #0
 801050a:	d112      	bne.n	8010532 <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 801050c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8010510:	4618      	mov	r0, r3
 8010512:	f7fe faca 	bl	800eaaa <dir_remove>
 8010516:	4603      	mov	r3, r0
 8010518:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 801051c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8010520:	2b00      	cmp	r3, #0
 8010522:	d106      	bne.n	8010532 <f_rename+0x1e6>
					res = sync_fs(fs);
 8010524:	6a3b      	ldr	r3, [r7, #32]
 8010526:	4618      	mov	r0, r3
 8010528:	f7fd fcc6 	bl	800deb8 <sync_fs>
 801052c:	4603      	mov	r3, r0
 801052e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010532:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8010536:	4618      	mov	r0, r3
 8010538:	3794      	adds	r7, #148	@ 0x94
 801053a:	46bd      	mov	sp, r7
 801053c:	bd90      	pop	{r4, r7, pc}
	...

08010540 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010540:	b480      	push	{r7}
 8010542:	b087      	sub	sp, #28
 8010544:	af00      	add	r7, sp, #0
 8010546:	60f8      	str	r0, [r7, #12]
 8010548:	60b9      	str	r1, [r7, #8]
 801054a:	4613      	mov	r3, r2
 801054c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801054e:	2301      	movs	r3, #1
 8010550:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010552:	2300      	movs	r3, #0
 8010554:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010556:	4b1f      	ldr	r3, [pc, #124]	@ (80105d4 <FATFS_LinkDriverEx+0x94>)
 8010558:	7a5b      	ldrb	r3, [r3, #9]
 801055a:	b2db      	uxtb	r3, r3
 801055c:	2b00      	cmp	r3, #0
 801055e:	d131      	bne.n	80105c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010560:	4b1c      	ldr	r3, [pc, #112]	@ (80105d4 <FATFS_LinkDriverEx+0x94>)
 8010562:	7a5b      	ldrb	r3, [r3, #9]
 8010564:	b2db      	uxtb	r3, r3
 8010566:	461a      	mov	r2, r3
 8010568:	4b1a      	ldr	r3, [pc, #104]	@ (80105d4 <FATFS_LinkDriverEx+0x94>)
 801056a:	2100      	movs	r1, #0
 801056c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801056e:	4b19      	ldr	r3, [pc, #100]	@ (80105d4 <FATFS_LinkDriverEx+0x94>)
 8010570:	7a5b      	ldrb	r3, [r3, #9]
 8010572:	b2db      	uxtb	r3, r3
 8010574:	4a17      	ldr	r2, [pc, #92]	@ (80105d4 <FATFS_LinkDriverEx+0x94>)
 8010576:	009b      	lsls	r3, r3, #2
 8010578:	4413      	add	r3, r2
 801057a:	68fa      	ldr	r2, [r7, #12]
 801057c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801057e:	4b15      	ldr	r3, [pc, #84]	@ (80105d4 <FATFS_LinkDriverEx+0x94>)
 8010580:	7a5b      	ldrb	r3, [r3, #9]
 8010582:	b2db      	uxtb	r3, r3
 8010584:	461a      	mov	r2, r3
 8010586:	4b13      	ldr	r3, [pc, #76]	@ (80105d4 <FATFS_LinkDriverEx+0x94>)
 8010588:	4413      	add	r3, r2
 801058a:	79fa      	ldrb	r2, [r7, #7]
 801058c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801058e:	4b11      	ldr	r3, [pc, #68]	@ (80105d4 <FATFS_LinkDriverEx+0x94>)
 8010590:	7a5b      	ldrb	r3, [r3, #9]
 8010592:	b2db      	uxtb	r3, r3
 8010594:	1c5a      	adds	r2, r3, #1
 8010596:	b2d1      	uxtb	r1, r2
 8010598:	4a0e      	ldr	r2, [pc, #56]	@ (80105d4 <FATFS_LinkDriverEx+0x94>)
 801059a:	7251      	strb	r1, [r2, #9]
 801059c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801059e:	7dbb      	ldrb	r3, [r7, #22]
 80105a0:	3330      	adds	r3, #48	@ 0x30
 80105a2:	b2da      	uxtb	r2, r3
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	3301      	adds	r3, #1
 80105ac:	223a      	movs	r2, #58	@ 0x3a
 80105ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	3302      	adds	r3, #2
 80105b4:	222f      	movs	r2, #47	@ 0x2f
 80105b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	3303      	adds	r3, #3
 80105bc:	2200      	movs	r2, #0
 80105be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80105c0:	2300      	movs	r3, #0
 80105c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80105c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	371c      	adds	r7, #28
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr
 80105d2:	bf00      	nop
 80105d4:	20014764 	.word	0x20014764

080105d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b082      	sub	sp, #8
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80105e2:	2200      	movs	r2, #0
 80105e4:	6839      	ldr	r1, [r7, #0]
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f7ff ffaa 	bl	8010540 <FATFS_LinkDriverEx>
 80105ec:	4603      	mov	r3, r0
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3708      	adds	r7, #8
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
	...

080105f8 <malloc>:
 80105f8:	4b02      	ldr	r3, [pc, #8]	@ (8010604 <malloc+0xc>)
 80105fa:	4601      	mov	r1, r0
 80105fc:	6818      	ldr	r0, [r3, #0]
 80105fe:	f000 b82d 	b.w	801065c <_malloc_r>
 8010602:	bf00      	nop
 8010604:	2000001c 	.word	0x2000001c

08010608 <free>:
 8010608:	4b02      	ldr	r3, [pc, #8]	@ (8010614 <free+0xc>)
 801060a:	4601      	mov	r1, r0
 801060c:	6818      	ldr	r0, [r3, #0]
 801060e:	f000 b967 	b.w	80108e0 <_free_r>
 8010612:	bf00      	nop
 8010614:	2000001c 	.word	0x2000001c

08010618 <sbrk_aligned>:
 8010618:	b570      	push	{r4, r5, r6, lr}
 801061a:	4e0f      	ldr	r6, [pc, #60]	@ (8010658 <sbrk_aligned+0x40>)
 801061c:	460c      	mov	r4, r1
 801061e:	6831      	ldr	r1, [r6, #0]
 8010620:	4605      	mov	r5, r0
 8010622:	b911      	cbnz	r1, 801062a <sbrk_aligned+0x12>
 8010624:	f000 f90a 	bl	801083c <_sbrk_r>
 8010628:	6030      	str	r0, [r6, #0]
 801062a:	4621      	mov	r1, r4
 801062c:	4628      	mov	r0, r5
 801062e:	f000 f905 	bl	801083c <_sbrk_r>
 8010632:	1c43      	adds	r3, r0, #1
 8010634:	d103      	bne.n	801063e <sbrk_aligned+0x26>
 8010636:	f04f 34ff 	mov.w	r4, #4294967295
 801063a:	4620      	mov	r0, r4
 801063c:	bd70      	pop	{r4, r5, r6, pc}
 801063e:	1cc4      	adds	r4, r0, #3
 8010640:	f024 0403 	bic.w	r4, r4, #3
 8010644:	42a0      	cmp	r0, r4
 8010646:	d0f8      	beq.n	801063a <sbrk_aligned+0x22>
 8010648:	1a21      	subs	r1, r4, r0
 801064a:	4628      	mov	r0, r5
 801064c:	f000 f8f6 	bl	801083c <_sbrk_r>
 8010650:	3001      	adds	r0, #1
 8010652:	d1f2      	bne.n	801063a <sbrk_aligned+0x22>
 8010654:	e7ef      	b.n	8010636 <sbrk_aligned+0x1e>
 8010656:	bf00      	nop
 8010658:	20014770 	.word	0x20014770

0801065c <_malloc_r>:
 801065c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010660:	1ccd      	adds	r5, r1, #3
 8010662:	f025 0503 	bic.w	r5, r5, #3
 8010666:	3508      	adds	r5, #8
 8010668:	2d0c      	cmp	r5, #12
 801066a:	bf38      	it	cc
 801066c:	250c      	movcc	r5, #12
 801066e:	2d00      	cmp	r5, #0
 8010670:	4606      	mov	r6, r0
 8010672:	db01      	blt.n	8010678 <_malloc_r+0x1c>
 8010674:	42a9      	cmp	r1, r5
 8010676:	d904      	bls.n	8010682 <_malloc_r+0x26>
 8010678:	230c      	movs	r3, #12
 801067a:	6033      	str	r3, [r6, #0]
 801067c:	2000      	movs	r0, #0
 801067e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010682:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010758 <_malloc_r+0xfc>
 8010686:	f000 f869 	bl	801075c <__malloc_lock>
 801068a:	f8d8 3000 	ldr.w	r3, [r8]
 801068e:	461c      	mov	r4, r3
 8010690:	bb44      	cbnz	r4, 80106e4 <_malloc_r+0x88>
 8010692:	4629      	mov	r1, r5
 8010694:	4630      	mov	r0, r6
 8010696:	f7ff ffbf 	bl	8010618 <sbrk_aligned>
 801069a:	1c43      	adds	r3, r0, #1
 801069c:	4604      	mov	r4, r0
 801069e:	d158      	bne.n	8010752 <_malloc_r+0xf6>
 80106a0:	f8d8 4000 	ldr.w	r4, [r8]
 80106a4:	4627      	mov	r7, r4
 80106a6:	2f00      	cmp	r7, #0
 80106a8:	d143      	bne.n	8010732 <_malloc_r+0xd6>
 80106aa:	2c00      	cmp	r4, #0
 80106ac:	d04b      	beq.n	8010746 <_malloc_r+0xea>
 80106ae:	6823      	ldr	r3, [r4, #0]
 80106b0:	4639      	mov	r1, r7
 80106b2:	4630      	mov	r0, r6
 80106b4:	eb04 0903 	add.w	r9, r4, r3
 80106b8:	f000 f8c0 	bl	801083c <_sbrk_r>
 80106bc:	4581      	cmp	r9, r0
 80106be:	d142      	bne.n	8010746 <_malloc_r+0xea>
 80106c0:	6821      	ldr	r1, [r4, #0]
 80106c2:	1a6d      	subs	r5, r5, r1
 80106c4:	4629      	mov	r1, r5
 80106c6:	4630      	mov	r0, r6
 80106c8:	f7ff ffa6 	bl	8010618 <sbrk_aligned>
 80106cc:	3001      	adds	r0, #1
 80106ce:	d03a      	beq.n	8010746 <_malloc_r+0xea>
 80106d0:	6823      	ldr	r3, [r4, #0]
 80106d2:	442b      	add	r3, r5
 80106d4:	6023      	str	r3, [r4, #0]
 80106d6:	f8d8 3000 	ldr.w	r3, [r8]
 80106da:	685a      	ldr	r2, [r3, #4]
 80106dc:	bb62      	cbnz	r2, 8010738 <_malloc_r+0xdc>
 80106de:	f8c8 7000 	str.w	r7, [r8]
 80106e2:	e00f      	b.n	8010704 <_malloc_r+0xa8>
 80106e4:	6822      	ldr	r2, [r4, #0]
 80106e6:	1b52      	subs	r2, r2, r5
 80106e8:	d420      	bmi.n	801072c <_malloc_r+0xd0>
 80106ea:	2a0b      	cmp	r2, #11
 80106ec:	d917      	bls.n	801071e <_malloc_r+0xc2>
 80106ee:	1961      	adds	r1, r4, r5
 80106f0:	42a3      	cmp	r3, r4
 80106f2:	6025      	str	r5, [r4, #0]
 80106f4:	bf18      	it	ne
 80106f6:	6059      	strne	r1, [r3, #4]
 80106f8:	6863      	ldr	r3, [r4, #4]
 80106fa:	bf08      	it	eq
 80106fc:	f8c8 1000 	streq.w	r1, [r8]
 8010700:	5162      	str	r2, [r4, r5]
 8010702:	604b      	str	r3, [r1, #4]
 8010704:	4630      	mov	r0, r6
 8010706:	f000 f82f 	bl	8010768 <__malloc_unlock>
 801070a:	f104 000b 	add.w	r0, r4, #11
 801070e:	1d23      	adds	r3, r4, #4
 8010710:	f020 0007 	bic.w	r0, r0, #7
 8010714:	1ac2      	subs	r2, r0, r3
 8010716:	bf1c      	itt	ne
 8010718:	1a1b      	subne	r3, r3, r0
 801071a:	50a3      	strne	r3, [r4, r2]
 801071c:	e7af      	b.n	801067e <_malloc_r+0x22>
 801071e:	6862      	ldr	r2, [r4, #4]
 8010720:	42a3      	cmp	r3, r4
 8010722:	bf0c      	ite	eq
 8010724:	f8c8 2000 	streq.w	r2, [r8]
 8010728:	605a      	strne	r2, [r3, #4]
 801072a:	e7eb      	b.n	8010704 <_malloc_r+0xa8>
 801072c:	4623      	mov	r3, r4
 801072e:	6864      	ldr	r4, [r4, #4]
 8010730:	e7ae      	b.n	8010690 <_malloc_r+0x34>
 8010732:	463c      	mov	r4, r7
 8010734:	687f      	ldr	r7, [r7, #4]
 8010736:	e7b6      	b.n	80106a6 <_malloc_r+0x4a>
 8010738:	461a      	mov	r2, r3
 801073a:	685b      	ldr	r3, [r3, #4]
 801073c:	42a3      	cmp	r3, r4
 801073e:	d1fb      	bne.n	8010738 <_malloc_r+0xdc>
 8010740:	2300      	movs	r3, #0
 8010742:	6053      	str	r3, [r2, #4]
 8010744:	e7de      	b.n	8010704 <_malloc_r+0xa8>
 8010746:	230c      	movs	r3, #12
 8010748:	6033      	str	r3, [r6, #0]
 801074a:	4630      	mov	r0, r6
 801074c:	f000 f80c 	bl	8010768 <__malloc_unlock>
 8010750:	e794      	b.n	801067c <_malloc_r+0x20>
 8010752:	6005      	str	r5, [r0, #0]
 8010754:	e7d6      	b.n	8010704 <_malloc_r+0xa8>
 8010756:	bf00      	nop
 8010758:	20014774 	.word	0x20014774

0801075c <__malloc_lock>:
 801075c:	4801      	ldr	r0, [pc, #4]	@ (8010764 <__malloc_lock+0x8>)
 801075e:	f000 b8a7 	b.w	80108b0 <__retarget_lock_acquire_recursive>
 8010762:	bf00      	nop
 8010764:	200148b4 	.word	0x200148b4

08010768 <__malloc_unlock>:
 8010768:	4801      	ldr	r0, [pc, #4]	@ (8010770 <__malloc_unlock+0x8>)
 801076a:	f000 b8a2 	b.w	80108b2 <__retarget_lock_release_recursive>
 801076e:	bf00      	nop
 8010770:	200148b4 	.word	0x200148b4

08010774 <realloc>:
 8010774:	4b02      	ldr	r3, [pc, #8]	@ (8010780 <realloc+0xc>)
 8010776:	460a      	mov	r2, r1
 8010778:	4601      	mov	r1, r0
 801077a:	6818      	ldr	r0, [r3, #0]
 801077c:	f000 b802 	b.w	8010784 <_realloc_r>
 8010780:	2000001c 	.word	0x2000001c

08010784 <_realloc_r>:
 8010784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010788:	4680      	mov	r8, r0
 801078a:	4615      	mov	r5, r2
 801078c:	460c      	mov	r4, r1
 801078e:	b921      	cbnz	r1, 801079a <_realloc_r+0x16>
 8010790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010794:	4611      	mov	r1, r2
 8010796:	f7ff bf61 	b.w	801065c <_malloc_r>
 801079a:	b92a      	cbnz	r2, 80107a8 <_realloc_r+0x24>
 801079c:	f000 f8a0 	bl	80108e0 <_free_r>
 80107a0:	2400      	movs	r4, #0
 80107a2:	4620      	mov	r0, r4
 80107a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107a8:	f000 f8e4 	bl	8010974 <_malloc_usable_size_r>
 80107ac:	4285      	cmp	r5, r0
 80107ae:	4606      	mov	r6, r0
 80107b0:	d802      	bhi.n	80107b8 <_realloc_r+0x34>
 80107b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80107b6:	d8f4      	bhi.n	80107a2 <_realloc_r+0x1e>
 80107b8:	4629      	mov	r1, r5
 80107ba:	4640      	mov	r0, r8
 80107bc:	f7ff ff4e 	bl	801065c <_malloc_r>
 80107c0:	4607      	mov	r7, r0
 80107c2:	2800      	cmp	r0, #0
 80107c4:	d0ec      	beq.n	80107a0 <_realloc_r+0x1c>
 80107c6:	42b5      	cmp	r5, r6
 80107c8:	462a      	mov	r2, r5
 80107ca:	4621      	mov	r1, r4
 80107cc:	bf28      	it	cs
 80107ce:	4632      	movcs	r2, r6
 80107d0:	f000 f878 	bl	80108c4 <memcpy>
 80107d4:	4621      	mov	r1, r4
 80107d6:	4640      	mov	r0, r8
 80107d8:	f000 f882 	bl	80108e0 <_free_r>
 80107dc:	463c      	mov	r4, r7
 80107de:	e7e0      	b.n	80107a2 <_realloc_r+0x1e>

080107e0 <memset>:
 80107e0:	4402      	add	r2, r0
 80107e2:	4603      	mov	r3, r0
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d100      	bne.n	80107ea <memset+0xa>
 80107e8:	4770      	bx	lr
 80107ea:	f803 1b01 	strb.w	r1, [r3], #1
 80107ee:	e7f9      	b.n	80107e4 <memset+0x4>

080107f0 <strcat>:
 80107f0:	b510      	push	{r4, lr}
 80107f2:	4602      	mov	r2, r0
 80107f4:	7814      	ldrb	r4, [r2, #0]
 80107f6:	4613      	mov	r3, r2
 80107f8:	3201      	adds	r2, #1
 80107fa:	2c00      	cmp	r4, #0
 80107fc:	d1fa      	bne.n	80107f4 <strcat+0x4>
 80107fe:	3b01      	subs	r3, #1
 8010800:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010804:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010808:	2a00      	cmp	r2, #0
 801080a:	d1f9      	bne.n	8010800 <strcat+0x10>
 801080c:	bd10      	pop	{r4, pc}

0801080e <strrchr>:
 801080e:	b538      	push	{r3, r4, r5, lr}
 8010810:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8010814:	4603      	mov	r3, r0
 8010816:	d10e      	bne.n	8010836 <strrchr+0x28>
 8010818:	4621      	mov	r1, r4
 801081a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801081e:	f000 b8b1 	b.w	8010984 <strchr>
 8010822:	1c43      	adds	r3, r0, #1
 8010824:	4605      	mov	r5, r0
 8010826:	4621      	mov	r1, r4
 8010828:	4618      	mov	r0, r3
 801082a:	f000 f8ab 	bl	8010984 <strchr>
 801082e:	2800      	cmp	r0, #0
 8010830:	d1f7      	bne.n	8010822 <strrchr+0x14>
 8010832:	4628      	mov	r0, r5
 8010834:	bd38      	pop	{r3, r4, r5, pc}
 8010836:	2500      	movs	r5, #0
 8010838:	e7f5      	b.n	8010826 <strrchr+0x18>
	...

0801083c <_sbrk_r>:
 801083c:	b538      	push	{r3, r4, r5, lr}
 801083e:	4d06      	ldr	r5, [pc, #24]	@ (8010858 <_sbrk_r+0x1c>)
 8010840:	2300      	movs	r3, #0
 8010842:	4604      	mov	r4, r0
 8010844:	4608      	mov	r0, r1
 8010846:	602b      	str	r3, [r5, #0]
 8010848:	f7f6 f948 	bl	8006adc <_sbrk>
 801084c:	1c43      	adds	r3, r0, #1
 801084e:	d102      	bne.n	8010856 <_sbrk_r+0x1a>
 8010850:	682b      	ldr	r3, [r5, #0]
 8010852:	b103      	cbz	r3, 8010856 <_sbrk_r+0x1a>
 8010854:	6023      	str	r3, [r4, #0]
 8010856:	bd38      	pop	{r3, r4, r5, pc}
 8010858:	200148b0 	.word	0x200148b0

0801085c <__errno>:
 801085c:	4b01      	ldr	r3, [pc, #4]	@ (8010864 <__errno+0x8>)
 801085e:	6818      	ldr	r0, [r3, #0]
 8010860:	4770      	bx	lr
 8010862:	bf00      	nop
 8010864:	2000001c 	.word	0x2000001c

08010868 <__libc_init_array>:
 8010868:	b570      	push	{r4, r5, r6, lr}
 801086a:	4d0d      	ldr	r5, [pc, #52]	@ (80108a0 <__libc_init_array+0x38>)
 801086c:	4c0d      	ldr	r4, [pc, #52]	@ (80108a4 <__libc_init_array+0x3c>)
 801086e:	1b64      	subs	r4, r4, r5
 8010870:	10a4      	asrs	r4, r4, #2
 8010872:	2600      	movs	r6, #0
 8010874:	42a6      	cmp	r6, r4
 8010876:	d109      	bne.n	801088c <__libc_init_array+0x24>
 8010878:	4d0b      	ldr	r5, [pc, #44]	@ (80108a8 <__libc_init_array+0x40>)
 801087a:	4c0c      	ldr	r4, [pc, #48]	@ (80108ac <__libc_init_array+0x44>)
 801087c:	f000 f890 	bl	80109a0 <_init>
 8010880:	1b64      	subs	r4, r4, r5
 8010882:	10a4      	asrs	r4, r4, #2
 8010884:	2600      	movs	r6, #0
 8010886:	42a6      	cmp	r6, r4
 8010888:	d105      	bne.n	8010896 <__libc_init_array+0x2e>
 801088a:	bd70      	pop	{r4, r5, r6, pc}
 801088c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010890:	4798      	blx	r3
 8010892:	3601      	adds	r6, #1
 8010894:	e7ee      	b.n	8010874 <__libc_init_array+0xc>
 8010896:	f855 3b04 	ldr.w	r3, [r5], #4
 801089a:	4798      	blx	r3
 801089c:	3601      	adds	r6, #1
 801089e:	e7f2      	b.n	8010886 <__libc_init_array+0x1e>
 80108a0:	08011a70 	.word	0x08011a70
 80108a4:	08011a70 	.word	0x08011a70
 80108a8:	08011a70 	.word	0x08011a70
 80108ac:	08011a74 	.word	0x08011a74

080108b0 <__retarget_lock_acquire_recursive>:
 80108b0:	4770      	bx	lr

080108b2 <__retarget_lock_release_recursive>:
 80108b2:	4770      	bx	lr

080108b4 <strcpy>:
 80108b4:	4603      	mov	r3, r0
 80108b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80108ba:	f803 2b01 	strb.w	r2, [r3], #1
 80108be:	2a00      	cmp	r2, #0
 80108c0:	d1f9      	bne.n	80108b6 <strcpy+0x2>
 80108c2:	4770      	bx	lr

080108c4 <memcpy>:
 80108c4:	440a      	add	r2, r1
 80108c6:	4291      	cmp	r1, r2
 80108c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80108cc:	d100      	bne.n	80108d0 <memcpy+0xc>
 80108ce:	4770      	bx	lr
 80108d0:	b510      	push	{r4, lr}
 80108d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108da:	4291      	cmp	r1, r2
 80108dc:	d1f9      	bne.n	80108d2 <memcpy+0xe>
 80108de:	bd10      	pop	{r4, pc}

080108e0 <_free_r>:
 80108e0:	b538      	push	{r3, r4, r5, lr}
 80108e2:	4605      	mov	r5, r0
 80108e4:	2900      	cmp	r1, #0
 80108e6:	d041      	beq.n	801096c <_free_r+0x8c>
 80108e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108ec:	1f0c      	subs	r4, r1, #4
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	bfb8      	it	lt
 80108f2:	18e4      	addlt	r4, r4, r3
 80108f4:	f7ff ff32 	bl	801075c <__malloc_lock>
 80108f8:	4a1d      	ldr	r2, [pc, #116]	@ (8010970 <_free_r+0x90>)
 80108fa:	6813      	ldr	r3, [r2, #0]
 80108fc:	b933      	cbnz	r3, 801090c <_free_r+0x2c>
 80108fe:	6063      	str	r3, [r4, #4]
 8010900:	6014      	str	r4, [r2, #0]
 8010902:	4628      	mov	r0, r5
 8010904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010908:	f7ff bf2e 	b.w	8010768 <__malloc_unlock>
 801090c:	42a3      	cmp	r3, r4
 801090e:	d908      	bls.n	8010922 <_free_r+0x42>
 8010910:	6820      	ldr	r0, [r4, #0]
 8010912:	1821      	adds	r1, r4, r0
 8010914:	428b      	cmp	r3, r1
 8010916:	bf01      	itttt	eq
 8010918:	6819      	ldreq	r1, [r3, #0]
 801091a:	685b      	ldreq	r3, [r3, #4]
 801091c:	1809      	addeq	r1, r1, r0
 801091e:	6021      	streq	r1, [r4, #0]
 8010920:	e7ed      	b.n	80108fe <_free_r+0x1e>
 8010922:	461a      	mov	r2, r3
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	b10b      	cbz	r3, 801092c <_free_r+0x4c>
 8010928:	42a3      	cmp	r3, r4
 801092a:	d9fa      	bls.n	8010922 <_free_r+0x42>
 801092c:	6811      	ldr	r1, [r2, #0]
 801092e:	1850      	adds	r0, r2, r1
 8010930:	42a0      	cmp	r0, r4
 8010932:	d10b      	bne.n	801094c <_free_r+0x6c>
 8010934:	6820      	ldr	r0, [r4, #0]
 8010936:	4401      	add	r1, r0
 8010938:	1850      	adds	r0, r2, r1
 801093a:	4283      	cmp	r3, r0
 801093c:	6011      	str	r1, [r2, #0]
 801093e:	d1e0      	bne.n	8010902 <_free_r+0x22>
 8010940:	6818      	ldr	r0, [r3, #0]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	6053      	str	r3, [r2, #4]
 8010946:	4408      	add	r0, r1
 8010948:	6010      	str	r0, [r2, #0]
 801094a:	e7da      	b.n	8010902 <_free_r+0x22>
 801094c:	d902      	bls.n	8010954 <_free_r+0x74>
 801094e:	230c      	movs	r3, #12
 8010950:	602b      	str	r3, [r5, #0]
 8010952:	e7d6      	b.n	8010902 <_free_r+0x22>
 8010954:	6820      	ldr	r0, [r4, #0]
 8010956:	1821      	adds	r1, r4, r0
 8010958:	428b      	cmp	r3, r1
 801095a:	bf04      	itt	eq
 801095c:	6819      	ldreq	r1, [r3, #0]
 801095e:	685b      	ldreq	r3, [r3, #4]
 8010960:	6063      	str	r3, [r4, #4]
 8010962:	bf04      	itt	eq
 8010964:	1809      	addeq	r1, r1, r0
 8010966:	6021      	streq	r1, [r4, #0]
 8010968:	6054      	str	r4, [r2, #4]
 801096a:	e7ca      	b.n	8010902 <_free_r+0x22>
 801096c:	bd38      	pop	{r3, r4, r5, pc}
 801096e:	bf00      	nop
 8010970:	20014774 	.word	0x20014774

08010974 <_malloc_usable_size_r>:
 8010974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010978:	1f18      	subs	r0, r3, #4
 801097a:	2b00      	cmp	r3, #0
 801097c:	bfbc      	itt	lt
 801097e:	580b      	ldrlt	r3, [r1, r0]
 8010980:	18c0      	addlt	r0, r0, r3
 8010982:	4770      	bx	lr

08010984 <strchr>:
 8010984:	b2c9      	uxtb	r1, r1
 8010986:	4603      	mov	r3, r0
 8010988:	4618      	mov	r0, r3
 801098a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801098e:	b112      	cbz	r2, 8010996 <strchr+0x12>
 8010990:	428a      	cmp	r2, r1
 8010992:	d1f9      	bne.n	8010988 <strchr+0x4>
 8010994:	4770      	bx	lr
 8010996:	2900      	cmp	r1, #0
 8010998:	bf18      	it	ne
 801099a:	2000      	movne	r0, #0
 801099c:	4770      	bx	lr
	...

080109a0 <_init>:
 80109a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109a2:	bf00      	nop
 80109a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109a6:	bc08      	pop	{r3}
 80109a8:	469e      	mov	lr, r3
 80109aa:	4770      	bx	lr

080109ac <_fini>:
 80109ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ae:	bf00      	nop
 80109b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109b2:	bc08      	pop	{r3}
 80109b4:	469e      	mov	lr, r3
 80109b6:	4770      	bx	lr
