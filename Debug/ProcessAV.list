
ProcessAV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e33c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f98  0800e4c4  0800e4c4  0000f4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f45c  0800f45c  0001106c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f45c  0800f45c  0001045c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f464  0800f464  0001106c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f464  0800f464  00010464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f468  0800f468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800f46c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001106c  2**0
                  CONTENTS
 10 .bss          00014848  2000006c  2000006c  0001106c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200148b4  200148b4  0001106c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001106c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c422  00000000  00000000  0001109c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004497  00000000  00000000  0002d4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001958  00000000  00000000  00031958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001389  00000000  00000000  000332b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026421  00000000  00000000  00034639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021d73  00000000  00000000  0005aa5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6f20  00000000  00000000  0007c7cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001536ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006dc4  00000000  00000000  00153730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0015a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800e4ac 	.word	0x0800e4ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	0800e4ac 	.word	0x0800e4ac

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <Task0>:
 * de nivel inalt. Meniu de utilizator, teste ale
 * functiilor dezvoltate etc.
 */

static volatile void Task0()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0

	ENTITY entity;
	entity.x0 = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	813b      	strh	r3, [r7, #8]
	entity.x1 = 64;
 80004d6:	2340      	movs	r3, #64	@ 0x40
 80004d8:	817b      	strh	r3, [r7, #10]
	entity.y1 = 64;
 80004da:	2340      	movs	r3, #64	@ 0x40
 80004dc:	81bb      	strh	r3, [r7, #12]
	entity.id = 0x80;
 80004de:	2380      	movs	r3, #128	@ 0x80
 80004e0:	713b      	strb	r3, [r7, #4]
	entity.ST.color = 0xF100;
 80004e2:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80004e6:	823b      	strh	r3, [r7, #16]
    {
        //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
        //mutex = 1;
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
        translation_test(&entity, 1, 0);
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	2101      	movs	r1, #1
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 ffde 	bl	80014b0 <translation_test>
 80004f4:	e7f8      	b.n	80004e8 <Task0+0x20>
	...

080004f8 <Task1>:
    	//mutex = 0;
    }
}

static volatile void Task1()
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0

    while(1)
    {
    	play_audio_file("Audio/acoustic.txt");
 80004fc:	4803      	ldr	r0, [pc, #12]	@ (800050c <Task1+0x14>)
 80004fe:	f000 f943 	bl	8000788 <play_audio_file>
    	kernel_delay(20);
 8000502:	2014      	movs	r0, #20
 8000504:	f001 fc58 	bl	8001db8 <kernel_delay>
    	play_audio_file("Audio/acoustic.txt");
 8000508:	bf00      	nop
 800050a:	e7f7      	b.n	80004fc <Task1+0x4>
 800050c:	0800e4c4 	.word	0x0800e4c4

08000510 <Task2>:
    }
}
*/

static volatile void Task2()
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
	ENTITY entity;
	entity.x0 = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	80fb      	strh	r3, [r7, #6]
	entity.y0 = 300;
 800051a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800051e:	813b      	strh	r3, [r7, #8]
	entity.x1 = 64;
 8000520:	2340      	movs	r3, #64	@ 0x40
 8000522:	817b      	strh	r3, [r7, #10]
	entity.y1 = 64;
 8000524:	2340      	movs	r3, #64	@ 0x40
 8000526:	81bb      	strh	r3, [r7, #12]
	entity.id = 0x80;
 8000528:	2380      	movs	r3, #128	@ 0x80
 800052a:	713b      	strb	r3, [r7, #4]
	entity.ST.color = 0xF100;
 800052c:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8000530:	823b      	strh	r3, [r7, #16]

    	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
    	//flagg = 1;
    	//mutex = 1;
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
        translation_test(&entity, 1, 0);
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2200      	movs	r2, #0
 8000536:	2101      	movs	r1, #1
 8000538:	4618      	mov	r0, r3
 800053a:	f000 ffb9 	bl	80014b0 <translation_test>
 800053e:	e7f8      	b.n	8000532 <Task2+0x22>

08000540 <demo_os_1>:
	}
}


static void demo_os_1()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af02      	add	r7, sp, #8
	  BackGroundColor = 0xFFFF;
 8000546:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <demo_os_1+0x44>)
 8000548:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800054c:	801a      	strh	r2, [r3, #0]
	  fill_screen2(0xFFFF);
 800054e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000552:	f000 fad5 	bl	8000b00 <fill_screen2>
	  print_string(128, 128, "os demo",0xF100, BackGroundColor);
 8000556:	4b0b      	ldr	r3, [pc, #44]	@ (8000584 <demo_os_1+0x44>)
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8000560:	4a09      	ldr	r2, [pc, #36]	@ (8000588 <demo_os_1+0x48>)
 8000562:	2180      	movs	r1, #128	@ 0x80
 8000564:	2080      	movs	r0, #128	@ 0x80
 8000566:	f000 fc27 	bl	8000db8 <print_string>

	  kernel_add_process(Task0);
 800056a:	4808      	ldr	r0, [pc, #32]	@ (800058c <demo_os_1+0x4c>)
 800056c:	f001 fb28 	bl	8001bc0 <kernel_add_process>
	  kernel_add_process(Task1);
 8000570:	4807      	ldr	r0, [pc, #28]	@ (8000590 <demo_os_1+0x50>)
 8000572:	f001 fb25 	bl	8001bc0 <kernel_add_process>
	  kernel_add_process(Task2);
 8000576:	4807      	ldr	r0, [pc, #28]	@ (8000594 <demo_os_1+0x54>)
 8000578:	f001 fb22 	bl	8001bc0 <kernel_add_process>
	  //kernel_add_process(Task3);
	  //kernel_add_process(Task4);
	  //kernel_add_process(Task5);
	  kernel_start();
 800057c:	f001 fbfe 	bl	8001d7c <kernel_start>

	  while(1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <demo_os_1+0x40>
 8000584:	20000008 	.word	0x20000008
 8000588:	0800e4d8 	.word	0x0800e4d8
 800058c:	080004c9 	.word	0x080004c9
 8000590:	080004f9 	.word	0x080004f9
 8000594:	08000511 	.word	0x08000511

08000598 <set_main_gui>:

	  }
}

static void set_main_gui(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af02      	add	r7, sp, #8
	 * user.
	 * Input: void
	 * Output: void
	 */

	init_cursor();
 800059e:	f000 f979 	bl	8000894 <init_cursor>

	BackGroundColor = WHITE;
 80005a2:	4b41      	ldr	r3, [pc, #260]	@ (80006a8 <set_main_gui+0x110>)
 80005a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005a8:	801a      	strh	r2, [r3, #0]
	fill_screen1(BackGroundColor);
 80005aa:	4b3f      	ldr	r3, [pc, #252]	@ (80006a8 <set_main_gui+0x110>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fa46 	bl	8000a40 <fill_screen1>
	cursor.y0 = 16;
 80005b4:	4b3d      	ldr	r3, [pc, #244]	@ (80006ac <set_main_gui+0x114>)
 80005b6:	2210      	movs	r2, #16
 80005b8:	809a      	strh	r2, [r3, #4]
	cursor.x0 = 32;
 80005ba:	4b3c      	ldr	r3, [pc, #240]	@ (80006ac <set_main_gui+0x114>)
 80005bc:	2220      	movs	r2, #32
 80005be:	805a      	strh	r2, [r3, #2]

	print_string(cursor.x0, cursor.y0, "My Menu", BLACK, BackGroundColor);
 80005c0:	4b3a      	ldr	r3, [pc, #232]	@ (80006ac <set_main_gui+0x114>)
 80005c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005c6:	b298      	uxth	r0, r3
 80005c8:	4b38      	ldr	r3, [pc, #224]	@ (80006ac <set_main_gui+0x114>)
 80005ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005ce:	b299      	uxth	r1, r3
 80005d0:	4b35      	ldr	r3, [pc, #212]	@ (80006a8 <set_main_gui+0x110>)
 80005d2:	881b      	ldrh	r3, [r3, #0]
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2300      	movs	r3, #0
 80005d8:	4a35      	ldr	r2, [pc, #212]	@ (80006b0 <set_main_gui+0x118>)
 80005da:	f000 fbed 	bl	8000db8 <print_string>
	cursor.y0 += 32;
 80005de:	4b33      	ldr	r3, [pc, #204]	@ (80006ac <set_main_gui+0x114>)
 80005e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	3320      	adds	r3, #32
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	b21a      	sxth	r2, r3
 80005ec:	4b2f      	ldr	r3, [pc, #188]	@ (80006ac <set_main_gui+0x114>)
 80005ee:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Operating Systems", BLACK, BackGroundColor);
 80005f0:	4b2e      	ldr	r3, [pc, #184]	@ (80006ac <set_main_gui+0x114>)
 80005f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005f6:	b298      	uxth	r0, r3
 80005f8:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <set_main_gui+0x114>)
 80005fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005fe:	b299      	uxth	r1, r3
 8000600:	4b29      	ldr	r3, [pc, #164]	@ (80006a8 <set_main_gui+0x110>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	4a2a      	ldr	r2, [pc, #168]	@ (80006b4 <set_main_gui+0x11c>)
 800060a:	f000 fbd5 	bl	8000db8 <print_string>
	cursor.y0 += 16;
 800060e:	4b27      	ldr	r3, [pc, #156]	@ (80006ac <set_main_gui+0x114>)
 8000610:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000614:	b29b      	uxth	r3, r3
 8000616:	3310      	adds	r3, #16
 8000618:	b29b      	uxth	r3, r3
 800061a:	b21a      	sxth	r2, r3
 800061c:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <set_main_gui+0x114>)
 800061e:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Graphics", BLACK, BackGroundColor);
 8000620:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <set_main_gui+0x114>)
 8000622:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000626:	b298      	uxth	r0, r3
 8000628:	4b20      	ldr	r3, [pc, #128]	@ (80006ac <set_main_gui+0x114>)
 800062a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800062e:	b299      	uxth	r1, r3
 8000630:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <set_main_gui+0x110>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	4a1f      	ldr	r2, [pc, #124]	@ (80006b8 <set_main_gui+0x120>)
 800063a:	f000 fbbd 	bl	8000db8 <print_string>
	cursor.y0 += 16;
 800063e:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <set_main_gui+0x114>)
 8000640:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000644:	b29b      	uxth	r3, r3
 8000646:	3310      	adds	r3, #16
 8000648:	b29b      	uxth	r3, r3
 800064a:	b21a      	sxth	r2, r3
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <set_main_gui+0x114>)
 800064e:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "Audio", BLACK, BackGroundColor);
 8000650:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <set_main_gui+0x114>)
 8000652:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000656:	b298      	uxth	r0, r3
 8000658:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <set_main_gui+0x114>)
 800065a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800065e:	b299      	uxth	r1, r3
 8000660:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <set_main_gui+0x110>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	4a14      	ldr	r2, [pc, #80]	@ (80006bc <set_main_gui+0x124>)
 800066a:	f000 fba5 	bl	8000db8 <print_string>
	cursor.y0 += 16;
 800066e:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <set_main_gui+0x114>)
 8000670:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000674:	b29b      	uxth	r3, r3
 8000676:	3310      	adds	r3, #16
 8000678:	b29b      	uxth	r3, r3
 800067a:	b21a      	sxth	r2, r3
 800067c:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <set_main_gui+0x114>)
 800067e:	809a      	strh	r2, [r3, #4]
	print_string(cursor.x0, cursor.y0, "App1", BLACK, BackGroundColor);
 8000680:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <set_main_gui+0x114>)
 8000682:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000686:	b298      	uxth	r0, r3
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <set_main_gui+0x114>)
 800068a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800068e:	b299      	uxth	r1, r3
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <set_main_gui+0x110>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	4a09      	ldr	r2, [pc, #36]	@ (80006c0 <set_main_gui+0x128>)
 800069a:	f000 fb8d 	bl	8000db8 <print_string>

	init_cursor();
 800069e:	f000 f8f9 	bl	8000894 <init_cursor>

}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000090 	.word	0x20000090
 80006b0:	0800e4e0 	.word	0x0800e4e0
 80006b4:	0800e4e8 	.word	0x0800e4e8
 80006b8:	0800e4fc 	.word	0x0800e4fc
 80006bc:	0800e508 	.word	0x0800e508
 80006c0:	0800e510 	.word	0x0800e510

080006c4 <main_app>:


void main_app()
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
	 * Meniul prinicpal al aplicatiei.
	 * Input: void
	 * Output: void
	 */

	set_main_gui();
 80006ca:	f7ff ff65 	bl	8000598 <set_main_gui>

	cursor.x0 = 0;
 80006ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <main_app+0xbc>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	805a      	strh	r2, [r3, #2]
	cursor.y0 = 48;
 80006d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000780 <main_app+0xbc>)
 80006d6:	2230      	movs	r2, #48	@ 0x30
 80006d8:	809a      	strh	r2, [r3, #4]

	int16_t x = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	807b      	strh	r3, [r7, #2]
	int16_t y = 48;
 80006de:	2330      	movs	r3, #48	@ 0x30
 80006e0:	80fb      	strh	r3, [r7, #6]

	uint8_t Q = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	717b      	strb	r3, [r7, #5]

	draw_entity(&cursor);
 80006e6:	4826      	ldr	r0, [pc, #152]	@ (8000780 <main_app+0xbc>)
 80006e8:	f000 fca8 	bl	800103c <draw_entity>

	while(1)
	{
		if(currentDx == DxDown)
 80006ec:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <main_app+0xc0>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b08      	cmp	r3, #8
 80006f2:	d119      	bne.n	8000728 <main_app+0x64>
		{
			if(Q == 3)
 80006f4:	797b      	ldrb	r3, [r7, #5]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d104      	bne.n	8000704 <main_app+0x40>
			{
				Q = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	717b      	strb	r3, [r7, #5]
				y = 48;
 80006fe:	2330      	movs	r3, #48	@ 0x30
 8000700:	80fb      	strh	r3, [r7, #6]
 8000702:	e006      	b.n	8000712 <main_app+0x4e>
			}

			else
			{
				Q++;
 8000704:	797b      	ldrb	r3, [r7, #5]
 8000706:	3301      	adds	r3, #1
 8000708:	717b      	strb	r3, [r7, #5]
				y += 16;
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	3310      	adds	r3, #16
 800070e:	b29b      	uxth	r3, r3
 8000710:	80fb      	strh	r3, [r7, #6]
			}

			translation_entity(&cursor, x, y, 0);
 8000712:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000716:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800071a:	2300      	movs	r3, #0
 800071c:	4818      	ldr	r0, [pc, #96]	@ (8000780 <main_app+0xbc>)
 800071e:	f000 fd99 	bl	8001254 <translation_entity>
			currentDx = 0;
 8000722:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <main_app+0xc0>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxUp)
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <main_app+0xc0>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b04      	cmp	r3, #4
 800072e:	d119      	bne.n	8000764 <main_app+0xa0>
		{
			if(Q == 0)
 8000730:	797b      	ldrb	r3, [r7, #5]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d104      	bne.n	8000740 <main_app+0x7c>
			{
				Q = 3;
 8000736:	2303      	movs	r3, #3
 8000738:	717b      	strb	r3, [r7, #5]
				y = 48+16*3;
 800073a:	2360      	movs	r3, #96	@ 0x60
 800073c:	80fb      	strh	r3, [r7, #6]
 800073e:	e006      	b.n	800074e <main_app+0x8a>
			}
			else
			{
				Q--;
 8000740:	797b      	ldrb	r3, [r7, #5]
 8000742:	3b01      	subs	r3, #1
 8000744:	717b      	strb	r3, [r7, #5]
				y -= 16;
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	3b10      	subs	r3, #16
 800074a:	b29b      	uxth	r3, r3
 800074c:	80fb      	strh	r3, [r7, #6]
			}

			translation_entity(&cursor, x, y, 0);
 800074e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000752:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000756:	2300      	movs	r3, #0
 8000758:	4809      	ldr	r0, [pc, #36]	@ (8000780 <main_app+0xbc>)
 800075a:	f000 fd7b 	bl	8001254 <translation_entity>
			currentDx = 0;
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <main_app+0xc0>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
		}

		if(currentDx == DxRight)
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <main_app+0xc0>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d1bf      	bne.n	80006ec <main_app+0x28>
		{
			if(Q == 0)
 800076c:	797b      	ldrb	r3, [r7, #5]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1bc      	bne.n	80006ec <main_app+0x28>
			{
				currentDx = 0;
 8000772:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <main_app+0xc0>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
				demo_os_1();
 8000778:	f7ff fee2 	bl	8000540 <demo_os_1>
		if(currentDx == DxDown)
 800077c:	e7b6      	b.n	80006ec <main_app+0x28>
 800077e:	bf00      	nop
 8000780:	20000090 	.word	0x20000090
 8000784:	2000008d 	.word	0x2000008d

08000788 <play_audio_file>:
static bool flagBuffer = 0; /*Flag pentru a indica bufferul curent de redare*/



void play_audio_file(char *path)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af02      	add	r7, sp, #8
 800078e:	6078      	str	r0, [r7, #4]
	 * se va iesi din while(1), resetand fisierul la 0 si oprind fluxul DMA
	 * Input: path-ul fisierului dorit de redat
	 * Output: Void
	 */

	buffer = malloc(sizeof(uint32_t)*2048);
 8000790:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000794:	f00d fcb6 	bl	800e104 <malloc>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	4b39      	ldr	r3, [pc, #228]	@ (8000884 <play_audio_file+0xfc>)
 800079e:	601a      	str	r2, [r3, #0]

	bool flagAudioDone = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	73fb      	strb	r3, [r7, #15]

	if(buffer == NULL)
 80007a4:	4b37      	ldr	r3, [pc, #220]	@ (8000884 <play_audio_file+0xfc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d067      	beq.n	800087c <play_audio_file+0xf4>
	{
		/*Alocare dinamica esuata*/
		return;
	}

	mutex = 1;
 80007ac:	4b36      	ldr	r3, [pc, #216]	@ (8000888 <play_audio_file+0x100>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	601a      	str	r2, [r3, #0]
	read_audio_file(path, buffer, &flagAudioDone); /*Citire in prima jumatate a bufferului -> 1024 de elemente*/
 80007b2:	4b34      	ldr	r3, [pc, #208]	@ (8000884 <play_audio_file+0xfc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f107 020f 	add.w	r2, r7, #15
 80007ba:	4619      	mov	r1, r3
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f002 fda5 	bl	800330c <read_audio_file>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, buffer, 2048, DAC_ALIGN_12B_R);
 80007c2:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <play_audio_file+0xfc>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	2300      	movs	r3, #0
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007ce:	2100      	movs	r1, #0
 80007d0:	482e      	ldr	r0, [pc, #184]	@ (800088c <play_audio_file+0x104>)
 80007d2:	f004 f945 	bl	8004a60 <HAL_DAC_Start_DMA>

	while(!flagAudioDone)
 80007d6:	e035      	b.n	8000844 <play_audio_file+0xbc>
	{
		mutex = 1;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <play_audio_file+0x100>)
 80007da:	2201      	movs	r2, #1
 80007dc:	601a      	str	r2, [r3, #0]
		read_audio_file(path, buffer+1024, &flagAudioDone);
 80007de:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <play_audio_file+0xfc>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80007e6:	f107 020f 	add.w	r2, r7, #15
 80007ea:	4619      	mov	r1, r3
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f002 fd8d 	bl	800330c <read_audio_file>
		mutex = 0;
 80007f2:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <play_audio_file+0x100>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
		while(flagDmaDAC == 0);
 80007f8:	bf00      	nop
 80007fa:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <play_audio_file+0x108>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f083 0301 	eor.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d1f7      	bne.n	80007fa <play_audio_file+0x72>
		flagDmaDAC = 0;
 800080a:	4b21      	ldr	r3, [pc, #132]	@ (8000890 <play_audio_file+0x108>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
		mutex = 1;
 8000810:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <play_audio_file+0x100>)
 8000812:	2201      	movs	r2, #1
 8000814:	601a      	str	r2, [r3, #0]
		read_audio_file(path, buffer, &flagAudioDone);
 8000816:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <play_audio_file+0xfc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f107 020f 	add.w	r2, r7, #15
 800081e:	4619      	mov	r1, r3
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f002 fd73 	bl	800330c <read_audio_file>
		mutex = 0;
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <play_audio_file+0x100>)
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
		while(flagDmaDAC == 0);
 800082c:	bf00      	nop
 800082e:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <play_audio_file+0x108>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	f083 0301 	eor.w	r3, r3, #1
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1f7      	bne.n	800082e <play_audio_file+0xa6>
		flagDmaDAC = 0;
 800083e:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <play_audio_file+0x108>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
	while(!flagAudioDone)
 8000844:	7bfb      	ldrb	r3, [r7, #15]
 8000846:	f083 0301 	eor.w	r3, r3, #1
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1c3      	bne.n	80007d8 <play_audio_file+0x50>

	}

	while(flagDmaDAC == 0);
 8000850:	bf00      	nop
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <play_audio_file+0x108>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	f083 0301 	eor.w	r3, r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f7      	bne.n	8000852 <play_audio_file+0xca>
	flagDmaDAC = 0;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <play_audio_file+0x108>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]

	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000868:	2100      	movs	r1, #0
 800086a:	4808      	ldr	r0, [pc, #32]	@ (800088c <play_audio_file+0x104>)
 800086c:	f004 f9ba 	bl	8004be4 <HAL_DAC_Stop_DMA>

	free(buffer);
 8000870:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <play_audio_file+0xfc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f00d fc4d 	bl	800e114 <free>
 800087a:	e000      	b.n	800087e <play_audio_file+0xf6>
		return;
 800087c:	bf00      	nop

}
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000088 	.word	0x20000088
 8000888:	200000a8 	.word	0x200000a8
 800088c:	20014180 	.word	0x20014180
 8000890:	200144c2 	.word	0x200144c2

08000894 <init_cursor>:
uint16_t BackGroundColor = 0xFFFF; /*Variabila globala pentru culoarea de fundal curenta*/

ENTITY cursor;

void init_cursor()
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
	cursor.id = 0x88;
 8000898:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <init_cursor+0x34>)
 800089a:	2288      	movs	r2, #136	@ 0x88
 800089c:	701a      	strb	r2, [r3, #0]
	cursor.x0 = 0;
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <init_cursor+0x34>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	805a      	strh	r2, [r3, #2]
	cursor.y0 = 0;
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <init_cursor+0x34>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	809a      	strh	r2, [r3, #4]
	cursor.x1 = 16;
 80008aa:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <init_cursor+0x34>)
 80008ac:	2210      	movs	r2, #16
 80008ae:	80da      	strh	r2, [r3, #6]
	cursor.y1 = 16;
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <init_cursor+0x34>)
 80008b2:	2210      	movs	r2, #16
 80008b4:	811a      	strh	r2, [r3, #8]
	cursor.ST.color = RED;
 80008b6:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <init_cursor+0x34>)
 80008b8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80008bc:	819a      	strh	r2, [r3, #12]
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	20000090 	.word	0x20000090

080008cc <convert_color_16_to_18>:


void convert_color_16_to_18(uint16_t color, uint8_t *const pixel)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	6039      	str	r1, [r7, #0]
 80008d6:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	0adb      	lsrs	r3, r3, #11
 80008dc:	b29b      	uxth	r3, r3
 80008de:	73fb      	strb	r3, [r7, #15]
	g = (color & 0x07E0) >> 5;
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	115b      	asrs	r3, r3, #5
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80008ea:	73bb      	strb	r3, [r7, #14]
	b = color & 0x001F;
 80008ec:	88fb      	ldrh	r3, [r7, #6]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	f003 031f 	and.w	r3, r3, #31
 80008f4:	737b      	strb	r3, [r7, #13]

	//16bit->18bit extindere respectand forma de transmisie

	r = (63*r)/31 << 2;
 80008f6:	7bfa      	ldrb	r2, [r7, #15]
 80008f8:	4613      	mov	r3, r2
 80008fa:	019b      	lsls	r3, r3, #6
 80008fc:	1a9b      	subs	r3, r3, r2
 80008fe:	4a16      	ldr	r2, [pc, #88]	@ (8000958 <convert_color_16_to_18+0x8c>)
 8000900:	fb82 1203 	smull	r1, r2, r2, r3
 8000904:	441a      	add	r2, r3
 8000906:	1112      	asrs	r2, r2, #4
 8000908:	17db      	asrs	r3, r3, #31
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	73fb      	strb	r3, [r7, #15]
	g = (63*g)/63 << 2;
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	73bb      	strb	r3, [r7, #14]
	b = (63*b)/31 << 2;
 8000918:	7b7a      	ldrb	r2, [r7, #13]
 800091a:	4613      	mov	r3, r2
 800091c:	019b      	lsls	r3, r3, #6
 800091e:	1a9b      	subs	r3, r3, r2
 8000920:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <convert_color_16_to_18+0x8c>)
 8000922:	fb82 1203 	smull	r1, r2, r2, r3
 8000926:	441a      	add	r2, r3
 8000928:	1112      	asrs	r2, r2, #4
 800092a:	17db      	asrs	r3, r3, #31
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	737b      	strb	r3, [r7, #13]

	pixel[0] = r;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	7bfa      	ldrb	r2, [r7, #15]
 8000938:	701a      	strb	r2, [r3, #0]
	pixel[1] = g;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	3301      	adds	r3, #1
 800093e:	7bba      	ldrb	r2, [r7, #14]
 8000940:	701a      	strb	r2, [r3, #0]
	pixel[2] = b;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	3302      	adds	r3, #2
 8000946:	7b7a      	ldrb	r2, [r7, #13]
 8000948:	701a      	strb	r2, [r3, #0]

}
 800094a:	bf00      	nop
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	84210843 	.word	0x84210843

0800095c <write_color>:


void write_color(uint16_t color)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t data[3];
	convert_color_16_to_18(color, data);
 8000966:	f107 020c 	add.w	r2, r7, #12
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ffac 	bl	80008cc <convert_color_16_to_18>
	//flagDmaSpiTx = 0;

	//HAL_SPI_Transmit_DMA(&hspi1, data, 3);

	//while(flagDmaSpiTx == 0);
	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000974:	f107 010c 	add.w	r1, r7, #12
 8000978:	f04f 33ff 	mov.w	r3, #4294967295
 800097c:	2203      	movs	r2, #3
 800097e:	4803      	ldr	r0, [pc, #12]	@ (800098c <write_color+0x30>)
 8000980:	f006 fce5 	bl	800734e <HAL_SPI_Transmit>


}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20014278 	.word	0x20014278

08000990 <draw_pixel>:


void draw_pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af02      	add	r7, sp, #8
 8000996:	4603      	mov	r3, r0
 8000998:	80fb      	strh	r3, [r7, #6]
 800099a:	460b      	mov	r3, r1
 800099c:	80bb      	strh	r3, [r7, #4]
 800099e:	4613      	mov	r3, r2
 80009a0:	807b      	strh	r3, [r7, #2]
	 * Functie pentru afisarea unui pixel pe ecran.
	 * Parametrii: Coordonatele (x,y) si culoarea
	 * Output: Void
	 */

	set_adress_window(x,y,x,y, 'w');
 80009a2:	88bb      	ldrh	r3, [r7, #4]
 80009a4:	88fa      	ldrh	r2, [r7, #6]
 80009a6:	88b9      	ldrh	r1, [r7, #4]
 80009a8:	88f8      	ldrh	r0, [r7, #6]
 80009aa:	2477      	movs	r4, #119	@ 0x77
 80009ac:	9400      	str	r4, [sp, #0]
 80009ae:	f001 fc71 	bl	8002294 <set_adress_window>

	DC_DATA();
 80009b2:	2201      	movs	r2, #1
 80009b4:	2108      	movs	r1, #8
 80009b6:	480a      	ldr	r0, [pc, #40]	@ (80009e0 <draw_pixel+0x50>)
 80009b8:	f004 fff6 	bl	80059a8 <HAL_GPIO_WritePin>
	CS_A();
 80009bc:	2200      	movs	r2, #0
 80009be:	2110      	movs	r1, #16
 80009c0:	4807      	ldr	r0, [pc, #28]	@ (80009e0 <draw_pixel+0x50>)
 80009c2:	f004 fff1 	bl	80059a8 <HAL_GPIO_WritePin>

	write_color(color);
 80009c6:	887b      	ldrh	r3, [r7, #2]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ffc7 	bl	800095c <write_color>

	CS_D();
 80009ce:	2201      	movs	r2, #1
 80009d0:	2110      	movs	r1, #16
 80009d2:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <draw_pixel+0x50>)
 80009d4:	f004 ffe8 	bl	80059a8 <HAL_GPIO_WritePin>

}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd90      	pop	{r4, r7, pc}
 80009e0:	40020c00 	.word	0x40020c00

080009e4 <draw_pixel_data>:


static inline void draw_pixel_data(uint16_t x, uint16_t y, uint8_t *data)
{
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af02      	add	r7, sp, #8
 80009ea:	4603      	mov	r3, r0
 80009ec:	603a      	str	r2, [r7, #0]
 80009ee:	80fb      	strh	r3, [r7, #6]
 80009f0:	460b      	mov	r3, r1
 80009f2:	80bb      	strh	r3, [r7, #4]
	set_adress_window(x,y,x,y, 'w');
 80009f4:	88bb      	ldrh	r3, [r7, #4]
 80009f6:	88fa      	ldrh	r2, [r7, #6]
 80009f8:	88b9      	ldrh	r1, [r7, #4]
 80009fa:	88f8      	ldrh	r0, [r7, #6]
 80009fc:	2477      	movs	r4, #119	@ 0x77
 80009fe:	9400      	str	r4, [sp, #0]
 8000a00:	f001 fc48 	bl	8002294 <set_adress_window>

	DC_DATA();
 8000a04:	2201      	movs	r2, #1
 8000a06:	2108      	movs	r1, #8
 8000a08:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <draw_pixel_data+0x54>)
 8000a0a:	f004 ffcd 	bl	80059a8 <HAL_GPIO_WritePin>
	CS_A();
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2110      	movs	r1, #16
 8000a12:	4809      	ldr	r0, [pc, #36]	@ (8000a38 <draw_pixel_data+0x54>)
 8000a14:	f004 ffc8 	bl	80059a8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, data, 3, HAL_MAX_DELAY);
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	4806      	ldr	r0, [pc, #24]	@ (8000a3c <draw_pixel_data+0x58>)
 8000a22:	f006 fc94 	bl	800734e <HAL_SPI_Transmit>

	CS_D();
 8000a26:	2201      	movs	r2, #1
 8000a28:	2110      	movs	r1, #16
 8000a2a:	4803      	ldr	r0, [pc, #12]	@ (8000a38 <draw_pixel_data+0x54>)
 8000a2c:	f004 ffbc 	bl	80059a8 <HAL_GPIO_WritePin>

}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	40020c00 	.word	0x40020c00
 8000a3c:	20014278 	.word	0x20014278

08000a40 <fill_screen1>:



void fill_screen1(uint16_t color)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af02      	add	r7, sp, #8
 8000a46:	4603      	mov	r3, r0
 8000a48:	80fb      	strh	r3, [r7, #6]
	 * Output: Void
	 */


	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000a4a:	f107 020c 	add.w	r2, r7, #12
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff3a 	bl	80008cc <convert_color_16_to_18>

	uint8_t *line = malloc(320*sizeof(pixel));
 8000a58:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8000a5c:	f00d fb52 	bl	800e104 <malloc>
 8000a60:	4603      	mov	r3, r0
 8000a62:	613b      	str	r3, [r7, #16]

	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8000a64:	2377      	movs	r3, #119	@ 0x77
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	f240 13df 	movw	r3, #479	@ 0x1df
 8000a6c:	f240 123f 	movw	r2, #319	@ 0x13f
 8000a70:	2100      	movs	r1, #0
 8000a72:	2000      	movs	r0, #0
 8000a74:	f001 fc0e 	bl	8002294 <set_adress_window>

	DC_DATA();
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2108      	movs	r1, #8
 8000a7c:	481e      	ldr	r0, [pc, #120]	@ (8000af8 <fill_screen1+0xb8>)
 8000a7e:	f004 ff93 	bl	80059a8 <HAL_GPIO_WritePin>
	CS_A();
 8000a82:	2200      	movs	r2, #0
 8000a84:	2110      	movs	r1, #16
 8000a86:	481c      	ldr	r0, [pc, #112]	@ (8000af8 <fill_screen1+0xb8>)
 8000a88:	f004 ff8e 	bl	80059a8 <HAL_GPIO_WritePin>

	for(uint16_t x=0; x<320; x++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	82fb      	strh	r3, [r7, #22]
 8000a90:	e00f      	b.n	8000ab2 <fill_screen1+0x72>
	{
		memcpy(line + x*sizeof(pixel), pixel, sizeof(pixel));
 8000a92:	8afa      	ldrh	r2, [r7, #22]
 8000a94:	4613      	mov	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4413      	add	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	8819      	ldrh	r1, [r3, #0]
 8000aa6:	789b      	ldrb	r3, [r3, #2]
 8000aa8:	8011      	strh	r1, [r2, #0]
 8000aaa:	7093      	strb	r3, [r2, #2]
	for(uint16_t x=0; x<320; x++)
 8000aac:	8afb      	ldrh	r3, [r7, #22]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	82fb      	strh	r3, [r7, #22]
 8000ab2:	8afb      	ldrh	r3, [r7, #22]
 8000ab4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ab8:	d3eb      	bcc.n	8000a92 <fill_screen1+0x52>
	}

	for(uint16_t y=0; y<480; y++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	82bb      	strh	r3, [r7, #20]
 8000abe:	e00a      	b.n	8000ad6 <fill_screen1+0x96>
	{

		HAL_SPI_Transmit(&hspi1, line, 320*sizeof(pixel), HAL_MAX_DELAY);
 8000ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac4:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000ac8:	6939      	ldr	r1, [r7, #16]
 8000aca:	480c      	ldr	r0, [pc, #48]	@ (8000afc <fill_screen1+0xbc>)
 8000acc:	f006 fc3f 	bl	800734e <HAL_SPI_Transmit>
	for(uint16_t y=0; y<480; y++)
 8000ad0:	8abb      	ldrh	r3, [r7, #20]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	82bb      	strh	r3, [r7, #20]
 8000ad6:	8abb      	ldrh	r3, [r7, #20]
 8000ad8:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000adc:	d3f0      	bcc.n	8000ac0 <fill_screen1+0x80>

	}

	free(line);
 8000ade:	6938      	ldr	r0, [r7, #16]
 8000ae0:	f00d fb18 	bl	800e114 <free>

	CS_D();
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	4803      	ldr	r0, [pc, #12]	@ (8000af8 <fill_screen1+0xb8>)
 8000aea:	f004 ff5d 	bl	80059a8 <HAL_GPIO_WritePin>

}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	20014278 	.word	0x20014278

08000b00 <fill_screen2>:


void fill_screen2(uint16_t color)
{
 8000b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b04:	b08f      	sub	sp, #60	@ 0x3c
 8000b06:	af02      	add	r7, sp, #8
 8000b08:	4603      	mov	r3, r0
 8000b0a:	80fb      	strh	r3, [r7, #6]
 8000b0c:	466b      	mov	r3, sp
 8000b0e:	461e      	mov	r6, r3
	set_adress_window(0, 0, LCD_Width-1, LCD_Length-1, 'w');
 8000b10:	2377      	movs	r3, #119	@ 0x77
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	f240 13df 	movw	r3, #479	@ 0x1df
 8000b18:	f240 123f 	movw	r2, #319	@ 0x13f
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f001 fbb8 	bl	8002294 <set_adress_window>

	uint32_t frameSize = 1200; //numarul de octeti dintr-un frame
 8000b24:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t nrPixel = 320*480;
 8000b2a:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8000b2e:	623b      	str	r3, [r7, #32]

	uint8_t r,g,b;

	r = (color & 0xF800) >> 11;
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	0adb      	lsrs	r3, r3, #11
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	77fb      	strb	r3, [r7, #31]
	g = (color & 0x07E0) >> 5;
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	115b      	asrs	r3, r3, #5
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b42:	77bb      	strb	r3, [r7, #30]
	b = color & 0x001F;
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f003 031f 	and.w	r3, r3, #31
 8000b4c:	777b      	strb	r3, [r7, #29]

	r = (255*r)/31;
 8000b4e:	7ffa      	ldrb	r2, [r7, #31]
 8000b50:	4613      	mov	r3, r2
 8000b52:	021b      	lsls	r3, r3, #8
 8000b54:	1a9b      	subs	r3, r3, r2
 8000b56:	4a4f      	ldr	r2, [pc, #316]	@ (8000c94 <fill_screen2+0x194>)
 8000b58:	fb82 1203 	smull	r1, r2, r2, r3
 8000b5c:	441a      	add	r2, r3
 8000b5e:	1112      	asrs	r2, r2, #4
 8000b60:	17db      	asrs	r3, r3, #31
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	77fb      	strb	r3, [r7, #31]
	g = (255*g)/63;
 8000b66:	7fba      	ldrb	r2, [r7, #30]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	021b      	lsls	r3, r3, #8
 8000b6c:	1a9b      	subs	r3, r3, r2
 8000b6e:	4a4a      	ldr	r2, [pc, #296]	@ (8000c98 <fill_screen2+0x198>)
 8000b70:	fb82 1203 	smull	r1, r2, r2, r3
 8000b74:	441a      	add	r2, r3
 8000b76:	1152      	asrs	r2, r2, #5
 8000b78:	17db      	asrs	r3, r3, #31
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	77bb      	strb	r3, [r7, #30]
	b = (255*b)/31;
 8000b7e:	7f7a      	ldrb	r2, [r7, #29]
 8000b80:	4613      	mov	r3, r2
 8000b82:	021b      	lsls	r3, r3, #8
 8000b84:	1a9b      	subs	r3, r3, r2
 8000b86:	4a43      	ldr	r2, [pc, #268]	@ (8000c94 <fill_screen2+0x194>)
 8000b88:	fb82 1203 	smull	r1, r2, r2, r3
 8000b8c:	441a      	add	r2, r3
 8000b8e:	1112      	asrs	r2, r2, #4
 8000b90:	17db      	asrs	r3, r3, #31
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	777b      	strb	r3, [r7, #29]

	DC_DATA();
 8000b96:	2201      	movs	r2, #1
 8000b98:	2108      	movs	r1, #8
 8000b9a:	4840      	ldr	r0, [pc, #256]	@ (8000c9c <fill_screen2+0x19c>)
 8000b9c:	f004 ff04 	bl	80059a8 <HAL_GPIO_WritePin>
	CS_A();
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	483d      	ldr	r0, [pc, #244]	@ (8000c9c <fill_screen2+0x19c>)
 8000ba6:	f004 feff 	bl	80059a8 <HAL_GPIO_WritePin>

	uint8_t frame[frameSize]; //nr de octeti de trimis intr-o tranmsisiune
 8000baa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000bac:	460b      	mov	r3, r1
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	4688      	mov	r8, r1
 8000bb6:	4699      	mov	r9, r3
 8000bb8:	f04f 0200 	mov.w	r2, #0
 8000bbc:	f04f 0300 	mov.w	r3, #0
 8000bc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000bcc:	2300      	movs	r3, #0
 8000bce:	460c      	mov	r4, r1
 8000bd0:	461d      	mov	r5, r3
 8000bd2:	f04f 0200 	mov.w	r2, #0
 8000bd6:	f04f 0300 	mov.w	r3, #0
 8000bda:	00eb      	lsls	r3, r5, #3
 8000bdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000be0:	00e2      	lsls	r2, r4, #3
 8000be2:	1dcb      	adds	r3, r1, #7
 8000be4:	08db      	lsrs	r3, r3, #3
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	ebad 0d03 	sub.w	sp, sp, r3
 8000bec:	ab02      	add	r3, sp, #8
 8000bee:	3300      	adds	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]

	for(uint32_t j=0; j<frameSize; j=j+3)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bf6:	e011      	b.n	8000c1c <fill_screen2+0x11c>
	{
		frame[j] = r;
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bfc:	4413      	add	r3, r2
 8000bfe:	7ffa      	ldrb	r2, [r7, #31]
 8000c00:	701a      	strb	r2, [r3, #0]
		frame[j+1] = g;
 8000c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c04:	3301      	adds	r3, #1
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	7fb9      	ldrb	r1, [r7, #30]
 8000c0a:	54d1      	strb	r1, [r2, r3]
		frame[j+2] = b;
 8000c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c0e:	3302      	adds	r3, #2
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	7f79      	ldrb	r1, [r7, #29]
 8000c14:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j=0; j<frameSize; j=j+3)
 8000c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c18:	3303      	adds	r3, #3
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d3e9      	bcc.n	8000bf8 <fill_screen2+0xf8>
	}

	uint32_t data = nrPixel * 3; //nr de octeti de trimis
 8000c24:	6a3a      	ldr	r2, [r7, #32]
 8000c26:	4613      	mov	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	4413      	add	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
	uint32_t nrFrames = data / frameSize;
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	60fb      	str	r3, [r7, #12]

	flagDmaSpiTx = 1;
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <fill_screen2+0x1a0>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]

	for(uint32_t j = 0; j < (nrFrames); j++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c42:	e012      	b.n	8000c6a <fill_screen2+0x16a>
	{
		//HAL_SPI_Transmit(&hspi1, frame, frameSize, 10);

		while(flagDmaSpiTx == 0); //asteapta cat timp este 0
 8000c44:	bf00      	nop
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <fill_screen2+0x1a0>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0fa      	beq.n	8000c46 <fill_screen2+0x146>
		flagDmaSpiTx = 0;
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <fill_screen2+0x1a0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, frame, frameSize);
 8000c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	6979      	ldr	r1, [r7, #20]
 8000c5e:	4811      	ldr	r0, [pc, #68]	@ (8000ca4 <fill_screen2+0x1a4>)
 8000c60:	f007 f8a2 	bl	8007da8 <HAL_SPI_Transmit_DMA>
	for(uint32_t j = 0; j < (nrFrames); j++)
 8000c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c66:	3301      	adds	r3, #1
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d3e8      	bcc.n	8000c44 <fill_screen2+0x144>

	}

	//asteptam sa se finalizeze ultimul transfer -> asteptam flag1

	while(flagDmaSpiTx == 0);
 8000c72:	bf00      	nop
 8000c74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <fill_screen2+0x1a0>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0fa      	beq.n	8000c74 <fill_screen2+0x174>
	CS_D();
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2110      	movs	r1, #16
 8000c82:	4806      	ldr	r0, [pc, #24]	@ (8000c9c <fill_screen2+0x19c>)
 8000c84:	f004 fe90 	bl	80059a8 <HAL_GPIO_WritePin>
 8000c88:	46b5      	mov	sp, r6
}
 8000c8a:	bf00      	nop
 8000c8c:	3734      	adds	r7, #52	@ 0x34
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c94:	84210843 	.word	0x84210843
 8000c98:	82082083 	.word	0x82082083
 8000c9c:	40020c00 	.word	0x40020c00
 8000ca0:	200144c0 	.word	0x200144c0
 8000ca4:	20014278 	.word	0x20014278

08000ca8 <print_character>:



void print_character(uint16_t x, uint16_t y, char c, uint16_t fontColor, uint16_t backColor)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b089      	sub	sp, #36	@ 0x24
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4623      	mov	r3, r4
 8000cb8:	80fb      	strh	r3, [r7, #6]
 8000cba:	4603      	mov	r3, r0
 8000cbc:	80bb      	strh	r3, [r7, #4]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	70fb      	strb	r3, [r7, #3]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	803b      	strh	r3, [r7, #0]
	set_adress_window(x, y, x+font.width-1, y+font.height-1, 'w');
 8000cc6:	4b3a      	ldr	r3, [pc, #232]	@ (8000db0 <print_character+0x108>)
 8000cc8:	889a      	ldrh	r2, [r3, #4]
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	4413      	add	r3, r2
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	b29c      	uxth	r4, r3
 8000cd4:	4b36      	ldr	r3, [pc, #216]	@ (8000db0 <print_character+0x108>)
 8000cd6:	88da      	ldrh	r2, [r3, #6]
 8000cd8:	88bb      	ldrh	r3, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	88b9      	ldrh	r1, [r7, #4]
 8000ce4:	88f8      	ldrh	r0, [r7, #6]
 8000ce6:	2277      	movs	r2, #119	@ 0x77
 8000ce8:	9200      	str	r2, [sp, #0]
 8000cea:	4622      	mov	r2, r4
 8000cec:	f001 fad2 	bl	8002294 <set_adress_window>

	uint16_t mask = 0x8000;
 8000cf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cf4:	82bb      	strh	r3, [r7, #20]

	uint8_t i,j;
	uint16_t line = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	827b      	strh	r3, [r7, #18]

	uint8_t dataFont[3];
	uint8_t dataBack[3];

	convert_color_16_to_18(fontColor, dataFont);
 8000cfa:	f107 020c 	add.w	r2, r7, #12
 8000cfe:	883b      	ldrh	r3, [r7, #0]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fde2 	bl	80008cc <convert_color_16_to_18>
	convert_color_16_to_18(backColor, dataBack);
 8000d08:	f107 0208 	add.w	r2, r7, #8
 8000d0c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fddb 	bl	80008cc <convert_color_16_to_18>


	DC_DATA();
 8000d16:	2201      	movs	r2, #1
 8000d18:	2108      	movs	r1, #8
 8000d1a:	4826      	ldr	r0, [pc, #152]	@ (8000db4 <print_character+0x10c>)
 8000d1c:	f004 fe44 	bl	80059a8 <HAL_GPIO_WritePin>
	CS_A();
 8000d20:	2200      	movs	r2, #0
 8000d22:	2110      	movs	r1, #16
 8000d24:	4823      	ldr	r0, [pc, #140]	@ (8000db4 <print_character+0x10c>)
 8000d26:	f004 fe3f 	bl	80059a8 <HAL_GPIO_WritePin>

	for(i=0; i<font.height; i++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	75fb      	strb	r3, [r7, #23]
 8000d2e:	e030      	b.n	8000d92 <print_character+0xea>
	{
		line = font.data[((c-32)*font.height)+i];
 8000d30:	4b1f      	ldr	r3, [pc, #124]	@ (8000db0 <print_character+0x108>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	3b20      	subs	r3, #32
 8000d38:	491d      	ldr	r1, [pc, #116]	@ (8000db0 <print_character+0x108>)
 8000d3a:	88c9      	ldrh	r1, [r1, #6]
 8000d3c:	fb03 f101 	mul.w	r1, r3, r1
 8000d40:	7dfb      	ldrb	r3, [r7, #23]
 8000d42:	440b      	add	r3, r1
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	4413      	add	r3, r2
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	827b      	strh	r3, [r7, #18]

		for(j=0; j<font.width; j++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	75bb      	strb	r3, [r7, #22]
 8000d50:	e016      	b.n	8000d80 <print_character+0xd8>
		{
			if(((line<<j) & (mask)) != 0)
 8000d52:	8a7a      	ldrh	r2, [r7, #18]
 8000d54:	7dbb      	ldrb	r3, [r7, #22]
 8000d56:	409a      	lsls	r2, r3
 8000d58:	8abb      	ldrh	r3, [r7, #20]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d006      	beq.n	8000d6e <print_character+0xc6>
			{
				LCD_send_data_multi(dataFont,3);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2103      	movs	r1, #3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f001 f8fc 	bl	8001f64 <LCD_send_data_multi>
 8000d6c:	e005      	b.n	8000d7a <print_character+0xd2>
			}

			else
			{
				LCD_send_data_multi(dataBack,3);
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	2103      	movs	r1, #3
 8000d74:	4618      	mov	r0, r3
 8000d76:	f001 f8f5 	bl	8001f64 <LCD_send_data_multi>
		for(j=0; j<font.width; j++)
 8000d7a:	7dbb      	ldrb	r3, [r7, #22]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	75bb      	strb	r3, [r7, #22]
 8000d80:	7dbb      	ldrb	r3, [r7, #22]
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b0a      	ldr	r3, [pc, #40]	@ (8000db0 <print_character+0x108>)
 8000d86:	889b      	ldrh	r3, [r3, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d3e2      	bcc.n	8000d52 <print_character+0xaa>
	for(i=0; i<font.height; i++)
 8000d8c:	7dfb      	ldrb	r3, [r7, #23]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	75fb      	strb	r3, [r7, #23]
 8000d92:	7dfb      	ldrb	r3, [r7, #23]
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <print_character+0x108>)
 8000d98:	88db      	ldrh	r3, [r3, #6]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d3c8      	bcc.n	8000d30 <print_character+0x88>
			}
		}
	}

	CS_D();
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2110      	movs	r1, #16
 8000da2:	4804      	ldr	r0, [pc, #16]	@ (8000db4 <print_character+0x10c>)
 8000da4:	f004 fe00 	bl	80059a8 <HAL_GPIO_WritePin>

}
 8000da8:	bf00      	nop
 8000daa:	371c      	adds	r7, #28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd90      	pop	{r4, r7, pc}
 8000db0:	20000000 	.word	0x20000000
 8000db4:	40020c00 	.word	0x40020c00

08000db8 <print_string>:


void print_string(uint16_t x, uint16_t y, char* string, uint16_t fontColor, uint16_t backColor)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b089      	sub	sp, #36	@ 0x24
 8000dbc:	af02      	add	r7, sp, #8
 8000dbe:	60ba      	str	r2, [r7, #8]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	81fb      	strh	r3, [r7, #14]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	81bb      	strh	r3, [r7, #12]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	80fb      	strh	r3, [r7, #6]

	char *temp = string;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	617b      	str	r3, [r7, #20]

	while((*string)!='\0')
 8000dd2:	e027      	b.n	8000e24 <print_string+0x6c>
	{
		if(x + font.width > 320)
 8000dd4:	89fb      	ldrh	r3, [r7, #14]
 8000dd6:	4a18      	ldr	r2, [pc, #96]	@ (8000e38 <print_string+0x80>)
 8000dd8:	8892      	ldrh	r2, [r2, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000de0:	dd07      	ble.n	8000df2 <print_string+0x3a>
		{
			x = font.width;
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <print_string+0x80>)
 8000de4:	889b      	ldrh	r3, [r3, #4]
 8000de6:	81fb      	strh	r3, [r7, #14]
			y = y + font.height;
 8000de8:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <print_string+0x80>)
 8000dea:	88da      	ldrh	r2, [r3, #6]
 8000dec:	89bb      	ldrh	r3, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	81bb      	strh	r3, [r7, #12]
		}

		if((y + font.height) > 480)
 8000df2:	89bb      	ldrh	r3, [r7, #12]
 8000df4:	4a10      	ldr	r2, [pc, #64]	@ (8000e38 <print_string+0x80>)
 8000df6:	88d2      	ldrh	r2, [r2, #6]
 8000df8:	4413      	add	r3, r2
 8000dfa:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000dfe:	dc16      	bgt.n	8000e2e <print_string+0x76>
		{
			return;
		}

		print_character(x, y, *string, fontColor, backColor);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	88fc      	ldrh	r4, [r7, #6]
 8000e06:	89b9      	ldrh	r1, [r7, #12]
 8000e08:	89f8      	ldrh	r0, [r7, #14]
 8000e0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	4623      	mov	r3, r4
 8000e10:	f7ff ff4a 	bl	8000ca8 <print_character>
		string++;
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	3301      	adds	r3, #1
 8000e18:	60bb      	str	r3, [r7, #8]
		x = x + font.width;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	@ (8000e38 <print_string+0x80>)
 8000e1c:	889a      	ldrh	r2, [r3, #4]
 8000e1e:	89fb      	ldrh	r3, [r7, #14]
 8000e20:	4413      	add	r3, r2
 8000e22:	81fb      	strh	r3, [r7, #14]
	while((*string)!='\0')
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1d3      	bne.n	8000dd4 <print_string+0x1c>
 8000e2c:	e000      	b.n	8000e30 <print_string+0x78>
			return;
 8000e2e:	bf00      	nop
	}

}
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000000 	.word	0x20000000

08000e3c <draw_horizontal_line>:


void draw_horizontal_line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t color)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af02      	add	r7, sp, #8
 8000e42:	4604      	mov	r4, r0
 8000e44:	4608      	mov	r0, r1
 8000e46:	4611      	mov	r1, r2
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	80fb      	strh	r3, [r7, #6]
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80bb      	strh	r3, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	807b      	strh	r3, [r7, #2]
 8000e56:	4613      	mov	r3, r2
 8000e58:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii orizontale.
	 * Input: x0 si y0 coordonatele initiale, x1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	x1 = x0+x1; //aflam lungimea efectiva
 8000e5a:	88fa      	ldrh	r2, [r7, #6]
 8000e5c:	887b      	ldrh	r3, [r7, #2]
 8000e5e:	4413      	add	r3, r2
 8000e60:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x1-1, y0, 'w');
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	88bb      	ldrh	r3, [r7, #4]
 8000e6a:	88b9      	ldrh	r1, [r7, #4]
 8000e6c:	88f8      	ldrh	r0, [r7, #6]
 8000e6e:	2477      	movs	r4, #119	@ 0x77
 8000e70:	9400      	str	r4, [sp, #0]
 8000e72:	f001 fa0f 	bl	8002294 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000e76:	f107 0208 	add.w	r2, r7, #8
 8000e7a:	883b      	ldrh	r3, [r7, #0]
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fd24 	bl	80008cc <convert_color_16_to_18>

	for(uint16_t i=0; i<x1-x0; i++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	81fb      	strh	r3, [r7, #14]
 8000e88:	e008      	b.n	8000e9c <draw_horizontal_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	2103      	movs	r1, #3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 f867 	bl	8001f64 <LCD_send_data_multi>
	for(uint16_t i=0; i<x1-x0; i++)
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	81fb      	strh	r3, [r7, #14]
 8000e9c:	89fa      	ldrh	r2, [r7, #14]
 8000e9e:	8879      	ldrh	r1, [r7, #2]
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	1acb      	subs	r3, r1, r3
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbf0      	blt.n	8000e8a <draw_horizontal_line+0x4e>
	}


}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}

08000eb2 <draw_vertical_line>:


void draw_vertical_line(uint16_t x0, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000eb2:	b590      	push	{r4, r7, lr}
 8000eb4:	b087      	sub	sp, #28
 8000eb6:	af02      	add	r7, sp, #8
 8000eb8:	4604      	mov	r4, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4623      	mov	r3, r4
 8000ec2:	80fb      	strh	r3, [r7, #6]
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	80bb      	strh	r3, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	803b      	strh	r3, [r7, #0]
	 * Functie pentru desenarea grafica unei linii verticale.
	 * Input: x0 si y0 coordonatele initiale, y1 lungimea relativa liniei, si culoarea
	 * Output: Void
	 */

	y1 = y0+y1; //aflam lungimea efectiva
 8000ed0:	88ba      	ldrh	r2, [r7, #4]
 8000ed2:	887b      	ldrh	r3, [r7, #2]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	807b      	strh	r3, [r7, #2]
	set_adress_window(x0, y0, x0, y1-1, 'w');
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	88fa      	ldrh	r2, [r7, #6]
 8000ee0:	88b9      	ldrh	r1, [r7, #4]
 8000ee2:	88f8      	ldrh	r0, [r7, #6]
 8000ee4:	2477      	movs	r4, #119	@ 0x77
 8000ee6:	9400      	str	r4, [sp, #0]
 8000ee8:	f001 f9d4 	bl	8002294 <set_adress_window>

	uint8_t pixel[3];
	convert_color_16_to_18(color, pixel);
 8000eec:	f107 0208 	add.w	r2, r7, #8
 8000ef0:	883b      	ldrh	r3, [r7, #0]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fce9 	bl	80008cc <convert_color_16_to_18>

	for(uint16_t i=0; i<y1-y0; i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	81fb      	strh	r3, [r7, #14]
 8000efe:	e008      	b.n	8000f12 <draw_vertical_line+0x60>
	{
		LCD_send_data_multi(pixel,sizeof(pixel));
 8000f00:	f107 0308 	add.w	r3, r7, #8
 8000f04:	2103      	movs	r1, #3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f001 f82c 	bl	8001f64 <LCD_send_data_multi>
	for(uint16_t i=0; i<y1-y0; i++)
 8000f0c:	89fb      	ldrh	r3, [r7, #14]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	81fb      	strh	r3, [r7, #14]
 8000f12:	89fa      	ldrh	r2, [r7, #14]
 8000f14:	8879      	ldrh	r1, [r7, #2]
 8000f16:	88bb      	ldrh	r3, [r7, #4]
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	dbf0      	blt.n	8000f00 <draw_vertical_line+0x4e>
	}


}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd90      	pop	{r4, r7, pc}

08000f28 <draw_rectangle>:


void draw_rectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	4604      	mov	r4, r0
 8000f30:	4608      	mov	r0, r1
 8000f32:	4611      	mov	r1, r2
 8000f34:	461a      	mov	r2, r3
 8000f36:	4623      	mov	r3, r4
 8000f38:	80fb      	strh	r3, [r7, #6]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80bb      	strh	r3, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	807b      	strh	r3, [r7, #2]
 8000f42:	4613      	mov	r3, r2
 8000f44:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */


	uint8_t pixel[3];
	uint16_t pixelNr = x1*y1;
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	883b      	ldrh	r3, [r7, #0]
 8000f4a:	fb12 f303 	smulbb	r3, r2, r3
 8000f4e:	82bb      	strh	r3, [r7, #20]
	convert_color_16_to_18(color, pixel);
 8000f50:	f107 020c 	add.w	r2, r7, #12
 8000f54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fcb7 	bl	80008cc <convert_color_16_to_18>

	uint8_t *data = malloc(sizeof(pixel)*pixelNr);
 8000f5e:	8aba      	ldrh	r2, [r7, #20]
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f00d f8cc 	bl	800e104 <malloc>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	613b      	str	r3, [r7, #16]

	for(uint16_t i=0; i<pixelNr; i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	82fb      	strh	r3, [r7, #22]
 8000f74:	e00f      	b.n	8000f96 <draw_rectangle+0x6e>
	{
		memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 8000f76:	8afa      	ldrh	r2, [r7, #22]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4413      	add	r3, r2
 8000f82:	461a      	mov	r2, r3
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	8819      	ldrh	r1, [r3, #0]
 8000f8a:	789b      	ldrb	r3, [r3, #2]
 8000f8c:	8011      	strh	r1, [r2, #0]
 8000f8e:	7093      	strb	r3, [r2, #2]
	for(uint16_t i=0; i<pixelNr; i++)
 8000f90:	8afb      	ldrh	r3, [r7, #22]
 8000f92:	3301      	adds	r3, #1
 8000f94:	82fb      	strh	r3, [r7, #22]
 8000f96:	8afa      	ldrh	r2, [r7, #22]
 8000f98:	8abb      	ldrh	r3, [r7, #20]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d3eb      	bcc.n	8000f76 <draw_rectangle+0x4e>
	}

	set_adress_window(x0, y0, x0+x1-1, y0+y1-1, 'w');
 8000f9e:	88fa      	ldrh	r2, [r7, #6]
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	b29c      	uxth	r4, r3
 8000faa:	88ba      	ldrh	r2, [r7, #4]
 8000fac:	883b      	ldrh	r3, [r7, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	88b9      	ldrh	r1, [r7, #4]
 8000fb8:	88f8      	ldrh	r0, [r7, #6]
 8000fba:	2277      	movs	r2, #119	@ 0x77
 8000fbc:	9200      	str	r2, [sp, #0]
 8000fbe:	4622      	mov	r2, r4
 8000fc0:	f001 f968 	bl	8002294 <set_adress_window>
	LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8000fc4:	8aba      	ldrh	r2, [r7, #20]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	6938      	ldr	r0, [r7, #16]
 8000fd0:	f000 ffc8 	bl	8001f64 <LCD_send_data_multi>

	free(data);
 8000fd4:	6938      	ldr	r0, [r7, #16]
 8000fd6:	f00d f89d 	bl	800e114 <free>

}
 8000fda:	bf00      	nop
 8000fdc:	371c      	adds	r7, #28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd90      	pop	{r4, r7, pc}

08000fe2 <init_entity_sd>:


void init_entity_sd(ENTITY *entity)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
	entity->x0 = 0;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	805a      	strh	r2, [r3, #2]
	entity->y0 = 0;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	809a      	strh	r2, [r3, #4]
	entity->y1 = 0;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	811a      	strh	r2, [r3, #8]
	entity->x1 = 0;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	80da      	strh	r2, [r3, #6]

	entity->ST.SD.filePathName = malloc(sizeof(char)*20);
 8001002:	2014      	movs	r0, #20
 8001004:	f00d f87e 	bl	800e104 <malloc>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	611a      	str	r2, [r3, #16]
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <free_entity_sd>:


void free_entity_sd(ENTITY *entity)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	free(entity->ST.SD.filePathName);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	4618      	mov	r0, r3
 8001026:	f00d f875 	bl	800e114 <free>
	free(entity->ST.SD.data);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	4618      	mov	r0, r3
 8001030:	f00d f870 	bl	800e114 <free>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <draw_entity>:


void draw_entity(ENTITY *entity)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b089      	sub	sp, #36	@ 0x24
 8001040:	af02      	add	r7, sp, #8
 8001042:	6078      	str	r0, [r7, #4]
	 * Feature: De dat ca parametru numele unui fisier ce contine datele imaginii
	 * de afisat si nu culoarea, parametrul color e doar de test
	 */

	uint8_t *data;
	bool flagImgDone = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]

	if(((entity->id & 1<<7) != 0))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b25b      	sxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	da72      	bge.n	8001138 <draw_entity+0xfc>
	{
		/*Avem imagine monocolor <= 32x32 -> imagine nu se afla pe cardul SD!*/

		if((entity->id & (0xC0)) == 0xC0)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800105a:	2bc0      	cmp	r3, #192	@ 0xc0
 800105c:	d108      	bne.n	8001070 <draw_entity+0x34>
		{
			/*
			 * Imagine stocata local in bufferul *data din afara structurii
			 */

			LCD_send_data_multi(entity->ST.LC.data, entity->ST.LC.size);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	4619      	mov	r1, r3
 8001068:	4610      	mov	r0, r2
 800106a:	f000 ff7b 	bl	8001f64 <LCD_send_data_multi>
 800106e:	e0e8      	b.n	8001242 <draw_entity+0x206>
			return;

		}

		uint16_t pixelNr = (entity->x1)*(entity->y1);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001076:	b29a      	uxth	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800107e:	b29b      	uxth	r3, r3
 8001080:	fb12 f303 	smulbb	r3, r2, r3
 8001084:	82bb      	strh	r3, [r7, #20]

		uint8_t pixel[3];
		convert_color_16_to_18(entity->ST.color, pixel);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	899b      	ldrh	r3, [r3, #12]
 800108a:	f107 020c 	add.w	r2, r7, #12
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fc1b 	bl	80008cc <convert_color_16_to_18>

		data = malloc(sizeof(pixel)*pixelNr);
 8001096:	8aba      	ldrh	r2, [r7, #20]
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	4618      	mov	r0, r3
 80010a0:	f00d f830 	bl	800e104 <malloc>
 80010a4:	4603      	mov	r3, r0
 80010a6:	613b      	str	r3, [r7, #16]

		for(uint16_t i=0;i<pixelNr;i++ )
 80010a8:	2300      	movs	r3, #0
 80010aa:	82fb      	strh	r3, [r7, #22]
 80010ac:	e00f      	b.n	80010ce <draw_entity+0x92>
		{
			memcpy(data + i*sizeof(pixel), pixel, sizeof(pixel));
 80010ae:	8afa      	ldrh	r2, [r7, #22]
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4413      	add	r3, r2
 80010ba:	461a      	mov	r2, r3
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	8819      	ldrh	r1, [r3, #0]
 80010c2:	789b      	ldrb	r3, [r3, #2]
 80010c4:	8011      	strh	r1, [r2, #0]
 80010c6:	7093      	strb	r3, [r2, #2]
		for(uint16_t i=0;i<pixelNr;i++ )
 80010c8:	8afb      	ldrh	r3, [r7, #22]
 80010ca:	3301      	adds	r3, #1
 80010cc:	82fb      	strh	r3, [r7, #22]
 80010ce:	8afa      	ldrh	r2, [r7, #22]
 80010d0:	8abb      	ldrh	r3, [r7, #20]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d3eb      	bcc.n	80010ae <draw_entity+0x72>
		}

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010dc:	b298      	uxth	r0, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010e4:	b299      	uxth	r1, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b29c      	uxth	r4, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001104:	b29a      	uxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800110c:	b29b      	uxth	r3, r3
 800110e:	4413      	add	r3, r2
 8001110:	b29b      	uxth	r3, r3
 8001112:	3b01      	subs	r3, #1
 8001114:	b29b      	uxth	r3, r3
 8001116:	2277      	movs	r2, #119	@ 0x77
 8001118:	9200      	str	r2, [sp, #0]
 800111a:	4622      	mov	r2, r4
 800111c:	f001 f8ba 	bl	8002294 <set_adress_window>
		LCD_send_data_multi(data,pixelNr*sizeof(pixel));
 8001120:	8aba      	ldrh	r2, [r7, #20]
 8001122:	4613      	mov	r3, r2
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4413      	add	r3, r2
 8001128:	4619      	mov	r1, r3
 800112a:	6938      	ldr	r0, [r7, #16]
 800112c:	f000 ff1a 	bl	8001f64 <LCD_send_data_multi>

		free(data);
 8001130:	6938      	ldr	r0, [r7, #16]
 8001132:	f00c ffef 	bl	800e114 <free>
 8001136:	e084      	b.n	8001242 <draw_entity+0x206>

	else
	{
		/*Imagine stocata in bufferul *data din cardul SD*/

		uint16_t byteNr = 0; /*index*/
 8001138:	2300      	movs	r3, #0
 800113a:	817b      	strh	r3, [r7, #10]

		read_image_file(entity, &byteNr, &flagImgDone);
 800113c:	f107 020f 	add.w	r2, r7, #15
 8001140:	f107 030a 	add.w	r3, r7, #10
 8001144:	4619      	mov	r1, r3
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f002 fa18 	bl	800357c <read_image_file>

		set_adress_window(entity->x0, entity->y0, (entity->x1)+(entity->x0)-1, (entity->y1)+(entity->y0)-1, 'w');
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001152:	b298      	uxth	r0, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800115a:	b299      	uxth	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001162:	b29a      	uxth	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800116a:	b29b      	uxth	r3, r3
 800116c:	4413      	add	r3, r2
 800116e:	b29b      	uxth	r3, r3
 8001170:	3b01      	subs	r3, #1
 8001172:	b29c      	uxth	r4, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800117a:	b29a      	uxth	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001182:	b29b      	uxth	r3, r3
 8001184:	4413      	add	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	3b01      	subs	r3, #1
 800118a:	b29b      	uxth	r3, r3
 800118c:	2277      	movs	r2, #119	@ 0x77
 800118e:	9200      	str	r2, [sp, #0]
 8001190:	4622      	mov	r2, r4
 8001192:	f001 f87f 	bl	8002294 <set_adress_window>

		DC_DATA();
 8001196:	2201      	movs	r2, #1
 8001198:	2108      	movs	r1, #8
 800119a:	482b      	ldr	r0, [pc, #172]	@ (8001248 <draw_entity+0x20c>)
 800119c:	f004 fc04 	bl	80059a8 <HAL_GPIO_WritePin>
		CS_A();
 80011a0:	2200      	movs	r2, #0
 80011a2:	2110      	movs	r1, #16
 80011a4:	4828      	ldr	r0, [pc, #160]	@ (8001248 <draw_entity+0x20c>)
 80011a6:	f004 fbff 	bl	80059a8 <HAL_GPIO_WritePin>

		if(byteNr < 3072)
 80011aa:	897b      	ldrh	r3, [r7, #10]
 80011ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80011b0:	d20c      	bcs.n	80011cc <draw_entity+0x190>
		{
			/*
			 * Pentru cazul unui singur frame de transmis
			 */

			LCD_send_data_multi(entity->ST.SD.data, byteNr);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	897a      	ldrh	r2, [r7, #10]
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fed2 	bl	8001f64 <LCD_send_data_multi>
			free(entity->ST.SD.data);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00c ffa5 	bl	800e114 <free>
 80011ca:	e03a      	b.n	8001242 <draw_entity+0x206>
		else
		{
			/*
			 * Pentru cazul mai multor frameuri
			 */
			flagDmaSpiTx = 0;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <draw_entity+0x210>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]

			//LCD_send_data_multi(entity->data, byteNr);
			HAL_SPI_Transmit_DMA(&hspi1, entity->ST.SD.data, byteNr);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	897a      	ldrh	r2, [r7, #10]
 80011d8:	4619      	mov	r1, r3
 80011da:	481d      	ldr	r0, [pc, #116]	@ (8001250 <draw_entity+0x214>)
 80011dc:	f006 fde4 	bl	8007da8 <HAL_SPI_Transmit_DMA>

			do
			{
				if(flagImgDone == 1)
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d11c      	bne.n	8001220 <draw_entity+0x1e4>
				{
					break;
				}

				read_image_file(entity, &byteNr, &flagImgDone);
 80011e6:	f107 020f 	add.w	r2, r7, #15
 80011ea:	f107 030a 	add.w	r3, r7, #10
 80011ee:	4619      	mov	r1, r3
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f002 f9c3 	bl	800357c <read_image_file>

				while(flagDmaSpiTx == 0);
 80011f6:	bf00      	nop
 80011f8:	4b14      	ldr	r3, [pc, #80]	@ (800124c <draw_entity+0x210>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0fa      	beq.n	80011f8 <draw_entity+0x1bc>
				flagDmaSpiTx = 0;
 8001202:	4b12      	ldr	r3, [pc, #72]	@ (800124c <draw_entity+0x210>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Transmit_DMA(&hspi1, entity->ST.SD.data, byteNr);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	897a      	ldrh	r2, [r7, #10]
 800120e:	4619      	mov	r1, r3
 8001210:	480f      	ldr	r0, [pc, #60]	@ (8001250 <draw_entity+0x214>)
 8001212:	f006 fdc9 	bl	8007da8 <HAL_SPI_Transmit_DMA>

			}while(byteNr >= 3072);
 8001216:	897b      	ldrh	r3, [r7, #10]
 8001218:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800121c:	d2e0      	bcs.n	80011e0 <draw_entity+0x1a4>
 800121e:	e000      	b.n	8001222 <draw_entity+0x1e6>
					break;
 8001220:	bf00      	nop

		}

		while(flagDmaSpiTx == 0);
 8001222:	bf00      	nop
 8001224:	4b09      	ldr	r3, [pc, #36]	@ (800124c <draw_entity+0x210>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0fa      	beq.n	8001224 <draw_entity+0x1e8>
		free(entity->ST.SD.data);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	4618      	mov	r0, r3
 8001234:	f00c ff6e 	bl	800e114 <free>
		CS_D();
 8001238:	2201      	movs	r2, #1
 800123a:	2110      	movs	r1, #16
 800123c:	4802      	ldr	r0, [pc, #8]	@ (8001248 <draw_entity+0x20c>)
 800123e:	f004 fbb3 	bl	80059a8 <HAL_GPIO_WritePin>

	}


}
 8001242:	371c      	adds	r7, #28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd90      	pop	{r4, r7, pc}
 8001248:	40020c00 	.word	0x40020c00
 800124c:	200144c0 	.word	0x200144c0
 8001250:	20014278 	.word	0x20014278

08001254 <translation_entity>:



void translation_entity(ENTITY *const restrict entity, int16_t x, int16_t y, bool TurnOnStep)
{
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	b08c      	sub	sp, #48	@ 0x30
 8001258:	af02      	add	r7, sp, #8
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4603      	mov	r3, r0
 8001264:	817b      	strh	r3, [r7, #10]
 8001266:	460b      	mov	r3, r1
 8001268:	813b      	strh	r3, [r7, #8]
 800126a:	4613      	mov	r3, r2
 800126c:	71fb      	strb	r3, [r7, #7]
	 * 		  Modul de Step activ 1, neactiv 0 (deplasare in interiorul ferestrei initiale)
	 * Output: Void
	 */


	if(x<0 || x>LCD_Width || y<0 || y> LCD_Length)
 800126e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f2c0 810f 	blt.w	8001496 <translation_entity+0x242>
 8001278:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800127c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001280:	f300 8109 	bgt.w	8001496 <translation_entity+0x242>
 8001284:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f2c0 8104 	blt.w	8001496 <translation_entity+0x242>
 800128e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001292:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001296:	f300 80fe 	bgt.w	8001496 <translation_entity+0x242>

		return;
	}


	ENTITY temp = *entity;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f107 0414 	add.w	r4, r7, #20
 80012a0:	461d      	mov	r5, r3
 80012a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a6:	682b      	ldr	r3, [r5, #0]
 80012a8:	6023      	str	r3, [r4, #0]

	entity->x0 = x;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	897a      	ldrh	r2, [r7, #10]
 80012ae:	805a      	strh	r2, [r3, #2]
	entity->y0 = y;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	893a      	ldrh	r2, [r7, #8]
 80012b4:	809a      	strh	r2, [r3, #4]


	if((temp.y0 == y) && (TurnOnStep==1))
 80012b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d163      	bne.n	800138a <translation_entity+0x136>
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d060      	beq.n	800138a <translation_entity+0x136>
	{
		/*Pentru cazul unui Step cuprins in cadrul anterior pe axa x*/

		if((x < (temp.x0+temp.x1)) && (x > (temp.x0)))
 80012c8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80012cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012d6:	440b      	add	r3, r1
 80012d8:	429a      	cmp	r2, r3
 80012da:	da23      	bge.n	8001324 <translation_entity+0xd0>
 80012dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012e0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dd1d      	ble.n	8001324 <translation_entity+0xd0>
		{
			/*Pentru cazul deplasarii pe +x*/
			mutex = 1;
 80012e8:	4b6f      	ldr	r3, [pc, #444]	@ (80014a8 <translation_entity+0x254>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
			draw_entity(entity);
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f7ff fea4 	bl	800103c <draw_entity>
			draw_rectangle(temp.x0, temp.y0, x-temp.x0, temp.y1, BackGroundColor); /*Culoare background*/
 80012f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012f8:	b298      	uxth	r0, r3
 80012fa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012fe:	b299      	uxth	r1, r3
 8001300:	897a      	ldrh	r2, [r7, #10]
 8001302:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001306:	b29b      	uxth	r3, r3
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	b29a      	uxth	r2, r3
 800130c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001310:	b29c      	uxth	r4, r3
 8001312:	4b66      	ldr	r3, [pc, #408]	@ (80014ac <translation_entity+0x258>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	4623      	mov	r3, r4
 800131a:	f7ff fe05 	bl	8000f28 <draw_rectangle>
			mutex = 0;
 800131e:	4b62      	ldr	r3, [pc, #392]	@ (80014a8 <translation_entity+0x254>)
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
		}

		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8001324:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001328:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800132c:	429a      	cmp	r2, r3
 800132e:	f280 80b4 	bge.w	800149a <translation_entity+0x246>
 8001332:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001336:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800133a:	4413      	add	r3, r2
 800133c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001340:	4293      	cmp	r3, r2
 8001342:	f340 80aa 	ble.w	800149a <translation_entity+0x246>
		{
			/*Pentru cazul deplasarii pe -x*/
			mutex = 1;
 8001346:	4b58      	ldr	r3, [pc, #352]	@ (80014a8 <translation_entity+0x254>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
			draw_entity(entity);
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f7ff fe75 	bl	800103c <draw_entity>
			draw_rectangle(temp.x0+temp.x1-(temp.x0-x), temp.y0, temp.x0-x, temp.y1, BackGroundColor); /*Culoare background*/
 8001352:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001356:	b29a      	uxth	r2, r3
 8001358:	897b      	ldrh	r3, [r7, #10]
 800135a:	4413      	add	r3, r2
 800135c:	b298      	uxth	r0, r3
 800135e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001362:	b299      	uxth	r1, r3
 8001364:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001368:	b29a      	uxth	r2, r3
 800136a:	897b      	ldrh	r3, [r7, #10]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	b29a      	uxth	r2, r3
 8001370:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001374:	b29c      	uxth	r4, r3
 8001376:	4b4d      	ldr	r3, [pc, #308]	@ (80014ac <translation_entity+0x258>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4623      	mov	r3, r4
 800137e:	f7ff fdd3 	bl	8000f28 <draw_rectangle>
			mutex = 0;
 8001382:	4b49      	ldr	r3, [pc, #292]	@ (80014a8 <translation_entity+0x254>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 8001388:	e087      	b.n	800149a <translation_entity+0x246>

	}

	else

		if((temp.x0==x) && (TurnOnStep==1))
 800138a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800138e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001392:	429a      	cmp	r2, r3
 8001394:	d163      	bne.n	800145e <translation_entity+0x20a>
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d060      	beq.n	800145e <translation_entity+0x20a>
		{
			if((y < (temp.y0+temp.y1)) && (y > (temp.y0)))
 800139c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013a0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013aa:	440b      	add	r3, r1
 80013ac:	429a      	cmp	r2, r3
 80013ae:	da24      	bge.n	80013fa <translation_entity+0x1a6>
 80013b0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013b4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dd1e      	ble.n	80013fa <translation_entity+0x1a6>
			{
				/*Pentru cazul deplasarii pe +y*/
				mutex = 1;
 80013bc:	4b3a      	ldr	r3, [pc, #232]	@ (80014a8 <translation_entity+0x254>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]
				draw_entity(entity);
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f7ff fe3a 	bl	800103c <draw_entity>
				draw_rectangle(temp.x0, temp.y0, temp.x1, y-temp.y0, BackGroundColor);
 80013c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013cc:	b298      	uxth	r0, r3
 80013ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013d2:	b299      	uxth	r1, r3
 80013d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013d8:	b29c      	uxth	r4, r3
 80013da:	893a      	ldrh	r2, [r7, #8]
 80013dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b31      	ldr	r3, [pc, #196]	@ (80014ac <translation_entity+0x258>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	4613      	mov	r3, r2
 80013ee:	4622      	mov	r2, r4
 80013f0:	f7ff fd9a 	bl	8000f28 <draw_rectangle>
				mutex = 0;
 80013f4:	4b2c      	ldr	r3, [pc, #176]	@ (80014a8 <translation_entity+0x254>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
			}

			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 80013fa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013fe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001402:	429a      	cmp	r2, r3
 8001404:	da4b      	bge.n	800149e <translation_entity+0x24a>
 8001406:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800140a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800140e:	4413      	add	r3, r2
 8001410:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001414:	4293      	cmp	r3, r2
 8001416:	dd42      	ble.n	800149e <translation_entity+0x24a>
			{
				/*Pentru cazul deplasarii pe -y*/
				mutex = 1;
 8001418:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <translation_entity+0x254>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]
				draw_entity(entity);
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f7ff fe0c 	bl	800103c <draw_entity>
				draw_rectangle(temp.x0, temp.y0+temp.y1-(temp.y0-y), temp.x1, temp.y0-y, BackGroundColor);
 8001424:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001428:	b298      	uxth	r0, r3
 800142a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800142e:	b29a      	uxth	r2, r3
 8001430:	893b      	ldrh	r3, [r7, #8]
 8001432:	4413      	add	r3, r2
 8001434:	b299      	uxth	r1, r3
 8001436:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800143a:	b29c      	uxth	r4, r3
 800143c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001440:	b29a      	uxth	r2, r3
 8001442:	893b      	ldrh	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <translation_entity+0x258>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	4613      	mov	r3, r2
 8001450:	4622      	mov	r2, r4
 8001452:	f7ff fd69 	bl	8000f28 <draw_rectangle>
				mutex = 0;
 8001456:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <translation_entity+0x254>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 800145c:	e01f      	b.n	800149e <translation_entity+0x24a>
		}

		else
		{
			/*Pentru orice alt caz (deplasare pe diagonala sau aleatoriu)*/
			mutex = 1;
 800145e:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <translation_entity+0x254>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]
			draw_entity(entity);
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7ff fde9 	bl	800103c <draw_entity>
			draw_rectangle(temp.x0, temp.y0, temp.x1, temp.y1, BackGroundColor);
 800146a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800146e:	b298      	uxth	r0, r3
 8001470:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001474:	b299      	uxth	r1, r3
 8001476:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800147a:	b29a      	uxth	r2, r3
 800147c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001480:	b29c      	uxth	r4, r3
 8001482:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <translation_entity+0x258>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4623      	mov	r3, r4
 800148a:	f7ff fd4d 	bl	8000f28 <draw_rectangle>
			mutex = 0;
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <translation_entity+0x254>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e004      	b.n	80014a0 <translation_entity+0x24c>
		return;
 8001496:	bf00      	nop
 8001498:	e002      	b.n	80014a0 <translation_entity+0x24c>
		if((x+temp.x1 < (temp.x0+temp.x1)) && (x+temp.x1 > temp.x0))
 800149a:	bf00      	nop
 800149c:	e000      	b.n	80014a0 <translation_entity+0x24c>
			if((y+temp.y1 < (temp.y0+temp.y1)) && (y+temp.y1 > temp.y0))
 800149e:	bf00      	nop
		}


}
 80014a0:	3728      	adds	r7, #40	@ 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bdb0      	pop	{r4, r5, r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200000a8 	.word	0x200000a8
 80014ac:	20000008 	.word	0x20000008

080014b0 <translation_test>:


void translation_test(ENTITY *entity, uint8_t step, uint16_t delay)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	70fb      	strb	r3, [r7, #3]
 80014bc:	4613      	mov	r3, r2
 80014be:	803b      	strh	r3, [r7, #0]


	while(1)
	{
		while((entity->x0 + entity->x1) < LCD_Width)
 80014c0:	e013      	b.n	80014ea <translation_test+0x3a>
		{
			translation_entity(entity, entity->x0+step, entity->y0, 1);//, color);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	b219      	sxth	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80014da:	2301      	movs	r3, #1
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff feb9 	bl	8001254 <translation_entity>
			HAL_Delay(delay);
 80014e2:	883b      	ldrh	r3, [r7, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 f963 	bl	80047b0 <HAL_Delay>
		while((entity->x0 + entity->x1) < LCD_Width)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80014f8:	4413      	add	r3, r2
 80014fa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80014fe:	dbe0      	blt.n	80014c2 <translation_test+0x12>
		}
		mutex = 1;
 8001500:	4b54      	ldr	r3, [pc, #336]	@ (8001654 <translation_test+0x1a4>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fd98 	bl	800103c <draw_entity>
		mutex = 0;
 800150c:	4b51      	ldr	r3, [pc, #324]	@ (8001654 <translation_test+0x1a4>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
		entity->x0 = LCD_Width - entity->x1;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001518:	b29b      	uxth	r3, r3
 800151a:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800151e:	b29b      	uxth	r3, r3
 8001520:	b21a      	sxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	805a      	strh	r2, [r3, #2]

		while((entity->y0 + entity->y1) < LCD_Length)
 8001526:	e013      	b.n	8001550 <translation_test+0xa0>
		{

			translation_entity(entity, entity->x0, entity->y0+step, 1);//, color);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001534:	b29a      	uxth	r2, r3
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4413      	add	r3, r2
 800153c:	b29b      	uxth	r3, r3
 800153e:	b21a      	sxth	r2, r3
 8001540:	2301      	movs	r3, #1
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fe86 	bl	8001254 <translation_entity>
			HAL_Delay(delay);
 8001548:	883b      	ldrh	r3, [r7, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f003 f930 	bl	80047b0 <HAL_Delay>
		while((entity->y0 + entity->y1) < LCD_Length)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800155e:	4413      	add	r3, r2
 8001560:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001564:	dbe0      	blt.n	8001528 <translation_test+0x78>
		}

		mutex = 1;
 8001566:	4b3b      	ldr	r3, [pc, #236]	@ (8001654 <translation_test+0x1a4>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fd65 	bl	800103c <draw_entity>
		mutex = 0;
 8001572:	4b38      	ldr	r3, [pc, #224]	@ (8001654 <translation_test+0x1a4>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
		entity->y0 = LCD_Length - entity->y1;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800157e:	b29b      	uxth	r3, r3
 8001580:	f5c3 73f0 	rsb	r3, r3, #480	@ 0x1e0
 8001584:	b29b      	uxth	r3, r3
 8001586:	b21a      	sxth	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	809a      	strh	r2, [r3, #4]

		while((entity->x0 - step) > 0)
 800158c:	e013      	b.n	80015b6 <translation_test+0x106>
		{
			translation_entity(entity, entity->x0-step, entity->y0, 1);//, color);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001594:	b29a      	uxth	r2, r3
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	b29b      	uxth	r3, r3
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	b29b      	uxth	r3, r3
 800159e:	b219      	sxth	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80015a6:	2301      	movs	r3, #1
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff fe53 	bl	8001254 <translation_entity>
			HAL_Delay(delay);
 80015ae:	883b      	ldrh	r3, [r7, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 f8fd 	bl	80047b0 <HAL_Delay>
		while((entity->x0 - step) > 0)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015bc:	461a      	mov	r2, r3
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	dce3      	bgt.n	800158e <translation_test+0xde>
		}

		entity->ST.color = 0xFFFF;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015cc:	819a      	strh	r2, [r3, #12]
		mutex = 1;
 80015ce:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <translation_test+0x1a4>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff fd31 	bl	800103c <draw_entity>
		mutex = 0;
 80015da:	4b1e      	ldr	r3, [pc, #120]	@ (8001654 <translation_test+0x1a4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
		entity->ST.color = 0xF100;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 80015e6:	819a      	strh	r2, [r3, #12]
		entity->x0 = 0;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	805a      	strh	r2, [r3, #2]

		while((entity->y0 - step) > 0)
 80015ee:	e013      	b.n	8001618 <translation_test+0x168>
		{
			translation_entity(entity, entity->x0, entity->y0-step, 1);//, color);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	b29b      	uxth	r3, r3
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	b29b      	uxth	r3, r3
 8001606:	b21a      	sxth	r2, r3
 8001608:	2301      	movs	r3, #1
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff fe22 	bl	8001254 <translation_entity>
			HAL_Delay(delay);
 8001610:	883b      	ldrh	r3, [r7, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f003 f8cc 	bl	80047b0 <HAL_Delay>
		while((entity->y0 - step) > 0)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800161e:	461a      	mov	r2, r3
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	dce3      	bgt.n	80015f0 <translation_test+0x140>
		}
		entity->ST.color = 0xFFFF;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800162e:	819a      	strh	r2, [r3, #12]
		mutex = 1;
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <translation_test+0x1a4>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
		draw_entity(entity);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fd00 	bl	800103c <draw_entity>
		mutex = 0;
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <translation_test+0x1a4>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
		entity->ST.color = 0xF100;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8001648:	819a      	strh	r2, [r3, #12]
		entity->y0 = 0;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	809a      	strh	r2, [r3, #4]
		while((entity->x0 + entity->x1) < LCD_Width)
 8001650:	e74b      	b.n	80014ea <translation_test+0x3a>
 8001652:	bf00      	nop
 8001654:	200000a8 	.word	0x200000a8

08001658 <scaling_entity>:
	}
}


void scaling_entity(ENTITY *entity, const float factor)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b093      	sub	sp, #76	@ 0x4c
 800165c:	af02      	add	r7, sp, #8
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	ed87 0a00 	vstr	s0, [r7]
	 * o referinta catre entitatea de scalat si factorul asociat
	 */

	/*Vom elimina din sfera vizuala imaginea de scalat*/

	draw_rectangle(entity->x0, entity->y0, entity->x1, entity->y1, BackGroundColor);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800166a:	b298      	uxth	r0, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001672:	b299      	uxth	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800167a:	b29a      	uxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001682:	b29c      	uxth	r4, r3
 8001684:	4bb2      	ldr	r3, [pc, #712]	@ (8001950 <scaling_entity+0x2f8>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	4623      	mov	r3, r4
 800168c:	f7ff fc4c 	bl	8000f28 <draw_rectangle>
	 * de scalat
	 */

	FRESULT res;
	char *scalFilePath;
	char *tempFile = "graphic/scalare/temp.bin";
 8001690:	4bb0      	ldr	r3, [pc, #704]	@ (8001954 <scaling_entity+0x2fc>)
 8001692:	62fb      	str	r3, [r7, #44]	@ 0x2c
	char *fileName = return_file_name_current_path(entity->ST.SD.filePathName);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	4618      	mov	r0, r3
 800169a:	f001 fe02 	bl	80032a2 <return_file_name_current_path>
 800169e:	62b8      	str	r0, [r7, #40]	@ 0x28

	scalFilePath = assign_filePath("graphic/scalare/");
 80016a0:	48ad      	ldr	r0, [pc, #692]	@ (8001958 <scaling_entity+0x300>)
 80016a2:	f001 fdda 	bl	800325a <assign_filePath>
 80016a6:	6278      	str	r0, [r7, #36]	@ 0x24
	scalFilePath = realloc(scalFilePath, strlen(scalFilePath)+ strlen(fileName) +1 );
 80016a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80016aa:	f7fe fd8d 	bl	80001c8 <strlen>
 80016ae:	4604      	mov	r4, r0
 80016b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80016b2:	f7fe fd89 	bl	80001c8 <strlen>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4423      	add	r3, r4
 80016ba:	3301      	adds	r3, #1
 80016bc:	4619      	mov	r1, r3
 80016be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80016c0:	f00c fdde 	bl	800e280 <realloc>
 80016c4:	6278      	str	r0, [r7, #36]	@ 0x24
	strcat(scalFilePath, fileName);
 80016c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80016ca:	f00c fe17 	bl	800e2fc <strcat>

	uint16_t x = 0; /*nr d elinii de prelucrat din M1 ai sa avem 32x32 pixeli de prelucrat in M2*/
 80016ce:	2300      	movs	r3, #0
 80016d0:	81fb      	strh	r3, [r7, #14]
	bool flagTerm = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	737b      	strb	r3, [r7, #13]

	int i = 0; /*indexi de referinta in M2*/
 80016d6:	2300      	movs	r3, #0
 80016d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int j = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	int ik = 0; /*indexi de referinta in M1*/
 80016de:	2300      	movs	r3, #0
 80016e0:	623b      	str	r3, [r7, #32]
	int jk = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]

	bool flagPixel = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37


	uint8_t *data = malloc(sizeof(uint8_t)*3072);
 80016ec:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80016f0:	f00c fd08 	bl	800e104 <malloc>
 80016f4:	4603      	mov	r3, r0
 80016f6:	61bb      	str	r3, [r7, #24]
	int16_t x1 = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	82fb      	strh	r3, [r7, #22]
	int16_t y1 = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	82bb      	strh	r3, [r7, #20]
	int16_t index = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	827b      	strh	r3, [r7, #18]

	x1 = (int16_t)((entity->x1)*factor);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001712:	edd7 7a00 	vldr	s15, [r7]
 8001716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800171e:	ee17 3a90 	vmov	r3, s15
 8001722:	82fb      	strh	r3, [r7, #22]
	y1 = (int16_t)((entity->y1)*factor);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001732:	edd7 7a00 	vldr	s15, [r7]
 8001736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800173e:	ee17 3a90 	vmov	r3, s15
 8001742:	82bb      	strh	r3, [r7, #20]



	while(!flagTerm)
 8001744:	e0d2      	b.n	80018ec <scaling_entity+0x294>
	{
		read_image_file_scaling(entity->ST.SD.filePathName, entity, factor, &x, &flagTerm);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6918      	ldr	r0, [r3, #16]
 800174a:	f107 030d 	add.w	r3, r7, #13
 800174e:	f107 020e 	add.w	r2, r7, #14
 8001752:	ed97 0a00 	vldr	s0, [r7]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	f002 f97c 	bl	8003a54 <read_image_file_scaling>

		i = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		j = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	63bb      	str	r3, [r7, #56]	@ 0x38

		ik = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
		jk = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]

		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 800176c:	2300      	movs	r3, #0
 800176e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001770:	e07d      	b.n	800186e <scaling_entity+0x216>
		{
			/*
			 * Parcurgem frameul asociat matricei scalate M2
			 */

			if((k%(x1*3)==0) && (k!=0))
 8001772:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	441a      	add	r2, r3
 800177c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800177e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001782:	fb01 f202 	mul.w	r2, r1, r2
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d107      	bne.n	800179c <scaling_entity+0x144>
 800178c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800178e:	2b00      	cmp	r3, #0
 8001790:	d004      	beq.n	800179c <scaling_entity+0x144>
			{
				/*
				 * new line
				 */

				i++;
 8001792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001794:	3301      	adds	r3, #1
 8001796:	63fb      	str	r3, [r7, #60]	@ 0x3c
				j = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			if(k%3 == 0)
 800179c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800179e:	4b6f      	ldr	r3, [pc, #444]	@ (800195c <scaling_entity+0x304>)
 80017a0:	fb83 3201 	smull	r3, r2, r3, r1
 80017a4:	17cb      	asrs	r3, r1, #31
 80017a6:	1ad2      	subs	r2, r2, r3
 80017a8:	4613      	mov	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	1aca      	subs	r2, r1, r3
 80017b0:	2a00      	cmp	r2, #0
 80017b2:	d102      	bne.n	80017ba <scaling_entity+0x162>
			{
				flagPixel = 1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			}

			if(flagPixel == 1)
 80017ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d052      	beq.n	8001868 <scaling_entity+0x210>
			{
				ik = (int)i/factor;
 80017c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017cc:	ed97 7a00 	vldr	s14, [r7]
 80017d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d8:	ee17 3a90 	vmov	r3, s15
 80017dc:	623b      	str	r3, [r7, #32]
				jk = (int)j/factor;
 80017de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017e0:	ee07 3a90 	vmov	s15, r3
 80017e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017e8:	ed97 7a00 	vldr	s14, [r7]
 80017ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f4:	ee17 3a90 	vmov	r3, s15
 80017f8:	61fb      	str	r3, [r7, #28]

				index = ik*(entity->x1)*3 + jk*3; /*index normat la M1*/
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001800:	461a      	mov	r2, r3
 8001802:	6a3b      	ldr	r3, [r7, #32]
 8001804:	fb03 f202 	mul.w	r2, r3, r2
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	b29b      	uxth	r3, r3
 800180e:	461a      	mov	r2, r3
 8001810:	0052      	lsls	r2, r2, #1
 8001812:	4413      	add	r3, r2
 8001814:	b29b      	uxth	r3, r3
 8001816:	827b      	strh	r3, [r7, #18]

				data[k] = entity->ST.SD.data[index];
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001820:	441a      	add	r2, r3
 8001822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001824:	69b9      	ldr	r1, [r7, #24]
 8001826:	440b      	add	r3, r1
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	701a      	strb	r2, [r3, #0]
				data[k+1] = entity->ST.SD.data[index + 1];
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001834:	3301      	adds	r3, #1
 8001836:	441a      	add	r2, r3
 8001838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800183a:	3301      	adds	r3, #1
 800183c:	69b9      	ldr	r1, [r7, #24]
 800183e:	440b      	add	r3, r1
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	701a      	strb	r2, [r3, #0]
				data[k+2] = entity->ST.SD.data[index + 2];
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800184c:	3302      	adds	r3, #2
 800184e:	441a      	add	r2, r3
 8001850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001852:	3302      	adds	r3, #2
 8001854:	69b9      	ldr	r1, [r7, #24]
 8001856:	440b      	add	r3, r1
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	701a      	strb	r2, [r3, #0]

				j++;
 800185c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800185e:	3301      	adds	r3, #1
 8001860:	63bb      	str	r3, [r7, #56]	@ 0x38
				flagPixel = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		for(int k=0; k<((int)(factor*x*x1*3)) ;k++)
 8001868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800186a:	3301      	adds	r3, #1
 800186c:	633b      	str	r3, [r7, #48]	@ 0x30
 800186e:	89fb      	ldrh	r3, [r7, #14]
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001878:	edd7 7a00 	vldr	s15, [r7]
 800187c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001880:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001884:	ee07 3a90 	vmov	s15, r3
 8001888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001890:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001894:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800189c:	ee17 2a90 	vmov	r2, s15
 80018a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a2:	4293      	cmp	r3, r2
 80018a4:	f6ff af65 	blt.w	8001772 <scaling_entity+0x11a>
		/*
		 * Scriem in fisier datele obitnute din frame-ul curent in fisiserul aferent.
		 * Fisiserul va fi salvat in folderul de scalare
		 */

		write_image_file(tempFile, data, (int)(x1*factor)*x*3, x1, y1, flagTerm);
 80018a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b4:	edd7 7a00 	vldr	s15, [r7]
 80018b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c0:	ee17 2a90 	vmov	r2, s15
 80018c4:	89fb      	ldrh	r3, [r7, #14]
 80018c6:	fb03 f202 	mul.w	r2, r3, r2
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	7b7b      	ldrb	r3, [r7, #13]
 80018d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	460a      	mov	r2, r1
 80018e4:	69b9      	ldr	r1, [r7, #24]
 80018e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80018e8:	f002 fab2 	bl	8003e50 <write_image_file>
	while(!flagTerm)
 80018ec:	7b7b      	ldrb	r3, [r7, #13]
 80018ee:	f083 0301 	eor.w	r3, r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f47f af26 	bne.w	8001746 <scaling_entity+0xee>
	 * renumind fisiserul tempFile in care ne-am scris datele din temp.bin in
	 * numele aferent acestuia stocat in scalFilePath
	 */


	res = f_unlink(scalFilePath);
 80018fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018fc:	f00c fa01 	bl	800dd02 <f_unlink>
 8001900:	4603      	mov	r3, r0
 8001902:	747b      	strb	r3, [r7, #17]

	if((res != FR_OK) && (res != FR_NO_FILE))
 8001904:	7c7b      	ldrb	r3, [r7, #17]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <scaling_entity+0x2b8>
 800190a:	7c7b      	ldrb	r3, [r7, #17]
 800190c:	2b04      	cmp	r3, #4
 800190e:	d119      	bne.n	8001944 <scaling_entity+0x2ec>
	{
		return;
	}

	res = f_rename(tempFile, scalFilePath);
 8001910:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001912:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001914:	f00c faa0 	bl	800de58 <f_rename>
 8001918:	4603      	mov	r3, r0
 800191a:	747b      	strb	r3, [r7, #17]

	if(res != FR_OK)
 800191c:	7c7b      	ldrb	r3, [r7, #17]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d112      	bne.n	8001948 <scaling_entity+0x2f0>
	 * Atribuim noile valori entitatii prelucrate
	 */

	//free(entity->filePathName);

	entity->x1=x1;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	8afa      	ldrh	r2, [r7, #22]
 8001926:	80da      	strh	r2, [r3, #6]
	entity->y1=y1;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	8aba      	ldrh	r2, [r7, #20]
 800192c:	811a      	strh	r2, [r3, #8]
	assign_file_path_entity(entity, scalFilePath);
 800192e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f001 fcdc 	bl	80032ee <assign_file_path_entity>

	free(data);
 8001936:	69b8      	ldr	r0, [r7, #24]
 8001938:	f00c fbec 	bl	800e114 <free>
	free(scalFilePath);
 800193c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800193e:	f00c fbe9 	bl	800e114 <free>
 8001942:	e002      	b.n	800194a <scaling_entity+0x2f2>
		return;
 8001944:	bf00      	nop
 8001946:	e000      	b.n	800194a <scaling_entity+0x2f2>
		return;
 8001948:	bf00      	nop
	//free(entity->data);

}
 800194a:	3744      	adds	r7, #68	@ 0x44
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	20000008 	.word	0x20000008
 8001954:	0800e518 	.word	0x0800e518
 8001958:	0800e534 	.word	0x0800e534
 800195c:	55555556 	.word	0x55555556

08001960 <rotate_entity>:


void rotate_entity(ENTITY *entity, int theta)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b08b      	sub	sp, #44	@ 0x2c
 8001964:	af02      	add	r7, sp, #8
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
	 */


	/*Vom elimina din campul vizual imaginea curenta*/

	draw_rectangle(entity->x0, entity->y0, entity->x1, entity->y1, BackGroundColor);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001970:	b298      	uxth	r0, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001978:	b299      	uxth	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001980:	b29a      	uxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001988:	b29c      	uxth	r4, r3
 800198a:	4b64      	ldr	r3, [pc, #400]	@ (8001b1c <rotate_entity+0x1bc>)
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	4623      	mov	r3, r4
 8001992:	f7ff fac9 	bl	8000f28 <draw_rectangle>

	/*Aflam initial coordonatele pivotului de referinta*/

	const int16_t pivotX = entity->x0 + (int16_t)(entity->x1/2);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800199c:	b29a      	uxth	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80019a4:	0fd9      	lsrs	r1, r3, #31
 80019a6:	440b      	add	r3, r1
 80019a8:	105b      	asrs	r3, r3, #1
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	82fb      	strh	r3, [r7, #22]
	const int16_t pivotY = entity->y0 + (int16_t)(entity->y1/2);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019c2:	0fd9      	lsrs	r1, r3, #31
 80019c4:	440b      	add	r3, r1
 80019c6:	105b      	asrs	r3, r3, #1
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	82bb      	strh	r3, [r7, #20]

	int16_t i = (int16_t)(-(entity->y1/2));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019d8:	0fda      	lsrs	r2, r3, #31
 80019da:	4413      	add	r3, r2
 80019dc:	105b      	asrs	r3, r3, #1
 80019de:	b21b      	sxth	r3, r3
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	425b      	negs	r3, r3
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	83fb      	strh	r3, [r7, #30]
	int16_t j = (int16_t)(-(entity->x1/2));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80019ee:	0fda      	lsrs	r2, r3, #31
 80019f0:	4413      	add	r3, r2
 80019f2:	105b      	asrs	r3, r3, #1
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	425b      	negs	r3, r3
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	83bb      	strh	r3, [r7, #28]

	int16_t rotPosX = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	827b      	strh	r3, [r7, #18]
	int16_t rotPosY = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	823b      	strh	r3, [r7, #16]

	bool flagImgDone = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]
	bool flagPixel = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	76fb      	strb	r3, [r7, #27]
	uint16_t byteNr = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	81bb      	strh	r3, [r7, #12]

	uint8_t pixel[3];


	while(!flagImgDone)
 8001a12:	e074      	b.n	8001afe <rotate_entity+0x19e>
	{
		read_image_file(entity, &byteNr, &flagImgDone);
 8001a14:	f107 020f 	add.w	r2, r7, #15
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f001 fdac 	bl	800357c <read_image_file>


		for(int16_t k = 0; k<byteNr; k++)
 8001a24:	2300      	movs	r3, #0
 8001a26:	833b      	strh	r3, [r7, #24]
 8001a28:	e064      	b.n	8001af4 <rotate_entity+0x194>
		{
			if(j == (entity->x1/2))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a30:	0fda      	lsrs	r2, r3, #31
 8001a32:	4413      	add	r3, r2
 8001a34:	105b      	asrs	r3, r3, #1
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d110      	bne.n	8001a62 <rotate_entity+0x102>
			{
				i++;
 8001a40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3301      	adds	r3, #1
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	83fb      	strh	r3, [r7, #30]
				j = (int16_t)(-(entity->x1/2));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a52:	0fda      	lsrs	r2, r3, #31
 8001a54:	4413      	add	r3, r2
 8001a56:	105b      	asrs	r3, r3, #1
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	425b      	negs	r3, r3
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	83bb      	strh	r3, [r7, #28]

			}

			if(k%3 == 0)
 8001a62:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001a66:	4b2e      	ldr	r3, [pc, #184]	@ (8001b20 <rotate_entity+0x1c0>)
 8001a68:	fb83 3102 	smull	r3, r1, r3, r2
 8001a6c:	17d3      	asrs	r3, r2, #31
 8001a6e:	1ac9      	subs	r1, r1, r3
 8001a70:	460b      	mov	r3, r1
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	440b      	add	r3, r1
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <rotate_entity+0x122>
			{
				flagPixel = 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	76fb      	strb	r3, [r7, #27]
			}

			if(flagPixel == 1)
 8001a82:	7efb      	ldrb	r3, [r7, #27]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d02f      	beq.n	8001ae8 <rotate_entity+0x188>
			{
				pixel[0] = entity->ST.SD.data[k];
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001a90:	4413      	add	r3, r2
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	723b      	strb	r3, [r7, #8]
				pixel[1] = entity->ST.SD.data[k+1];
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	727b      	strb	r3, [r7, #9]
				pixel[2] = entity->ST.SD.data[k+2];
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001aae:	3302      	adds	r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	72bb      	strb	r3, [r7, #10]

				/*Test pentru 90 de grade*/

				rotPosX = -i + pivotX;
 8001ab6:	8afa      	ldrh	r2, [r7, #22]
 8001ab8:	8bfb      	ldrh	r3, [r7, #30]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	827b      	strh	r3, [r7, #18]
				rotPosY =  j + pivotY;
 8001ac0:	8bba      	ldrh	r2, [r7, #28]
 8001ac2:	8abb      	ldrh	r3, [r7, #20]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	823b      	strh	r3, [r7, #16]

				draw_pixel_data(rotPosX, rotPosY, pixel);
 8001aca:	8a7b      	ldrh	r3, [r7, #18]
 8001acc:	8a39      	ldrh	r1, [r7, #16]
 8001ace:	f107 0208 	add.w	r2, r7, #8
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe ff86 	bl	80009e4 <draw_pixel_data>

				j++;
 8001ad8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	83bb      	strh	r3, [r7, #28]
				flagPixel = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	76fb      	strb	r3, [r7, #27]
		for(int16_t k = 0; k<byteNr; k++)
 8001ae8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	833b      	strh	r3, [r7, #24]
 8001af4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001af8:	89ba      	ldrh	r2, [r7, #12]
 8001afa:	4293      	cmp	r3, r2
 8001afc:	db95      	blt.n	8001a2a <rotate_entity+0xca>
	while(!flagImgDone)
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	f083 0301 	eor.w	r3, r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d184      	bne.n	8001a14 <rotate_entity+0xb4>

		}
	}


	free(entity->ST.SD.data);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f00c fb00 	bl	800e114 <free>

}
 8001b14:	bf00      	nop
 8001b16:	3724      	adds	r7, #36	@ 0x24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd90      	pop	{r4, r7, pc}
 8001b1c:	20000008 	.word	0x20000008
 8001b20:	55555556 	.word	0x55555556

08001b24 <HAL_TIM_PeriodElapsedCallback>:
TCB tcb[MAXPR];
TCB *currentProcess;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	/*
	 * ISR aferent timerului sistemului de operare.
	 * Perioada: Ts = 1ms
	 */

	kernel_count_sleep(); /*modifica flagAllSleep in 1 sau 0*/
 8001b2c:	f000 f988 	bl	8001e40 <kernel_count_sleep>

    if (htim->Instance == TIM4)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0c      	ldr	r2, [pc, #48]	@ (8001b68 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d111      	bne.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x3a>
    {

    	if(startOS == 1 && mutex==0 && flagAllSleep==0)
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d10d      	bne.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x3a>
 8001b42:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x3a>
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d105      	bne.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x3a>
    	{
    		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; /*comutare de context cu ISR PendSV*/
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5c:	6053      	str	r3, [r2, #4]
    	}
    }


}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40000800 	.word	0x40000800
 8001b6c:	200000a5 	.word	0x200000a5
 8001b70:	200000a8 	.word	0x200000a8
 8001b74:	200000ac 	.word	0x200000ac
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <PendSV_Handler>:
	 * citirea datelor de pe cardul SD prin SDIO)
	 * Feature: De comutat in functie de o politica de planificare,
	 * momentan se comuta circular intre 2 procese de test!
	 */

    __asm("CPSID I");
 8001b7c:	b672      	cpsid	i

    /*salvare context curent*/
    __asm("PUSH {R4-R7}");
 8001b7e:	b4f0      	push	{r4, r5, r6, r7}
    __asm("MOV R4, R8");
 8001b80:	4644      	mov	r4, r8
    __asm("MOV R5, R9");
 8001b82:	464d      	mov	r5, r9
    __asm("MOV R6, R10");
 8001b84:	4656      	mov	r6, sl
    __asm("MOV R7, R11");
 8001b86:	465f      	mov	r7, fp
    __asm("PUSH {R4-R7}");
 8001b88:	b4f0      	push	{r4, r5, r6, r7}
    __asm("LDR R4, =currentProcess");
 8001b8a:	4c0b      	ldr	r4, [pc, #44]	@ (8001bb8 <PendSV_Handler+0x3c>)
    __asm("LDR R5, [R4]"); /*R5->pstack*/
 8001b8c:	6825      	ldr	r5, [r4, #0]
    __asm("MOV R6, SP");
 8001b8e:	466e      	mov	r6, sp
    __asm("STR R6, [R5]"); /*salvam PS curent in pstack*/
 8001b90:	602e      	str	r6, [r5, #0]

    /*apel scheduler pentru adresa next proces*/
    __asm("PUSH {R0-R3, LR}");
 8001b92:	b50f      	push	{r0, r1, r2, r3, lr}
    __asm("LDR R0, =kernel_scheduler");
 8001b94:	4809      	ldr	r0, [pc, #36]	@ (8001bbc <PendSV_Handler+0x40>)
    __asm("BLX R0");
 8001b96:	4780      	blx	r0
    __asm("POP {R1-R3, R12, LR}");
 8001b98:	e8bd 500e 	ldmia.w	sp!, {r1, r2, r3, ip, lr}

    /*restaurare context al proc ales de scheduler*/
    __asm("LDR R4, =currentProcess");
 8001b9c:	4c06      	ldr	r4, [pc, #24]	@ (8001bb8 <PendSV_Handler+0x3c>)
    __asm("STR R0, [R4]");
 8001b9e:	6020      	str	r0, [r4, #0]
    __asm("LDR R5, [R0]");
 8001ba0:	6805      	ldr	r5, [r0, #0]
    __asm("MOV SP, R5");
 8001ba2:	46ad      	mov	sp, r5
    __asm("POP {R4-R7}");
 8001ba4:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV R8, R4");
 8001ba6:	46a0      	mov	r8, r4
    __asm("MOV R9, R5");
 8001ba8:	46a9      	mov	r9, r5
    __asm("MOV R10, R6");
 8001baa:	46b2      	mov	sl, r6
    __asm("MOV R11, R7");
 8001bac:	46bb      	mov	fp, r7
    __asm("POP {R4-R7}");
 8001bae:	bcf0      	pop	{r4, r5, r6, r7}

    __asm("CPSIE I");
 8001bb0:	b662      	cpsie	i
    __asm("BX LR");
 8001bb2:	4770      	bx	lr
}
 8001bb4:	bf00      	nop
 8001bb6:	0000      	.short	0x0000
 8001bb8:	20014178 	.word	0x20014178
 8001bbc:	08001dfd 	.word	0x08001dfd

08001bc0 <kernel_add_process>:


void kernel_add_process(void (*adrFunction)(void))
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

	__asm("CPSID   I");
 8001bc8:	b672      	cpsid	i

	if(nrProc==MAXPR)
 8001bca:	4b68      	ldr	r3, [pc, #416]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b0a      	cmp	r3, #10
 8001bd0:	d101      	bne.n	8001bd6 <kernel_add_process+0x16>
	{
	    __asm("CPSIE   I ");
 8001bd2:	b662      	cpsie	i
		return;
 8001bd4:	e0c4      	b.n	8001d60 <kernel_add_process+0x1a0>
	}

	if(nrProc == 0)
 8001bd6:	4b65      	ldr	r3, [pc, #404]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d126      	bne.n	8001c2c <kernel_add_process+0x6c>
	{
		tcb[0].pnext = &tcb[0];
 8001bde:	4b64      	ldr	r3, [pc, #400]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001be0:	4a63      	ldr	r2, [pc, #396]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001be2:	605a      	str	r2, [r3, #4]

		tcb[0].pstack = &tcb[0].stack[STACKSIZE-16];            /*Atribuire SP*/
 8001be4:	4b62      	ldr	r3, [pc, #392]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001be6:	4a63      	ldr	r2, [pc, #396]	@ (8001d74 <kernel_add_process+0x1b4>)
 8001be8:	601a      	str	r2, [r3, #0]
		tcb[0].pfunction = adrFunction;                         /*Atribuire adr task in TCB*/
 8001bea:	4a61      	ldr	r2, [pc, #388]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6093      	str	r3, [r2, #8]
		tcb[0].stack[STACKSIZE-1] = 0x01000000;                 /*Atribuire thumb mod operare reg*/
 8001bf0:	4b5f      	ldr	r3, [pc, #380]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001bf2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001bfc:	6093      	str	r3, [r2, #8]
		tcb[0].stack[STACKSIZE-2] = (int32_t)tcb[0].pfunction;  /*Atribuire reg PC catre adr incep Task/functie*/
 8001bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b5a      	ldr	r3, [pc, #360]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001c06:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001c0a:	605a      	str	r2, [r3, #4]
		tcb[0].pID = nrProc++;
 8001c0c:	4b57      	ldr	r3, [pc, #348]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	b2d1      	uxtb	r1, r2
 8001c14:	4a55      	ldr	r2, [pc, #340]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001c16:	7011      	strb	r1, [r2, #0]
 8001c18:	4a55      	ldr	r2, [pc, #340]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001c1a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001c1e:	7313      	strb	r3, [r2, #12]
		tcb[0].state = awake;
 8001c20:	4b53      	ldr	r3, [pc, #332]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001c22:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001c26:	2201      	movs	r2, #1
 8001c28:	735a      	strb	r2, [r3, #13]
 8001c2a:	e098      	b.n	8001d5e <kernel_add_process+0x19e>

	}

	else
	{
		tcb[nrProc].pnext = &tcb[nrProc-1];
 8001c2c:	4b4f      	ldr	r3, [pc, #316]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	4a4e      	ldr	r2, [pc, #312]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001c34:	7812      	ldrb	r2, [r2, #0]
 8001c36:	4610      	mov	r0, r2
 8001c38:	f242 0214 	movw	r2, #8212	@ 0x2014
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
 8001c40:	4a4b      	ldr	r2, [pc, #300]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001c42:	441a      	add	r2, r3
 8001c44:	494a      	ldr	r1, [pc, #296]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001c46:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001c4a:	fb00 f303 	mul.w	r3, r0, r3
 8001c4e:	440b      	add	r3, r1
 8001c50:	3304      	adds	r3, #4
 8001c52:	601a      	str	r2, [r3, #0]
		tcb[0].pnext = &tcb[nrProc];
 8001c54:	4b45      	ldr	r3, [pc, #276]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	4a43      	ldr	r2, [pc, #268]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001c64:	4413      	add	r3, r2
 8001c66:	4a42      	ldr	r2, [pc, #264]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001c68:	6053      	str	r3, [r2, #4]

		tcb[nrProc].pstack = &tcb[nrProc].stack[STACKSIZE-16];           /*Atribuire SP*/
 8001c6a:	4b40      	ldr	r3, [pc, #256]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b3e      	ldr	r3, [pc, #248]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	f503 53fe 	add.w	r3, r3, #8128	@ 0x1fc0
 8001c82:	3308      	adds	r3, #8
 8001c84:	4a3a      	ldr	r2, [pc, #232]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001c86:	4413      	add	r3, r2
 8001c88:	1d1a      	adds	r2, r3, #4
 8001c8a:	4939      	ldr	r1, [pc, #228]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001c8c:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001c90:	fb00 f303 	mul.w	r3, r0, r3
 8001c94:	440b      	add	r3, r1
 8001c96:	601a      	str	r2, [r3, #0]
		tcb[nrProc].pfunction = adrFunction;                             /*Atribuire adr task in TCB*/
 8001c98:	4b34      	ldr	r3, [pc, #208]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4a34      	ldr	r2, [pc, #208]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001ca0:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	3308      	adds	r3, #8
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	601a      	str	r2, [r3, #0]
		tcb[nrProc].stack[STACKSIZE-1] = 0x01000000;                     /*Atribuire thumb mod operare reg*/
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001cb8:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001cc6:	3308      	adds	r3, #8
 8001cc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ccc:	601a      	str	r2, [r3, #0]
		tcb[nrProc].stack[STACKSIZE-2] = (int32_t)tcb[nrProc].pfunction; /*Atribuire reg PC catre adr incep Task/functie*/
 8001cce:	4b27      	ldr	r3, [pc, #156]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4a26      	ldr	r2, [pc, #152]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001cd6:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001cda:	fb01 f303 	mul.w	r3, r1, r3
 8001cde:	4413      	add	r3, r2
 8001ce0:	3308      	adds	r3, #8
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	4611      	mov	r1, r2
 8001cec:	4a20      	ldr	r2, [pc, #128]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001cee:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001cf2:	fb00 f303 	mul.w	r3, r0, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	6019      	str	r1, [r3, #0]
		tcb[nrProc].pID = nrProc;
 8001d00:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001d08:	7819      	ldrb	r1, [r3, #0]
 8001d0a:	4a19      	ldr	r2, [pc, #100]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001d0c:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001d10:	fb00 f303 	mul.w	r3, r0, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001d1a:	330c      	adds	r3, #12
 8001d1c:	460a      	mov	r2, r1
 8001d1e:	701a      	strb	r2, [r3, #0]
		tcb[nrProc].state = awake;
 8001d20:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001d28:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001d2c:	fb01 f303 	mul.w	r3, r1, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001d36:	330d      	adds	r3, #13
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]

	    currentProcess = &tcb[nrProc];
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001d46:	fb02 f303 	mul.w	r3, r2, r3
 8001d4a:	4a09      	ldr	r2, [pc, #36]	@ (8001d70 <kernel_add_process+0x1b0>)
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <kernel_add_process+0x1b8>)
 8001d50:	6013      	str	r3, [r2, #0]
	    nrProc++;
 8001d52:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	3301      	adds	r3, #1
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4b04      	ldr	r3, [pc, #16]	@ (8001d6c <kernel_add_process+0x1ac>)
 8001d5c:	701a      	strb	r2, [r3, #0]
	}

    __asm("CPSIE   I ");
 8001d5e:	b662      	cpsie	i

}
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	200000a4 	.word	0x200000a4
 8001d70:	200000b0 	.word	0x200000b0
 8001d74:	2000207c 	.word	0x2000207c
 8001d78:	20014178 	.word	0x20014178

08001d7c <kernel_start>:
{
	/*
	 * Functie de start a kernelului.
	 */

	__asm("CPSID   I");
 8001d7c:	b672      	cpsid	i

	__asm("LDR     R0, =startOS");
 8001d7e:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <kernel_start+0x34>)
	__asm("MOV     R1, 1");
 8001d80:	f04f 0101 	mov.w	r1, #1
	__asm("STR     R1, [R0]");
 8001d84:	6001      	str	r1, [r0, #0]
    __asm("LDR     R0, =currentProcess");
 8001d86:	480b      	ldr	r0, [pc, #44]	@ (8001db4 <kernel_start+0x38>)
    __asm("LDR     R2, [R0]");
 8001d88:	6802      	ldr	r2, [r0, #0]
    __asm("LDR     R4, [R2]");
 8001d8a:	6814      	ldr	r4, [r2, #0]
    __asm("MOV     SP, R4"); /*punem in SP procesorului pstack al &curentProc*/
 8001d8c:	46a5      	mov	sp, r4
    /*restauram contextul initial, emuland o intr*/
    __asm("POP     {R4-R7}");
 8001d8e:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("MOV     R8, R4");
 8001d90:	46a0      	mov	r8, r4
    __asm("MOV     R9, R5");
 8001d92:	46a9      	mov	r9, r5
    __asm("MOV     R10, R6");
 8001d94:	46b2      	mov	sl, r6
    __asm("MOV     R11, R7");
 8001d96:	46bb      	mov	fp, r7
    __asm("POP     {R4-R7}");
 8001d98:	bcf0      	pop	{r4, r5, r6, r7}
    __asm("POP     {R0-R3}");
 8001d9a:	bc0f      	pop	{r0, r1, r2, r3}
    __asm("POP     {R4}");
 8001d9c:	bc10      	pop	{r4}
    __asm("MOV     R12, R4");
 8001d9e:	46a4      	mov	ip, r4
    __asm("ADD     SP,SP,#4"); /*restauram registrul LR sarind peste R12*/
 8001da0:	b001      	add	sp, #4
    __asm("POP     {R4}");		/*deaorece nu se poate face pop pentru R12*/
 8001da2:	bc10      	pop	{r4}

    __asm("MOV     LR, R4");
 8001da4:	46a6      	mov	lr, r4
    __asm("ADD     SP,SP,#4"); /*simulam comportamentul procesorului sarind la PC*/
 8001da6:	b001      	add	sp, #4

    __asm("CPSIE   I ");
 8001da8:	b662      	cpsie	i
    __asm("BX      LR");
 8001daa:	4770      	bx	lr

}
 8001dac:	bf00      	nop
 8001dae:	0000      	.short	0x0000
 8001db0:	200000a5 	.word	0x200000a5
 8001db4:	20014178 	.word	0x20014178

08001db8 <kernel_delay>:


void kernel_delay(unsigned int delay)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	 * currentProcess.
	 * Input: void
	 * Output: void
	 */

	currentProcess->state = sleep;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <kernel_delay+0x3c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001dc8:	2200      	movs	r2, #0
 8001dca:	735a      	strb	r2, [r3, #13]
	currentProcess->n = delay;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <kernel_delay+0x3c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6113      	str	r3, [r2, #16]

	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk; /*comutare de context cu ISR PendSV*/
 8001dda:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <kernel_delay+0x40>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4a06      	ldr	r2, [pc, #24]	@ (8001df8 <kernel_delay+0x40>)
 8001de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de4:	6053      	str	r3, [r2, #4]

}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20014178 	.word	0x20014178
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <kernel_scheduler>:


static TCB* kernel_scheduler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
	 * Input: void
	 * Output: TCB*(adresa TCB al procesului)
	 */


	TCB *temp = currentProcess->pnext;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <kernel_scheduler+0x40>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	607b      	str	r3, [r7, #4]

	while(temp!=currentProcess)
 8001e0a:	e00a      	b.n	8001e22 <kernel_scheduler+0x26>
	{
		if(temp->state == awake)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e12:	7b5b      	ldrb	r3, [r3, #13]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <kernel_scheduler+0x20>
		{
			return temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	e009      	b.n	8001e30 <kernel_scheduler+0x34>
		}

		else
		{
			temp = temp->pnext;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	607b      	str	r3, [r7, #4]
	while(temp!=currentProcess)
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <kernel_scheduler+0x40>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d1ef      	bne.n	8001e0c <kernel_scheduler+0x10>
	}

	/*In cazul in care toate procesele sunt in sleep
	 * Se va returna adresa procesului curent*/

	return currentProcess;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	@ (8001e3c <kernel_scheduler+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]

}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	20014178 	.word	0x20014178

08001e40 <kernel_count_sleep>:



void kernel_count_sleep(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
	 * Output: void
	 */

	static uint8_t nrProcSleep = 0;

	nrProcSleep = 0;
 8001e46:	4b31      	ldr	r3, [pc, #196]	@ (8001f0c <kernel_count_sleep+0xcc>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
	flagAllSleep = 0;
 8001e4c:	4b30      	ldr	r3, [pc, #192]	@ (8001f10 <kernel_count_sleep+0xd0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]

	for(uint8_t i=0; i<nrProc; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	71fb      	strb	r3, [r7, #7]
 8001e56:	e044      	b.n	8001ee2 <kernel_count_sleep+0xa2>
	{
		if(tcb[i].state == sleep)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8001f14 <kernel_count_sleep+0xd4>)
 8001e5c:	f242 0114 	movw	r1, #8212	@ 0x2014
 8001e60:	fb01 f303 	mul.w	r3, r1, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e6a:	330d      	adds	r3, #13
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d134      	bne.n	8001edc <kernel_count_sleep+0x9c>
		{
			nrProcSleep++;
 8001e72:	4b26      	ldr	r3, [pc, #152]	@ (8001f0c <kernel_count_sleep+0xcc>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <kernel_count_sleep+0xcc>)
 8001e7c:	701a      	strb	r2, [r3, #0]

			tcb[i].n--;
 8001e7e:	79fa      	ldrb	r2, [r7, #7]
 8001e80:	4924      	ldr	r1, [pc, #144]	@ (8001f14 <kernel_count_sleep+0xd4>)
 8001e82:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e90:	3310      	adds	r3, #16
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	1e59      	subs	r1, r3, #1
 8001e96:	481f      	ldr	r0, [pc, #124]	@ (8001f14 <kernel_count_sleep+0xd4>)
 8001e98:	f242 0314 	movw	r3, #8212	@ 0x2014
 8001e9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ea0:	4403      	add	r3, r0
 8001ea2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ea6:	3310      	adds	r3, #16
 8001ea8:	6019      	str	r1, [r3, #0]

			if(tcb[i].n == 0)
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	4a19      	ldr	r2, [pc, #100]	@ (8001f14 <kernel_count_sleep+0xd4>)
 8001eae:	f242 0114 	movw	r1, #8212	@ 0x2014
 8001eb2:	fb01 f303 	mul.w	r3, r1, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ebc:	3310      	adds	r3, #16
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10b      	bne.n	8001edc <kernel_count_sleep+0x9c>
			{
				tcb[i].state = awake;
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	4a13      	ldr	r2, [pc, #76]	@ (8001f14 <kernel_count_sleep+0xd4>)
 8001ec8:	f242 0114 	movw	r1, #8212	@ 0x2014
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ed6:	330d      	adds	r3, #13
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<nrProc; i++)
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f18 <kernel_count_sleep+0xd8>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	79fa      	ldrb	r2, [r7, #7]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d3b5      	bcc.n	8001e58 <kernel_count_sleep+0x18>
			}
		}
	}

	if(nrProcSleep == nrProc)
 8001eec:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <kernel_count_sleep+0xcc>)
 8001eee:	781a      	ldrb	r2, [r3, #0]
 8001ef0:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <kernel_count_sleep+0xd8>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d102      	bne.n	8001efe <kernel_count_sleep+0xbe>
	{
		flagAllSleep = 1;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <kernel_count_sleep+0xd0>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	701a      	strb	r2, [r3, #0]
	}


}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	2001417c 	.word	0x2001417c
 8001f10:	200000ac 	.word	0x200000ac
 8001f14:	200000b0 	.word	0x200000b0
 8001f18:	200000a4 	.word	0x200000a4

08001f1c <LCD_send_command>:
volatile extern uint8_t flagDmaSpiRx;
extern UART_HandleTypeDef huart1;


void LCD_send_command(uint8_t cmd)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
	 * pentru a realiza transmiterea comenzii (DC,CS).
	 * Input: 1. Comanda pe 8 biti (de obicei in hexazecimal)
	 * Output: Void
	 */

	DC_COMMAND();                                                //Modul de comanda DC LOW
 8001f26:	2200      	movs	r2, #0
 8001f28:	2108      	movs	r1, #8
 8001f2a:	480c      	ldr	r0, [pc, #48]	@ (8001f5c <LCD_send_command+0x40>)
 8001f2c:	f003 fd3c 	bl	80059a8 <HAL_GPIO_WritePin>
	CS_A();                                                      //selectare dispozitiv CS LOW
 8001f30:	2200      	movs	r2, #0
 8001f32:	2110      	movs	r1, #16
 8001f34:	4809      	ldr	r0, [pc, #36]	@ (8001f5c <LCD_send_command+0x40>)
 8001f36:	f003 fd37 	bl	80059a8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, HAL_MAX_DELAY);  //Transmitere SPI comanda
 8001f3a:	1df9      	adds	r1, r7, #7
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f40:	2201      	movs	r2, #1
 8001f42:	4807      	ldr	r0, [pc, #28]	@ (8001f60 <LCD_send_command+0x44>)
 8001f44:	f005 fa03 	bl	800734e <HAL_SPI_Transmit>

	CS_D();                                                      //deselectare ecran CS HIGH
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2110      	movs	r1, #16
 8001f4c:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <LCD_send_command+0x40>)
 8001f4e:	f003 fd2b 	bl	80059a8 <HAL_GPIO_WritePin>


}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40020c00 	.word	0x40020c00
 8001f60:	20014278 	.word	0x20014278

08001f64 <LCD_send_data_multi>:


void LCD_send_data_multi(uint8_t *data, unsigned int size)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
	 * Input: 1.Pointer pe 8 biti ce include datele de transmis
	 * 		  2.Marimea pointerului, anume a octetilor continut de acesta
	 * Output: Void
	 */

	flagDmaSpiTx = 1;
 8001f6e:	4b34      	ldr	r3, [pc, #208]	@ (8002040 <LCD_send_data_multi+0xdc>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]

	unsigned int valMaxFrame = 65535; //numarul maxim de octeti pe frame
 8001f74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f78:	613b      	str	r3, [r7, #16]
	unsigned int nrFrames = size/valMaxFrame; //numarul de frameuri de trimis
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	617b      	str	r3, [r7, #20]
	unsigned int remainder = size%valMaxFrame; //restul de trimis daca e cazul
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	fbb3 f2f2 	udiv	r2, r3, r2
 8001f8c:	6939      	ldr	r1, [r7, #16]
 8001f8e:	fb01 f202 	mul.w	r2, r1, r2
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]

	DC_DATA();
 8001f96:	2201      	movs	r2, #1
 8001f98:	2108      	movs	r1, #8
 8001f9a:	482a      	ldr	r0, [pc, #168]	@ (8002044 <LCD_send_data_multi+0xe0>)
 8001f9c:	f003 fd04 	bl	80059a8 <HAL_GPIO_WritePin>
	CS_A();
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2110      	movs	r1, #16
 8001fa4:	4827      	ldr	r0, [pc, #156]	@ (8002044 <LCD_send_data_multi+0xe0>)
 8001fa6:	f003 fcff 	bl	80059a8 <HAL_GPIO_WritePin>


	if(size <= valMaxFrame)
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d821      	bhi.n	8001ff6 <LCD_send_data_multi+0x92>
	{
		flagDmaSpiTx = 0;
 8001fb2:	4b23      	ldr	r3, [pc, #140]	@ (8002040 <LCD_send_data_multi+0xdc>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, data, size);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4821      	ldr	r0, [pc, #132]	@ (8002048 <LCD_send_data_multi+0xe4>)
 8001fc2:	f005 fef1 	bl	8007da8 <HAL_SPI_Transmit_DMA>
 8001fc6:	e02c      	b.n	8002022 <LCD_send_data_multi+0xbe>

	else
	{
		while(nrFrames != 0)
		{
			while(flagDmaSpiTx == 0);
 8001fc8:	bf00      	nop
 8001fca:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <LCD_send_data_multi+0xdc>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0fa      	beq.n	8001fca <LCD_send_data_multi+0x66>
			flagDmaSpiTx = 0;
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002040 <LCD_send_data_multi+0xdc>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, valMaxFrame);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4819      	ldr	r0, [pc, #100]	@ (8002048 <LCD_send_data_multi+0xe4>)
 8001fe4:	f005 fee0 	bl	8007da8 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, valMaxFrame, HAL_MAX_DELAY);
			data = data+valMaxFrame;
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	607b      	str	r3, [r7, #4]
			nrFrames--;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
		while(nrFrames != 0)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e5      	bne.n	8001fc8 <LCD_send_data_multi+0x64>
		}

		if(remainder != 0)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00f      	beq.n	8002022 <LCD_send_data_multi+0xbe>
		{
			while(flagDmaSpiTx == 0);
 8002002:	bf00      	nop
 8002004:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <LCD_send_data_multi+0xdc>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0fa      	beq.n	8002004 <LCD_send_data_multi+0xa0>
			flagDmaSpiTx = 0;
 800200e:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <LCD_send_data_multi+0xdc>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, data, remainder);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	b29b      	uxth	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	480a      	ldr	r0, [pc, #40]	@ (8002048 <LCD_send_data_multi+0xe4>)
 800201e:	f005 fec3 	bl	8007da8 <HAL_SPI_Transmit_DMA>
			//HAL_SPI_Transmit(&hspi1, data, remainder, HAL_MAX_DELAY);

		}
	}

	while(flagDmaSpiTx == 0);
 8002022:	bf00      	nop
 8002024:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <LCD_send_data_multi+0xdc>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0fa      	beq.n	8002024 <LCD_send_data_multi+0xc0>
	CS_D();
 800202e:	2201      	movs	r2, #1
 8002030:	2110      	movs	r1, #16
 8002032:	4804      	ldr	r0, [pc, #16]	@ (8002044 <LCD_send_data_multi+0xe0>)
 8002034:	f003 fcb8 	bl	80059a8 <HAL_GPIO_WritePin>

}
 8002038:	bf00      	nop
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200144c0 	.word	0x200144c0
 8002044:	40020c00 	.word	0x40020c00
 8002048:	20014278 	.word	0x20014278

0800204c <LCD_send_data>:


void LCD_send_data(uint8_t data)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
	 * Functie de transmitere a unui singur octet prin SPI (analog cu transmiterea comenzilor).
	 * Parametrii: 1. Datele de transmis pe un octet
	 * Date returnate: Void
	 */

	DC_DATA();
 8002056:	2201      	movs	r2, #1
 8002058:	2108      	movs	r1, #8
 800205a:	480c      	ldr	r0, [pc, #48]	@ (800208c <LCD_send_data+0x40>)
 800205c:	f003 fca4 	bl	80059a8 <HAL_GPIO_WritePin>
	CS_A();
 8002060:	2200      	movs	r2, #0
 8002062:	2110      	movs	r1, #16
 8002064:	4809      	ldr	r0, [pc, #36]	@ (800208c <LCD_send_data+0x40>)
 8002066:	f003 fc9f 	bl	80059a8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t*)&data, 1, HAL_MAX_DELAY);
 800206a:	1df9      	adds	r1, r7, #7
 800206c:	f04f 33ff 	mov.w	r3, #4294967295
 8002070:	2201      	movs	r2, #1
 8002072:	4807      	ldr	r0, [pc, #28]	@ (8002090 <LCD_send_data+0x44>)
 8002074:	f005 f96b 	bl	800734e <HAL_SPI_Transmit>

	CS_D();
 8002078:	2201      	movs	r2, #1
 800207a:	2110      	movs	r1, #16
 800207c:	4803      	ldr	r0, [pc, #12]	@ (800208c <LCD_send_data+0x40>)
 800207e:	f003 fc93 	bl	80059a8 <HAL_GPIO_WritePin>

}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40020c00 	.word	0x40020c00
 8002090:	20014278 	.word	0x20014278

08002094 <ILI9488_driver_init>:



void ILI9488_driver_init()
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
	 * Output: Void
	 */

	//Mai intai vom incepe printr-un RESET HW

	RST_A();
 8002098:	2200      	movs	r2, #0
 800209a:	2140      	movs	r1, #64	@ 0x40
 800209c:	487c      	ldr	r0, [pc, #496]	@ (8002290 <ILI9488_driver_init+0x1fc>)
 800209e:	f003 fc83 	bl	80059a8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80020a2:	200a      	movs	r0, #10
 80020a4:	f002 fb84 	bl	80047b0 <HAL_Delay>
	RST_D();
 80020a8:	2201      	movs	r2, #1
 80020aa:	2140      	movs	r1, #64	@ 0x40
 80020ac:	4878      	ldr	r0, [pc, #480]	@ (8002290 <ILI9488_driver_init+0x1fc>)
 80020ae:	f003 fc7b 	bl	80059a8 <HAL_GPIO_WritePin>

	//Vom continua prin diferite comenzi urmate de setari specifice pentru initializare

	LCD_send_command(0x01); //Reset SW de driver
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7ff ff32 	bl	8001f1c <LCD_send_command>
	HAL_Delay(150);
 80020b8:	2096      	movs	r0, #150	@ 0x96
 80020ba:	f002 fb79 	bl	80047b0 <HAL_Delay>
	LCD_send_command(0x11); //scoatem sistemul din sleep
 80020be:	2011      	movs	r0, #17
 80020c0:	f7ff ff2c 	bl	8001f1c <LCD_send_command>
	HAL_Delay(255);
 80020c4:	20ff      	movs	r0, #255	@ 0xff
 80020c6:	f002 fb73 	bl	80047b0 <HAL_Delay>

	LCD_send_command(0xE0); //Comanda pentru a seta controlul la nivel de GAMMA pozitiv
 80020ca:	20e0      	movs	r0, #224	@ 0xe0
 80020cc:	f7ff ff26 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0x00);	   //Urmat de parametrii ce vor defini curba gamma
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff ffbb 	bl	800204c <LCD_send_data>
	LCD_send_data(0x0C);
 80020d6:	200c      	movs	r0, #12
 80020d8:	f7ff ffb8 	bl	800204c <LCD_send_data>
	LCD_send_data(0x05);
 80020dc:	2005      	movs	r0, #5
 80020de:	f7ff ffb5 	bl	800204c <LCD_send_data>
	LCD_send_data(0x04);
 80020e2:	2004      	movs	r0, #4
 80020e4:	f7ff ffb2 	bl	800204c <LCD_send_data>
	LCD_send_data(0x0F);
 80020e8:	200f      	movs	r0, #15
 80020ea:	f7ff ffaf 	bl	800204c <LCD_send_data>
	LCD_send_data(0x06);
 80020ee:	2006      	movs	r0, #6
 80020f0:	f7ff ffac 	bl	800204c <LCD_send_data>
	LCD_send_data(0x3A);
 80020f4:	203a      	movs	r0, #58	@ 0x3a
 80020f6:	f7ff ffa9 	bl	800204c <LCD_send_data>
	LCD_send_data(0x56);
 80020fa:	2056      	movs	r0, #86	@ 0x56
 80020fc:	f7ff ffa6 	bl	800204c <LCD_send_data>
	LCD_send_data(0x4D);
 8002100:	204d      	movs	r0, #77	@ 0x4d
 8002102:	f7ff ffa3 	bl	800204c <LCD_send_data>
	LCD_send_data(0x03);
 8002106:	2003      	movs	r0, #3
 8002108:	f7ff ffa0 	bl	800204c <LCD_send_data>
	LCD_send_data(0x0A);
 800210c:	200a      	movs	r0, #10
 800210e:	f7ff ff9d 	bl	800204c <LCD_send_data>
	LCD_send_data(0x06);
 8002112:	2006      	movs	r0, #6
 8002114:	f7ff ff9a 	bl	800204c <LCD_send_data>
	LCD_send_data(0x30);
 8002118:	2030      	movs	r0, #48	@ 0x30
 800211a:	f7ff ff97 	bl	800204c <LCD_send_data>
	LCD_send_data(0x3E);
 800211e:	203e      	movs	r0, #62	@ 0x3e
 8002120:	f7ff ff94 	bl	800204c <LCD_send_data>
	LCD_send_data(0x0F);
 8002124:	200f      	movs	r0, #15
 8002126:	f7ff ff91 	bl	800204c <LCD_send_data>

	LCD_send_command(0xE1);  //Comanda pentru a seta controlul la nivel de GAMMA negativ
 800212a:	20e1      	movs	r0, #225	@ 0xe1
 800212c:	f7ff fef6 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0x00);
 8002130:	2000      	movs	r0, #0
 8002132:	f7ff ff8b 	bl	800204c <LCD_send_data>
	LCD_send_data(0x13);
 8002136:	2013      	movs	r0, #19
 8002138:	f7ff ff88 	bl	800204c <LCD_send_data>
	LCD_send_data(0x18);
 800213c:	2018      	movs	r0, #24
 800213e:	f7ff ff85 	bl	800204c <LCD_send_data>
	LCD_send_data(0x01);
 8002142:	2001      	movs	r0, #1
 8002144:	f7ff ff82 	bl	800204c <LCD_send_data>
	LCD_send_data(0x11);
 8002148:	2011      	movs	r0, #17
 800214a:	f7ff ff7f 	bl	800204c <LCD_send_data>
	LCD_send_data(0x06);
 800214e:	2006      	movs	r0, #6
 8002150:	f7ff ff7c 	bl	800204c <LCD_send_data>
	LCD_send_data(0x38);
 8002154:	2038      	movs	r0, #56	@ 0x38
 8002156:	f7ff ff79 	bl	800204c <LCD_send_data>
	LCD_send_data(0x34);
 800215a:	2034      	movs	r0, #52	@ 0x34
 800215c:	f7ff ff76 	bl	800204c <LCD_send_data>
	LCD_send_data(0x4D);
 8002160:	204d      	movs	r0, #77	@ 0x4d
 8002162:	f7ff ff73 	bl	800204c <LCD_send_data>
	LCD_send_data(0x06);
 8002166:	2006      	movs	r0, #6
 8002168:	f7ff ff70 	bl	800204c <LCD_send_data>
	LCD_send_data(0x0D);
 800216c:	200d      	movs	r0, #13
 800216e:	f7ff ff6d 	bl	800204c <LCD_send_data>
	LCD_send_data(0x0B);
 8002172:	200b      	movs	r0, #11
 8002174:	f7ff ff6a 	bl	800204c <LCD_send_data>
	LCD_send_data(0x31);
 8002178:	2031      	movs	r0, #49	@ 0x31
 800217a:	f7ff ff67 	bl	800204c <LCD_send_data>
	LCD_send_data(0x37);
 800217e:	2037      	movs	r0, #55	@ 0x37
 8002180:	f7ff ff64 	bl	800204c <LCD_send_data>
	LCD_send_data(0x0F);
 8002184:	200f      	movs	r0, #15
 8002186:	f7ff ff61 	bl	800204c <LCD_send_data>

	LCD_send_command(0xC0); //Comanda pentru PowerControl1
 800218a:	20c0      	movs	r0, #192	@ 0xc0
 800218c:	f7ff fec6 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0x18);
 8002190:	2018      	movs	r0, #24
 8002192:	f7ff ff5b 	bl	800204c <LCD_send_data>
	LCD_send_data(0x16);
 8002196:	2016      	movs	r0, #22
 8002198:	f7ff ff58 	bl	800204c <LCD_send_data>

	LCD_send_command(0xC1); //Comanda pentru PowerControl2
 800219c:	20c1      	movs	r0, #193	@ 0xc1
 800219e:	f7ff febd 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0x45);
 80021a2:	2045      	movs	r0, #69	@ 0x45
 80021a4:	f7ff ff52 	bl	800204c <LCD_send_data>

	LCD_send_command(0xC2); //Comanda pentru PowerControl3
 80021a8:	20c2      	movs	r0, #194	@ 0xc2
 80021aa:	f7ff feb7 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0x33);
 80021ae:	2033      	movs	r0, #51	@ 0x33
 80021b0:	f7ff ff4c 	bl	800204c <LCD_send_data>

	LCD_send_command(0xC3); //Comanda pentru PowerControl3
 80021b4:	20c3      	movs	r0, #195	@ 0xc3
 80021b6:	f7ff feb1 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0x33);
 80021ba:	2033      	movs	r0, #51	@ 0x33
 80021bc:	f7ff ff46 	bl	800204c <LCD_send_data>


	LCD_send_command(0x36); //Comanda pentru modul de setare al pixelilor (pg 192)
 80021c0:	2036      	movs	r0, #54	@ 0x36
 80021c2:	f7ff feab 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0x5C);    //Comanda pentru setare mod RGB, Scriere st-dr sus-jos 5C
 80021c6:	205c      	movs	r0, #92	@ 0x5c
 80021c8:	f7ff ff40 	bl	800204c <LCD_send_data>

	LCD_send_command(0x3A); //Comanda pentru setarea numarului de biti asociat unui pixel
 80021cc:	203a      	movs	r0, #58	@ 0x3a
 80021ce:	f7ff fea5 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0x06);    //0x66 reprezinta formatul de 18 biti
 80021d2:	2006      	movs	r0, #6
 80021d4:	f7ff ff3a 	bl	800204c <LCD_send_data>

	LCD_send_command(0x00); //NOP pentru mic delay
 80021d8:	2000      	movs	r0, #0
 80021da:	f7ff fe9f 	bl	8001f1c <LCD_send_command>
	LCD_send_command(0x00);
 80021de:	2000      	movs	r0, #0
 80021e0:	f7ff fe9c 	bl	8001f1c <LCD_send_command>

	LCD_send_command(0xB0); //Comanda pentru setarea interfetei de comunicare cu display-ul
 80021e4:	20b0      	movs	r0, #176	@ 0xb0
 80021e6:	f7ff fe99 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0x00);    //Folosim pinul SDO: SDA_EN 0 0 0 VSPL HSPL DPL EPL (pg219)
 80021ea:	2000      	movs	r0, #0
 80021ec:	f7ff ff2e 	bl	800204c <LCD_send_data>

	LCD_send_command(0xB1); //Comanda pentru rata de refresh pentru 24 bit culoare
 80021f0:	20b1      	movs	r0, #177	@ 0xb1
 80021f2:	f7ff fe93 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0xA0);    //Aproximaiv 60HZ
 80021f6:	20a0      	movs	r0, #160	@ 0xa0
 80021f8:	f7ff ff28 	bl	800204c <LCD_send_data>
	LCD_send_data(0x11);  //Date pentru selectie zona de memorie a datelor pe ecran (nu folosim)
 80021fc:	2011      	movs	r0, #17
 80021fe:	f7ff ff25 	bl	800204c <LCD_send_data>

	LCD_send_command(0xB4); //Comanda pentru contrast
 8002202:	20b4      	movs	r0, #180	@ 0xb4
 8002204:	f7ff fe8a 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0x02);    //Contrast 2-Dot standard
 8002208:	2002      	movs	r0, #2
 800220a:	f7ff ff1f 	bl	800204c <LCD_send_data>

	LCD_send_command(0xB5); //Comanda pentru Blanking Porch
 800220e:	20b5      	movs	r0, #181	@ 0xb5
 8002210:	f7ff fe84 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0x02);
 8002214:	2002      	movs	r0, #2
 8002216:	f7ff ff19 	bl	800204c <LCD_send_data>
	LCD_send_data(0x02);
 800221a:	2002      	movs	r0, #2
 800221c:	f7ff ff16 	bl	800204c <LCD_send_data>
	LCD_send_data(0x0A);
 8002220:	200a      	movs	r0, #10
 8002222:	f7ff ff13 	bl	800204c <LCD_send_data>
	LCD_send_data(0x04);
 8002226:	2004      	movs	r0, #4
 8002228:	f7ff ff10 	bl	800204c <LCD_send_data>

	LCD_send_command(0xB6); //Display Function Control
 800222c:	20b6      	movs	r0, #182	@ 0xb6
 800222e:	f7ff fe75 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0x02);
 8002232:	2002      	movs	r0, #2
 8002234:	f7ff ff0a 	bl	800204c <LCD_send_data>
	LCD_send_data(0x02);
 8002238:	2002      	movs	r0, #2
 800223a:	f7ff ff07 	bl	800204c <LCD_send_data>
	LCD_send_data(0x3B);
 800223e:	203b      	movs	r0, #59	@ 0x3b
 8002240:	f7ff ff04 	bl	800204c <LCD_send_data>

	LCD_send_command(0XE9); //Set Image Function
 8002244:	20e9      	movs	r0, #233	@ 0xe9
 8002246:	f7ff fe69 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0x00);    //Dezactivam modul de 24 de biti
 800224a:	2000      	movs	r0, #0
 800224c:	f7ff fefe 	bl	800204c <LCD_send_data>

	LCD_send_command(0xF7); //Comanda pentru DSI dar folosim SPI
 8002250:	20f7      	movs	r0, #247	@ 0xf7
 8002252:	f7ff fe63 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0xA9);
 8002256:	20a9      	movs	r0, #169	@ 0xa9
 8002258:	f7ff fef8 	bl	800204c <LCD_send_data>
	LCD_send_data(0x51);
 800225c:	2051      	movs	r0, #81	@ 0x51
 800225e:	f7ff fef5 	bl	800204c <LCD_send_data>
	LCD_send_data(0x2C);
 8002262:	202c      	movs	r0, #44	@ 0x2c
 8002264:	f7ff fef2 	bl	800204c <LCD_send_data>
	LCD_send_data(0x82);
 8002268:	2082      	movs	r0, #130	@ 0x82
 800226a:	f7ff feef 	bl	800204c <LCD_send_data>


	LCD_send_command(0x11);
 800226e:	2011      	movs	r0, #17
 8002270:	f7ff fe54 	bl	8001f1c <LCD_send_command>
	HAL_Delay(255);
 8002274:	20ff      	movs	r0, #255	@ 0xff
 8002276:	f002 fa9b 	bl	80047b0 <HAL_Delay>
	LCD_send_command(0x51); //Luminozittea Display
 800227a:	2051      	movs	r0, #81	@ 0x51
 800227c:	f7ff fe4e 	bl	8001f1c <LCD_send_command>
	LCD_send_data(0xFF);    //maxima
 8002280:	20ff      	movs	r0, #255	@ 0xff
 8002282:	f7ff fee3 	bl	800204c <LCD_send_data>
	LCD_send_command(0x29); //Display on
 8002286:	2029      	movs	r0, #41	@ 0x29
 8002288:	f7ff fe48 	bl	8001f1c <LCD_send_command>


}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40020c00 	.word	0x40020c00

08002294 <set_adress_window>:




void set_adress_window(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, char x)
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	4604      	mov	r4, r0
 800229c:	4608      	mov	r0, r1
 800229e:	4611      	mov	r1, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	4623      	mov	r3, r4
 80022a4:	80fb      	strh	r3, [r7, #6]
 80022a6:	4603      	mov	r3, r0
 80022a8:	80bb      	strh	r3, [r7, #4]
 80022aa:	460b      	mov	r3, r1
 80022ac:	807b      	strh	r3, [r7, #2]
 80022ae:	4613      	mov	r3, r2
 80022b0:	803b      	strh	r3, [r7, #0]
	 * Output: Void
	 */

	uint8_t data[4];

	LCD_send_command(ILI9488_CASET); //setare coloana anume x0-x1
 80022b2:	202a      	movs	r0, #42	@ 0x2a
 80022b4:	f7ff fe32 	bl	8001f1c <LCD_send_command>
										//se vor tranmite mai intai MSB apoi LSB (pg 175)

	data[0] = (x0 >> 8) & 0x00FF; data[1] = x0 & 0x00FF; //coordonate de start x0
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	b29b      	uxth	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	733b      	strb	r3, [r7, #12]
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	737b      	strb	r3, [r7, #13]
	data[2] = (x1 >> 8) & 0x00FF; data[3] = x1 & 0x00FF; //coordonate de final x1
 80022c8:	887b      	ldrh	r3, [r7, #2]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	73bb      	strb	r3, [r7, #14]
 80022d2:	887b      	ldrh	r3, [r7, #2]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 80022d8:	f107 030c 	add.w	r3, r7, #12
 80022dc:	2104      	movs	r1, #4
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fe40 	bl	8001f64 <LCD_send_data_multi>


	LCD_send_command(ILI9488_PASET);
 80022e4:	202b      	movs	r0, #43	@ 0x2b
 80022e6:	f7ff fe19 	bl	8001f1c <LCD_send_command>

	data[0] = (y0 >> 8) & 0x00FF; data[1] = y0 & 0x00FF; //coordonate de start y0
 80022ea:	88bb      	ldrh	r3, [r7, #4]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	733b      	strb	r3, [r7, #12]
 80022f4:	88bb      	ldrh	r3, [r7, #4]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	737b      	strb	r3, [r7, #13]
	data[2] = (y1 >> 8) & 0x00FF; data[3] = y1 & 0x00FF; //coordonate de final y1
 80022fa:	883b      	ldrh	r3, [r7, #0]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	b29b      	uxth	r3, r3
 8002300:	b2db      	uxtb	r3, r3
 8002302:	73bb      	strb	r3, [r7, #14]
 8002304:	883b      	ldrh	r3, [r7, #0]
 8002306:	b2db      	uxtb	r3, r3
 8002308:	73fb      	strb	r3, [r7, #15]
	LCD_send_data_multi(data, sizeof(data));
 800230a:	f107 030c 	add.w	r3, r7, #12
 800230e:	2104      	movs	r1, #4
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fe27 	bl	8001f64 <LCD_send_data_multi>

	if(x == 'w')
 8002316:	f897 3020 	ldrb.w	r3, [r7, #32]
 800231a:	2b77      	cmp	r3, #119	@ 0x77
 800231c:	d102      	bne.n	8002324 <set_adress_window+0x90>
	{
		LCD_send_command(ILI9488_RAMWR); //Comanda pentru a pregati ecranul sa primeasca culori
 800231e:	202c      	movs	r0, #44	@ 0x2c
 8002320:	f7ff fdfc 	bl	8001f1c <LCD_send_command>
										//Dupa ce am setat intervalul de selectie
	}

	if(x == 'r')
 8002324:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002328:	2b72      	cmp	r3, #114	@ 0x72
 800232a:	d102      	bne.n	8002332 <set_adress_window+0x9e>
	{
		LCD_send_command(ILI9488_RAMRD);
 800232c:	202e      	movs	r0, #46	@ 0x2e
 800232e:	f7ff fdf5 	bl	8001f1c <LCD_send_command>
	}


}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bd90      	pop	{r4, r7, pc}
	...

0800233c <read_pixel_frame>:



void read_pixel_frame(uint16_t x0, uint16_t y0, uint16_t x, uint16_t y, uint8_t*data)
{
 800233c:	b590      	push	{r4, r7, lr}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	4604      	mov	r4, r0
 8002344:	4608      	mov	r0, r1
 8002346:	4611      	mov	r1, r2
 8002348:	461a      	mov	r2, r3
 800234a:	4623      	mov	r3, r4
 800234c:	80fb      	strh	r3, [r7, #6]
 800234e:	4603      	mov	r3, r0
 8002350:	80bb      	strh	r3, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	807b      	strh	r3, [r7, #2]
 8002356:	4613      	mov	r3, r2
 8002358:	803b      	strh	r3, [r7, #0]
	* Functie pentru receptionarea datelor aferente unei portiuni din ecran.
	* Se va selecta o fereastra de adresare LCD-ului, ca mai apoi sa se trimita comanda
	* de transmitere a datelor LCD->MCU.
	*/

	hspi1.Instance->CR1 &= ~SPI_CR1_SPE; //dezactivare temporara SPI
 800235a:	4b7d      	ldr	r3, [pc, #500]	@ (8002550 <read_pixel_frame+0x214>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b7b      	ldr	r3, [pc, #492]	@ (8002550 <read_pixel_frame+0x214>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002368:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 &= ~SPI_CR1_BR;  //resetare valoare BD
 800236a:	4b79      	ldr	r3, [pc, #484]	@ (8002550 <read_pixel_frame+0x214>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b77      	ldr	r3, [pc, #476]	@ (8002550 <read_pixel_frame+0x214>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8002378:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_8; //setare valoare BD prescaler de 8
 800237a:	4b75      	ldr	r3, [pc, #468]	@ (8002550 <read_pixel_frame+0x214>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b73      	ldr	r3, [pc, #460]	@ (8002550 <read_pixel_frame+0x214>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0210 	orr.w	r2, r2, #16
 8002388:	601a      	str	r2, [r3, #0]

	hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 800238a:	4b71      	ldr	r3, [pc, #452]	@ (8002550 <read_pixel_frame+0x214>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b6f      	ldr	r3, [pc, #444]	@ (8002550 <read_pixel_frame+0x214>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002398:	601a      	str	r2, [r3, #0]


	flagDmaSpiRx = 0;
 800239a:	4b6e      	ldr	r3, [pc, #440]	@ (8002554 <read_pixel_frame+0x218>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]

	uint16_t byteNr = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	82fb      	strh	r3, [r7, #22]
	byteNr = ((abs(x-x0))*(abs(y-y0))*3);
 80023a4:	887a      	ldrh	r2, [r7, #2]
 80023a6:	88fb      	ldrh	r3, [r7, #6]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bfb8      	it	lt
 80023ae:	425b      	neglt	r3, r3
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	8839      	ldrh	r1, [r7, #0]
 80023b4:	88bb      	ldrh	r3, [r7, #4]
 80023b6:	1acb      	subs	r3, r1, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bfb8      	it	lt
 80023bc:	425b      	neglt	r3, r3
 80023be:	b29b      	uxth	r3, r3
 80023c0:	fb12 f303 	smulbb	r3, r2, r3
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	0052      	lsls	r2, r2, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	82fb      	strh	r3, [r7, #22]

    uint8_t dummy[1] = {0};
 80023ce:	2300      	movs	r3, #0
 80023d0:	753b      	strb	r3, [r7, #20]

    free(data);
 80023d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023d4:	f00b fe9e 	bl	800e114 <free>
    data = malloc(byteNr);
 80023d8:	8afb      	ldrh	r3, [r7, #22]
 80023da:	4618      	mov	r0, r3
 80023dc:	f00b fe92 	bl	800e104 <malloc>
 80023e0:	4603      	mov	r3, r0
 80023e2:	62bb      	str	r3, [r7, #40]	@ 0x28

    x--;
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	807b      	strh	r3, [r7, #2]
    y--;
 80023ea:	883b      	ldrh	r3, [r7, #0]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	803b      	strh	r3, [r7, #0]

    uint8_t xPos[4] = {x0 >> 8, x0 & 0xFF, x >> 8, x & 0xFF};
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	743b      	strb	r3, [r7, #16]
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	747b      	strb	r3, [r7, #17]
 8002400:	887b      	ldrh	r3, [r7, #2]
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	b29b      	uxth	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	74bb      	strb	r3, [r7, #18]
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	74fb      	strb	r3, [r7, #19]
    uint8_t yPos[4] = {y0 >> 8, y0 & 0xFF, y >> 8, y & 0xFF};
 8002410:	88bb      	ldrh	r3, [r7, #4]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	b29b      	uxth	r3, r3
 8002416:	b2db      	uxtb	r3, r3
 8002418:	733b      	strb	r3, [r7, #12]
 800241a:	88bb      	ldrh	r3, [r7, #4]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	737b      	strb	r3, [r7, #13]
 8002420:	883b      	ldrh	r3, [r7, #0]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	b29b      	uxth	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	73bb      	strb	r3, [r7, #14]
 800242a:	883b      	ldrh	r3, [r7, #0]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	73fb      	strb	r3, [r7, #15]

    CS_A();
 8002430:	2200      	movs	r2, #0
 8002432:	2110      	movs	r1, #16
 8002434:	4848      	ldr	r0, [pc, #288]	@ (8002558 <read_pixel_frame+0x21c>)
 8002436:	f003 fab7 	bl	80059a8 <HAL_GPIO_WritePin>

    DC_COMMAND();
 800243a:	2200      	movs	r2, #0
 800243c:	2108      	movs	r1, #8
 800243e:	4846      	ldr	r0, [pc, #280]	@ (8002558 <read_pixel_frame+0x21c>)
 8002440:	f003 fab2 	bl	80059a8 <HAL_GPIO_WritePin>
    uint8_t cmdCset = 0x2A;
 8002444:	232a      	movs	r3, #42	@ 0x2a
 8002446:	72fb      	strb	r3, [r7, #11]
    HAL_SPI_Transmit(&hspi1, &cmdCset, 1, HAL_MAX_DELAY);
 8002448:	f107 010b 	add.w	r1, r7, #11
 800244c:	f04f 33ff 	mov.w	r3, #4294967295
 8002450:	2201      	movs	r2, #1
 8002452:	483f      	ldr	r0, [pc, #252]	@ (8002550 <read_pixel_frame+0x214>)
 8002454:	f004 ff7b 	bl	800734e <HAL_SPI_Transmit>
    DC_DATA();
 8002458:	2201      	movs	r2, #1
 800245a:	2108      	movs	r1, #8
 800245c:	483e      	ldr	r0, [pc, #248]	@ (8002558 <read_pixel_frame+0x21c>)
 800245e:	f003 faa3 	bl	80059a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, xPos, 4, HAL_MAX_DELAY);
 8002462:	f107 0110 	add.w	r1, r7, #16
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
 800246a:	2204      	movs	r2, #4
 800246c:	4838      	ldr	r0, [pc, #224]	@ (8002550 <read_pixel_frame+0x214>)
 800246e:	f004 ff6e 	bl	800734e <HAL_SPI_Transmit>

    DC_COMMAND();
 8002472:	2200      	movs	r2, #0
 8002474:	2108      	movs	r1, #8
 8002476:	4838      	ldr	r0, [pc, #224]	@ (8002558 <read_pixel_frame+0x21c>)
 8002478:	f003 fa96 	bl	80059a8 <HAL_GPIO_WritePin>
    uint8_t cmdPset = 0x2B;
 800247c:	232b      	movs	r3, #43	@ 0x2b
 800247e:	72bb      	strb	r3, [r7, #10]
    HAL_SPI_Transmit(&hspi1, &cmdPset, 1, HAL_MAX_DELAY);
 8002480:	f107 010a 	add.w	r1, r7, #10
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
 8002488:	2201      	movs	r2, #1
 800248a:	4831      	ldr	r0, [pc, #196]	@ (8002550 <read_pixel_frame+0x214>)
 800248c:	f004 ff5f 	bl	800734e <HAL_SPI_Transmit>
    DC_DATA();
 8002490:	2201      	movs	r2, #1
 8002492:	2108      	movs	r1, #8
 8002494:	4830      	ldr	r0, [pc, #192]	@ (8002558 <read_pixel_frame+0x21c>)
 8002496:	f003 fa87 	bl	80059a8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, yPos, 4, HAL_MAX_DELAY);
 800249a:	f107 010c 	add.w	r1, r7, #12
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
 80024a2:	2204      	movs	r2, #4
 80024a4:	482a      	ldr	r0, [pc, #168]	@ (8002550 <read_pixel_frame+0x214>)
 80024a6:	f004 ff52 	bl	800734e <HAL_SPI_Transmit>

    DC_COMMAND();
 80024aa:	2200      	movs	r2, #0
 80024ac:	2108      	movs	r1, #8
 80024ae:	482a      	ldr	r0, [pc, #168]	@ (8002558 <read_pixel_frame+0x21c>)
 80024b0:	f003 fa7a 	bl	80059a8 <HAL_GPIO_WritePin>
    uint8_t cmdRamRead = 0x2E;
 80024b4:	232e      	movs	r3, #46	@ 0x2e
 80024b6:	727b      	strb	r3, [r7, #9]
    HAL_SPI_Transmit(&hspi1, &cmdRamRead, 1, HAL_MAX_DELAY);
 80024b8:	f107 0109 	add.w	r1, r7, #9
 80024bc:	f04f 33ff 	mov.w	r3, #4294967295
 80024c0:	2201      	movs	r2, #1
 80024c2:	4823      	ldr	r0, [pc, #140]	@ (8002550 <read_pixel_frame+0x214>)
 80024c4:	f004 ff43 	bl	800734e <HAL_SPI_Transmit>
    DC_DATA();
 80024c8:	2201      	movs	r2, #1
 80024ca:	2108      	movs	r1, #8
 80024cc:	4822      	ldr	r0, [pc, #136]	@ (8002558 <read_pixel_frame+0x21c>)
 80024ce:	f003 fa6b 	bl	80059a8 <HAL_GPIO_WritePin>

    HAL_SPI_Receive(&hspi1, dummy, 1, HAL_MAX_DELAY);
 80024d2:	f107 0114 	add.w	r1, r7, #20
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
 80024da:	2201      	movs	r2, #1
 80024dc:	481c      	ldr	r0, [pc, #112]	@ (8002550 <read_pixel_frame+0x214>)
 80024de:	f005 f87a 	bl	80075d6 <HAL_SPI_Receive>
    HAL_SPI_Receive_DMA(&hspi1, data, byteNr);
 80024e2:	8afb      	ldrh	r3, [r7, #22]
 80024e4:	461a      	mov	r2, r3
 80024e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024e8:	4819      	ldr	r0, [pc, #100]	@ (8002550 <read_pixel_frame+0x214>)
 80024ea:	f005 fd0f 	bl	8007f0c <HAL_SPI_Receive_DMA>

    while(flagDmaSpiRx == 0);
 80024ee:	bf00      	nop
 80024f0:	4b18      	ldr	r3, [pc, #96]	@ (8002554 <read_pixel_frame+0x218>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0fa      	beq.n	80024f0 <read_pixel_frame+0x1b4>
    CS_D();
 80024fa:	2201      	movs	r2, #1
 80024fc:	2110      	movs	r1, #16
 80024fe:	4816      	ldr	r0, [pc, #88]	@ (8002558 <read_pixel_frame+0x21c>)
 8002500:	f003 fa52 	bl	80059a8 <HAL_GPIO_WritePin>

    free(data);
 8002504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002506:	f00b fe05 	bl	800e114 <free>

    //HAL_UART_Transmit(&huart1, dummy, 1, HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart1, data, byteNr, HAL_MAX_DELAY);


    hspi1.Instance->CR1 &= ~SPI_CR1_SPE;
 800250a:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <read_pixel_frame+0x214>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <read_pixel_frame+0x214>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002518:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 &= ~SPI_CR1_BR;
 800251a:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <read_pixel_frame+0x214>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <read_pixel_frame+0x214>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8002528:	601a      	str	r2, [r3, #0]
    hspi1.Instance->CR1 |= SPI_BAUDRATEPRESCALER_2;
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <read_pixel_frame+0x214>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <read_pixel_frame+0x214>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	601a      	str	r2, [r3, #0]

    hspi1.Instance->CR1 |= SPI_CR1_SPE; //reactivare SPI
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <read_pixel_frame+0x214>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b04      	ldr	r3, [pc, #16]	@ (8002550 <read_pixel_frame+0x214>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002544:	601a      	str	r2, [r3, #0]

}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	bf00      	nop
 8002550:	20014278 	.word	0x20014278
 8002554:	200144c1 	.word	0x200144c1
 8002558:	40020c00 	.word	0x40020c00

0800255c <HAL_SPI_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	 * folosind DMA. Odata terminat transferul SPI prin DMA,
	 * aceasta functia de CallBack se va apela, setandu-ne un flag
	 * pentru a indica starea acestui transfer de date.
	 */

	if(hspi->Instance == SPI1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a05      	ldr	r2, [pc, #20]	@ (8002580 <HAL_SPI_TxCpltCallback+0x24>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d102      	bne.n	8002574 <HAL_SPI_TxCpltCallback+0x18>
	{
		flagDmaSpiTx = 1;
 800256e:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_SPI_TxCpltCallback+0x28>)
 8002570:	2201      	movs	r2, #1
 8002572:	701a      	strb	r2, [r3, #0]
	}



}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	40013000 	.word	0x40013000
 8002584:	200144c0 	.word	0x200144c0

08002588 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	/*
	 * Functie de CallBack pentru terminarea receptiei datelor
	 * prin SPI folosind DMA (analog cu functia HAL_SPI_TxCpltCallback)
	 */

	if(hspi->Instance == SPI1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a2a      	ldr	r2, [pc, #168]	@ (8002640 <HAL_SPI_RxCpltCallback+0xb8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d102      	bne.n	80025a0 <HAL_SPI_RxCpltCallback+0x18>
	{
		/*
		 * SPI1 folosit pentru LCD
		 */

		flagDmaSpiRx = 1;
 800259a:	4b2a      	ldr	r3, [pc, #168]	@ (8002644 <HAL_SPI_RxCpltCallback+0xbc>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]

	}


	if(hspi->Instance == SPI2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a28      	ldr	r2, [pc, #160]	@ (8002648 <HAL_SPI_RxCpltCallback+0xc0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d145      	bne.n	8002636 <HAL_SPI_RxCpltCallback+0xae>
	{
		/*
		 * Receptionare comenzi controller
		 */

		switch(dataController)
 80025aa:	4b28      	ldr	r3, [pc, #160]	@ (800264c <HAL_SPI_RxCpltCallback+0xc4>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	2b0f      	cmp	r3, #15
 80025b2:	d837      	bhi.n	8002624 <HAL_SPI_RxCpltCallback+0x9c>
 80025b4:	a201      	add	r2, pc, #4	@ (adr r2, 80025bc <HAL_SPI_RxCpltCallback+0x34>)
 80025b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ba:	bf00      	nop
 80025bc:	080025fd 	.word	0x080025fd
 80025c0:	08002605 	.word	0x08002605
 80025c4:	08002625 	.word	0x08002625
 80025c8:	0800260d 	.word	0x0800260d
 80025cc:	08002625 	.word	0x08002625
 80025d0:	08002625 	.word	0x08002625
 80025d4:	08002625 	.word	0x08002625
 80025d8:	08002615 	.word	0x08002615
 80025dc:	08002625 	.word	0x08002625
 80025e0:	08002625 	.word	0x08002625
 80025e4:	08002625 	.word	0x08002625
 80025e8:	08002625 	.word	0x08002625
 80025ec:	08002625 	.word	0x08002625
 80025f0:	08002625 	.word	0x08002625
 80025f4:	08002625 	.word	0x08002625
 80025f8:	0800261d 	.word	0x0800261d
		{
		  	case DxRight:
		  	  currentDx = DxRight;
 80025fc:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <HAL_SPI_RxCpltCallback+0xc8>)
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
		  	  break;
 8002602:	e013      	b.n	800262c <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxLeft:
		  	  currentDx = DxLeft;
 8002604:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <HAL_SPI_RxCpltCallback+0xc8>)
 8002606:	2202      	movs	r2, #2
 8002608:	701a      	strb	r2, [r3, #0]
		  	  break;
 800260a:	e00f      	b.n	800262c <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxUp:
		  	  currentDx = DxUp;
 800260c:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <HAL_SPI_RxCpltCallback+0xc8>)
 800260e:	2204      	movs	r2, #4
 8002610:	701a      	strb	r2, [r3, #0]
		  	  break;
 8002612:	e00b      	b.n	800262c <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxDown:
		  	  currentDx = DxDown;
 8002614:	4b0e      	ldr	r3, [pc, #56]	@ (8002650 <HAL_SPI_RxCpltCallback+0xc8>)
 8002616:	2208      	movs	r2, #8
 8002618:	701a      	strb	r2, [r3, #0]
		  	  break;
 800261a:	e007      	b.n	800262c <HAL_SPI_RxCpltCallback+0xa4>
		  	case DxStart:
		  	  currentDx = DxStart;
 800261c:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <HAL_SPI_RxCpltCallback+0xc8>)
 800261e:	2210      	movs	r2, #16
 8002620:	701a      	strb	r2, [r3, #0]
		  	  break;
 8002622:	e003      	b.n	800262c <HAL_SPI_RxCpltCallback+0xa4>
		  	default:
		  	  currentDx = 0x00;
 8002624:	4b0a      	ldr	r3, [pc, #40]	@ (8002650 <HAL_SPI_RxCpltCallback+0xc8>)
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
		  	  break;
 800262a:	bf00      	nop
		}

		/*Reinitializare intrerupere rcpt SPI2 intr Controller*/

		HAL_SPI_Receive_IT(&hspi2, &dataController, sizeof(dataController));
 800262c:	2201      	movs	r2, #1
 800262e:	4907      	ldr	r1, [pc, #28]	@ (800264c <HAL_SPI_RxCpltCallback+0xc4>)
 8002630:	4808      	ldr	r0, [pc, #32]	@ (8002654 <HAL_SPI_RxCpltCallback+0xcc>)
 8002632:	f005 fa93 	bl	8007b5c <HAL_SPI_Receive_IT>

	}

}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40013000 	.word	0x40013000
 8002644:	200144c1 	.word	0x200144c1
 8002648:	40003800 	.word	0x40003800
 800264c:	2000008c 	.word	0x2000008c
 8002650:	2000008d 	.word	0x2000008d
 8002654:	200142d0 	.word	0x200142d0

08002658 <HAL_DAC_ConvHalfCpltCallbackCh1>:


void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
    /*
     * Functie de CallBack pentru finalizare 1/2 din transfer DMA pe DAC
     */

	flagDmaDAC = 1;
 8002660:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]

}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	200144c2 	.word	0x200144c2

08002678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b093      	sub	sp, #76	@ 0x4c
 800267c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800267e:	f002 f825 	bl	80046cc <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002682:	2200      	movs	r2, #0
 8002684:	210f      	movs	r1, #15
 8002686:	f06f 0001 	mvn.w	r0, #1
 800268a:	f002 f990 	bl	80049ae <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(TIM4_IRQn, 14, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	210e      	movs	r1, #14
 8002692:	201e      	movs	r0, #30
 8002694:	f002 f98b 	bl	80049ae <HAL_NVIC_SetPriority>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002698:	f000 faf2 	bl	8002c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269c:	f000 fd10 	bl	80030c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80026a0:	f000 fcd0 	bl	8003044 <MX_DMA_Init>
  MX_SPI1_Init();
 80026a4:	f000 fba0 	bl	8002de8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80026a8:	f000 fca2 	bl	8002ff0 <MX_USART1_UART_Init>
  MX_DAC_Init();
 80026ac:	f000 fb52 	bl	8002d54 <MX_DAC_Init>
  MX_TIM2_Init();
 80026b0:	f000 fc04 	bl	8002ebc <MX_TIM2_Init>
  MX_SDIO_SD_Init();
 80026b4:	f000 fb78 	bl	8002da8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80026b8:	f008 fc88 	bl	800afcc <MX_FATFS_Init>
  MX_SPI2_Init();
 80026bc:	f000 fbca 	bl	8002e54 <MX_SPI2_Init>
  MX_TIM4_Init();
 80026c0:	f000 fc48 	bl	8002f54 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  init_cardSD();  /*Initializare sistem de fisiere card SD*/
 80026c4:	f000 fd92 	bl	80031ec <init_cardSD>
  ILI9488_driver_init();  /*Initializare driver ecran LCD*/
 80026c8:	f7ff fce4 	bl	8002094 <ILI9488_driver_init>
  HAL_TIM_Base_Start(&htim2); /*Initializare timer2 pentru trigger DMA pe DAC*/
 80026cc:	48da      	ldr	r0, [pc, #872]	@ (8002a38 <main+0x3c0>)
 80026ce:	f006 fb9f 	bl	8008e10 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80026d2:	48da      	ldr	r0, [pc, #872]	@ (8002a3c <main+0x3c4>)
 80026d4:	f006 fc04 	bl	8008ee0 <HAL_TIM_Base_Start_IT>
  HAL_SPI_Receive_IT(&hspi2, &dataController, sizeof(dataController)); /*Initializare SPI2 intr Controller*/
 80026d8:	2201      	movs	r2, #1
 80026da:	49d9      	ldr	r1, [pc, #868]	@ (8002a40 <main+0x3c8>)
 80026dc:	48d9      	ldr	r0, [pc, #868]	@ (8002a44 <main+0x3cc>)
 80026de:	f005 fa3d 	bl	8007b5c <HAL_SPI_Receive_IT>

  main_app(); /*FSM principal al sistemului*/
 80026e2:	f7fd ffef 	bl	80006c4 <main_app>

  fill_screen1(0xFFFF);
 80026e6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80026ea:	f7fe f9a9 	bl	8000a40 <fill_screen1>
  //play_audio_file_echo("Audio/acoustic.txt", 22, 0);
  //HAL_Delay(1000);
  //play_audio_file("Audio/king.txt"); //doremi mine songita song22 king acoustic bambina


  fill_screen1(0xF100);
 80026ee:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 80026f2:	f7fe f9a5 	bl	8000a40 <fill_screen1>
  HAL_Delay(1000);
 80026f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026fa:	f002 f859 	bl	80047b0 <HAL_Delay>
  fill_screen2(0xF00F);
 80026fe:	f24f 000f 	movw	r0, #61455	@ 0xf00f
 8002702:	f7fe f9fd 	bl	8000b00 <fill_screen2>
  HAL_Delay(1000);
 8002706:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800270a:	f002 f851 	bl	80047b0 <HAL_Delay>
  fill_screen2(0xFFFF);
 800270e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002712:	f7fe f9f5 	bl	8000b00 <fill_screen2>
  HAL_Delay(1000);
 8002716:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800271a:	f002 f849 	bl	80047b0 <HAL_Delay>

  unsigned int startTick = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	63bb      	str	r3, [r7, #56]	@ 0x38
  unsigned int endTick = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned int getTime = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	633b      	str	r3, [r7, #48]	@ 0x30

  ENTITY entity;
  init_entity_sd(&entity);
 800272a:	f107 0318 	add.w	r3, r7, #24
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fc57 	bl	8000fe2 <init_entity_sd>

  /*Test SCALARE*/

  fill_screen2(0xFFFF);
 8002734:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002738:	f7fe f9e2 	bl	8000b00 <fill_screen2>

  BackGroundColor = 0xFFFF;
 800273c:	4bc2      	ldr	r3, [pc, #776]	@ (8002a48 <main+0x3d0>)
 800273e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002742:	801a      	strh	r2, [r3, #0]

  entity.x0 = 100;
 8002744:	2364      	movs	r3, #100	@ 0x64
 8002746:	837b      	strh	r3, [r7, #26]
  entity.y0 = 100;
 8002748:	2364      	movs	r3, #100	@ 0x64
 800274a:	83bb      	strh	r3, [r7, #28]
  entity.id = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	763b      	strb	r3, [r7, #24]
  assign_file_path_entity(&entity, "graphic/multi2.bin");
 8002750:	f107 0318 	add.w	r3, r7, #24
 8002754:	49bd      	ldr	r1, [pc, #756]	@ (8002a4c <main+0x3d4>)
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fdc9 	bl	80032ee <assign_file_path_entity>
  draw_entity(&entity);
 800275c:	f107 0318 	add.w	r3, r7, #24
 8002760:	4618      	mov	r0, r3
 8002762:	f7fe fc6b 	bl	800103c <draw_entity>
  HAL_Delay(1000);
 8002766:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800276a:	f002 f821 	bl	80047b0 <HAL_Delay>
  scaling_entity(&entity, 38);
 800276e:	f107 0318 	add.w	r3, r7, #24
 8002772:	ed9f 0ab7 	vldr	s0, [pc, #732]	@ 8002a50 <main+0x3d8>
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe ff6e 	bl	8001658 <scaling_entity>
  draw_rectangle(entity.x0, entity.y0, entity.x1, entity.y1, BackGroundColor);
 800277c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002780:	b298      	uxth	r0, r3
 8002782:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002786:	b299      	uxth	r1, r3
 8002788:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800278c:	b29a      	uxth	r2, r3
 800278e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002792:	b29c      	uxth	r4, r3
 8002794:	4bac      	ldr	r3, [pc, #688]	@ (8002a48 <main+0x3d0>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	4623      	mov	r3, r4
 800279c:	f7fe fbc4 	bl	8000f28 <draw_rectangle>
  draw_entity(&entity);
 80027a0:	f107 0318 	add.w	r3, r7, #24
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fc49 	bl	800103c <draw_entity>
  HAL_Delay(1000);
 80027aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027ae:	f001 ffff 	bl	80047b0 <HAL_Delay>

  //--------------------------------------------

  HAL_Delay(1000);
 80027b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027b6:	f001 fffb 	bl	80047b0 <HAL_Delay>
  //fill_screen2(0xFFFF);

  rotate_entity(&entity, 90);
 80027ba:	f107 0318 	add.w	r3, r7, #24
 80027be:	215a      	movs	r1, #90	@ 0x5a
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff f8cd 	bl	8001960 <rotate_entity>

  HAL_Delay(1000);
 80027c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027ca:	f001 fff1 	bl	80047b0 <HAL_Delay>

  //---------------------------------------------

  HAL_Delay(1000);
 80027ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80027d2:	f001 ffed 	bl	80047b0 <HAL_Delay>

  //fill_screen2(0xFFFF);
  draw_rectangle(entity.x0, entity.y0, entity.x1, entity.y1, BackGroundColor);
 80027d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80027da:	b298      	uxth	r0, r3
 80027dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80027e0:	b299      	uxth	r1, r3
 80027e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80027ec:	b29c      	uxth	r4, r3
 80027ee:	4b96      	ldr	r3, [pc, #600]	@ (8002a48 <main+0x3d0>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	4623      	mov	r3, r4
 80027f6:	f7fe fb97 	bl	8000f28 <draw_rectangle>
  draw_entity(&entity);
 80027fa:	f107 0318 	add.w	r3, r7, #24
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fc1c 	bl	800103c <draw_entity>
  HAL_Delay(1000);
 8002804:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002808:	f001 ffd2 	bl	80047b0 <HAL_Delay>
  //fill_screen2(0xFFFF);
  scaling_entity(&entity, 0.5);
 800280c:	f107 0318 	add.w	r3, r7, #24
 8002810:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe ff1f 	bl	8001658 <scaling_entity>
  HAL_Delay(1000);
 800281a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800281e:	f001 ffc7 	bl	80047b0 <HAL_Delay>
  draw_rectangle(entity.x0, entity.y0, entity.x1, entity.y1, BackGroundColor);
 8002822:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002826:	b298      	uxth	r0, r3
 8002828:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800282c:	b299      	uxth	r1, r3
 800282e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002832:	b29a      	uxth	r2, r3
 8002834:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002838:	b29c      	uxth	r4, r3
 800283a:	4b83      	ldr	r3, [pc, #524]	@ (8002a48 <main+0x3d0>)
 800283c:	881b      	ldrh	r3, [r3, #0]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	4623      	mov	r3, r4
 8002842:	f7fe fb71 	bl	8000f28 <draw_rectangle>
  draw_entity(&entity);
 8002846:	f107 0318 	add.w	r3, r7, #24
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fbf6 	bl	800103c <draw_entity>
  HAL_Delay(1000);
 8002850:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002854:	f001 ffac 	bl	80047b0 <HAL_Delay>

  fill_screen2(0xFFFF);
 8002858:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800285c:	f7fe f950 	bl	8000b00 <fill_screen2>
  entity.x0 = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	837b      	strh	r3, [r7, #26]
  entity.y0 = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	83bb      	strh	r3, [r7, #28]
  assign_file_path_entity(&entity, "graphic/img8.bin");
 8002868:	f107 0318 	add.w	r3, r7, #24
 800286c:	4979      	ldr	r1, [pc, #484]	@ (8002a54 <main+0x3dc>)
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fd3d 	bl	80032ee <assign_file_path_entity>
  draw_entity(&entity);
 8002874:	f107 0318 	add.w	r3, r7, #24
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe fbdf 	bl	800103c <draw_entity>
  HAL_Delay(1000);
 800287e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002882:	f001 ff95 	bl	80047b0 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002886:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800288a:	f7fe f939 	bl	8000b00 <fill_screen2>
  scaling_entity(&entity, 0.5);
 800288e:	f107 0318 	add.w	r3, r7, #24
 8002892:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fede 	bl	8001658 <scaling_entity>
  draw_entity(&entity);
 800289c:	f107 0318 	add.w	r3, r7, #24
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fbcb 	bl	800103c <draw_entity>
  HAL_Delay(1000);
 80028a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028aa:	f001 ff81 	bl	80047b0 <HAL_Delay>
  scaling_entity(&entity, 2);
 80028ae:	f107 0318 	add.w	r3, r7, #24
 80028b2:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fece 	bl	8001658 <scaling_entity>
  draw_entity(&entity);
 80028bc:	f107 0318 	add.w	r3, r7, #24
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe fbbb 	bl	800103c <draw_entity>
  HAL_Delay(1000);
 80028c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80028ca:	f001 ff71 	bl	80047b0 <HAL_Delay>

  //free(dataRec1);

  //Test image print from SD card
  ENTITY ent;
  ent.x0 = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	80fb      	strh	r3, [r7, #6]
  ent.y0 = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	813b      	strh	r3, [r7, #8]
  ent.id = 0x00;
 80028d6:	2300      	movs	r3, #0
 80028d8:	713b      	strb	r3, [r7, #4]
  init_entity_sd(&ent);
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe fb80 	bl	8000fe2 <init_entity_sd>
  assign_file_path_entity(&ent, "graphic/img5.bin");
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	495c      	ldr	r1, [pc, #368]	@ (8002a58 <main+0x3e0>)
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 fd01 	bl	80032ee <assign_file_path_entity>
  draw_entity(&ent);
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fba4 	bl	800103c <draw_entity>
  HAL_Delay(2000);
 80028f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80028f8:	f001 ff5a 	bl	80047b0 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img6.bin");
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	4957      	ldr	r1, [pc, #348]	@ (8002a5c <main+0x3e4>)
 8002900:	4618      	mov	r0, r3
 8002902:	f000 fcf4 	bl	80032ee <assign_file_path_entity>
  draw_entity(&ent);
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fb97 	bl	800103c <draw_entity>
  HAL_Delay(2000);
 800290e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002912:	f001 ff4d 	bl	80047b0 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img8.bin");
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	494e      	ldr	r1, [pc, #312]	@ (8002a54 <main+0x3dc>)
 800291a:	4618      	mov	r0, r3
 800291c:	f000 fce7 	bl	80032ee <assign_file_path_entity>
  draw_entity(&ent);
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe fb8a 	bl	800103c <draw_entity>
  HAL_Delay(2000);
 8002928:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800292c:	f001 ff40 	bl	80047b0 <HAL_Delay>
  assign_file_path_entity(&ent, "graphic/img9.bin");
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	494b      	ldr	r1, [pc, #300]	@ (8002a60 <main+0x3e8>)
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fcda 	bl	80032ee <assign_file_path_entity>
  draw_entity(&ent);
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe fb7d 	bl	800103c <draw_entity>
  HAL_Delay(2000);
 8002942:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002946:	f001 ff33 	bl	80047b0 <HAL_Delay>
  startTick = HAL_GetTick();
 800294a:	f001 ff25 	bl	8004798 <HAL_GetTick>
 800294e:	63b8      	str	r0, [r7, #56]	@ 0x38
  assign_file_path_entity(&ent, "graphic/img92.bin");
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	4944      	ldr	r1, [pc, #272]	@ (8002a64 <main+0x3ec>)
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fcca 	bl	80032ee <assign_file_path_entity>
  draw_entity(&ent);
 800295a:	1d3b      	adds	r3, r7, #4
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fb6d 	bl	800103c <draw_entity>
  endTick = HAL_GetTick();
 8002962:	f001 ff19 	bl	8004798 <HAL_GetTick>
 8002966:	6378      	str	r0, [r7, #52]	@ 0x34
  getTime = endTick - startTick;
 8002968:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800296a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	633b      	str	r3, [r7, #48]	@ 0x30

  fill_screen2(0x0000);
 8002970:	2000      	movs	r0, #0
 8002972:	f7fe f8c5 	bl	8000b00 <fill_screen2>
  assign_file_path_entity(&ent, "graphic/pixel1.bin");
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	493b      	ldr	r1, [pc, #236]	@ (8002a68 <main+0x3f0>)
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fcb7 	bl	80032ee <assign_file_path_entity>
  draw_entity(&ent);
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fb5a 	bl	800103c <draw_entity>
  HAL_Delay(3000);
 8002988:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800298c:	f001 ff10 	bl	80047b0 <HAL_Delay>

  //Test translation

  //ENTITY entity;

  free_entity_sd(&entity);
 8002990:	f107 0318 	add.w	r3, r7, #24
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe fb3f 	bl	8001018 <free_entity_sd>

  entity.x0 = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	837b      	strh	r3, [r7, #26]
  entity.y0 = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	83bb      	strh	r3, [r7, #28]
  entity.x1 = 64;
 80029a2:	2340      	movs	r3, #64	@ 0x40
 80029a4:	83fb      	strh	r3, [r7, #30]
  entity.y1 = 64;
 80029a6:	2340      	movs	r3, #64	@ 0x40
 80029a8:	843b      	strh	r3, [r7, #32]
  entity.id = 0x80;
 80029aa:	2380      	movs	r3, #128	@ 0x80
 80029ac:	763b      	strb	r3, [r7, #24]
  entity.ST.color = 0xF100;
 80029ae:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 80029b2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  //draw_entity(&entity,NULL);

  translation_test(&entity, 1, 0);
 80029b4:	f107 0318 	add.w	r3, r7, #24
 80029b8:	2200      	movs	r2, #0
 80029ba:	2101      	movs	r1, #1
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fd77 	bl	80014b0 <translation_test>

  HAL_Delay(500);
 80029c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029c6:	f001 fef3 	bl	80047b0 <HAL_Delay>
  translation_entity(&entity, entity.x0+100, entity.y0+100, 0);//, 0xF100);
 80029ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	3364      	adds	r3, #100	@ 0x64
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	b219      	sxth	r1, r3
 80029d6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3364      	adds	r3, #100	@ 0x64
 80029de:	b29b      	uxth	r3, r3
 80029e0:	b21a      	sxth	r2, r3
 80029e2:	f107 0018 	add.w	r0, r7, #24
 80029e6:	2300      	movs	r3, #0
 80029e8:	f7fe fc34 	bl	8001254 <translation_entity>
  HAL_Delay(2000);
 80029ec:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80029f0:	f001 fede 	bl	80047b0 <HAL_Delay>
  translation_entity(&entity, entity.x0+32, entity.y0+32, 0);//, 0xF100);
 80029f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3320      	adds	r3, #32
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	b219      	sxth	r1, r3
 8002a00:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3320      	adds	r3, #32
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	b21a      	sxth	r2, r3
 8002a0c:	f107 0018 	add.w	r0, r7, #24
 8002a10:	2300      	movs	r3, #0
 8002a12:	f7fe fc1f 	bl	8001254 <translation_entity>
  HAL_Delay(500);
 8002a16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a1a:	f001 fec9 	bl	80047b0 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0+32, 0);//, 0xF100);
 8002a1e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	330c      	adds	r3, #12
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	b219      	sxth	r1, r3
 8002a2a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3320      	adds	r3, #32
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	e01a      	b.n	8002a6c <main+0x3f4>
 8002a36:	bf00      	nop
 8002a38:	200143e8 	.word	0x200143e8
 8002a3c:	20014430 	.word	0x20014430
 8002a40:	2000008c 	.word	0x2000008c
 8002a44:	200142d0 	.word	0x200142d0
 8002a48:	20000008 	.word	0x20000008
 8002a4c:	0800e564 	.word	0x0800e564
 8002a50:	42180000 	.word	0x42180000
 8002a54:	0800e578 	.word	0x0800e578
 8002a58:	0800e58c 	.word	0x0800e58c
 8002a5c:	0800e5a0 	.word	0x0800e5a0
 8002a60:	0800e5b4 	.word	0x0800e5b4
 8002a64:	0800e5c8 	.word	0x0800e5c8
 8002a68:	0800e5dc 	.word	0x0800e5dc
 8002a6c:	b21a      	sxth	r2, r3
 8002a6e:	f107 0018 	add.w	r0, r7, #24
 8002a72:	2300      	movs	r3, #0
 8002a74:	f7fe fbee 	bl	8001254 <translation_entity>
  HAL_Delay(500);
 8002a78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a7c:	f001 fe98 	bl	80047b0 <HAL_Delay>
  translation_entity(&entity, entity.x0+12, entity.y0, 0);//, 0xF100);
 8002a80:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	330c      	adds	r3, #12
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	b219      	sxth	r1, r3
 8002a8c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002a90:	f107 0018 	add.w	r0, r7, #24
 8002a94:	2300      	movs	r3, #0
 8002a96:	f7fe fbdd 	bl	8001254 <translation_entity>
  HAL_Delay(500);
 8002a9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a9e:	f001 fe87 	bl	80047b0 <HAL_Delay>

  //Test_SD_Card();

  //play_audio_file("audio/mine.txt"); //doremi mine songita song22

  fill_screen2(0xF100);
 8002aa2:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8002aa6:	f7fe f82b 	bl	8000b00 <fill_screen2>
  //startTick = HAL_GetTick();
  //read_audio_file("audio/random.txt", sampleData);
  //endTick = HAL_GetTick();
  //getTime = endTick - startTick;

  HAL_Delay(100);
 8002aaa:	2064      	movs	r0, #100	@ 0x64
 8002aac:	f001 fe80 	bl	80047b0 <HAL_Delay>


  for(uint8_t i=0;i<100;i++)
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002ab6:	e059      	b.n	8002b6c <main+0x4f4>
  {
	  for(uint8_t j=0; j<100;j++)
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002abe:	e04c      	b.n	8002b5a <main+0x4e2>
	  {

		  if(i==j)
 8002ac0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002ac4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d10b      	bne.n	8002ae4 <main+0x46c>
		  {
			  draw_pixel(i,j,0xF100);
 8002acc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002ad6:	b291      	uxth	r1, r2
 8002ad8:	f44f 4271 	mov.w	r2, #61696	@ 0xf100
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd ff57 	bl	8000990 <draw_pixel>
			  continue;
 8002ae2:	e035      	b.n	8002b50 <main+0x4d8>
		  }



		  if((i == 80 && j==20) || (i == 80 && j==19) || (i == 81 && j==20) || (i == 81 && j==19))
 8002ae4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002ae8:	2b50      	cmp	r3, #80	@ 0x50
 8002aea:	d103      	bne.n	8002af4 <main+0x47c>
 8002aec:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002af0:	2b14      	cmp	r3, #20
 8002af2:	d017      	beq.n	8002b24 <main+0x4ac>
 8002af4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002af8:	2b50      	cmp	r3, #80	@ 0x50
 8002afa:	d103      	bne.n	8002b04 <main+0x48c>
 8002afc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b00:	2b13      	cmp	r3, #19
 8002b02:	d00f      	beq.n	8002b24 <main+0x4ac>
 8002b04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b08:	2b51      	cmp	r3, #81	@ 0x51
 8002b0a:	d103      	bne.n	8002b14 <main+0x49c>
 8002b0c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b10:	2b14      	cmp	r3, #20
 8002b12:	d007      	beq.n	8002b24 <main+0x4ac>
 8002b14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b18:	2b51      	cmp	r3, #81	@ 0x51
 8002b1a:	d10e      	bne.n	8002b3a <main+0x4c2>
 8002b1c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b20:	2b13      	cmp	r3, #19
 8002b22:	d10a      	bne.n	8002b3a <main+0x4c2>
		  {
			  draw_pixel(i,j,0x001F);
 8002b24:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002b2e:	b291      	uxth	r1, r2
 8002b30:	221f      	movs	r2, #31
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd ff2c 	bl	8000990 <draw_pixel>
			  continue;
 8002b38:	e00a      	b.n	8002b50 <main+0x4d8>
		  }


		  draw_pixel(i,j,0xFFFF);
 8002b3a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8002b44:	b291      	uxth	r1, r2
 8002b46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fd ff20 	bl	8000990 <draw_pixel>
	  for(uint8_t j=0; j<100;j++)
 8002b50:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b54:	3301      	adds	r3, #1
 8002b56:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002b5a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002b5e:	2b63      	cmp	r3, #99	@ 0x63
 8002b60:	d9ae      	bls.n	8002ac0 <main+0x448>
  for(uint8_t i=0;i<100;i++)
 8002b62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b66:	3301      	adds	r3, #1
 8002b68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002b6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b70:	2b63      	cmp	r3, #99	@ 0x63
 8002b72:	d9a1      	bls.n	8002ab8 <main+0x440>

  LCD_send_command(ILI9488_DISPON);

  */

  fill_screen2(0xF100);
 8002b74:	f44f 4071 	mov.w	r0, #61696	@ 0xf100
 8002b78:	f7fd ffc2 	bl	8000b00 <fill_screen2>
  HAL_Delay(1000);
 8002b7c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b80:	f001 fe16 	bl	80047b0 <HAL_Delay>
  fill_screen2(0xF150);
 8002b84:	f24f 1050 	movw	r0, #61776	@ 0xf150
 8002b88:	f7fd ffba 	bl	8000b00 <fill_screen2>
  HAL_Delay(1000);
 8002b8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b90:	f001 fe0e 	bl	80047b0 <HAL_Delay>
  fill_screen2(0xF111);
 8002b94:	f24f 1011 	movw	r0, #61713	@ 0xf111
 8002b98:	f7fd ffb2 	bl	8000b00 <fill_screen2>
  HAL_Delay(1000);
 8002b9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002ba0:	f001 fe06 	bl	80047b0 <HAL_Delay>
  fill_screen2(0xF10F);
 8002ba4:	f24f 100f 	movw	r0, #61711	@ 0xf10f
 8002ba8:	f7fd ffaa 	bl	8000b00 <fill_screen2>
  HAL_Delay(1000);
 8002bac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bb0:	f001 fdfe 	bl	80047b0 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002bb4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002bb8:	f7fd ffa2 	bl	8000b00 <fill_screen2>
  HAL_Delay(1000);
 8002bbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bc0:	f001 fdf6 	bl	80047b0 <HAL_Delay>
  fill_screen2(0xFFFF);
 8002bc4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002bc8:	f7fd ff9a 	bl	8000b00 <fill_screen2>

  print_string(36, 200, "Licenta 2025", 0x1F00, 0x001F);
 8002bcc:	231f      	movs	r3, #31
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002bd4:	4a26      	ldr	r2, [pc, #152]	@ (8002c70 <main+0x5f8>)
 8002bd6:	21c8      	movs	r1, #200	@ 0xc8
 8002bd8:	2024      	movs	r0, #36	@ 0x24
 8002bda:	f7fe f8ed 	bl	8000db8 <print_string>

  uint8_t dataToSend[] = {0x01, 0x02, 0x03, 0x04};
 8002bde:	4b25      	ldr	r3, [pc, #148]	@ (8002c74 <main+0x5fc>)
 8002be0:	603b      	str	r3, [r7, #0]
  HAL_SPI_Transmit_DMA(&hspi1, dataToSend, sizeof(dataToSend));
 8002be2:	463b      	mov	r3, r7
 8002be4:	2204      	movs	r2, #4
 8002be6:	4619      	mov	r1, r3
 8002be8:	4823      	ldr	r0, [pc, #140]	@ (8002c78 <main+0x600>)
 8002bea:	f005 f8dd 	bl	8007da8 <HAL_SPI_Transmit_DMA>

  draw_horizontal_line(20, 20, 80, 0xF100);
 8002bee:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002bf2:	2250      	movs	r2, #80	@ 0x50
 8002bf4:	2114      	movs	r1, #20
 8002bf6:	2014      	movs	r0, #20
 8002bf8:	f7fe f920 	bl	8000e3c <draw_horizontal_line>
  draw_vertical_line(20, 20, 80, 0xF100);
 8002bfc:	f44f 4371 	mov.w	r3, #61696	@ 0xf100
 8002c00:	2250      	movs	r2, #80	@ 0x50
 8002c02:	2114      	movs	r1, #20
 8002c04:	2014      	movs	r0, #20
 8002c06:	f7fe f954 	bl	8000eb2 <draw_vertical_line>

  flagDmaSpiTx = 0;
 8002c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c7c <main+0x604>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]

  draw_pixel(0,0,0x001F);
 8002c10:	221f      	movs	r2, #31
 8002c12:	2100      	movs	r1, #0
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fd febb 	bl	8000990 <draw_pixel>
  draw_pixel(1,0,0xF800);
 8002c1a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002c1e:	2100      	movs	r1, #0
 8002c20:	2001      	movs	r0, #1
 8002c22:	f7fd feb5 	bl	8000990 <draw_pixel>
  draw_pixel(0,1,0x001F);
 8002c26:	221f      	movs	r2, #31
 8002c28:	2101      	movs	r1, #1
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	f7fd feb0 	bl	8000990 <draw_pixel>
  draw_pixel(1,1,0xF800);
 8002c30:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002c34:	2101      	movs	r1, #1
 8002c36:	2001      	movs	r0, #1
 8002c38:	f7fd feaa 	bl	8000990 <draw_pixel>

  HAL_Delay(50);
 8002c3c:	2032      	movs	r0, #50	@ 0x32
 8002c3e:	f001 fdb7 	bl	80047b0 <HAL_Delay>

  uint8_t *dataRec;
  dataRec = malloc(sizeof(uint8_t));
 8002c42:	2001      	movs	r0, #1
 8002c44:	f00b fa5e 	bl	800e104 <malloc>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //dataRec = LCD_read_data(2,2,0,0);
  //free(dataRec);
  read_pixel_frame(0,0,2,2,dataRec);
 8002c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4e:	9300      	str	r3, [sp, #0]
 8002c50:	2302      	movs	r3, #2
 8002c52:	2202      	movs	r2, #2
 8002c54:	2100      	movs	r1, #0
 8002c56:	2000      	movs	r0, #0
 8002c58:	f7ff fb70 	bl	800233c <read_pixel_frame>
  //read_pixel_format();
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Pixel Data: ",12,HAL_MAX_DELAY);
  free(dataRec);
 8002c5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c5e:	f00b fa59 	bl	800e114 <free>

  HAL_Delay(3000);
 8002c62:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002c66:	f001 fda3 	bl	80047b0 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002c6a:	bf00      	nop
 8002c6c:	e7fd      	b.n	8002c6a <main+0x5f2>
 8002c6e:	bf00      	nop
 8002c70:	0800e5f0 	.word	0x0800e5f0
 8002c74:	04030201 	.word	0x04030201
 8002c78:	20014278 	.word	0x20014278
 8002c7c:	200144c0 	.word	0x200144c0

08002c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b094      	sub	sp, #80	@ 0x50
 8002c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c86:	f107 0320 	add.w	r3, r7, #32
 8002c8a:	2230      	movs	r2, #48	@ 0x30
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f00b fb2c 	bl	800e2ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c94:	f107 030c 	add.w	r3, r7, #12
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	4b28      	ldr	r3, [pc, #160]	@ (8002d4c <SystemClock_Config+0xcc>)
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	4a27      	ldr	r2, [pc, #156]	@ (8002d4c <SystemClock_Config+0xcc>)
 8002cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cb4:	4b25      	ldr	r3, [pc, #148]	@ (8002d4c <SystemClock_Config+0xcc>)
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	607b      	str	r3, [r7, #4]
 8002cc4:	4b22      	ldr	r3, [pc, #136]	@ (8002d50 <SystemClock_Config+0xd0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a21      	ldr	r2, [pc, #132]	@ (8002d50 <SystemClock_Config+0xd0>)
 8002cca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d50 <SystemClock_Config+0xd0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ce0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002cf4:	23a8      	movs	r3, #168	@ 0xa8
 8002cf6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002cfc:	2307      	movs	r3, #7
 8002cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d00:	f107 0320 	add.w	r3, r7, #32
 8002d04:	4618      	mov	r0, r3
 8002d06:	f002 fe69 	bl	80059dc <HAL_RCC_OscConfig>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d10:	f000 fa66 	bl	80031e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d14:	230f      	movs	r3, #15
 8002d16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d20:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002d24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d2c:	f107 030c 	add.w	r3, r7, #12
 8002d30:	2105      	movs	r1, #5
 8002d32:	4618      	mov	r0, r3
 8002d34:	f003 f8ca 	bl	8005ecc <HAL_RCC_ClockConfig>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d3e:	f000 fa4f 	bl	80031e0 <Error_Handler>
  }
}
 8002d42:	bf00      	nop
 8002d44:	3750      	adds	r7, #80	@ 0x50
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40007000 	.word	0x40007000

08002d54 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002d5a:	463b      	mov	r3, r7
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002d62:	4b0f      	ldr	r3, [pc, #60]	@ (8002da0 <MX_DAC_Init+0x4c>)
 8002d64:	4a0f      	ldr	r2, [pc, #60]	@ (8002da4 <MX_DAC_Init+0x50>)
 8002d66:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002d68:	480d      	ldr	r0, [pc, #52]	@ (8002da0 <MX_DAC_Init+0x4c>)
 8002d6a:	f001 fe56 	bl	8004a1a <HAL_DAC_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002d74:	f000 fa34 	bl	80031e0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002d78:	2324      	movs	r3, #36	@ 0x24
 8002d7a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002d80:	463b      	mov	r3, r7
 8002d82:	2200      	movs	r2, #0
 8002d84:	4619      	mov	r1, r3
 8002d86:	4806      	ldr	r0, [pc, #24]	@ (8002da0 <MX_DAC_Init+0x4c>)
 8002d88:	f001 ff8d 	bl	8004ca6 <HAL_DAC_ConfigChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002d92:	f000 fa25 	bl	80031e0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20014180 	.word	0x20014180
 8002da4:	40007400 	.word	0x40007400

08002da8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002dac:	4b0c      	ldr	r3, [pc, #48]	@ (8002de0 <MX_SDIO_SD_Init+0x38>)
 8002dae:	4a0d      	ldr	r2, [pc, #52]	@ (8002de4 <MX_SDIO_SD_Init+0x3c>)
 8002db0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002db2:	4b0b      	ldr	r3, [pc, #44]	@ (8002de0 <MX_SDIO_SD_Init+0x38>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002db8:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <MX_SDIO_SD_Init+0x38>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002dbe:	4b08      	ldr	r3, [pc, #32]	@ (8002de0 <MX_SDIO_SD_Init+0x38>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002dc4:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <MX_SDIO_SD_Init+0x38>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002dca:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <MX_SDIO_SD_Init+0x38>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	@ (8002de0 <MX_SDIO_SD_Init+0x38>)
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	200141f4 	.word	0x200141f4
 8002de4:	40012c00 	.word	0x40012c00

08002de8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002dec:	4b17      	ldr	r3, [pc, #92]	@ (8002e4c <MX_SPI1_Init+0x64>)
 8002dee:	4a18      	ldr	r2, [pc, #96]	@ (8002e50 <MX_SPI1_Init+0x68>)
 8002df0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002df2:	4b16      	ldr	r3, [pc, #88]	@ (8002e4c <MX_SPI1_Init+0x64>)
 8002df4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002df8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002dfa:	4b14      	ldr	r3, [pc, #80]	@ (8002e4c <MX_SPI1_Init+0x64>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e00:	4b12      	ldr	r3, [pc, #72]	@ (8002e4c <MX_SPI1_Init+0x64>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e06:	4b11      	ldr	r3, [pc, #68]	@ (8002e4c <MX_SPI1_Init+0x64>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e4c <MX_SPI1_Init+0x64>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e12:	4b0e      	ldr	r3, [pc, #56]	@ (8002e4c <MX_SPI1_Init+0x64>)
 8002e14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <MX_SPI1_Init+0x64>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e20:	4b0a      	ldr	r3, [pc, #40]	@ (8002e4c <MX_SPI1_Init+0x64>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e26:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <MX_SPI1_Init+0x64>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e2c:	4b07      	ldr	r3, [pc, #28]	@ (8002e4c <MX_SPI1_Init+0x64>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002e32:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <MX_SPI1_Init+0x64>)
 8002e34:	220a      	movs	r2, #10
 8002e36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e38:	4804      	ldr	r0, [pc, #16]	@ (8002e4c <MX_SPI1_Init+0x64>)
 8002e3a:	f004 f9ff 	bl	800723c <HAL_SPI_Init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002e44:	f000 f9cc 	bl	80031e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20014278 	.word	0x20014278
 8002e50:	40013000 	.word	0x40013000

08002e54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002e58:	4b16      	ldr	r3, [pc, #88]	@ (8002eb4 <MX_SPI2_Init+0x60>)
 8002e5a:	4a17      	ldr	r2, [pc, #92]	@ (8002eb8 <MX_SPI2_Init+0x64>)
 8002e5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002e5e:	4b15      	ldr	r3, [pc, #84]	@ (8002eb4 <MX_SPI2_Init+0x60>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002e64:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <MX_SPI2_Init+0x60>)
 8002e66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	@ (8002eb4 <MX_SPI2_Init+0x60>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e72:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <MX_SPI2_Init+0x60>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e78:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb4 <MX_SPI2_Init+0x60>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <MX_SPI2_Init+0x60>)
 8002e80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e84:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e86:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb4 <MX_SPI2_Init+0x60>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e8c:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <MX_SPI2_Init+0x60>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e92:	4b08      	ldr	r3, [pc, #32]	@ (8002eb4 <MX_SPI2_Init+0x60>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002e98:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <MX_SPI2_Init+0x60>)
 8002e9a:	220a      	movs	r2, #10
 8002e9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e9e:	4805      	ldr	r0, [pc, #20]	@ (8002eb4 <MX_SPI2_Init+0x60>)
 8002ea0:	f004 f9cc 	bl	800723c <HAL_SPI_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_SPI2_Init+0x5a>
  {
    Error_Handler();
 8002eaa:	f000 f999 	bl	80031e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200142d0 	.word	0x200142d0
 8002eb8:	40003800 	.word	0x40003800

08002ebc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ec2:	f107 0308 	add.w	r3, r7, #8
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]
 8002ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed0:	463b      	mov	r3, r7
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f50 <MX_TIM2_Init+0x94>)
 8002eda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ede:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f50 <MX_TIM2_Init+0x94>)
 8002ee2:	2229      	movs	r2, #41	@ 0x29
 8002ee4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f50 <MX_TIM2_Init+0x94>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 27;
 8002eec:	4b18      	ldr	r3, [pc, #96]	@ (8002f50 <MX_TIM2_Init+0x94>)
 8002eee:	221b      	movs	r2, #27
 8002ef0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef2:	4b17      	ldr	r3, [pc, #92]	@ (8002f50 <MX_TIM2_Init+0x94>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef8:	4b15      	ldr	r3, [pc, #84]	@ (8002f50 <MX_TIM2_Init+0x94>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002efe:	4814      	ldr	r0, [pc, #80]	@ (8002f50 <MX_TIM2_Init+0x94>)
 8002f00:	f005 ff37 	bl	8008d72 <HAL_TIM_Base_Init>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002f0a:	f000 f969 	bl	80031e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f14:	f107 0308 	add.w	r3, r7, #8
 8002f18:	4619      	mov	r1, r3
 8002f1a:	480d      	ldr	r0, [pc, #52]	@ (8002f50 <MX_TIM2_Init+0x94>)
 8002f1c:	f006 f940 	bl	80091a0 <HAL_TIM_ConfigClockSource>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002f26:	f000 f95b 	bl	80031e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f32:	463b      	mov	r3, r7
 8002f34:	4619      	mov	r1, r3
 8002f36:	4806      	ldr	r0, [pc, #24]	@ (8002f50 <MX_TIM2_Init+0x94>)
 8002f38:	f006 fb68 	bl	800960c <HAL_TIMEx_MasterConfigSynchronization>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002f42:	f000 f94d 	bl	80031e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200143e8 	.word	0x200143e8

08002f54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f5a:	f107 0308 	add.w	r3, r7, #8
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f68:	463b      	mov	r3, r7
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f70:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe8 <MX_TIM4_Init+0x94>)
 8002f72:	4a1e      	ldr	r2, [pc, #120]	@ (8002fec <MX_TIM4_Init+0x98>)
 8002f74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8002f76:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe8 <MX_TIM4_Init+0x94>)
 8002f78:	2254      	movs	r2, #84	@ 0x54
 8002f7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe8 <MX_TIM4_Init+0x94>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8002f82:	4b19      	ldr	r3, [pc, #100]	@ (8002fe8 <MX_TIM4_Init+0x94>)
 8002f84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f8a:	4b17      	ldr	r3, [pc, #92]	@ (8002fe8 <MX_TIM4_Init+0x94>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f90:	4b15      	ldr	r3, [pc, #84]	@ (8002fe8 <MX_TIM4_Init+0x94>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002f96:	4814      	ldr	r0, [pc, #80]	@ (8002fe8 <MX_TIM4_Init+0x94>)
 8002f98:	f005 feeb 	bl	8008d72 <HAL_TIM_Base_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002fa2:	f000 f91d 	bl	80031e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002faa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002fac:	f107 0308 	add.w	r3, r7, #8
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	480d      	ldr	r0, [pc, #52]	@ (8002fe8 <MX_TIM4_Init+0x94>)
 8002fb4:	f006 f8f4 	bl	80091a0 <HAL_TIM_ConfigClockSource>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002fbe:	f000 f90f 	bl	80031e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fca:	463b      	mov	r3, r7
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4806      	ldr	r0, [pc, #24]	@ (8002fe8 <MX_TIM4_Init+0x94>)
 8002fd0:	f006 fb1c 	bl	800960c <HAL_TIMEx_MasterConfigSynchronization>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002fda:	f000 f901 	bl	80031e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002fde:	bf00      	nop
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20014430 	.word	0x20014430
 8002fec:	40000800 	.word	0x40000800

08002ff0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ff4:	4b11      	ldr	r3, [pc, #68]	@ (800303c <MX_USART1_UART_Init+0x4c>)
 8002ff6:	4a12      	ldr	r2, [pc, #72]	@ (8003040 <MX_USART1_UART_Init+0x50>)
 8002ff8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002ffa:	4b10      	ldr	r3, [pc, #64]	@ (800303c <MX_USART1_UART_Init+0x4c>)
 8002ffc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003000:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003002:	4b0e      	ldr	r3, [pc, #56]	@ (800303c <MX_USART1_UART_Init+0x4c>)
 8003004:	2200      	movs	r2, #0
 8003006:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003008:	4b0c      	ldr	r3, [pc, #48]	@ (800303c <MX_USART1_UART_Init+0x4c>)
 800300a:	2200      	movs	r2, #0
 800300c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800300e:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <MX_USART1_UART_Init+0x4c>)
 8003010:	2200      	movs	r2, #0
 8003012:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003014:	4b09      	ldr	r3, [pc, #36]	@ (800303c <MX_USART1_UART_Init+0x4c>)
 8003016:	220c      	movs	r2, #12
 8003018:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800301a:	4b08      	ldr	r3, [pc, #32]	@ (800303c <MX_USART1_UART_Init+0x4c>)
 800301c:	2200      	movs	r2, #0
 800301e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003020:	4b06      	ldr	r3, [pc, #24]	@ (800303c <MX_USART1_UART_Init+0x4c>)
 8003022:	2200      	movs	r2, #0
 8003024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003026:	4805      	ldr	r0, [pc, #20]	@ (800303c <MX_USART1_UART_Init+0x4c>)
 8003028:	f006 fb80 	bl	800972c <HAL_UART_Init>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003032:	f000 f8d5 	bl	80031e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20014478 	.word	0x20014478
 8003040:	40011000 	.word	0x40011000

08003044 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <MX_DMA_Init+0x78>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	4a1a      	ldr	r2, [pc, #104]	@ (80030bc <MX_DMA_Init+0x78>)
 8003054:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003058:	6313      	str	r3, [r2, #48]	@ 0x30
 800305a:	4b18      	ldr	r3, [pc, #96]	@ (80030bc <MX_DMA_Init+0x78>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <MX_DMA_Init+0x78>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	4a13      	ldr	r2, [pc, #76]	@ (80030bc <MX_DMA_Init+0x78>)
 8003070:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003074:	6313      	str	r3, [r2, #48]	@ 0x30
 8003076:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <MX_DMA_Init+0x78>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003082:	2200      	movs	r2, #0
 8003084:	2100      	movs	r1, #0
 8003086:	2010      	movs	r0, #16
 8003088:	f001 fc91 	bl	80049ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800308c:	2010      	movs	r0, #16
 800308e:	f001 fcaa 	bl	80049e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2100      	movs	r1, #0
 8003096:	2038      	movs	r0, #56	@ 0x38
 8003098:	f001 fc89 	bl	80049ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800309c:	2038      	movs	r0, #56	@ 0x38
 800309e:	f001 fca2 	bl	80049e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2100      	movs	r1, #0
 80030a6:	203b      	movs	r0, #59	@ 0x3b
 80030a8:	f001 fc81 	bl	80049ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80030ac:	203b      	movs	r0, #59	@ 0x3b
 80030ae:	f001 fc9a 	bl	80049e6 <HAL_NVIC_EnableIRQ>

}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800

080030c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	@ 0x30
 80030c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c6:	f107 031c 	add.w	r3, r7, #28
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	605a      	str	r2, [r3, #4]
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	60da      	str	r2, [r3, #12]
 80030d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	4b3e      	ldr	r3, [pc, #248]	@ (80031d4 <MX_GPIO_Init+0x114>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	4a3d      	ldr	r2, [pc, #244]	@ (80031d4 <MX_GPIO_Init+0x114>)
 80030e0:	f043 0310 	orr.w	r3, r3, #16
 80030e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e6:	4b3b      	ldr	r3, [pc, #236]	@ (80031d4 <MX_GPIO_Init+0x114>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	4b37      	ldr	r3, [pc, #220]	@ (80031d4 <MX_GPIO_Init+0x114>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	4a36      	ldr	r2, [pc, #216]	@ (80031d4 <MX_GPIO_Init+0x114>)
 80030fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003100:	6313      	str	r3, [r2, #48]	@ 0x30
 8003102:	4b34      	ldr	r3, [pc, #208]	@ (80031d4 <MX_GPIO_Init+0x114>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	4b30      	ldr	r3, [pc, #192]	@ (80031d4 <MX_GPIO_Init+0x114>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	4a2f      	ldr	r2, [pc, #188]	@ (80031d4 <MX_GPIO_Init+0x114>)
 8003118:	f043 0304 	orr.w	r3, r3, #4
 800311c:	6313      	str	r3, [r2, #48]	@ 0x30
 800311e:	4b2d      	ldr	r3, [pc, #180]	@ (80031d4 <MX_GPIO_Init+0x114>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	4b29      	ldr	r3, [pc, #164]	@ (80031d4 <MX_GPIO_Init+0x114>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	4a28      	ldr	r2, [pc, #160]	@ (80031d4 <MX_GPIO_Init+0x114>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6313      	str	r3, [r2, #48]	@ 0x30
 800313a:	4b26      	ldr	r3, [pc, #152]	@ (80031d4 <MX_GPIO_Init+0x114>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	4b22      	ldr	r3, [pc, #136]	@ (80031d4 <MX_GPIO_Init+0x114>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314e:	4a21      	ldr	r2, [pc, #132]	@ (80031d4 <MX_GPIO_Init+0x114>)
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	6313      	str	r3, [r2, #48]	@ 0x30
 8003156:	4b1f      	ldr	r3, [pc, #124]	@ (80031d4 <MX_GPIO_Init+0x114>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	4b1b      	ldr	r3, [pc, #108]	@ (80031d4 <MX_GPIO_Init+0x114>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	4a1a      	ldr	r2, [pc, #104]	@ (80031d4 <MX_GPIO_Init+0x114>)
 800316c:	f043 0308 	orr.w	r3, r3, #8
 8003170:	6313      	str	r3, [r2, #48]	@ 0x30
 8003172:	4b18      	ldr	r3, [pc, #96]	@ (80031d4 <MX_GPIO_Init+0x114>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800317e:	2200      	movs	r2, #0
 8003180:	2110      	movs	r1, #16
 8003182:	4815      	ldr	r0, [pc, #84]	@ (80031d8 <MX_GPIO_Init+0x118>)
 8003184:	f002 fc10 	bl	80059a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8003188:	2200      	movs	r2, #0
 800318a:	2158      	movs	r1, #88	@ 0x58
 800318c:	4813      	ldr	r0, [pc, #76]	@ (80031dc <MX_GPIO_Init+0x11c>)
 800318e:	f002 fc0b 	bl	80059a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003192:	2310      	movs	r3, #16
 8003194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003196:	2301      	movs	r3, #1
 8003198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319e:	2300      	movs	r3, #0
 80031a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031a2:	f107 031c 	add.w	r3, r7, #28
 80031a6:	4619      	mov	r1, r3
 80031a8:	480b      	ldr	r0, [pc, #44]	@ (80031d8 <MX_GPIO_Init+0x118>)
 80031aa:	f002 fa61 	bl	8005670 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 80031ae:	2358      	movs	r3, #88	@ 0x58
 80031b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b2:	2301      	movs	r3, #1
 80031b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ba:	2300      	movs	r3, #0
 80031bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031be:	f107 031c 	add.w	r3, r7, #28
 80031c2:	4619      	mov	r1, r3
 80031c4:	4805      	ldr	r0, [pc, #20]	@ (80031dc <MX_GPIO_Init+0x11c>)
 80031c6:	f002 fa53 	bl	8005670 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031ca:	bf00      	nop
 80031cc:	3730      	adds	r7, #48	@ 0x30
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40020c00 	.word	0x40020c00

080031e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031e4:	b672      	cpsid	i
}
 80031e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031e8:	bf00      	nop
 80031ea:	e7fd      	b.n	80031e8 <Error_Handler+0x8>

080031ec <init_cardSD>:

static FATFS fs; /*variabila statica pentru sistemul de fisiere card SD*/


void init_cardSD()
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
	 * sistemul de fisiere prin variabila fs declarata static.
	 * Functia se va apela doar o singura data la initializarea
	 * intregului sistem.
	 */

	f_mount(&fs, "", 1);
 80031f0:	2201      	movs	r2, #1
 80031f2:	4903      	ldr	r1, [pc, #12]	@ (8003200 <init_cardSD+0x14>)
 80031f4:	4803      	ldr	r0, [pc, #12]	@ (8003204 <init_cardSD+0x18>)
 80031f6:	f009 fe1f 	bl	800ce38 <f_mount>

}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	0800e600 	.word	0x0800e600
 8003204:	200144c4 	.word	0x200144c4

08003208 <string_to_int>:
}



inline static uint16_t string_to_int(char *string)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	unsigned int number = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]

	while((*string) != '\n')
 8003214:	e015      	b.n	8003242 <string_to_int+0x3a>
	{
		if(((*string) >= '0') && ((*string)<='9'))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b2f      	cmp	r3, #47	@ 0x2f
 800321c:	d90e      	bls.n	800323c <string_to_int+0x34>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b39      	cmp	r3, #57	@ 0x39
 8003224:	d80a      	bhi.n	800323c <string_to_int+0x34>
		{
			number = number * 10 + ((*string) - '0');
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	461a      	mov	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	4413      	add	r3, r2
 8003238:	3b30      	subs	r3, #48	@ 0x30
 800323a:	60fb      	str	r3, [r7, #12]
		}

		string++;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3301      	adds	r3, #1
 8003240:	607b      	str	r3, [r7, #4]
	while((*string) != '\n')
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b0a      	cmp	r3, #10
 8003248:	d1e5      	bne.n	8003216 <string_to_int+0xe>
	}

	return number;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	b29b      	uxth	r3, r3
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <assign_filePath>:

}


char* assign_filePath(const char *filePathName)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
	 * Output: adresa char* catre calea
	 * ! alocat dinamic
	 */

	char *string;
	uint8_t i = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	73fb      	strb	r3, [r7, #15]


	while(filePathName[i] != '\0')
 8003266:	e002      	b.n	800326e <assign_filePath+0x14>
	{
		i++;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	3301      	adds	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
	while(filePathName[i] != '\0')
 800326e:	7bfb      	ldrb	r3, [r7, #15]
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f6      	bne.n	8003268 <assign_filePath+0xe>
	}

	i++;
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	3301      	adds	r3, #1
 800327e:	73fb      	strb	r3, [r7, #15]

	string = (char*)malloc(sizeof(char)*i);
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	4618      	mov	r0, r3
 8003284:	f00a ff3e 	bl	800e104 <malloc>
 8003288:	4603      	mov	r3, r0
 800328a:	60bb      	str	r3, [r7, #8]
	memcpy(string, filePathName, i);
 800328c:	7bfb      	ldrb	r3, [r7, #15]
 800328e:	461a      	mov	r2, r3
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	68b8      	ldr	r0, [r7, #8]
 8003294:	f00b f89c 	bl	800e3d0 <memcpy>

	return string;
 8003298:	68bb      	ldr	r3, [r7, #8]


}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <return_file_name_current_path>:


char* return_file_name_current_path(char *filePathName)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
	 * Input: calea fisierului
	 * Output: pointer catre nume
	 */


	char *fileName = strrchr(filePathName, '/');
 80032aa:	212f      	movs	r1, #47	@ 0x2f
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f00b f834 	bl	800e31a <strrchr>
 80032b2:	60f8      	str	r0, [r7, #12]

	if(fileName == NULL)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d103      	bne.n	80032c2 <return_file_name_current_path+0x20>
	{
		fileName = filePathName;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
		return fileName;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	e011      	b.n	80032e6 <return_file_name_current_path+0x44>
	}

	else
	{
		fileName++;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3301      	adds	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
	}

	char *string = malloc(strlen(fileName) + 1);
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f7fc ff7d 	bl	80001c8 <strlen>
 80032ce:	4603      	mov	r3, r0
 80032d0:	3301      	adds	r3, #1
 80032d2:	4618      	mov	r0, r3
 80032d4:	f00a ff16 	bl	800e104 <malloc>
 80032d8:	4603      	mov	r3, r0
 80032da:	60bb      	str	r3, [r7, #8]
	strcpy(string, fileName);
 80032dc:	68f9      	ldr	r1, [r7, #12]
 80032de:	68b8      	ldr	r0, [r7, #8]
 80032e0:	f00b f86e 	bl	800e3c0 <strcpy>

	return string;
 80032e4:	68bb      	ldr	r3, [r7, #8]

}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <assign_file_path_entity>:


void assign_file_path_entity(ENTITY *entity, const char *filePathName)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
	 * Input: adresa entitatii si calea literara
	 * Output: Void
	 */


	strcpy(entity->ST.SD.filePathName, filePathName);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	6839      	ldr	r1, [r7, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f00b f85e 	bl	800e3c0 <strcpy>

}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <read_audio_file>:


void read_audio_file(char *filePathName, uint32_t *buffer, bool *flagAudioDone)
{
 800330c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003310:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 8003314:	af00      	add	r7, sp, #0
 8003316:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800331a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800331e:	6018      	str	r0, [r3, #0]
 8003320:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003324:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003328:	6019      	str	r1, [r3, #0]
 800332a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800332e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	466b      	mov	r3, sp
 8003336:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8003338:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800333c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8003340:	f107 0020 	add.w	r0, r7, #32
 8003344:	2201      	movs	r2, #1
 8003346:	6819      	ldr	r1, [r3, #0]
 8003348:	f009 fdbc 	bl	800cec4 <f_open>
 800334c:	4603      	mov	r3, r0
 800334e:	f887 325f 	strb.w	r3, [r7, #607]	@ 0x25f

	if(res != FR_OK)
 8003352:	f897 325f 	ldrb.w	r3, [r7, #607]	@ 0x25f
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 8101 	bne.w	800355e <read_audio_file+0x252>

	static DWORD fileSize;
	static uint16_t currentFrame = 0;
	static FSIZE_t currentPosition = 0;

	f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 800335c:	4b83      	ldr	r3, [pc, #524]	@ (800356c <read_audio_file+0x260>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	f107 0320 	add.w	r3, r7, #32
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f00a fac2 	bl	800d8f0 <f_lseek>


	if(flagNewAudioFile == 1)
 800336c:	4b80      	ldr	r3, [pc, #512]	@ (8003570 <read_audio_file+0x264>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d017      	beq.n	80033a4 <read_audio_file+0x98>
		/*
		 * Reactualizare valorilor statice pentru deschiderea unui nou
		 * fisier audio
		*/

		flagNewAudioFile = 0;
 8003374:	4b7e      	ldr	r3, [pc, #504]	@ (8003570 <read_audio_file+0x264>)
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 800337a:	4b7e      	ldr	r3, [pc, #504]	@ (8003574 <read_audio_file+0x268>)
 800337c:	2200      	movs	r2, #0
 800337e:	801a      	strh	r2, [r3, #0]

		currentPosition = 0;
 8003380:	4b7a      	ldr	r3, [pc, #488]	@ (800356c <read_audio_file+0x260>)
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul la inceputul fisierului*/
 8003386:	4b79      	ldr	r3, [pc, #484]	@ (800356c <read_audio_file+0x260>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	f107 0320 	add.w	r3, r7, #32
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f00a faad 	bl	800d8f0 <f_lseek>

		fileSize = f_size(&file); /*Aflam dimensiune in octeti a fisierului*/
 8003396:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800339a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a75      	ldr	r2, [pc, #468]	@ (8003578 <read_audio_file+0x26c>)
 80033a2:	6013      	str	r3, [r2, #0]
	}

	const int n = 5120; /*1024 *5 caractere de prelucrat*/
 80033a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80033a8:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
	unsigned int nrFrames = fileSize / n;
 80033ac:	4b72      	ldr	r3, [pc, #456]	@ (8003578 <read_audio_file+0x26c>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264

	if(fileSize%n != 0)
 80033bc:	4b6e      	ldr	r3, [pc, #440]	@ (8003578 <read_audio_file+0x26c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 80033c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80033c8:	fb01 f202 	mul.w	r2, r1, r2
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <read_audio_file+0xd0>
	{
		nrFrames++;
 80033d2:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 80033d6:	3301      	adds	r3, #1
 80033d8:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
	}

	uint8_t index = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	char tempBuffer[n];
 80033e2:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80033e6:	3b01      	subs	r3, #1
 80033e8:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 80033ec:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80033f0:	2200      	movs	r2, #0
 80033f2:	4698      	mov	r8, r3
 80033f4:	4691      	mov	r9, r2
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800340a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800340e:	2200      	movs	r2, #0
 8003410:	461c      	mov	r4, r3
 8003412:	4615      	mov	r5, r2
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	00eb      	lsls	r3, r5, #3
 800341e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003422:	00e2      	lsls	r2, r4, #3
 8003424:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8003428:	3307      	adds	r3, #7
 800342a:	08db      	lsrs	r3, r3, #3
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	ebad 0d03 	sub.w	sp, sp, r3
 8003432:	466b      	mov	r3, sp
 8003434:	3300      	adds	r3, #0
 8003436:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
	char nrCharBuffer[5];

	f_read(&file, tempBuffer, (sizeof(char)*n)-1, &byteRead);
 800343a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800343e:	1e5a      	subs	r2, r3, #1
 8003440:	f107 031c 	add.w	r3, r7, #28
 8003444:	f107 0020 	add.w	r0, r7, #32
 8003448:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 800344c:	f009 fef4 	bl	800d238 <f_read>
	tempBuffer[byteRead] = '\n';
 8003450:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003454:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 800345e:	210a      	movs	r1, #10
 8003460:	54d1      	strb	r1, [r2, r3]


	for(uint16_t i=0; i< byteRead; i++)
 8003462:	2300      	movs	r3, #0
 8003464:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 8003468:	e040      	b.n	80034ec <read_audio_file+0x1e0>
		/*
		 * Vom parcurge tempBuffer si vom transforma caracterele citite
		 * in numere zecimale de interes
		 */

		if(tempBuffer[i] != '\n')
 800346a:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 800346e:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8003472:	5cd3      	ldrb	r3, [r2, r3]
 8003474:	2b0a      	cmp	r3, #10
 8003476:	d011      	beq.n	800349c <read_audio_file+0x190>
		{
			nrCharBuffer[index] = tempBuffer[i];
 8003478:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 800347c:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8003480:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 8003484:	5c89      	ldrb	r1, [r1, r2]
 8003486:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800348a:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 800348e:	54d1      	strb	r1, [r2, r3]
			index++;
 8003490:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 8003494:	3301      	adds	r3, #1
 8003496:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
 800349a:	e022      	b.n	80034e2 <read_audio_file+0x1d6>
		else
		{
			/*Vom avea in nrCharBuffer esantionul in char si il vom
			 * converti la int*/

			nrCharBuffer[index] = '\n';
 800349c:	f897 3263 	ldrb.w	r3, [r7, #611]	@ 0x263
 80034a0:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80034a4:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 80034a8:	210a      	movs	r1, #10
 80034aa:	54d1      	strb	r1, [r2, r3]
			*buffer = string_to_int(nrCharBuffer);
 80034ac:	f107 0314 	add.w	r3, r7, #20
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fea9 	bl	8003208 <string_to_int>
 80034b6:	4603      	mov	r3, r0
 80034b8:	461a      	mov	r2, r3
 80034ba:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80034be:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	601a      	str	r2, [r3, #0]
			buffer++;
 80034c6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80034ca:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80034ce:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80034d2:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	3204      	adds	r2, #4
 80034da:	601a      	str	r2, [r3, #0]

			index = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	f887 3263 	strb.w	r3, [r7, #611]	@ 0x263
	for(uint16_t i=0; i< byteRead; i++)
 80034e2:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 80034e6:	3301      	adds	r3, #1
 80034e8:	f8a7 3260 	strh.w	r3, [r7, #608]	@ 0x260
 80034ec:	f8b7 2260 	ldrh.w	r2, [r7, #608]	@ 0x260
 80034f0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80034f4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d3b5      	bcc.n	800346a <read_audio_file+0x15e>


	}


	if(currentFrame == nrFrames)
 80034fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003574 <read_audio_file+0x268>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8003508:	4293      	cmp	r3, r2
 800350a:	d10f      	bne.n	800352c <read_audio_file+0x220>
	{
		/*Resetare flag pentru reinitializare*/

		flagNewAudioFile = 1;
 800350c:	4b18      	ldr	r3, [pc, #96]	@ (8003570 <read_audio_file+0x264>)
 800350e:	2201      	movs	r2, #1
 8003510:	701a      	strb	r2, [r3, #0]
		*flagAudioDone = 1;
 8003512:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8003516:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]

		f_close(&file);
 8003520:	f107 0320 	add.w	r3, r7, #32
 8003524:	4618      	mov	r0, r3
 8003526:	f00a f9b9 	bl	800d89c <f_close>
		return;
 800352a:	e018      	b.n	800355e <read_audio_file+0x252>
	}

	currentFrame++;
 800352c:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <read_audio_file+0x268>)
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	4b0f      	ldr	r3, [pc, #60]	@ (8003574 <read_audio_file+0x268>)
 8003536:	801a      	strh	r2, [r3, #0]

	currentPosition = f_tell(&file);
 8003538:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800353c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	4a0a      	ldr	r2, [pc, #40]	@ (800356c <read_audio_file+0x260>)
 8003544:	6013      	str	r3, [r2, #0]
	currentPosition++;
 8003546:	4b09      	ldr	r3, [pc, #36]	@ (800356c <read_audio_file+0x260>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3301      	adds	r3, #1
 800354c:	4a07      	ldr	r2, [pc, #28]	@ (800356c <read_audio_file+0x260>)
 800354e:	6013      	str	r3, [r2, #0]

	f_close(&file);
 8003550:	f107 0320 	add.w	r3, r7, #32
 8003554:	4618      	mov	r0, r3
 8003556:	f00a f9a1 	bl	800d89c <f_close>
 800355a:	46b5      	mov	sp, r6
 800355c:	e000      	b.n	8003560 <read_audio_file+0x254>
		return;
 800355e:	46b5      	mov	sp, r6


}
 8003560:	f507 771b 	add.w	r7, r7, #620	@ 0x26c
 8003564:	46bd      	mov	sp, r7
 8003566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800356a:	bf00      	nop
 800356c:	200146f4 	.word	0x200146f4
 8003570:	2000000a 	.word	0x2000000a
 8003574:	200146f8 	.word	0x200146f8
 8003578:	200146fc 	.word	0x200146fc

0800357c <read_image_file>:


void read_image_file(ENTITY *entity, uint16_t *indexFlag, bool *flagImgDone)
{
 800357c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003580:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8003584:	af00      	add	r7, sp, #0
 8003586:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800358a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800358e:	6018      	str	r0, [r3, #0]
 8003590:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003594:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003598:	6019      	str	r1, [r3, #0]
 800359a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800359e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	466b      	mov	r3, sp
 80035a6:	461e      	mov	r6, r3

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, entity->ST.SD.filePathName, FA_READ);
 80035a8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80035ac:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6919      	ldr	r1, [r3, #16]
 80035b4:	f107 031c 	add.w	r3, r7, #28
 80035b8:	2201      	movs	r2, #1
 80035ba:	4618      	mov	r0, r3
 80035bc:	f009 fc82 	bl	800cec4 <f_open>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f887 3255 	strb.w	r3, [r7, #597]	@ 0x255

	if(res != FR_OK)
 80035c6:	f897 3255 	ldrb.w	r3, [r7, #597]	@ 0x255
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f040 81af 	bne.w	800392e <read_image_file+0x3b2>
	static const int n = 3072;
	static unsigned int nrFrames = 0;



	if(flagNewImageFile == 1)
 80035d0:	4ba8      	ldr	r3, [pc, #672]	@ (8003874 <read_image_file+0x2f8>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80d6 	beq.w	8003786 <read_image_file+0x20a>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 80035da:	4ba7      	ldr	r3, [pc, #668]	@ (8003878 <read_image_file+0x2fc>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 80035e0:	4ba5      	ldr	r3, [pc, #660]	@ (8003878 <read_image_file+0x2fc>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	f107 031c 	add.w	r3, r7, #28
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f00a f980 	bl	800d8f0 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 80035f0:	f107 0318 	add.w	r3, r7, #24
 80035f4:	f107 0114 	add.w	r1, r7, #20
 80035f8:	f107 001c 	add.w	r0, r7, #28
 80035fc:	2204      	movs	r2, #4
 80035fe:	f009 fe1b 	bl	800d238 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8003602:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003606:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2200      	movs	r2, #0
 800360e:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8003610:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003614:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2200      	movs	r2, #0
 800361c:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 800361e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003622:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800362c:	461a      	mov	r2, r3
 800362e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003632:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003636:	785b      	ldrb	r3, [r3, #1]
 8003638:	4313      	orrs	r3, r2
 800363a:	021b      	lsls	r3, r3, #8
 800363c:	b21a      	sxth	r2, r3
 800363e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003642:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800364c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003650:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b21b      	sxth	r3, r3
 8003658:	430b      	orrs	r3, r1
 800365a:	b21b      	sxth	r3, r3
 800365c:	4313      	orrs	r3, r2
 800365e:	b21a      	sxth	r2, r3
 8003660:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003664:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 800366c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003670:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800367a:	461a      	mov	r2, r3
 800367c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003680:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003684:	78db      	ldrb	r3, [r3, #3]
 8003686:	4313      	orrs	r3, r2
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	b21a      	sxth	r2, r3
 800368c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003690:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800369a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800369e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80036a2:	789b      	ldrb	r3, [r3, #2]
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	430b      	orrs	r3, r1
 80036a8:	b21b      	sxth	r3, r3
 80036aa:	4313      	orrs	r3, r2
 80036ac:	b21a      	sxth	r2, r3
 80036ae:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80036b2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	811a      	strh	r2, [r3, #8]


		if((entity->x1)*(entity->y1) < 1024)
 80036ba:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80036be:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80036c8:	461a      	mov	r2, r3
 80036ca:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80036ce:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036d8:	fb02 f303 	mul.w	r3, r2, r3
 80036dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e0:	da1f      	bge.n	8003722 <read_image_file+0x1a6>
		{
			/*Pentru un singur frame alocam exact cat trebuie */
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 80036e2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80036e6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80036f0:	461a      	mov	r2, r3
 80036f2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80036f6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003700:	fb03 f202 	mul.w	r2, r3, r2
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f00a fcfa 	bl	800e104 <malloc>
 8003710:	4603      	mov	r3, r0
 8003712:	461a      	mov	r2, r3
 8003714:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003718:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	e00b      	b.n	800373a <read_image_file+0x1be>
		}

		else
		{
			/*Alocam maxim 3072 de octeti per frame*/
			entity->ST.SD.data = malloc(sizeof(char)*3072);
 8003722:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003726:	f00a fced 	bl	800e104 <malloc>
 800372a:	4603      	mov	r3, r0
 800372c:	461a      	mov	r2, r3
 800372e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003732:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60da      	str	r2, [r3, #12]
		}

		flagNewImageFile = 0;
 800373a:	4b4e      	ldr	r3, [pc, #312]	@ (8003874 <read_image_file+0x2f8>)
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8003740:	4b4e      	ldr	r3, [pc, #312]	@ (800387c <read_image_file+0x300>)
 8003742:	2200      	movs	r2, #0
 8003744:	801a      	strh	r2, [r3, #0]

		currentPosition = byteRead;
 8003746:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800374a:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a49      	ldr	r2, [pc, #292]	@ (8003878 <read_image_file+0x2fc>)
 8003752:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8003754:	4b48      	ldr	r3, [pc, #288]	@ (8003878 <read_image_file+0x2fc>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	f107 031c 	add.w	r3, r7, #28
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f00a f8c6 	bl	800d8f0 <f_lseek>

		/*Aflam dimensiune in octeti a imaginii de citit (scadem dimensiunea headerului)*/
		fileSize = f_size(&file) - 4;
 8003764:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003768:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	3b04      	subs	r3, #4
 8003770:	4a43      	ldr	r2, [pc, #268]	@ (8003880 <read_image_file+0x304>)
 8003772:	6013      	str	r3, [r2, #0]

		/*calculam numarul de frameuri*/

		nrFrames = fileSize / n;
 8003774:	4b42      	ldr	r3, [pc, #264]	@ (8003880 <read_image_file+0x304>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a42      	ldr	r2, [pc, #264]	@ (8003884 <read_image_file+0x308>)
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003780:	4a41      	ldr	r2, [pc, #260]	@ (8003888 <read_image_file+0x30c>)
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	e007      	b.n	8003796 <read_image_file+0x21a>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8003786:	4b3c      	ldr	r3, [pc, #240]	@ (8003878 <read_image_file+0x2fc>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	f107 031c 	add.w	r3, r7, #28
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f00a f8ad 	bl	800d8f0 <f_lseek>
	}



	if(fileSize == n)
 8003796:	4b3a      	ldr	r3, [pc, #232]	@ (8003880 <read_image_file+0x304>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a3a      	ldr	r2, [pc, #232]	@ (8003884 <read_image_file+0x308>)
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	4293      	cmp	r3, r2
 80037a0:	d104      	bne.n	80037ac <read_image_file+0x230>
	{
		nrFrames--; /*pastram logica primului frame pana la n*/
 80037a2:	4b39      	ldr	r3, [pc, #228]	@ (8003888 <read_image_file+0x30c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	4a37      	ldr	r2, [pc, #220]	@ (8003888 <read_image_file+0x30c>)
 80037aa:	6013      	str	r3, [r2, #0]
	}

	if(fileSize%n != 0 && nrFrames!=0)
 80037ac:	4b34      	ldr	r3, [pc, #208]	@ (8003880 <read_image_file+0x304>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a34      	ldr	r2, [pc, #208]	@ (8003884 <read_image_file+0x308>)
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80037b8:	fb01 f202 	mul.w	r2, r1, r2
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <read_image_file+0x258>
 80037c2:	4b31      	ldr	r3, [pc, #196]	@ (8003888 <read_image_file+0x30c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d004      	beq.n	80037d4 <read_image_file+0x258>
	{
		nrFrames++;
 80037ca:	4b2f      	ldr	r3, [pc, #188]	@ (8003888 <read_image_file+0x30c>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3301      	adds	r3, #1
 80037d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003888 <read_image_file+0x30c>)
 80037d2:	6013      	str	r3, [r2, #0]
	}

	*indexFlag = 0;
 80037d4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80037d8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2200      	movs	r2, #0
 80037e0:	801a      	strh	r2, [r3, #0]
	char tempBuffer[n];
 80037e2:	4b28      	ldr	r3, [pc, #160]	@ (8003884 <read_image_file+0x308>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 80037ec:	4b25      	ldr	r3, [pc, #148]	@ (8003884 <read_image_file+0x308>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	2300      	movs	r3, #0
 80037f4:	4690      	mov	r8, r2
 80037f6:	4699      	mov	r9, r3
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003804:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003808:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800380c:	4b1d      	ldr	r3, [pc, #116]	@ (8003884 <read_image_file+0x308>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	2300      	movs	r3, #0
 8003814:	4614      	mov	r4, r2
 8003816:	461d      	mov	r5, r3
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	00eb      	lsls	r3, r5, #3
 8003822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003826:	00e2      	lsls	r2, r4, #3
 8003828:	4b16      	ldr	r3, [pc, #88]	@ (8003884 <read_image_file+0x308>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3307      	adds	r3, #7
 800382e:	08db      	lsrs	r3, r3, #3
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	ebad 0d03 	sub.w	sp, sp, r3
 8003836:	466b      	mov	r3, sp
 8003838:	3300      	adds	r3, #0
 800383a:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c

	f_read(&file, tempBuffer, (sizeof(char)*n), &byteRead);
 800383e:	4b11      	ldr	r3, [pc, #68]	@ (8003884 <read_image_file+0x308>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	f107 0318 	add.w	r3, r7, #24
 8003848:	f107 001c 	add.w	r0, r7, #28
 800384c:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 8003850:	f009 fcf2 	bl	800d238 <f_read>
	(*indexFlag) = byteRead;
 8003854:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003858:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	b29a      	uxth	r2, r3
 8003860:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003864:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	801a      	strh	r2, [r3, #0]

	for(uint16_t i=0; i<byteRead; i++)
 800386c:	2300      	movs	r3, #0
 800386e:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 8003872:	e01f      	b.n	80038b4 <read_image_file+0x338>
 8003874:	2000000b 	.word	0x2000000b
 8003878:	20014700 	.word	0x20014700
 800387c:	20014704 	.word	0x20014704
 8003880:	20014708 	.word	0x20014708
 8003884:	0800f3a4 	.word	0x0800f3a4
 8003888:	2001470c 	.word	0x2001470c
	{
		/*Vom parcurge bufferul la intervale de 2 valori HEXA, preluand caracterele ascii
		 * pe care le vom transforma in zecimal ex: FF1200FE3000...*/

		entity->ST.SD.data[i] = tempBuffer[i];
 800388c:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 8003890:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003894:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68d9      	ldr	r1, [r3, #12]
 800389c:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 80038a0:	440b      	add	r3, r1
 80038a2:	f8d7 124c 	ldr.w	r1, [r7, #588]	@ 0x24c
 80038a6:	5c8a      	ldrb	r2, [r1, r2]
 80038a8:	701a      	strb	r2, [r3, #0]
	for(uint16_t i=0; i<byteRead; i++)
 80038aa:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 80038ae:	3301      	adds	r3, #1
 80038b0:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
 80038b4:	f8b7 2256 	ldrh.w	r2, [r7, #598]	@ 0x256
 80038b8:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80038bc:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d3e2      	bcc.n	800388c <read_image_file+0x310>

	}


	currentFrame++;
 80038c6:	4b1d      	ldr	r3, [pc, #116]	@ (800393c <read_image_file+0x3c0>)
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	3301      	adds	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	4b1b      	ldr	r3, [pc, #108]	@ (800393c <read_image_file+0x3c0>)
 80038d0:	801a      	strh	r2, [r3, #0]

	if((currentFrame >= nrFrames) || ((*(indexFlag)) < 3072))
 80038d2:	4b1a      	ldr	r3, [pc, #104]	@ (800393c <read_image_file+0x3c0>)
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	4b19      	ldr	r3, [pc, #100]	@ (8003940 <read_image_file+0x3c4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d208      	bcs.n	80038f2 <read_image_file+0x376>
 80038e0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80038e4:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038f0:	d20f      	bcs.n	8003912 <read_image_file+0x396>
	{
		/*Resetare flag pentru reinitializare*/

		*flagImgDone = 1;
 80038f2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80038f6:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]

		flagNewImageFile = 1;
 8003900:	4b10      	ldr	r3, [pc, #64]	@ (8003944 <read_image_file+0x3c8>)
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8003906:	f107 031c 	add.w	r3, r7, #28
 800390a:	4618      	mov	r0, r3
 800390c:	f009 ffc6 	bl	800d89c <f_close>
		return;
 8003910:	e00d      	b.n	800392e <read_image_file+0x3b2>
	}


	currentPosition = f_tell(&file);
 8003912:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003916:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	4a0a      	ldr	r2, [pc, #40]	@ (8003948 <read_image_file+0x3cc>)
 800391e:	6013      	str	r3, [r2, #0]


	f_close(&file);
 8003920:	f107 031c 	add.w	r3, r7, #28
 8003924:	4618      	mov	r0, r3
 8003926:	f009 ffb9 	bl	800d89c <f_close>
 800392a:	46b5      	mov	sp, r6
 800392c:	e000      	b.n	8003930 <read_image_file+0x3b4>
		return;
 800392e:	46b5      	mov	sp, r6


}
 8003930:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8003934:	46bd      	mov	sp, r7
 8003936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800393a:	bf00      	nop
 800393c:	20014704 	.word	0x20014704
 8003940:	2001470c 	.word	0x2001470c
 8003944:	2000000b 	.word	0x2000000b
 8003948:	20014700 	.word	0x20014700

0800394c <frame_number_x>:



static uint16_t frame_number_x(ENTITY *entity, const float factor)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	ed87 0a02 	vstr	s0, [r7, #8]

	uint8_t x = 1;
 8003958:	2301      	movs	r3, #1
 800395a:	75fb      	strb	r3, [r7, #23]

	if(factor > 1)
 800395c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003960:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396c:	dd33      	ble.n	80039d6 <frame_number_x+0x8a>
	{
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 800396e:	e00b      	b.n	8003988 <frame_number_x+0x3c>
		{
			if(x == entity->y1)
 8003970:	7dfb      	ldrb	r3, [r7, #23]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003978:	4293      	cmp	r3, r2
 800397a:	d102      	bne.n	8003982 <frame_number_x+0x36>
			{
				return x;
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	b29b      	uxth	r3, r3
 8003980:	e05f      	b.n	8003a42 <frame_number_x+0xf6>
			}

			x++;
 8003982:	7dfb      	ldrb	r3, [r7, #23]
 8003984:	3301      	adds	r3, #1
 8003986:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*factor*factor*x) <= (32*32)))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003996:	edd7 7a02 	vldr	s15, [r7, #8]
 800399a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800399e:	edd7 7a02 	vldr	s15, [r7, #8]
 80039a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	ee07 3a90 	vmov	s15, r3
 80039ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8003a50 <frame_number_x+0x104>
 80039b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c0:	d9d6      	bls.n	8003970 <frame_number_x+0x24>
		}


		if(x==1)
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <frame_number_x+0x80>
		{
			return 1;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e03a      	b.n	8003a42 <frame_number_x+0xf6>
		}

		else
		{
			return (x-1);
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	e035      	b.n	8003a42 <frame_number_x+0xf6>
	}


	else
	{
		x = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	75fb      	strb	r3, [r7, #23]

		while((((int)(entity->x1)*x) <= (32*32)))
 80039da:	e016      	b.n	8003a0a <frame_number_x+0xbe>
		{
			if(x == entity->y1)
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d102      	bne.n	80039ee <frame_number_x+0xa2>
			{
				return x;
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	e029      	b.n	8003a42 <frame_number_x+0xf6>
			}

			x = x + (int)(1/factor);
 80039ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80039f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039fe:	edc7 7a01 	vstr	s15, [r7, #4]
 8003a02:	793a      	ldrb	r2, [r7, #4]
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
 8003a06:	4413      	add	r3, r2
 8003a08:	75fb      	strb	r3, [r7, #23]
		while((((int)(entity->x1)*x) <= (32*32)))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003a10:	461a      	mov	r2, r3
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a1c:	ddde      	ble.n	80039dc <frame_number_x+0x90>
		}


		return (x-(1/factor));
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	ee07 3a90 	vmov	s15, r3
 8003a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a28:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8003a2c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003a30:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a3c:	ee17 3a90 	vmov	r3, s15
 8003a40:	b29b      	uxth	r3, r3

	}


}
 8003a42:	4618      	mov	r0, r3
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	44800000 	.word	0x44800000

08003a54 <read_image_file_scaling>:



void read_image_file_scaling(char *filePathName, ENTITY *entity, const float factor, uint16_t *px, bool *flagTerm)
{
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	f507 7416 	add.w	r4, r7, #600	@ 0x258
 8003a60:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8003a64:	6020      	str	r0, [r4, #0]
 8003a66:	f507 7016 	add.w	r0, r7, #600	@ 0x258
 8003a6a:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8003a6e:	6001      	str	r1, [r0, #0]
 8003a70:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8003a74:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8003a78:	ed81 0a00 	vstr	s0, [r1]
 8003a7c:	f507 7116 	add.w	r1, r7, #600	@ 0x258
 8003a80:	f5a1 7114 	sub.w	r1, r1, #592	@ 0x250
 8003a84:	600a      	str	r2, [r1, #0]
 8003a86:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 8003a8a:	f5a2 7215 	sub.w	r2, r2, #596	@ 0x254
 8003a8e:	6013      	str	r3, [r2, #0]

	FRESULT res;
	FIL file;
	UINT byteRead;

	res = f_open(&file, filePathName, FA_READ);
 8003a90:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003a94:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003a98:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	6819      	ldr	r1, [r3, #0]
 8003aa0:	f009 fa10 	bl	800cec4 <f_open>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 3257 	strb.w	r3, [r7, #599]	@ 0x257

	if(res != FR_OK)
 8003aaa:	f897 3257 	ldrb.w	r3, [r7, #599]	@ 0x257
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f040 81be 	bne.w	8003e30 <read_image_file_scaling+0x3dc>
	static FSIZE_t currentPosition = 0;

	static uint16_t x = 0; /*Numarul de linii din M1 ai sa avem sub 32x32 pixeli de prelucrat in M2*/
	static unsigned int nrFrames = 0;

	if(flagNewImageFile == 1)
 8003ab4:	4ba9      	ldr	r3, [pc, #676]	@ (8003d5c <read_image_file_scaling+0x308>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8112 	beq.w	8003ce2 <read_image_file_scaling+0x28e>

		/*Vom citi initial headerul care contine latimea si lungimea imaginii. Primii 4 octeti ai fisierului*/

		uint8_t headerBuffer[4];

		currentPosition = 0;
 8003abe:	4ba8      	ldr	r3, [pc, #672]	@ (8003d60 <read_image_file_scaling+0x30c>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
		f_lseek(&file, currentPosition);
 8003ac4:	4ba6      	ldr	r3, [pc, #664]	@ (8003d60 <read_image_file_scaling+0x30c>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f009 ff0e 	bl	800d8f0 <f_lseek>


		f_read(&file, headerBuffer, 4, &byteRead);
 8003ad4:	f107 0320 	add.w	r3, r7, #32
 8003ad8:	f107 011c 	add.w	r1, r7, #28
 8003adc:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	f009 fba9 	bl	800d238 <f_read>

		/*prelucrarea bufferului 4 octeti Little Endian*/
		entity->x1 = 0;
 8003ae6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003aea:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2200      	movs	r2, #0
 8003af2:	80da      	strh	r2, [r3, #6]
		entity->y1 = 0;
 8003af4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003af8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2200      	movs	r2, #0
 8003b00:	811a      	strh	r2, [r3, #8]

		entity->x1 = ((entity->x1 | headerBuffer[1]) << 8) | (entity->x1 | headerBuffer[0]); /*Latimea*/
 8003b02:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b06:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003b10:	461a      	mov	r2, r3
 8003b12:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b16:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003b1a:	785b      	ldrb	r3, [r3, #1]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	021b      	lsls	r3, r3, #8
 8003b20:	b21a      	sxth	r2, r3
 8003b22:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b26:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8003b30:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b34:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	b21b      	sxth	r3, r3
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	b21b      	sxth	r3, r3
 8003b40:	4313      	orrs	r3, r2
 8003b42:	b21a      	sxth	r2, r3
 8003b44:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b48:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	80da      	strh	r2, [r3, #6]
		entity->y1 = ((entity->y1 | headerBuffer[3]) << 8) | (entity->y1 | headerBuffer[2]); /*Lungimea*/
 8003b50:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b54:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b64:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003b68:	78db      	ldrb	r3, [r3, #3]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	b21a      	sxth	r2, r3
 8003b70:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b74:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8003b7e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b82:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003b86:	789b      	ldrb	r3, [r3, #2]
 8003b88:	b21b      	sxth	r3, r3
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	b21b      	sxth	r3, r3
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	b21a      	sxth	r2, r3
 8003b92:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003b96:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	811a      	strh	r2, [r3, #8]


		flagNewImageFile = 0;
 8003b9e:	4b6f      	ldr	r3, [pc, #444]	@ (8003d5c <read_image_file_scaling+0x308>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
		currentFrame = 0;
 8003ba4:	4b6f      	ldr	r3, [pc, #444]	@ (8003d64 <read_image_file_scaling+0x310>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	801a      	strh	r2, [r3, #0]
		flagOneFrame = 0;
 8003baa:	4b6f      	ldr	r3, [pc, #444]	@ (8003d68 <read_image_file_scaling+0x314>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]

		currentPosition = byteRead;
 8003bb0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003bb4:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a69      	ldr	r2, [pc, #420]	@ (8003d60 <read_image_file_scaling+0x30c>)
 8003bbc:	6013      	str	r3, [r2, #0]
		f_lseek(&file, currentPosition); /*Mutam cursorul dupa header*/
 8003bbe:	4b68      	ldr	r3, [pc, #416]	@ (8003d60 <read_image_file_scaling+0x30c>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f009 fe91 	bl	800d8f0 <f_lseek>


		x = frame_number_x(entity, factor); /*numarul de linii cuprins in fiecare frame al matricei M1*/
 8003bce:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003bd2:	f5a3 7213 	sub.w	r2, r3, #588	@ 0x24c
 8003bd6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003bda:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003bde:	ed92 0a00 	vldr	s0, [r2]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	f7ff feb2 	bl	800394c <frame_number_x>
 8003be8:	4603      	mov	r3, r0
 8003bea:	461a      	mov	r2, r3
 8003bec:	4b5f      	ldr	r3, [pc, #380]	@ (8003d6c <read_image_file_scaling+0x318>)
 8003bee:	801a      	strh	r2, [r3, #0]
		*px = x;
 8003bf0:	4b5e      	ldr	r3, [pc, #376]	@ (8003d6c <read_image_file_scaling+0x318>)
 8003bf2:	881a      	ldrh	r2, [r3, #0]
 8003bf4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003bf8:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	801a      	strh	r2, [r3, #0]

		if(x == entity->y1)
 8003c00:	4b5a      	ldr	r3, [pc, #360]	@ (8003d6c <read_image_file_scaling+0x318>)
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c0a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d125      	bne.n	8003c64 <read_image_file_scaling+0x210>
		{
			flagOneFrame = 1;
 8003c18:	4b53      	ldr	r3, [pc, #332]	@ (8003d68 <read_image_file_scaling+0x314>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	701a      	strb	r2, [r3, #0]
			nrFrames = 1; /*Avem o imagine care scalata are mai putini de 32x32 pixeli*/
 8003c1e:	4b54      	ldr	r3, [pc, #336]	@ (8003d70 <read_image_file_scaling+0x31c>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*(entity->y1));
 8003c24:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c28:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c38:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c42:	fb03 f202 	mul.w	r2, r3, r2
 8003c46:	4613      	mov	r3, r2
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4413      	add	r3, r2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f00a fa59 	bl	800e104 <malloc>
 8003c52:	4603      	mov	r3, r0
 8003c54:	461a      	mov	r2, r3
 8003c56:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c5a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	e046      	b.n	8003cf2 <read_image_file_scaling+0x29e>

		}

		else
		{
			entity->ST.SD.data = malloc(3*sizeof(char)*(entity->x1)*x);
 8003c64:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c68:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003c72:	461a      	mov	r2, r3
 8003c74:	4b3d      	ldr	r3, [pc, #244]	@ (8003d6c <read_image_file_scaling+0x318>)
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	fb03 f202 	mul.w	r2, r3, r2
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	4413      	add	r3, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f00a fa3e 	bl	800e104 <malloc>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c90:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60da      	str	r2, [r3, #12]

			nrFrames = (entity->y1) / x;
 8003c98:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003c9c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4b30      	ldr	r3, [pc, #192]	@ (8003d6c <read_image_file_scaling+0x318>)
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	fb92 f3f3 	sdiv	r3, r2, r3
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8003d70 <read_image_file_scaling+0x31c>)
 8003cb4:	601a      	str	r2, [r3, #0]

			if((entity->y1) % x != 0)
 8003cb6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003cba:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003cc4:	4a29      	ldr	r2, [pc, #164]	@ (8003d6c <read_image_file_scaling+0x318>)
 8003cc6:	8812      	ldrh	r2, [r2, #0]
 8003cc8:	fb93 f1f2 	sdiv	r1, r3, r2
 8003ccc:	fb01 f202 	mul.w	r2, r1, r2
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00d      	beq.n	8003cf2 <read_image_file_scaling+0x29e>
			{
				nrFrames++;
 8003cd6:	4b26      	ldr	r3, [pc, #152]	@ (8003d70 <read_image_file_scaling+0x31c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	4a24      	ldr	r2, [pc, #144]	@ (8003d70 <read_image_file_scaling+0x31c>)
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	e007      	b.n	8003cf2 <read_image_file_scaling+0x29e>
	}


	else
	{
		f_lseek(&file, currentPosition); /*Revenim la pozitia anterioara citirii*/
 8003ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8003d60 <read_image_file_scaling+0x30c>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f009 fdff 	bl	800d8f0 <f_lseek>
	}


	/*Vom pune in entity->data primele valori*/

	if(flagOneFrame == 1)
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d68 <read_image_file_scaling+0x314>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d03c      	beq.n	8003d74 <read_image_file_scaling+0x320>
	{
		f_read(&file, entity->ST.SD.data, (3*sizeof(char)*(entity->x1)*(entity->y1)), &byteRead);
 8003cfa:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003cfe:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68d9      	ldr	r1, [r3, #12]
 8003d06:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003d0a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003d14:	461a      	mov	r2, r3
 8003d16:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003d1a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d24:	fb03 f202 	mul.w	r2, r3, r2
 8003d28:	4613      	mov	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	441a      	add	r2, r3
 8003d2e:	f107 0320 	add.w	r3, r7, #32
 8003d32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003d36:	f009 fa7f 	bl	800d238 <f_read>

		*flagTerm = 1;
 8003d3a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003d3e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2201      	movs	r2, #1
 8003d46:	701a      	strb	r2, [r3, #0]
		flagNewImageFile = 1;
 8003d48:	4b04      	ldr	r3, [pc, #16]	@ (8003d5c <read_image_file_scaling+0x308>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
		f_close(&file);
 8003d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d52:	4618      	mov	r0, r3
 8003d54:	f009 fda2 	bl	800d89c <f_close>
		return;
 8003d58:	e06b      	b.n	8003e32 <read_image_file_scaling+0x3de>
 8003d5a:	bf00      	nop
 8003d5c:	2000000c 	.word	0x2000000c
 8003d60:	20014710 	.word	0x20014710
 8003d64:	20014714 	.word	0x20014714
 8003d68:	20014716 	.word	0x20014716
 8003d6c:	20014718 	.word	0x20014718
 8003d70:	2001471c 	.word	0x2001471c

	}

	else
	{
		f_read(&file, entity->ST.SD.data, (3*sizeof(char)*(entity->x1)*x), &byteRead);
 8003d74:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003d78:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68d9      	ldr	r1, [r3, #12]
 8003d80:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003d84:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4b2a      	ldr	r3, [pc, #168]	@ (8003e3c <read_image_file_scaling+0x3e8>)
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	fb03 f202 	mul.w	r2, r3, r2
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	441a      	add	r2, r3
 8003d9e:	f107 0320 	add.w	r3, r7, #32
 8003da2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003da6:	f009 fa47 	bl	800d238 <f_read>

		currentFrame++;
 8003daa:	4b25      	ldr	r3, [pc, #148]	@ (8003e40 <read_image_file_scaling+0x3ec>)
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	4b23      	ldr	r3, [pc, #140]	@ (8003e40 <read_image_file_scaling+0x3ec>)
 8003db4:	801a      	strh	r2, [r3, #0]

		if((currentFrame >= nrFrames))
 8003db6:	4b22      	ldr	r3, [pc, #136]	@ (8003e40 <read_image_file_scaling+0x3ec>)
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4b21      	ldr	r3, [pc, #132]	@ (8003e44 <read_image_file_scaling+0x3f0>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d328      	bcc.n	8003e16 <read_image_file_scaling+0x3c2>
		{
			*px = (entity->y1) - x*(nrFrames-1); /*recalculam ultimul numar de linii de citit*/
 8003dc4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003dc8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e44 <read_image_file_scaling+0x3f0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b299      	uxth	r1, r3
 8003ddc:	4b17      	ldr	r3, [pc, #92]	@ (8003e3c <read_image_file_scaling+0x3e8>)
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	fb11 f303 	smulbb	r3, r1, r3
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003dee:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	801a      	strh	r2, [r3, #0]
			*flagTerm = 1;
 8003df6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003dfa:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2201      	movs	r2, #1
 8003e02:	701a      	strb	r2, [r3, #0]
			flagNewImageFile = 1;
 8003e04:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <read_image_file_scaling+0x3f4>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]
			f_close(&file);
 8003e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f009 fd44 	bl	800d89c <f_close>
			return;
 8003e14:	e00d      	b.n	8003e32 <read_image_file_scaling+0x3de>
		}



		currentPosition = f_tell(&file);
 8003e16:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 8003e1a:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	4a0a      	ldr	r2, [pc, #40]	@ (8003e4c <read_image_file_scaling+0x3f8>)
 8003e22:	6013      	str	r3, [r2, #0]
		f_close(&file);
 8003e24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f009 fd37 	bl	800d89c <f_close>
 8003e2e:	e000      	b.n	8003e32 <read_image_file_scaling+0x3de>
		return;
 8003e30:	bf00      	nop

	}



}
 8003e32:	f507 7717 	add.w	r7, r7, #604	@ 0x25c
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd90      	pop	{r4, r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20014718 	.word	0x20014718
 8003e40:	20014714 	.word	0x20014714
 8003e44:	2001471c 	.word	0x2001471c
 8003e48:	2000000c 	.word	0x2000000c
 8003e4c:	20014710 	.word	0x20014710

08003e50 <write_image_file>:



void write_image_file(char *filePathName, uint8_t *data, size_t nrBytesData, int16_t x1, int16_t y1, bool flagTerm)
{
 8003e50:	b590      	push	{r4, r7, lr}
 8003e52:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8003e5c:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8003e60:	6020      	str	r0, [r4, #0]
 8003e62:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8003e66:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 8003e6a:	6001      	str	r1, [r0, #0]
 8003e6c:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8003e70:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8003e74:	600a      	str	r2, [r1, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003e7c:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003e80:	801a      	strh	r2, [r3, #0]


	static bool flagStart = 0;
	static FSIZE_t currentPosition = 0;

	if(flagStart == 0)
 8003e82:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb0 <write_image_file+0x160>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	f083 0301 	eor.w	r3, r3, #1
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d04b      	beq.n	8003f28 <write_image_file+0xd8>
	{

		res = f_open(&file, filePathName, FA_WRITE | FA_CREATE_ALWAYS);
 8003e90:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003e94:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003e98:	f107 001c 	add.w	r0, r7, #28
 8003e9c:	220a      	movs	r2, #10
 8003e9e:	6819      	ldr	r1, [r3, #0]
 8003ea0:	f009 f810 	bl	800cec4 <f_open>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f


		if (res != FR_OK)
 8003eaa:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d177      	bne.n	8003fa2 <write_image_file+0x152>
		{
		    return;
		}


		currentPosition = 0;
 8003eb2:	4b40      	ldr	r3, [pc, #256]	@ (8003fb4 <write_image_file+0x164>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
		/*
		 * Scriem mai intai headerul anume
		 * dimensiunea imaginii asociate
		 */

		header[0] = (int8_t)(x1);
 8003eb8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003ebc:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003ec8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003ecc:	701a      	strb	r2, [r3, #0]
		header[1] = (int8_t)(x1>>8);
 8003ece:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003ed2:	f2a3 234e 	subw	r3, r3, #590	@ 0x24e
 8003ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eda:	121b      	asrs	r3, r3, #8
 8003edc:	b21b      	sxth	r3, r3
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003ee4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003ee8:	705a      	strb	r2, [r3, #1]
		header[2] = (int8_t)(y1);
 8003eea:	f8b7 3260 	ldrh.w	r3, [r7, #608]	@ 0x260
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003ef4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003ef8:	709a      	strb	r2, [r3, #2]
		header[3] = (int8_t)(y1>>8);
 8003efa:	f9b7 3260 	ldrsh.w	r3, [r7, #608]	@ 0x260
 8003efe:	121b      	asrs	r3, r3, #8
 8003f00:	b21b      	sxth	r3, r3
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003f08:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8003f0c:	70da      	strb	r2, [r3, #3]

		f_write(&file, header, 4, &byteWr);
 8003f0e:	f107 0318 	add.w	r3, r7, #24
 8003f12:	f107 0114 	add.w	r1, r7, #20
 8003f16:	f107 001c 	add.w	r0, r7, #28
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	f009 facb 	bl	800d4b6 <f_write>

		flagStart = 1;
 8003f20:	4b23      	ldr	r3, [pc, #140]	@ (8003fb0 <write_image_file+0x160>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	e018      	b.n	8003f5a <write_image_file+0x10a>
	}


	else
	{
		res = f_open(&file, filePathName, FA_WRITE | FA_OPEN_ALWAYS);
 8003f28:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003f2c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8003f30:	f107 001c 	add.w	r0, r7, #28
 8003f34:	2212      	movs	r2, #18
 8003f36:	6819      	ldr	r1, [r3, #0]
 8003f38:	f008 ffc4 	bl	800cec4 <f_open>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f

		if (res != FR_OK)
 8003f42:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d12d      	bne.n	8003fa6 <write_image_file+0x156>
		{
		    return;
		}

		f_lseek(&file, currentPosition);
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <write_image_file+0x164>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	f107 031c 	add.w	r3, r7, #28
 8003f52:	4611      	mov	r1, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f009 fccb 	bl	800d8f0 <f_lseek>

	}


	if(flagTerm == 1)
 8003f5a:	f897 3264 	ldrb.w	r3, [r7, #612]	@ 0x264
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <write_image_file+0x118>
	{
		flagStart = 0;
 8003f62:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <write_image_file+0x160>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]

	}


	f_write(&file, data, nrBytesData, &byteWr);
 8003f68:	f107 0318 	add.w	r3, r7, #24
 8003f6c:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8003f70:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8003f74:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8003f78:	f5a1 7112 	sub.w	r1, r1, #584	@ 0x248
 8003f7c:	f107 001c 	add.w	r0, r7, #28
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	6809      	ldr	r1, [r1, #0]
 8003f84:	f009 fa97 	bl	800d4b6 <f_write>
	currentPosition = f_tell(&file);
 8003f88:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8003f8c:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	4a08      	ldr	r2, [pc, #32]	@ (8003fb4 <write_image_file+0x164>)
 8003f94:	6013      	str	r3, [r2, #0]

	f_close(&file);
 8003f96:	f107 031c 	add.w	r3, r7, #28
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f009 fc7e 	bl	800d89c <f_close>
 8003fa0:	e002      	b.n	8003fa8 <write_image_file+0x158>
		    return;
 8003fa2:	bf00      	nop
 8003fa4:	e000      	b.n	8003fa8 <write_image_file+0x158>
		    return;
 8003fa6:	bf00      	nop

}
 8003fa8:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd90      	pop	{r4, r7, pc}
 8003fb0:	20014720 	.word	0x20014720
 8003fb4:	20014724 	.word	0x20014724

08003fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	607b      	str	r3, [r7, #4]
 8003fc2:	4b10      	ldr	r3, [pc, #64]	@ (8004004 <HAL_MspInit+0x4c>)
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8004004 <HAL_MspInit+0x4c>)
 8003fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <HAL_MspInit+0x4c>)
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fd6:	607b      	str	r3, [r7, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	4b09      	ldr	r3, [pc, #36]	@ (8004004 <HAL_MspInit+0x4c>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	4a08      	ldr	r2, [pc, #32]	@ (8004004 <HAL_MspInit+0x4c>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fea:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <HAL_MspInit+0x4c>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800

08004008 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	@ 0x28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004010:	f107 0314 	add.w	r3, r7, #20
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a30      	ldr	r2, [pc, #192]	@ (80040e8 <HAL_DAC_MspInit+0xe0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d159      	bne.n	80040de <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	4b2f      	ldr	r3, [pc, #188]	@ (80040ec <HAL_DAC_MspInit+0xe4>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	4a2e      	ldr	r2, [pc, #184]	@ (80040ec <HAL_DAC_MspInit+0xe4>)
 8004034:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004038:	6413      	str	r3, [r2, #64]	@ 0x40
 800403a:	4b2c      	ldr	r3, [pc, #176]	@ (80040ec <HAL_DAC_MspInit+0xe4>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	4b28      	ldr	r3, [pc, #160]	@ (80040ec <HAL_DAC_MspInit+0xe4>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800404e:	4a27      	ldr	r2, [pc, #156]	@ (80040ec <HAL_DAC_MspInit+0xe4>)
 8004050:	f043 0301 	orr.w	r3, r3, #1
 8004054:	6313      	str	r3, [r2, #48]	@ 0x30
 8004056:	4b25      	ldr	r3, [pc, #148]	@ (80040ec <HAL_DAC_MspInit+0xe4>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004062:	2310      	movs	r3, #16
 8004064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004066:	2303      	movs	r3, #3
 8004068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800406e:	f107 0314 	add.w	r3, r7, #20
 8004072:	4619      	mov	r1, r3
 8004074:	481e      	ldr	r0, [pc, #120]	@ (80040f0 <HAL_DAC_MspInit+0xe8>)
 8004076:	f001 fafb 	bl	8005670 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800407a:	4b1e      	ldr	r3, [pc, #120]	@ (80040f4 <HAL_DAC_MspInit+0xec>)
 800407c:	4a1e      	ldr	r2, [pc, #120]	@ (80040f8 <HAL_DAC_MspInit+0xf0>)
 800407e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8004080:	4b1c      	ldr	r3, [pc, #112]	@ (80040f4 <HAL_DAC_MspInit+0xec>)
 8004082:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8004086:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004088:	4b1a      	ldr	r3, [pc, #104]	@ (80040f4 <HAL_DAC_MspInit+0xec>)
 800408a:	2240      	movs	r2, #64	@ 0x40
 800408c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800408e:	4b19      	ldr	r3, [pc, #100]	@ (80040f4 <HAL_DAC_MspInit+0xec>)
 8004090:	2200      	movs	r2, #0
 8004092:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8004094:	4b17      	ldr	r3, [pc, #92]	@ (80040f4 <HAL_DAC_MspInit+0xec>)
 8004096:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800409a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800409c:	4b15      	ldr	r3, [pc, #84]	@ (80040f4 <HAL_DAC_MspInit+0xec>)
 800409e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80040a2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80040a4:	4b13      	ldr	r3, [pc, #76]	@ (80040f4 <HAL_DAC_MspInit+0xec>)
 80040a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80040aa:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80040ac:	4b11      	ldr	r3, [pc, #68]	@ (80040f4 <HAL_DAC_MspInit+0xec>)
 80040ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040b2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80040b4:	4b0f      	ldr	r3, [pc, #60]	@ (80040f4 <HAL_DAC_MspInit+0xec>)
 80040b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80040ba:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040bc:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <HAL_DAC_MspInit+0xec>)
 80040be:	2200      	movs	r2, #0
 80040c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80040c2:	480c      	ldr	r0, [pc, #48]	@ (80040f4 <HAL_DAC_MspInit+0xec>)
 80040c4:	f000 fed2 	bl	8004e6c <HAL_DMA_Init>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80040ce:	f7ff f887 	bl	80031e0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a07      	ldr	r2, [pc, #28]	@ (80040f4 <HAL_DAC_MspInit+0xec>)
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	4a06      	ldr	r2, [pc, #24]	@ (80040f4 <HAL_DAC_MspInit+0xec>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80040de:	bf00      	nop
 80040e0:	3728      	adds	r7, #40	@ 0x28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40007400 	.word	0x40007400
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40020000 	.word	0x40020000
 80040f4:	20014194 	.word	0x20014194
 80040f8:	40026088 	.word	0x40026088

080040fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	@ 0x28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a31      	ldr	r2, [pc, #196]	@ (80041e0 <HAL_SD_MspInit+0xe4>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d15b      	bne.n	80041d6 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	4b30      	ldr	r3, [pc, #192]	@ (80041e4 <HAL_SD_MspInit+0xe8>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	4a2f      	ldr	r2, [pc, #188]	@ (80041e4 <HAL_SD_MspInit+0xe8>)
 8004128:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800412c:	6453      	str	r3, [r2, #68]	@ 0x44
 800412e:	4b2d      	ldr	r3, [pc, #180]	@ (80041e4 <HAL_SD_MspInit+0xe8>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	4b29      	ldr	r3, [pc, #164]	@ (80041e4 <HAL_SD_MspInit+0xe8>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	4a28      	ldr	r2, [pc, #160]	@ (80041e4 <HAL_SD_MspInit+0xe8>)
 8004144:	f043 0304 	orr.w	r3, r3, #4
 8004148:	6313      	str	r3, [r2, #48]	@ 0x30
 800414a:	4b26      	ldr	r3, [pc, #152]	@ (80041e4 <HAL_SD_MspInit+0xe8>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	60bb      	str	r3, [r7, #8]
 800415a:	4b22      	ldr	r3, [pc, #136]	@ (80041e4 <HAL_SD_MspInit+0xe8>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415e:	4a21      	ldr	r2, [pc, #132]	@ (80041e4 <HAL_SD_MspInit+0xe8>)
 8004160:	f043 0308 	orr.w	r3, r3, #8
 8004164:	6313      	str	r3, [r2, #48]	@ 0x30
 8004166:	4b1f      	ldr	r3, [pc, #124]	@ (80041e4 <HAL_SD_MspInit+0xe8>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004172:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004178:	2302      	movs	r3, #2
 800417a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800417c:	2301      	movs	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004180:	2303      	movs	r3, #3
 8004182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004184:	230c      	movs	r3, #12
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004188:	f107 0314 	add.w	r3, r7, #20
 800418c:	4619      	mov	r1, r3
 800418e:	4816      	ldr	r0, [pc, #88]	@ (80041e8 <HAL_SD_MspInit+0xec>)
 8004190:	f001 fa6e 	bl	8005670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004194:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800419a:	2302      	movs	r3, #2
 800419c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a2:	2303      	movs	r3, #3
 80041a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80041a6:	230c      	movs	r3, #12
 80041a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041aa:	f107 0314 	add.w	r3, r7, #20
 80041ae:	4619      	mov	r1, r3
 80041b0:	480d      	ldr	r0, [pc, #52]	@ (80041e8 <HAL_SD_MspInit+0xec>)
 80041b2:	f001 fa5d 	bl	8005670 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80041b6:	2304      	movs	r3, #4
 80041b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ba:	2302      	movs	r3, #2
 80041bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041be:	2301      	movs	r3, #1
 80041c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c2:	2303      	movs	r3, #3
 80041c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80041c6:	230c      	movs	r3, #12
 80041c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041ca:	f107 0314 	add.w	r3, r7, #20
 80041ce:	4619      	mov	r1, r3
 80041d0:	4806      	ldr	r0, [pc, #24]	@ (80041ec <HAL_SD_MspInit+0xf0>)
 80041d2:	f001 fa4d 	bl	8005670 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80041d6:	bf00      	nop
 80041d8:	3728      	adds	r7, #40	@ 0x28
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40023800 	.word	0x40023800
 80041e8:	40020800 	.word	0x40020800
 80041ec:	40020c00 	.word	0x40020c00

080041f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08c      	sub	sp, #48	@ 0x30
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f8:	f107 031c 	add.w	r3, r7, #28
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	609a      	str	r2, [r3, #8]
 8004204:	60da      	str	r2, [r3, #12]
 8004206:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a74      	ldr	r2, [pc, #464]	@ (80043e0 <HAL_SPI_MspInit+0x1f0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	f040 8089 	bne.w	8004326 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004214:	2300      	movs	r3, #0
 8004216:	61bb      	str	r3, [r7, #24]
 8004218:	4b72      	ldr	r3, [pc, #456]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 800421a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421c:	4a71      	ldr	r2, [pc, #452]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 800421e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004222:	6453      	str	r3, [r2, #68]	@ 0x44
 8004224:	4b6f      	ldr	r3, [pc, #444]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 8004226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004228:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	4b6b      	ldr	r3, [pc, #428]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 8004236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004238:	4a6a      	ldr	r2, [pc, #424]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 800423a:	f043 0301 	orr.w	r3, r3, #1
 800423e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004240:	4b68      	ldr	r3, [pc, #416]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800424c:	23e0      	movs	r3, #224	@ 0xe0
 800424e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004250:	2302      	movs	r3, #2
 8004252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004254:	2300      	movs	r3, #0
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004258:	2303      	movs	r3, #3
 800425a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800425c:	2305      	movs	r3, #5
 800425e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004260:	f107 031c 	add.w	r3, r7, #28
 8004264:	4619      	mov	r1, r3
 8004266:	4860      	ldr	r0, [pc, #384]	@ (80043e8 <HAL_SPI_MspInit+0x1f8>)
 8004268:	f001 fa02 	bl	8005670 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800426c:	4b5f      	ldr	r3, [pc, #380]	@ (80043ec <HAL_SPI_MspInit+0x1fc>)
 800426e:	4a60      	ldr	r2, [pc, #384]	@ (80043f0 <HAL_SPI_MspInit+0x200>)
 8004270:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004272:	4b5e      	ldr	r3, [pc, #376]	@ (80043ec <HAL_SPI_MspInit+0x1fc>)
 8004274:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8004278:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800427a:	4b5c      	ldr	r3, [pc, #368]	@ (80043ec <HAL_SPI_MspInit+0x1fc>)
 800427c:	2240      	movs	r2, #64	@ 0x40
 800427e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004280:	4b5a      	ldr	r3, [pc, #360]	@ (80043ec <HAL_SPI_MspInit+0x1fc>)
 8004282:	2200      	movs	r2, #0
 8004284:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004286:	4b59      	ldr	r3, [pc, #356]	@ (80043ec <HAL_SPI_MspInit+0x1fc>)
 8004288:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800428c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800428e:	4b57      	ldr	r3, [pc, #348]	@ (80043ec <HAL_SPI_MspInit+0x1fc>)
 8004290:	2200      	movs	r2, #0
 8004292:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004294:	4b55      	ldr	r3, [pc, #340]	@ (80043ec <HAL_SPI_MspInit+0x1fc>)
 8004296:	2200      	movs	r2, #0
 8004298:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800429a:	4b54      	ldr	r3, [pc, #336]	@ (80043ec <HAL_SPI_MspInit+0x1fc>)
 800429c:	2200      	movs	r2, #0
 800429e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80042a0:	4b52      	ldr	r3, [pc, #328]	@ (80043ec <HAL_SPI_MspInit+0x1fc>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042a6:	4b51      	ldr	r3, [pc, #324]	@ (80043ec <HAL_SPI_MspInit+0x1fc>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80042ac:	484f      	ldr	r0, [pc, #316]	@ (80043ec <HAL_SPI_MspInit+0x1fc>)
 80042ae:	f000 fddd 	bl	8004e6c <HAL_DMA_Init>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80042b8:	f7fe ff92 	bl	80031e0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a4b      	ldr	r2, [pc, #300]	@ (80043ec <HAL_SPI_MspInit+0x1fc>)
 80042c0:	649a      	str	r2, [r3, #72]	@ 0x48
 80042c2:	4a4a      	ldr	r2, [pc, #296]	@ (80043ec <HAL_SPI_MspInit+0x1fc>)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80042c8:	4b4a      	ldr	r3, [pc, #296]	@ (80043f4 <HAL_SPI_MspInit+0x204>)
 80042ca:	4a4b      	ldr	r2, [pc, #300]	@ (80043f8 <HAL_SPI_MspInit+0x208>)
 80042cc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80042ce:	4b49      	ldr	r3, [pc, #292]	@ (80043f4 <HAL_SPI_MspInit+0x204>)
 80042d0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80042d4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042d6:	4b47      	ldr	r3, [pc, #284]	@ (80043f4 <HAL_SPI_MspInit+0x204>)
 80042d8:	2200      	movs	r2, #0
 80042da:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042dc:	4b45      	ldr	r3, [pc, #276]	@ (80043f4 <HAL_SPI_MspInit+0x204>)
 80042de:	2200      	movs	r2, #0
 80042e0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042e2:	4b44      	ldr	r3, [pc, #272]	@ (80043f4 <HAL_SPI_MspInit+0x204>)
 80042e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042e8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042ea:	4b42      	ldr	r3, [pc, #264]	@ (80043f4 <HAL_SPI_MspInit+0x204>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042f0:	4b40      	ldr	r3, [pc, #256]	@ (80043f4 <HAL_SPI_MspInit+0x204>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80042f6:	4b3f      	ldr	r3, [pc, #252]	@ (80043f4 <HAL_SPI_MspInit+0x204>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80042fc:	4b3d      	ldr	r3, [pc, #244]	@ (80043f4 <HAL_SPI_MspInit+0x204>)
 80042fe:	2200      	movs	r2, #0
 8004300:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004302:	4b3c      	ldr	r3, [pc, #240]	@ (80043f4 <HAL_SPI_MspInit+0x204>)
 8004304:	2200      	movs	r2, #0
 8004306:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004308:	483a      	ldr	r0, [pc, #232]	@ (80043f4 <HAL_SPI_MspInit+0x204>)
 800430a:	f000 fdaf 	bl	8004e6c <HAL_DMA_Init>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8004314:	f7fe ff64 	bl	80031e0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a36      	ldr	r2, [pc, #216]	@ (80043f4 <HAL_SPI_MspInit+0x204>)
 800431c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800431e:	4a35      	ldr	r2, [pc, #212]	@ (80043f4 <HAL_SPI_MspInit+0x204>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004324:	e057      	b.n	80043d6 <HAL_SPI_MspInit+0x1e6>
  else if(hspi->Instance==SPI2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a34      	ldr	r2, [pc, #208]	@ (80043fc <HAL_SPI_MspInit+0x20c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d152      	bne.n	80043d6 <HAL_SPI_MspInit+0x1e6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004330:	2300      	movs	r3, #0
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	4b2b      	ldr	r3, [pc, #172]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 8004336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004338:	4a2a      	ldr	r2, [pc, #168]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 800433a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800433e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004340:	4b28      	ldr	r3, [pc, #160]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	4b24      	ldr	r3, [pc, #144]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	4a23      	ldr	r2, [pc, #140]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 8004356:	f043 0304 	orr.w	r3, r3, #4
 800435a:	6313      	str	r3, [r2, #48]	@ 0x30
 800435c:	4b21      	ldr	r3, [pc, #132]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 800435e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004368:	2300      	movs	r3, #0
 800436a:	60bb      	str	r3, [r7, #8]
 800436c:	4b1d      	ldr	r3, [pc, #116]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 800436e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004370:	4a1c      	ldr	r2, [pc, #112]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 8004372:	f043 0302 	orr.w	r3, r3, #2
 8004376:	6313      	str	r3, [r2, #48]	@ 0x30
 8004378:	4b1a      	ldr	r3, [pc, #104]	@ (80043e4 <HAL_SPI_MspInit+0x1f4>)
 800437a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004384:	2308      	movs	r3, #8
 8004386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004388:	2302      	movs	r3, #2
 800438a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438c:	2300      	movs	r3, #0
 800438e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004390:	2303      	movs	r3, #3
 8004392:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004394:	2305      	movs	r3, #5
 8004396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004398:	f107 031c 	add.w	r3, r7, #28
 800439c:	4619      	mov	r1, r3
 800439e:	4818      	ldr	r0, [pc, #96]	@ (8004400 <HAL_SPI_MspInit+0x210>)
 80043a0:	f001 f966 	bl	8005670 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80043a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043aa:	2302      	movs	r3, #2
 80043ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b2:	2303      	movs	r3, #3
 80043b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80043b6:	2305      	movs	r3, #5
 80043b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ba:	f107 031c 	add.w	r3, r7, #28
 80043be:	4619      	mov	r1, r3
 80043c0:	4810      	ldr	r0, [pc, #64]	@ (8004404 <HAL_SPI_MspInit+0x214>)
 80043c2:	f001 f955 	bl	8005670 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80043c6:	2200      	movs	r2, #0
 80043c8:	2100      	movs	r1, #0
 80043ca:	2024      	movs	r0, #36	@ 0x24
 80043cc:	f000 faef 	bl	80049ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80043d0:	2024      	movs	r0, #36	@ 0x24
 80043d2:	f000 fb08 	bl	80049e6 <HAL_NVIC_EnableIRQ>
}
 80043d6:	bf00      	nop
 80043d8:	3730      	adds	r7, #48	@ 0x30
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40013000 	.word	0x40013000
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40020000 	.word	0x40020000
 80043ec:	20014328 	.word	0x20014328
 80043f0:	40026458 	.word	0x40026458
 80043f4:	20014388 	.word	0x20014388
 80043f8:	40026410 	.word	0x40026410
 80043fc:	40003800 	.word	0x40003800
 8004400:	40020800 	.word	0x40020800
 8004404:	40020400 	.word	0x40020400

08004408 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004418:	d10e      	bne.n	8004438 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	4b16      	ldr	r3, [pc, #88]	@ (8004478 <HAL_TIM_Base_MspInit+0x70>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	4a15      	ldr	r2, [pc, #84]	@ (8004478 <HAL_TIM_Base_MspInit+0x70>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	6413      	str	r3, [r2, #64]	@ 0x40
 800442a:	4b13      	ldr	r3, [pc, #76]	@ (8004478 <HAL_TIM_Base_MspInit+0x70>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004436:	e01a      	b.n	800446e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a0f      	ldr	r2, [pc, #60]	@ (800447c <HAL_TIM_Base_MspInit+0x74>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d115      	bne.n	800446e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	4b0c      	ldr	r3, [pc, #48]	@ (8004478 <HAL_TIM_Base_MspInit+0x70>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800444a:	4a0b      	ldr	r2, [pc, #44]	@ (8004478 <HAL_TIM_Base_MspInit+0x70>)
 800444c:	f043 0304 	orr.w	r3, r3, #4
 8004450:	6413      	str	r3, [r2, #64]	@ 0x40
 8004452:	4b09      	ldr	r3, [pc, #36]	@ (8004478 <HAL_TIM_Base_MspInit+0x70>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800445e:	2200      	movs	r2, #0
 8004460:	2100      	movs	r1, #0
 8004462:	201e      	movs	r0, #30
 8004464:	f000 faa3 	bl	80049ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004468:	201e      	movs	r0, #30
 800446a:	f000 fabc 	bl	80049e6 <HAL_NVIC_EnableIRQ>
}
 800446e:	bf00      	nop
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	40023800 	.word	0x40023800
 800447c:	40000800 	.word	0x40000800

08004480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	@ 0x28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	605a      	str	r2, [r3, #4]
 8004492:	609a      	str	r2, [r3, #8]
 8004494:	60da      	str	r2, [r3, #12]
 8004496:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1d      	ldr	r2, [pc, #116]	@ (8004514 <HAL_UART_MspInit+0x94>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d134      	bne.n	800450c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004518 <HAL_UART_MspInit+0x98>)
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004518 <HAL_UART_MspInit+0x98>)
 80044ac:	f043 0310 	orr.w	r3, r3, #16
 80044b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80044b2:	4b19      	ldr	r3, [pc, #100]	@ (8004518 <HAL_UART_MspInit+0x98>)
 80044b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	4b15      	ldr	r3, [pc, #84]	@ (8004518 <HAL_UART_MspInit+0x98>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c6:	4a14      	ldr	r2, [pc, #80]	@ (8004518 <HAL_UART_MspInit+0x98>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ce:	4b12      	ldr	r3, [pc, #72]	@ (8004518 <HAL_UART_MspInit+0x98>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044da:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80044de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e0:	2302      	movs	r3, #2
 80044e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e8:	2303      	movs	r3, #3
 80044ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044ec:	2307      	movs	r3, #7
 80044ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f0:	f107 0314 	add.w	r3, r7, #20
 80044f4:	4619      	mov	r1, r3
 80044f6:	4809      	ldr	r0, [pc, #36]	@ (800451c <HAL_UART_MspInit+0x9c>)
 80044f8:	f001 f8ba 	bl	8005670 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80044fc:	2200      	movs	r2, #0
 80044fe:	2100      	movs	r1, #0
 8004500:	2025      	movs	r0, #37	@ 0x25
 8004502:	f000 fa54 	bl	80049ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004506:	2025      	movs	r0, #37	@ 0x25
 8004508:	f000 fa6d 	bl	80049e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800450c:	bf00      	nop
 800450e:	3728      	adds	r7, #40	@ 0x28
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40011000 	.word	0x40011000
 8004518:	40023800 	.word	0x40023800
 800451c:	40020000 	.word	0x40020000

08004520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <NMI_Handler+0x4>

08004528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800452c:	bf00      	nop
 800452e:	e7fd      	b.n	800452c <HardFault_Handler+0x4>

08004530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <MemManage_Handler+0x4>

08004538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800453c:	bf00      	nop
 800453e:	e7fd      	b.n	800453c <BusFault_Handler+0x4>

08004540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <UsageFault_Handler+0x4>

08004548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004556:	b480      	push	{r7}
 8004558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004568:	f000 f902 	bl	8004770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800456c:	bf00      	nop
 800456e:	bd80      	pop	{r7, pc}

08004570 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8004574:	4802      	ldr	r0, [pc, #8]	@ (8004580 <DMA1_Stream5_IRQHandler+0x10>)
 8004576:	f000 fe11 	bl	800519c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20014194 	.word	0x20014194

08004584 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004588:	4802      	ldr	r0, [pc, #8]	@ (8004594 <TIM4_IRQHandler+0x10>)
 800458a:	f004 fd19 	bl	8008fc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20014430 	.word	0x20014430

08004598 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800459c:	4802      	ldr	r0, [pc, #8]	@ (80045a8 <SPI2_IRQHandler+0x10>)
 800459e:	f003 fe75 	bl	800828c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80045a2:	bf00      	nop
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	200142d0 	.word	0x200142d0

080045ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80045b0:	4802      	ldr	r0, [pc, #8]	@ (80045bc <USART1_IRQHandler+0x10>)
 80045b2:	f005 f90b 	bl	80097cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20014478 	.word	0x20014478

080045c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80045c4:	4802      	ldr	r0, [pc, #8]	@ (80045d0 <DMA2_Stream0_IRQHandler+0x10>)
 80045c6:	f000 fde9 	bl	800519c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80045ca:	bf00      	nop
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20014388 	.word	0x20014388

080045d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80045d8:	4802      	ldr	r0, [pc, #8]	@ (80045e4 <DMA2_Stream3_IRQHandler+0x10>)
 80045da:	f000 fddf 	bl	800519c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	20014328 	.word	0x20014328

080045e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80045f0:	4a14      	ldr	r2, [pc, #80]	@ (8004644 <_sbrk+0x5c>)
 80045f2:	4b15      	ldr	r3, [pc, #84]	@ (8004648 <_sbrk+0x60>)
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80045fc:	4b13      	ldr	r3, [pc, #76]	@ (800464c <_sbrk+0x64>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004604:	4b11      	ldr	r3, [pc, #68]	@ (800464c <_sbrk+0x64>)
 8004606:	4a12      	ldr	r2, [pc, #72]	@ (8004650 <_sbrk+0x68>)
 8004608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800460a:	4b10      	ldr	r3, [pc, #64]	@ (800464c <_sbrk+0x64>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	429a      	cmp	r2, r3
 8004616:	d207      	bcs.n	8004628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004618:	f009 fea6 	bl	800e368 <__errno>
 800461c:	4603      	mov	r3, r0
 800461e:	220c      	movs	r2, #12
 8004620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004622:	f04f 33ff 	mov.w	r3, #4294967295
 8004626:	e009      	b.n	800463c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004628:	4b08      	ldr	r3, [pc, #32]	@ (800464c <_sbrk+0x64>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800462e:	4b07      	ldr	r3, [pc, #28]	@ (800464c <_sbrk+0x64>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4413      	add	r3, r2
 8004636:	4a05      	ldr	r2, [pc, #20]	@ (800464c <_sbrk+0x64>)
 8004638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800463a:	68fb      	ldr	r3, [r7, #12]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20020000 	.word	0x20020000
 8004648:	00000400 	.word	0x00000400
 800464c:	20014728 	.word	0x20014728
 8004650:	200148b8 	.word	0x200148b8

08004654 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004658:	4b06      	ldr	r3, [pc, #24]	@ (8004674 <SystemInit+0x20>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465e:	4a05      	ldr	r2, [pc, #20]	@ (8004674 <SystemInit+0x20>)
 8004660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004668:	bf00      	nop
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004678:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800467c:	f7ff ffea 	bl	8004654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004680:	480c      	ldr	r0, [pc, #48]	@ (80046b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004682:	490d      	ldr	r1, [pc, #52]	@ (80046b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004684:	4a0d      	ldr	r2, [pc, #52]	@ (80046bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004688:	e002      	b.n	8004690 <LoopCopyDataInit>

0800468a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800468a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800468c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800468e:	3304      	adds	r3, #4

08004690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004694:	d3f9      	bcc.n	800468a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004696:	4a0a      	ldr	r2, [pc, #40]	@ (80046c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004698:	4c0a      	ldr	r4, [pc, #40]	@ (80046c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800469a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800469c:	e001      	b.n	80046a2 <LoopFillZerobss>

0800469e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800469e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046a0:	3204      	adds	r2, #4

080046a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046a4:	d3fb      	bcc.n	800469e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046a6:	f009 fe65 	bl	800e374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046aa:	f7fd ffe5 	bl	8002678 <main>
  bx  lr    
 80046ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80046b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046b8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80046bc:	0800f46c 	.word	0x0800f46c
  ldr r2, =_sbss
 80046c0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80046c4:	200148b4 	.word	0x200148b4

080046c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046c8:	e7fe      	b.n	80046c8 <ADC_IRQHandler>
	...

080046cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046d0:	4b0e      	ldr	r3, [pc, #56]	@ (800470c <HAL_Init+0x40>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0d      	ldr	r2, [pc, #52]	@ (800470c <HAL_Init+0x40>)
 80046d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046dc:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <HAL_Init+0x40>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a0a      	ldr	r2, [pc, #40]	@ (800470c <HAL_Init+0x40>)
 80046e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046e8:	4b08      	ldr	r3, [pc, #32]	@ (800470c <HAL_Init+0x40>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a07      	ldr	r2, [pc, #28]	@ (800470c <HAL_Init+0x40>)
 80046ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046f4:	2003      	movs	r0, #3
 80046f6:	f000 f94f 	bl	8004998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046fa:	200f      	movs	r0, #15
 80046fc:	f000 f808 	bl	8004710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004700:	f7ff fc5a 	bl	8003fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40023c00 	.word	0x40023c00

08004710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004718:	4b12      	ldr	r3, [pc, #72]	@ (8004764 <HAL_InitTick+0x54>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4b12      	ldr	r3, [pc, #72]	@ (8004768 <HAL_InitTick+0x58>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	4619      	mov	r1, r3
 8004722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004726:	fbb3 f3f1 	udiv	r3, r3, r1
 800472a:	fbb2 f3f3 	udiv	r3, r2, r3
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f967 	bl	8004a02 <HAL_SYSTICK_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e00e      	b.n	800475c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b0f      	cmp	r3, #15
 8004742:	d80a      	bhi.n	800475a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004744:	2200      	movs	r2, #0
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	f04f 30ff 	mov.w	r0, #4294967295
 800474c:	f000 f92f 	bl	80049ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004750:	4a06      	ldr	r2, [pc, #24]	@ (800476c <HAL_InitTick+0x5c>)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	e000      	b.n	800475c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
}
 800475c:	4618      	mov	r0, r3
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000010 	.word	0x20000010
 8004768:	20000018 	.word	0x20000018
 800476c:	20000014 	.word	0x20000014

08004770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004774:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <HAL_IncTick+0x20>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <HAL_IncTick+0x24>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4413      	add	r3, r2
 8004780:	4a04      	ldr	r2, [pc, #16]	@ (8004794 <HAL_IncTick+0x24>)
 8004782:	6013      	str	r3, [r2, #0]
}
 8004784:	bf00      	nop
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20000018 	.word	0x20000018
 8004794:	2001472c 	.word	0x2001472c

08004798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  return uwTick;
 800479c:	4b03      	ldr	r3, [pc, #12]	@ (80047ac <HAL_GetTick+0x14>)
 800479e:	681b      	ldr	r3, [r3, #0]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	2001472c 	.word	0x2001472c

080047b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047b8:	f7ff ffee 	bl	8004798 <HAL_GetTick>
 80047bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c8:	d005      	beq.n	80047d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047ca:	4b0a      	ldr	r3, [pc, #40]	@ (80047f4 <HAL_Delay+0x44>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047d6:	bf00      	nop
 80047d8:	f7ff ffde 	bl	8004798 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d8f7      	bhi.n	80047d8 <HAL_Delay+0x28>
  {
  }
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000018 	.word	0x20000018

080047f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004808:	4b0c      	ldr	r3, [pc, #48]	@ (800483c <__NVIC_SetPriorityGrouping+0x44>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004814:	4013      	ands	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004820:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800482a:	4a04      	ldr	r2, [pc, #16]	@ (800483c <__NVIC_SetPriorityGrouping+0x44>)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	60d3      	str	r3, [r2, #12]
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	e000ed00 	.word	0xe000ed00

08004840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004844:	4b04      	ldr	r3, [pc, #16]	@ (8004858 <__NVIC_GetPriorityGrouping+0x18>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	0a1b      	lsrs	r3, r3, #8
 800484a:	f003 0307 	and.w	r3, r3, #7
}
 800484e:	4618      	mov	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	e000ed00 	.word	0xe000ed00

0800485c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486a:	2b00      	cmp	r3, #0
 800486c:	db0b      	blt.n	8004886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800486e:	79fb      	ldrb	r3, [r7, #7]
 8004870:	f003 021f 	and.w	r2, r3, #31
 8004874:	4907      	ldr	r1, [pc, #28]	@ (8004894 <__NVIC_EnableIRQ+0x38>)
 8004876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	2001      	movs	r0, #1
 800487e:	fa00 f202 	lsl.w	r2, r0, r2
 8004882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	e000e100 	.word	0xe000e100

08004898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	4603      	mov	r3, r0
 80048a0:	6039      	str	r1, [r7, #0]
 80048a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	db0a      	blt.n	80048c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	490c      	ldr	r1, [pc, #48]	@ (80048e4 <__NVIC_SetPriority+0x4c>)
 80048b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b6:	0112      	lsls	r2, r2, #4
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	440b      	add	r3, r1
 80048bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048c0:	e00a      	b.n	80048d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	4908      	ldr	r1, [pc, #32]	@ (80048e8 <__NVIC_SetPriority+0x50>)
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	3b04      	subs	r3, #4
 80048d0:	0112      	lsls	r2, r2, #4
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	440b      	add	r3, r1
 80048d6:	761a      	strb	r2, [r3, #24]
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	e000e100 	.word	0xe000e100
 80048e8:	e000ed00 	.word	0xe000ed00

080048ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b089      	sub	sp, #36	@ 0x24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f1c3 0307 	rsb	r3, r3, #7
 8004906:	2b04      	cmp	r3, #4
 8004908:	bf28      	it	cs
 800490a:	2304      	movcs	r3, #4
 800490c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3304      	adds	r3, #4
 8004912:	2b06      	cmp	r3, #6
 8004914:	d902      	bls.n	800491c <NVIC_EncodePriority+0x30>
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	3b03      	subs	r3, #3
 800491a:	e000      	b.n	800491e <NVIC_EncodePriority+0x32>
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004920:	f04f 32ff 	mov.w	r2, #4294967295
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43da      	mvns	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	401a      	ands	r2, r3
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004934:	f04f 31ff 	mov.w	r1, #4294967295
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	fa01 f303 	lsl.w	r3, r1, r3
 800493e:	43d9      	mvns	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004944:	4313      	orrs	r3, r2
         );
}
 8004946:	4618      	mov	r0, r3
 8004948:	3724      	adds	r7, #36	@ 0x24
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3b01      	subs	r3, #1
 8004960:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004964:	d301      	bcc.n	800496a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004966:	2301      	movs	r3, #1
 8004968:	e00f      	b.n	800498a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800496a:	4a0a      	ldr	r2, [pc, #40]	@ (8004994 <SysTick_Config+0x40>)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3b01      	subs	r3, #1
 8004970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004972:	210f      	movs	r1, #15
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	f7ff ff8e 	bl	8004898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800497c:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <SysTick_Config+0x40>)
 800497e:	2200      	movs	r2, #0
 8004980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004982:	4b04      	ldr	r3, [pc, #16]	@ (8004994 <SysTick_Config+0x40>)
 8004984:	2207      	movs	r2, #7
 8004986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	e000e010 	.word	0xe000e010

08004998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff ff29 	bl	80047f8 <__NVIC_SetPriorityGrouping>
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b086      	sub	sp, #24
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	4603      	mov	r3, r0
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
 80049ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049c0:	f7ff ff3e 	bl	8004840 <__NVIC_GetPriorityGrouping>
 80049c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	6978      	ldr	r0, [r7, #20]
 80049cc:	f7ff ff8e 	bl	80048ec <NVIC_EncodePriority>
 80049d0:	4602      	mov	r2, r0
 80049d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff ff5d 	bl	8004898 <__NVIC_SetPriority>
}
 80049de:	bf00      	nop
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	4603      	mov	r3, r0
 80049ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff ff31 	bl	800485c <__NVIC_EnableIRQ>
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7ff ffa2 	bl	8004954 <SysTick_Config>
 8004a10:	4603      	mov	r3, r0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e014      	b.n	8004a56 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	791b      	ldrb	r3, [r3, #4]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d105      	bne.n	8004a42 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff fae3 	bl	8004008 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0a2      	b.n	8004bc2 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	795b      	ldrb	r3, [r3, #5]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_DAC_Start_DMA+0x28>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e09c      	b.n	8004bc2 <HAL_DAC_Start_DMA+0x162>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2202      	movs	r2, #2
 8004a92:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d129      	bne.n	8004aee <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	4a4b      	ldr	r2, [pc, #300]	@ (8004bcc <HAL_DAC_Start_DMA+0x16c>)
 8004aa0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	4a4a      	ldr	r2, [pc, #296]	@ (8004bd0 <HAL_DAC_Start_DMA+0x170>)
 8004aa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	4a49      	ldr	r2, [pc, #292]	@ (8004bd4 <HAL_DAC_Start_DMA+0x174>)
 8004ab0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ac0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_DAC_Start_DMA+0x70>
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d005      	beq.n	8004ada <HAL_DAC_Start_DMA+0x7a>
 8004ace:	e009      	b.n	8004ae4 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	613b      	str	r3, [r7, #16]
        break;
 8004ad8:	e033      	b.n	8004b42 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	330c      	adds	r3, #12
 8004ae0:	613b      	str	r3, [r7, #16]
        break;
 8004ae2:	e02e      	b.n	8004b42 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3310      	adds	r3, #16
 8004aea:	613b      	str	r3, [r7, #16]
        break;
 8004aec:	e029      	b.n	8004b42 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	4a39      	ldr	r2, [pc, #228]	@ (8004bd8 <HAL_DAC_Start_DMA+0x178>)
 8004af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	4a38      	ldr	r2, [pc, #224]	@ (8004bdc <HAL_DAC_Start_DMA+0x17c>)
 8004afc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	4a37      	ldr	r2, [pc, #220]	@ (8004be0 <HAL_DAC_Start_DMA+0x180>)
 8004b04:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004b14:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <HAL_DAC_Start_DMA+0xc4>
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d005      	beq.n	8004b2e <HAL_DAC_Start_DMA+0xce>
 8004b22:	e009      	b.n	8004b38 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3314      	adds	r3, #20
 8004b2a:	613b      	str	r3, [r7, #16]
        break;
 8004b2c:	e009      	b.n	8004b42 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3318      	adds	r3, #24
 8004b34:	613b      	str	r3, [r7, #16]
        break;
 8004b36:	e004      	b.n	8004b42 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	331c      	adds	r3, #28
 8004b3e:	613b      	str	r3, [r7, #16]
        break;
 8004b40:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d111      	bne.n	8004b6c <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b56:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6898      	ldr	r0, [r3, #8]
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	f000 fa31 	bl	8004fc8 <HAL_DMA_Start_IT>
 8004b66:	4603      	mov	r3, r0
 8004b68:	75fb      	strb	r3, [r7, #23]
 8004b6a:	e010      	b.n	8004b8e <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8004b7a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	68d8      	ldr	r0, [r3, #12]
 8004b80:	6879      	ldr	r1, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	f000 fa1f 	bl	8004fc8 <HAL_DMA_Start_IT>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10c      	bne.n	8004bb4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6819      	ldr	r1, [r3, #0]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f003 0310 	and.w	r3, r3, #16
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	409a      	lsls	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e005      	b.n	8004bc0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f043 0204 	orr.w	r2, r3, #4
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	08004d59 	.word	0x08004d59
 8004bd0:	08004d7b 	.word	0x08004d7b
 8004bd4:	08004d97 	.word	0x08004d97
 8004bd8:	08004e01 	.word	0x08004e01
 8004bdc:	08004e23 	.word	0x08004e23
 8004be0:	08004e3f 	.word	0x08004e3f

08004be4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e03e      	b.n	8004c76 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6819      	ldr	r1, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	43da      	mvns	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	400a      	ands	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6819      	ldr	r1, [r3, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2201      	movs	r2, #1
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	43da      	mvns	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	400a      	ands	r2, r1
 8004c30:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10d      	bne.n	8004c54 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fa1b 	bl	8005078 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e00c      	b.n	8004c6e <HAL_DAC_Stop_DMA+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fa0d 	bl	8005078 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
 8004c6c:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b089      	sub	sp, #36	@ 0x24
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_DAC_ConfigChannel+0x1c>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e042      	b.n	8004d4c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	795b      	ldrb	r3, [r3, #5]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_DAC_ConfigChannel+0x2c>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e03c      	b.n	8004d4c <HAL_DAC_ConfigChannel+0xa6>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f003 0310 	and.w	r3, r3, #16
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6819      	ldr	r1, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f003 0310 	and.w	r3, r3, #16
 8004d2e:	22c0      	movs	r2, #192	@ 0xc0
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	43da      	mvns	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	400a      	ands	r2, r1
 8004d3c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004d4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3724      	adds	r7, #36	@ 0x24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d64:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f7ff ff89 	bl	8004c7e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	711a      	strb	r2, [r3, #4]
}
 8004d72:	bf00      	nop
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f7fd fc65 	bl	8002658 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004d8e:	bf00      	nop
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	f043 0204 	orr.w	r2, r3, #4
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff ff6e 	bl	8004c92 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	711a      	strb	r2, [r3, #4]
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004e0e:	68f8      	ldr	r0, [r7, #12]
 8004e10:	f7ff ffd8 	bl	8004dc4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2201      	movs	r2, #1
 8004e18:	711a      	strb	r2, [r3, #4]
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff ffd1 	bl	8004dd8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f043 0204 	orr.w	r2, r3, #4
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff ffc7 	bl	8004dec <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	711a      	strb	r2, [r3, #4]
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e78:	f7ff fc8e 	bl	8004798 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e099      	b.n	8004fbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0201 	bic.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ea8:	e00f      	b.n	8004eca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004eaa:	f7ff fc75 	bl	8004798 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b05      	cmp	r3, #5
 8004eb6:	d908      	bls.n	8004eca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e078      	b.n	8004fbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e8      	bne.n	8004eaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4b38      	ldr	r3, [pc, #224]	@ (8004fc4 <HAL_DMA_Init+0x158>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d107      	bne.n	8004f34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f023 0307 	bic.w	r3, r3, #7
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d117      	bne.n	8004f8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00e      	beq.n	8004f8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 fb01 	bl	8005578 <DMA_CheckFifoParam>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2240      	movs	r2, #64	@ 0x40
 8004f80:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e016      	b.n	8004fbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fab8 	bl	800550c <DMA_CalcBaseAndBitshift>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa4:	223f      	movs	r2, #63	@ 0x3f
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	f010803f 	.word	0xf010803f

08004fc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_DMA_Start_IT+0x26>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e040      	b.n	8005070 <HAL_DMA_Start_IT+0xa8>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d12f      	bne.n	8005062 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2202      	movs	r2, #2
 8005006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fa4a 	bl	80054b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005020:	223f      	movs	r2, #63	@ 0x3f
 8005022:	409a      	lsls	r2, r3
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0216 	orr.w	r2, r2, #22
 8005036:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d007      	beq.n	8005050 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0208 	orr.w	r2, r2, #8
 800504e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	e005      	b.n	800506e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800506a:	2302      	movs	r3, #2
 800506c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800506e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005084:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005086:	f7ff fb87 	bl	8004798 <HAL_GetTick>
 800508a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d008      	beq.n	80050aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2280      	movs	r2, #128	@ 0x80
 800509c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e052      	b.n	8005150 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0216 	bic.w	r2, r2, #22
 80050b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695a      	ldr	r2, [r3, #20]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d103      	bne.n	80050da <HAL_DMA_Abort+0x62>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d007      	beq.n	80050ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0208 	bic.w	r2, r2, #8
 80050e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0201 	bic.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050fa:	e013      	b.n	8005124 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050fc:	f7ff fb4c 	bl	8004798 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b05      	cmp	r3, #5
 8005108:	d90c      	bls.n	8005124 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2203      	movs	r2, #3
 8005114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e015      	b.n	8005150 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e4      	bne.n	80050fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005136:	223f      	movs	r2, #63	@ 0x3f
 8005138:	409a      	lsls	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d004      	beq.n	8005176 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2280      	movs	r2, #128	@ 0x80
 8005170:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e00c      	b.n	8005190 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2205      	movs	r2, #5
 800517a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0201 	bic.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80051a8:	4b8e      	ldr	r3, [pc, #568]	@ (80053e4 <HAL_DMA_IRQHandler+0x248>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a8e      	ldr	r2, [pc, #568]	@ (80053e8 <HAL_DMA_IRQHandler+0x24c>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	0a9b      	lsrs	r3, r3, #10
 80051b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c6:	2208      	movs	r2, #8
 80051c8:	409a      	lsls	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01a      	beq.n	8005208 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d013      	beq.n	8005208 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0204 	bic.w	r2, r2, #4
 80051ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f4:	2208      	movs	r2, #8
 80051f6:	409a      	lsls	r2, r3
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005200:	f043 0201 	orr.w	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520c:	2201      	movs	r2, #1
 800520e:	409a      	lsls	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d012      	beq.n	800523e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00b      	beq.n	800523e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800522a:	2201      	movs	r2, #1
 800522c:	409a      	lsls	r2, r3
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005236:	f043 0202 	orr.w	r2, r3, #2
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005242:	2204      	movs	r2, #4
 8005244:	409a      	lsls	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4013      	ands	r3, r2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d012      	beq.n	8005274 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00b      	beq.n	8005274 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005260:	2204      	movs	r2, #4
 8005262:	409a      	lsls	r2, r3
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526c:	f043 0204 	orr.w	r2, r3, #4
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005278:	2210      	movs	r2, #16
 800527a:	409a      	lsls	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4013      	ands	r3, r2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d043      	beq.n	800530c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b00      	cmp	r3, #0
 8005290:	d03c      	beq.n	800530c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005296:	2210      	movs	r2, #16
 8005298:	409a      	lsls	r2, r3
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d018      	beq.n	80052de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d108      	bne.n	80052cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d024      	beq.n	800530c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	4798      	blx	r3
 80052ca:	e01f      	b.n	800530c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01b      	beq.n	800530c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	4798      	blx	r3
 80052dc:	e016      	b.n	800530c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d107      	bne.n	80052fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0208 	bic.w	r2, r2, #8
 80052fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005310:	2220      	movs	r2, #32
 8005312:	409a      	lsls	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4013      	ands	r3, r2
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 808f 	beq.w	800543c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 8087 	beq.w	800543c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005332:	2220      	movs	r2, #32
 8005334:	409a      	lsls	r2, r3
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b05      	cmp	r3, #5
 8005344:	d136      	bne.n	80053b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0216 	bic.w	r2, r2, #22
 8005354:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695a      	ldr	r2, [r3, #20]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005364:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d103      	bne.n	8005376 <HAL_DMA_IRQHandler+0x1da>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0208 	bic.w	r2, r2, #8
 8005384:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800538a:	223f      	movs	r2, #63	@ 0x3f
 800538c:	409a      	lsls	r2, r3
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d07e      	beq.n	80054a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4798      	blx	r3
        }
        return;
 80053b2:	e079      	b.n	80054a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d01d      	beq.n	80053fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10d      	bne.n	80053ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d031      	beq.n	800543c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	4798      	blx	r3
 80053e0:	e02c      	b.n	800543c <HAL_DMA_IRQHandler+0x2a0>
 80053e2:	bf00      	nop
 80053e4:	20000010 	.word	0x20000010
 80053e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d023      	beq.n	800543c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
 80053fc:	e01e      	b.n	800543c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10f      	bne.n	800542c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0210 	bic.w	r2, r2, #16
 800541a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d003      	beq.n	800543c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005440:	2b00      	cmp	r3, #0
 8005442:	d032      	beq.n	80054aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d022      	beq.n	8005496 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2205      	movs	r2, #5
 8005454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0201 	bic.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	3301      	adds	r3, #1
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	429a      	cmp	r2, r3
 8005472:	d307      	bcc.n	8005484 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1f2      	bne.n	8005468 <HAL_DMA_IRQHandler+0x2cc>
 8005482:	e000      	b.n	8005486 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005484:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
 80054a6:	e000      	b.n	80054aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80054a8:	bf00      	nop
    }
  }
}
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b40      	cmp	r3, #64	@ 0x40
 80054dc:	d108      	bne.n	80054f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80054ee:	e007      	b.n	8005500 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	60da      	str	r2, [r3, #12]
}
 8005500:	bf00      	nop
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	b2db      	uxtb	r3, r3
 800551a:	3b10      	subs	r3, #16
 800551c:	4a14      	ldr	r2, [pc, #80]	@ (8005570 <DMA_CalcBaseAndBitshift+0x64>)
 800551e:	fba2 2303 	umull	r2, r3, r2, r3
 8005522:	091b      	lsrs	r3, r3, #4
 8005524:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005526:	4a13      	ldr	r2, [pc, #76]	@ (8005574 <DMA_CalcBaseAndBitshift+0x68>)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b03      	cmp	r3, #3
 8005538:	d909      	bls.n	800554e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005542:	f023 0303 	bic.w	r3, r3, #3
 8005546:	1d1a      	adds	r2, r3, #4
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	659a      	str	r2, [r3, #88]	@ 0x58
 800554c:	e007      	b.n	800555e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005556:	f023 0303 	bic.w	r3, r3, #3
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	aaaaaaab 	.word	0xaaaaaaab
 8005574:	0800f3c0 	.word	0x0800f3c0

08005578 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005588:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d11f      	bne.n	80055d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d856      	bhi.n	8005646 <DMA_CheckFifoParam+0xce>
 8005598:	a201      	add	r2, pc, #4	@ (adr r2, 80055a0 <DMA_CheckFifoParam+0x28>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055b1 	.word	0x080055b1
 80055a4:	080055c3 	.word	0x080055c3
 80055a8:	080055b1 	.word	0x080055b1
 80055ac:	08005647 	.word	0x08005647
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d046      	beq.n	800564a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c0:	e043      	b.n	800564a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80055ca:	d140      	bne.n	800564e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055d0:	e03d      	b.n	800564e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055da:	d121      	bne.n	8005620 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d837      	bhi.n	8005652 <DMA_CheckFifoParam+0xda>
 80055e2:	a201      	add	r2, pc, #4	@ (adr r2, 80055e8 <DMA_CheckFifoParam+0x70>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	080055ff 	.word	0x080055ff
 80055f0:	080055f9 	.word	0x080055f9
 80055f4:	08005611 	.word	0x08005611
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
      break;
 80055fc:	e030      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005602:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d025      	beq.n	8005656 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800560e:	e022      	b.n	8005656 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005614:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005618:	d11f      	bne.n	800565a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800561e:	e01c      	b.n	800565a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d903      	bls.n	800562e <DMA_CheckFifoParam+0xb6>
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d003      	beq.n	8005634 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800562c:	e018      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	73fb      	strb	r3, [r7, #15]
      break;
 8005632:	e015      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00e      	beq.n	800565e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
      break;
 8005644:	e00b      	b.n	800565e <DMA_CheckFifoParam+0xe6>
      break;
 8005646:	bf00      	nop
 8005648:	e00a      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
      break;
 800564a:	bf00      	nop
 800564c:	e008      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
      break;
 800564e:	bf00      	nop
 8005650:	e006      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
      break;
 8005652:	bf00      	nop
 8005654:	e004      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
      break;
 8005656:	bf00      	nop
 8005658:	e002      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
      break;   
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <DMA_CheckFifoParam+0xe8>
      break;
 800565e:	bf00      	nop
    }
  } 
  
  return status; 
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop

08005670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005670:	b480      	push	{r7}
 8005672:	b089      	sub	sp, #36	@ 0x24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800567e:	2300      	movs	r3, #0
 8005680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005682:	2300      	movs	r3, #0
 8005684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005686:	2300      	movs	r3, #0
 8005688:	61fb      	str	r3, [r7, #28]
 800568a:	e16b      	b.n	8005964 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800568c:	2201      	movs	r2, #1
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4013      	ands	r3, r2
 800569e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	f040 815a 	bne.w	800595e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d005      	beq.n	80056c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d130      	bne.n	8005724 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	005b      	lsls	r3, r3, #1
 80056cc:	2203      	movs	r2, #3
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43db      	mvns	r3, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4013      	ands	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056f8:	2201      	movs	r2, #1
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	43db      	mvns	r3, r3
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	4013      	ands	r3, r2
 8005706:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	091b      	lsrs	r3, r3, #4
 800570e:	f003 0201 	and.w	r2, r3, #1
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	69ba      	ldr	r2, [r7, #24]
 800571a:	4313      	orrs	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b03      	cmp	r3, #3
 800572e:	d017      	beq.n	8005760 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	2203      	movs	r2, #3
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	43db      	mvns	r3, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4013      	ands	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	4313      	orrs	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f003 0303 	and.w	r3, r3, #3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d123      	bne.n	80057b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	08da      	lsrs	r2, r3, #3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3208      	adds	r2, #8
 8005774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005778:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	220f      	movs	r2, #15
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	fa02 f303 	lsl.w	r3, r2, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	08da      	lsrs	r2, r3, #3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3208      	adds	r2, #8
 80057ae:	69b9      	ldr	r1, [r7, #24]
 80057b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	2203      	movs	r2, #3
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	43db      	mvns	r3, r3
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	4013      	ands	r3, r2
 80057ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f003 0203 	and.w	r2, r3, #3
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	fa02 f303 	lsl.w	r3, r2, r3
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	4313      	orrs	r3, r2
 80057e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80b4 	beq.w	800595e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057f6:	2300      	movs	r3, #0
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	4b60      	ldr	r3, [pc, #384]	@ (800597c <HAL_GPIO_Init+0x30c>)
 80057fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fe:	4a5f      	ldr	r2, [pc, #380]	@ (800597c <HAL_GPIO_Init+0x30c>)
 8005800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005804:	6453      	str	r3, [r2, #68]	@ 0x44
 8005806:	4b5d      	ldr	r3, [pc, #372]	@ (800597c <HAL_GPIO_Init+0x30c>)
 8005808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005812:	4a5b      	ldr	r2, [pc, #364]	@ (8005980 <HAL_GPIO_Init+0x310>)
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	089b      	lsrs	r3, r3, #2
 8005818:	3302      	adds	r3, #2
 800581a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800581e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	220f      	movs	r2, #15
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	43db      	mvns	r3, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4013      	ands	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a52      	ldr	r2, [pc, #328]	@ (8005984 <HAL_GPIO_Init+0x314>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d02b      	beq.n	8005896 <HAL_GPIO_Init+0x226>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a51      	ldr	r2, [pc, #324]	@ (8005988 <HAL_GPIO_Init+0x318>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d025      	beq.n	8005892 <HAL_GPIO_Init+0x222>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a50      	ldr	r2, [pc, #320]	@ (800598c <HAL_GPIO_Init+0x31c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01f      	beq.n	800588e <HAL_GPIO_Init+0x21e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a4f      	ldr	r2, [pc, #316]	@ (8005990 <HAL_GPIO_Init+0x320>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d019      	beq.n	800588a <HAL_GPIO_Init+0x21a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a4e      	ldr	r2, [pc, #312]	@ (8005994 <HAL_GPIO_Init+0x324>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <HAL_GPIO_Init+0x216>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a4d      	ldr	r2, [pc, #308]	@ (8005998 <HAL_GPIO_Init+0x328>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00d      	beq.n	8005882 <HAL_GPIO_Init+0x212>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a4c      	ldr	r2, [pc, #304]	@ (800599c <HAL_GPIO_Init+0x32c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d007      	beq.n	800587e <HAL_GPIO_Init+0x20e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a4b      	ldr	r2, [pc, #300]	@ (80059a0 <HAL_GPIO_Init+0x330>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d101      	bne.n	800587a <HAL_GPIO_Init+0x20a>
 8005876:	2307      	movs	r3, #7
 8005878:	e00e      	b.n	8005898 <HAL_GPIO_Init+0x228>
 800587a:	2308      	movs	r3, #8
 800587c:	e00c      	b.n	8005898 <HAL_GPIO_Init+0x228>
 800587e:	2306      	movs	r3, #6
 8005880:	e00a      	b.n	8005898 <HAL_GPIO_Init+0x228>
 8005882:	2305      	movs	r3, #5
 8005884:	e008      	b.n	8005898 <HAL_GPIO_Init+0x228>
 8005886:	2304      	movs	r3, #4
 8005888:	e006      	b.n	8005898 <HAL_GPIO_Init+0x228>
 800588a:	2303      	movs	r3, #3
 800588c:	e004      	b.n	8005898 <HAL_GPIO_Init+0x228>
 800588e:	2302      	movs	r3, #2
 8005890:	e002      	b.n	8005898 <HAL_GPIO_Init+0x228>
 8005892:	2301      	movs	r3, #1
 8005894:	e000      	b.n	8005898 <HAL_GPIO_Init+0x228>
 8005896:	2300      	movs	r3, #0
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	f002 0203 	and.w	r2, r2, #3
 800589e:	0092      	lsls	r2, r2, #2
 80058a0:	4093      	lsls	r3, r2
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058a8:	4935      	ldr	r1, [pc, #212]	@ (8005980 <HAL_GPIO_Init+0x310>)
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	089b      	lsrs	r3, r3, #2
 80058ae:	3302      	adds	r3, #2
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058b6:	4b3b      	ldr	r3, [pc, #236]	@ (80059a4 <HAL_GPIO_Init+0x334>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	43db      	mvns	r3, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4013      	ands	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058da:	4a32      	ldr	r2, [pc, #200]	@ (80059a4 <HAL_GPIO_Init+0x334>)
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058e0:	4b30      	ldr	r3, [pc, #192]	@ (80059a4 <HAL_GPIO_Init+0x334>)
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	43db      	mvns	r3, r3
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	4013      	ands	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005904:	4a27      	ldr	r2, [pc, #156]	@ (80059a4 <HAL_GPIO_Init+0x334>)
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800590a:	4b26      	ldr	r3, [pc, #152]	@ (80059a4 <HAL_GPIO_Init+0x334>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	43db      	mvns	r3, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4013      	ands	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800592e:	4a1d      	ldr	r2, [pc, #116]	@ (80059a4 <HAL_GPIO_Init+0x334>)
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005934:	4b1b      	ldr	r3, [pc, #108]	@ (80059a4 <HAL_GPIO_Init+0x334>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	43db      	mvns	r3, r3
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	4013      	ands	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005958:	4a12      	ldr	r2, [pc, #72]	@ (80059a4 <HAL_GPIO_Init+0x334>)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	3301      	adds	r3, #1
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	2b0f      	cmp	r3, #15
 8005968:	f67f ae90 	bls.w	800568c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800596c:	bf00      	nop
 800596e:	bf00      	nop
 8005970:	3724      	adds	r7, #36	@ 0x24
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40023800 	.word	0x40023800
 8005980:	40013800 	.word	0x40013800
 8005984:	40020000 	.word	0x40020000
 8005988:	40020400 	.word	0x40020400
 800598c:	40020800 	.word	0x40020800
 8005990:	40020c00 	.word	0x40020c00
 8005994:	40021000 	.word	0x40021000
 8005998:	40021400 	.word	0x40021400
 800599c:	40021800 	.word	0x40021800
 80059a0:	40021c00 	.word	0x40021c00
 80059a4:	40013c00 	.word	0x40013c00

080059a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	807b      	strh	r3, [r7, #2]
 80059b4:	4613      	mov	r3, r2
 80059b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80059b8:	787b      	ldrb	r3, [r7, #1]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059be:	887a      	ldrh	r2, [r7, #2]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80059c4:	e003      	b.n	80059ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059c6:	887b      	ldrh	r3, [r7, #2]
 80059c8:	041a      	lsls	r2, r3, #16
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	619a      	str	r2, [r3, #24]
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
	...

080059dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e267      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d075      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80059fa:	4b88      	ldr	r3, [pc, #544]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 030c 	and.w	r3, r3, #12
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d00c      	beq.n	8005a20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a06:	4b85      	ldr	r3, [pc, #532]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d112      	bne.n	8005a38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a12:	4b82      	ldr	r3, [pc, #520]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a1e:	d10b      	bne.n	8005a38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a20:	4b7e      	ldr	r3, [pc, #504]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d05b      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x108>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d157      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e242      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a40:	d106      	bne.n	8005a50 <HAL_RCC_OscConfig+0x74>
 8005a42:	4b76      	ldr	r3, [pc, #472]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a75      	ldr	r2, [pc, #468]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	e01d      	b.n	8005a8c <HAL_RCC_OscConfig+0xb0>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a58:	d10c      	bne.n	8005a74 <HAL_RCC_OscConfig+0x98>
 8005a5a:	4b70      	ldr	r3, [pc, #448]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a6f      	ldr	r2, [pc, #444]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	4b6d      	ldr	r3, [pc, #436]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a6c      	ldr	r2, [pc, #432]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	e00b      	b.n	8005a8c <HAL_RCC_OscConfig+0xb0>
 8005a74:	4b69      	ldr	r3, [pc, #420]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a68      	ldr	r2, [pc, #416]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a7e:	6013      	str	r3, [r2, #0]
 8005a80:	4b66      	ldr	r3, [pc, #408]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a65      	ldr	r2, [pc, #404]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d013      	beq.n	8005abc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a94:	f7fe fe80 	bl	8004798 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a9c:	f7fe fe7c 	bl	8004798 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b64      	cmp	r3, #100	@ 0x64
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e207      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aae:	4b5b      	ldr	r3, [pc, #364]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0f0      	beq.n	8005a9c <HAL_RCC_OscConfig+0xc0>
 8005aba:	e014      	b.n	8005ae6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005abc:	f7fe fe6c 	bl	8004798 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ac4:	f7fe fe68 	bl	8004798 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b64      	cmp	r3, #100	@ 0x64
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e1f3      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ad6:	4b51      	ldr	r3, [pc, #324]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f0      	bne.n	8005ac4 <HAL_RCC_OscConfig+0xe8>
 8005ae2:	e000      	b.n	8005ae6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d063      	beq.n	8005bba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005af2:	4b4a      	ldr	r3, [pc, #296]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 030c 	and.w	r3, r3, #12
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00b      	beq.n	8005b16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005afe:	4b47      	ldr	r3, [pc, #284]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d11c      	bne.n	8005b44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b0a:	4b44      	ldr	r3, [pc, #272]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d116      	bne.n	8005b44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b16:	4b41      	ldr	r3, [pc, #260]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_RCC_OscConfig+0x152>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d001      	beq.n	8005b2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e1c7      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	4937      	ldr	r1, [pc, #220]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b42:	e03a      	b.n	8005bba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d020      	beq.n	8005b8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b4c:	4b34      	ldr	r3, [pc, #208]	@ (8005c20 <HAL_RCC_OscConfig+0x244>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b52:	f7fe fe21 	bl	8004798 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b5a:	f7fe fe1d 	bl	8004798 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e1a8      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0f0      	beq.n	8005b5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b78:	4b28      	ldr	r3, [pc, #160]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	4925      	ldr	r1, [pc, #148]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	600b      	str	r3, [r1, #0]
 8005b8c:	e015      	b.n	8005bba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b8e:	4b24      	ldr	r3, [pc, #144]	@ (8005c20 <HAL_RCC_OscConfig+0x244>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b94:	f7fe fe00 	bl	8004798 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9c:	f7fe fdfc 	bl	8004798 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e187      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bae:	4b1b      	ldr	r3, [pc, #108]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f0      	bne.n	8005b9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d036      	beq.n	8005c34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d016      	beq.n	8005bfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bce:	4b15      	ldr	r3, [pc, #84]	@ (8005c24 <HAL_RCC_OscConfig+0x248>)
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd4:	f7fe fde0 	bl	8004798 <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bdc:	f7fe fddc 	bl	8004798 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e167      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bee:	4b0b      	ldr	r3, [pc, #44]	@ (8005c1c <HAL_RCC_OscConfig+0x240>)
 8005bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f0      	beq.n	8005bdc <HAL_RCC_OscConfig+0x200>
 8005bfa:	e01b      	b.n	8005c34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bfc:	4b09      	ldr	r3, [pc, #36]	@ (8005c24 <HAL_RCC_OscConfig+0x248>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c02:	f7fe fdc9 	bl	8004798 <HAL_GetTick>
 8005c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c08:	e00e      	b.n	8005c28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c0a:	f7fe fdc5 	bl	8004798 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	d907      	bls.n	8005c28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e150      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	42470000 	.word	0x42470000
 8005c24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c28:	4b88      	ldr	r3, [pc, #544]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1ea      	bne.n	8005c0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0304 	and.w	r3, r3, #4
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 8097 	beq.w	8005d70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c42:	2300      	movs	r3, #0
 8005c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c46:	4b81      	ldr	r3, [pc, #516]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10f      	bne.n	8005c72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c52:	2300      	movs	r3, #0
 8005c54:	60bb      	str	r3, [r7, #8]
 8005c56:	4b7d      	ldr	r3, [pc, #500]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	4a7c      	ldr	r2, [pc, #496]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c62:	4b7a      	ldr	r3, [pc, #488]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c6a:	60bb      	str	r3, [r7, #8]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c72:	4b77      	ldr	r3, [pc, #476]	@ (8005e50 <HAL_RCC_OscConfig+0x474>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d118      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c7e:	4b74      	ldr	r3, [pc, #464]	@ (8005e50 <HAL_RCC_OscConfig+0x474>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a73      	ldr	r2, [pc, #460]	@ (8005e50 <HAL_RCC_OscConfig+0x474>)
 8005c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c8a:	f7fe fd85 	bl	8004798 <HAL_GetTick>
 8005c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c90:	e008      	b.n	8005ca4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c92:	f7fe fd81 	bl	8004798 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d901      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e10c      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8005e50 <HAL_RCC_OscConfig+0x474>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d0f0      	beq.n	8005c92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d106      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x2ea>
 8005cb8:	4b64      	ldr	r3, [pc, #400]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cbc:	4a63      	ldr	r2, [pc, #396]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005cbe:	f043 0301 	orr.w	r3, r3, #1
 8005cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cc4:	e01c      	b.n	8005d00 <HAL_RCC_OscConfig+0x324>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b05      	cmp	r3, #5
 8005ccc:	d10c      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x30c>
 8005cce:	4b5f      	ldr	r3, [pc, #380]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd2:	4a5e      	ldr	r2, [pc, #376]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005cd4:	f043 0304 	orr.w	r3, r3, #4
 8005cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cda:	4b5c      	ldr	r3, [pc, #368]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cde:	4a5b      	ldr	r2, [pc, #364]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ce6:	e00b      	b.n	8005d00 <HAL_RCC_OscConfig+0x324>
 8005ce8:	4b58      	ldr	r3, [pc, #352]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cec:	4a57      	ldr	r2, [pc, #348]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005cee:	f023 0301 	bic.w	r3, r3, #1
 8005cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cf4:	4b55      	ldr	r3, [pc, #340]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf8:	4a54      	ldr	r2, [pc, #336]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005cfa:	f023 0304 	bic.w	r3, r3, #4
 8005cfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d015      	beq.n	8005d34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d08:	f7fe fd46 	bl	8004798 <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d0e:	e00a      	b.n	8005d26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d10:	f7fe fd42 	bl	8004798 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e0cb      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d26:	4b49      	ldr	r3, [pc, #292]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0ee      	beq.n	8005d10 <HAL_RCC_OscConfig+0x334>
 8005d32:	e014      	b.n	8005d5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d34:	f7fe fd30 	bl	8004798 <HAL_GetTick>
 8005d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d3a:	e00a      	b.n	8005d52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d3c:	f7fe fd2c 	bl	8004798 <HAL_GetTick>
 8005d40:	4602      	mov	r2, r0
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e0b5      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d52:	4b3e      	ldr	r3, [pc, #248]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1ee      	bne.n	8005d3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d105      	bne.n	8005d70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d64:	4b39      	ldr	r3, [pc, #228]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d68:	4a38      	ldr	r2, [pc, #224]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005d6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 80a1 	beq.w	8005ebc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d7a:	4b34      	ldr	r3, [pc, #208]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 030c 	and.w	r3, r3, #12
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	d05c      	beq.n	8005e40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d141      	bne.n	8005e12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d8e:	4b31      	ldr	r3, [pc, #196]	@ (8005e54 <HAL_RCC_OscConfig+0x478>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d94:	f7fe fd00 	bl	8004798 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d9c:	f7fe fcfc 	bl	8004798 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e087      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dae:	4b27      	ldr	r3, [pc, #156]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69da      	ldr	r2, [r3, #28]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc8:	019b      	lsls	r3, r3, #6
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd0:	085b      	lsrs	r3, r3, #1
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	041b      	lsls	r3, r3, #16
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ddc:	061b      	lsls	r3, r3, #24
 8005dde:	491b      	ldr	r1, [pc, #108]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005de4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e54 <HAL_RCC_OscConfig+0x478>)
 8005de6:	2201      	movs	r2, #1
 8005de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dea:	f7fe fcd5 	bl	8004798 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005df2:	f7fe fcd1 	bl	8004798 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e05c      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e04:	4b11      	ldr	r3, [pc, #68]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0f0      	beq.n	8005df2 <HAL_RCC_OscConfig+0x416>
 8005e10:	e054      	b.n	8005ebc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e12:	4b10      	ldr	r3, [pc, #64]	@ (8005e54 <HAL_RCC_OscConfig+0x478>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e18:	f7fe fcbe 	bl	8004798 <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e20:	f7fe fcba 	bl	8004798 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e045      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e32:	4b06      	ldr	r3, [pc, #24]	@ (8005e4c <HAL_RCC_OscConfig+0x470>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1f0      	bne.n	8005e20 <HAL_RCC_OscConfig+0x444>
 8005e3e:	e03d      	b.n	8005ebc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d107      	bne.n	8005e58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e038      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	40007000 	.word	0x40007000
 8005e54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e58:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec8 <HAL_RCC_OscConfig+0x4ec>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d028      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d121      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d11a      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e88:	4013      	ands	r3, r2
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d111      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9e:	085b      	lsrs	r3, r3, #1
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d107      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d001      	beq.n	8005ebc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	40023800 	.word	0x40023800

08005ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e0cc      	b.n	800607a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ee0:	4b68      	ldr	r3, [pc, #416]	@ (8006084 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d90c      	bls.n	8005f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eee:	4b65      	ldr	r3, [pc, #404]	@ (8006084 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ef6:	4b63      	ldr	r3, [pc, #396]	@ (8006084 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d001      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0b8      	b.n	800607a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d020      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f20:	4b59      	ldr	r3, [pc, #356]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	4a58      	ldr	r2, [pc, #352]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f38:	4b53      	ldr	r3, [pc, #332]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	4a52      	ldr	r2, [pc, #328]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f44:	4b50      	ldr	r3, [pc, #320]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	494d      	ldr	r1, [pc, #308]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d044      	beq.n	8005fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d107      	bne.n	8005f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f6a:	4b47      	ldr	r3, [pc, #284]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d119      	bne.n	8005faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e07f      	b.n	800607a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d003      	beq.n	8005f8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d107      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f8a:	4b3f      	ldr	r3, [pc, #252]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e06f      	b.n	800607a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e067      	b.n	800607a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005faa:	4b37      	ldr	r3, [pc, #220]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f023 0203 	bic.w	r2, r3, #3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	4934      	ldr	r1, [pc, #208]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fbc:	f7fe fbec 	bl	8004798 <HAL_GetTick>
 8005fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc2:	e00a      	b.n	8005fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fc4:	f7fe fbe8 	bl	8004798 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e04f      	b.n	800607a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fda:	4b2b      	ldr	r3, [pc, #172]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 020c 	and.w	r2, r3, #12
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d1eb      	bne.n	8005fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fec:	4b25      	ldr	r3, [pc, #148]	@ (8006084 <HAL_RCC_ClockConfig+0x1b8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0307 	and.w	r3, r3, #7
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d20c      	bcs.n	8006014 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ffa:	4b22      	ldr	r3, [pc, #136]	@ (8006084 <HAL_RCC_ClockConfig+0x1b8>)
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006002:	4b20      	ldr	r3, [pc, #128]	@ (8006084 <HAL_RCC_ClockConfig+0x1b8>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d001      	beq.n	8006014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e032      	b.n	800607a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d008      	beq.n	8006032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006020:	4b19      	ldr	r3, [pc, #100]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	4916      	ldr	r1, [pc, #88]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 800602e:	4313      	orrs	r3, r2
 8006030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800603e:	4b12      	ldr	r3, [pc, #72]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	490e      	ldr	r1, [pc, #56]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	4313      	orrs	r3, r2
 8006050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006052:	f000 f821 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8006056:	4602      	mov	r2, r0
 8006058:	4b0b      	ldr	r3, [pc, #44]	@ (8006088 <HAL_RCC_ClockConfig+0x1bc>)
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	091b      	lsrs	r3, r3, #4
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	490a      	ldr	r1, [pc, #40]	@ (800608c <HAL_RCC_ClockConfig+0x1c0>)
 8006064:	5ccb      	ldrb	r3, [r1, r3]
 8006066:	fa22 f303 	lsr.w	r3, r2, r3
 800606a:	4a09      	ldr	r2, [pc, #36]	@ (8006090 <HAL_RCC_ClockConfig+0x1c4>)
 800606c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800606e:	4b09      	ldr	r3, [pc, #36]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe fb4c 	bl	8004710 <HAL_InitTick>

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	40023c00 	.word	0x40023c00
 8006088:	40023800 	.word	0x40023800
 800608c:	0800f3a8 	.word	0x0800f3a8
 8006090:	20000010 	.word	0x20000010
 8006094:	20000014 	.word	0x20000014

08006098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800609c:	b094      	sub	sp, #80	@ 0x50
 800609e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060b0:	4b79      	ldr	r3, [pc, #484]	@ (8006298 <HAL_RCC_GetSysClockFreq+0x200>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 030c 	and.w	r3, r3, #12
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d00d      	beq.n	80060d8 <HAL_RCC_GetSysClockFreq+0x40>
 80060bc:	2b08      	cmp	r3, #8
 80060be:	f200 80e1 	bhi.w	8006284 <HAL_RCC_GetSysClockFreq+0x1ec>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_RCC_GetSysClockFreq+0x34>
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d003      	beq.n	80060d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80060ca:	e0db      	b.n	8006284 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060cc:	4b73      	ldr	r3, [pc, #460]	@ (800629c <HAL_RCC_GetSysClockFreq+0x204>)
 80060ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060d0:	e0db      	b.n	800628a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060d2:	4b73      	ldr	r3, [pc, #460]	@ (80062a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80060d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80060d6:	e0d8      	b.n	800628a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060d8:	4b6f      	ldr	r3, [pc, #444]	@ (8006298 <HAL_RCC_GetSysClockFreq+0x200>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060e2:	4b6d      	ldr	r3, [pc, #436]	@ (8006298 <HAL_RCC_GetSysClockFreq+0x200>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d063      	beq.n	80061b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ee:	4b6a      	ldr	r3, [pc, #424]	@ (8006298 <HAL_RCC_GetSysClockFreq+0x200>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	099b      	lsrs	r3, r3, #6
 80060f4:	2200      	movs	r2, #0
 80060f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80060fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006100:	633b      	str	r3, [r7, #48]	@ 0x30
 8006102:	2300      	movs	r3, #0
 8006104:	637b      	str	r3, [r7, #52]	@ 0x34
 8006106:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800610a:	4622      	mov	r2, r4
 800610c:	462b      	mov	r3, r5
 800610e:	f04f 0000 	mov.w	r0, #0
 8006112:	f04f 0100 	mov.w	r1, #0
 8006116:	0159      	lsls	r1, r3, #5
 8006118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800611c:	0150      	lsls	r0, r2, #5
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	4621      	mov	r1, r4
 8006124:	1a51      	subs	r1, r2, r1
 8006126:	6139      	str	r1, [r7, #16]
 8006128:	4629      	mov	r1, r5
 800612a:	eb63 0301 	sbc.w	r3, r3, r1
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800613c:	4659      	mov	r1, fp
 800613e:	018b      	lsls	r3, r1, #6
 8006140:	4651      	mov	r1, sl
 8006142:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006146:	4651      	mov	r1, sl
 8006148:	018a      	lsls	r2, r1, #6
 800614a:	4651      	mov	r1, sl
 800614c:	ebb2 0801 	subs.w	r8, r2, r1
 8006150:	4659      	mov	r1, fp
 8006152:	eb63 0901 	sbc.w	r9, r3, r1
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800616a:	4690      	mov	r8, r2
 800616c:	4699      	mov	r9, r3
 800616e:	4623      	mov	r3, r4
 8006170:	eb18 0303 	adds.w	r3, r8, r3
 8006174:	60bb      	str	r3, [r7, #8]
 8006176:	462b      	mov	r3, r5
 8006178:	eb49 0303 	adc.w	r3, r9, r3
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	f04f 0200 	mov.w	r2, #0
 8006182:	f04f 0300 	mov.w	r3, #0
 8006186:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800618a:	4629      	mov	r1, r5
 800618c:	024b      	lsls	r3, r1, #9
 800618e:	4621      	mov	r1, r4
 8006190:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006194:	4621      	mov	r1, r4
 8006196:	024a      	lsls	r2, r1, #9
 8006198:	4610      	mov	r0, r2
 800619a:	4619      	mov	r1, r3
 800619c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800619e:	2200      	movs	r2, #0
 80061a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061a8:	f7fa f816 	bl	80001d8 <__aeabi_uldivmod>
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4613      	mov	r3, r2
 80061b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061b4:	e058      	b.n	8006268 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061b6:	4b38      	ldr	r3, [pc, #224]	@ (8006298 <HAL_RCC_GetSysClockFreq+0x200>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	099b      	lsrs	r3, r3, #6
 80061bc:	2200      	movs	r2, #0
 80061be:	4618      	mov	r0, r3
 80061c0:	4611      	mov	r1, r2
 80061c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061c6:	623b      	str	r3, [r7, #32]
 80061c8:	2300      	movs	r3, #0
 80061ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80061cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	f04f 0000 	mov.w	r0, #0
 80061d8:	f04f 0100 	mov.w	r1, #0
 80061dc:	0159      	lsls	r1, r3, #5
 80061de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061e2:	0150      	lsls	r0, r2, #5
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4641      	mov	r1, r8
 80061ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80061ee:	4649      	mov	r1, r9
 80061f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006200:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006204:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006208:	ebb2 040a 	subs.w	r4, r2, sl
 800620c:	eb63 050b 	sbc.w	r5, r3, fp
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	00eb      	lsls	r3, r5, #3
 800621a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800621e:	00e2      	lsls	r2, r4, #3
 8006220:	4614      	mov	r4, r2
 8006222:	461d      	mov	r5, r3
 8006224:	4643      	mov	r3, r8
 8006226:	18e3      	adds	r3, r4, r3
 8006228:	603b      	str	r3, [r7, #0]
 800622a:	464b      	mov	r3, r9
 800622c:	eb45 0303 	adc.w	r3, r5, r3
 8006230:	607b      	str	r3, [r7, #4]
 8006232:	f04f 0200 	mov.w	r2, #0
 8006236:	f04f 0300 	mov.w	r3, #0
 800623a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800623e:	4629      	mov	r1, r5
 8006240:	028b      	lsls	r3, r1, #10
 8006242:	4621      	mov	r1, r4
 8006244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006248:	4621      	mov	r1, r4
 800624a:	028a      	lsls	r2, r1, #10
 800624c:	4610      	mov	r0, r2
 800624e:	4619      	mov	r1, r3
 8006250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006252:	2200      	movs	r2, #0
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	61fa      	str	r2, [r7, #28]
 8006258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800625c:	f7f9 ffbc 	bl	80001d8 <__aeabi_uldivmod>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4613      	mov	r3, r2
 8006266:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006268:	4b0b      	ldr	r3, [pc, #44]	@ (8006298 <HAL_RCC_GetSysClockFreq+0x200>)
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	0c1b      	lsrs	r3, r3, #16
 800626e:	f003 0303 	and.w	r3, r3, #3
 8006272:	3301      	adds	r3, #1
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006278:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800627a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800627c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006280:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006282:	e002      	b.n	800628a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006284:	4b05      	ldr	r3, [pc, #20]	@ (800629c <HAL_RCC_GetSysClockFreq+0x204>)
 8006286:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800628a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800628c:	4618      	mov	r0, r3
 800628e:	3750      	adds	r7, #80	@ 0x50
 8006290:	46bd      	mov	sp, r7
 8006292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006296:	bf00      	nop
 8006298:	40023800 	.word	0x40023800
 800629c:	00f42400 	.word	0x00f42400
 80062a0:	007a1200 	.word	0x007a1200

080062a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062a8:	4b03      	ldr	r3, [pc, #12]	@ (80062b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80062aa:	681b      	ldr	r3, [r3, #0]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	20000010 	.word	0x20000010

080062bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062c0:	f7ff fff0 	bl	80062a4 <HAL_RCC_GetHCLKFreq>
 80062c4:	4602      	mov	r2, r0
 80062c6:	4b05      	ldr	r3, [pc, #20]	@ (80062dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	0a9b      	lsrs	r3, r3, #10
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	4903      	ldr	r1, [pc, #12]	@ (80062e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062d2:	5ccb      	ldrb	r3, [r1, r3]
 80062d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062d8:	4618      	mov	r0, r3
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40023800 	.word	0x40023800
 80062e0:	0800f3b8 	.word	0x0800f3b8

080062e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062e8:	f7ff ffdc 	bl	80062a4 <HAL_RCC_GetHCLKFreq>
 80062ec:	4602      	mov	r2, r0
 80062ee:	4b05      	ldr	r3, [pc, #20]	@ (8006304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	0b5b      	lsrs	r3, r3, #13
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	4903      	ldr	r1, [pc, #12]	@ (8006308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062fa:	5ccb      	ldrb	r3, [r1, r3]
 80062fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006300:	4618      	mov	r0, r3
 8006302:	bd80      	pop	{r7, pc}
 8006304:	40023800 	.word	0x40023800
 8006308:	0800f3b8 	.word	0x0800f3b8

0800630c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e022      	b.n	8006364 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d105      	bne.n	8006336 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7fd fee3 	bl	80040fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2203      	movs	r2, #3
 800633a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f814 	bl	800636c <HAL_SD_InitCard>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e00a      	b.n	8006364 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800636c:	b5b0      	push	{r4, r5, r7, lr}
 800636e:	b08e      	sub	sp, #56	@ 0x38
 8006370:	af04      	add	r7, sp, #16
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006374:	2300      	movs	r3, #0
 8006376:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800637c:	2300      	movs	r3, #0
 800637e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006380:	2300      	movs	r3, #0
 8006382:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006384:	2300      	movs	r3, #0
 8006386:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006388:	2376      	movs	r3, #118	@ 0x76
 800638a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681d      	ldr	r5, [r3, #0]
 8006390:	466c      	mov	r4, sp
 8006392:	f107 0314 	add.w	r3, r7, #20
 8006396:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800639a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800639e:	f107 0308 	add.w	r3, r7, #8
 80063a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063a4:	4628      	mov	r0, r5
 80063a6:	f004 f8df 	bl	800a568 <SDIO_Init>
 80063aa:	4603      	mov	r3, r0
 80063ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80063b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e04f      	b.n	800645c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80063bc:	4b29      	ldr	r3, [pc, #164]	@ (8006464 <HAL_SD_InitCard+0xf8>)
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f004 f917 	bl	800a5fa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80063cc:	4b25      	ldr	r3, [pc, #148]	@ (8006464 <HAL_SD_InitCard+0xf8>)
 80063ce:	2201      	movs	r2, #1
 80063d0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80063d2:	2002      	movs	r0, #2
 80063d4:	f7fe f9ec 	bl	80047b0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fe79 	bl	80070d0 <SD_PowerON>
 80063de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00b      	beq.n	80063fe <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	431a      	orrs	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e02e      	b.n	800645c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fd98 	bl	8006f34 <SD_InitCard>
 8006404:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00b      	beq.n	8006424 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e01b      	b.n	800645c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800642c:	4618      	mov	r0, r3
 800642e:	f004 f976 	bl	800a71e <SDMMC_CmdBlockLength>
 8006432:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00f      	beq.n	800645a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a0a      	ldr	r2, [pc, #40]	@ (8006468 <HAL_SD_InitCard+0xfc>)
 8006440:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	431a      	orrs	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e000      	b.n	800645c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3728      	adds	r7, #40	@ 0x28
 8006460:	46bd      	mov	sp, r7
 8006462:	bdb0      	pop	{r4, r5, r7, pc}
 8006464:	422580a0 	.word	0x422580a0
 8006468:	004005ff 	.word	0x004005ff

0800646c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b092      	sub	sp, #72	@ 0x48
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800647a:	f7fe f98d 	bl	8004798 <HAL_GetTick>
 800647e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d107      	bne.n	800649e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006492:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e1c5      	b.n	800682a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	f040 81b8 	bne.w	800681c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80064b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	441a      	add	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064bc:	429a      	cmp	r2, r3
 80064be:	d907      	bls.n	80064d0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e1ac      	b.n	800682a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2203      	movs	r2, #3
 80064d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2200      	movs	r2, #0
 80064de:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d002      	beq.n	80064ee <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80064e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ea:	025b      	lsls	r3, r3, #9
 80064ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80064ee:	f04f 33ff 	mov.w	r3, #4294967295
 80064f2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	025b      	lsls	r3, r3, #9
 80064f8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80064fa:	2390      	movs	r3, #144	@ 0x90
 80064fc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80064fe:	2302      	movs	r3, #2
 8006500:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006502:	2300      	movs	r3, #0
 8006504:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8006506:	2301      	movs	r3, #1
 8006508:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f107 0214 	add.w	r2, r7, #20
 8006512:	4611      	mov	r1, r2
 8006514:	4618      	mov	r0, r3
 8006516:	f004 f8d6 	bl	800a6c6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d90a      	bls.n	8006536 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2202      	movs	r2, #2
 8006524:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800652c:	4618      	mov	r0, r3
 800652e:	f004 f93a 	bl	800a7a6 <SDMMC_CmdReadMultiBlock>
 8006532:	6478      	str	r0, [r7, #68]	@ 0x44
 8006534:	e009      	b.n	800654a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2201      	movs	r2, #1
 800653a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006542:	4618      	mov	r0, r3
 8006544:	f004 f90d 	bl	800a762 <SDMMC_CmdReadSingleBlock>
 8006548:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800654a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800654c:	2b00      	cmp	r3, #0
 800654e:	d012      	beq.n	8006576 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a7e      	ldr	r2, [pc, #504]	@ (8006750 <HAL_SD_ReadBlocks+0x2e4>)
 8006556:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800655c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800655e:	431a      	orrs	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e159      	b.n	800682a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800657a:	e061      	b.n	8006640 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006582:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d03c      	beq.n	8006604 <HAL_SD_ReadBlocks+0x198>
 800658a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800658c:	2b00      	cmp	r3, #0
 800658e:	d039      	beq.n	8006604 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006590:	2300      	movs	r3, #0
 8006592:	643b      	str	r3, [r7, #64]	@ 0x40
 8006594:	e033      	b.n	80065fe <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f004 f80f 	bl	800a5be <SDIO_ReadFIFO>
 80065a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80065a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80065aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ac:	3301      	adds	r3, #1
 80065ae:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80065b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b2:	3b01      	subs	r3, #1
 80065b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80065b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b8:	0a1b      	lsrs	r3, r3, #8
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065be:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80065c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065c2:	3301      	adds	r3, #1
 80065c4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80065c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065c8:	3b01      	subs	r3, #1
 80065ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80065cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ce:	0c1b      	lsrs	r3, r3, #16
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80065d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d8:	3301      	adds	r3, #1
 80065da:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80065dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065de:	3b01      	subs	r3, #1
 80065e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80065e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e4:	0e1b      	lsrs	r3, r3, #24
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ea:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80065ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ee:	3301      	adds	r3, #1
 80065f0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80065f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f4:	3b01      	subs	r3, #1
 80065f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80065f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065fa:	3301      	adds	r3, #1
 80065fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80065fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006600:	2b07      	cmp	r3, #7
 8006602:	d9c8      	bls.n	8006596 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006604:	f7fe f8c8 	bl	8004798 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006610:	429a      	cmp	r2, r3
 8006612:	d902      	bls.n	800661a <HAL_SD_ReadBlocks+0x1ae>
 8006614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006616:	2b00      	cmp	r3, #0
 8006618:	d112      	bne.n	8006640 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a4c      	ldr	r2, [pc, #304]	@ (8006750 <HAL_SD_ReadBlocks+0x2e4>)
 8006620:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e0f4      	b.n	800682a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006646:	f240 332a 	movw	r3, #810	@ 0x32a
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d095      	beq.n	800657c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800665a:	2b00      	cmp	r3, #0
 800665c:	d022      	beq.n	80066a4 <HAL_SD_ReadBlocks+0x238>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d91f      	bls.n	80066a4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006668:	2b03      	cmp	r3, #3
 800666a:	d01b      	beq.n	80066a4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f004 f8ff 	bl	800a874 <SDMMC_CmdStopTransfer>
 8006676:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800667a:	2b00      	cmp	r3, #0
 800667c:	d012      	beq.n	80066a4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a33      	ldr	r2, [pc, #204]	@ (8006750 <HAL_SD_ReadBlocks+0x2e4>)
 8006684:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800668a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800668c:	431a      	orrs	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e0c2      	b.n	800682a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066aa:	f003 0308 	and.w	r3, r3, #8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <HAL_SD_ReadBlocks+0x254>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d012      	beq.n	80066e6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a22      	ldr	r2, [pc, #136]	@ (8006750 <HAL_SD_ReadBlocks+0x2e4>)
 80066c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066cc:	f043 0208 	orr.w	r2, r3, #8
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e0a1      	b.n	800682a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d012      	beq.n	800671a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a15      	ldr	r2, [pc, #84]	@ (8006750 <HAL_SD_ReadBlocks+0x2e4>)
 80066fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006700:	f043 0202 	orr.w	r2, r3, #2
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e087      	b.n	800682a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006720:	f003 0320 	and.w	r3, r3, #32
 8006724:	2b00      	cmp	r3, #0
 8006726:	d064      	beq.n	80067f2 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a08      	ldr	r2, [pc, #32]	@ (8006750 <HAL_SD_ReadBlocks+0x2e4>)
 800672e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006734:	f043 0220 	orr.w	r2, r3, #32
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e06d      	b.n	800682a <HAL_SD_ReadBlocks+0x3be>
 800674e:	bf00      	nop
 8006750:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	f003 ff30 	bl	800a5be <SDIO_ReadFIFO>
 800675e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006762:	b2da      	uxtb	r2, r3
 8006764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006766:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800676a:	3301      	adds	r3, #1
 800676c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800676e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006770:	3b01      	subs	r3, #1
 8006772:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006776:	0a1b      	lsrs	r3, r3, #8
 8006778:	b2da      	uxtb	r2, r3
 800677a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800677e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006780:	3301      	adds	r3, #1
 8006782:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8006784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006786:	3b01      	subs	r3, #1
 8006788:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800678a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678c:	0c1b      	lsrs	r3, r3, #16
 800678e:	b2da      	uxtb	r2, r3
 8006790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006792:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8006794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006796:	3301      	adds	r3, #1
 8006798:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800679a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800679c:	3b01      	subs	r3, #1
 800679e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80067a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a2:	0e1b      	lsrs	r3, r3, #24
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80067aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ac:	3301      	adds	r3, #1
 80067ae:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80067b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067b2:	3b01      	subs	r3, #1
 80067b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80067b6:	f7fd ffef 	bl	8004798 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d902      	bls.n	80067cc <HAL_SD_ReadBlocks+0x360>
 80067c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d112      	bne.n	80067f2 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a18      	ldr	r2, [pc, #96]	@ (8006834 <HAL_SD_ReadBlocks+0x3c8>)
 80067d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e01b      	b.n	800682a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <HAL_SD_ReadBlocks+0x39a>
 8006800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1a6      	bne.n	8006754 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800680e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	e006      	b.n	800682a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006820:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
  }
}
 800682a:	4618      	mov	r0, r3
 800682c:	3748      	adds	r7, #72	@ 0x48
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	004005ff 	.word	0x004005ff

08006838 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b092      	sub	sp, #72	@ 0x48
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006846:	f7fd ffa7 	bl	8004798 <HAL_GetTick>
 800684a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d107      	bne.n	800686a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e16d      	b.n	8006b46 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b01      	cmp	r3, #1
 8006874:	f040 8160 	bne.w	8006b38 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800687e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	441a      	add	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006888:	429a      	cmp	r2, r3
 800688a:	d907      	bls.n	800689c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006890:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e154      	b.n	8006b46 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2203      	movs	r2, #3
 80068a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2200      	movs	r2, #0
 80068aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d002      	beq.n	80068ba <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80068b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b6:	025b      	lsls	r3, r3, #9
 80068b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80068ba:	f04f 33ff 	mov.w	r3, #4294967295
 80068be:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	025b      	lsls	r3, r3, #9
 80068c4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80068c6:	2390      	movs	r3, #144	@ 0x90
 80068c8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80068ca:	2300      	movs	r3, #0
 80068cc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80068d2:	2301      	movs	r3, #1
 80068d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f107 0218 	add.w	r2, r7, #24
 80068de:	4611      	mov	r1, r2
 80068e0:	4618      	mov	r0, r3
 80068e2:	f003 fef0 	bl	800a6c6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d90a      	bls.n	8006902 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068f8:	4618      	mov	r0, r3
 80068fa:	f003 ff98 	bl	800a82e <SDMMC_CmdWriteMultiBlock>
 80068fe:	6478      	str	r0, [r7, #68]	@ 0x44
 8006900:	e009      	b.n	8006916 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2210      	movs	r2, #16
 8006906:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800690e:	4618      	mov	r0, r3
 8006910:	f003 ff6b 	bl	800a7ea <SDMMC_CmdWriteSingleBlock>
 8006914:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006918:	2b00      	cmp	r3, #0
 800691a:	d012      	beq.n	8006942 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a8b      	ldr	r2, [pc, #556]	@ (8006b50 <HAL_SD_WriteBlocks+0x318>)
 8006922:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800692a:	431a      	orrs	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e101      	b.n	8006b46 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006946:	e065      	b.n	8006a14 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800694e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d040      	beq.n	80069d8 <HAL_SD_WriteBlocks+0x1a0>
 8006956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d03d      	beq.n	80069d8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800695c:	2300      	movs	r3, #0
 800695e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006960:	e037      	b.n	80069d2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8006962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800696a:	3301      	adds	r3, #1
 800696c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800696e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006970:	3b01      	subs	r3, #1
 8006972:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	021a      	lsls	r2, r3, #8
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	4313      	orrs	r3, r2
 800697e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006982:	3301      	adds	r3, #1
 8006984:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006988:	3b01      	subs	r3, #1
 800698a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800698c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	041a      	lsls	r2, r3, #16
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	4313      	orrs	r3, r2
 8006996:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800699a:	3301      	adds	r3, #1
 800699c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800699e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a0:	3b01      	subs	r3, #1
 80069a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80069a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	061a      	lsls	r2, r3, #24
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80069b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b2:	3301      	adds	r3, #1
 80069b4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80069b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b8:	3b01      	subs	r3, #1
 80069ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f107 0214 	add.w	r2, r7, #20
 80069c4:	4611      	mov	r1, r2
 80069c6:	4618      	mov	r0, r3
 80069c8:	f003 fe06 	bl	800a5d8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80069cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069ce:	3301      	adds	r3, #1
 80069d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80069d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069d4:	2b07      	cmp	r3, #7
 80069d6:	d9c4      	bls.n	8006962 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80069d8:	f7fd fede 	bl	8004798 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d902      	bls.n	80069ee <HAL_SD_WriteBlocks+0x1b6>
 80069e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d112      	bne.n	8006a14 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a57      	ldr	r2, [pc, #348]	@ (8006b50 <HAL_SD_WriteBlocks+0x318>)
 80069f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069fc:	431a      	orrs	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e098      	b.n	8006b46 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a1a:	f240 331a 	movw	r3, #794	@ 0x31a
 8006a1e:	4013      	ands	r3, r2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d091      	beq.n	8006948 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d022      	beq.n	8006a78 <HAL_SD_WriteBlocks+0x240>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d91f      	bls.n	8006a78 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d01b      	beq.n	8006a78 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f003 ff15 	bl	800a874 <SDMMC_CmdStopTransfer>
 8006a4a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d012      	beq.n	8006a78 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a3e      	ldr	r2, [pc, #248]	@ (8006b50 <HAL_SD_WriteBlocks+0x318>)
 8006a58:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a60:	431a      	orrs	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e066      	b.n	8006b46 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_SD_WriteBlocks+0x25c>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d012      	beq.n	8006aba <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a2d      	ldr	r2, [pc, #180]	@ (8006b50 <HAL_SD_WriteBlocks+0x318>)
 8006a9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa0:	f043 0208 	orr.w	r2, r3, #8
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e045      	b.n	8006b46 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d012      	beq.n	8006aee <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a20      	ldr	r2, [pc, #128]	@ (8006b50 <HAL_SD_WriteBlocks+0x318>)
 8006ace:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad4:	f043 0202 	orr.w	r2, r3, #2
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e02b      	b.n	8006b46 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006af4:	f003 0310 	and.w	r3, r3, #16
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d012      	beq.n	8006b22 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a13      	ldr	r2, [pc, #76]	@ (8006b50 <HAL_SD_WriteBlocks+0x318>)
 8006b02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b08:	f043 0210 	orr.w	r2, r3, #16
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e011      	b.n	8006b46 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006b2a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	e006      	b.n	8006b46 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
  }
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3748      	adds	r7, #72	@ 0x48
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	004005ff 	.word	0x004005ff

08006b54 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b62:	0f9b      	lsrs	r3, r3, #30
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b6e:	0e9b      	lsrs	r3, r3, #26
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b80:	0e1b      	lsrs	r3, r3, #24
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f003 0303 	and.w	r3, r3, #3
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b92:	0c1b      	lsrs	r3, r3, #16
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b9e:	0a1b      	lsrs	r3, r3, #8
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bb4:	0d1b      	lsrs	r3, r3, #20
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bc0:	0c1b      	lsrs	r3, r3, #16
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	f003 030f 	and.w	r3, r3, #15
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bd2:	0bdb      	lsrs	r3, r3, #15
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006be4:	0b9b      	lsrs	r3, r3, #14
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bf6:	0b5b      	lsrs	r3, r3, #13
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c08:	0b1b      	lsrs	r3, r3, #12
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d163      	bne.n	8006cec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c28:	009a      	lsls	r2, r3, #2
 8006c2a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006c2e:	4013      	ands	r3, r2
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006c34:	0f92      	lsrs	r2, r2, #30
 8006c36:	431a      	orrs	r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c40:	0edb      	lsrs	r3, r3, #27
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f003 0307 	and.w	r3, r3, #7
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c52:	0e1b      	lsrs	r3, r3, #24
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c64:	0d5b      	lsrs	r3, r3, #21
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c76:	0c9b      	lsrs	r3, r3, #18
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c88:	0bdb      	lsrs	r3, r3, #15
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	7e1b      	ldrb	r3, [r3, #24]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	3302      	adds	r3, #2
 8006cac:	2201      	movs	r2, #1
 8006cae:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006cb6:	fb03 f202 	mul.w	r2, r3, r2
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	7a1b      	ldrb	r3, [r3, #8]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	f003 030f 	and.w	r3, r3, #15
 8006cc8:	2201      	movs	r2, #1
 8006cca:	409a      	lsls	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006cd8:	0a52      	lsrs	r2, r2, #9
 8006cda:	fb03 f202 	mul.w	r2, r3, r2
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ce8:	661a      	str	r2, [r3, #96]	@ 0x60
 8006cea:	e031      	b.n	8006d50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d11d      	bne.n	8006d30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cf8:	041b      	lsls	r3, r3, #16
 8006cfa:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d02:	0c1b      	lsrs	r3, r3, #16
 8006d04:	431a      	orrs	r2, r3
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	029a      	lsls	r2, r3, #10
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d24:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	661a      	str	r2, [r3, #96]	@ 0x60
 8006d2e:	e00f      	b.n	8006d50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a58      	ldr	r2, [pc, #352]	@ (8006e98 <HAL_SD_GetCardCSD+0x344>)
 8006d36:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e09d      	b.n	8006e8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d54:	0b9b      	lsrs	r3, r3, #14
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d66:	09db      	lsrs	r3, r3, #7
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d88:	0fdb      	lsrs	r3, r3, #31
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d94:	0f5b      	lsrs	r3, r3, #29
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f003 0303 	and.w	r3, r3, #3
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da6:	0e9b      	lsrs	r3, r3, #26
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db8:	0d9b      	lsrs	r3, r3, #22
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dca:	0d5b      	lsrs	r3, r3, #21
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de6:	0c1b      	lsrs	r3, r3, #16
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dfa:	0bdb      	lsrs	r3, r3, #15
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e0e:	0b9b      	lsrs	r3, r3, #14
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e22:	0b5b      	lsrs	r3, r3, #13
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e36:	0b1b      	lsrs	r3, r3, #12
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e4a:	0a9b      	lsrs	r3, r3, #10
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e5e:	0a1b      	lsrs	r3, r3, #8
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	004005ff 	.word	0x004005ff

08006e9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006f00:	f107 030c 	add.w	r3, r7, #12
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f970 	bl	80071ec <SD_SendStatus>
 8006f0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	0a5b      	lsrs	r3, r3, #9
 8006f24:	f003 030f 	and.w	r3, r3, #15
 8006f28:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006f2a:	693b      	ldr	r3, [r7, #16]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f34:	b5b0      	push	{r4, r5, r7, lr}
 8006f36:	b094      	sub	sp, #80	@ 0x50
 8006f38:	af04      	add	r7, sp, #16
 8006f3a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4618      	mov	r0, r3
 8006f46:	f003 fb66 	bl	800a616 <SDIO_GetPowerState>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d102      	bne.n	8006f56 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f50:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006f54:	e0b8      	b.n	80070c8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d02f      	beq.n	8006fbe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f003 fd4d 	bl	800aa02 <SDMMC_CmdSendCID>
 8006f68:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <SD_InitCard+0x40>
    {
      return errorstate;
 8006f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f72:	e0a9      	b.n	80070c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2100      	movs	r1, #0
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f003 fb90 	bl	800a6a0 <SDIO_GetResponse>
 8006f80:	4602      	mov	r2, r0
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2104      	movs	r1, #4
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f003 fb87 	bl	800a6a0 <SDIO_GetResponse>
 8006f92:	4602      	mov	r2, r0
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2108      	movs	r1, #8
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f003 fb7e 	bl	800a6a0 <SDIO_GetResponse>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	210c      	movs	r1, #12
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f003 fb75 	bl	800a6a0 <SDIO_GetResponse>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d00d      	beq.n	8006fe2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f107 020e 	add.w	r2, r7, #14
 8006fce:	4611      	mov	r1, r2
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f003 fd53 	bl	800aa7c <SDMMC_CmdSetRelAdd>
 8006fd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <SD_InitCard+0xae>
    {
      return errorstate;
 8006fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fe0:	e072      	b.n	80070c8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d036      	beq.n	8007058 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006fea:	89fb      	ldrh	r3, [r7, #14]
 8006fec:	461a      	mov	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ffa:	041b      	lsls	r3, r3, #16
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f003 fd1d 	bl	800aa3e <SDMMC_CmdSendCSD>
 8007004:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <SD_InitCard+0xdc>
    {
      return errorstate;
 800700c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800700e:	e05b      	b.n	80070c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2100      	movs	r1, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f003 fb42 	bl	800a6a0 <SDIO_GetResponse>
 800701c:	4602      	mov	r2, r0
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2104      	movs	r1, #4
 8007028:	4618      	mov	r0, r3
 800702a:	f003 fb39 	bl	800a6a0 <SDIO_GetResponse>
 800702e:	4602      	mov	r2, r0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2108      	movs	r1, #8
 800703a:	4618      	mov	r0, r3
 800703c:	f003 fb30 	bl	800a6a0 <SDIO_GetResponse>
 8007040:	4602      	mov	r2, r0
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	210c      	movs	r1, #12
 800704c:	4618      	mov	r0, r3
 800704e:	f003 fb27 	bl	800a6a0 <SDIO_GetResponse>
 8007052:	4602      	mov	r2, r0
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2104      	movs	r1, #4
 800705e:	4618      	mov	r0, r3
 8007060:	f003 fb1e 	bl	800a6a0 <SDIO_GetResponse>
 8007064:	4603      	mov	r3, r0
 8007066:	0d1a      	lsrs	r2, r3, #20
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800706c:	f107 0310 	add.w	r3, r7, #16
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff fd6e 	bl	8006b54 <HAL_SD_GetCardCSD>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800707e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007082:	e021      	b.n	80070c8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6819      	ldr	r1, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800708c:	041b      	lsls	r3, r3, #16
 800708e:	2200      	movs	r2, #0
 8007090:	461c      	mov	r4, r3
 8007092:	4615      	mov	r5, r2
 8007094:	4622      	mov	r2, r4
 8007096:	462b      	mov	r3, r5
 8007098:	4608      	mov	r0, r1
 800709a:	f003 fc0d 	bl	800a8b8 <SDMMC_CmdSelDesel>
 800709e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80070a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <SD_InitCard+0x176>
  {
    return errorstate;
 80070a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a8:	e00e      	b.n	80070c8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681d      	ldr	r5, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	466c      	mov	r4, sp
 80070b2:	f103 0210 	add.w	r2, r3, #16
 80070b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80070b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070bc:	3304      	adds	r3, #4
 80070be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070c0:	4628      	mov	r0, r5
 80070c2:	f003 fa51 	bl	800a568 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3740      	adds	r7, #64	@ 0x40
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bdb0      	pop	{r4, r5, r7, pc}

080070d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	617b      	str	r3, [r7, #20]
 80070e0:	2300      	movs	r3, #0
 80070e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f003 fc08 	bl	800a8fe <SDMMC_CmdGoIdleState>
 80070ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <SD_PowerON+0x2a>
  {
    return errorstate;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	e072      	b.n	80071e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	f003 fc1b 	bl	800a93a <SDMMC_CmdOperCond>
 8007104:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00d      	beq.n	8007128 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4618      	mov	r0, r3
 8007118:	f003 fbf1 	bl	800a8fe <SDMMC_CmdGoIdleState>
 800711c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d004      	beq.n	800712e <SD_PowerON+0x5e>
    {
      return errorstate;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	e05b      	b.n	80071e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007132:	2b01      	cmp	r3, #1
 8007134:	d137      	bne.n	80071a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2100      	movs	r1, #0
 800713c:	4618      	mov	r0, r3
 800713e:	f003 fc1b 	bl	800a978 <SDMMC_CmdAppCommand>
 8007142:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d02d      	beq.n	80071a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800714a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800714e:	e047      	b.n	80071e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f003 fc0e 	bl	800a978 <SDMMC_CmdAppCommand>
 800715c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <SD_PowerON+0x98>
    {
      return errorstate;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	e03b      	b.n	80071e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	491e      	ldr	r1, [pc, #120]	@ (80071e8 <SD_PowerON+0x118>)
 800716e:	4618      	mov	r0, r3
 8007170:	f003 fc24 	bl	800a9bc <SDMMC_CmdAppOperCommand>
 8007174:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800717c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007180:	e02e      	b.n	80071e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2100      	movs	r1, #0
 8007188:	4618      	mov	r0, r3
 800718a:	f003 fa89 	bl	800a6a0 <SDIO_GetResponse>
 800718e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	0fdb      	lsrs	r3, r3, #31
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <SD_PowerON+0xcc>
 8007198:	2301      	movs	r3, #1
 800719a:	e000      	b.n	800719e <SD_PowerON+0xce>
 800719c:	2300      	movs	r3, #0
 800719e:	613b      	str	r3, [r7, #16]

    count++;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	3301      	adds	r3, #1
 80071a4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d802      	bhi.n	80071b6 <SD_PowerON+0xe6>
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0cc      	beq.n	8007150 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80071bc:	4293      	cmp	r3, r2
 80071be:	d902      	bls.n	80071c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80071c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071c4:	e00c      	b.n	80071e0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	645a      	str	r2, [r3, #68]	@ 0x44
 80071d6:	e002      	b.n	80071de <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	c1100000 	.word	0xc1100000

080071ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d102      	bne.n	8007202 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80071fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007200:	e018      	b.n	8007234 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800720a:	041b      	lsls	r3, r3, #16
 800720c:	4619      	mov	r1, r3
 800720e:	4610      	mov	r0, r2
 8007210:	f003 fc55 	bl	800aabe <SDMMC_CmdSendStatus>
 8007214:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <SD_SendStatus+0x34>
  {
    return errorstate;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	e009      	b.n	8007234 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2100      	movs	r1, #0
 8007226:	4618      	mov	r0, r3
 8007228:	f003 fa3a 	bl	800a6a0 <SDIO_GetResponse>
 800722c:	4602      	mov	r2, r0
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e07b      	b.n	8007346 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007252:	2b00      	cmp	r3, #0
 8007254:	d108      	bne.n	8007268 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800725e:	d009      	beq.n	8007274 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	61da      	str	r2, [r3, #28]
 8007266:	e005      	b.n	8007274 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d106      	bne.n	8007294 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fc ffae 	bl	80041f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80072bc:	431a      	orrs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072c6:	431a      	orrs	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	431a      	orrs	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	431a      	orrs	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072e4:	431a      	orrs	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f8:	ea42 0103 	orr.w	r1, r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007300:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	0c1b      	lsrs	r3, r3, #16
 8007312:	f003 0104 	and.w	r1, r3, #4
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731a:	f003 0210 	and.w	r2, r3, #16
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69da      	ldr	r2, [r3, #28]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007334:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3708      	adds	r7, #8
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b088      	sub	sp, #32
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	603b      	str	r3, [r7, #0]
 800735a:	4613      	mov	r3, r2
 800735c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800735e:	f7fd fa1b 	bl	8004798 <HAL_GetTick>
 8007362:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007364:	88fb      	ldrh	r3, [r7, #6]
 8007366:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b01      	cmp	r3, #1
 8007372:	d001      	beq.n	8007378 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007374:	2302      	movs	r3, #2
 8007376:	e12a      	b.n	80075ce <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <HAL_SPI_Transmit+0x36>
 800737e:	88fb      	ldrh	r3, [r7, #6]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e122      	b.n	80075ce <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800738e:	2b01      	cmp	r3, #1
 8007390:	d101      	bne.n	8007396 <HAL_SPI_Transmit+0x48>
 8007392:	2302      	movs	r3, #2
 8007394:	e11b      	b.n	80075ce <HAL_SPI_Transmit+0x280>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2201      	movs	r2, #1
 800739a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2203      	movs	r2, #3
 80073a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	88fa      	ldrh	r2, [r7, #6]
 80073b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	88fa      	ldrh	r2, [r7, #6]
 80073bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073e4:	d10f      	bne.n	8007406 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007404:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007410:	2b40      	cmp	r3, #64	@ 0x40
 8007412:	d007      	beq.n	8007424 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007422:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800742c:	d152      	bne.n	80074d4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <HAL_SPI_Transmit+0xee>
 8007436:	8b7b      	ldrh	r3, [r7, #26]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d145      	bne.n	80074c8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007440:	881a      	ldrh	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744c:	1c9a      	adds	r2, r3, #2
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007460:	e032      	b.n	80074c8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b02      	cmp	r3, #2
 800746e:	d112      	bne.n	8007496 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007474:	881a      	ldrh	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007480:	1c9a      	adds	r2, r3, #2
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007494:	e018      	b.n	80074c8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007496:	f7fd f97f 	bl	8004798 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d803      	bhi.n	80074ae <HAL_SPI_Transmit+0x160>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ac:	d102      	bne.n	80074b4 <HAL_SPI_Transmit+0x166>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d109      	bne.n	80074c8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e082      	b.n	80075ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1c7      	bne.n	8007462 <HAL_SPI_Transmit+0x114>
 80074d2:	e053      	b.n	800757c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <HAL_SPI_Transmit+0x194>
 80074dc:	8b7b      	ldrh	r3, [r7, #26]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d147      	bne.n	8007572 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	330c      	adds	r3, #12
 80074ec:	7812      	ldrb	r2, [r2, #0]
 80074ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074fe:	b29b      	uxth	r3, r3
 8007500:	3b01      	subs	r3, #1
 8007502:	b29a      	uxth	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007508:	e033      	b.n	8007572 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b02      	cmp	r3, #2
 8007516:	d113      	bne.n	8007540 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	330c      	adds	r3, #12
 8007522:	7812      	ldrb	r2, [r2, #0]
 8007524:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800753e:	e018      	b.n	8007572 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007540:	f7fd f92a 	bl	8004798 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	429a      	cmp	r2, r3
 800754e:	d803      	bhi.n	8007558 <HAL_SPI_Transmit+0x20a>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007556:	d102      	bne.n	800755e <HAL_SPI_Transmit+0x210>
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d109      	bne.n	8007572 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e02d      	b.n	80075ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007576:	b29b      	uxth	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1c6      	bne.n	800750a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800757c:	69fa      	ldr	r2, [r7, #28]
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f001 faef 	bl	8008b64 <SPI_EndRxTxTransaction>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2220      	movs	r2, #32
 8007590:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10a      	bne.n	80075b0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800759a:	2300      	movs	r3, #0
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	617b      	str	r3, [r7, #20]
 80075ae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e000      	b.n	80075ce <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80075cc:	2300      	movs	r3, #0
  }
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b088      	sub	sp, #32
 80075da:	af02      	add	r7, sp, #8
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	60b9      	str	r1, [r7, #8]
 80075e0:	603b      	str	r3, [r7, #0]
 80075e2:	4613      	mov	r3, r2
 80075e4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d001      	beq.n	80075f6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80075f2:	2302      	movs	r3, #2
 80075f4:	e104      	b.n	8007800 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075fe:	d112      	bne.n	8007626 <HAL_SPI_Receive+0x50>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10e      	bne.n	8007626 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2204      	movs	r2, #4
 800760c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007610:	88fa      	ldrh	r2, [r7, #6]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	4613      	mov	r3, r2
 8007618:	68ba      	ldr	r2, [r7, #8]
 800761a:	68b9      	ldr	r1, [r7, #8]
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 f8f3 	bl	8007808 <HAL_SPI_TransmitReceive>
 8007622:	4603      	mov	r3, r0
 8007624:	e0ec      	b.n	8007800 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007626:	f7fd f8b7 	bl	8004798 <HAL_GetTick>
 800762a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d002      	beq.n	8007638 <HAL_SPI_Receive+0x62>
 8007632:	88fb      	ldrh	r3, [r7, #6]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e0e1      	b.n	8007800 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <HAL_SPI_Receive+0x74>
 8007646:	2302      	movs	r3, #2
 8007648:	e0da      	b.n	8007800 <HAL_SPI_Receive+0x22a>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2204      	movs	r2, #4
 8007656:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	88fa      	ldrh	r2, [r7, #6]
 800766a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	88fa      	ldrh	r2, [r7, #6]
 8007670:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007698:	d10f      	bne.n	80076ba <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80076b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076c4:	2b40      	cmp	r3, #64	@ 0x40
 80076c6:	d007      	beq.n	80076d8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80076d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d170      	bne.n	80077c2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80076e0:	e035      	b.n	800774e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d115      	bne.n	800771c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f103 020c 	add.w	r2, r3, #12
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fc:	7812      	ldrb	r2, [r2, #0]
 80076fe:	b2d2      	uxtb	r2, r2
 8007700:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007706:	1c5a      	adds	r2, r3, #1
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007710:	b29b      	uxth	r3, r3
 8007712:	3b01      	subs	r3, #1
 8007714:	b29a      	uxth	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800771a:	e018      	b.n	800774e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800771c:	f7fd f83c 	bl	8004798 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	429a      	cmp	r2, r3
 800772a:	d803      	bhi.n	8007734 <HAL_SPI_Receive+0x15e>
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007732:	d102      	bne.n	800773a <HAL_SPI_Receive+0x164>
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d109      	bne.n	800774e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e058      	b.n	8007800 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007752:	b29b      	uxth	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1c4      	bne.n	80076e2 <HAL_SPI_Receive+0x10c>
 8007758:	e038      	b.n	80077cc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b01      	cmp	r3, #1
 8007766:	d113      	bne.n	8007790 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68da      	ldr	r2, [r3, #12]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007772:	b292      	uxth	r2, r2
 8007774:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800777a:	1c9a      	adds	r2, r3, #2
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800778e:	e018      	b.n	80077c2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007790:	f7fd f802 	bl	8004798 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	429a      	cmp	r2, r3
 800779e:	d803      	bhi.n	80077a8 <HAL_SPI_Receive+0x1d2>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a6:	d102      	bne.n	80077ae <HAL_SPI_Receive+0x1d8>
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d109      	bne.n	80077c2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e01e      	b.n	8007800 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1c6      	bne.n	800775a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f001 f961 	bl	8008a98 <SPI_EndRxTransaction>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d002      	beq.n	80077e2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2220      	movs	r2, #32
 80077e0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e000      	b.n	8007800 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80077fe:	2300      	movs	r3, #0
  }
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08a      	sub	sp, #40	@ 0x28
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007816:	2301      	movs	r3, #1
 8007818:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800781a:	f7fc ffbd 	bl	8004798 <HAL_GetTick>
 800781e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007826:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800782e:	887b      	ldrh	r3, [r7, #2]
 8007830:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007832:	7ffb      	ldrb	r3, [r7, #31]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d00c      	beq.n	8007852 <HAL_SPI_TransmitReceive+0x4a>
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800783e:	d106      	bne.n	800784e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <HAL_SPI_TransmitReceive+0x46>
 8007848:	7ffb      	ldrb	r3, [r7, #31]
 800784a:	2b04      	cmp	r3, #4
 800784c:	d001      	beq.n	8007852 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800784e:	2302      	movs	r3, #2
 8007850:	e17f      	b.n	8007b52 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <HAL_SPI_TransmitReceive+0x5c>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d002      	beq.n	8007864 <HAL_SPI_TransmitReceive+0x5c>
 800785e:	887b      	ldrh	r3, [r7, #2]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e174      	b.n	8007b52 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800786e:	2b01      	cmp	r3, #1
 8007870:	d101      	bne.n	8007876 <HAL_SPI_TransmitReceive+0x6e>
 8007872:	2302      	movs	r3, #2
 8007874:	e16d      	b.n	8007b52 <HAL_SPI_TransmitReceive+0x34a>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b04      	cmp	r3, #4
 8007888:	d003      	beq.n	8007892 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2205      	movs	r2, #5
 800788e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	887a      	ldrh	r2, [r7, #2]
 80078a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	887a      	ldrh	r2, [r7, #2]
 80078a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	887a      	ldrh	r2, [r7, #2]
 80078b4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	887a      	ldrh	r2, [r7, #2]
 80078ba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d2:	2b40      	cmp	r3, #64	@ 0x40
 80078d4:	d007      	beq.n	80078e6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078ee:	d17e      	bne.n	80079ee <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <HAL_SPI_TransmitReceive+0xf6>
 80078f8:	8afb      	ldrh	r3, [r7, #22]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d16c      	bne.n	80079d8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007902:	881a      	ldrh	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790e:	1c9a      	adds	r2, r3, #2
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007922:	e059      	b.n	80079d8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b02      	cmp	r3, #2
 8007930:	d11b      	bne.n	800796a <HAL_SPI_TransmitReceive+0x162>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007936:	b29b      	uxth	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d016      	beq.n	800796a <HAL_SPI_TransmitReceive+0x162>
 800793c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793e:	2b01      	cmp	r3, #1
 8007940:	d113      	bne.n	800796a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007946:	881a      	ldrh	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007952:	1c9a      	adds	r2, r3, #2
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800795c:	b29b      	uxth	r3, r3
 800795e:	3b01      	subs	r3, #1
 8007960:	b29a      	uxth	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b01      	cmp	r3, #1
 8007976:	d119      	bne.n	80079ac <HAL_SPI_TransmitReceive+0x1a4>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800797c:	b29b      	uxth	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d014      	beq.n	80079ac <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68da      	ldr	r2, [r3, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798c:	b292      	uxth	r2, r2
 800798e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007994:	1c9a      	adds	r2, r3, #2
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800799e:	b29b      	uxth	r3, r3
 80079a0:	3b01      	subs	r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079a8:	2301      	movs	r3, #1
 80079aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079ac:	f7fc fef4 	bl	8004798 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d80d      	bhi.n	80079d8 <HAL_SPI_TransmitReceive+0x1d0>
 80079bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c2:	d009      	beq.n	80079d8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e0bc      	b.n	8007b52 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1a0      	bne.n	8007924 <HAL_SPI_TransmitReceive+0x11c>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d19b      	bne.n	8007924 <HAL_SPI_TransmitReceive+0x11c>
 80079ec:	e082      	b.n	8007af4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <HAL_SPI_TransmitReceive+0x1f4>
 80079f6:	8afb      	ldrh	r3, [r7, #22]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d171      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	330c      	adds	r3, #12
 8007a06:	7812      	ldrb	r2, [r2, #0]
 8007a08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a22:	e05d      	b.n	8007ae0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f003 0302 	and.w	r3, r3, #2
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d11c      	bne.n	8007a6c <HAL_SPI_TransmitReceive+0x264>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d017      	beq.n	8007a6c <HAL_SPI_TransmitReceive+0x264>
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d114      	bne.n	8007a6c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	330c      	adds	r3, #12
 8007a4c:	7812      	ldrb	r2, [r2, #0]
 8007a4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	3b01      	subs	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d119      	bne.n	8007aae <HAL_SPI_TransmitReceive+0x2a6>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d014      	beq.n	8007aae <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a8e:	b2d2      	uxtb	r2, r2
 8007a90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007aae:	f7fc fe73 	bl	8004798 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d803      	bhi.n	8007ac6 <HAL_SPI_TransmitReceive+0x2be>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d102      	bne.n	8007acc <HAL_SPI_TransmitReceive+0x2c4>
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d109      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e038      	b.n	8007b52 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d19c      	bne.n	8007a24 <HAL_SPI_TransmitReceive+0x21c>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d197      	bne.n	8007a24 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007af4:	6a3a      	ldr	r2, [r7, #32]
 8007af6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f001 f833 	bl	8008b64 <SPI_EndRxTxTransaction>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d008      	beq.n	8007b16 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2220      	movs	r2, #32
 8007b08:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e01d      	b.n	8007b52 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10a      	bne.n	8007b34 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b1e:	2300      	movs	r3, #0
 8007b20:	613b      	str	r3, [r7, #16]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	613b      	str	r3, [r7, #16]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	613b      	str	r3, [r7, #16]
 8007b32:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e000      	b.n	8007b52 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007b50:	2300      	movs	r3, #0
  }
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3728      	adds	r7, #40	@ 0x28
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
	...

08007b5c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	4613      	mov	r3, r2
 8007b68:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d001      	beq.n	8007b7a <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 8007b76:	2302      	movs	r3, #2
 8007b78:	e07f      	b.n	8007c7a <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d110      	bne.n	8007ba4 <HAL_SPI_Receive_IT+0x48>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b8a:	d10b      	bne.n	8007ba4 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2204      	movs	r2, #4
 8007b90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007b94:	88fb      	ldrh	r3, [r7, #6]
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 f876 	bl	8007c8c <HAL_SPI_TransmitReceive_IT>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	e06a      	b.n	8007c7a <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d002      	beq.n	8007bb0 <HAL_SPI_Receive_IT+0x54>
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e062      	b.n	8007c7a <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d101      	bne.n	8007bc2 <HAL_SPI_Receive_IT+0x66>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	e05b      	b.n	8007c7a <HAL_SPI_Receive_IT+0x11e>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2204      	movs	r2, #4
 8007bce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	88fa      	ldrh	r2, [r7, #6]
 8007be2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	88fa      	ldrh	r2, [r7, #6]
 8007be8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007c84 <HAL_SPI_Receive_IT+0x128>)
 8007c0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007c10:	e002      	b.n	8007c18 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	4a1c      	ldr	r2, [pc, #112]	@ (8007c88 <HAL_SPI_Receive_IT+0x12c>)
 8007c16:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c20:	d10f      	bne.n	8007c42 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c40:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c4c:	2b40      	cmp	r3, #64	@ 0x40
 8007c4e:	d007      	beq.n	8007c60 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c5e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007c76:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	08008941 	.word	0x08008941
 8007c88:	080088f7 	.word	0x080088f7

08007c8c <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ca0:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d00c      	beq.n	8007cc8 <HAL_SPI_TransmitReceive_IT+0x3c>
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cb4:	d106      	bne.n	8007cc4 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d102      	bne.n	8007cc4 <HAL_SPI_TransmitReceive_IT+0x38>
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	d001      	beq.n	8007cc8 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_BUSY;
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e061      	b.n	8007d8c <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d005      	beq.n	8007cda <HAL_SPI_TransmitReceive_IT+0x4e>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <HAL_SPI_TransmitReceive_IT+0x4e>
 8007cd4:	887b      	ldrh	r3, [r7, #2]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e056      	b.n	8007d8c <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d101      	bne.n	8007cec <HAL_SPI_TransmitReceive_IT+0x60>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	e04f      	b.n	8007d8c <HAL_SPI_TransmitReceive_IT+0x100>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d003      	beq.n	8007d08 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2205      	movs	r2, #5
 8007d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	887a      	ldrh	r2, [r7, #2]
 8007d18:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	887a      	ldrh	r2, [r7, #2]
 8007d1e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	887a      	ldrh	r2, [r7, #2]
 8007d2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	887a      	ldrh	r2, [r7, #2]
 8007d30:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d006      	beq.n	8007d48 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4a16      	ldr	r2, [pc, #88]	@ (8007d98 <HAL_SPI_TransmitReceive_IT+0x10c>)
 8007d3e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4a16      	ldr	r2, [pc, #88]	@ (8007d9c <HAL_SPI_TransmitReceive_IT+0x110>)
 8007d44:	645a      	str	r2, [r3, #68]	@ 0x44
 8007d46:	e005      	b.n	8007d54 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4a15      	ldr	r2, [pc, #84]	@ (8007da0 <HAL_SPI_TransmitReceive_IT+0x114>)
 8007d4c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4a14      	ldr	r2, [pc, #80]	@ (8007da4 <HAL_SPI_TransmitReceive_IT+0x118>)
 8007d52:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d5e:	2b40      	cmp	r3, #64	@ 0x40
 8007d60:	d007      	beq.n	8007d72 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d70:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8007d88:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	08008839 	.word	0x08008839
 8007d9c:	08008899 	.word	0x08008899
 8007da0:	08008775 	.word	0x08008775
 8007da4:	080087d9 	.word	0x080087d9

08007da8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d001      	beq.n	8007dc6 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007dc2:	2302      	movs	r3, #2
 8007dc4:	e097      	b.n	8007ef6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <HAL_SPI_Transmit_DMA+0x2a>
 8007dcc:	88fb      	ldrh	r3, [r7, #6]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e08f      	b.n	8007ef6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_SPI_Transmit_DMA+0x3c>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e088      	b.n	8007ef6 <HAL_SPI_Transmit_DMA+0x14e>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2203      	movs	r2, #3
 8007df0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	88fa      	ldrh	r2, [r7, #6]
 8007e04:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	88fa      	ldrh	r2, [r7, #6]
 8007e0a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e32:	d10f      	bne.n	8007e54 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e58:	4a29      	ldr	r2, [pc, #164]	@ (8007f00 <HAL_SPI_Transmit_DMA+0x158>)
 8007e5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e60:	4a28      	ldr	r2, [pc, #160]	@ (8007f04 <HAL_SPI_Transmit_DMA+0x15c>)
 8007e62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e68:	4a27      	ldr	r2, [pc, #156]	@ (8007f08 <HAL_SPI_Transmit_DMA+0x160>)
 8007e6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e70:	2200      	movs	r2, #0
 8007e72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	330c      	adds	r3, #12
 8007e84:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e8a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007e8c:	f7fd f89c 	bl	8004fc8 <HAL_DMA_Start_IT>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00b      	beq.n	8007eae <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e9a:	f043 0210 	orr.w	r2, r3, #16
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e023      	b.n	8007ef6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb8:	2b40      	cmp	r3, #64	@ 0x40
 8007eba:	d007      	beq.n	8007ecc <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007eca:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0220 	orr.w	r2, r2, #32
 8007ee2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0202 	orr.w	r2, r2, #2
 8007ef2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	080086b9 	.word	0x080086b9
 8007f04:	080084d9 	.word	0x080084d9
 8007f08:	0800870d 	.word	0x0800870d

08007f0c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	4613      	mov	r3, r2
 8007f18:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d001      	beq.n	8007f2a <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8007f26:	2302      	movs	r3, #2
 8007f28:	e0a9      	b.n	800807e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d110      	bne.n	8007f54 <HAL_SPI_Receive_DMA+0x48>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f3a:	d10b      	bne.n	8007f54 <HAL_SPI_Receive_DMA+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2204      	movs	r2, #4
 8007f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	68b9      	ldr	r1, [r7, #8]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 f8a2 	bl	8008094 <HAL_SPI_TransmitReceive_DMA>
 8007f50:	4603      	mov	r3, r0
 8007f52:	e094      	b.n	800807e <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <HAL_SPI_Receive_DMA+0x54>
 8007f5a:	88fb      	ldrh	r3, [r7, #6]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <HAL_SPI_Receive_DMA+0x58>
  {
    return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e08c      	b.n	800807e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d101      	bne.n	8007f72 <HAL_SPI_Receive_DMA+0x66>
 8007f6e:	2302      	movs	r3, #2
 8007f70:	e085      	b.n	800807e <HAL_SPI_Receive_DMA+0x172>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  
  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2204      	movs	r2, #4
 8007f7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	88fa      	ldrh	r2, [r7, #6]
 8007f92:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	88fa      	ldrh	r2, [r7, #6]
 8007f98:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fba:	d10f      	bne.n	8007fdc <HAL_SPI_Receive_DMA+0xd0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007fda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe0:	4a29      	ldr	r2, [pc, #164]	@ (8008088 <HAL_SPI_Receive_DMA+0x17c>)
 8007fe2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe8:	4a28      	ldr	r2, [pc, #160]	@ (800808c <HAL_SPI_Receive_DMA+0x180>)
 8007fea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ff0:	4a27      	ldr	r2, [pc, #156]	@ (8008090 <HAL_SPI_Receive_DMA+0x184>)
 8007ff2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	330c      	adds	r3, #12
 8008006:	4619      	mov	r1, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800800c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008012:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008014:	f7fc ffd8 	bl	8004fc8 <HAL_DMA_Start_IT>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00b      	beq.n	8008036 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008022:	f043 0210 	orr.w	r2, r3, #16
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e023      	b.n	800807e <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008040:	2b40      	cmp	r3, #64	@ 0x40
 8008042:	d007      	beq.n	8008054 <HAL_SPI_Receive_DMA+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008052:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0220 	orr.w	r2, r2, #32
 800806a:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0201 	orr.w	r2, r2, #1
 800807a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	080086d5 	.word	0x080086d5
 800808c:	08008581 	.word	0x08008581
 8008090:	0800870d 	.word	0x0800870d

08008094 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80080a8:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d00c      	beq.n	80080d0 <HAL_SPI_TransmitReceive_DMA+0x3c>
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080bc:	d106      	bne.n	80080cc <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d102      	bne.n	80080cc <HAL_SPI_TransmitReceive_DMA+0x38>
 80080c6:	7dfb      	ldrb	r3, [r7, #23]
 80080c8:	2b04      	cmp	r3, #4
 80080ca:	d001      	beq.n	80080d0 <HAL_SPI_TransmitReceive_DMA+0x3c>
  {
    return HAL_BUSY;
 80080cc:	2302      	movs	r3, #2
 80080ce:	e0cf      	b.n	8008270 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <HAL_SPI_TransmitReceive_DMA+0x4e>
 80080dc:	887b      	ldrh	r3, [r7, #2]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e0c4      	b.n	8008270 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d101      	bne.n	80080f4 <HAL_SPI_TransmitReceive_DMA+0x60>
 80080f0:	2302      	movs	r3, #2
 80080f2:	e0bd      	b.n	8008270 <HAL_SPI_TransmitReceive_DMA+0x1dc>
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b04      	cmp	r3, #4
 8008106:	d003      	beq.n	8008110 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2205      	movs	r2, #5
 800810c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	887a      	ldrh	r2, [r7, #2]
 8008120:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	887a      	ldrh	r2, [r7, #2]
 8008126:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	887a      	ldrh	r2, [r7, #2]
 8008132:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	887a      	ldrh	r2, [r7, #2]
 8008138:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800814c:	b2db      	uxtb	r3, r3
 800814e:	2b04      	cmp	r3, #4
 8008150:	d108      	bne.n	8008164 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008156:	4a48      	ldr	r2, [pc, #288]	@ (8008278 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8008158:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800815e:	4a47      	ldr	r2, [pc, #284]	@ (800827c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8008160:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008162:	e007      	b.n	8008174 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008168:	4a45      	ldr	r2, [pc, #276]	@ (8008280 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800816a:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008170:	4a44      	ldr	r2, [pc, #272]	@ (8008284 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8008172:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008178:	4a43      	ldr	r2, [pc, #268]	@ (8008288 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800817a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008180:	2200      	movs	r2, #0
 8008182:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	330c      	adds	r3, #12
 800818e:	4619      	mov	r1, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008194:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800819a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800819c:	f7fc ff14 	bl	8004fc8 <HAL_DMA_Start_IT>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00b      	beq.n	80081be <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081aa:	f043 0210 	orr.w	r2, r3, #16
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e058      	b.n	8008270 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f042 0201 	orr.w	r2, r2, #1
 80081cc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081d2:	2200      	movs	r2, #0
 80081d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081da:	2200      	movs	r2, #0
 80081dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081e2:	2200      	movs	r2, #0
 80081e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ea:	2200      	movs	r2, #0
 80081ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f6:	4619      	mov	r1, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	330c      	adds	r3, #12
 80081fe:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008204:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008206:	f7fc fedf 	bl	8004fc8 <HAL_DMA_Start_IT>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00b      	beq.n	8008228 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008214:	f043 0210 	orr.w	r2, r3, #16
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e023      	b.n	8008270 <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008232:	2b40      	cmp	r3, #64	@ 0x40
 8008234:	d007      	beq.n	8008246 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008244:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f042 0220 	orr.w	r2, r2, #32
 800825c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f042 0202 	orr.w	r2, r2, #2
 800826c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3718      	adds	r7, #24
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	080086d5 	.word	0x080086d5
 800827c:	08008581 	.word	0x08008581
 8008280:	080086f1 	.word	0x080086f1
 8008284:	08008629 	.word	0x08008629
 8008288:	0800870d 	.word	0x0800870d

0800828c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b088      	sub	sp, #32
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10e      	bne.n	80082cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d009      	beq.n	80082cc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d004      	beq.n	80082cc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
    return;
 80082ca:	e0ce      	b.n	800846a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d009      	beq.n	80082ea <HAL_SPI_IRQHandler+0x5e>
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d004      	beq.n	80082ea <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	4798      	blx	r3
    return;
 80082e8:	e0bf      	b.n	800846a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	f003 0320 	and.w	r3, r3, #32
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10a      	bne.n	800830a <HAL_SPI_IRQHandler+0x7e>
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d105      	bne.n	800830a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008304:	2b00      	cmp	r3, #0
 8008306:	f000 80b0 	beq.w	800846a <HAL_SPI_IRQHandler+0x1de>
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	f003 0320 	and.w	r3, r3, #32
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 80aa 	beq.w	800846a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800831c:	2b00      	cmp	r3, #0
 800831e:	d023      	beq.n	8008368 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b03      	cmp	r3, #3
 800832a:	d011      	beq.n	8008350 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008330:	f043 0204 	orr.w	r2, r3, #4
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008338:	2300      	movs	r3, #0
 800833a:	617b      	str	r3, [r7, #20]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	617b      	str	r3, [r7, #20]
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	e00b      	b.n	8008368 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008350:	2300      	movs	r3, #0
 8008352:	613b      	str	r3, [r7, #16]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	613b      	str	r3, [r7, #16]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	613b      	str	r3, [r7, #16]
 8008364:	693b      	ldr	r3, [r7, #16]
        return;
 8008366:	e080      	b.n	800846a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b00      	cmp	r3, #0
 8008370:	d014      	beq.n	800839c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008376:	f043 0201 	orr.w	r2, r3, #1
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800837e:	2300      	movs	r3, #0
 8008380:	60fb      	str	r3, [r7, #12]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	60fb      	str	r3, [r7, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00c      	beq.n	80083c0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083aa:	f043 0208 	orr.w	r2, r3, #8
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80083b2:	2300      	movs	r3, #0
 80083b4:	60bb      	str	r3, [r7, #8]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	60bb      	str	r3, [r7, #8]
 80083be:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d04f      	beq.n	8008468 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80083d6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d104      	bne.n	80083f4 <HAL_SPI_IRQHandler+0x168>
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	f003 0301 	and.w	r3, r3, #1
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d034      	beq.n	800845e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0203 	bic.w	r2, r2, #3
 8008402:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008408:	2b00      	cmp	r3, #0
 800840a:	d011      	beq.n	8008430 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008410:	4a17      	ldr	r2, [pc, #92]	@ (8008470 <HAL_SPI_IRQHandler+0x1e4>)
 8008412:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008418:	4618      	mov	r0, r3
 800841a:	f7fc fe9d 	bl	8005158 <HAL_DMA_Abort_IT>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d005      	beq.n	8008430 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008428:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008434:	2b00      	cmp	r3, #0
 8008436:	d016      	beq.n	8008466 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800843c:	4a0c      	ldr	r2, [pc, #48]	@ (8008470 <HAL_SPI_IRQHandler+0x1e4>)
 800843e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008444:	4618      	mov	r0, r3
 8008446:	f7fc fe87 	bl	8005158 <HAL_DMA_Abort_IT>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008454:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800845c:	e003      	b.n	8008466 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f830 	bl	80084c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008464:	e000      	b.n	8008468 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8008466:	bf00      	nop
    return;
 8008468:	bf00      	nop
  }
}
 800846a:	3720      	adds	r7, #32
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	0800874d 	.word	0x0800874d

08008474 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084e6:	f7fc f957 	bl	8004798 <HAL_GetTick>
 80084ea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084fa:	d03b      	beq.n	8008574 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0220 	bic.w	r2, r2, #32
 800850a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 0202 	bic.w	r2, r2, #2
 800851a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	2164      	movs	r1, #100	@ 0x64
 8008520:	6978      	ldr	r0, [r7, #20]
 8008522:	f000 fb1f 	bl	8008b64 <SPI_EndRxTxTransaction>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d005      	beq.n	8008538 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008530:	f043 0220 	orr.w	r2, r3, #32
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10a      	bne.n	8008556 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	60fb      	str	r3, [r7, #12]
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	60fb      	str	r3, [r7, #12]
 8008554:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2200      	movs	r2, #0
 800855a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008568:	2b00      	cmp	r3, #0
 800856a:	d003      	beq.n	8008574 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800856c:	6978      	ldr	r0, [r7, #20]
 800856e:	f7ff ffa9 	bl	80084c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008572:	e002      	b.n	800857a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008574:	6978      	ldr	r0, [r7, #20]
 8008576:	f7f9 fff1 	bl	800255c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800858c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800858e:	f7fc f903 	bl	8004798 <HAL_GetTick>
 8008592:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800859e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085a2:	d03b      	beq.n	800861c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 0220 	bic.w	r2, r2, #32
 80085b2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10d      	bne.n	80085d8 <SPI_DMAReceiveCplt+0x58>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085c4:	d108      	bne.n	80085d8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f022 0203 	bic.w	r2, r2, #3
 80085d4:	605a      	str	r2, [r3, #4]
 80085d6:	e007      	b.n	80085e8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f022 0201 	bic.w	r2, r2, #1
 80085e6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	2164      	movs	r1, #100	@ 0x64
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 fa53 	bl	8008a98 <SPI_EndRxTransaction>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2220      	movs	r2, #32
 80085fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008610:	2b00      	cmp	r3, #0
 8008612:	d003      	beq.n	800861c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f7ff ff55 	bl	80084c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800861a:	e002      	b.n	8008622 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f7f9 ffb3 	bl	8002588 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008634:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008636:	f7fc f8af 	bl	8004798 <HAL_GetTick>
 800863a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800864a:	d02f      	beq.n	80086ac <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f022 0220 	bic.w	r2, r2, #32
 800865a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	2164      	movs	r1, #100	@ 0x64
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 fa7f 	bl	8008b64 <SPI_EndRxTxTransaction>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008670:	f043 0220 	orr.w	r2, r3, #32
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 0203 	bic.w	r2, r2, #3
 8008686:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d003      	beq.n	80086ac <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f7ff ff0d 	bl	80084c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80086aa:	e002      	b.n	80086b2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff fee1 	bl	8008474 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff fede 	bl	8008488 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086cc:	bf00      	nop
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f7ff feda 	bl	800849c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086e8:	bf00      	nop
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086fc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f7ff fed6 	bl	80084b0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008704:	bf00      	nop
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008718:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0203 	bic.w	r2, r2, #3
 8008728:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800872e:	f043 0210 	orr.w	r2, r3, #16
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7ff fec0 	bl	80084c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008744:	bf00      	nop
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008758:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f7ff feac 	bl	80084c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800876c:	bf00      	nop
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f103 020c 	add.w	r2, r3, #12
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008788:	7812      	ldrb	r2, [r2, #0]
 800878a:	b2d2      	uxtb	r2, r2
 800878c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800879c:	b29b      	uxth	r3, r3
 800879e:	3b01      	subs	r3, #1
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10f      	bne.n	80087d0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80087be:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d102      	bne.n	80087d0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fa1e 	bl	8008c0c <SPI_CloseRxTx_ISR>
    }
  }
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	330c      	adds	r3, #12
 80087ea:	7812      	ldrb	r2, [r2, #0]
 80087ec:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f2:	1c5a      	adds	r2, r3, #1
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	3b01      	subs	r3, #1
 8008800:	b29a      	uxth	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800880a:	b29b      	uxth	r3, r3
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10f      	bne.n	8008830 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800881e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008824:	b29b      	uxth	r3, r3
 8008826:	2b00      	cmp	r3, #0
 8008828:	d102      	bne.n	8008830 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f9ee 	bl	8008c0c <SPI_CloseRxTx_ISR>
    }
  }
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68da      	ldr	r2, [r3, #12]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884a:	b292      	uxth	r2, r2
 800884c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008852:	1c9a      	adds	r2, r3, #2
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800885c:	b29b      	uxth	r3, r3
 800885e:	3b01      	subs	r3, #1
 8008860:	b29a      	uxth	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800886a:	b29b      	uxth	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10f      	bne.n	8008890 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800887e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008884:	b29b      	uxth	r3, r3
 8008886:	2b00      	cmp	r3, #0
 8008888:	d102      	bne.n	8008890 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f9be 	bl	8008c0c <SPI_CloseRxTx_ISR>
    }
  }
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a4:	881a      	ldrh	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b0:	1c9a      	adds	r2, r3, #2
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	3b01      	subs	r3, #1
 80088be:	b29a      	uxth	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10f      	bne.n	80088ee <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80088dc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d102      	bne.n	80088ee <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f98f 	bl	8008c0c <SPI_CloseRxTx_ISR>
    }
  }
}
 80088ee:	bf00      	nop
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f103 020c 	add.w	r2, r3, #12
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800890a:	7812      	ldrb	r2, [r2, #0]
 800890c:	b2d2      	uxtb	r2, r2
 800890e:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800891e:	b29b      	uxth	r3, r3
 8008920:	3b01      	subs	r3, #1
 8008922:	b29a      	uxth	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800892c:	b29b      	uxth	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d102      	bne.n	8008938 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 f9de 	bl	8008cf4 <SPI_CloseRx_ISR>
  }
}
 8008938:	bf00      	nop
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68da      	ldr	r2, [r3, #12]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008952:	b292      	uxth	r2, r2
 8008954:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800895a:	1c9a      	adds	r2, r3, #2
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008964:	b29b      	uxth	r3, r3
 8008966:	3b01      	subs	r3, #1
 8008968:	b29a      	uxth	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008972:	b29b      	uxth	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	d102      	bne.n	800897e <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f9bb 	bl	8008cf4 <SPI_CloseRx_ISR>
  }
}
 800897e:	bf00      	nop
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
	...

08008988 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b088      	sub	sp, #32
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	4613      	mov	r3, r2
 8008996:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008998:	f7fb fefe 	bl	8004798 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a0:	1a9b      	subs	r3, r3, r2
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	4413      	add	r3, r2
 80089a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80089a8:	f7fb fef6 	bl	8004798 <HAL_GetTick>
 80089ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80089ae:	4b39      	ldr	r3, [pc, #228]	@ (8008a94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	015b      	lsls	r3, r3, #5
 80089b4:	0d1b      	lsrs	r3, r3, #20
 80089b6:	69fa      	ldr	r2, [r7, #28]
 80089b8:	fb02 f303 	mul.w	r3, r2, r3
 80089bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089be:	e054      	b.n	8008a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c6:	d050      	beq.n	8008a6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80089c8:	f7fb fee6 	bl	8004798 <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	69fa      	ldr	r2, [r7, #28]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d902      	bls.n	80089de <SPI_WaitFlagStateUntilTimeout+0x56>
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d13d      	bne.n	8008a5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	685a      	ldr	r2, [r3, #4]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80089ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80089f6:	d111      	bne.n	8008a1c <SPI_WaitFlagStateUntilTimeout+0x94>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a00:	d004      	beq.n	8008a0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a0a:	d107      	bne.n	8008a1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a24:	d10f      	bne.n	8008a46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008a56:	2303      	movs	r3, #3
 8008a58:	e017      	b.n	8008a8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d101      	bne.n	8008a64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008a60:	2300      	movs	r3, #0
 8008a62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	689a      	ldr	r2, [r3, #8]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	4013      	ands	r3, r2
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	bf0c      	ite	eq
 8008a7a:	2301      	moveq	r3, #1
 8008a7c:	2300      	movne	r3, #0
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	461a      	mov	r2, r3
 8008a82:	79fb      	ldrb	r3, [r7, #7]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d19b      	bne.n	80089c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3720      	adds	r7, #32
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20000010 	.word	0x20000010

08008a98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af02      	add	r7, sp, #8
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008aac:	d111      	bne.n	8008ad2 <SPI_EndRxTransaction+0x3a>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ab6:	d004      	beq.n	8008ac2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ac0:	d107      	bne.n	8008ad2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ad0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ada:	d12a      	bne.n	8008b32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ae4:	d012      	beq.n	8008b0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2200      	movs	r2, #0
 8008aee:	2180      	movs	r1, #128	@ 0x80
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f7ff ff49 	bl	8008988 <SPI_WaitFlagStateUntilTimeout>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d02d      	beq.n	8008b58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b00:	f043 0220 	orr.w	r2, r3, #32
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e026      	b.n	8008b5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2200      	movs	r2, #0
 8008b14:	2101      	movs	r1, #1
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7ff ff36 	bl	8008988 <SPI_WaitFlagStateUntilTimeout>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d01a      	beq.n	8008b58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b26:	f043 0220 	orr.w	r2, r3, #32
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e013      	b.n	8008b5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f7ff ff23 	bl	8008988 <SPI_WaitFlagStateUntilTimeout>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d007      	beq.n	8008b58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b4c:	f043 0220 	orr.w	r2, r3, #32
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e000      	b.n	8008b5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af02      	add	r7, sp, #8
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	2201      	movs	r2, #1
 8008b78:	2102      	movs	r1, #2
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f7ff ff04 	bl	8008988 <SPI_WaitFlagStateUntilTimeout>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d007      	beq.n	8008b96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b8a:	f043 0220 	orr.w	r2, r3, #32
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e032      	b.n	8008bfc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b96:	4b1b      	ldr	r3, [pc, #108]	@ (8008c04 <SPI_EndRxTxTransaction+0xa0>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8008c08 <SPI_EndRxTxTransaction+0xa4>)
 8008b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba0:	0d5b      	lsrs	r3, r3, #21
 8008ba2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008ba6:	fb02 f303 	mul.w	r3, r2, r3
 8008baa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008bb4:	d112      	bne.n	8008bdc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2180      	movs	r1, #128	@ 0x80
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f7ff fee1 	bl	8008988 <SPI_WaitFlagStateUntilTimeout>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d016      	beq.n	8008bfa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bd0:	f043 0220 	orr.w	r2, r3, #32
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	e00f      	b.n	8008bfc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00a      	beq.n	8008bf8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	3b01      	subs	r3, #1
 8008be6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bf2:	2b80      	cmp	r3, #128	@ 0x80
 8008bf4:	d0f2      	beq.n	8008bdc <SPI_EndRxTxTransaction+0x78>
 8008bf6:	e000      	b.n	8008bfa <SPI_EndRxTxTransaction+0x96>
        break;
 8008bf8:	bf00      	nop
  }

  return HAL_OK;
 8008bfa:	2300      	movs	r3, #0
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	20000010 	.word	0x20000010
 8008c08:	165e9f81 	.word	0x165e9f81

08008c0c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8008c14:	4b35      	ldr	r3, [pc, #212]	@ (8008cec <SPI_CloseRxTx_ISR+0xe0>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a35      	ldr	r2, [pc, #212]	@ (8008cf0 <SPI_CloseRxTx_ISR+0xe4>)
 8008c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c1e:	0a5b      	lsrs	r3, r3, #9
 8008c20:	2264      	movs	r2, #100	@ 0x64
 8008c22:	fb02 f303 	mul.w	r3, r2, r3
 8008c26:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c28:	f7fb fdb6 	bl	8004798 <HAL_GetTick>
 8008c2c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f022 0220 	bic.w	r2, r2, #32
 8008c3c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d106      	bne.n	8008c52 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c48:	f043 0220 	orr.w	r2, r3, #32
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008c50:	e009      	b.n	8008c66 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0eb      	beq.n	8008c3e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	2164      	movs	r1, #100	@ 0x64
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff ff7a 	bl	8008b64 <SPI_EndRxTxTransaction>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d005      	beq.n	8008c82 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7a:	f043 0220 	orr.w	r2, r3, #32
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10a      	bne.n	8008ca0 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d115      	bne.n	8008cd4 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	d107      	bne.n	8008cc4 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7f9 fc63 	bl	8002588 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008cc2:	e00e      	b.n	8008ce2 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7ff fbd1 	bl	8008474 <HAL_SPI_TxRxCpltCallback>
}
 8008cd2:	e006      	b.n	8008ce2 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff fbf1 	bl	80084c4 <HAL_SPI_ErrorCallback>
}
 8008ce2:	bf00      	nop
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20000010 	.word	0x20000010
 8008cf0:	057619f1 	.word	0x057619f1

08008cf4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008d0a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8008d0c:	f7fb fd44 	bl	8004798 <HAL_GetTick>
 8008d10:	4603      	mov	r3, r0
 8008d12:	461a      	mov	r2, r3
 8008d14:	2164      	movs	r1, #100	@ 0x64
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7ff febe 	bl	8008a98 <SPI_EndRxTransaction>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d005      	beq.n	8008d2e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d26:	f043 0220 	orr.w	r2, r3, #32
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10a      	bne.n	8008d4c <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d36:	2300      	movs	r3, #0
 8008d38:	60fb      	str	r3, [r7, #12]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d103      	bne.n	8008d64 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7f9 fc13 	bl	8002588 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8008d62:	e002      	b.n	8008d6a <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff fbad 	bl	80084c4 <HAL_SPI_ErrorCallback>
}
 8008d6a:	bf00      	nop
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b082      	sub	sp, #8
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e041      	b.n	8008e08 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d106      	bne.n	8008d9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7fb fb35 	bl	8004408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2202      	movs	r2, #2
 8008da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	3304      	adds	r3, #4
 8008dae:	4619      	mov	r1, r3
 8008db0:	4610      	mov	r0, r2
 8008db2:	f000 fae5 	bl	8009380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d001      	beq.n	8008e28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e046      	b.n	8008eb6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a23      	ldr	r2, [pc, #140]	@ (8008ec4 <HAL_TIM_Base_Start+0xb4>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d022      	beq.n	8008e80 <HAL_TIM_Base_Start+0x70>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e42:	d01d      	beq.n	8008e80 <HAL_TIM_Base_Start+0x70>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a1f      	ldr	r2, [pc, #124]	@ (8008ec8 <HAL_TIM_Base_Start+0xb8>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d018      	beq.n	8008e80 <HAL_TIM_Base_Start+0x70>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a1e      	ldr	r2, [pc, #120]	@ (8008ecc <HAL_TIM_Base_Start+0xbc>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d013      	beq.n	8008e80 <HAL_TIM_Base_Start+0x70>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8008ed0 <HAL_TIM_Base_Start+0xc0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d00e      	beq.n	8008e80 <HAL_TIM_Base_Start+0x70>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a1b      	ldr	r2, [pc, #108]	@ (8008ed4 <HAL_TIM_Base_Start+0xc4>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d009      	beq.n	8008e80 <HAL_TIM_Base_Start+0x70>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a19      	ldr	r2, [pc, #100]	@ (8008ed8 <HAL_TIM_Base_Start+0xc8>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d004      	beq.n	8008e80 <HAL_TIM_Base_Start+0x70>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a18      	ldr	r2, [pc, #96]	@ (8008edc <HAL_TIM_Base_Start+0xcc>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d111      	bne.n	8008ea4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2b06      	cmp	r3, #6
 8008e90:	d010      	beq.n	8008eb4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f042 0201 	orr.w	r2, r2, #1
 8008ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea2:	e007      	b.n	8008eb4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f042 0201 	orr.w	r2, r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	40010000 	.word	0x40010000
 8008ec8:	40000400 	.word	0x40000400
 8008ecc:	40000800 	.word	0x40000800
 8008ed0:	40000c00 	.word	0x40000c00
 8008ed4:	40010400 	.word	0x40010400
 8008ed8:	40014000 	.word	0x40014000
 8008edc:	40001800 	.word	0x40001800

08008ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d001      	beq.n	8008ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e04e      	b.n	8008f96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2202      	movs	r2, #2
 8008efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f042 0201 	orr.w	r2, r2, #1
 8008f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a23      	ldr	r2, [pc, #140]	@ (8008fa4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d022      	beq.n	8008f60 <HAL_TIM_Base_Start_IT+0x80>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f22:	d01d      	beq.n	8008f60 <HAL_TIM_Base_Start_IT+0x80>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a1f      	ldr	r2, [pc, #124]	@ (8008fa8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d018      	beq.n	8008f60 <HAL_TIM_Base_Start_IT+0x80>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a1e      	ldr	r2, [pc, #120]	@ (8008fac <HAL_TIM_Base_Start_IT+0xcc>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d013      	beq.n	8008f60 <HAL_TIM_Base_Start_IT+0x80>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8008fb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d00e      	beq.n	8008f60 <HAL_TIM_Base_Start_IT+0x80>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a1b      	ldr	r2, [pc, #108]	@ (8008fb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d009      	beq.n	8008f60 <HAL_TIM_Base_Start_IT+0x80>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a19      	ldr	r2, [pc, #100]	@ (8008fb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d004      	beq.n	8008f60 <HAL_TIM_Base_Start_IT+0x80>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a18      	ldr	r2, [pc, #96]	@ (8008fbc <HAL_TIM_Base_Start_IT+0xdc>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d111      	bne.n	8008f84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 0307 	and.w	r3, r3, #7
 8008f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2b06      	cmp	r3, #6
 8008f70:	d010      	beq.n	8008f94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f042 0201 	orr.w	r2, r2, #1
 8008f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f82:	e007      	b.n	8008f94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f042 0201 	orr.w	r2, r2, #1
 8008f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	40010000 	.word	0x40010000
 8008fa8:	40000400 	.word	0x40000400
 8008fac:	40000800 	.word	0x40000800
 8008fb0:	40000c00 	.word	0x40000c00
 8008fb4:	40010400 	.word	0x40010400
 8008fb8:	40014000 	.word	0x40014000
 8008fbc:	40001800 	.word	0x40001800

08008fc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f003 0302 	and.w	r3, r3, #2
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d020      	beq.n	8009024 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01b      	beq.n	8009024 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f06f 0202 	mvn.w	r2, #2
 8008ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	f003 0303 	and.w	r3, r3, #3
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f999 	bl	8009342 <HAL_TIM_IC_CaptureCallback>
 8009010:	e005      	b.n	800901e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f98b 	bl	800932e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f99c 	bl	8009356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	f003 0304 	and.w	r3, r3, #4
 800902a:	2b00      	cmp	r3, #0
 800902c:	d020      	beq.n	8009070 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b00      	cmp	r3, #0
 8009036:	d01b      	beq.n	8009070 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f06f 0204 	mvn.w	r2, #4
 8009040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2202      	movs	r2, #2
 8009046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f973 	bl	8009342 <HAL_TIM_IC_CaptureCallback>
 800905c:	e005      	b.n	800906a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f965 	bl	800932e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f976 	bl	8009356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f003 0308 	and.w	r3, r3, #8
 8009076:	2b00      	cmp	r3, #0
 8009078:	d020      	beq.n	80090bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f003 0308 	and.w	r3, r3, #8
 8009080:	2b00      	cmp	r3, #0
 8009082:	d01b      	beq.n	80090bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f06f 0208 	mvn.w	r2, #8
 800908c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2204      	movs	r2, #4
 8009092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f94d 	bl	8009342 <HAL_TIM_IC_CaptureCallback>
 80090a8:	e005      	b.n	80090b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f93f 	bl	800932e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f950 	bl	8009356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f003 0310 	and.w	r3, r3, #16
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d020      	beq.n	8009108 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f003 0310 	and.w	r3, r3, #16
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d01b      	beq.n	8009108 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f06f 0210 	mvn.w	r2, #16
 80090d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2208      	movs	r2, #8
 80090de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f927 	bl	8009342 <HAL_TIM_IC_CaptureCallback>
 80090f4:	e005      	b.n	8009102 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f919 	bl	800932e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f92a 	bl	8009356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00c      	beq.n	800912c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	2b00      	cmp	r3, #0
 800911a:	d007      	beq.n	800912c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f06f 0201 	mvn.w	r2, #1
 8009124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7f8 fcfc 	bl	8001b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00c      	beq.n	8009150 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800913c:	2b00      	cmp	r3, #0
 800913e:	d007      	beq.n	8009150 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fae4 	bl	8009718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00c      	beq.n	8009174 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009160:	2b00      	cmp	r3, #0
 8009162:	d007      	beq.n	8009174 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800916c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f8fb 	bl	800936a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	f003 0320 	and.w	r3, r3, #32
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00c      	beq.n	8009198 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f003 0320 	and.w	r3, r3, #32
 8009184:	2b00      	cmp	r3, #0
 8009186:	d007      	beq.n	8009198 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f06f 0220 	mvn.w	r2, #32
 8009190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fab6 	bl	8009704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009198:	bf00      	nop
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_TIM_ConfigClockSource+0x1c>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e0b4      	b.n	8009326 <HAL_TIM_ConfigClockSource+0x186>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2202      	movs	r2, #2
 80091c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80091da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80091e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091f4:	d03e      	beq.n	8009274 <HAL_TIM_ConfigClockSource+0xd4>
 80091f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091fa:	f200 8087 	bhi.w	800930c <HAL_TIM_ConfigClockSource+0x16c>
 80091fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009202:	f000 8086 	beq.w	8009312 <HAL_TIM_ConfigClockSource+0x172>
 8009206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800920a:	d87f      	bhi.n	800930c <HAL_TIM_ConfigClockSource+0x16c>
 800920c:	2b70      	cmp	r3, #112	@ 0x70
 800920e:	d01a      	beq.n	8009246 <HAL_TIM_ConfigClockSource+0xa6>
 8009210:	2b70      	cmp	r3, #112	@ 0x70
 8009212:	d87b      	bhi.n	800930c <HAL_TIM_ConfigClockSource+0x16c>
 8009214:	2b60      	cmp	r3, #96	@ 0x60
 8009216:	d050      	beq.n	80092ba <HAL_TIM_ConfigClockSource+0x11a>
 8009218:	2b60      	cmp	r3, #96	@ 0x60
 800921a:	d877      	bhi.n	800930c <HAL_TIM_ConfigClockSource+0x16c>
 800921c:	2b50      	cmp	r3, #80	@ 0x50
 800921e:	d03c      	beq.n	800929a <HAL_TIM_ConfigClockSource+0xfa>
 8009220:	2b50      	cmp	r3, #80	@ 0x50
 8009222:	d873      	bhi.n	800930c <HAL_TIM_ConfigClockSource+0x16c>
 8009224:	2b40      	cmp	r3, #64	@ 0x40
 8009226:	d058      	beq.n	80092da <HAL_TIM_ConfigClockSource+0x13a>
 8009228:	2b40      	cmp	r3, #64	@ 0x40
 800922a:	d86f      	bhi.n	800930c <HAL_TIM_ConfigClockSource+0x16c>
 800922c:	2b30      	cmp	r3, #48	@ 0x30
 800922e:	d064      	beq.n	80092fa <HAL_TIM_ConfigClockSource+0x15a>
 8009230:	2b30      	cmp	r3, #48	@ 0x30
 8009232:	d86b      	bhi.n	800930c <HAL_TIM_ConfigClockSource+0x16c>
 8009234:	2b20      	cmp	r3, #32
 8009236:	d060      	beq.n	80092fa <HAL_TIM_ConfigClockSource+0x15a>
 8009238:	2b20      	cmp	r3, #32
 800923a:	d867      	bhi.n	800930c <HAL_TIM_ConfigClockSource+0x16c>
 800923c:	2b00      	cmp	r3, #0
 800923e:	d05c      	beq.n	80092fa <HAL_TIM_ConfigClockSource+0x15a>
 8009240:	2b10      	cmp	r3, #16
 8009242:	d05a      	beq.n	80092fa <HAL_TIM_ConfigClockSource+0x15a>
 8009244:	e062      	b.n	800930c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009256:	f000 f9b9 	bl	80095cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009268:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	609a      	str	r2, [r3, #8]
      break;
 8009272:	e04f      	b.n	8009314 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009284:	f000 f9a2 	bl	80095cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	689a      	ldr	r2, [r3, #8]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009296:	609a      	str	r2, [r3, #8]
      break;
 8009298:	e03c      	b.n	8009314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092a6:	461a      	mov	r2, r3
 80092a8:	f000 f916 	bl	80094d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2150      	movs	r1, #80	@ 0x50
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f96f 	bl	8009596 <TIM_ITRx_SetConfig>
      break;
 80092b8:	e02c      	b.n	8009314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092c6:	461a      	mov	r2, r3
 80092c8:	f000 f935 	bl	8009536 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2160      	movs	r1, #96	@ 0x60
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 f95f 	bl	8009596 <TIM_ITRx_SetConfig>
      break;
 80092d8:	e01c      	b.n	8009314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092e6:	461a      	mov	r2, r3
 80092e8:	f000 f8f6 	bl	80094d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2140      	movs	r1, #64	@ 0x40
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 f94f 	bl	8009596 <TIM_ITRx_SetConfig>
      break;
 80092f8:	e00c      	b.n	8009314 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4619      	mov	r1, r3
 8009304:	4610      	mov	r0, r2
 8009306:	f000 f946 	bl	8009596 <TIM_ITRx_SetConfig>
      break;
 800930a:	e003      	b.n	8009314 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	73fb      	strb	r3, [r7, #15]
      break;
 8009310:	e000      	b.n	8009314 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009324:	7bfb      	ldrb	r3, [r7, #15]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800932e:	b480      	push	{r7}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800934a:	bf00      	nop
 800934c:	370c      	adds	r7, #12
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009356:	b480      	push	{r7}
 8009358:	b083      	sub	sp, #12
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800935e:	bf00      	nop
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800936a:	b480      	push	{r7}
 800936c:	b083      	sub	sp, #12
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009372:	bf00      	nop
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
	...

08009380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a46      	ldr	r2, [pc, #280]	@ (80094ac <TIM_Base_SetConfig+0x12c>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d013      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800939e:	d00f      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a43      	ldr	r2, [pc, #268]	@ (80094b0 <TIM_Base_SetConfig+0x130>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d00b      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a42      	ldr	r2, [pc, #264]	@ (80094b4 <TIM_Base_SetConfig+0x134>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d007      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a41      	ldr	r2, [pc, #260]	@ (80094b8 <TIM_Base_SetConfig+0x138>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d003      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a40      	ldr	r2, [pc, #256]	@ (80094bc <TIM_Base_SetConfig+0x13c>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d108      	bne.n	80093d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a35      	ldr	r2, [pc, #212]	@ (80094ac <TIM_Base_SetConfig+0x12c>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d02b      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093e0:	d027      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a32      	ldr	r2, [pc, #200]	@ (80094b0 <TIM_Base_SetConfig+0x130>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d023      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a31      	ldr	r2, [pc, #196]	@ (80094b4 <TIM_Base_SetConfig+0x134>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d01f      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a30      	ldr	r2, [pc, #192]	@ (80094b8 <TIM_Base_SetConfig+0x138>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d01b      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a2f      	ldr	r2, [pc, #188]	@ (80094bc <TIM_Base_SetConfig+0x13c>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d017      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a2e      	ldr	r2, [pc, #184]	@ (80094c0 <TIM_Base_SetConfig+0x140>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d013      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a2d      	ldr	r2, [pc, #180]	@ (80094c4 <TIM_Base_SetConfig+0x144>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00f      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a2c      	ldr	r2, [pc, #176]	@ (80094c8 <TIM_Base_SetConfig+0x148>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d00b      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a2b      	ldr	r2, [pc, #172]	@ (80094cc <TIM_Base_SetConfig+0x14c>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d007      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a2a      	ldr	r2, [pc, #168]	@ (80094d0 <TIM_Base_SetConfig+0x150>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d003      	beq.n	8009432 <TIM_Base_SetConfig+0xb2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a29      	ldr	r2, [pc, #164]	@ (80094d4 <TIM_Base_SetConfig+0x154>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d108      	bne.n	8009444 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	4313      	orrs	r3, r2
 8009442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	4313      	orrs	r3, r2
 8009450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a10      	ldr	r2, [pc, #64]	@ (80094ac <TIM_Base_SetConfig+0x12c>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d003      	beq.n	8009478 <TIM_Base_SetConfig+0xf8>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a12      	ldr	r2, [pc, #72]	@ (80094bc <TIM_Base_SetConfig+0x13c>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d103      	bne.n	8009480 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	691a      	ldr	r2, [r3, #16]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	f003 0301 	and.w	r3, r3, #1
 800948e:	2b01      	cmp	r3, #1
 8009490:	d105      	bne.n	800949e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	f023 0201 	bic.w	r2, r3, #1
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	611a      	str	r2, [r3, #16]
  }
}
 800949e:	bf00      	nop
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	40010000 	.word	0x40010000
 80094b0:	40000400 	.word	0x40000400
 80094b4:	40000800 	.word	0x40000800
 80094b8:	40000c00 	.word	0x40000c00
 80094bc:	40010400 	.word	0x40010400
 80094c0:	40014000 	.word	0x40014000
 80094c4:	40014400 	.word	0x40014400
 80094c8:	40014800 	.word	0x40014800
 80094cc:	40001800 	.word	0x40001800
 80094d0:	40001c00 	.word	0x40001c00
 80094d4:	40002000 	.word	0x40002000

080094d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094d8:	b480      	push	{r7}
 80094da:	b087      	sub	sp, #28
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6a1b      	ldr	r3, [r3, #32]
 80094e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	f023 0201 	bic.w	r2, r3, #1
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	011b      	lsls	r3, r3, #4
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	4313      	orrs	r3, r2
 800950c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f023 030a 	bic.w	r3, r3, #10
 8009514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	4313      	orrs	r3, r2
 800951c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	621a      	str	r2, [r3, #32]
}
 800952a:	bf00      	nop
 800952c:	371c      	adds	r7, #28
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr

08009536 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009536:	b480      	push	{r7}
 8009538:	b087      	sub	sp, #28
 800953a:	af00      	add	r7, sp, #0
 800953c:	60f8      	str	r0, [r7, #12]
 800953e:	60b9      	str	r1, [r7, #8]
 8009540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	f023 0210 	bic.w	r2, r3, #16
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009560:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	031b      	lsls	r3, r3, #12
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	4313      	orrs	r3, r2
 800956a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009572:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	011b      	lsls	r3, r3, #4
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	4313      	orrs	r3, r2
 800957c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	697a      	ldr	r2, [r7, #20]
 8009588:	621a      	str	r2, [r3, #32]
}
 800958a:	bf00      	nop
 800958c:	371c      	adds	r7, #28
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009596:	b480      	push	{r7}
 8009598:	b085      	sub	sp, #20
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	f043 0307 	orr.w	r3, r3, #7
 80095b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	609a      	str	r2, [r3, #8]
}
 80095c0:	bf00      	nop
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80095e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	021a      	lsls	r2, r3, #8
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	431a      	orrs	r2, r3
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	609a      	str	r2, [r3, #8]
}
 8009600:	bf00      	nop
 8009602:	371c      	adds	r7, #28
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800961c:	2b01      	cmp	r3, #1
 800961e:	d101      	bne.n	8009624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009620:	2302      	movs	r3, #2
 8009622:	e05a      	b.n	80096da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2202      	movs	r2, #2
 8009630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800964a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	4313      	orrs	r3, r2
 8009654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a21      	ldr	r2, [pc, #132]	@ (80096e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d022      	beq.n	80096ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009670:	d01d      	beq.n	80096ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a1d      	ldr	r2, [pc, #116]	@ (80096ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d018      	beq.n	80096ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a1b      	ldr	r2, [pc, #108]	@ (80096f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d013      	beq.n	80096ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a1a      	ldr	r2, [pc, #104]	@ (80096f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d00e      	beq.n	80096ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a18      	ldr	r2, [pc, #96]	@ (80096f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d009      	beq.n	80096ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a17      	ldr	r2, [pc, #92]	@ (80096fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d004      	beq.n	80096ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a15      	ldr	r2, [pc, #84]	@ (8009700 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d10c      	bne.n	80096c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	4313      	orrs	r3, r2
 80096be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	40010000 	.word	0x40010000
 80096ec:	40000400 	.word	0x40000400
 80096f0:	40000800 	.word	0x40000800
 80096f4:	40000c00 	.word	0x40000c00
 80096f8:	40010400 	.word	0x40010400
 80096fc:	40014000 	.word	0x40014000
 8009700:	40001800 	.word	0x40001800

08009704 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d101      	bne.n	800973e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800973a:	2301      	movs	r3, #1
 800973c:	e042      	b.n	80097c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	d106      	bne.n	8009758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7fa fe94 	bl	8004480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2224      	movs	r2, #36	@ 0x24
 800975c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68da      	ldr	r2, [r3, #12]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800976e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fc85 	bl	800a080 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	691a      	ldr	r2, [r3, #16]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	695a      	ldr	r2, [r3, #20]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68da      	ldr	r2, [r3, #12]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2220      	movs	r2, #32
 80097b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2220      	movs	r2, #32
 80097b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b0ba      	sub	sp, #232	@ 0xe8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80097fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009802:	f003 030f 	and.w	r3, r3, #15
 8009806:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800980a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10f      	bne.n	8009832 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009816:	f003 0320 	and.w	r3, r3, #32
 800981a:	2b00      	cmp	r3, #0
 800981c:	d009      	beq.n	8009832 <HAL_UART_IRQHandler+0x66>
 800981e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009822:	f003 0320 	and.w	r3, r3, #32
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fb69 	bl	8009f02 <UART_Receive_IT>
      return;
 8009830:	e25b      	b.n	8009cea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 80de 	beq.w	80099f8 <HAL_UART_IRQHandler+0x22c>
 800983c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	d106      	bne.n	8009856 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800984c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009850:	2b00      	cmp	r3, #0
 8009852:	f000 80d1 	beq.w	80099f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800985a:	f003 0301 	and.w	r3, r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	d00b      	beq.n	800987a <HAL_UART_IRQHandler+0xae>
 8009862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800986a:	2b00      	cmp	r3, #0
 800986c:	d005      	beq.n	800987a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009872:	f043 0201 	orr.w	r2, r3, #1
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800987a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800987e:	f003 0304 	and.w	r3, r3, #4
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00b      	beq.n	800989e <HAL_UART_IRQHandler+0xd2>
 8009886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	d005      	beq.n	800989e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009896:	f043 0202 	orr.w	r2, r3, #2
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800989e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098a2:	f003 0302 	and.w	r3, r3, #2
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00b      	beq.n	80098c2 <HAL_UART_IRQHandler+0xf6>
 80098aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d005      	beq.n	80098c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ba:	f043 0204 	orr.w	r2, r3, #4
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80098c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098c6:	f003 0308 	and.w	r3, r3, #8
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d011      	beq.n	80098f2 <HAL_UART_IRQHandler+0x126>
 80098ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098d2:	f003 0320 	and.w	r3, r3, #32
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d105      	bne.n	80098e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80098da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d005      	beq.n	80098f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ea:	f043 0208 	orr.w	r2, r3, #8
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 81f2 	beq.w	8009ce0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009900:	f003 0320 	and.w	r3, r3, #32
 8009904:	2b00      	cmp	r3, #0
 8009906:	d008      	beq.n	800991a <HAL_UART_IRQHandler+0x14e>
 8009908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800990c:	f003 0320 	and.w	r3, r3, #32
 8009910:	2b00      	cmp	r3, #0
 8009912:	d002      	beq.n	800991a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 faf4 	bl	8009f02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	695b      	ldr	r3, [r3, #20]
 8009920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009924:	2b40      	cmp	r3, #64	@ 0x40
 8009926:	bf0c      	ite	eq
 8009928:	2301      	moveq	r3, #1
 800992a:	2300      	movne	r3, #0
 800992c:	b2db      	uxtb	r3, r3
 800992e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009936:	f003 0308 	and.w	r3, r3, #8
 800993a:	2b00      	cmp	r3, #0
 800993c:	d103      	bne.n	8009946 <HAL_UART_IRQHandler+0x17a>
 800993e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009942:	2b00      	cmp	r3, #0
 8009944:	d04f      	beq.n	80099e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f9fc 	bl	8009d44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009956:	2b40      	cmp	r3, #64	@ 0x40
 8009958:	d141      	bne.n	80099de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3314      	adds	r3, #20
 8009960:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009964:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009970:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009978:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3314      	adds	r3, #20
 8009982:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009986:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800998a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009992:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009996:	e841 2300 	strex	r3, r2, [r1]
 800999a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800999e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1d9      	bne.n	800995a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d013      	beq.n	80099d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099b2:	4a7e      	ldr	r2, [pc, #504]	@ (8009bac <HAL_UART_IRQHandler+0x3e0>)
 80099b4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7fb fbcc 	bl	8005158 <HAL_DMA_Abort_IT>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d016      	beq.n	80099f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80099d0:	4610      	mov	r0, r2
 80099d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d4:	e00e      	b.n	80099f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f99e 	bl	8009d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099dc:	e00a      	b.n	80099f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f99a 	bl	8009d18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099e4:	e006      	b.n	80099f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f996 	bl	8009d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2200      	movs	r2, #0
 80099f0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80099f2:	e175      	b.n	8009ce0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099f4:	bf00      	nop
    return;
 80099f6:	e173      	b.n	8009ce0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	f040 814f 	bne.w	8009ca0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a06:	f003 0310 	and.w	r3, r3, #16
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f000 8148 	beq.w	8009ca0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a14:	f003 0310 	and.w	r3, r3, #16
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f000 8141 	beq.w	8009ca0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a1e:	2300      	movs	r3, #0
 8009a20:	60bb      	str	r3, [r7, #8]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	60bb      	str	r3, [r7, #8]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	60bb      	str	r3, [r7, #8]
 8009a32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a3e:	2b40      	cmp	r3, #64	@ 0x40
 8009a40:	f040 80b6 	bne.w	8009bb0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f000 8145 	beq.w	8009ce4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a62:	429a      	cmp	r2, r3
 8009a64:	f080 813e 	bcs.w	8009ce4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a7a:	f000 8088 	beq.w	8009b8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	330c      	adds	r3, #12
 8009a84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009a8c:	e853 3f00 	ldrex	r3, [r3]
 8009a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	330c      	adds	r3, #12
 8009aa6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009aaa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009aae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009ab6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009aba:	e841 2300 	strex	r3, r2, [r1]
 8009abe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1d9      	bne.n	8009a7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3314      	adds	r3, #20
 8009ad0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ad4:	e853 3f00 	ldrex	r3, [r3]
 8009ad8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ada:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009adc:	f023 0301 	bic.w	r3, r3, #1
 8009ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3314      	adds	r3, #20
 8009aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009aee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009af2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009af6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009afa:	e841 2300 	strex	r3, r2, [r1]
 8009afe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1e1      	bne.n	8009aca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3314      	adds	r3, #20
 8009b0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b10:	e853 3f00 	ldrex	r3, [r3]
 8009b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3314      	adds	r3, #20
 8009b26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009b2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009b30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009b32:	e841 2300 	strex	r3, r2, [r1]
 8009b36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009b38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1e3      	bne.n	8009b06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2220      	movs	r2, #32
 8009b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	330c      	adds	r3, #12
 8009b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b56:	e853 3f00 	ldrex	r3, [r3]
 8009b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b5e:	f023 0310 	bic.w	r3, r3, #16
 8009b62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	330c      	adds	r3, #12
 8009b6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009b70:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009b72:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b78:	e841 2300 	strex	r3, r2, [r1]
 8009b7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1e3      	bne.n	8009b4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fb fa75 	bl	8005078 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2202      	movs	r2, #2
 8009b92:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f8c1 	bl	8009d2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009baa:	e09b      	b.n	8009ce4 <HAL_UART_IRQHandler+0x518>
 8009bac:	08009e0b 	.word	0x08009e0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f000 808e 	beq.w	8009ce8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009bcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 8089 	beq.w	8009ce8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	330c      	adds	r3, #12
 8009bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	330c      	adds	r3, #12
 8009bf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009bfa:	647a      	str	r2, [r7, #68]	@ 0x44
 8009bfc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c02:	e841 2300 	strex	r3, r2, [r1]
 8009c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1e3      	bne.n	8009bd6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	3314      	adds	r3, #20
 8009c14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	f023 0301 	bic.w	r3, r3, #1
 8009c24:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3314      	adds	r3, #20
 8009c2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009c32:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c3a:	e841 2300 	strex	r3, r2, [r1]
 8009c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d1e3      	bne.n	8009c0e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	330c      	adds	r3, #12
 8009c5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	e853 3f00 	ldrex	r3, [r3]
 8009c62:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f023 0310 	bic.w	r3, r3, #16
 8009c6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	330c      	adds	r3, #12
 8009c74:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009c78:	61fa      	str	r2, [r7, #28]
 8009c7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7c:	69b9      	ldr	r1, [r7, #24]
 8009c7e:	69fa      	ldr	r2, [r7, #28]
 8009c80:	e841 2300 	strex	r3, r2, [r1]
 8009c84:	617b      	str	r3, [r7, #20]
   return(result);
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1e3      	bne.n	8009c54 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2202      	movs	r2, #2
 8009c90:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c96:	4619      	mov	r1, r3
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f847 	bl	8009d2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c9e:	e023      	b.n	8009ce8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d009      	beq.n	8009cc0 <HAL_UART_IRQHandler+0x4f4>
 8009cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d003      	beq.n	8009cc0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f8ba 	bl	8009e32 <UART_Transmit_IT>
    return;
 8009cbe:	e014      	b.n	8009cea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00e      	beq.n	8009cea <HAL_UART_IRQHandler+0x51e>
 8009ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d008      	beq.n	8009cea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 f8fa 	bl	8009ed2 <UART_EndTransmit_IT>
    return;
 8009cde:	e004      	b.n	8009cea <HAL_UART_IRQHandler+0x51e>
    return;
 8009ce0:	bf00      	nop
 8009ce2:	e002      	b.n	8009cea <HAL_UART_IRQHandler+0x51e>
      return;
 8009ce4:	bf00      	nop
 8009ce6:	e000      	b.n	8009cea <HAL_UART_IRQHandler+0x51e>
      return;
 8009ce8:	bf00      	nop
  }
}
 8009cea:	37e8      	adds	r7, #232	@ 0xe8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b095      	sub	sp, #84	@ 0x54
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	330c      	adds	r3, #12
 8009d52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d56:	e853 3f00 	ldrex	r3, [r3]
 8009d5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	330c      	adds	r3, #12
 8009d6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009d6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8009d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009d72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d74:	e841 2300 	strex	r3, r2, [r1]
 8009d78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1e5      	bne.n	8009d4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3314      	adds	r3, #20
 8009d86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d88:	6a3b      	ldr	r3, [r7, #32]
 8009d8a:	e853 3f00 	ldrex	r3, [r3]
 8009d8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	f023 0301 	bic.w	r3, r3, #1
 8009d96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	3314      	adds	r3, #20
 8009d9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009da0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009da2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009da8:	e841 2300 	strex	r3, r2, [r1]
 8009dac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1e5      	bne.n	8009d80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d119      	bne.n	8009df0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	330c      	adds	r3, #12
 8009dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	e853 3f00 	ldrex	r3, [r3]
 8009dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f023 0310 	bic.w	r3, r3, #16
 8009dd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	330c      	adds	r3, #12
 8009dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ddc:	61ba      	str	r2, [r7, #24]
 8009dde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009de0:	6979      	ldr	r1, [r7, #20]
 8009de2:	69ba      	ldr	r2, [r7, #24]
 8009de4:	e841 2300 	strex	r3, r2, [r1]
 8009de8:	613b      	str	r3, [r7, #16]
   return(result);
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1e5      	bne.n	8009dbc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2220      	movs	r2, #32
 8009df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009dfe:	bf00      	nop
 8009e00:	3754      	adds	r7, #84	@ 0x54
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b084      	sub	sp, #16
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f7ff ff77 	bl	8009d18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e2a:	bf00      	nop
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b085      	sub	sp, #20
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	2b21      	cmp	r3, #33	@ 0x21
 8009e44:	d13e      	bne.n	8009ec4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e4e:	d114      	bne.n	8009e7a <UART_Transmit_IT+0x48>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d110      	bne.n	8009e7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a1b      	ldr	r3, [r3, #32]
 8009e5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	461a      	mov	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	1c9a      	adds	r2, r3, #2
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	621a      	str	r2, [r3, #32]
 8009e78:	e008      	b.n	8009e8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	1c59      	adds	r1, r3, #1
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	6211      	str	r1, [r2, #32]
 8009e84:	781a      	ldrb	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	3b01      	subs	r3, #1
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10f      	bne.n	8009ec0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68da      	ldr	r2, [r3, #12]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009eae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68da      	ldr	r2, [r3, #12]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ebe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	e000      	b.n	8009ec6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ec4:	2302      	movs	r3, #2
  }
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3714      	adds	r7, #20
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68da      	ldr	r2, [r3, #12]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ee8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2220      	movs	r2, #32
 8009eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7ff fefc 	bl	8009cf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b08c      	sub	sp, #48	@ 0x30
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b22      	cmp	r3, #34	@ 0x22
 8009f14:	f040 80ae 	bne.w	800a074 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f20:	d117      	bne.n	8009f52 <UART_Receive_IT+0x50>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d113      	bne.n	8009f52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f32:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f40:	b29a      	uxth	r2, r3
 8009f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4a:	1c9a      	adds	r2, r3, #2
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009f50:	e026      	b.n	8009fa0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f64:	d007      	beq.n	8009f76 <UART_Receive_IT+0x74>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10a      	bne.n	8009f84 <UART_Receive_IT+0x82>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d106      	bne.n	8009f84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f80:	701a      	strb	r2, [r3, #0]
 8009f82:	e008      	b.n	8009f96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f9a:	1c5a      	adds	r2, r3, #1
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	4619      	mov	r1, r3
 8009fae:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d15d      	bne.n	800a070 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68da      	ldr	r2, [r3, #12]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f022 0220 	bic.w	r2, r2, #32
 8009fc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68da      	ldr	r2, [r3, #12]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009fd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	695a      	ldr	r2, [r3, #20]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f022 0201 	bic.w	r2, r2, #1
 8009fe2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2220      	movs	r2, #32
 8009fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d135      	bne.n	800a066 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	330c      	adds	r3, #12
 800a006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	e853 3f00 	ldrex	r3, [r3]
 800a00e:	613b      	str	r3, [r7, #16]
   return(result);
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f023 0310 	bic.w	r3, r3, #16
 800a016:	627b      	str	r3, [r7, #36]	@ 0x24
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	330c      	adds	r3, #12
 800a01e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a020:	623a      	str	r2, [r7, #32]
 800a022:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a024:	69f9      	ldr	r1, [r7, #28]
 800a026:	6a3a      	ldr	r2, [r7, #32]
 800a028:	e841 2300 	strex	r3, r2, [r1]
 800a02c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d1e5      	bne.n	800a000 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 0310 	and.w	r3, r3, #16
 800a03e:	2b10      	cmp	r3, #16
 800a040:	d10a      	bne.n	800a058 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a042:	2300      	movs	r3, #0
 800a044:	60fb      	str	r3, [r7, #12]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	60fb      	str	r3, [r7, #12]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	60fb      	str	r3, [r7, #12]
 800a056:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff fe64 	bl	8009d2c <HAL_UARTEx_RxEventCallback>
 800a064:	e002      	b.n	800a06c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7ff fe4c 	bl	8009d04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	e002      	b.n	800a076 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	e000      	b.n	800a076 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a074:	2302      	movs	r3, #2
  }
}
 800a076:	4618      	mov	r0, r3
 800a078:	3730      	adds	r7, #48	@ 0x30
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a084:	b0c0      	sub	sp, #256	@ 0x100
 800a086:	af00      	add	r7, sp, #0
 800a088:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a08c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	691b      	ldr	r3, [r3, #16]
 800a094:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a09c:	68d9      	ldr	r1, [r3, #12]
 800a09e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	ea40 0301 	orr.w	r3, r0, r1
 800a0a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a0aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	431a      	orrs	r2, r3
 800a0b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0bc:	695b      	ldr	r3, [r3, #20]
 800a0be:	431a      	orrs	r2, r3
 800a0c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0c4:	69db      	ldr	r3, [r3, #28]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a0cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a0d8:	f021 010c 	bic.w	r1, r1, #12
 800a0dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a0e6:	430b      	orrs	r3, r1
 800a0e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a0ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a0f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0fa:	6999      	ldr	r1, [r3, #24]
 800a0fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	ea40 0301 	orr.w	r3, r0, r1
 800a106:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	4b8f      	ldr	r3, [pc, #572]	@ (800a34c <UART_SetConfig+0x2cc>)
 800a110:	429a      	cmp	r2, r3
 800a112:	d005      	beq.n	800a120 <UART_SetConfig+0xa0>
 800a114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	4b8d      	ldr	r3, [pc, #564]	@ (800a350 <UART_SetConfig+0x2d0>)
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d104      	bne.n	800a12a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a120:	f7fc f8e0 	bl	80062e4 <HAL_RCC_GetPCLK2Freq>
 800a124:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a128:	e003      	b.n	800a132 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a12a:	f7fc f8c7 	bl	80062bc <HAL_RCC_GetPCLK1Freq>
 800a12e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a136:	69db      	ldr	r3, [r3, #28]
 800a138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a13c:	f040 810c 	bne.w	800a358 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a144:	2200      	movs	r2, #0
 800a146:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a14a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a14e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a152:	4622      	mov	r2, r4
 800a154:	462b      	mov	r3, r5
 800a156:	1891      	adds	r1, r2, r2
 800a158:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a15a:	415b      	adcs	r3, r3
 800a15c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a15e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a162:	4621      	mov	r1, r4
 800a164:	eb12 0801 	adds.w	r8, r2, r1
 800a168:	4629      	mov	r1, r5
 800a16a:	eb43 0901 	adc.w	r9, r3, r1
 800a16e:	f04f 0200 	mov.w	r2, #0
 800a172:	f04f 0300 	mov.w	r3, #0
 800a176:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a17a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a17e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a182:	4690      	mov	r8, r2
 800a184:	4699      	mov	r9, r3
 800a186:	4623      	mov	r3, r4
 800a188:	eb18 0303 	adds.w	r3, r8, r3
 800a18c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a190:	462b      	mov	r3, r5
 800a192:	eb49 0303 	adc.w	r3, r9, r3
 800a196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a19a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a1a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a1aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	18db      	adds	r3, r3, r3
 800a1b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	eb42 0303 	adc.w	r3, r2, r3
 800a1ba:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a1c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a1c4:	f7f6 f808 	bl	80001d8 <__aeabi_uldivmod>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4b61      	ldr	r3, [pc, #388]	@ (800a354 <UART_SetConfig+0x2d4>)
 800a1ce:	fba3 2302 	umull	r2, r3, r3, r2
 800a1d2:	095b      	lsrs	r3, r3, #5
 800a1d4:	011c      	lsls	r4, r3, #4
 800a1d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a1e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a1e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a1e8:	4642      	mov	r2, r8
 800a1ea:	464b      	mov	r3, r9
 800a1ec:	1891      	adds	r1, r2, r2
 800a1ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a1f0:	415b      	adcs	r3, r3
 800a1f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a1f8:	4641      	mov	r1, r8
 800a1fa:	eb12 0a01 	adds.w	sl, r2, r1
 800a1fe:	4649      	mov	r1, r9
 800a200:	eb43 0b01 	adc.w	fp, r3, r1
 800a204:	f04f 0200 	mov.w	r2, #0
 800a208:	f04f 0300 	mov.w	r3, #0
 800a20c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a210:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a218:	4692      	mov	sl, r2
 800a21a:	469b      	mov	fp, r3
 800a21c:	4643      	mov	r3, r8
 800a21e:	eb1a 0303 	adds.w	r3, sl, r3
 800a222:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a226:	464b      	mov	r3, r9
 800a228:	eb4b 0303 	adc.w	r3, fp, r3
 800a22c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a23c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a240:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a244:	460b      	mov	r3, r1
 800a246:	18db      	adds	r3, r3, r3
 800a248:	643b      	str	r3, [r7, #64]	@ 0x40
 800a24a:	4613      	mov	r3, r2
 800a24c:	eb42 0303 	adc.w	r3, r2, r3
 800a250:	647b      	str	r3, [r7, #68]	@ 0x44
 800a252:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a256:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a25a:	f7f5 ffbd 	bl	80001d8 <__aeabi_uldivmod>
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	4611      	mov	r1, r2
 800a264:	4b3b      	ldr	r3, [pc, #236]	@ (800a354 <UART_SetConfig+0x2d4>)
 800a266:	fba3 2301 	umull	r2, r3, r3, r1
 800a26a:	095b      	lsrs	r3, r3, #5
 800a26c:	2264      	movs	r2, #100	@ 0x64
 800a26e:	fb02 f303 	mul.w	r3, r2, r3
 800a272:	1acb      	subs	r3, r1, r3
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a27a:	4b36      	ldr	r3, [pc, #216]	@ (800a354 <UART_SetConfig+0x2d4>)
 800a27c:	fba3 2302 	umull	r2, r3, r3, r2
 800a280:	095b      	lsrs	r3, r3, #5
 800a282:	005b      	lsls	r3, r3, #1
 800a284:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a288:	441c      	add	r4, r3
 800a28a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a28e:	2200      	movs	r2, #0
 800a290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a294:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a298:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a29c:	4642      	mov	r2, r8
 800a29e:	464b      	mov	r3, r9
 800a2a0:	1891      	adds	r1, r2, r2
 800a2a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a2a4:	415b      	adcs	r3, r3
 800a2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a2ac:	4641      	mov	r1, r8
 800a2ae:	1851      	adds	r1, r2, r1
 800a2b0:	6339      	str	r1, [r7, #48]	@ 0x30
 800a2b2:	4649      	mov	r1, r9
 800a2b4:	414b      	adcs	r3, r1
 800a2b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2b8:	f04f 0200 	mov.w	r2, #0
 800a2bc:	f04f 0300 	mov.w	r3, #0
 800a2c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a2c4:	4659      	mov	r1, fp
 800a2c6:	00cb      	lsls	r3, r1, #3
 800a2c8:	4651      	mov	r1, sl
 800a2ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2ce:	4651      	mov	r1, sl
 800a2d0:	00ca      	lsls	r2, r1, #3
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	4642      	mov	r2, r8
 800a2da:	189b      	adds	r3, r3, r2
 800a2dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a2e0:	464b      	mov	r3, r9
 800a2e2:	460a      	mov	r2, r1
 800a2e4:	eb42 0303 	adc.w	r3, r2, r3
 800a2e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a2ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a2f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a2fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a300:	460b      	mov	r3, r1
 800a302:	18db      	adds	r3, r3, r3
 800a304:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a306:	4613      	mov	r3, r2
 800a308:	eb42 0303 	adc.w	r3, r2, r3
 800a30c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a30e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a312:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a316:	f7f5 ff5f 	bl	80001d8 <__aeabi_uldivmod>
 800a31a:	4602      	mov	r2, r0
 800a31c:	460b      	mov	r3, r1
 800a31e:	4b0d      	ldr	r3, [pc, #52]	@ (800a354 <UART_SetConfig+0x2d4>)
 800a320:	fba3 1302 	umull	r1, r3, r3, r2
 800a324:	095b      	lsrs	r3, r3, #5
 800a326:	2164      	movs	r1, #100	@ 0x64
 800a328:	fb01 f303 	mul.w	r3, r1, r3
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	00db      	lsls	r3, r3, #3
 800a330:	3332      	adds	r3, #50	@ 0x32
 800a332:	4a08      	ldr	r2, [pc, #32]	@ (800a354 <UART_SetConfig+0x2d4>)
 800a334:	fba2 2303 	umull	r2, r3, r2, r3
 800a338:	095b      	lsrs	r3, r3, #5
 800a33a:	f003 0207 	and.w	r2, r3, #7
 800a33e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4422      	add	r2, r4
 800a346:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a348:	e106      	b.n	800a558 <UART_SetConfig+0x4d8>
 800a34a:	bf00      	nop
 800a34c:	40011000 	.word	0x40011000
 800a350:	40011400 	.word	0x40011400
 800a354:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a35c:	2200      	movs	r2, #0
 800a35e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a362:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a366:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a36a:	4642      	mov	r2, r8
 800a36c:	464b      	mov	r3, r9
 800a36e:	1891      	adds	r1, r2, r2
 800a370:	6239      	str	r1, [r7, #32]
 800a372:	415b      	adcs	r3, r3
 800a374:	627b      	str	r3, [r7, #36]	@ 0x24
 800a376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a37a:	4641      	mov	r1, r8
 800a37c:	1854      	adds	r4, r2, r1
 800a37e:	4649      	mov	r1, r9
 800a380:	eb43 0501 	adc.w	r5, r3, r1
 800a384:	f04f 0200 	mov.w	r2, #0
 800a388:	f04f 0300 	mov.w	r3, #0
 800a38c:	00eb      	lsls	r3, r5, #3
 800a38e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a392:	00e2      	lsls	r2, r4, #3
 800a394:	4614      	mov	r4, r2
 800a396:	461d      	mov	r5, r3
 800a398:	4643      	mov	r3, r8
 800a39a:	18e3      	adds	r3, r4, r3
 800a39c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a3a0:	464b      	mov	r3, r9
 800a3a2:	eb45 0303 	adc.w	r3, r5, r3
 800a3a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a3b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a3ba:	f04f 0200 	mov.w	r2, #0
 800a3be:	f04f 0300 	mov.w	r3, #0
 800a3c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	008b      	lsls	r3, r1, #2
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	008a      	lsls	r2, r1, #2
 800a3d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a3d8:	f7f5 fefe 	bl	80001d8 <__aeabi_uldivmod>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4b60      	ldr	r3, [pc, #384]	@ (800a564 <UART_SetConfig+0x4e4>)
 800a3e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a3e6:	095b      	lsrs	r3, r3, #5
 800a3e8:	011c      	lsls	r4, r3, #4
 800a3ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a3f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a3f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a3fc:	4642      	mov	r2, r8
 800a3fe:	464b      	mov	r3, r9
 800a400:	1891      	adds	r1, r2, r2
 800a402:	61b9      	str	r1, [r7, #24]
 800a404:	415b      	adcs	r3, r3
 800a406:	61fb      	str	r3, [r7, #28]
 800a408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a40c:	4641      	mov	r1, r8
 800a40e:	1851      	adds	r1, r2, r1
 800a410:	6139      	str	r1, [r7, #16]
 800a412:	4649      	mov	r1, r9
 800a414:	414b      	adcs	r3, r1
 800a416:	617b      	str	r3, [r7, #20]
 800a418:	f04f 0200 	mov.w	r2, #0
 800a41c:	f04f 0300 	mov.w	r3, #0
 800a420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a424:	4659      	mov	r1, fp
 800a426:	00cb      	lsls	r3, r1, #3
 800a428:	4651      	mov	r1, sl
 800a42a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a42e:	4651      	mov	r1, sl
 800a430:	00ca      	lsls	r2, r1, #3
 800a432:	4610      	mov	r0, r2
 800a434:	4619      	mov	r1, r3
 800a436:	4603      	mov	r3, r0
 800a438:	4642      	mov	r2, r8
 800a43a:	189b      	adds	r3, r3, r2
 800a43c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a440:	464b      	mov	r3, r9
 800a442:	460a      	mov	r2, r1
 800a444:	eb42 0303 	adc.w	r3, r2, r3
 800a448:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a44c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a456:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a458:	f04f 0200 	mov.w	r2, #0
 800a45c:	f04f 0300 	mov.w	r3, #0
 800a460:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a464:	4649      	mov	r1, r9
 800a466:	008b      	lsls	r3, r1, #2
 800a468:	4641      	mov	r1, r8
 800a46a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a46e:	4641      	mov	r1, r8
 800a470:	008a      	lsls	r2, r1, #2
 800a472:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a476:	f7f5 feaf 	bl	80001d8 <__aeabi_uldivmod>
 800a47a:	4602      	mov	r2, r0
 800a47c:	460b      	mov	r3, r1
 800a47e:	4611      	mov	r1, r2
 800a480:	4b38      	ldr	r3, [pc, #224]	@ (800a564 <UART_SetConfig+0x4e4>)
 800a482:	fba3 2301 	umull	r2, r3, r3, r1
 800a486:	095b      	lsrs	r3, r3, #5
 800a488:	2264      	movs	r2, #100	@ 0x64
 800a48a:	fb02 f303 	mul.w	r3, r2, r3
 800a48e:	1acb      	subs	r3, r1, r3
 800a490:	011b      	lsls	r3, r3, #4
 800a492:	3332      	adds	r3, #50	@ 0x32
 800a494:	4a33      	ldr	r2, [pc, #204]	@ (800a564 <UART_SetConfig+0x4e4>)
 800a496:	fba2 2303 	umull	r2, r3, r2, r3
 800a49a:	095b      	lsrs	r3, r3, #5
 800a49c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a4a0:	441c      	add	r4, r3
 800a4a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	673b      	str	r3, [r7, #112]	@ 0x70
 800a4aa:	677a      	str	r2, [r7, #116]	@ 0x74
 800a4ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a4b0:	4642      	mov	r2, r8
 800a4b2:	464b      	mov	r3, r9
 800a4b4:	1891      	adds	r1, r2, r2
 800a4b6:	60b9      	str	r1, [r7, #8]
 800a4b8:	415b      	adcs	r3, r3
 800a4ba:	60fb      	str	r3, [r7, #12]
 800a4bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4c0:	4641      	mov	r1, r8
 800a4c2:	1851      	adds	r1, r2, r1
 800a4c4:	6039      	str	r1, [r7, #0]
 800a4c6:	4649      	mov	r1, r9
 800a4c8:	414b      	adcs	r3, r1
 800a4ca:	607b      	str	r3, [r7, #4]
 800a4cc:	f04f 0200 	mov.w	r2, #0
 800a4d0:	f04f 0300 	mov.w	r3, #0
 800a4d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a4d8:	4659      	mov	r1, fp
 800a4da:	00cb      	lsls	r3, r1, #3
 800a4dc:	4651      	mov	r1, sl
 800a4de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4e2:	4651      	mov	r1, sl
 800a4e4:	00ca      	lsls	r2, r1, #3
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	4642      	mov	r2, r8
 800a4ee:	189b      	adds	r3, r3, r2
 800a4f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4f2:	464b      	mov	r3, r9
 800a4f4:	460a      	mov	r2, r1
 800a4f6:	eb42 0303 	adc.w	r3, r2, r3
 800a4fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a4fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	663b      	str	r3, [r7, #96]	@ 0x60
 800a506:	667a      	str	r2, [r7, #100]	@ 0x64
 800a508:	f04f 0200 	mov.w	r2, #0
 800a50c:	f04f 0300 	mov.w	r3, #0
 800a510:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a514:	4649      	mov	r1, r9
 800a516:	008b      	lsls	r3, r1, #2
 800a518:	4641      	mov	r1, r8
 800a51a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a51e:	4641      	mov	r1, r8
 800a520:	008a      	lsls	r2, r1, #2
 800a522:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a526:	f7f5 fe57 	bl	80001d8 <__aeabi_uldivmod>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	4b0d      	ldr	r3, [pc, #52]	@ (800a564 <UART_SetConfig+0x4e4>)
 800a530:	fba3 1302 	umull	r1, r3, r3, r2
 800a534:	095b      	lsrs	r3, r3, #5
 800a536:	2164      	movs	r1, #100	@ 0x64
 800a538:	fb01 f303 	mul.w	r3, r1, r3
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	011b      	lsls	r3, r3, #4
 800a540:	3332      	adds	r3, #50	@ 0x32
 800a542:	4a08      	ldr	r2, [pc, #32]	@ (800a564 <UART_SetConfig+0x4e4>)
 800a544:	fba2 2303 	umull	r2, r3, r2, r3
 800a548:	095b      	lsrs	r3, r3, #5
 800a54a:	f003 020f 	and.w	r2, r3, #15
 800a54e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4422      	add	r2, r4
 800a556:	609a      	str	r2, [r3, #8]
}
 800a558:	bf00      	nop
 800a55a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a55e:	46bd      	mov	sp, r7
 800a560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a564:	51eb851f 	.word	0x51eb851f

0800a568 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a568:	b084      	sub	sp, #16
 800a56a:	b480      	push	{r7}
 800a56c:	b085      	sub	sp, #20
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	f107 001c 	add.w	r0, r7, #28
 800a576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a57e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a580:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a582:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a586:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a58a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a58e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a592:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	4313      	orrs	r3, r2
 800a598:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a5a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	431a      	orrs	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	b004      	add	sp, #16
 800a5bc:	4770      	bx	lr

0800a5be <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b083      	sub	sp, #12
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	370c      	adds	r7, #12
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr

0800a5fa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a5fa:	b480      	push	{r7}
 800a5fc:	b083      	sub	sp, #12
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2203      	movs	r2, #3
 800a606:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	370c      	adds	r7, #12
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a616:	b480      	push	{r7}
 800a618:	b083      	sub	sp, #12
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0303 	and.w	r3, r3, #3
}
 800a626:	4618      	mov	r0, r3
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a632:	b480      	push	{r7}
 800a634:	b085      	sub	sp, #20
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a650:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a656:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a65c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	4313      	orrs	r3, r2
 800a662:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a66c:	f023 030f 	bic.w	r3, r3, #15
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	431a      	orrs	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3714      	adds	r7, #20
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	b2db      	uxtb	r3, r3
}
 800a694:	4618      	mov	r0, r3
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	3314      	adds	r3, #20
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
}  
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b085      	sub	sp, #20
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	685a      	ldr	r2, [r3, #4]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a6ec:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a6f2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a6f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a704:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	431a      	orrs	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a710:	2300      	movs	r3, #0

}
 800a712:	4618      	mov	r0, r3
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b088      	sub	sp, #32
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a72c:	2310      	movs	r3, #16
 800a72e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a730:	2340      	movs	r3, #64	@ 0x40
 800a732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a734:	2300      	movs	r3, #0
 800a736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a738:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a73c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a73e:	f107 0308 	add.w	r3, r7, #8
 800a742:	4619      	mov	r1, r3
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff ff74 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a74a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a74e:	2110      	movs	r1, #16
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 f9d7 	bl	800ab04 <SDMMC_GetCmdResp1>
 800a756:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a758:	69fb      	ldr	r3, [r7, #28]
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3720      	adds	r7, #32
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b088      	sub	sp, #32
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a770:	2311      	movs	r3, #17
 800a772:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a774:	2340      	movs	r3, #64	@ 0x40
 800a776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a778:	2300      	movs	r3, #0
 800a77a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a77c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a780:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a782:	f107 0308 	add.w	r3, r7, #8
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f7ff ff52 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a78e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a792:	2111      	movs	r1, #17
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f9b5 	bl	800ab04 <SDMMC_GetCmdResp1>
 800a79a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a79c:	69fb      	ldr	r3, [r7, #28]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3720      	adds	r7, #32
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b088      	sub	sp, #32
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a7b4:	2312      	movs	r3, #18
 800a7b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7b8:	2340      	movs	r3, #64	@ 0x40
 800a7ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7c6:	f107 0308 	add.w	r3, r7, #8
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff ff30 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a7d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7d6:	2112      	movs	r1, #18
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f993 	bl	800ab04 <SDMMC_GetCmdResp1>
 800a7de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7e0:	69fb      	ldr	r3, [r7, #28]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3720      	adds	r7, #32
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b088      	sub	sp, #32
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
 800a7f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a7f8:	2318      	movs	r3, #24
 800a7fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7fc:	2340      	movs	r3, #64	@ 0x40
 800a7fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a800:	2300      	movs	r3, #0
 800a802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a804:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a808:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a80a:	f107 0308 	add.w	r3, r7, #8
 800a80e:	4619      	mov	r1, r3
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff ff0e 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a81a:	2118      	movs	r1, #24
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 f971 	bl	800ab04 <SDMMC_GetCmdResp1>
 800a822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a824:	69fb      	ldr	r3, [r7, #28]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3720      	adds	r7, #32
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b088      	sub	sp, #32
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a83c:	2319      	movs	r3, #25
 800a83e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a840:	2340      	movs	r3, #64	@ 0x40
 800a842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a844:	2300      	movs	r3, #0
 800a846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a84c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a84e:	f107 0308 	add.w	r3, r7, #8
 800a852:	4619      	mov	r1, r3
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f7ff feec 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a85a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a85e:	2119      	movs	r1, #25
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f000 f94f 	bl	800ab04 <SDMMC_GetCmdResp1>
 800a866:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a868:	69fb      	ldr	r3, [r7, #28]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3720      	adds	r7, #32
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a880:	230c      	movs	r3, #12
 800a882:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a884:	2340      	movs	r3, #64	@ 0x40
 800a886:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a888:	2300      	movs	r3, #0
 800a88a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a88c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a890:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a892:	f107 0308 	add.w	r3, r7, #8
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f7ff feca 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a89e:	4a05      	ldr	r2, [pc, #20]	@ (800a8b4 <SDMMC_CmdStopTransfer+0x40>)
 800a8a0:	210c      	movs	r1, #12
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f92e 	bl	800ab04 <SDMMC_GetCmdResp1>
 800a8a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8aa:	69fb      	ldr	r3, [r7, #28]
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3720      	adds	r7, #32
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	05f5e100 	.word	0x05f5e100

0800a8b8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b08a      	sub	sp, #40	@ 0x28
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a8c8:	2307      	movs	r3, #7
 800a8ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8cc:	2340      	movs	r3, #64	@ 0x40
 800a8ce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8d8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8da:	f107 0310 	add.w	r3, r7, #16
 800a8de:	4619      	mov	r1, r3
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f7ff fea6 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a8e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8ea:	2107      	movs	r1, #7
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f000 f909 	bl	800ab04 <SDMMC_GetCmdResp1>
 800a8f2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3728      	adds	r7, #40	@ 0x28
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b088      	sub	sp, #32
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a90a:	2300      	movs	r3, #0
 800a90c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a90e:	2300      	movs	r3, #0
 800a910:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a912:	2300      	movs	r3, #0
 800a914:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a916:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a91a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a91c:	f107 0308 	add.w	r3, r7, #8
 800a920:	4619      	mov	r1, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f7ff fe85 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 fb23 	bl	800af74 <SDMMC_GetCmdError>
 800a92e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a930:	69fb      	ldr	r3, [r7, #28]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3720      	adds	r7, #32
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b088      	sub	sp, #32
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a942:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a946:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a948:	2308      	movs	r3, #8
 800a94a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a94c:	2340      	movs	r3, #64	@ 0x40
 800a94e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a950:	2300      	movs	r3, #0
 800a952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a954:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a958:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a95a:	f107 0308 	add.w	r3, r7, #8
 800a95e:	4619      	mov	r1, r3
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f7ff fe66 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fab6 	bl	800aed8 <SDMMC_GetCmdResp7>
 800a96c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a96e:	69fb      	ldr	r3, [r7, #28]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3720      	adds	r7, #32
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b088      	sub	sp, #32
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a986:	2337      	movs	r3, #55	@ 0x37
 800a988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a98a:	2340      	movs	r3, #64	@ 0x40
 800a98c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a98e:	2300      	movs	r3, #0
 800a990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a992:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a996:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a998:	f107 0308 	add.w	r3, r7, #8
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f7ff fe47 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a9a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9a8:	2137      	movs	r1, #55	@ 0x37
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f8aa 	bl	800ab04 <SDMMC_GetCmdResp1>
 800a9b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9b2:	69fb      	ldr	r3, [r7, #28]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3720      	adds	r7, #32
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b088      	sub	sp, #32
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a9cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a9d2:	2329      	movs	r3, #41	@ 0x29
 800a9d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9d6:	2340      	movs	r3, #64	@ 0x40
 800a9d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9e4:	f107 0308 	add.w	r3, r7, #8
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7ff fe21 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 f9bd 	bl	800ad70 <SDMMC_GetCmdResp3>
 800a9f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9f8:	69fb      	ldr	r3, [r7, #28]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3720      	adds	r7, #32
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b088      	sub	sp, #32
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aa0e:	2302      	movs	r3, #2
 800aa10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800aa12:	23c0      	movs	r3, #192	@ 0xc0
 800aa14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa16:	2300      	movs	r3, #0
 800aa18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa20:	f107 0308 	add.w	r3, r7, #8
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7ff fe03 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 f957 	bl	800ace0 <SDMMC_GetCmdResp2>
 800aa32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa34:	69fb      	ldr	r3, [r7, #28]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3720      	adds	r7, #32
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b088      	sub	sp, #32
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aa4c:	2309      	movs	r3, #9
 800aa4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800aa50:	23c0      	movs	r3, #192	@ 0xc0
 800aa52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa54:	2300      	movs	r3, #0
 800aa56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa5c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa5e:	f107 0308 	add.w	r3, r7, #8
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f7ff fde4 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f938 	bl	800ace0 <SDMMC_GetCmdResp2>
 800aa70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa72:	69fb      	ldr	r3, [r7, #28]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3720      	adds	r7, #32
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800aa86:	2300      	movs	r3, #0
 800aa88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aa8a:	2303      	movs	r3, #3
 800aa8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa8e:	2340      	movs	r3, #64	@ 0x40
 800aa90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa92:	2300      	movs	r3, #0
 800aa94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa9c:	f107 0308 	add.w	r3, r7, #8
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff fdc5 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aaa8:	683a      	ldr	r2, [r7, #0]
 800aaaa:	2103      	movs	r1, #3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 f99d 	bl	800adec <SDMMC_GetCmdResp6>
 800aab2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aab4:	69fb      	ldr	r3, [r7, #28]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3720      	adds	r7, #32
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b088      	sub	sp, #32
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
 800aac6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aacc:	230d      	movs	r3, #13
 800aace:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aad0:	2340      	movs	r3, #64	@ 0x40
 800aad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aad4:	2300      	movs	r3, #0
 800aad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aad8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aadc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aade:	f107 0308 	add.w	r3, r7, #8
 800aae2:	4619      	mov	r1, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f7ff fda4 	bl	800a632 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800aaea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aaee:	210d      	movs	r1, #13
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 f807 	bl	800ab04 <SDMMC_GetCmdResp1>
 800aaf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaf8:	69fb      	ldr	r3, [r7, #28]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3720      	adds	r7, #32
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
	...

0800ab04 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b088      	sub	sp, #32
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	607a      	str	r2, [r7, #4]
 800ab10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ab12:	4b70      	ldr	r3, [pc, #448]	@ (800acd4 <SDMMC_GetCmdResp1+0x1d0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a70      	ldr	r2, [pc, #448]	@ (800acd8 <SDMMC_GetCmdResp1+0x1d4>)
 800ab18:	fba2 2303 	umull	r2, r3, r2, r3
 800ab1c:	0a5a      	lsrs	r2, r3, #9
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	fb02 f303 	mul.w	r3, r2, r3
 800ab24:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	1e5a      	subs	r2, r3, #1
 800ab2a:	61fa      	str	r2, [r7, #28]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d102      	bne.n	800ab36 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ab34:	e0c9      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab3a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d0ef      	beq.n	800ab26 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1ea      	bne.n	800ab26 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab54:	f003 0304 	and.w	r3, r3, #4
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d004      	beq.n	800ab66 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2204      	movs	r2, #4
 800ab60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab62:	2304      	movs	r3, #4
 800ab64:	e0b1      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d004      	beq.n	800ab7c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2201      	movs	r2, #1
 800ab76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e0a6      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	22c5      	movs	r2, #197	@ 0xc5
 800ab80:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7ff fd7f 	bl	800a686 <SDIO_GetCommandResponse>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	7afb      	ldrb	r3, [r7, #11]
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d001      	beq.n	800ab96 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e099      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ab96:	2100      	movs	r1, #0
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f7ff fd81 	bl	800a6a0 <SDIO_GetResponse>
 800ab9e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	4b4e      	ldr	r3, [pc, #312]	@ (800acdc <SDMMC_GetCmdResp1+0x1d8>)
 800aba4:	4013      	ands	r3, r2
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800abaa:	2300      	movs	r3, #0
 800abac:	e08d      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	da02      	bge.n	800abba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800abb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800abb8:	e087      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d001      	beq.n	800abc8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800abc4:	2340      	movs	r3, #64	@ 0x40
 800abc6:	e080      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800abd2:	2380      	movs	r3, #128	@ 0x80
 800abd4:	e079      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800abe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800abe4:	e071      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d002      	beq.n	800abf6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800abf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abf4:	e069      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d002      	beq.n	800ac06 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ac00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac04:	e061      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d002      	beq.n	800ac16 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ac10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ac14:	e059      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ac20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac24:	e051      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d002      	beq.n	800ac36 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ac30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ac34:	e049      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ac40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ac44:	e041      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ac50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac54:	e039      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d002      	beq.n	800ac66 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ac60:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ac64:	e031      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ac70:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ac74:	e029      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d002      	beq.n	800ac86 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ac80:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ac84:	e021      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ac90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ac94:	e019      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d002      	beq.n	800aca6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aca0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800aca4:	e011      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800acb0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800acb4:	e009      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	f003 0308 	and.w	r3, r3, #8
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800acc0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800acc4:	e001      	b.n	800acca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800acc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800acca:	4618      	mov	r0, r3
 800accc:	3720      	adds	r7, #32
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	20000010 	.word	0x20000010
 800acd8:	10624dd3 	.word	0x10624dd3
 800acdc:	fdffe008 	.word	0xfdffe008

0800ace0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ace8:	4b1f      	ldr	r3, [pc, #124]	@ (800ad68 <SDMMC_GetCmdResp2+0x88>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a1f      	ldr	r2, [pc, #124]	@ (800ad6c <SDMMC_GetCmdResp2+0x8c>)
 800acee:	fba2 2303 	umull	r2, r3, r2, r3
 800acf2:	0a5b      	lsrs	r3, r3, #9
 800acf4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acf8:	fb02 f303 	mul.w	r3, r2, r3
 800acfc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	1e5a      	subs	r2, r3, #1
 800ad02:	60fa      	str	r2, [r7, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d102      	bne.n	800ad0e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad08:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ad0c:	e026      	b.n	800ad5c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad12:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d0ef      	beq.n	800acfe <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d1ea      	bne.n	800acfe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad2c:	f003 0304 	and.w	r3, r3, #4
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d004      	beq.n	800ad3e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2204      	movs	r2, #4
 800ad38:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad3a:	2304      	movs	r3, #4
 800ad3c:	e00e      	b.n	800ad5c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d004      	beq.n	800ad54 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e003      	b.n	800ad5c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	22c5      	movs	r2, #197	@ 0xc5
 800ad58:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3714      	adds	r7, #20
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	20000010 	.word	0x20000010
 800ad6c:	10624dd3 	.word	0x10624dd3

0800ad70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad78:	4b1a      	ldr	r3, [pc, #104]	@ (800ade4 <SDMMC_GetCmdResp3+0x74>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a1a      	ldr	r2, [pc, #104]	@ (800ade8 <SDMMC_GetCmdResp3+0x78>)
 800ad7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad82:	0a5b      	lsrs	r3, r3, #9
 800ad84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad88:	fb02 f303 	mul.w	r3, r2, r3
 800ad8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	1e5a      	subs	r2, r3, #1
 800ad92:	60fa      	str	r2, [r7, #12]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d102      	bne.n	800ad9e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ad9c:	e01b      	b.n	800add6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ada2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d0ef      	beq.n	800ad8e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1ea      	bne.n	800ad8e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adbc:	f003 0304 	and.w	r3, r3, #4
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d004      	beq.n	800adce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2204      	movs	r2, #4
 800adc8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800adca:	2304      	movs	r3, #4
 800adcc:	e003      	b.n	800add6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	22c5      	movs	r2, #197	@ 0xc5
 800add2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	20000010 	.word	0x20000010
 800ade8:	10624dd3 	.word	0x10624dd3

0800adec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b088      	sub	sp, #32
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	460b      	mov	r3, r1
 800adf6:	607a      	str	r2, [r7, #4]
 800adf8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800adfa:	4b35      	ldr	r3, [pc, #212]	@ (800aed0 <SDMMC_GetCmdResp6+0xe4>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a35      	ldr	r2, [pc, #212]	@ (800aed4 <SDMMC_GetCmdResp6+0xe8>)
 800ae00:	fba2 2303 	umull	r2, r3, r2, r3
 800ae04:	0a5b      	lsrs	r3, r3, #9
 800ae06:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae0a:	fb02 f303 	mul.w	r3, r2, r3
 800ae0e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	1e5a      	subs	r2, r3, #1
 800ae14:	61fa      	str	r2, [r7, #28]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d102      	bne.n	800ae20 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae1a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ae1e:	e052      	b.n	800aec6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae24:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d0ef      	beq.n	800ae10 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1ea      	bne.n	800ae10 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae3e:	f003 0304 	and.w	r3, r3, #4
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d004      	beq.n	800ae50 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2204      	movs	r2, #4
 800ae4a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae4c:	2304      	movs	r3, #4
 800ae4e:	e03a      	b.n	800aec6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae54:	f003 0301 	and.w	r3, r3, #1
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d004      	beq.n	800ae66 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e02f      	b.n	800aec6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f7ff fc0d 	bl	800a686 <SDIO_GetCommandResponse>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	461a      	mov	r2, r3
 800ae70:	7afb      	ldrb	r3, [r7, #11]
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d001      	beq.n	800ae7a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e025      	b.n	800aec6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	22c5      	movs	r2, #197	@ 0xc5
 800ae7e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ae80:	2100      	movs	r1, #0
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f7ff fc0c 	bl	800a6a0 <SDIO_GetResponse>
 800ae88:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d106      	bne.n	800aea2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	0c1b      	lsrs	r3, r3, #16
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	e011      	b.n	800aec6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d002      	beq.n	800aeb2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aeac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800aeb0:	e009      	b.n	800aec6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aebc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aec0:	e001      	b.n	800aec6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aec2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3720      	adds	r7, #32
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	20000010 	.word	0x20000010
 800aed4:	10624dd3 	.word	0x10624dd3

0800aed8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aee0:	4b22      	ldr	r3, [pc, #136]	@ (800af6c <SDMMC_GetCmdResp7+0x94>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a22      	ldr	r2, [pc, #136]	@ (800af70 <SDMMC_GetCmdResp7+0x98>)
 800aee6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeea:	0a5b      	lsrs	r3, r3, #9
 800aeec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aef0:	fb02 f303 	mul.w	r3, r2, r3
 800aef4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	1e5a      	subs	r2, r3, #1
 800aefa:	60fa      	str	r2, [r7, #12]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d102      	bne.n	800af06 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800af04:	e02c      	b.n	800af60 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800af12:	2b00      	cmp	r3, #0
 800af14:	d0ef      	beq.n	800aef6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1ea      	bne.n	800aef6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af24:	f003 0304 	and.w	r3, r3, #4
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d004      	beq.n	800af36 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2204      	movs	r2, #4
 800af30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af32:	2304      	movs	r3, #4
 800af34:	e014      	b.n	800af60 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d004      	beq.n	800af4c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af48:	2301      	movs	r3, #1
 800af4a:	e009      	b.n	800af60 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af54:	2b00      	cmp	r3, #0
 800af56:	d002      	beq.n	800af5e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2240      	movs	r2, #64	@ 0x40
 800af5c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800af5e:	2300      	movs	r3, #0
  
}
 800af60:	4618      	mov	r0, r3
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	20000010 	.word	0x20000010
 800af70:	10624dd3 	.word	0x10624dd3

0800af74 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af7c:	4b11      	ldr	r3, [pc, #68]	@ (800afc4 <SDMMC_GetCmdError+0x50>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a11      	ldr	r2, [pc, #68]	@ (800afc8 <SDMMC_GetCmdError+0x54>)
 800af82:	fba2 2303 	umull	r2, r3, r2, r3
 800af86:	0a5b      	lsrs	r3, r3, #9
 800af88:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af8c:	fb02 f303 	mul.w	r3, r2, r3
 800af90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	1e5a      	subs	r2, r3, #1
 800af96:	60fa      	str	r2, [r7, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d102      	bne.n	800afa2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af9c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800afa0:	e009      	b.n	800afb6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d0f1      	beq.n	800af92 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	22c5      	movs	r2, #197	@ 0xc5
 800afb2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3714      	adds	r7, #20
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	20000010 	.word	0x20000010
 800afc8:	10624dd3 	.word	0x10624dd3

0800afcc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800afd0:	4904      	ldr	r1, [pc, #16]	@ (800afe4 <MX_FATFS_Init+0x18>)
 800afd2:	4805      	ldr	r0, [pc, #20]	@ (800afe8 <MX_FATFS_Init+0x1c>)
 800afd4:	f003 f886 	bl	800e0e4 <FATFS_LinkDriver>
 800afd8:	4603      	mov	r3, r0
 800afda:	461a      	mov	r2, r3
 800afdc:	4b03      	ldr	r3, [pc, #12]	@ (800afec <MX_FATFS_Init+0x20>)
 800afde:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800afe0:	bf00      	nop
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	20014734 	.word	0x20014734
 800afe8:	0800f3c8 	.word	0x0800f3c8
 800afec:	20014730 	.word	0x20014730

0800aff0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aff0:	b480      	push	{r7}
 800aff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aff4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b00a:	f000 f86b 	bl	800b0e4 <BSP_SD_IsDetected>
 800b00e:	4603      	mov	r3, r0
 800b010:	2b01      	cmp	r3, #1
 800b012:	d001      	beq.n	800b018 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e005      	b.n	800b024 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b018:	4804      	ldr	r0, [pc, #16]	@ (800b02c <BSP_SD_Init+0x2c>)
 800b01a:	f7fb f977 	bl	800630c <HAL_SD_Init>
 800b01e:	4603      	mov	r3, r0
 800b020:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b022:	79fb      	ldrb	r3, [r7, #7]
}
 800b024:	4618      	mov	r0, r3
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	200141f4 	.word	0x200141f4

0800b030 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b088      	sub	sp, #32
 800b034:	af02      	add	r7, sp, #8
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	607a      	str	r2, [r7, #4]
 800b03c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b03e:	2300      	movs	r3, #0
 800b040:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	68f9      	ldr	r1, [r7, #12]
 800b04c:	4806      	ldr	r0, [pc, #24]	@ (800b068 <BSP_SD_ReadBlocks+0x38>)
 800b04e:	f7fb fa0d 	bl	800646c <HAL_SD_ReadBlocks>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3718      	adds	r7, #24
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	200141f4 	.word	0x200141f4

0800b06c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b088      	sub	sp, #32
 800b070:	af02      	add	r7, sp, #8
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	60b9      	str	r1, [r7, #8]
 800b076:	607a      	str	r2, [r7, #4]
 800b078:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b07a:	2300      	movs	r3, #0
 800b07c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	68f9      	ldr	r1, [r7, #12]
 800b088:	4806      	ldr	r0, [pc, #24]	@ (800b0a4 <BSP_SD_WriteBlocks+0x38>)
 800b08a:	f7fb fbd5 	bl	8006838 <HAL_SD_WriteBlocks>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b098:	7dfb      	ldrb	r3, [r7, #23]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3718      	adds	r7, #24
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	200141f4 	.word	0x200141f4

0800b0a8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b0ac:	4805      	ldr	r0, [pc, #20]	@ (800b0c4 <BSP_SD_GetCardState+0x1c>)
 800b0ae:	f7fb ff21 	bl	8006ef4 <HAL_SD_GetCardState>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b04      	cmp	r3, #4
 800b0b6:	bf14      	ite	ne
 800b0b8:	2301      	movne	r3, #1
 800b0ba:	2300      	moveq	r3, #0
 800b0bc:	b2db      	uxtb	r3, r3
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	200141f4 	.word	0x200141f4

0800b0c8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b0d0:	6879      	ldr	r1, [r7, #4]
 800b0d2:	4803      	ldr	r0, [pc, #12]	@ (800b0e0 <BSP_SD_GetCardInfo+0x18>)
 800b0d4:	f7fb fee2 	bl	8006e9c <HAL_SD_GetCardInfo>
}
 800b0d8:	bf00      	nop
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	200141f4 	.word	0x200141f4

0800b0e4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b0ee:	79fb      	ldrb	r3, [r7, #7]
 800b0f0:	b2db      	uxtb	r3, r3
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
	...

0800b100 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	4603      	mov	r3, r0
 800b108:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b10a:	4b0b      	ldr	r3, [pc, #44]	@ (800b138 <SD_CheckStatus+0x38>)
 800b10c:	2201      	movs	r2, #1
 800b10e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b110:	f7ff ffca 	bl	800b0a8 <BSP_SD_GetCardState>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d107      	bne.n	800b12a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b11a:	4b07      	ldr	r3, [pc, #28]	@ (800b138 <SD_CheckStatus+0x38>)
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	f023 0301 	bic.w	r3, r3, #1
 800b124:	b2da      	uxtb	r2, r3
 800b126:	4b04      	ldr	r3, [pc, #16]	@ (800b138 <SD_CheckStatus+0x38>)
 800b128:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b12a:	4b03      	ldr	r3, [pc, #12]	@ (800b138 <SD_CheckStatus+0x38>)
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	b2db      	uxtb	r3, r3
}
 800b130:	4618      	mov	r0, r3
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	20000019 	.word	0x20000019

0800b13c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	4603      	mov	r3, r0
 800b144:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b146:	4b0b      	ldr	r3, [pc, #44]	@ (800b174 <SD_initialize+0x38>)
 800b148:	2201      	movs	r2, #1
 800b14a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b14c:	f7ff ff58 	bl	800b000 <BSP_SD_Init>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d107      	bne.n	800b166 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b156:	79fb      	ldrb	r3, [r7, #7]
 800b158:	4618      	mov	r0, r3
 800b15a:	f7ff ffd1 	bl	800b100 <SD_CheckStatus>
 800b15e:	4603      	mov	r3, r0
 800b160:	461a      	mov	r2, r3
 800b162:	4b04      	ldr	r3, [pc, #16]	@ (800b174 <SD_initialize+0x38>)
 800b164:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b166:	4b03      	ldr	r3, [pc, #12]	@ (800b174 <SD_initialize+0x38>)
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	b2db      	uxtb	r3, r3
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	20000019 	.word	0x20000019

0800b178 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	4603      	mov	r3, r0
 800b180:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b182:	79fb      	ldrb	r3, [r7, #7]
 800b184:	4618      	mov	r0, r3
 800b186:	f7ff ffbb 	bl	800b100 <SD_CheckStatus>
 800b18a:	4603      	mov	r3, r0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3708      	adds	r7, #8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b086      	sub	sp, #24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60b9      	str	r1, [r7, #8]
 800b19c:	607a      	str	r2, [r7, #4]
 800b19e:	603b      	str	r3, [r7, #0]
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b1a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ac:	683a      	ldr	r2, [r7, #0]
 800b1ae:	6879      	ldr	r1, [r7, #4]
 800b1b0:	68b8      	ldr	r0, [r7, #8]
 800b1b2:	f7ff ff3d 	bl	800b030 <BSP_SD_ReadBlocks>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d107      	bne.n	800b1cc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b1bc:	bf00      	nop
 800b1be:	f7ff ff73 	bl	800b0a8 <BSP_SD_GetCardState>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1fa      	bne.n	800b1be <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3718      	adds	r7, #24
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b086      	sub	sp, #24
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	607a      	str	r2, [r7, #4]
 800b1e0:	603b      	str	r3, [r7, #0]
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	6879      	ldr	r1, [r7, #4]
 800b1f2:	68b8      	ldr	r0, [r7, #8]
 800b1f4:	f7ff ff3a 	bl	800b06c <BSP_SD_WriteBlocks>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d107      	bne.n	800b20e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b1fe:	bf00      	nop
 800b200:	f7ff ff52 	bl	800b0a8 <BSP_SD_GetCardState>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1fa      	bne.n	800b200 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b210:	4618      	mov	r0, r3
 800b212:	3718      	adds	r7, #24
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b08c      	sub	sp, #48	@ 0x30
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	4603      	mov	r3, r0
 800b220:	603a      	str	r2, [r7, #0]
 800b222:	71fb      	strb	r3, [r7, #7]
 800b224:	460b      	mov	r3, r1
 800b226:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b22e:	4b25      	ldr	r3, [pc, #148]	@ (800b2c4 <SD_ioctl+0xac>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	b2db      	uxtb	r3, r3
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d001      	beq.n	800b240 <SD_ioctl+0x28>
 800b23c:	2303      	movs	r3, #3
 800b23e:	e03c      	b.n	800b2ba <SD_ioctl+0xa2>

  switch (cmd)
 800b240:	79bb      	ldrb	r3, [r7, #6]
 800b242:	2b03      	cmp	r3, #3
 800b244:	d834      	bhi.n	800b2b0 <SD_ioctl+0x98>
 800b246:	a201      	add	r2, pc, #4	@ (adr r2, 800b24c <SD_ioctl+0x34>)
 800b248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24c:	0800b25d 	.word	0x0800b25d
 800b250:	0800b265 	.word	0x0800b265
 800b254:	0800b27d 	.word	0x0800b27d
 800b258:	0800b297 	.word	0x0800b297
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b262:	e028      	b.n	800b2b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b264:	f107 030c 	add.w	r3, r7, #12
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff ff2d 	bl	800b0c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b26e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b274:	2300      	movs	r3, #0
 800b276:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b27a:	e01c      	b.n	800b2b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b27c:	f107 030c 	add.w	r3, r7, #12
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff ff21 	bl	800b0c8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b288:	b29a      	uxth	r2, r3
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b294:	e00f      	b.n	800b2b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b296:	f107 030c 	add.w	r3, r7, #12
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7ff ff14 	bl	800b0c8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a2:	0a5a      	lsrs	r2, r3, #9
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b2ae:	e002      	b.n	800b2b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b2b0:	2304      	movs	r3, #4
 800b2b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b2b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3730      	adds	r7, #48	@ 0x30
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	20000019 	.word	0x20000019

0800b2c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b2d2:	79fb      	ldrb	r3, [r7, #7]
 800b2d4:	4a08      	ldr	r2, [pc, #32]	@ (800b2f8 <disk_status+0x30>)
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	4413      	add	r3, r2
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	79fa      	ldrb	r2, [r7, #7]
 800b2e0:	4905      	ldr	r1, [pc, #20]	@ (800b2f8 <disk_status+0x30>)
 800b2e2:	440a      	add	r2, r1
 800b2e4:	7a12      	ldrb	r2, [r2, #8]
 800b2e6:	4610      	mov	r0, r2
 800b2e8:	4798      	blx	r3
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	20014760 	.word	0x20014760

0800b2fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	4603      	mov	r3, r0
 800b304:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b306:	2300      	movs	r3, #0
 800b308:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b30a:	79fb      	ldrb	r3, [r7, #7]
 800b30c:	4a0e      	ldr	r2, [pc, #56]	@ (800b348 <disk_initialize+0x4c>)
 800b30e:	5cd3      	ldrb	r3, [r2, r3]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d114      	bne.n	800b33e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b314:	79fb      	ldrb	r3, [r7, #7]
 800b316:	4a0c      	ldr	r2, [pc, #48]	@ (800b348 <disk_initialize+0x4c>)
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	4413      	add	r3, r2
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	79fa      	ldrb	r2, [r7, #7]
 800b322:	4909      	ldr	r1, [pc, #36]	@ (800b348 <disk_initialize+0x4c>)
 800b324:	440a      	add	r2, r1
 800b326:	7a12      	ldrb	r2, [r2, #8]
 800b328:	4610      	mov	r0, r2
 800b32a:	4798      	blx	r3
 800b32c:	4603      	mov	r3, r0
 800b32e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b330:	7bfb      	ldrb	r3, [r7, #15]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d103      	bne.n	800b33e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b336:	79fb      	ldrb	r3, [r7, #7]
 800b338:	4a03      	ldr	r2, [pc, #12]	@ (800b348 <disk_initialize+0x4c>)
 800b33a:	2101      	movs	r1, #1
 800b33c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	20014760 	.word	0x20014760

0800b34c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b34c:	b590      	push	{r4, r7, lr}
 800b34e:	b087      	sub	sp, #28
 800b350:	af00      	add	r7, sp, #0
 800b352:	60b9      	str	r1, [r7, #8]
 800b354:	607a      	str	r2, [r7, #4]
 800b356:	603b      	str	r3, [r7, #0]
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
 800b35e:	4a0a      	ldr	r2, [pc, #40]	@ (800b388 <disk_read+0x3c>)
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	4413      	add	r3, r2
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	689c      	ldr	r4, [r3, #8]
 800b368:	7bfb      	ldrb	r3, [r7, #15]
 800b36a:	4a07      	ldr	r2, [pc, #28]	@ (800b388 <disk_read+0x3c>)
 800b36c:	4413      	add	r3, r2
 800b36e:	7a18      	ldrb	r0, [r3, #8]
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	68b9      	ldr	r1, [r7, #8]
 800b376:	47a0      	blx	r4
 800b378:	4603      	mov	r3, r0
 800b37a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b37c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	371c      	adds	r7, #28
 800b382:	46bd      	mov	sp, r7
 800b384:	bd90      	pop	{r4, r7, pc}
 800b386:	bf00      	nop
 800b388:	20014760 	.word	0x20014760

0800b38c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b38c:	b590      	push	{r4, r7, lr}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
 800b392:	60b9      	str	r1, [r7, #8]
 800b394:	607a      	str	r2, [r7, #4]
 800b396:	603b      	str	r3, [r7, #0]
 800b398:	4603      	mov	r3, r0
 800b39a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b39c:	7bfb      	ldrb	r3, [r7, #15]
 800b39e:	4a0a      	ldr	r2, [pc, #40]	@ (800b3c8 <disk_write+0x3c>)
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	4413      	add	r3, r2
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	68dc      	ldr	r4, [r3, #12]
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	4a07      	ldr	r2, [pc, #28]	@ (800b3c8 <disk_write+0x3c>)
 800b3ac:	4413      	add	r3, r2
 800b3ae:	7a18      	ldrb	r0, [r3, #8]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	68b9      	ldr	r1, [r7, #8]
 800b3b6:	47a0      	blx	r4
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	75fb      	strb	r3, [r7, #23]
  return res;
 800b3bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	371c      	adds	r7, #28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd90      	pop	{r4, r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	20014760 	.word	0x20014760

0800b3cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	603a      	str	r2, [r7, #0]
 800b3d6:	71fb      	strb	r3, [r7, #7]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b3dc:	79fb      	ldrb	r3, [r7, #7]
 800b3de:	4a09      	ldr	r2, [pc, #36]	@ (800b404 <disk_ioctl+0x38>)
 800b3e0:	009b      	lsls	r3, r3, #2
 800b3e2:	4413      	add	r3, r2
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	79fa      	ldrb	r2, [r7, #7]
 800b3ea:	4906      	ldr	r1, [pc, #24]	@ (800b404 <disk_ioctl+0x38>)
 800b3ec:	440a      	add	r2, r1
 800b3ee:	7a10      	ldrb	r0, [r2, #8]
 800b3f0:	79b9      	ldrb	r1, [r7, #6]
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	4798      	blx	r3
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	73fb      	strb	r3, [r7, #15]
  return res;
 800b3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	20014760 	.word	0x20014760

0800b408 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b408:	b480      	push	{r7}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	3301      	adds	r3, #1
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b418:	89fb      	ldrh	r3, [r7, #14]
 800b41a:	021b      	lsls	r3, r3, #8
 800b41c:	b21a      	sxth	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	b21b      	sxth	r3, r3
 800b424:	4313      	orrs	r3, r2
 800b426:	b21b      	sxth	r3, r3
 800b428:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b42a:	89fb      	ldrh	r3, [r7, #14]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	3303      	adds	r3, #3
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	021b      	lsls	r3, r3, #8
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	3202      	adds	r2, #2
 800b450:	7812      	ldrb	r2, [r2, #0]
 800b452:	4313      	orrs	r3, r2
 800b454:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	021b      	lsls	r3, r3, #8
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	3201      	adds	r2, #1
 800b45e:	7812      	ldrb	r2, [r2, #0]
 800b460:	4313      	orrs	r3, r2
 800b462:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	021b      	lsls	r3, r3, #8
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	7812      	ldrb	r2, [r2, #0]
 800b46c:	4313      	orrs	r3, r2
 800b46e:	60fb      	str	r3, [r7, #12]
	return rv;
 800b470:	68fb      	ldr	r3, [r7, #12]
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr

0800b47e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b47e:	b480      	push	{r7}
 800b480:	b083      	sub	sp, #12
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
 800b486:	460b      	mov	r3, r1
 800b488:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	1c5a      	adds	r2, r3, #1
 800b48e:	607a      	str	r2, [r7, #4]
 800b490:	887a      	ldrh	r2, [r7, #2]
 800b492:	b2d2      	uxtb	r2, r2
 800b494:	701a      	strb	r2, [r3, #0]
 800b496:	887b      	ldrh	r3, [r7, #2]
 800b498:	0a1b      	lsrs	r3, r3, #8
 800b49a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	1c5a      	adds	r2, r3, #1
 800b4a0:	607a      	str	r2, [r7, #4]
 800b4a2:	887a      	ldrh	r2, [r7, #2]
 800b4a4:	b2d2      	uxtb	r2, r2
 800b4a6:	701a      	strb	r2, [r3, #0]
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	1c5a      	adds	r2, r3, #1
 800b4c2:	607a      	str	r2, [r7, #4]
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	b2d2      	uxtb	r2, r2
 800b4c8:	701a      	strb	r2, [r3, #0]
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	0a1b      	lsrs	r3, r3, #8
 800b4ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	1c5a      	adds	r2, r3, #1
 800b4d4:	607a      	str	r2, [r7, #4]
 800b4d6:	683a      	ldr	r2, [r7, #0]
 800b4d8:	b2d2      	uxtb	r2, r2
 800b4da:	701a      	strb	r2, [r3, #0]
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	0a1b      	lsrs	r3, r3, #8
 800b4e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	607a      	str	r2, [r7, #4]
 800b4e8:	683a      	ldr	r2, [r7, #0]
 800b4ea:	b2d2      	uxtb	r2, r2
 800b4ec:	701a      	strb	r2, [r3, #0]
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	0a1b      	lsrs	r3, r3, #8
 800b4f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	1c5a      	adds	r2, r3, #1
 800b4f8:	607a      	str	r2, [r7, #4]
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	b2d2      	uxtb	r2, r2
 800b4fe:	701a      	strb	r2, [r3, #0]
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b50c:	b480      	push	{r7}
 800b50e:	b087      	sub	sp, #28
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00d      	beq.n	800b542 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	1c53      	adds	r3, r2, #1
 800b52a:	613b      	str	r3, [r7, #16]
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	1c59      	adds	r1, r3, #1
 800b530:	6179      	str	r1, [r7, #20]
 800b532:	7812      	ldrb	r2, [r2, #0]
 800b534:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	3b01      	subs	r3, #1
 800b53a:	607b      	str	r3, [r7, #4]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d1f1      	bne.n	800b526 <mem_cpy+0x1a>
	}
}
 800b542:	bf00      	nop
 800b544:	371c      	adds	r7, #28
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b54e:	b480      	push	{r7}
 800b550:	b087      	sub	sp, #28
 800b552:	af00      	add	r7, sp, #0
 800b554:	60f8      	str	r0, [r7, #12]
 800b556:	60b9      	str	r1, [r7, #8]
 800b558:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	617a      	str	r2, [r7, #20]
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	b2d2      	uxtb	r2, r2
 800b568:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	3b01      	subs	r3, #1
 800b56e:	607b      	str	r3, [r7, #4]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d1f3      	bne.n	800b55e <mem_set+0x10>
}
 800b576:	bf00      	nop
 800b578:	bf00      	nop
 800b57a:	371c      	adds	r7, #28
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b584:	b480      	push	{r7}
 800b586:	b089      	sub	sp, #36	@ 0x24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	61fb      	str	r3, [r7, #28]
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b598:	2300      	movs	r3, #0
 800b59a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	1c5a      	adds	r2, r3, #1
 800b5a0:	61fa      	str	r2, [r7, #28]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	1c5a      	adds	r2, r3, #1
 800b5aa:	61ba      	str	r2, [r7, #24]
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	1acb      	subs	r3, r1, r3
 800b5b0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	607b      	str	r3, [r7, #4]
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <mem_cmp+0x40>
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d0eb      	beq.n	800b59c <mem_cmp+0x18>

	return r;
 800b5c4:	697b      	ldr	r3, [r7, #20]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3724      	adds	r7, #36	@ 0x24
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr

0800b5d2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b5d2:	b480      	push	{r7}
 800b5d4:	b083      	sub	sp, #12
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
 800b5da:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b5dc:	e002      	b.n	800b5e4 <chk_chr+0x12>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	607b      	str	r3, [r7, #4]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d005      	beq.n	800b5f8 <chk_chr+0x26>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d1f2      	bne.n	800b5de <chk_chr+0xc>
	return *str;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b612:	2300      	movs	r3, #0
 800b614:	60bb      	str	r3, [r7, #8]
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	60fb      	str	r3, [r7, #12]
 800b61a:	e029      	b.n	800b670 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b61c:	4a27      	ldr	r2, [pc, #156]	@ (800b6bc <chk_lock+0xb4>)
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	011b      	lsls	r3, r3, #4
 800b622:	4413      	add	r3, r2
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d01d      	beq.n	800b666 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b62a:	4a24      	ldr	r2, [pc, #144]	@ (800b6bc <chk_lock+0xb4>)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	011b      	lsls	r3, r3, #4
 800b630:	4413      	add	r3, r2
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d116      	bne.n	800b66a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b63c:	4a1f      	ldr	r2, [pc, #124]	@ (800b6bc <chk_lock+0xb4>)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	011b      	lsls	r3, r3, #4
 800b642:	4413      	add	r3, r2
 800b644:	3304      	adds	r3, #4
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d10c      	bne.n	800b66a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b650:	4a1a      	ldr	r2, [pc, #104]	@ (800b6bc <chk_lock+0xb4>)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	011b      	lsls	r3, r3, #4
 800b656:	4413      	add	r3, r2
 800b658:	3308      	adds	r3, #8
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b660:	429a      	cmp	r2, r3
 800b662:	d102      	bne.n	800b66a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b664:	e007      	b.n	800b676 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b666:	2301      	movs	r3, #1
 800b668:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	3301      	adds	r3, #1
 800b66e:	60fb      	str	r3, [r7, #12]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d9d2      	bls.n	800b61c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d109      	bne.n	800b690 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d102      	bne.n	800b688 <chk_lock+0x80>
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	2b02      	cmp	r3, #2
 800b686:	d101      	bne.n	800b68c <chk_lock+0x84>
 800b688:	2300      	movs	r3, #0
 800b68a:	e010      	b.n	800b6ae <chk_lock+0xa6>
 800b68c:	2312      	movs	r3, #18
 800b68e:	e00e      	b.n	800b6ae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d108      	bne.n	800b6a8 <chk_lock+0xa0>
 800b696:	4a09      	ldr	r2, [pc, #36]	@ (800b6bc <chk_lock+0xb4>)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	011b      	lsls	r3, r3, #4
 800b69c:	4413      	add	r3, r2
 800b69e:	330c      	adds	r3, #12
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6a6:	d101      	bne.n	800b6ac <chk_lock+0xa4>
 800b6a8:	2310      	movs	r3, #16
 800b6aa:	e000      	b.n	800b6ae <chk_lock+0xa6>
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	20014740 	.word	0x20014740

0800b6c0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	607b      	str	r3, [r7, #4]
 800b6ca:	e002      	b.n	800b6d2 <enq_lock+0x12>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	607b      	str	r3, [r7, #4]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d806      	bhi.n	800b6e6 <enq_lock+0x26>
 800b6d8:	4a09      	ldr	r2, [pc, #36]	@ (800b700 <enq_lock+0x40>)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	011b      	lsls	r3, r3, #4
 800b6de:	4413      	add	r3, r2
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1f2      	bne.n	800b6cc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b02      	cmp	r3, #2
 800b6ea:	bf14      	ite	ne
 800b6ec:	2301      	movne	r3, #1
 800b6ee:	2300      	moveq	r3, #0
 800b6f0:	b2db      	uxtb	r3, r3
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	370c      	adds	r7, #12
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	20014740 	.word	0x20014740

0800b704 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b704:	b480      	push	{r7}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b70e:	2300      	movs	r3, #0
 800b710:	60fb      	str	r3, [r7, #12]
 800b712:	e01f      	b.n	800b754 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b714:	4a41      	ldr	r2, [pc, #260]	@ (800b81c <inc_lock+0x118>)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	011b      	lsls	r3, r3, #4
 800b71a:	4413      	add	r3, r2
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	d113      	bne.n	800b74e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b726:	4a3d      	ldr	r2, [pc, #244]	@ (800b81c <inc_lock+0x118>)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	011b      	lsls	r3, r3, #4
 800b72c:	4413      	add	r3, r2
 800b72e:	3304      	adds	r3, #4
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b736:	429a      	cmp	r2, r3
 800b738:	d109      	bne.n	800b74e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b73a:	4a38      	ldr	r2, [pc, #224]	@ (800b81c <inc_lock+0x118>)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	011b      	lsls	r3, r3, #4
 800b740:	4413      	add	r3, r2
 800b742:	3308      	adds	r3, #8
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d006      	beq.n	800b75c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	3301      	adds	r3, #1
 800b752:	60fb      	str	r3, [r7, #12]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d9dc      	bls.n	800b714 <inc_lock+0x10>
 800b75a:	e000      	b.n	800b75e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b75c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2b02      	cmp	r3, #2
 800b762:	d132      	bne.n	800b7ca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b764:	2300      	movs	r3, #0
 800b766:	60fb      	str	r3, [r7, #12]
 800b768:	e002      	b.n	800b770 <inc_lock+0x6c>
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3301      	adds	r3, #1
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d806      	bhi.n	800b784 <inc_lock+0x80>
 800b776:	4a29      	ldr	r2, [pc, #164]	@ (800b81c <inc_lock+0x118>)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	011b      	lsls	r3, r3, #4
 800b77c:	4413      	add	r3, r2
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1f2      	bne.n	800b76a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2b02      	cmp	r3, #2
 800b788:	d101      	bne.n	800b78e <inc_lock+0x8a>
 800b78a:	2300      	movs	r3, #0
 800b78c:	e040      	b.n	800b810 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	4922      	ldr	r1, [pc, #136]	@ (800b81c <inc_lock+0x118>)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	011b      	lsls	r3, r3, #4
 800b798:	440b      	add	r3, r1
 800b79a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	689a      	ldr	r2, [r3, #8]
 800b7a0:	491e      	ldr	r1, [pc, #120]	@ (800b81c <inc_lock+0x118>)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	011b      	lsls	r3, r3, #4
 800b7a6:	440b      	add	r3, r1
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	695a      	ldr	r2, [r3, #20]
 800b7b0:	491a      	ldr	r1, [pc, #104]	@ (800b81c <inc_lock+0x118>)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	011b      	lsls	r3, r3, #4
 800b7b6:	440b      	add	r3, r1
 800b7b8:	3308      	adds	r3, #8
 800b7ba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b7bc:	4a17      	ldr	r2, [pc, #92]	@ (800b81c <inc_lock+0x118>)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	011b      	lsls	r3, r3, #4
 800b7c2:	4413      	add	r3, r2
 800b7c4:	330c      	adds	r3, #12
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d009      	beq.n	800b7e4 <inc_lock+0xe0>
 800b7d0:	4a12      	ldr	r2, [pc, #72]	@ (800b81c <inc_lock+0x118>)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	011b      	lsls	r3, r3, #4
 800b7d6:	4413      	add	r3, r2
 800b7d8:	330c      	adds	r3, #12
 800b7da:	881b      	ldrh	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d001      	beq.n	800b7e4 <inc_lock+0xe0>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	e015      	b.n	800b810 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d108      	bne.n	800b7fc <inc_lock+0xf8>
 800b7ea:	4a0c      	ldr	r2, [pc, #48]	@ (800b81c <inc_lock+0x118>)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	011b      	lsls	r3, r3, #4
 800b7f0:	4413      	add	r3, r2
 800b7f2:	330c      	adds	r3, #12
 800b7f4:	881b      	ldrh	r3, [r3, #0]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	e001      	b.n	800b800 <inc_lock+0xfc>
 800b7fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b800:	4906      	ldr	r1, [pc, #24]	@ (800b81c <inc_lock+0x118>)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	011b      	lsls	r3, r3, #4
 800b806:	440b      	add	r3, r1
 800b808:	330c      	adds	r3, #12
 800b80a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	3301      	adds	r3, #1
}
 800b810:	4618      	mov	r0, r3
 800b812:	3714      	adds	r7, #20
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr
 800b81c:	20014740 	.word	0x20014740

0800b820 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	607b      	str	r3, [r7, #4]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d825      	bhi.n	800b880 <dec_lock+0x60>
		n = Files[i].ctr;
 800b834:	4a17      	ldr	r2, [pc, #92]	@ (800b894 <dec_lock+0x74>)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	011b      	lsls	r3, r3, #4
 800b83a:	4413      	add	r3, r2
 800b83c:	330c      	adds	r3, #12
 800b83e:	881b      	ldrh	r3, [r3, #0]
 800b840:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b842:	89fb      	ldrh	r3, [r7, #14]
 800b844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b848:	d101      	bne.n	800b84e <dec_lock+0x2e>
 800b84a:	2300      	movs	r3, #0
 800b84c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b84e:	89fb      	ldrh	r3, [r7, #14]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <dec_lock+0x3a>
 800b854:	89fb      	ldrh	r3, [r7, #14]
 800b856:	3b01      	subs	r3, #1
 800b858:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b85a:	4a0e      	ldr	r2, [pc, #56]	@ (800b894 <dec_lock+0x74>)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	011b      	lsls	r3, r3, #4
 800b860:	4413      	add	r3, r2
 800b862:	330c      	adds	r3, #12
 800b864:	89fa      	ldrh	r2, [r7, #14]
 800b866:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b868:	89fb      	ldrh	r3, [r7, #14]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d105      	bne.n	800b87a <dec_lock+0x5a>
 800b86e:	4a09      	ldr	r2, [pc, #36]	@ (800b894 <dec_lock+0x74>)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	011b      	lsls	r3, r3, #4
 800b874:	4413      	add	r3, r2
 800b876:	2200      	movs	r2, #0
 800b878:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b87a:	2300      	movs	r3, #0
 800b87c:	737b      	strb	r3, [r7, #13]
 800b87e:	e001      	b.n	800b884 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b880:	2302      	movs	r3, #2
 800b882:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b884:	7b7b      	ldrb	r3, [r7, #13]
}
 800b886:	4618      	mov	r0, r3
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	20014740 	.word	0x20014740

0800b898 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	60fb      	str	r3, [r7, #12]
 800b8a4:	e010      	b.n	800b8c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b8a6:	4a0d      	ldr	r2, [pc, #52]	@ (800b8dc <clear_lock+0x44>)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	011b      	lsls	r3, r3, #4
 800b8ac:	4413      	add	r3, r2
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d105      	bne.n	800b8c2 <clear_lock+0x2a>
 800b8b6:	4a09      	ldr	r2, [pc, #36]	@ (800b8dc <clear_lock+0x44>)
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	011b      	lsls	r3, r3, #4
 800b8bc:	4413      	add	r3, r2
 800b8be:	2200      	movs	r2, #0
 800b8c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	60fb      	str	r3, [r7, #12]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d9eb      	bls.n	800b8a6 <clear_lock+0xe>
	}
}
 800b8ce:	bf00      	nop
 800b8d0:	bf00      	nop
 800b8d2:	3714      	adds	r7, #20
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr
 800b8dc:	20014740 	.word	0x20014740

0800b8e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b086      	sub	sp, #24
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	78db      	ldrb	r3, [r3, #3]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d034      	beq.n	800b95e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	7858      	ldrb	r0, [r3, #1]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b904:	2301      	movs	r3, #1
 800b906:	697a      	ldr	r2, [r7, #20]
 800b908:	f7ff fd40 	bl	800b38c <disk_write>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d002      	beq.n	800b918 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b912:	2301      	movs	r3, #1
 800b914:	73fb      	strb	r3, [r7, #15]
 800b916:	e022      	b.n	800b95e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a1b      	ldr	r3, [r3, #32]
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	1ad2      	subs	r2, r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	699b      	ldr	r3, [r3, #24]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d217      	bcs.n	800b95e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	789b      	ldrb	r3, [r3, #2]
 800b932:	613b      	str	r3, [r7, #16]
 800b934:	e010      	b.n	800b958 <sync_window+0x78>
					wsect += fs->fsize;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	699b      	ldr	r3, [r3, #24]
 800b93a:	697a      	ldr	r2, [r7, #20]
 800b93c:	4413      	add	r3, r2
 800b93e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	7858      	ldrb	r0, [r3, #1]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b94a:	2301      	movs	r3, #1
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	f7ff fd1d 	bl	800b38c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	3b01      	subs	r3, #1
 800b956:	613b      	str	r3, [r7, #16]
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d8eb      	bhi.n	800b936 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b960:	4618      	mov	r0, r3
 800b962:	3718      	adds	r7, #24
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d01b      	beq.n	800b9b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7ff ffad 	bl	800b8e0 <sync_window>
 800b986:	4603      	mov	r3, r0
 800b988:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b98a:	7bfb      	ldrb	r3, [r7, #15]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d113      	bne.n	800b9b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	7858      	ldrb	r0, [r3, #1]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b99a:	2301      	movs	r3, #1
 800b99c:	683a      	ldr	r2, [r7, #0]
 800b99e:	f7ff fcd5 	bl	800b34c <disk_read>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d004      	beq.n	800b9b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
	...

0800b9c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f7ff ff87 	bl	800b8e0 <sync_window>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d158      	bne.n	800ba8e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	2b03      	cmp	r3, #3
 800b9e2:	d148      	bne.n	800ba76 <sync_fs+0xb2>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	791b      	ldrb	r3, [r3, #4]
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d144      	bne.n	800ba76 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	3330      	adds	r3, #48	@ 0x30
 800b9f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7ff fda9 	bl	800b54e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	3330      	adds	r3, #48	@ 0x30
 800ba00:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ba04:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7ff fd38 	bl	800b47e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	3330      	adds	r3, #48	@ 0x30
 800ba12:	4921      	ldr	r1, [pc, #132]	@ (800ba98 <sync_fs+0xd4>)
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7ff fd4d 	bl	800b4b4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	3330      	adds	r3, #48	@ 0x30
 800ba1e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ba22:	491e      	ldr	r1, [pc, #120]	@ (800ba9c <sync_fs+0xd8>)
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7ff fd45 	bl	800b4b4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	3330      	adds	r3, #48	@ 0x30
 800ba2e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	4619      	mov	r1, r3
 800ba38:	4610      	mov	r0, r2
 800ba3a:	f7ff fd3b 	bl	800b4b4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	3330      	adds	r3, #48	@ 0x30
 800ba42:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	f7ff fd31 	bl	800b4b4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	69db      	ldr	r3, [r3, #28]
 800ba56:	1c5a      	adds	r2, r3, #1
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	7858      	ldrb	r0, [r3, #1]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	f7ff fc8e 	bl	800b38c <disk_write>
			fs->fsi_flag = 0;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	785b      	ldrb	r3, [r3, #1]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7ff fca4 	bl	800b3cc <disk_ioctl>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d001      	beq.n	800ba8e <sync_fs+0xca>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ba8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	41615252 	.word	0x41615252
 800ba9c:	61417272 	.word	0x61417272

0800baa0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	3b02      	subs	r3, #2
 800baae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	695b      	ldr	r3, [r3, #20]
 800bab4:	3b02      	subs	r3, #2
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d301      	bcc.n	800bac0 <clust2sect+0x20>
 800babc:	2300      	movs	r3, #0
 800babe:	e008      	b.n	800bad2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	895b      	ldrh	r3, [r3, #10]
 800bac4:	461a      	mov	r2, r3
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	fb03 f202 	mul.w	r2, r3, r2
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bad0:	4413      	add	r3, r2
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	370c      	adds	r7, #12
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b086      	sub	sp, #24
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d904      	bls.n	800bafe <get_fat+0x20>
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	683a      	ldr	r2, [r7, #0]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d302      	bcc.n	800bb04 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bafe:	2301      	movs	r3, #1
 800bb00:	617b      	str	r3, [r7, #20]
 800bb02:	e08e      	b.n	800bc22 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bb04:	f04f 33ff 	mov.w	r3, #4294967295
 800bb08:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	2b03      	cmp	r3, #3
 800bb10:	d061      	beq.n	800bbd6 <get_fat+0xf8>
 800bb12:	2b03      	cmp	r3, #3
 800bb14:	dc7b      	bgt.n	800bc0e <get_fat+0x130>
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d002      	beq.n	800bb20 <get_fat+0x42>
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d041      	beq.n	800bba2 <get_fat+0xc4>
 800bb1e:	e076      	b.n	800bc0e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	60fb      	str	r3, [r7, #12]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	085b      	lsrs	r3, r3, #1
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	6a1a      	ldr	r2, [r3, #32]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	0a5b      	lsrs	r3, r3, #9
 800bb36:	4413      	add	r3, r2
 800bb38:	4619      	mov	r1, r3
 800bb3a:	6938      	ldr	r0, [r7, #16]
 800bb3c:	f7ff ff14 	bl	800b968 <move_window>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d166      	bne.n	800bc14 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	1c5a      	adds	r2, r3, #1
 800bb4a:	60fa      	str	r2, [r7, #12]
 800bb4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb50:	693a      	ldr	r2, [r7, #16]
 800bb52:	4413      	add	r3, r2
 800bb54:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	6a1a      	ldr	r2, [r3, #32]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	0a5b      	lsrs	r3, r3, #9
 800bb62:	4413      	add	r3, r2
 800bb64:	4619      	mov	r1, r3
 800bb66:	6938      	ldr	r0, [r7, #16]
 800bb68:	f7ff fefe 	bl	800b968 <move_window>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d152      	bne.n	800bc18 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb80:	021b      	lsls	r3, r3, #8
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d002      	beq.n	800bb98 <get_fat+0xba>
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	091b      	lsrs	r3, r3, #4
 800bb96:	e002      	b.n	800bb9e <get_fat+0xc0>
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb9e:	617b      	str	r3, [r7, #20]
			break;
 800bba0:	e03f      	b.n	800bc22 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	6a1a      	ldr	r2, [r3, #32]
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	0a1b      	lsrs	r3, r3, #8
 800bbaa:	4413      	add	r3, r2
 800bbac:	4619      	mov	r1, r3
 800bbae:	6938      	ldr	r0, [r7, #16]
 800bbb0:	f7ff feda 	bl	800b968 <move_window>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d130      	bne.n	800bc1c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	005b      	lsls	r3, r3, #1
 800bbc4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bbc8:	4413      	add	r3, r2
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7ff fc1c 	bl	800b408 <ld_word>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	617b      	str	r3, [r7, #20]
			break;
 800bbd4:	e025      	b.n	800bc22 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	6a1a      	ldr	r2, [r3, #32]
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	09db      	lsrs	r3, r3, #7
 800bbde:	4413      	add	r3, r2
 800bbe0:	4619      	mov	r1, r3
 800bbe2:	6938      	ldr	r0, [r7, #16]
 800bbe4:	f7ff fec0 	bl	800b968 <move_window>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d118      	bne.n	800bc20 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bbfc:	4413      	add	r3, r2
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7ff fc1a 	bl	800b438 <ld_dword>
 800bc04:	4603      	mov	r3, r0
 800bc06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bc0a:	617b      	str	r3, [r7, #20]
			break;
 800bc0c:	e009      	b.n	800bc22 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bc0e:	2301      	movs	r3, #1
 800bc10:	617b      	str	r3, [r7, #20]
 800bc12:	e006      	b.n	800bc22 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc14:	bf00      	nop
 800bc16:	e004      	b.n	800bc22 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc18:	bf00      	nop
 800bc1a:	e002      	b.n	800bc22 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc1c:	bf00      	nop
 800bc1e:	e000      	b.n	800bc22 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc20:	bf00      	nop
		}
	}

	return val;
 800bc22:	697b      	ldr	r3, [r7, #20]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3718      	adds	r7, #24
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bc2c:	b590      	push	{r4, r7, lr}
 800bc2e:	b089      	sub	sp, #36	@ 0x24
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bc38:	2302      	movs	r3, #2
 800bc3a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	f240 80d9 	bls.w	800bdf6 <put_fat+0x1ca>
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	695b      	ldr	r3, [r3, #20]
 800bc48:	68ba      	ldr	r2, [r7, #8]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	f080 80d3 	bcs.w	800bdf6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	2b03      	cmp	r3, #3
 800bc56:	f000 8096 	beq.w	800bd86 <put_fat+0x15a>
 800bc5a:	2b03      	cmp	r3, #3
 800bc5c:	f300 80cb 	bgt.w	800bdf6 <put_fat+0x1ca>
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d002      	beq.n	800bc6a <put_fat+0x3e>
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d06e      	beq.n	800bd46 <put_fat+0x11a>
 800bc68:	e0c5      	b.n	800bdf6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	61bb      	str	r3, [r7, #24]
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	085b      	lsrs	r3, r3, #1
 800bc72:	69ba      	ldr	r2, [r7, #24]
 800bc74:	4413      	add	r3, r2
 800bc76:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6a1a      	ldr	r2, [r3, #32]
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	0a5b      	lsrs	r3, r3, #9
 800bc80:	4413      	add	r3, r2
 800bc82:	4619      	mov	r1, r3
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f7ff fe6f 	bl	800b968 <move_window>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc8e:	7ffb      	ldrb	r3, [r7, #31]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f040 80a9 	bne.w	800bde8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	1c59      	adds	r1, r3, #1
 800bca0:	61b9      	str	r1, [r7, #24]
 800bca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca6:	4413      	add	r3, r2
 800bca8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	f003 0301 	and.w	r3, r3, #1
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00d      	beq.n	800bcd0 <put_fat+0xa4>
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	b25b      	sxtb	r3, r3
 800bcba:	f003 030f 	and.w	r3, r3, #15
 800bcbe:	b25a      	sxtb	r2, r3
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	011b      	lsls	r3, r3, #4
 800bcc6:	b25b      	sxtb	r3, r3
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	b25b      	sxtb	r3, r3
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	e001      	b.n	800bcd4 <put_fat+0xa8>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	697a      	ldr	r2, [r7, #20]
 800bcd6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6a1a      	ldr	r2, [r3, #32]
 800bce2:	69bb      	ldr	r3, [r7, #24]
 800bce4:	0a5b      	lsrs	r3, r3, #9
 800bce6:	4413      	add	r3, r2
 800bce8:	4619      	mov	r1, r3
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	f7ff fe3c 	bl	800b968 <move_window>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcf4:	7ffb      	ldrb	r3, [r7, #31]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d178      	bne.n	800bdec <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd06:	4413      	add	r3, r2
 800bd08:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	f003 0301 	and.w	r3, r3, #1
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d003      	beq.n	800bd1c <put_fat+0xf0>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	091b      	lsrs	r3, r3, #4
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	e00e      	b.n	800bd3a <put_fat+0x10e>
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	b25b      	sxtb	r3, r3
 800bd22:	f023 030f 	bic.w	r3, r3, #15
 800bd26:	b25a      	sxtb	r2, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	0a1b      	lsrs	r3, r3, #8
 800bd2c:	b25b      	sxtb	r3, r3
 800bd2e:	f003 030f 	and.w	r3, r3, #15
 800bd32:	b25b      	sxtb	r3, r3
 800bd34:	4313      	orrs	r3, r2
 800bd36:	b25b      	sxtb	r3, r3
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2201      	movs	r2, #1
 800bd42:	70da      	strb	r2, [r3, #3]
			break;
 800bd44:	e057      	b.n	800bdf6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6a1a      	ldr	r2, [r3, #32]
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	0a1b      	lsrs	r3, r3, #8
 800bd4e:	4413      	add	r3, r2
 800bd50:	4619      	mov	r1, r3
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	f7ff fe08 	bl	800b968 <move_window>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd5c:	7ffb      	ldrb	r3, [r7, #31]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d146      	bne.n	800bdf0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	005b      	lsls	r3, r3, #1
 800bd6c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bd70:	4413      	add	r3, r2
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	b292      	uxth	r2, r2
 800bd76:	4611      	mov	r1, r2
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7ff fb80 	bl	800b47e <st_word>
			fs->wflag = 1;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2201      	movs	r2, #1
 800bd82:	70da      	strb	r2, [r3, #3]
			break;
 800bd84:	e037      	b.n	800bdf6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6a1a      	ldr	r2, [r3, #32]
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	09db      	lsrs	r3, r3, #7
 800bd8e:	4413      	add	r3, r2
 800bd90:	4619      	mov	r1, r3
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f7ff fde8 	bl	800b968 <move_window>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd9c:	7ffb      	ldrb	r3, [r7, #31]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d128      	bne.n	800bdf4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bdb6:	4413      	add	r3, r2
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7ff fb3d 	bl	800b438 <ld_dword>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bdc4:	4323      	orrs	r3, r4
 800bdc6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bdd6:	4413      	add	r3, r2
 800bdd8:	6879      	ldr	r1, [r7, #4]
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7ff fb6a 	bl	800b4b4 <st_dword>
			fs->wflag = 1;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2201      	movs	r2, #1
 800bde4:	70da      	strb	r2, [r3, #3]
			break;
 800bde6:	e006      	b.n	800bdf6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bde8:	bf00      	nop
 800bdea:	e004      	b.n	800bdf6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bdec:	bf00      	nop
 800bdee:	e002      	b.n	800bdf6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bdf0:	bf00      	nop
 800bdf2:	e000      	b.n	800bdf6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bdf4:	bf00      	nop
		}
	}
	return res;
 800bdf6:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3724      	adds	r7, #36	@ 0x24
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd90      	pop	{r4, r7, pc}

0800be00 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b088      	sub	sp, #32
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800be0c:	2300      	movs	r3, #0
 800be0e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d904      	bls.n	800be26 <remove_chain+0x26>
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	695b      	ldr	r3, [r3, #20]
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	429a      	cmp	r2, r3
 800be24:	d301      	bcc.n	800be2a <remove_chain+0x2a>
 800be26:	2302      	movs	r3, #2
 800be28:	e04b      	b.n	800bec2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00c      	beq.n	800be4a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800be30:	f04f 32ff 	mov.w	r2, #4294967295
 800be34:	6879      	ldr	r1, [r7, #4]
 800be36:	69b8      	ldr	r0, [r7, #24]
 800be38:	f7ff fef8 	bl	800bc2c <put_fat>
 800be3c:	4603      	mov	r3, r0
 800be3e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800be40:	7ffb      	ldrb	r3, [r7, #31]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d001      	beq.n	800be4a <remove_chain+0x4a>
 800be46:	7ffb      	ldrb	r3, [r7, #31]
 800be48:	e03b      	b.n	800bec2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800be4a:	68b9      	ldr	r1, [r7, #8]
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f7ff fe46 	bl	800bade <get_fat>
 800be52:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d031      	beq.n	800bebe <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d101      	bne.n	800be64 <remove_chain+0x64>
 800be60:	2302      	movs	r3, #2
 800be62:	e02e      	b.n	800bec2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6a:	d101      	bne.n	800be70 <remove_chain+0x70>
 800be6c:	2301      	movs	r3, #1
 800be6e:	e028      	b.n	800bec2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800be70:	2200      	movs	r2, #0
 800be72:	68b9      	ldr	r1, [r7, #8]
 800be74:	69b8      	ldr	r0, [r7, #24]
 800be76:	f7ff fed9 	bl	800bc2c <put_fat>
 800be7a:	4603      	mov	r3, r0
 800be7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800be7e:	7ffb      	ldrb	r3, [r7, #31]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d001      	beq.n	800be88 <remove_chain+0x88>
 800be84:	7ffb      	ldrb	r3, [r7, #31]
 800be86:	e01c      	b.n	800bec2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800be88:	69bb      	ldr	r3, [r7, #24]
 800be8a:	691a      	ldr	r2, [r3, #16]
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	695b      	ldr	r3, [r3, #20]
 800be90:	3b02      	subs	r3, #2
 800be92:	429a      	cmp	r2, r3
 800be94:	d20b      	bcs.n	800beae <remove_chain+0xae>
			fs->free_clst++;
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	1c5a      	adds	r2, r3, #1
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	791b      	ldrb	r3, [r3, #4]
 800bea4:	f043 0301 	orr.w	r3, r3, #1
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	695b      	ldr	r3, [r3, #20]
 800beb6:	68ba      	ldr	r2, [r7, #8]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d3c6      	bcc.n	800be4a <remove_chain+0x4a>
 800bebc:	e000      	b.n	800bec0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bebe:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3720      	adds	r7, #32
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b088      	sub	sp, #32
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
 800bed2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d10d      	bne.n	800befc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d004      	beq.n	800bef6 <create_chain+0x2c>
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	695b      	ldr	r3, [r3, #20]
 800bef0:	69ba      	ldr	r2, [r7, #24]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d31b      	bcc.n	800bf2e <create_chain+0x64>
 800bef6:	2301      	movs	r3, #1
 800bef8:	61bb      	str	r3, [r7, #24]
 800befa:	e018      	b.n	800bf2e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f7ff fded 	bl	800bade <get_fat>
 800bf04:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d801      	bhi.n	800bf10 <create_chain+0x46>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e070      	b.n	800bff2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf16:	d101      	bne.n	800bf1c <create_chain+0x52>
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	e06a      	b.n	800bff2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d201      	bcs.n	800bf2a <create_chain+0x60>
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	e063      	b.n	800bff2 <create_chain+0x128>
		scl = clst;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	3301      	adds	r3, #1
 800bf36:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	695b      	ldr	r3, [r3, #20]
 800bf3c:	69fa      	ldr	r2, [r7, #28]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d307      	bcc.n	800bf52 <create_chain+0x88>
				ncl = 2;
 800bf42:	2302      	movs	r3, #2
 800bf44:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bf46:	69fa      	ldr	r2, [r7, #28]
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d901      	bls.n	800bf52 <create_chain+0x88>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	e04f      	b.n	800bff2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bf52:	69f9      	ldr	r1, [r7, #28]
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7ff fdc2 	bl	800bade <get_fat>
 800bf5a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00e      	beq.n	800bf80 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d003      	beq.n	800bf70 <create_chain+0xa6>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf6e:	d101      	bne.n	800bf74 <create_chain+0xaa>
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	e03e      	b.n	800bff2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bf74:	69fa      	ldr	r2, [r7, #28]
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d1da      	bne.n	800bf32 <create_chain+0x68>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	e038      	b.n	800bff2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bf80:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bf82:	f04f 32ff 	mov.w	r2, #4294967295
 800bf86:	69f9      	ldr	r1, [r7, #28]
 800bf88:	6938      	ldr	r0, [r7, #16]
 800bf8a:	f7ff fe4f 	bl	800bc2c <put_fat>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bf92:	7dfb      	ldrb	r3, [r7, #23]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d109      	bne.n	800bfac <create_chain+0xe2>
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d006      	beq.n	800bfac <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bf9e:	69fa      	ldr	r2, [r7, #28]
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6938      	ldr	r0, [r7, #16]
 800bfa4:	f7ff fe42 	bl	800bc2c <put_fat>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bfac:	7dfb      	ldrb	r3, [r7, #23]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d116      	bne.n	800bfe0 <create_chain+0x116>
		fs->last_clst = ncl;
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	69fa      	ldr	r2, [r7, #28]
 800bfb6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	691a      	ldr	r2, [r3, #16]
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	695b      	ldr	r3, [r3, #20]
 800bfc0:	3b02      	subs	r3, #2
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d804      	bhi.n	800bfd0 <create_chain+0x106>
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	1e5a      	subs	r2, r3, #1
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	791b      	ldrb	r3, [r3, #4]
 800bfd4:	f043 0301 	orr.w	r3, r3, #1
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	711a      	strb	r2, [r3, #4]
 800bfde:	e007      	b.n	800bff0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bfe0:	7dfb      	ldrb	r3, [r7, #23]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d102      	bne.n	800bfec <create_chain+0x122>
 800bfe6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfea:	e000      	b.n	800bfee <create_chain+0x124>
 800bfec:	2301      	movs	r3, #1
 800bfee:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bff0:	69fb      	ldr	r3, [r7, #28]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3720      	adds	r7, #32
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bffa:	b480      	push	{r7}
 800bffc:	b087      	sub	sp, #28
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c00e:	3304      	adds	r3, #4
 800c010:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	0a5b      	lsrs	r3, r3, #9
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	8952      	ldrh	r2, [r2, #10]
 800c01a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c01e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	1d1a      	adds	r2, r3, #4
 800c024:	613a      	str	r2, [r7, #16]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d101      	bne.n	800c034 <clmt_clust+0x3a>
 800c030:	2300      	movs	r3, #0
 800c032:	e010      	b.n	800c056 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c034:	697a      	ldr	r2, [r7, #20]
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d307      	bcc.n	800c04c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c03c:	697a      	ldr	r2, [r7, #20]
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	617b      	str	r3, [r7, #20]
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	3304      	adds	r3, #4
 800c048:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c04a:	e7e9      	b.n	800c020 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c04c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	4413      	add	r3, r2
}
 800c056:	4618      	mov	r0, r3
 800c058:	371c      	adds	r7, #28
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b086      	sub	sp, #24
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
 800c06a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c078:	d204      	bcs.n	800c084 <dir_sdi+0x22>
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	f003 031f 	and.w	r3, r3, #31
 800c080:	2b00      	cmp	r3, #0
 800c082:	d001      	beq.n	800c088 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c084:	2302      	movs	r3, #2
 800c086:	e063      	b.n	800c150 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	689b      	ldr	r3, [r3, #8]
 800c092:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d106      	bne.n	800c0a8 <dir_sdi+0x46>
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	2b02      	cmp	r3, #2
 800c0a0:	d902      	bls.n	800c0a8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d10c      	bne.n	800c0c8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	095b      	lsrs	r3, r3, #5
 800c0b2:	693a      	ldr	r2, [r7, #16]
 800c0b4:	8912      	ldrh	r2, [r2, #8]
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d301      	bcc.n	800c0be <dir_sdi+0x5c>
 800c0ba:	2302      	movs	r3, #2
 800c0bc:	e048      	b.n	800c150 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	61da      	str	r2, [r3, #28]
 800c0c6:	e029      	b.n	800c11c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	895b      	ldrh	r3, [r3, #10]
 800c0cc:	025b      	lsls	r3, r3, #9
 800c0ce:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0d0:	e019      	b.n	800c106 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6979      	ldr	r1, [r7, #20]
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7ff fd01 	bl	800bade <get_fat>
 800c0dc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e4:	d101      	bne.n	800c0ea <dir_sdi+0x88>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e032      	b.n	800c150 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d904      	bls.n	800c0fa <dir_sdi+0x98>
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	697a      	ldr	r2, [r7, #20]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d301      	bcc.n	800c0fe <dir_sdi+0x9c>
 800c0fa:	2302      	movs	r3, #2
 800c0fc:	e028      	b.n	800c150 <dir_sdi+0xee>
			ofs -= csz;
 800c0fe:	683a      	ldr	r2, [r7, #0]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	1ad3      	subs	r3, r2, r3
 800c104:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c106:	683a      	ldr	r2, [r7, #0]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d2e1      	bcs.n	800c0d2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c10e:	6979      	ldr	r1, [r7, #20]
 800c110:	6938      	ldr	r0, [r7, #16]
 800c112:	f7ff fcc5 	bl	800baa0 <clust2sect>
 800c116:	4602      	mov	r2, r0
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	697a      	ldr	r2, [r7, #20]
 800c120:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	69db      	ldr	r3, [r3, #28]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d101      	bne.n	800c12e <dir_sdi+0xcc>
 800c12a:	2302      	movs	r3, #2
 800c12c:	e010      	b.n	800c150 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	69da      	ldr	r2, [r3, #28]
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	0a5b      	lsrs	r3, r3, #9
 800c136:	441a      	add	r2, r3
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c148:	441a      	add	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c14e:	2300      	movs	r3, #0
}
 800c150:	4618      	mov	r0, r3
 800c152:	3718      	adds	r7, #24
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}

0800c158 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	695b      	ldr	r3, [r3, #20]
 800c16c:	3320      	adds	r3, #32
 800c16e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	69db      	ldr	r3, [r3, #28]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d003      	beq.n	800c180 <dir_next+0x28>
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c17e:	d301      	bcc.n	800c184 <dir_next+0x2c>
 800c180:	2304      	movs	r3, #4
 800c182:	e0aa      	b.n	800c2da <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	f040 8098 	bne.w	800c2c0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	69db      	ldr	r3, [r3, #28]
 800c194:	1c5a      	adds	r2, r3, #1
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	699b      	ldr	r3, [r3, #24]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d10b      	bne.n	800c1ba <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	095b      	lsrs	r3, r3, #5
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	8912      	ldrh	r2, [r2, #8]
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	f0c0 8088 	bcc.w	800c2c0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	61da      	str	r2, [r3, #28]
 800c1b6:	2304      	movs	r3, #4
 800c1b8:	e08f      	b.n	800c2da <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	0a5b      	lsrs	r3, r3, #9
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	8952      	ldrh	r2, [r2, #10]
 800c1c2:	3a01      	subs	r2, #1
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d17a      	bne.n	800c2c0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	4610      	mov	r0, r2
 800c1d4:	f7ff fc83 	bl	800bade <get_fat>
 800c1d8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d801      	bhi.n	800c1e4 <dir_next+0x8c>
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	e07a      	b.n	800c2da <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ea:	d101      	bne.n	800c1f0 <dir_next+0x98>
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e074      	b.n	800c2da <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	697a      	ldr	r2, [r7, #20]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d358      	bcc.n	800c2ac <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d104      	bne.n	800c20a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	61da      	str	r2, [r3, #28]
 800c206:	2304      	movs	r3, #4
 800c208:	e067      	b.n	800c2da <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	699b      	ldr	r3, [r3, #24]
 800c210:	4619      	mov	r1, r3
 800c212:	4610      	mov	r0, r2
 800c214:	f7ff fe59 	bl	800beca <create_chain>
 800c218:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d101      	bne.n	800c224 <dir_next+0xcc>
 800c220:	2307      	movs	r3, #7
 800c222:	e05a      	b.n	800c2da <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	2b01      	cmp	r3, #1
 800c228:	d101      	bne.n	800c22e <dir_next+0xd6>
 800c22a:	2302      	movs	r3, #2
 800c22c:	e055      	b.n	800c2da <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c234:	d101      	bne.n	800c23a <dir_next+0xe2>
 800c236:	2301      	movs	r3, #1
 800c238:	e04f      	b.n	800c2da <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f7ff fb50 	bl	800b8e0 <sync_window>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d001      	beq.n	800c24a <dir_next+0xf2>
 800c246:	2301      	movs	r3, #1
 800c248:	e047      	b.n	800c2da <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	3330      	adds	r3, #48	@ 0x30
 800c24e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c252:	2100      	movs	r1, #0
 800c254:	4618      	mov	r0, r3
 800c256:	f7ff f97a 	bl	800b54e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c25a:	2300      	movs	r3, #0
 800c25c:	613b      	str	r3, [r7, #16]
 800c25e:	6979      	ldr	r1, [r7, #20]
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	f7ff fc1d 	bl	800baa0 <clust2sect>
 800c266:	4602      	mov	r2, r0
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c26c:	e012      	b.n	800c294 <dir_next+0x13c>
						fs->wflag = 1;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2201      	movs	r2, #1
 800c272:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f7ff fb33 	bl	800b8e0 <sync_window>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d001      	beq.n	800c284 <dir_next+0x12c>
 800c280:	2301      	movs	r3, #1
 800c282:	e02a      	b.n	800c2da <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	3301      	adds	r3, #1
 800c288:	613b      	str	r3, [r7, #16]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c28e:	1c5a      	adds	r2, r3, #1
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	895b      	ldrh	r3, [r3, #10]
 800c298:	461a      	mov	r2, r3
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d3e6      	bcc.n	800c26e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	1ad2      	subs	r2, r2, r3
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	697a      	ldr	r2, [r7, #20]
 800c2b0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c2b2:	6979      	ldr	r1, [r7, #20]
 800c2b4:	68f8      	ldr	r0, [r7, #12]
 800c2b6:	f7ff fbf3 	bl	800baa0 <clust2sect>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2d2:	441a      	add	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3718      	adds	r7, #24
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b086      	sub	sp, #24
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f7ff feb4 	bl	800c062 <dir_sdi>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d12b      	bne.n	800c35c <dir_alloc+0x7a>
		n = 0;
 800c304:	2300      	movs	r3, #0
 800c306:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	69db      	ldr	r3, [r3, #28]
 800c30c:	4619      	mov	r1, r3
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	f7ff fb2a 	bl	800b968 <move_window>
 800c314:	4603      	mov	r3, r0
 800c316:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c318:	7dfb      	ldrb	r3, [r7, #23]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d11d      	bne.n	800c35a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6a1b      	ldr	r3, [r3, #32]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	2be5      	cmp	r3, #229	@ 0xe5
 800c326:	d004      	beq.n	800c332 <dir_alloc+0x50>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a1b      	ldr	r3, [r3, #32]
 800c32c:	781b      	ldrb	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d107      	bne.n	800c342 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	3301      	adds	r3, #1
 800c336:	613b      	str	r3, [r7, #16]
 800c338:	693a      	ldr	r2, [r7, #16]
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d102      	bne.n	800c346 <dir_alloc+0x64>
 800c340:	e00c      	b.n	800c35c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c342:	2300      	movs	r3, #0
 800c344:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c346:	2101      	movs	r1, #1
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f7ff ff05 	bl	800c158 <dir_next>
 800c34e:	4603      	mov	r3, r0
 800c350:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c352:	7dfb      	ldrb	r3, [r7, #23]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d0d7      	beq.n	800c308 <dir_alloc+0x26>
 800c358:	e000      	b.n	800c35c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c35a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c35c:	7dfb      	ldrb	r3, [r7, #23]
 800c35e:	2b04      	cmp	r3, #4
 800c360:	d101      	bne.n	800c366 <dir_alloc+0x84>
 800c362:	2307      	movs	r3, #7
 800c364:	75fb      	strb	r3, [r7, #23]
	return res;
 800c366:	7dfb      	ldrb	r3, [r7, #23]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3718      	adds	r7, #24
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	331a      	adds	r3, #26
 800c37e:	4618      	mov	r0, r3
 800c380:	f7ff f842 	bl	800b408 <ld_word>
 800c384:	4603      	mov	r3, r0
 800c386:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	2b03      	cmp	r3, #3
 800c38e:	d109      	bne.n	800c3a4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	3314      	adds	r3, #20
 800c394:	4618      	mov	r0, r3
 800c396:	f7ff f837 	bl	800b408 <ld_word>
 800c39a:	4603      	mov	r3, r0
 800c39c:	041b      	lsls	r3, r3, #16
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c3ae:	b580      	push	{r7, lr}
 800c3b0:	b084      	sub	sp, #16
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	60f8      	str	r0, [r7, #12]
 800c3b6:	60b9      	str	r1, [r7, #8]
 800c3b8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	331a      	adds	r3, #26
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	b292      	uxth	r2, r2
 800c3c2:	4611      	mov	r1, r2
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7ff f85a 	bl	800b47e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	2b03      	cmp	r3, #3
 800c3d0:	d109      	bne.n	800c3e6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	f103 0214 	add.w	r2, r3, #20
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	0c1b      	lsrs	r3, r3, #16
 800c3dc:	b29b      	uxth	r3, r3
 800c3de:	4619      	mov	r1, r3
 800c3e0:	4610      	mov	r0, r2
 800c3e2:	f7ff f84c 	bl	800b47e <st_word>
	}
}
 800c3e6:	bf00      	nop
 800c3e8:	3710      	adds	r7, #16
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b086      	sub	sp, #24
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c3f8:	2304      	movs	r3, #4
 800c3fa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800c402:	e03c      	b.n	800c47e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	69db      	ldr	r3, [r3, #28]
 800c408:	4619      	mov	r1, r3
 800c40a:	6938      	ldr	r0, [r7, #16]
 800c40c:	f7ff faac 	bl	800b968 <move_window>
 800c410:	4603      	mov	r3, r0
 800c412:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c414:	7dfb      	ldrb	r3, [r7, #23]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d136      	bne.n	800c488 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6a1b      	ldr	r3, [r3, #32]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800c422:	7bfb      	ldrb	r3, [r7, #15]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d102      	bne.n	800c42e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c428:	2304      	movs	r3, #4
 800c42a:	75fb      	strb	r3, [r7, #23]
 800c42c:	e031      	b.n	800c492 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	330b      	adds	r3, #11
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c43a:	73bb      	strb	r3, [r7, #14]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	7bba      	ldrb	r2, [r7, #14]
 800c440:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800c442:	7bfb      	ldrb	r3, [r7, #15]
 800c444:	2be5      	cmp	r3, #229	@ 0xe5
 800c446:	d011      	beq.n	800c46c <dir_read+0x7e>
 800c448:	7bfb      	ldrb	r3, [r7, #15]
 800c44a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c44c:	d00e      	beq.n	800c46c <dir_read+0x7e>
 800c44e:	7bbb      	ldrb	r3, [r7, #14]
 800c450:	2b0f      	cmp	r3, #15
 800c452:	d00b      	beq.n	800c46c <dir_read+0x7e>
 800c454:	7bbb      	ldrb	r3, [r7, #14]
 800c456:	f023 0320 	bic.w	r3, r3, #32
 800c45a:	2b08      	cmp	r3, #8
 800c45c:	bf0c      	ite	eq
 800c45e:	2301      	moveq	r3, #1
 800c460:	2300      	movne	r3, #0
 800c462:	b2db      	uxtb	r3, r3
 800c464:	461a      	mov	r2, r3
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	4293      	cmp	r3, r2
 800c46a:	d00f      	beq.n	800c48c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c46c:	2100      	movs	r1, #0
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f7ff fe72 	bl	800c158 <dir_next>
 800c474:	4603      	mov	r3, r0
 800c476:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c478:	7dfb      	ldrb	r3, [r7, #23]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d108      	bne.n	800c490 <dir_read+0xa2>
	while (dp->sect) {
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	69db      	ldr	r3, [r3, #28]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1be      	bne.n	800c404 <dir_read+0x16>
 800c486:	e004      	b.n	800c492 <dir_read+0xa4>
		if (res != FR_OK) break;
 800c488:	bf00      	nop
 800c48a:	e002      	b.n	800c492 <dir_read+0xa4>
				break;
 800c48c:	bf00      	nop
 800c48e:	e000      	b.n	800c492 <dir_read+0xa4>
		if (res != FR_OK) break;
 800c490:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c492:	7dfb      	ldrb	r3, [r7, #23]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <dir_read+0xb0>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	61da      	str	r2, [r3, #28]
	return res;
 800c49e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3718      	adds	r7, #24
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b086      	sub	sp, #24
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7ff fdd2 	bl	800c062 <dir_sdi>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c4c2:	7dfb      	ldrb	r3, [r7, #23]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d001      	beq.n	800c4cc <dir_find+0x24>
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ca:	e03e      	b.n	800c54a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	69db      	ldr	r3, [r3, #28]
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	6938      	ldr	r0, [r7, #16]
 800c4d4:	f7ff fa48 	bl	800b968 <move_window>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c4dc:	7dfb      	ldrb	r3, [r7, #23]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d12f      	bne.n	800c542 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d102      	bne.n	800c4f6 <dir_find+0x4e>
 800c4f0:	2304      	movs	r3, #4
 800c4f2:	75fb      	strb	r3, [r7, #23]
 800c4f4:	e028      	b.n	800c548 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6a1b      	ldr	r3, [r3, #32]
 800c4fa:	330b      	adds	r3, #11
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c502:	b2da      	uxtb	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a1b      	ldr	r3, [r3, #32]
 800c50c:	330b      	adds	r3, #11
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	f003 0308 	and.w	r3, r3, #8
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10a      	bne.n	800c52e <dir_find+0x86>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6a18      	ldr	r0, [r3, #32]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	3324      	adds	r3, #36	@ 0x24
 800c520:	220b      	movs	r2, #11
 800c522:	4619      	mov	r1, r3
 800c524:	f7ff f82e 	bl	800b584 <mem_cmp>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00b      	beq.n	800c546 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c52e:	2100      	movs	r1, #0
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7ff fe11 	bl	800c158 <dir_next>
 800c536:	4603      	mov	r3, r0
 800c538:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c53a:	7dfb      	ldrb	r3, [r7, #23]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d0c5      	beq.n	800c4cc <dir_find+0x24>
 800c540:	e002      	b.n	800c548 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c542:	bf00      	nop
 800c544:	e000      	b.n	800c548 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c546:	bf00      	nop

	return res;
 800c548:	7dfb      	ldrb	r3, [r7, #23]
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3718      	adds	r7, #24
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}

0800c552 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b084      	sub	sp, #16
 800c556:	af00      	add	r7, sp, #0
 800c558:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c560:	2101      	movs	r1, #1
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7ff febd 	bl	800c2e2 <dir_alloc>
 800c568:	4603      	mov	r3, r0
 800c56a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c56c:	7bfb      	ldrb	r3, [r7, #15]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d11c      	bne.n	800c5ac <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	69db      	ldr	r3, [r3, #28]
 800c576:	4619      	mov	r1, r3
 800c578:	68b8      	ldr	r0, [r7, #8]
 800c57a:	f7ff f9f5 	bl	800b968 <move_window>
 800c57e:	4603      	mov	r3, r0
 800c580:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c582:	7bfb      	ldrb	r3, [r7, #15]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d111      	bne.n	800c5ac <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a1b      	ldr	r3, [r3, #32]
 800c58c:	2220      	movs	r2, #32
 800c58e:	2100      	movs	r1, #0
 800c590:	4618      	mov	r0, r3
 800c592:	f7fe ffdc 	bl	800b54e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6a18      	ldr	r0, [r3, #32]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	3324      	adds	r3, #36	@ 0x24
 800c59e:	220b      	movs	r2, #11
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	f7fe ffb3 	bl	800b50c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b084      	sub	sp, #16
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	69db      	ldr	r3, [r3, #28]
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f7ff f9cc 	bl	800b968 <move_window>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800c5d4:	7afb      	ldrb	r3, [r7, #11]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d106      	bne.n	800c5e8 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6a1b      	ldr	r3, [r3, #32]
 800c5de:	22e5      	movs	r2, #229	@ 0xe5
 800c5e0:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800c5e8:	7afb      	ldrb	r3, [r7, #11]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
	...

0800c5f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b088      	sub	sp, #32
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	60fb      	str	r3, [r7, #12]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	3324      	adds	r3, #36	@ 0x24
 800c608:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c60a:	220b      	movs	r2, #11
 800c60c:	2120      	movs	r1, #32
 800c60e:	68b8      	ldr	r0, [r7, #8]
 800c610:	f7fe ff9d 	bl	800b54e <mem_set>
	si = i = 0; ni = 8;
 800c614:	2300      	movs	r3, #0
 800c616:	613b      	str	r3, [r7, #16]
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	61fb      	str	r3, [r7, #28]
 800c61c:	2308      	movs	r3, #8
 800c61e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	61fa      	str	r2, [r7, #28]
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	4413      	add	r3, r2
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c62e:	7efb      	ldrb	r3, [r7, #27]
 800c630:	2b20      	cmp	r3, #32
 800c632:	d94e      	bls.n	800c6d2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c634:	7efb      	ldrb	r3, [r7, #27]
 800c636:	2b2f      	cmp	r3, #47	@ 0x2f
 800c638:	d006      	beq.n	800c648 <create_name+0x54>
 800c63a:	7efb      	ldrb	r3, [r7, #27]
 800c63c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c63e:	d110      	bne.n	800c662 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c640:	e002      	b.n	800c648 <create_name+0x54>
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	3301      	adds	r3, #1
 800c646:	61fb      	str	r3, [r7, #28]
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	4413      	add	r3, r2
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	2b2f      	cmp	r3, #47	@ 0x2f
 800c652:	d0f6      	beq.n	800c642 <create_name+0x4e>
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	4413      	add	r3, r2
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c65e:	d0f0      	beq.n	800c642 <create_name+0x4e>
			break;
 800c660:	e038      	b.n	800c6d4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c662:	7efb      	ldrb	r3, [r7, #27]
 800c664:	2b2e      	cmp	r3, #46	@ 0x2e
 800c666:	d003      	beq.n	800c670 <create_name+0x7c>
 800c668:	693a      	ldr	r2, [r7, #16]
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d30c      	bcc.n	800c68a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	2b0b      	cmp	r3, #11
 800c674:	d002      	beq.n	800c67c <create_name+0x88>
 800c676:	7efb      	ldrb	r3, [r7, #27]
 800c678:	2b2e      	cmp	r3, #46	@ 0x2e
 800c67a:	d001      	beq.n	800c680 <create_name+0x8c>
 800c67c:	2306      	movs	r3, #6
 800c67e:	e044      	b.n	800c70a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c680:	2308      	movs	r3, #8
 800c682:	613b      	str	r3, [r7, #16]
 800c684:	230b      	movs	r3, #11
 800c686:	617b      	str	r3, [r7, #20]
			continue;
 800c688:	e022      	b.n	800c6d0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c68a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	da04      	bge.n	800c69c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c692:	7efb      	ldrb	r3, [r7, #27]
 800c694:	3b80      	subs	r3, #128	@ 0x80
 800c696:	4a1f      	ldr	r2, [pc, #124]	@ (800c714 <create_name+0x120>)
 800c698:	5cd3      	ldrb	r3, [r2, r3]
 800c69a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c69c:	7efb      	ldrb	r3, [r7, #27]
 800c69e:	4619      	mov	r1, r3
 800c6a0:	481d      	ldr	r0, [pc, #116]	@ (800c718 <create_name+0x124>)
 800c6a2:	f7fe ff96 	bl	800b5d2 <chk_chr>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d001      	beq.n	800c6b0 <create_name+0xbc>
 800c6ac:	2306      	movs	r3, #6
 800c6ae:	e02c      	b.n	800c70a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c6b0:	7efb      	ldrb	r3, [r7, #27]
 800c6b2:	2b60      	cmp	r3, #96	@ 0x60
 800c6b4:	d905      	bls.n	800c6c2 <create_name+0xce>
 800c6b6:	7efb      	ldrb	r3, [r7, #27]
 800c6b8:	2b7a      	cmp	r3, #122	@ 0x7a
 800c6ba:	d802      	bhi.n	800c6c2 <create_name+0xce>
 800c6bc:	7efb      	ldrb	r3, [r7, #27]
 800c6be:	3b20      	subs	r3, #32
 800c6c0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	1c5a      	adds	r2, r3, #1
 800c6c6:	613a      	str	r2, [r7, #16]
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	7efa      	ldrb	r2, [r7, #27]
 800c6ce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c6d0:	e7a6      	b.n	800c620 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c6d2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	69fb      	ldr	r3, [r7, #28]
 800c6d8:	441a      	add	r2, r3
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d101      	bne.n	800c6e8 <create_name+0xf4>
 800c6e4:	2306      	movs	r3, #6
 800c6e6:	e010      	b.n	800c70a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	2be5      	cmp	r3, #229	@ 0xe5
 800c6ee:	d102      	bne.n	800c6f6 <create_name+0x102>
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	2205      	movs	r2, #5
 800c6f4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c6f6:	7efb      	ldrb	r3, [r7, #27]
 800c6f8:	2b20      	cmp	r3, #32
 800c6fa:	d801      	bhi.n	800c700 <create_name+0x10c>
 800c6fc:	2204      	movs	r2, #4
 800c6fe:	e000      	b.n	800c702 <create_name+0x10e>
 800c700:	2200      	movs	r2, #0
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	330b      	adds	r3, #11
 800c706:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c708:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3720      	adds	r7, #32
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	0800f3dc 	.word	0x0800f3dc
 800c718:	0800e604 	.word	0x0800e604

0800c71c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c730:	e002      	b.n	800c738 <follow_path+0x1c>
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	3301      	adds	r3, #1
 800c736:	603b      	str	r3, [r7, #0]
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c73e:	d0f8      	beq.n	800c732 <follow_path+0x16>
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	2b5c      	cmp	r3, #92	@ 0x5c
 800c746:	d0f4      	beq.n	800c732 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	2200      	movs	r2, #0
 800c74c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	2b1f      	cmp	r3, #31
 800c754:	d80a      	bhi.n	800c76c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2280      	movs	r2, #128	@ 0x80
 800c75a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c75e:	2100      	movs	r1, #0
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7ff fc7e 	bl	800c062 <dir_sdi>
 800c766:	4603      	mov	r3, r0
 800c768:	75fb      	strb	r3, [r7, #23]
 800c76a:	e043      	b.n	800c7f4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c76c:	463b      	mov	r3, r7
 800c76e:	4619      	mov	r1, r3
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7ff ff3f 	bl	800c5f4 <create_name>
 800c776:	4603      	mov	r3, r0
 800c778:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c77a:	7dfb      	ldrb	r3, [r7, #23]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d134      	bne.n	800c7ea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7ff fe91 	bl	800c4a8 <dir_find>
 800c786:	4603      	mov	r3, r0
 800c788:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c790:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c792:	7dfb      	ldrb	r3, [r7, #23]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d00a      	beq.n	800c7ae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c798:	7dfb      	ldrb	r3, [r7, #23]
 800c79a:	2b04      	cmp	r3, #4
 800c79c:	d127      	bne.n	800c7ee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c79e:	7afb      	ldrb	r3, [r7, #11]
 800c7a0:	f003 0304 	and.w	r3, r3, #4
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d122      	bne.n	800c7ee <follow_path+0xd2>
 800c7a8:	2305      	movs	r3, #5
 800c7aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c7ac:	e01f      	b.n	800c7ee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7ae:	7afb      	ldrb	r3, [r7, #11]
 800c7b0:	f003 0304 	and.w	r3, r3, #4
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d11c      	bne.n	800c7f2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	799b      	ldrb	r3, [r3, #6]
 800c7bc:	f003 0310 	and.w	r3, r3, #16
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d102      	bne.n	800c7ca <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c7c4:	2305      	movs	r3, #5
 800c7c6:	75fb      	strb	r3, [r7, #23]
 800c7c8:	e014      	b.n	800c7f4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	695b      	ldr	r3, [r3, #20]
 800c7d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7d8:	4413      	add	r3, r2
 800c7da:	4619      	mov	r1, r3
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f7ff fdc7 	bl	800c370 <ld_clust>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c7e8:	e7c0      	b.n	800c76c <follow_path+0x50>
			if (res != FR_OK) break;
 800c7ea:	bf00      	nop
 800c7ec:	e002      	b.n	800c7f4 <follow_path+0xd8>
				break;
 800c7ee:	bf00      	nop
 800c7f0:	e000      	b.n	800c7f4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7f2:	bf00      	nop
			}
		}
	}

	return res;
 800c7f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3718      	adds	r7, #24
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c7fe:	b480      	push	{r7}
 800c800:	b087      	sub	sp, #28
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c806:	f04f 33ff 	mov.w	r3, #4294967295
 800c80a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d031      	beq.n	800c878 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	617b      	str	r3, [r7, #20]
 800c81a:	e002      	b.n	800c822 <get_ldnumber+0x24>
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	3301      	adds	r3, #1
 800c820:	617b      	str	r3, [r7, #20]
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	2b20      	cmp	r3, #32
 800c828:	d903      	bls.n	800c832 <get_ldnumber+0x34>
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	2b3a      	cmp	r3, #58	@ 0x3a
 800c830:	d1f4      	bne.n	800c81c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	2b3a      	cmp	r3, #58	@ 0x3a
 800c838:	d11c      	bne.n	800c874 <get_ldnumber+0x76>
			tp = *path;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	1c5a      	adds	r2, r3, #1
 800c844:	60fa      	str	r2, [r7, #12]
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	3b30      	subs	r3, #48	@ 0x30
 800c84a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	2b09      	cmp	r3, #9
 800c850:	d80e      	bhi.n	800c870 <get_ldnumber+0x72>
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	429a      	cmp	r2, r3
 800c858:	d10a      	bne.n	800c870 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d107      	bne.n	800c870 <get_ldnumber+0x72>
					vol = (int)i;
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	3301      	adds	r3, #1
 800c868:	617b      	str	r3, [r7, #20]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	697a      	ldr	r2, [r7, #20]
 800c86e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	e002      	b.n	800c87a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c874:	2300      	movs	r3, #0
 800c876:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c878:	693b      	ldr	r3, [r7, #16]
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	371c      	adds	r7, #28
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr
	...

0800c888 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	70da      	strb	r2, [r3, #3]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f04f 32ff 	mov.w	r2, #4294967295
 800c89e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c8a0:	6839      	ldr	r1, [r7, #0]
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f7ff f860 	bl	800b968 <move_window>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d001      	beq.n	800c8b2 <check_fs+0x2a>
 800c8ae:	2304      	movs	r3, #4
 800c8b0:	e038      	b.n	800c924 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	3330      	adds	r3, #48	@ 0x30
 800c8b6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fe fda4 	bl	800b408 <ld_word>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d001      	beq.n	800c8d0 <check_fs+0x48>
 800c8cc:	2303      	movs	r3, #3
 800c8ce:	e029      	b.n	800c924 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c8d6:	2be9      	cmp	r3, #233	@ 0xe9
 800c8d8:	d009      	beq.n	800c8ee <check_fs+0x66>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c8e0:	2beb      	cmp	r3, #235	@ 0xeb
 800c8e2:	d11e      	bne.n	800c922 <check_fs+0x9a>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c8ea:	2b90      	cmp	r3, #144	@ 0x90
 800c8ec:	d119      	bne.n	800c922 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	3330      	adds	r3, #48	@ 0x30
 800c8f2:	3336      	adds	r3, #54	@ 0x36
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fe fd9f 	bl	800b438 <ld_dword>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c900:	4a0a      	ldr	r2, [pc, #40]	@ (800c92c <check_fs+0xa4>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d101      	bne.n	800c90a <check_fs+0x82>
 800c906:	2300      	movs	r3, #0
 800c908:	e00c      	b.n	800c924 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	3330      	adds	r3, #48	@ 0x30
 800c90e:	3352      	adds	r3, #82	@ 0x52
 800c910:	4618      	mov	r0, r3
 800c912:	f7fe fd91 	bl	800b438 <ld_dword>
 800c916:	4603      	mov	r3, r0
 800c918:	4a05      	ldr	r2, [pc, #20]	@ (800c930 <check_fs+0xa8>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d101      	bne.n	800c922 <check_fs+0x9a>
 800c91e:	2300      	movs	r3, #0
 800c920:	e000      	b.n	800c924 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c922:	2302      	movs	r3, #2
}
 800c924:	4618      	mov	r0, r3
 800c926:	3708      	adds	r7, #8
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	00544146 	.word	0x00544146
 800c930:	33544146 	.word	0x33544146

0800c934 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b096      	sub	sp, #88	@ 0x58
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	4613      	mov	r3, r2
 800c940:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	2200      	movs	r2, #0
 800c946:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f7ff ff58 	bl	800c7fe <get_ldnumber>
 800c94e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c952:	2b00      	cmp	r3, #0
 800c954:	da01      	bge.n	800c95a <find_volume+0x26>
 800c956:	230b      	movs	r3, #11
 800c958:	e22d      	b.n	800cdb6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c95a:	4aa1      	ldr	r2, [pc, #644]	@ (800cbe0 <find_volume+0x2ac>)
 800c95c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c962:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c966:	2b00      	cmp	r3, #0
 800c968:	d101      	bne.n	800c96e <find_volume+0x3a>
 800c96a:	230c      	movs	r3, #12
 800c96c:	e223      	b.n	800cdb6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c972:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c974:	79fb      	ldrb	r3, [r7, #7]
 800c976:	f023 0301 	bic.w	r3, r3, #1
 800c97a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d01a      	beq.n	800c9ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c986:	785b      	ldrb	r3, [r3, #1]
 800c988:	4618      	mov	r0, r3
 800c98a:	f7fe fc9d 	bl	800b2c8 <disk_status>
 800c98e:	4603      	mov	r3, r0
 800c990:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c994:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10c      	bne.n	800c9ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c9a0:	79fb      	ldrb	r3, [r7, #7]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d007      	beq.n	800c9b6 <find_volume+0x82>
 800c9a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c9aa:	f003 0304 	and.w	r3, r3, #4
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d001      	beq.n	800c9b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c9b2:	230a      	movs	r3, #10
 800c9b4:	e1ff      	b.n	800cdb6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	e1fd      	b.n	800cdb6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9bc:	2200      	movs	r2, #0
 800c9be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c9c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ca:	785b      	ldrb	r3, [r3, #1]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7fe fc95 	bl	800b2fc <disk_initialize>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c9d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c9dc:	f003 0301 	and.w	r3, r3, #1
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d001      	beq.n	800c9e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c9e4:	2303      	movs	r3, #3
 800c9e6:	e1e6      	b.n	800cdb6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c9e8:	79fb      	ldrb	r3, [r7, #7]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d007      	beq.n	800c9fe <find_volume+0xca>
 800c9ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c9f2:	f003 0304 	and.w	r3, r3, #4
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d001      	beq.n	800c9fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c9fa:	230a      	movs	r3, #10
 800c9fc:	e1db      	b.n	800cdb6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ca02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca04:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca06:	f7ff ff3f 	bl	800c888 <check_fs>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ca10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca14:	2b02      	cmp	r3, #2
 800ca16:	d149      	bne.n	800caac <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca18:	2300      	movs	r3, #0
 800ca1a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca1c:	e01e      	b.n	800ca5c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca26:	011b      	lsls	r3, r3, #4
 800ca28:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ca2c:	4413      	add	r3, r2
 800ca2e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ca30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca32:	3304      	adds	r3, #4
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d006      	beq.n	800ca48 <find_volume+0x114>
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca3c:	3308      	adds	r3, #8
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fe fcfa 	bl	800b438 <ld_dword>
 800ca44:	4602      	mov	r2, r0
 800ca46:	e000      	b.n	800ca4a <find_volume+0x116>
 800ca48:	2200      	movs	r2, #0
 800ca4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	3358      	adds	r3, #88	@ 0x58
 800ca50:	443b      	add	r3, r7
 800ca52:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca58:	3301      	adds	r3, #1
 800ca5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d9dd      	bls.n	800ca1e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ca62:	2300      	movs	r3, #0
 800ca64:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800ca66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d002      	beq.n	800ca72 <find_volume+0x13e>
 800ca6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ca72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	3358      	adds	r3, #88	@ 0x58
 800ca78:	443b      	add	r3, r7
 800ca7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ca7e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ca80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d005      	beq.n	800ca92 <find_volume+0x15e>
 800ca86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca88:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca8a:	f7ff fefd 	bl	800c888 <check_fs>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	e000      	b.n	800ca94 <find_volume+0x160>
 800ca92:	2303      	movs	r3, #3
 800ca94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ca98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d905      	bls.n	800caac <find_volume+0x178>
 800caa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caa2:	3301      	adds	r3, #1
 800caa4:	643b      	str	r3, [r7, #64]	@ 0x40
 800caa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caa8:	2b03      	cmp	r3, #3
 800caaa:	d9e2      	bls.n	800ca72 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800caac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cab0:	2b04      	cmp	r3, #4
 800cab2:	d101      	bne.n	800cab8 <find_volume+0x184>
 800cab4:	2301      	movs	r3, #1
 800cab6:	e17e      	b.n	800cdb6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cab8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d901      	bls.n	800cac4 <find_volume+0x190>
 800cac0:	230d      	movs	r3, #13
 800cac2:	e178      	b.n	800cdb6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac6:	3330      	adds	r3, #48	@ 0x30
 800cac8:	330b      	adds	r3, #11
 800caca:	4618      	mov	r0, r3
 800cacc:	f7fe fc9c 	bl	800b408 <ld_word>
 800cad0:	4603      	mov	r3, r0
 800cad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cad6:	d001      	beq.n	800cadc <find_volume+0x1a8>
 800cad8:	230d      	movs	r3, #13
 800cada:	e16c      	b.n	800cdb6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cade:	3330      	adds	r3, #48	@ 0x30
 800cae0:	3316      	adds	r3, #22
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fe fc90 	bl	800b408 <ld_word>
 800cae8:	4603      	mov	r3, r0
 800caea:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800caec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d106      	bne.n	800cb00 <find_volume+0x1cc>
 800caf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf4:	3330      	adds	r3, #48	@ 0x30
 800caf6:	3324      	adds	r3, #36	@ 0x24
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7fe fc9d 	bl	800b438 <ld_dword>
 800cafe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800cb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb04:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb08:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb0e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cb10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb12:	789b      	ldrb	r3, [r3, #2]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d005      	beq.n	800cb24 <find_volume+0x1f0>
 800cb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb1a:	789b      	ldrb	r3, [r3, #2]
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d001      	beq.n	800cb24 <find_volume+0x1f0>
 800cb20:	230d      	movs	r3, #13
 800cb22:	e148      	b.n	800cdb6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb26:	789b      	ldrb	r3, [r3, #2]
 800cb28:	461a      	mov	r2, r3
 800cb2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb2c:	fb02 f303 	mul.w	r3, r2, r3
 800cb30:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cb32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb38:	461a      	mov	r2, r3
 800cb3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb3c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cb3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb40:	895b      	ldrh	r3, [r3, #10]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d008      	beq.n	800cb58 <find_volume+0x224>
 800cb46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb48:	895b      	ldrh	r3, [r3, #10]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb4e:	895b      	ldrh	r3, [r3, #10]
 800cb50:	3b01      	subs	r3, #1
 800cb52:	4013      	ands	r3, r2
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d001      	beq.n	800cb5c <find_volume+0x228>
 800cb58:	230d      	movs	r3, #13
 800cb5a:	e12c      	b.n	800cdb6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb5e:	3330      	adds	r3, #48	@ 0x30
 800cb60:	3311      	adds	r3, #17
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7fe fc50 	bl	800b408 <ld_word>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb6e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cb70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb72:	891b      	ldrh	r3, [r3, #8]
 800cb74:	f003 030f 	and.w	r3, r3, #15
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d001      	beq.n	800cb82 <find_volume+0x24e>
 800cb7e:	230d      	movs	r3, #13
 800cb80:	e119      	b.n	800cdb6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb84:	3330      	adds	r3, #48	@ 0x30
 800cb86:	3313      	adds	r3, #19
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7fe fc3d 	bl	800b408 <ld_word>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cb92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d106      	bne.n	800cba6 <find_volume+0x272>
 800cb98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb9a:	3330      	adds	r3, #48	@ 0x30
 800cb9c:	3320      	adds	r3, #32
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fe fc4a 	bl	800b438 <ld_dword>
 800cba4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba8:	3330      	adds	r3, #48	@ 0x30
 800cbaa:	330e      	adds	r3, #14
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7fe fc2b 	bl	800b408 <ld_word>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cbb6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <find_volume+0x28c>
 800cbbc:	230d      	movs	r3, #13
 800cbbe:	e0fa      	b.n	800cdb6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cbc0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cbc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbc4:	4413      	add	r3, r2
 800cbc6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbc8:	8912      	ldrh	r2, [r2, #8]
 800cbca:	0912      	lsrs	r2, r2, #4
 800cbcc:	b292      	uxth	r2, r2
 800cbce:	4413      	add	r3, r2
 800cbd0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cbd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cbd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d204      	bcs.n	800cbe4 <find_volume+0x2b0>
 800cbda:	230d      	movs	r3, #13
 800cbdc:	e0eb      	b.n	800cdb6 <find_volume+0x482>
 800cbde:	bf00      	nop
 800cbe0:	20014738 	.word	0x20014738
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cbe4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cbe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbe8:	1ad3      	subs	r3, r2, r3
 800cbea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbec:	8952      	ldrh	r2, [r2, #10]
 800cbee:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbf2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d101      	bne.n	800cbfe <find_volume+0x2ca>
 800cbfa:	230d      	movs	r3, #13
 800cbfc:	e0db      	b.n	800cdb6 <find_volume+0x482>
		fmt = FS_FAT32;
 800cbfe:	2303      	movs	r3, #3
 800cc00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc06:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d802      	bhi.n	800cc14 <find_volume+0x2e0>
 800cc0e:	2302      	movs	r3, #2
 800cc10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc16:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d802      	bhi.n	800cc24 <find_volume+0x2f0>
 800cc1e:	2301      	movs	r3, #1
 800cc20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc26:	1c9a      	adds	r2, r3, #2
 800cc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc30:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cc32:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cc34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc36:	441a      	add	r2, r3
 800cc38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cc3c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc40:	441a      	add	r2, r3
 800cc42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc44:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800cc46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc4a:	2b03      	cmp	r3, #3
 800cc4c:	d11e      	bne.n	800cc8c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cc4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc50:	3330      	adds	r3, #48	@ 0x30
 800cc52:	332a      	adds	r3, #42	@ 0x2a
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7fe fbd7 	bl	800b408 <ld_word>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d001      	beq.n	800cc64 <find_volume+0x330>
 800cc60:	230d      	movs	r3, #13
 800cc62:	e0a8      	b.n	800cdb6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc66:	891b      	ldrh	r3, [r3, #8]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d001      	beq.n	800cc70 <find_volume+0x33c>
 800cc6c:	230d      	movs	r3, #13
 800cc6e:	e0a2      	b.n	800cdb6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc72:	3330      	adds	r3, #48	@ 0x30
 800cc74:	332c      	adds	r3, #44	@ 0x2c
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fe fbde 	bl	800b438 <ld_dword>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc80:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cc82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc8a:	e01f      	b.n	800cccc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8e:	891b      	ldrh	r3, [r3, #8]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d101      	bne.n	800cc98 <find_volume+0x364>
 800cc94:	230d      	movs	r3, #13
 800cc96:	e08e      	b.n	800cdb6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cc98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc9a:	6a1a      	ldr	r2, [r3, #32]
 800cc9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc9e:	441a      	add	r2, r3
 800cca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cca4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	d103      	bne.n	800ccb4 <find_volume+0x380>
 800ccac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccae:	695b      	ldr	r3, [r3, #20]
 800ccb0:	005b      	lsls	r3, r3, #1
 800ccb2:	e00a      	b.n	800ccca <find_volume+0x396>
 800ccb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb6:	695a      	ldr	r2, [r3, #20]
 800ccb8:	4613      	mov	r3, r2
 800ccba:	005b      	lsls	r3, r3, #1
 800ccbc:	4413      	add	r3, r2
 800ccbe:	085a      	lsrs	r2, r3, #1
 800ccc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc2:	695b      	ldr	r3, [r3, #20]
 800ccc4:	f003 0301 	and.w	r3, r3, #1
 800ccc8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ccca:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccce:	699a      	ldr	r2, [r3, #24]
 800ccd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccd2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800ccd6:	0a5b      	lsrs	r3, r3, #9
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d201      	bcs.n	800cce0 <find_volume+0x3ac>
 800ccdc:	230d      	movs	r3, #13
 800ccde:	e06a      	b.n	800cdb6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce2:	f04f 32ff 	mov.w	r2, #4294967295
 800cce6:	611a      	str	r2, [r3, #16]
 800cce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccea:	691a      	ldr	r2, [r3, #16]
 800ccec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccee:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ccf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf2:	2280      	movs	r2, #128	@ 0x80
 800ccf4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ccf6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ccfa:	2b03      	cmp	r3, #3
 800ccfc:	d149      	bne.n	800cd92 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ccfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd00:	3330      	adds	r3, #48	@ 0x30
 800cd02:	3330      	adds	r3, #48	@ 0x30
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7fe fb7f 	bl	800b408 <ld_word>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d140      	bne.n	800cd92 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cd10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd12:	3301      	adds	r3, #1
 800cd14:	4619      	mov	r1, r3
 800cd16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cd18:	f7fe fe26 	bl	800b968 <move_window>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d137      	bne.n	800cd92 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cd22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd24:	2200      	movs	r2, #0
 800cd26:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd2a:	3330      	adds	r3, #48	@ 0x30
 800cd2c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fe fb69 	bl	800b408 <ld_word>
 800cd36:	4603      	mov	r3, r0
 800cd38:	461a      	mov	r2, r3
 800cd3a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d127      	bne.n	800cd92 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cd42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd44:	3330      	adds	r3, #48	@ 0x30
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fe fb76 	bl	800b438 <ld_dword>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	4a1c      	ldr	r2, [pc, #112]	@ (800cdc0 <find_volume+0x48c>)
 800cd50:	4293      	cmp	r3, r2
 800cd52:	d11e      	bne.n	800cd92 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd56:	3330      	adds	r3, #48	@ 0x30
 800cd58:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7fe fb6b 	bl	800b438 <ld_dword>
 800cd62:	4603      	mov	r3, r0
 800cd64:	4a17      	ldr	r2, [pc, #92]	@ (800cdc4 <find_volume+0x490>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d113      	bne.n	800cd92 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6c:	3330      	adds	r3, #48	@ 0x30
 800cd6e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7fe fb60 	bl	800b438 <ld_dword>
 800cd78:	4602      	mov	r2, r0
 800cd7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd80:	3330      	adds	r3, #48	@ 0x30
 800cd82:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7fe fb56 	bl	800b438 <ld_dword>
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd90:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cd92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd94:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800cd98:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cd9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cdc8 <find_volume+0x494>)
 800cd9c:	881b      	ldrh	r3, [r3, #0]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	b29a      	uxth	r2, r3
 800cda2:	4b09      	ldr	r3, [pc, #36]	@ (800cdc8 <find_volume+0x494>)
 800cda4:	801a      	strh	r2, [r3, #0]
 800cda6:	4b08      	ldr	r3, [pc, #32]	@ (800cdc8 <find_volume+0x494>)
 800cda8:	881a      	ldrh	r2, [r3, #0]
 800cdaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdac:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cdae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cdb0:	f7fe fd72 	bl	800b898 <clear_lock>
#endif
	return FR_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3758      	adds	r7, #88	@ 0x58
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	41615252 	.word	0x41615252
 800cdc4:	61417272 	.word	0x61417272
 800cdc8:	2001473c 	.word	0x2001473c

0800cdcc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cdd6:	2309      	movs	r3, #9
 800cdd8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d01c      	beq.n	800ce1a <validate+0x4e>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d018      	beq.n	800ce1a <validate+0x4e>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d013      	beq.n	800ce1a <validate+0x4e>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	889a      	ldrh	r2, [r3, #4]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	88db      	ldrh	r3, [r3, #6]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d10c      	bne.n	800ce1a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	785b      	ldrb	r3, [r3, #1]
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fe fa5e 	bl	800b2c8 <disk_status>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	f003 0301 	and.w	r3, r3, #1
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d101      	bne.n	800ce1a <validate+0x4e>
			res = FR_OK;
 800ce16:	2300      	movs	r3, #0
 800ce18:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ce1a:	7bfb      	ldrb	r3, [r7, #15]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <validate+0x5a>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	e000      	b.n	800ce28 <validate+0x5c>
 800ce26:	2300      	movs	r3, #0
 800ce28:	683a      	ldr	r2, [r7, #0]
 800ce2a:	6013      	str	r3, [r2, #0]
	return res;
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
	...

0800ce38 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b088      	sub	sp, #32
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	4613      	mov	r3, r2
 800ce44:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ce4a:	f107 0310 	add.w	r3, r7, #16
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7ff fcd5 	bl	800c7fe <get_ldnumber>
 800ce54:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	da01      	bge.n	800ce60 <f_mount+0x28>
 800ce5c:	230b      	movs	r3, #11
 800ce5e:	e02b      	b.n	800ceb8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ce60:	4a17      	ldr	r2, [pc, #92]	@ (800cec0 <f_mount+0x88>)
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce68:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d005      	beq.n	800ce7c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ce70:	69b8      	ldr	r0, [r7, #24]
 800ce72:	f7fe fd11 	bl	800b898 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d002      	beq.n	800ce88 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2200      	movs	r2, #0
 800ce86:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ce88:	68fa      	ldr	r2, [r7, #12]
 800ce8a:	490d      	ldr	r1, [pc, #52]	@ (800cec0 <f_mount+0x88>)
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d002      	beq.n	800ce9e <f_mount+0x66>
 800ce98:	79fb      	ldrb	r3, [r7, #7]
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d001      	beq.n	800cea2 <f_mount+0x6a>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	e00a      	b.n	800ceb8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cea2:	f107 010c 	add.w	r1, r7, #12
 800cea6:	f107 0308 	add.w	r3, r7, #8
 800ceaa:	2200      	movs	r2, #0
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7ff fd41 	bl	800c934 <find_volume>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ceb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3720      	adds	r7, #32
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	20014738 	.word	0x20014738

0800cec4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b098      	sub	sp, #96	@ 0x60
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	4613      	mov	r3, r2
 800ced0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d101      	bne.n	800cedc <f_open+0x18>
 800ced8:	2309      	movs	r3, #9
 800ceda:	e1a9      	b.n	800d230 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cedc:	79fb      	ldrb	r3, [r7, #7]
 800cede:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cee2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cee4:	79fa      	ldrb	r2, [r7, #7]
 800cee6:	f107 0110 	add.w	r1, r7, #16
 800ceea:	f107 0308 	add.w	r3, r7, #8
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7ff fd20 	bl	800c934 <find_volume>
 800cef4:	4603      	mov	r3, r0
 800cef6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800cefa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f040 818d 	bne.w	800d21e <f_open+0x35a>
		dj.obj.fs = fs;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cf08:	68ba      	ldr	r2, [r7, #8]
 800cf0a:	f107 0314 	add.w	r3, r7, #20
 800cf0e:	4611      	mov	r1, r2
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7ff fc03 	bl	800c71c <follow_path>
 800cf16:	4603      	mov	r3, r0
 800cf18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cf1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d118      	bne.n	800cf56 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cf24:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cf28:	b25b      	sxtb	r3, r3
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	da03      	bge.n	800cf36 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cf2e:	2306      	movs	r3, #6
 800cf30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cf34:	e00f      	b.n	800cf56 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf36:	79fb      	ldrb	r3, [r7, #7]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	bf8c      	ite	hi
 800cf3c:	2301      	movhi	r3, #1
 800cf3e:	2300      	movls	r3, #0
 800cf40:	b2db      	uxtb	r3, r3
 800cf42:	461a      	mov	r2, r3
 800cf44:	f107 0314 	add.w	r3, r7, #20
 800cf48:	4611      	mov	r1, r2
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7fe fb5c 	bl	800b608 <chk_lock>
 800cf50:	4603      	mov	r3, r0
 800cf52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cf56:	79fb      	ldrb	r3, [r7, #7]
 800cf58:	f003 031c 	and.w	r3, r3, #28
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d07f      	beq.n	800d060 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800cf60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d017      	beq.n	800cf98 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cf68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cf6c:	2b04      	cmp	r3, #4
 800cf6e:	d10e      	bne.n	800cf8e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cf70:	f7fe fba6 	bl	800b6c0 <enq_lock>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d006      	beq.n	800cf88 <f_open+0xc4>
 800cf7a:	f107 0314 	add.w	r3, r7, #20
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7ff fae7 	bl	800c552 <dir_register>
 800cf84:	4603      	mov	r3, r0
 800cf86:	e000      	b.n	800cf8a <f_open+0xc6>
 800cf88:	2312      	movs	r3, #18
 800cf8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cf8e:	79fb      	ldrb	r3, [r7, #7]
 800cf90:	f043 0308 	orr.w	r3, r3, #8
 800cf94:	71fb      	strb	r3, [r7, #7]
 800cf96:	e010      	b.n	800cfba <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cf98:	7ebb      	ldrb	r3, [r7, #26]
 800cf9a:	f003 0311 	and.w	r3, r3, #17
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d003      	beq.n	800cfaa <f_open+0xe6>
					res = FR_DENIED;
 800cfa2:	2307      	movs	r3, #7
 800cfa4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cfa8:	e007      	b.n	800cfba <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cfaa:	79fb      	ldrb	r3, [r7, #7]
 800cfac:	f003 0304 	and.w	r3, r3, #4
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <f_open+0xf6>
 800cfb4:	2308      	movs	r3, #8
 800cfb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cfba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d168      	bne.n	800d094 <f_open+0x1d0>
 800cfc2:	79fb      	ldrb	r3, [r7, #7]
 800cfc4:	f003 0308 	and.w	r3, r3, #8
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d063      	beq.n	800d094 <f_open+0x1d0>
				dw = GET_FATTIME();
 800cfcc:	f7fe f810 	bl	800aff0 <get_fattime>
 800cfd0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cfd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfd4:	330e      	adds	r3, #14
 800cfd6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7fe fa6b 	bl	800b4b4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cfde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfe0:	3316      	adds	r3, #22
 800cfe2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fe fa65 	bl	800b4b4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cfea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfec:	330b      	adds	r3, #11
 800cfee:	2220      	movs	r2, #32
 800cff0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cff6:	4611      	mov	r1, r2
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7ff f9b9 	bl	800c370 <ld_clust>
 800cffe:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d004:	2200      	movs	r2, #0
 800d006:	4618      	mov	r0, r3
 800d008:	f7ff f9d1 	bl	800c3ae <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d00e:	331c      	adds	r3, #28
 800d010:	2100      	movs	r1, #0
 800d012:	4618      	mov	r0, r3
 800d014:	f7fe fa4e 	bl	800b4b4 <st_dword>
					fs->wflag = 1;
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	2201      	movs	r2, #1
 800d01c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d01e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d020:	2b00      	cmp	r3, #0
 800d022:	d037      	beq.n	800d094 <f_open+0x1d0>
						dw = fs->winsect;
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d028:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d02a:	f107 0314 	add.w	r3, r7, #20
 800d02e:	2200      	movs	r2, #0
 800d030:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d032:	4618      	mov	r0, r3
 800d034:	f7fe fee4 	bl	800be00 <remove_chain>
 800d038:	4603      	mov	r3, r0
 800d03a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d03e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d042:	2b00      	cmp	r3, #0
 800d044:	d126      	bne.n	800d094 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7fe fc8c 	bl	800b968 <move_window>
 800d050:	4603      	mov	r3, r0
 800d052:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d05a:	3a01      	subs	r2, #1
 800d05c:	60da      	str	r2, [r3, #12]
 800d05e:	e019      	b.n	800d094 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d060:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d064:	2b00      	cmp	r3, #0
 800d066:	d115      	bne.n	800d094 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d068:	7ebb      	ldrb	r3, [r7, #26]
 800d06a:	f003 0310 	and.w	r3, r3, #16
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d003      	beq.n	800d07a <f_open+0x1b6>
					res = FR_NO_FILE;
 800d072:	2304      	movs	r3, #4
 800d074:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d078:	e00c      	b.n	800d094 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d07a:	79fb      	ldrb	r3, [r7, #7]
 800d07c:	f003 0302 	and.w	r3, r3, #2
 800d080:	2b00      	cmp	r3, #0
 800d082:	d007      	beq.n	800d094 <f_open+0x1d0>
 800d084:	7ebb      	ldrb	r3, [r7, #26]
 800d086:	f003 0301 	and.w	r3, r3, #1
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d002      	beq.n	800d094 <f_open+0x1d0>
						res = FR_DENIED;
 800d08e:	2307      	movs	r3, #7
 800d090:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d094:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d126      	bne.n	800d0ea <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d09c:	79fb      	ldrb	r3, [r7, #7]
 800d09e:	f003 0308 	and.w	r3, r3, #8
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d003      	beq.n	800d0ae <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d0a6:	79fb      	ldrb	r3, [r7, #7]
 800d0a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0ac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d0b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d0bc:	79fb      	ldrb	r3, [r7, #7]
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	bf8c      	ite	hi
 800d0c2:	2301      	movhi	r3, #1
 800d0c4:	2300      	movls	r3, #0
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	f107 0314 	add.w	r3, r7, #20
 800d0ce:	4611      	mov	r1, r2
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7fe fb17 	bl	800b704 <inc_lock>
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	691b      	ldr	r3, [r3, #16]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d102      	bne.n	800d0ea <f_open+0x226>
 800d0e4:	2302      	movs	r3, #2
 800d0e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d0ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f040 8095 	bne.w	800d21e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0f8:	4611      	mov	r1, r2
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7ff f938 	bl	800c370 <ld_clust>
 800d100:	4602      	mov	r2, r0
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d108:	331c      	adds	r3, #28
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fe f994 	bl	800b438 <ld_dword>
 800d110:	4602      	mov	r2, r0
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2200      	movs	r2, #0
 800d11a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d11c:	693a      	ldr	r2, [r7, #16]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	88da      	ldrh	r2, [r3, #6]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	79fa      	ldrb	r2, [r7, #7]
 800d12e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2200      	movs	r2, #0
 800d134:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2200      	movs	r2, #0
 800d13a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2200      	movs	r2, #0
 800d140:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	3330      	adds	r3, #48	@ 0x30
 800d146:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d14a:	2100      	movs	r1, #0
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7fe f9fe 	bl	800b54e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d152:	79fb      	ldrb	r3, [r7, #7]
 800d154:	f003 0320 	and.w	r3, r3, #32
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d060      	beq.n	800d21e <f_open+0x35a>
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	68db      	ldr	r3, [r3, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d05c      	beq.n	800d21e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	68da      	ldr	r2, [r3, #12]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	895b      	ldrh	r3, [r3, #10]
 800d170:	025b      	lsls	r3, r3, #9
 800d172:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	689b      	ldr	r3, [r3, #8]
 800d178:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d180:	e016      	b.n	800d1b0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d186:	4618      	mov	r0, r3
 800d188:	f7fe fca9 	bl	800bade <get_fat>
 800d18c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d18e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d190:	2b01      	cmp	r3, #1
 800d192:	d802      	bhi.n	800d19a <f_open+0x2d6>
 800d194:	2302      	movs	r3, #2
 800d196:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d19a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a0:	d102      	bne.n	800d1a8 <f_open+0x2e4>
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d1a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d1aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1ac:	1ad3      	subs	r3, r2, r3
 800d1ae:	657b      	str	r3, [r7, #84]	@ 0x54
 800d1b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d103      	bne.n	800d1c0 <f_open+0x2fc>
 800d1b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d1ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d8e0      	bhi.n	800d182 <f_open+0x2be>
				}
				fp->clust = clst;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d1c4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d1c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d127      	bne.n	800d21e <f_open+0x35a>
 800d1ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d022      	beq.n	800d21e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fe fc5f 	bl	800baa0 <clust2sect>
 800d1e2:	6478      	str	r0, [r7, #68]	@ 0x44
 800d1e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d103      	bne.n	800d1f2 <f_open+0x32e>
						res = FR_INT_ERR;
 800d1ea:	2302      	movs	r3, #2
 800d1ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d1f0:	e015      	b.n	800d21e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d1f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1f4:	0a5a      	lsrs	r2, r3, #9
 800d1f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1f8:	441a      	add	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	7858      	ldrb	r0, [r3, #1]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6a1a      	ldr	r2, [r3, #32]
 800d20c:	2301      	movs	r3, #1
 800d20e:	f7fe f89d 	bl	800b34c <disk_read>
 800d212:	4603      	mov	r3, r0
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <f_open+0x35a>
 800d218:	2301      	movs	r3, #1
 800d21a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d21e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d222:	2b00      	cmp	r3, #0
 800d224:	d002      	beq.n	800d22c <f_open+0x368>
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2200      	movs	r2, #0
 800d22a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d22c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d230:	4618      	mov	r0, r3
 800d232:	3760      	adds	r7, #96	@ 0x60
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b08e      	sub	sp, #56	@ 0x38
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
 800d244:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2200      	movs	r2, #0
 800d24e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f107 0214 	add.w	r2, r7, #20
 800d256:	4611      	mov	r1, r2
 800d258:	4618      	mov	r0, r3
 800d25a:	f7ff fdb7 	bl	800cdcc <validate>
 800d25e:	4603      	mov	r3, r0
 800d260:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d264:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d107      	bne.n	800d27c <f_read+0x44>
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	7d5b      	ldrb	r3, [r3, #21]
 800d270:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d274:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d002      	beq.n	800d282 <f_read+0x4a>
 800d27c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d280:	e115      	b.n	800d4ae <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	7d1b      	ldrb	r3, [r3, #20]
 800d286:	f003 0301 	and.w	r3, r3, #1
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d101      	bne.n	800d292 <f_read+0x5a>
 800d28e:	2307      	movs	r3, #7
 800d290:	e10d      	b.n	800d4ae <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	68da      	ldr	r2, [r3, #12]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	699b      	ldr	r3, [r3, #24]
 800d29a:	1ad3      	subs	r3, r2, r3
 800d29c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	6a3b      	ldr	r3, [r7, #32]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	f240 80fe 	bls.w	800d4a4 <f_read+0x26c>
 800d2a8:	6a3b      	ldr	r3, [r7, #32]
 800d2aa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d2ac:	e0fa      	b.n	800d4a4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	699b      	ldr	r3, [r3, #24]
 800d2b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	f040 80c6 	bne.w	800d448 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	699b      	ldr	r3, [r3, #24]
 800d2c0:	0a5b      	lsrs	r3, r3, #9
 800d2c2:	697a      	ldr	r2, [r7, #20]
 800d2c4:	8952      	ldrh	r2, [r2, #10]
 800d2c6:	3a01      	subs	r2, #1
 800d2c8:	4013      	ands	r3, r2
 800d2ca:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d12f      	bne.n	800d332 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	699b      	ldr	r3, [r3, #24]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d103      	bne.n	800d2e2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	689b      	ldr	r3, [r3, #8]
 800d2de:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2e0:	e013      	b.n	800d30a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d007      	beq.n	800d2fa <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	699b      	ldr	r3, [r3, #24]
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f7fe fe82 	bl	800bffa <clmt_clust>
 800d2f6:	6338      	str	r0, [r7, #48]	@ 0x30
 800d2f8:	e007      	b.n	800d30a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d2fa:	68fa      	ldr	r2, [r7, #12]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	69db      	ldr	r3, [r3, #28]
 800d300:	4619      	mov	r1, r3
 800d302:	4610      	mov	r0, r2
 800d304:	f7fe fbeb 	bl	800bade <get_fat>
 800d308:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d804      	bhi.n	800d31a <f_read+0xe2>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2202      	movs	r2, #2
 800d314:	755a      	strb	r2, [r3, #21]
 800d316:	2302      	movs	r3, #2
 800d318:	e0c9      	b.n	800d4ae <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d320:	d104      	bne.n	800d32c <f_read+0xf4>
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2201      	movs	r2, #1
 800d326:	755a      	strb	r2, [r3, #21]
 800d328:	2301      	movs	r3, #1
 800d32a:	e0c0      	b.n	800d4ae <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d330:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d332:	697a      	ldr	r2, [r7, #20]
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	69db      	ldr	r3, [r3, #28]
 800d338:	4619      	mov	r1, r3
 800d33a:	4610      	mov	r0, r2
 800d33c:	f7fe fbb0 	bl	800baa0 <clust2sect>
 800d340:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d342:	69bb      	ldr	r3, [r7, #24]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d104      	bne.n	800d352 <f_read+0x11a>
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2202      	movs	r2, #2
 800d34c:	755a      	strb	r2, [r3, #21]
 800d34e:	2302      	movs	r3, #2
 800d350:	e0ad      	b.n	800d4ae <f_read+0x276>
			sect += csect;
 800d352:	69ba      	ldr	r2, [r7, #24]
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	4413      	add	r3, r2
 800d358:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	0a5b      	lsrs	r3, r3, #9
 800d35e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d362:	2b00      	cmp	r3, #0
 800d364:	d039      	beq.n	800d3da <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d366:	69fa      	ldr	r2, [r7, #28]
 800d368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d36a:	4413      	add	r3, r2
 800d36c:	697a      	ldr	r2, [r7, #20]
 800d36e:	8952      	ldrh	r2, [r2, #10]
 800d370:	4293      	cmp	r3, r2
 800d372:	d905      	bls.n	800d380 <f_read+0x148>
					cc = fs->csize - csect;
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	895b      	ldrh	r3, [r3, #10]
 800d378:	461a      	mov	r2, r3
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	1ad3      	subs	r3, r2, r3
 800d37e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	7858      	ldrb	r0, [r3, #1]
 800d384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d386:	69ba      	ldr	r2, [r7, #24]
 800d388:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d38a:	f7fd ffdf 	bl	800b34c <disk_read>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d004      	beq.n	800d39e <f_read+0x166>
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2201      	movs	r2, #1
 800d398:	755a      	strb	r2, [r3, #21]
 800d39a:	2301      	movs	r3, #1
 800d39c:	e087      	b.n	800d4ae <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	7d1b      	ldrb	r3, [r3, #20]
 800d3a2:	b25b      	sxtb	r3, r3
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	da14      	bge.n	800d3d2 <f_read+0x19a>
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6a1a      	ldr	r2, [r3, #32]
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d90d      	bls.n	800d3d2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	6a1a      	ldr	r2, [r3, #32]
 800d3ba:	69bb      	ldr	r3, [r7, #24]
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	025b      	lsls	r3, r3, #9
 800d3c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3c2:	18d0      	adds	r0, r2, r3
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	3330      	adds	r3, #48	@ 0x30
 800d3c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	f7fe f89d 	bl	800b50c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3d4:	025b      	lsls	r3, r3, #9
 800d3d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d3d8:	e050      	b.n	800d47c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6a1b      	ldr	r3, [r3, #32]
 800d3de:	69ba      	ldr	r2, [r7, #24]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d02e      	beq.n	800d442 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	7d1b      	ldrb	r3, [r3, #20]
 800d3e8:	b25b      	sxtb	r3, r3
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	da18      	bge.n	800d420 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	7858      	ldrb	r0, [r3, #1]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	6a1a      	ldr	r2, [r3, #32]
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	f7fd ffc5 	bl	800b38c <disk_write>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d004      	beq.n	800d412 <f_read+0x1da>
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2201      	movs	r2, #1
 800d40c:	755a      	strb	r2, [r3, #21]
 800d40e:	2301      	movs	r3, #1
 800d410:	e04d      	b.n	800d4ae <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	7d1b      	ldrb	r3, [r3, #20]
 800d416:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d41a:	b2da      	uxtb	r2, r3
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	7858      	ldrb	r0, [r3, #1]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d42a:	2301      	movs	r3, #1
 800d42c:	69ba      	ldr	r2, [r7, #24]
 800d42e:	f7fd ff8d 	bl	800b34c <disk_read>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d004      	beq.n	800d442 <f_read+0x20a>
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2201      	movs	r2, #1
 800d43c:	755a      	strb	r2, [r3, #21]
 800d43e:	2301      	movs	r3, #1
 800d440:	e035      	b.n	800d4ae <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	69ba      	ldr	r2, [r7, #24]
 800d446:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	699b      	ldr	r3, [r3, #24]
 800d44c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d450:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d454:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d901      	bls.n	800d462 <f_read+0x22a>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	699b      	ldr	r3, [r3, #24]
 800d46c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d470:	4413      	add	r3, r2
 800d472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d474:	4619      	mov	r1, r3
 800d476:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d478:	f7fe f848 	bl	800b50c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d47c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d480:	4413      	add	r3, r2
 800d482:	627b      	str	r3, [r7, #36]	@ 0x24
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	699a      	ldr	r2, [r3, #24]
 800d488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d48a:	441a      	add	r2, r3
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	619a      	str	r2, [r3, #24]
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d496:	441a      	add	r2, r3
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	601a      	str	r2, [r3, #0]
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a0:	1ad3      	subs	r3, r2, r3
 800d4a2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	f47f af01 	bne.w	800d2ae <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3738      	adds	r7, #56	@ 0x38
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b08c      	sub	sp, #48	@ 0x30
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	60f8      	str	r0, [r7, #12]
 800d4be:	60b9      	str	r1, [r7, #8]
 800d4c0:	607a      	str	r2, [r7, #4]
 800d4c2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f107 0210 	add.w	r2, r7, #16
 800d4d4:	4611      	mov	r1, r2
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7ff fc78 	bl	800cdcc <validate>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d4e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d107      	bne.n	800d4fa <f_write+0x44>
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	7d5b      	ldrb	r3, [r3, #21]
 800d4ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d4f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d002      	beq.n	800d500 <f_write+0x4a>
 800d4fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d4fe:	e14b      	b.n	800d798 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	7d1b      	ldrb	r3, [r3, #20]
 800d504:	f003 0302 	and.w	r3, r3, #2
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d101      	bne.n	800d510 <f_write+0x5a>
 800d50c:	2307      	movs	r3, #7
 800d50e:	e143      	b.n	800d798 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	699a      	ldr	r2, [r3, #24]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	441a      	add	r2, r3
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	699b      	ldr	r3, [r3, #24]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	f080 812d 	bcs.w	800d77c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	699b      	ldr	r3, [r3, #24]
 800d526:	43db      	mvns	r3, r3
 800d528:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d52a:	e127      	b.n	800d77c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	699b      	ldr	r3, [r3, #24]
 800d530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d534:	2b00      	cmp	r3, #0
 800d536:	f040 80e3 	bne.w	800d700 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	699b      	ldr	r3, [r3, #24]
 800d53e:	0a5b      	lsrs	r3, r3, #9
 800d540:	693a      	ldr	r2, [r7, #16]
 800d542:	8952      	ldrh	r2, [r2, #10]
 800d544:	3a01      	subs	r2, #1
 800d546:	4013      	ands	r3, r2
 800d548:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d54a:	69bb      	ldr	r3, [r7, #24]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d143      	bne.n	800d5d8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	699b      	ldr	r3, [r3, #24]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d10c      	bne.n	800d572 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d560:	2b00      	cmp	r3, #0
 800d562:	d11a      	bne.n	800d59a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2100      	movs	r1, #0
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fe fcae 	bl	800beca <create_chain>
 800d56e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d570:	e013      	b.n	800d59a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d576:	2b00      	cmp	r3, #0
 800d578:	d007      	beq.n	800d58a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	699b      	ldr	r3, [r3, #24]
 800d57e:	4619      	mov	r1, r3
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f7fe fd3a 	bl	800bffa <clmt_clust>
 800d586:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d588:	e007      	b.n	800d59a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d58a:	68fa      	ldr	r2, [r7, #12]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	69db      	ldr	r3, [r3, #28]
 800d590:	4619      	mov	r1, r3
 800d592:	4610      	mov	r0, r2
 800d594:	f7fe fc99 	bl	800beca <create_chain>
 800d598:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	f000 80f2 	beq.w	800d786 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d104      	bne.n	800d5b2 <f_write+0xfc>
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2202      	movs	r2, #2
 800d5ac:	755a      	strb	r2, [r3, #21]
 800d5ae:	2302      	movs	r3, #2
 800d5b0:	e0f2      	b.n	800d798 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b8:	d104      	bne.n	800d5c4 <f_write+0x10e>
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2201      	movs	r2, #1
 800d5be:	755a      	strb	r2, [r3, #21]
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e0e9      	b.n	800d798 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5c8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	689b      	ldr	r3, [r3, #8]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d102      	bne.n	800d5d8 <f_write+0x122>
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5d6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	7d1b      	ldrb	r3, [r3, #20]
 800d5dc:	b25b      	sxtb	r3, r3
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	da18      	bge.n	800d614 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	7858      	ldrb	r0, [r3, #1]
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	6a1a      	ldr	r2, [r3, #32]
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	f7fd fecb 	bl	800b38c <disk_write>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d004      	beq.n	800d606 <f_write+0x150>
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2201      	movs	r2, #1
 800d600:	755a      	strb	r2, [r3, #21]
 800d602:	2301      	movs	r3, #1
 800d604:	e0c8      	b.n	800d798 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	7d1b      	ldrb	r3, [r3, #20]
 800d60a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d614:	693a      	ldr	r2, [r7, #16]
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	69db      	ldr	r3, [r3, #28]
 800d61a:	4619      	mov	r1, r3
 800d61c:	4610      	mov	r0, r2
 800d61e:	f7fe fa3f 	bl	800baa0 <clust2sect>
 800d622:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d104      	bne.n	800d634 <f_write+0x17e>
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2202      	movs	r2, #2
 800d62e:	755a      	strb	r2, [r3, #21]
 800d630:	2302      	movs	r3, #2
 800d632:	e0b1      	b.n	800d798 <f_write+0x2e2>
			sect += csect;
 800d634:	697a      	ldr	r2, [r7, #20]
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	4413      	add	r3, r2
 800d63a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	0a5b      	lsrs	r3, r3, #9
 800d640:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d642:	6a3b      	ldr	r3, [r7, #32]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d03c      	beq.n	800d6c2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d648:	69ba      	ldr	r2, [r7, #24]
 800d64a:	6a3b      	ldr	r3, [r7, #32]
 800d64c:	4413      	add	r3, r2
 800d64e:	693a      	ldr	r2, [r7, #16]
 800d650:	8952      	ldrh	r2, [r2, #10]
 800d652:	4293      	cmp	r3, r2
 800d654:	d905      	bls.n	800d662 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	895b      	ldrh	r3, [r3, #10]
 800d65a:	461a      	mov	r2, r3
 800d65c:	69bb      	ldr	r3, [r7, #24]
 800d65e:	1ad3      	subs	r3, r2, r3
 800d660:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	7858      	ldrb	r0, [r3, #1]
 800d666:	6a3b      	ldr	r3, [r7, #32]
 800d668:	697a      	ldr	r2, [r7, #20]
 800d66a:	69f9      	ldr	r1, [r7, #28]
 800d66c:	f7fd fe8e 	bl	800b38c <disk_write>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d004      	beq.n	800d680 <f_write+0x1ca>
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2201      	movs	r2, #1
 800d67a:	755a      	strb	r2, [r3, #21]
 800d67c:	2301      	movs	r3, #1
 800d67e:	e08b      	b.n	800d798 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6a1a      	ldr	r2, [r3, #32]
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	1ad3      	subs	r3, r2, r3
 800d688:	6a3a      	ldr	r2, [r7, #32]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d915      	bls.n	800d6ba <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	6a1a      	ldr	r2, [r3, #32]
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	1ad3      	subs	r3, r2, r3
 800d69c:	025b      	lsls	r3, r3, #9
 800d69e:	69fa      	ldr	r2, [r7, #28]
 800d6a0:	4413      	add	r3, r2
 800d6a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	f7fd ff30 	bl	800b50c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	7d1b      	ldrb	r3, [r3, #20]
 800d6b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6b4:	b2da      	uxtb	r2, r3
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d6ba:	6a3b      	ldr	r3, [r7, #32]
 800d6bc:	025b      	lsls	r3, r3, #9
 800d6be:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d6c0:	e03f      	b.n	800d742 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6a1b      	ldr	r3, [r3, #32]
 800d6c6:	697a      	ldr	r2, [r7, #20]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d016      	beq.n	800d6fa <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	699a      	ldr	r2, [r3, #24]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d210      	bcs.n	800d6fa <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	7858      	ldrb	r0, [r3, #1]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	697a      	ldr	r2, [r7, #20]
 800d6e6:	f7fd fe31 	bl	800b34c <disk_read>
 800d6ea:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d004      	beq.n	800d6fa <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	755a      	strb	r2, [r3, #21]
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e04e      	b.n	800d798 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	697a      	ldr	r2, [r7, #20]
 800d6fe:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	699b      	ldr	r3, [r3, #24]
 800d704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d708:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d70c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d70e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	429a      	cmp	r2, r3
 800d714:	d901      	bls.n	800d71a <f_write+0x264>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	699b      	ldr	r3, [r3, #24]
 800d724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d728:	4413      	add	r3, r2
 800d72a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d72c:	69f9      	ldr	r1, [r7, #28]
 800d72e:	4618      	mov	r0, r3
 800d730:	f7fd feec 	bl	800b50c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	7d1b      	ldrb	r3, [r3, #20]
 800d738:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d742:	69fa      	ldr	r2, [r7, #28]
 800d744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d746:	4413      	add	r3, r2
 800d748:	61fb      	str	r3, [r7, #28]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	699a      	ldr	r2, [r3, #24]
 800d74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d750:	441a      	add	r2, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	619a      	str	r2, [r3, #24]
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	68da      	ldr	r2, [r3, #12]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	699b      	ldr	r3, [r3, #24]
 800d75e:	429a      	cmp	r2, r3
 800d760:	bf38      	it	cc
 800d762:	461a      	movcc	r2, r3
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	60da      	str	r2, [r3, #12]
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76e:	441a      	add	r2, r3
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	601a      	str	r2, [r3, #0]
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	f47f aed4 	bne.w	800d52c <f_write+0x76>
 800d784:	e000      	b.n	800d788 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d786:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	7d1b      	ldrb	r3, [r3, #20]
 800d78c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d790:	b2da      	uxtb	r2, r3
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d796:	2300      	movs	r3, #0
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3730      	adds	r7, #48	@ 0x30
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f107 0208 	add.w	r2, r7, #8
 800d7ae:	4611      	mov	r1, r2
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7ff fb0b 	bl	800cdcc <validate>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d7ba:	7dfb      	ldrb	r3, [r7, #23]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d168      	bne.n	800d892 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	7d1b      	ldrb	r3, [r3, #20]
 800d7c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d062      	beq.n	800d892 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	7d1b      	ldrb	r3, [r3, #20]
 800d7d0:	b25b      	sxtb	r3, r3
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	da15      	bge.n	800d802 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	7858      	ldrb	r0, [r3, #1]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6a1a      	ldr	r2, [r3, #32]
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	f7fd fdd1 	bl	800b38c <disk_write>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d001      	beq.n	800d7f4 <f_sync+0x54>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e04f      	b.n	800d894 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	7d1b      	ldrb	r3, [r3, #20]
 800d7f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7fc:	b2da      	uxtb	r2, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d802:	f7fd fbf5 	bl	800aff0 <get_fattime>
 800d806:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d808:	68ba      	ldr	r2, [r7, #8]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d80e:	4619      	mov	r1, r3
 800d810:	4610      	mov	r0, r2
 800d812:	f7fe f8a9 	bl	800b968 <move_window>
 800d816:	4603      	mov	r3, r0
 800d818:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d81a:	7dfb      	ldrb	r3, [r7, #23]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d138      	bne.n	800d892 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d824:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	330b      	adds	r3, #11
 800d82a:	781a      	ldrb	r2, [r3, #0]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	330b      	adds	r3, #11
 800d830:	f042 0220 	orr.w	r2, r2, #32
 800d834:	b2d2      	uxtb	r2, r2
 800d836:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6818      	ldr	r0, [r3, #0]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	461a      	mov	r2, r3
 800d842:	68f9      	ldr	r1, [r7, #12]
 800d844:	f7fe fdb3 	bl	800c3ae <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f103 021c 	add.w	r2, r3, #28
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	4619      	mov	r1, r3
 800d854:	4610      	mov	r0, r2
 800d856:	f7fd fe2d 	bl	800b4b4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	3316      	adds	r3, #22
 800d85e:	6939      	ldr	r1, [r7, #16]
 800d860:	4618      	mov	r0, r3
 800d862:	f7fd fe27 	bl	800b4b4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	3312      	adds	r3, #18
 800d86a:	2100      	movs	r1, #0
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fd fe06 	bl	800b47e <st_word>
					fs->wflag = 1;
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	2201      	movs	r2, #1
 800d876:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7fe f8a2 	bl	800b9c4 <sync_fs>
 800d880:	4603      	mov	r3, r0
 800d882:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	7d1b      	ldrb	r3, [r3, #20]
 800d888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d892:	7dfb      	ldrb	r3, [r7, #23]
}
 800d894:	4618      	mov	r0, r3
 800d896:	3718      	adds	r7, #24
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff ff7b 	bl	800d7a0 <f_sync>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d8ae:	7bfb      	ldrb	r3, [r7, #15]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d118      	bne.n	800d8e6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f107 0208 	add.w	r2, r7, #8
 800d8ba:	4611      	mov	r1, r2
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7ff fa85 	bl	800cdcc <validate>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d8c6:	7bfb      	ldrb	r3, [r7, #15]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d10c      	bne.n	800d8e6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	691b      	ldr	r3, [r3, #16]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fd ffa5 	bl	800b820 <dec_lock>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d8da:	7bfb      	ldrb	r3, [r7, #15]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d102      	bne.n	800d8e6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3710      	adds	r7, #16
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b090      	sub	sp, #64	@ 0x40
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f107 0208 	add.w	r2, r7, #8
 800d900:	4611      	mov	r1, r2
 800d902:	4618      	mov	r0, r3
 800d904:	f7ff fa62 	bl	800cdcc <validate>
 800d908:	4603      	mov	r3, r0
 800d90a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d90e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d912:	2b00      	cmp	r3, #0
 800d914:	d103      	bne.n	800d91e <f_lseek+0x2e>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	7d5b      	ldrb	r3, [r3, #21]
 800d91a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d91e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d922:	2b00      	cmp	r3, #0
 800d924:	d002      	beq.n	800d92c <f_lseek+0x3c>
 800d926:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d92a:	e1e6      	b.n	800dcfa <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d930:	2b00      	cmp	r3, #0
 800d932:	f000 80d1 	beq.w	800dad8 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d93c:	d15a      	bne.n	800d9f4 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d942:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d946:	1d1a      	adds	r2, r3, #4
 800d948:	627a      	str	r2, [r7, #36]	@ 0x24
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	617b      	str	r3, [r7, #20]
 800d94e:	2302      	movs	r3, #2
 800d950:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d03a      	beq.n	800d9d4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d95e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d960:	613b      	str	r3, [r7, #16]
 800d962:	2300      	movs	r3, #0
 800d964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d968:	3302      	adds	r3, #2
 800d96a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d96e:	60fb      	str	r3, [r7, #12]
 800d970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d972:	3301      	adds	r3, #1
 800d974:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7fe f8af 	bl	800bade <get_fat>
 800d980:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d984:	2b01      	cmp	r3, #1
 800d986:	d804      	bhi.n	800d992 <f_lseek+0xa2>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2202      	movs	r2, #2
 800d98c:	755a      	strb	r2, [r3, #21]
 800d98e:	2302      	movs	r3, #2
 800d990:	e1b3      	b.n	800dcfa <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d998:	d104      	bne.n	800d9a4 <f_lseek+0xb4>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2201      	movs	r2, #1
 800d99e:	755a      	strb	r2, [r3, #21]
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	e1aa      	b.n	800dcfa <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d0de      	beq.n	800d96c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d9ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d809      	bhi.n	800d9ca <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9b8:	1d1a      	adds	r2, r3, #4
 800d9ba:	627a      	str	r2, [r7, #36]	@ 0x24
 800d9bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9be:	601a      	str	r2, [r3, #0]
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c2:	1d1a      	adds	r2, r3, #4
 800d9c4:	627a      	str	r2, [r7, #36]	@ 0x24
 800d9c6:	693a      	ldr	r2, [r7, #16]
 800d9c8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	695b      	ldr	r3, [r3, #20]
 800d9ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d3c4      	bcc.n	800d95e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9da:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d9dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d803      	bhi.n	800d9ec <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	601a      	str	r2, [r3, #0]
 800d9ea:	e184      	b.n	800dcf6 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d9ec:	2311      	movs	r3, #17
 800d9ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d9f2:	e180      	b.n	800dcf6 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	683a      	ldr	r2, [r7, #0]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d902      	bls.n	800da04 <f_lseek+0x114>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	683a      	ldr	r2, [r7, #0]
 800da08:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f000 8172 	beq.w	800dcf6 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	3b01      	subs	r3, #1
 800da16:	4619      	mov	r1, r3
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f7fe faee 	bl	800bffa <clmt_clust>
 800da1e:	4602      	mov	r2, r0
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800da24:	68ba      	ldr	r2, [r7, #8]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	69db      	ldr	r3, [r3, #28]
 800da2a:	4619      	mov	r1, r3
 800da2c:	4610      	mov	r0, r2
 800da2e:	f7fe f837 	bl	800baa0 <clust2sect>
 800da32:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d104      	bne.n	800da44 <f_lseek+0x154>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2202      	movs	r2, #2
 800da3e:	755a      	strb	r2, [r3, #21]
 800da40:	2302      	movs	r3, #2
 800da42:	e15a      	b.n	800dcfa <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	3b01      	subs	r3, #1
 800da48:	0a5b      	lsrs	r3, r3, #9
 800da4a:	68ba      	ldr	r2, [r7, #8]
 800da4c:	8952      	ldrh	r2, [r2, #10]
 800da4e:	3a01      	subs	r2, #1
 800da50:	4013      	ands	r3, r2
 800da52:	69ba      	ldr	r2, [r7, #24]
 800da54:	4413      	add	r3, r2
 800da56:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	699b      	ldr	r3, [r3, #24]
 800da5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da60:	2b00      	cmp	r3, #0
 800da62:	f000 8148 	beq.w	800dcf6 <f_lseek+0x406>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6a1b      	ldr	r3, [r3, #32]
 800da6a:	69ba      	ldr	r2, [r7, #24]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	f000 8142 	beq.w	800dcf6 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	7d1b      	ldrb	r3, [r3, #20]
 800da76:	b25b      	sxtb	r3, r3
 800da78:	2b00      	cmp	r3, #0
 800da7a:	da18      	bge.n	800daae <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	7858      	ldrb	r0, [r3, #1]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6a1a      	ldr	r2, [r3, #32]
 800da8a:	2301      	movs	r3, #1
 800da8c:	f7fd fc7e 	bl	800b38c <disk_write>
 800da90:	4603      	mov	r3, r0
 800da92:	2b00      	cmp	r3, #0
 800da94:	d004      	beq.n	800daa0 <f_lseek+0x1b0>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2201      	movs	r2, #1
 800da9a:	755a      	strb	r2, [r3, #21]
 800da9c:	2301      	movs	r3, #1
 800da9e:	e12c      	b.n	800dcfa <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	7d1b      	ldrb	r3, [r3, #20]
 800daa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800daa8:	b2da      	uxtb	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	7858      	ldrb	r0, [r3, #1]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dab8:	2301      	movs	r3, #1
 800daba:	69ba      	ldr	r2, [r7, #24]
 800dabc:	f7fd fc46 	bl	800b34c <disk_read>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d004      	beq.n	800dad0 <f_lseek+0x1e0>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2201      	movs	r2, #1
 800daca:	755a      	strb	r2, [r3, #21]
 800dacc:	2301      	movs	r3, #1
 800dace:	e114      	b.n	800dcfa <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	69ba      	ldr	r2, [r7, #24]
 800dad4:	621a      	str	r2, [r3, #32]
 800dad6:	e10e      	b.n	800dcf6 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	68db      	ldr	r3, [r3, #12]
 800dadc:	683a      	ldr	r2, [r7, #0]
 800dade:	429a      	cmp	r2, r3
 800dae0:	d908      	bls.n	800daf4 <f_lseek+0x204>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	7d1b      	ldrb	r3, [r3, #20]
 800dae6:	f003 0302 	and.w	r3, r3, #2
 800daea:	2b00      	cmp	r3, #0
 800daec:	d102      	bne.n	800daf4 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	699b      	ldr	r3, [r3, #24]
 800daf8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800dafa:	2300      	movs	r3, #0
 800dafc:	637b      	str	r3, [r7, #52]	@ 0x34
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db02:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	f000 80a7 	beq.w	800dc5a <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	895b      	ldrh	r3, [r3, #10]
 800db10:	025b      	lsls	r3, r3, #9
 800db12:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800db14:	6a3b      	ldr	r3, [r7, #32]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d01b      	beq.n	800db52 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	1e5a      	subs	r2, r3, #1
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	fbb2 f2f3 	udiv	r2, r2, r3
 800db24:	6a3b      	ldr	r3, [r7, #32]
 800db26:	1e59      	subs	r1, r3, #1
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800db2e:	429a      	cmp	r2, r3
 800db30:	d30f      	bcc.n	800db52 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800db32:	6a3b      	ldr	r3, [r7, #32]
 800db34:	1e5a      	subs	r2, r3, #1
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	425b      	negs	r3, r3
 800db3a:	401a      	ands	r2, r3
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	699b      	ldr	r3, [r3, #24]
 800db44:	683a      	ldr	r2, [r7, #0]
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	69db      	ldr	r3, [r3, #28]
 800db4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800db50:	e022      	b.n	800db98 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	689b      	ldr	r3, [r3, #8]
 800db56:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800db58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d119      	bne.n	800db92 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2100      	movs	r1, #0
 800db62:	4618      	mov	r0, r3
 800db64:	f7fe f9b1 	bl	800beca <create_chain>
 800db68:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800db6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d104      	bne.n	800db7a <f_lseek+0x28a>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2202      	movs	r2, #2
 800db74:	755a      	strb	r2, [r3, #21]
 800db76:	2302      	movs	r3, #2
 800db78:	e0bf      	b.n	800dcfa <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800db7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db80:	d104      	bne.n	800db8c <f_lseek+0x29c>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2201      	movs	r2, #1
 800db86:	755a      	strb	r2, [r3, #21]
 800db88:	2301      	movs	r3, #1
 800db8a:	e0b6      	b.n	800dcfa <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db90:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db96:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800db98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d05d      	beq.n	800dc5a <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800db9e:	e03a      	b.n	800dc16 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800dba0:	683a      	ldr	r2, [r7, #0]
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	1ad3      	subs	r3, r2, r3
 800dba6:	603b      	str	r3, [r7, #0]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	699a      	ldr	r2, [r3, #24]
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	441a      	add	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	7d1b      	ldrb	r3, [r3, #20]
 800dbb8:	f003 0302 	and.w	r3, r3, #2
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00b      	beq.n	800dbd8 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fe f980 	bl	800beca <create_chain>
 800dbca:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d108      	bne.n	800dbe4 <f_lseek+0x2f4>
							ofs = 0; break;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	603b      	str	r3, [r7, #0]
 800dbd6:	e022      	b.n	800dc1e <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7fd ff7e 	bl	800bade <get_fat>
 800dbe2:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbea:	d104      	bne.n	800dbf6 <f_lseek+0x306>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	755a      	strb	r2, [r3, #21]
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	e081      	b.n	800dcfa <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800dbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d904      	bls.n	800dc06 <f_lseek+0x316>
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	695b      	ldr	r3, [r3, #20]
 800dc00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d304      	bcc.n	800dc10 <f_lseek+0x320>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2202      	movs	r2, #2
 800dc0a:	755a      	strb	r2, [r3, #21]
 800dc0c:	2302      	movs	r3, #2
 800dc0e:	e074      	b.n	800dcfa <f_lseek+0x40a>
					fp->clust = clst;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc14:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800dc16:	683a      	ldr	r2, [r7, #0]
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d8c0      	bhi.n	800dba0 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	699a      	ldr	r2, [r3, #24]
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	441a      	add	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d012      	beq.n	800dc5a <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7fd ff31 	bl	800baa0 <clust2sect>
 800dc3e:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800dc40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d104      	bne.n	800dc50 <f_lseek+0x360>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2202      	movs	r2, #2
 800dc4a:	755a      	strb	r2, [r3, #21]
 800dc4c:	2302      	movs	r3, #2
 800dc4e:	e054      	b.n	800dcfa <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	0a5b      	lsrs	r3, r3, #9
 800dc54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc56:	4413      	add	r3, r2
 800dc58:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	699a      	ldr	r2, [r3, #24]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d90a      	bls.n	800dc7c <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	699a      	ldr	r2, [r3, #24]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	7d1b      	ldrb	r3, [r3, #20]
 800dc72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc76:	b2da      	uxtb	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	699b      	ldr	r3, [r3, #24]
 800dc80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d036      	beq.n	800dcf6 <f_lseek+0x406>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6a1b      	ldr	r3, [r3, #32]
 800dc8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d031      	beq.n	800dcf6 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	7d1b      	ldrb	r3, [r3, #20]
 800dc96:	b25b      	sxtb	r3, r3
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	da18      	bge.n	800dcce <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	7858      	ldrb	r0, [r3, #1]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6a1a      	ldr	r2, [r3, #32]
 800dcaa:	2301      	movs	r3, #1
 800dcac:	f7fd fb6e 	bl	800b38c <disk_write>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d004      	beq.n	800dcc0 <f_lseek+0x3d0>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2201      	movs	r2, #1
 800dcba:	755a      	strb	r2, [r3, #21]
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	e01c      	b.n	800dcfa <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	7d1b      	ldrb	r3, [r3, #20]
 800dcc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcc8:	b2da      	uxtb	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	7858      	ldrb	r0, [r3, #1]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dcd8:	2301      	movs	r3, #1
 800dcda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcdc:	f7fd fb36 	bl	800b34c <disk_read>
 800dce0:	4603      	mov	r3, r0
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d004      	beq.n	800dcf0 <f_lseek+0x400>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2201      	movs	r2, #1
 800dcea:	755a      	strb	r2, [r3, #21]
 800dcec:	2301      	movs	r3, #1
 800dcee:	e004      	b.n	800dcfa <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcf4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800dcf6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3740      	adds	r7, #64	@ 0x40
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b09e      	sub	sp, #120	@ 0x78
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800dd0e:	f107 010c 	add.w	r1, r7, #12
 800dd12:	1d3b      	adds	r3, r7, #4
 800dd14:	2202      	movs	r2, #2
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fe fe0c 	bl	800c934 <find_volume>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800dd26:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f040 808e 	bne.w	800de4c <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dd36:	4611      	mov	r1, r2
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7fe fcef 	bl	800c71c <follow_path>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800dd44:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d108      	bne.n	800dd5e <f_unlink+0x5c>
 800dd4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dd50:	2102      	movs	r1, #2
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fd fc58 	bl	800b608 <chk_lock>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800dd5e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d172      	bne.n	800de4c <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800dd66:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800dd6a:	b25b      	sxtb	r3, r3
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	da03      	bge.n	800dd78 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800dd70:	2306      	movs	r3, #6
 800dd72:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800dd76:	e008      	b.n	800dd8a <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800dd78:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800dd7c:	f003 0301 	and.w	r3, r3, #1
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d002      	beq.n	800dd8a <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800dd84:	2307      	movs	r3, #7
 800dd86:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800dd8a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d134      	bne.n	800ddfc <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dd96:	4611      	mov	r1, r2
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fe fae9 	bl	800c370 <ld_clust>
 800dd9e:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800dda0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800dda4:	f003 0310 	and.w	r3, r3, #16
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d027      	beq.n	800ddfc <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800ddb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ddb2:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800ddb4:	f107 0310 	add.w	r3, r7, #16
 800ddb8:	2100      	movs	r1, #0
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fe f951 	bl	800c062 <dir_sdi>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800ddc6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d116      	bne.n	800ddfc <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ddce:	f107 0310 	add.w	r3, r7, #16
 800ddd2:	2100      	movs	r1, #0
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7fe fb0a 	bl	800c3ee <dir_read>
 800ddda:	4603      	mov	r3, r0
 800dddc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800dde0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d102      	bne.n	800ddee <f_unlink+0xec>
 800dde8:	2307      	movs	r3, #7
 800ddea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800ddee:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ddf2:	2b04      	cmp	r3, #4
 800ddf4:	d102      	bne.n	800ddfc <f_unlink+0xfa>
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800ddfc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800de00:	2b00      	cmp	r3, #0
 800de02:	d123      	bne.n	800de4c <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800de04:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800de08:	4618      	mov	r0, r3
 800de0a:	f7fe fbd4 	bl	800c5b6 <dir_remove>
 800de0e:	4603      	mov	r3, r0
 800de10:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800de14:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d10c      	bne.n	800de36 <f_unlink+0x134>
 800de1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d009      	beq.n	800de36 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800de22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800de26:	2200      	movs	r2, #0
 800de28:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fd ffe8 	bl	800be00 <remove_chain>
 800de30:	4603      	mov	r3, r0
 800de32:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800de36:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d106      	bne.n	800de4c <f_unlink+0x14a>
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	4618      	mov	r0, r3
 800de42:	f7fd fdbf 	bl	800b9c4 <sync_fs>
 800de46:	4603      	mov	r3, r0
 800de48:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800de4c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800de50:	4618      	mov	r0, r3
 800de52:	3778      	adds	r7, #120	@ 0x78
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
 800de58:	b590      	push	{r4, r7, lr}
 800de5a:	b0a5      	sub	sp, #148	@ 0x94
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip drive number of new name off */
 800de62:	463b      	mov	r3, r7
 800de64:	4618      	mov	r0, r3
 800de66:	f7fe fcca 	bl	800c7fe <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 800de6a:	f107 0120 	add.w	r1, r7, #32
 800de6e:	1d3b      	adds	r3, r7, #4
 800de70:	2202      	movs	r2, #2
 800de72:	4618      	mov	r0, r3
 800de74:	f7fe fd5e 	bl	800c934 <find_volume>
 800de78:	4603      	mov	r3, r0
 800de7a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	if (res == FR_OK) {
 800de7e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800de82:	2b00      	cmp	r3, #0
 800de84:	f040 80db 	bne.w	800e03e <f_rename+0x1e6>
		djo.obj.fs = fs;
 800de88:	6a3b      	ldr	r3, [r7, #32]
 800de8a:	657b      	str	r3, [r7, #84]	@ 0x54
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800de92:	4611      	mov	r1, r2
 800de94:	4618      	mov	r0, r3
 800de96:	f7fe fc41 	bl	800c71c <follow_path>
 800de9a:	4603      	mov	r3, r0
 800de9c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
 800dea0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d108      	bne.n	800deba <f_rename+0x62>
 800dea8:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 800deac:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d002      	beq.n	800deba <f_rename+0x62>
 800deb4:	2306      	movs	r3, #6
 800deb6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
#if _FS_LOCK != 0
		if (res == FR_OK) {
 800deba:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d108      	bne.n	800ded4 <f_rename+0x7c>
			res = chk_lock(&djo, 2);
 800dec2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800dec6:	2102      	movs	r1, #2
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fd fb9d 	bl	800b608 <chk_lock>
 800dece:	4603      	mov	r3, r0
 800ded0:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		}
#endif
		if (res == FR_OK) {						/* Object to be renamed is found */
 800ded4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ded8:	2b00      	cmp	r3, #0
 800deda:	f040 80b0 	bne.w	800e03e <f_rename+0x1e6>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
 800dede:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dee0:	f103 010b 	add.w	r1, r3, #11
 800dee4:	f107 0308 	add.w	r3, r7, #8
 800dee8:	2215      	movs	r2, #21
 800deea:	4618      	mov	r0, r3
 800deec:	f7fd fb0e 	bl	800b50c <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 800def0:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800def4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800def8:	2230      	movs	r2, #48	@ 0x30
 800defa:	4618      	mov	r0, r3
 800defc:	f7fd fb06 	bl	800b50c <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 800df00:	683a      	ldr	r2, [r7, #0]
 800df02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800df06:	4611      	mov	r1, r2
 800df08:	4618      	mov	r0, r3
 800df0a:	f7fe fc07 	bl	800c71c <follow_path>
 800df0e:	4603      	mov	r3, r0
 800df10:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 800df14:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d10c      	bne.n	800df36 <f_rename+0xde>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 800df1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df20:	429a      	cmp	r2, r3
 800df22:	d105      	bne.n	800df30 <f_rename+0xd8>
 800df24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800df28:	429a      	cmp	r2, r3
 800df2a:	d101      	bne.n	800df30 <f_rename+0xd8>
 800df2c:	2304      	movs	r3, #4
 800df2e:	e000      	b.n	800df32 <f_rename+0xda>
 800df30:	2308      	movs	r3, #8
 800df32:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 800df36:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800df3a:	2b04      	cmp	r3, #4
 800df3c:	d168      	bne.n	800e010 <f_rename+0x1b8>
					res = dir_register(&djn);			/* Register the new entry */
 800df3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800df42:	4618      	mov	r0, r3
 800df44:	f7fe fb05 	bl	800c552 <dir_register>
 800df48:	4603      	mov	r3, r0
 800df4a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
					if (res == FR_OK) {
 800df4e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800df52:	2b00      	cmp	r3, #0
 800df54:	d15c      	bne.n	800e010 <f_rename+0x1b8>
						dir = djn.dir;					/* Copy information about object except name */
 800df56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
						mem_cpy(dir + 13, buf + 2, 19);
 800df5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800df60:	f103 000d 	add.w	r0, r3, #13
 800df64:	f107 0308 	add.w	r3, r7, #8
 800df68:	3302      	adds	r3, #2
 800df6a:	2213      	movs	r2, #19
 800df6c:	4619      	mov	r1, r3
 800df6e:	f7fd facd 	bl	800b50c <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
 800df72:	7a3a      	ldrb	r2, [r7, #8]
 800df74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800df78:	330b      	adds	r3, #11
 800df7a:	f042 0220 	orr.w	r2, r2, #32
 800df7e:	b2d2      	uxtb	r2, r2
 800df80:	701a      	strb	r2, [r3, #0]
						fs->wflag = 1;
 800df82:	6a3b      	ldr	r3, [r7, #32]
 800df84:	2201      	movs	r2, #1
 800df86:	70da      	strb	r2, [r3, #3]
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
 800df88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800df8c:	330b      	adds	r3, #11
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	f003 0310 	and.w	r3, r3, #16
 800df94:	2b00      	cmp	r3, #0
 800df96:	d03b      	beq.n	800e010 <f_rename+0x1b8>
 800df98:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800df9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d037      	beq.n	800e010 <f_rename+0x1b8>
							dw = clust2sect(fs, ld_clust(fs, dir));
 800dfa0:	6a3c      	ldr	r4, [r7, #32]
 800dfa2:	6a3b      	ldr	r3, [r7, #32]
 800dfa4:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fe f9e1 	bl	800c370 <ld_clust>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	f7fd fd74 	bl	800baa0 <clust2sect>
 800dfb8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
							if (!dw) {
 800dfbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d103      	bne.n	800dfcc <f_rename+0x174>
								res = FR_INT_ERR;
 800dfc4:	2302      	movs	r3, #2
 800dfc6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 800dfca:	e021      	b.n	800e010 <f_rename+0x1b8>
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, dw);
 800dfcc:	6a3b      	ldr	r3, [r7, #32]
 800dfce:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fd fcc8 	bl	800b968 <move_window>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 800dfde:	6a3b      	ldr	r3, [r7, #32]
 800dfe0:	3330      	adds	r3, #48	@ 0x30
 800dfe2:	3320      	adds	r3, #32
 800dfe4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
								if (res == FR_OK && dir[1] == '.') {
 800dfe8:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d10f      	bne.n	800e010 <f_rename+0x1b8>
 800dff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dff4:	3301      	adds	r3, #1
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	2b2e      	cmp	r3, #46	@ 0x2e
 800dffa:	d109      	bne.n	800e010 <f_rename+0x1b8>
									st_clust(fs, dir, djn.obj.sclust);
 800dffc:	6a3b      	ldr	r3, [r7, #32]
 800dffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e000:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800e004:	4618      	mov	r0, r3
 800e006:	f7fe f9d2 	bl	800c3ae <st_clust>
									fs->wflag = 1;
 800e00a:	6a3b      	ldr	r3, [r7, #32]
 800e00c:	2201      	movs	r2, #1
 800e00e:	70da      	strb	r2, [r3, #3]
							}
						}
					}
				}
			}
			if (res == FR_OK) {
 800e010:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e014:	2b00      	cmp	r3, #0
 800e016:	d112      	bne.n	800e03e <f_rename+0x1e6>
				res = dir_remove(&djo);		/* Remove old entry */
 800e018:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7fe faca 	bl	800c5b6 <dir_remove>
 800e022:	4603      	mov	r3, r0
 800e024:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (res == FR_OK) {
 800e028:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d106      	bne.n	800e03e <f_rename+0x1e6>
					res = sync_fs(fs);
 800e030:	6a3b      	ldr	r3, [r7, #32]
 800e032:	4618      	mov	r0, r3
 800e034:	f7fd fcc6 	bl	800b9c4 <sync_fs>
 800e038:	4603      	mov	r3, r0
 800e03a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
/* End of the critical section */
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800e03e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 800e042:	4618      	mov	r0, r3
 800e044:	3794      	adds	r7, #148	@ 0x94
 800e046:	46bd      	mov	sp, r7
 800e048:	bd90      	pop	{r4, r7, pc}
	...

0800e04c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b087      	sub	sp, #28
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	4613      	mov	r3, r2
 800e058:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e05a:	2301      	movs	r3, #1
 800e05c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e05e:	2300      	movs	r3, #0
 800e060:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e062:	4b1f      	ldr	r3, [pc, #124]	@ (800e0e0 <FATFS_LinkDriverEx+0x94>)
 800e064:	7a5b      	ldrb	r3, [r3, #9]
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d131      	bne.n	800e0d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e06c:	4b1c      	ldr	r3, [pc, #112]	@ (800e0e0 <FATFS_LinkDriverEx+0x94>)
 800e06e:	7a5b      	ldrb	r3, [r3, #9]
 800e070:	b2db      	uxtb	r3, r3
 800e072:	461a      	mov	r2, r3
 800e074:	4b1a      	ldr	r3, [pc, #104]	@ (800e0e0 <FATFS_LinkDriverEx+0x94>)
 800e076:	2100      	movs	r1, #0
 800e078:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e07a:	4b19      	ldr	r3, [pc, #100]	@ (800e0e0 <FATFS_LinkDriverEx+0x94>)
 800e07c:	7a5b      	ldrb	r3, [r3, #9]
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	4a17      	ldr	r2, [pc, #92]	@ (800e0e0 <FATFS_LinkDriverEx+0x94>)
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	4413      	add	r3, r2
 800e086:	68fa      	ldr	r2, [r7, #12]
 800e088:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e08a:	4b15      	ldr	r3, [pc, #84]	@ (800e0e0 <FATFS_LinkDriverEx+0x94>)
 800e08c:	7a5b      	ldrb	r3, [r3, #9]
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	461a      	mov	r2, r3
 800e092:	4b13      	ldr	r3, [pc, #76]	@ (800e0e0 <FATFS_LinkDriverEx+0x94>)
 800e094:	4413      	add	r3, r2
 800e096:	79fa      	ldrb	r2, [r7, #7]
 800e098:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e09a:	4b11      	ldr	r3, [pc, #68]	@ (800e0e0 <FATFS_LinkDriverEx+0x94>)
 800e09c:	7a5b      	ldrb	r3, [r3, #9]
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	1c5a      	adds	r2, r3, #1
 800e0a2:	b2d1      	uxtb	r1, r2
 800e0a4:	4a0e      	ldr	r2, [pc, #56]	@ (800e0e0 <FATFS_LinkDriverEx+0x94>)
 800e0a6:	7251      	strb	r1, [r2, #9]
 800e0a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e0aa:	7dbb      	ldrb	r3, [r7, #22]
 800e0ac:	3330      	adds	r3, #48	@ 0x30
 800e0ae:	b2da      	uxtb	r2, r3
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	3301      	adds	r3, #1
 800e0b8:	223a      	movs	r2, #58	@ 0x3a
 800e0ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	3302      	adds	r3, #2
 800e0c0:	222f      	movs	r2, #47	@ 0x2f
 800e0c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	3303      	adds	r3, #3
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	371c      	adds	r7, #28
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr
 800e0de:	bf00      	nop
 800e0e0:	20014760 	.word	0x20014760

0800e0e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	6839      	ldr	r1, [r7, #0]
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f7ff ffaa 	bl	800e04c <FATFS_LinkDriverEx>
 800e0f8:	4603      	mov	r3, r0
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3708      	adds	r7, #8
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}
	...

0800e104 <malloc>:
 800e104:	4b02      	ldr	r3, [pc, #8]	@ (800e110 <malloc+0xc>)
 800e106:	4601      	mov	r1, r0
 800e108:	6818      	ldr	r0, [r3, #0]
 800e10a:	f000 b82d 	b.w	800e168 <_malloc_r>
 800e10e:	bf00      	nop
 800e110:	2000001c 	.word	0x2000001c

0800e114 <free>:
 800e114:	4b02      	ldr	r3, [pc, #8]	@ (800e120 <free+0xc>)
 800e116:	4601      	mov	r1, r0
 800e118:	6818      	ldr	r0, [r3, #0]
 800e11a:	f000 b967 	b.w	800e3ec <_free_r>
 800e11e:	bf00      	nop
 800e120:	2000001c 	.word	0x2000001c

0800e124 <sbrk_aligned>:
 800e124:	b570      	push	{r4, r5, r6, lr}
 800e126:	4e0f      	ldr	r6, [pc, #60]	@ (800e164 <sbrk_aligned+0x40>)
 800e128:	460c      	mov	r4, r1
 800e12a:	6831      	ldr	r1, [r6, #0]
 800e12c:	4605      	mov	r5, r0
 800e12e:	b911      	cbnz	r1, 800e136 <sbrk_aligned+0x12>
 800e130:	f000 f90a 	bl	800e348 <_sbrk_r>
 800e134:	6030      	str	r0, [r6, #0]
 800e136:	4621      	mov	r1, r4
 800e138:	4628      	mov	r0, r5
 800e13a:	f000 f905 	bl	800e348 <_sbrk_r>
 800e13e:	1c43      	adds	r3, r0, #1
 800e140:	d103      	bne.n	800e14a <sbrk_aligned+0x26>
 800e142:	f04f 34ff 	mov.w	r4, #4294967295
 800e146:	4620      	mov	r0, r4
 800e148:	bd70      	pop	{r4, r5, r6, pc}
 800e14a:	1cc4      	adds	r4, r0, #3
 800e14c:	f024 0403 	bic.w	r4, r4, #3
 800e150:	42a0      	cmp	r0, r4
 800e152:	d0f8      	beq.n	800e146 <sbrk_aligned+0x22>
 800e154:	1a21      	subs	r1, r4, r0
 800e156:	4628      	mov	r0, r5
 800e158:	f000 f8f6 	bl	800e348 <_sbrk_r>
 800e15c:	3001      	adds	r0, #1
 800e15e:	d1f2      	bne.n	800e146 <sbrk_aligned+0x22>
 800e160:	e7ef      	b.n	800e142 <sbrk_aligned+0x1e>
 800e162:	bf00      	nop
 800e164:	2001476c 	.word	0x2001476c

0800e168 <_malloc_r>:
 800e168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e16c:	1ccd      	adds	r5, r1, #3
 800e16e:	f025 0503 	bic.w	r5, r5, #3
 800e172:	3508      	adds	r5, #8
 800e174:	2d0c      	cmp	r5, #12
 800e176:	bf38      	it	cc
 800e178:	250c      	movcc	r5, #12
 800e17a:	2d00      	cmp	r5, #0
 800e17c:	4606      	mov	r6, r0
 800e17e:	db01      	blt.n	800e184 <_malloc_r+0x1c>
 800e180:	42a9      	cmp	r1, r5
 800e182:	d904      	bls.n	800e18e <_malloc_r+0x26>
 800e184:	230c      	movs	r3, #12
 800e186:	6033      	str	r3, [r6, #0]
 800e188:	2000      	movs	r0, #0
 800e18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e18e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e264 <_malloc_r+0xfc>
 800e192:	f000 f869 	bl	800e268 <__malloc_lock>
 800e196:	f8d8 3000 	ldr.w	r3, [r8]
 800e19a:	461c      	mov	r4, r3
 800e19c:	bb44      	cbnz	r4, 800e1f0 <_malloc_r+0x88>
 800e19e:	4629      	mov	r1, r5
 800e1a0:	4630      	mov	r0, r6
 800e1a2:	f7ff ffbf 	bl	800e124 <sbrk_aligned>
 800e1a6:	1c43      	adds	r3, r0, #1
 800e1a8:	4604      	mov	r4, r0
 800e1aa:	d158      	bne.n	800e25e <_malloc_r+0xf6>
 800e1ac:	f8d8 4000 	ldr.w	r4, [r8]
 800e1b0:	4627      	mov	r7, r4
 800e1b2:	2f00      	cmp	r7, #0
 800e1b4:	d143      	bne.n	800e23e <_malloc_r+0xd6>
 800e1b6:	2c00      	cmp	r4, #0
 800e1b8:	d04b      	beq.n	800e252 <_malloc_r+0xea>
 800e1ba:	6823      	ldr	r3, [r4, #0]
 800e1bc:	4639      	mov	r1, r7
 800e1be:	4630      	mov	r0, r6
 800e1c0:	eb04 0903 	add.w	r9, r4, r3
 800e1c4:	f000 f8c0 	bl	800e348 <_sbrk_r>
 800e1c8:	4581      	cmp	r9, r0
 800e1ca:	d142      	bne.n	800e252 <_malloc_r+0xea>
 800e1cc:	6821      	ldr	r1, [r4, #0]
 800e1ce:	1a6d      	subs	r5, r5, r1
 800e1d0:	4629      	mov	r1, r5
 800e1d2:	4630      	mov	r0, r6
 800e1d4:	f7ff ffa6 	bl	800e124 <sbrk_aligned>
 800e1d8:	3001      	adds	r0, #1
 800e1da:	d03a      	beq.n	800e252 <_malloc_r+0xea>
 800e1dc:	6823      	ldr	r3, [r4, #0]
 800e1de:	442b      	add	r3, r5
 800e1e0:	6023      	str	r3, [r4, #0]
 800e1e2:	f8d8 3000 	ldr.w	r3, [r8]
 800e1e6:	685a      	ldr	r2, [r3, #4]
 800e1e8:	bb62      	cbnz	r2, 800e244 <_malloc_r+0xdc>
 800e1ea:	f8c8 7000 	str.w	r7, [r8]
 800e1ee:	e00f      	b.n	800e210 <_malloc_r+0xa8>
 800e1f0:	6822      	ldr	r2, [r4, #0]
 800e1f2:	1b52      	subs	r2, r2, r5
 800e1f4:	d420      	bmi.n	800e238 <_malloc_r+0xd0>
 800e1f6:	2a0b      	cmp	r2, #11
 800e1f8:	d917      	bls.n	800e22a <_malloc_r+0xc2>
 800e1fa:	1961      	adds	r1, r4, r5
 800e1fc:	42a3      	cmp	r3, r4
 800e1fe:	6025      	str	r5, [r4, #0]
 800e200:	bf18      	it	ne
 800e202:	6059      	strne	r1, [r3, #4]
 800e204:	6863      	ldr	r3, [r4, #4]
 800e206:	bf08      	it	eq
 800e208:	f8c8 1000 	streq.w	r1, [r8]
 800e20c:	5162      	str	r2, [r4, r5]
 800e20e:	604b      	str	r3, [r1, #4]
 800e210:	4630      	mov	r0, r6
 800e212:	f000 f82f 	bl	800e274 <__malloc_unlock>
 800e216:	f104 000b 	add.w	r0, r4, #11
 800e21a:	1d23      	adds	r3, r4, #4
 800e21c:	f020 0007 	bic.w	r0, r0, #7
 800e220:	1ac2      	subs	r2, r0, r3
 800e222:	bf1c      	itt	ne
 800e224:	1a1b      	subne	r3, r3, r0
 800e226:	50a3      	strne	r3, [r4, r2]
 800e228:	e7af      	b.n	800e18a <_malloc_r+0x22>
 800e22a:	6862      	ldr	r2, [r4, #4]
 800e22c:	42a3      	cmp	r3, r4
 800e22e:	bf0c      	ite	eq
 800e230:	f8c8 2000 	streq.w	r2, [r8]
 800e234:	605a      	strne	r2, [r3, #4]
 800e236:	e7eb      	b.n	800e210 <_malloc_r+0xa8>
 800e238:	4623      	mov	r3, r4
 800e23a:	6864      	ldr	r4, [r4, #4]
 800e23c:	e7ae      	b.n	800e19c <_malloc_r+0x34>
 800e23e:	463c      	mov	r4, r7
 800e240:	687f      	ldr	r7, [r7, #4]
 800e242:	e7b6      	b.n	800e1b2 <_malloc_r+0x4a>
 800e244:	461a      	mov	r2, r3
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	42a3      	cmp	r3, r4
 800e24a:	d1fb      	bne.n	800e244 <_malloc_r+0xdc>
 800e24c:	2300      	movs	r3, #0
 800e24e:	6053      	str	r3, [r2, #4]
 800e250:	e7de      	b.n	800e210 <_malloc_r+0xa8>
 800e252:	230c      	movs	r3, #12
 800e254:	6033      	str	r3, [r6, #0]
 800e256:	4630      	mov	r0, r6
 800e258:	f000 f80c 	bl	800e274 <__malloc_unlock>
 800e25c:	e794      	b.n	800e188 <_malloc_r+0x20>
 800e25e:	6005      	str	r5, [r0, #0]
 800e260:	e7d6      	b.n	800e210 <_malloc_r+0xa8>
 800e262:	bf00      	nop
 800e264:	20014770 	.word	0x20014770

0800e268 <__malloc_lock>:
 800e268:	4801      	ldr	r0, [pc, #4]	@ (800e270 <__malloc_lock+0x8>)
 800e26a:	f000 b8a7 	b.w	800e3bc <__retarget_lock_acquire_recursive>
 800e26e:	bf00      	nop
 800e270:	200148b0 	.word	0x200148b0

0800e274 <__malloc_unlock>:
 800e274:	4801      	ldr	r0, [pc, #4]	@ (800e27c <__malloc_unlock+0x8>)
 800e276:	f000 b8a2 	b.w	800e3be <__retarget_lock_release_recursive>
 800e27a:	bf00      	nop
 800e27c:	200148b0 	.word	0x200148b0

0800e280 <realloc>:
 800e280:	4b02      	ldr	r3, [pc, #8]	@ (800e28c <realloc+0xc>)
 800e282:	460a      	mov	r2, r1
 800e284:	4601      	mov	r1, r0
 800e286:	6818      	ldr	r0, [r3, #0]
 800e288:	f000 b802 	b.w	800e290 <_realloc_r>
 800e28c:	2000001c 	.word	0x2000001c

0800e290 <_realloc_r>:
 800e290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e294:	4680      	mov	r8, r0
 800e296:	4615      	mov	r5, r2
 800e298:	460c      	mov	r4, r1
 800e29a:	b921      	cbnz	r1, 800e2a6 <_realloc_r+0x16>
 800e29c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2a0:	4611      	mov	r1, r2
 800e2a2:	f7ff bf61 	b.w	800e168 <_malloc_r>
 800e2a6:	b92a      	cbnz	r2, 800e2b4 <_realloc_r+0x24>
 800e2a8:	f000 f8a0 	bl	800e3ec <_free_r>
 800e2ac:	2400      	movs	r4, #0
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b4:	f000 f8e4 	bl	800e480 <_malloc_usable_size_r>
 800e2b8:	4285      	cmp	r5, r0
 800e2ba:	4606      	mov	r6, r0
 800e2bc:	d802      	bhi.n	800e2c4 <_realloc_r+0x34>
 800e2be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e2c2:	d8f4      	bhi.n	800e2ae <_realloc_r+0x1e>
 800e2c4:	4629      	mov	r1, r5
 800e2c6:	4640      	mov	r0, r8
 800e2c8:	f7ff ff4e 	bl	800e168 <_malloc_r>
 800e2cc:	4607      	mov	r7, r0
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d0ec      	beq.n	800e2ac <_realloc_r+0x1c>
 800e2d2:	42b5      	cmp	r5, r6
 800e2d4:	462a      	mov	r2, r5
 800e2d6:	4621      	mov	r1, r4
 800e2d8:	bf28      	it	cs
 800e2da:	4632      	movcs	r2, r6
 800e2dc:	f000 f878 	bl	800e3d0 <memcpy>
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	4640      	mov	r0, r8
 800e2e4:	f000 f882 	bl	800e3ec <_free_r>
 800e2e8:	463c      	mov	r4, r7
 800e2ea:	e7e0      	b.n	800e2ae <_realloc_r+0x1e>

0800e2ec <memset>:
 800e2ec:	4402      	add	r2, r0
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d100      	bne.n	800e2f6 <memset+0xa>
 800e2f4:	4770      	bx	lr
 800e2f6:	f803 1b01 	strb.w	r1, [r3], #1
 800e2fa:	e7f9      	b.n	800e2f0 <memset+0x4>

0800e2fc <strcat>:
 800e2fc:	b510      	push	{r4, lr}
 800e2fe:	4602      	mov	r2, r0
 800e300:	7814      	ldrb	r4, [r2, #0]
 800e302:	4613      	mov	r3, r2
 800e304:	3201      	adds	r2, #1
 800e306:	2c00      	cmp	r4, #0
 800e308:	d1fa      	bne.n	800e300 <strcat+0x4>
 800e30a:	3b01      	subs	r3, #1
 800e30c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e310:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e314:	2a00      	cmp	r2, #0
 800e316:	d1f9      	bne.n	800e30c <strcat+0x10>
 800e318:	bd10      	pop	{r4, pc}

0800e31a <strrchr>:
 800e31a:	b538      	push	{r3, r4, r5, lr}
 800e31c:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800e320:	4603      	mov	r3, r0
 800e322:	d10e      	bne.n	800e342 <strrchr+0x28>
 800e324:	4621      	mov	r1, r4
 800e326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e32a:	f000 b8b1 	b.w	800e490 <strchr>
 800e32e:	1c43      	adds	r3, r0, #1
 800e330:	4605      	mov	r5, r0
 800e332:	4621      	mov	r1, r4
 800e334:	4618      	mov	r0, r3
 800e336:	f000 f8ab 	bl	800e490 <strchr>
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d1f7      	bne.n	800e32e <strrchr+0x14>
 800e33e:	4628      	mov	r0, r5
 800e340:	bd38      	pop	{r3, r4, r5, pc}
 800e342:	2500      	movs	r5, #0
 800e344:	e7f5      	b.n	800e332 <strrchr+0x18>
	...

0800e348 <_sbrk_r>:
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	4d06      	ldr	r5, [pc, #24]	@ (800e364 <_sbrk_r+0x1c>)
 800e34c:	2300      	movs	r3, #0
 800e34e:	4604      	mov	r4, r0
 800e350:	4608      	mov	r0, r1
 800e352:	602b      	str	r3, [r5, #0]
 800e354:	f7f6 f948 	bl	80045e8 <_sbrk>
 800e358:	1c43      	adds	r3, r0, #1
 800e35a:	d102      	bne.n	800e362 <_sbrk_r+0x1a>
 800e35c:	682b      	ldr	r3, [r5, #0]
 800e35e:	b103      	cbz	r3, 800e362 <_sbrk_r+0x1a>
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	bd38      	pop	{r3, r4, r5, pc}
 800e364:	200148ac 	.word	0x200148ac

0800e368 <__errno>:
 800e368:	4b01      	ldr	r3, [pc, #4]	@ (800e370 <__errno+0x8>)
 800e36a:	6818      	ldr	r0, [r3, #0]
 800e36c:	4770      	bx	lr
 800e36e:	bf00      	nop
 800e370:	2000001c 	.word	0x2000001c

0800e374 <__libc_init_array>:
 800e374:	b570      	push	{r4, r5, r6, lr}
 800e376:	4d0d      	ldr	r5, [pc, #52]	@ (800e3ac <__libc_init_array+0x38>)
 800e378:	4c0d      	ldr	r4, [pc, #52]	@ (800e3b0 <__libc_init_array+0x3c>)
 800e37a:	1b64      	subs	r4, r4, r5
 800e37c:	10a4      	asrs	r4, r4, #2
 800e37e:	2600      	movs	r6, #0
 800e380:	42a6      	cmp	r6, r4
 800e382:	d109      	bne.n	800e398 <__libc_init_array+0x24>
 800e384:	4d0b      	ldr	r5, [pc, #44]	@ (800e3b4 <__libc_init_array+0x40>)
 800e386:	4c0c      	ldr	r4, [pc, #48]	@ (800e3b8 <__libc_init_array+0x44>)
 800e388:	f000 f890 	bl	800e4ac <_init>
 800e38c:	1b64      	subs	r4, r4, r5
 800e38e:	10a4      	asrs	r4, r4, #2
 800e390:	2600      	movs	r6, #0
 800e392:	42a6      	cmp	r6, r4
 800e394:	d105      	bne.n	800e3a2 <__libc_init_array+0x2e>
 800e396:	bd70      	pop	{r4, r5, r6, pc}
 800e398:	f855 3b04 	ldr.w	r3, [r5], #4
 800e39c:	4798      	blx	r3
 800e39e:	3601      	adds	r6, #1
 800e3a0:	e7ee      	b.n	800e380 <__libc_init_array+0xc>
 800e3a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3a6:	4798      	blx	r3
 800e3a8:	3601      	adds	r6, #1
 800e3aa:	e7f2      	b.n	800e392 <__libc_init_array+0x1e>
 800e3ac:	0800f464 	.word	0x0800f464
 800e3b0:	0800f464 	.word	0x0800f464
 800e3b4:	0800f464 	.word	0x0800f464
 800e3b8:	0800f468 	.word	0x0800f468

0800e3bc <__retarget_lock_acquire_recursive>:
 800e3bc:	4770      	bx	lr

0800e3be <__retarget_lock_release_recursive>:
 800e3be:	4770      	bx	lr

0800e3c0 <strcpy>:
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e3c6:	f803 2b01 	strb.w	r2, [r3], #1
 800e3ca:	2a00      	cmp	r2, #0
 800e3cc:	d1f9      	bne.n	800e3c2 <strcpy+0x2>
 800e3ce:	4770      	bx	lr

0800e3d0 <memcpy>:
 800e3d0:	440a      	add	r2, r1
 800e3d2:	4291      	cmp	r1, r2
 800e3d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3d8:	d100      	bne.n	800e3dc <memcpy+0xc>
 800e3da:	4770      	bx	lr
 800e3dc:	b510      	push	{r4, lr}
 800e3de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3e6:	4291      	cmp	r1, r2
 800e3e8:	d1f9      	bne.n	800e3de <memcpy+0xe>
 800e3ea:	bd10      	pop	{r4, pc}

0800e3ec <_free_r>:
 800e3ec:	b538      	push	{r3, r4, r5, lr}
 800e3ee:	4605      	mov	r5, r0
 800e3f0:	2900      	cmp	r1, #0
 800e3f2:	d041      	beq.n	800e478 <_free_r+0x8c>
 800e3f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e3f8:	1f0c      	subs	r4, r1, #4
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	bfb8      	it	lt
 800e3fe:	18e4      	addlt	r4, r4, r3
 800e400:	f7ff ff32 	bl	800e268 <__malloc_lock>
 800e404:	4a1d      	ldr	r2, [pc, #116]	@ (800e47c <_free_r+0x90>)
 800e406:	6813      	ldr	r3, [r2, #0]
 800e408:	b933      	cbnz	r3, 800e418 <_free_r+0x2c>
 800e40a:	6063      	str	r3, [r4, #4]
 800e40c:	6014      	str	r4, [r2, #0]
 800e40e:	4628      	mov	r0, r5
 800e410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e414:	f7ff bf2e 	b.w	800e274 <__malloc_unlock>
 800e418:	42a3      	cmp	r3, r4
 800e41a:	d908      	bls.n	800e42e <_free_r+0x42>
 800e41c:	6820      	ldr	r0, [r4, #0]
 800e41e:	1821      	adds	r1, r4, r0
 800e420:	428b      	cmp	r3, r1
 800e422:	bf01      	itttt	eq
 800e424:	6819      	ldreq	r1, [r3, #0]
 800e426:	685b      	ldreq	r3, [r3, #4]
 800e428:	1809      	addeq	r1, r1, r0
 800e42a:	6021      	streq	r1, [r4, #0]
 800e42c:	e7ed      	b.n	800e40a <_free_r+0x1e>
 800e42e:	461a      	mov	r2, r3
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	b10b      	cbz	r3, 800e438 <_free_r+0x4c>
 800e434:	42a3      	cmp	r3, r4
 800e436:	d9fa      	bls.n	800e42e <_free_r+0x42>
 800e438:	6811      	ldr	r1, [r2, #0]
 800e43a:	1850      	adds	r0, r2, r1
 800e43c:	42a0      	cmp	r0, r4
 800e43e:	d10b      	bne.n	800e458 <_free_r+0x6c>
 800e440:	6820      	ldr	r0, [r4, #0]
 800e442:	4401      	add	r1, r0
 800e444:	1850      	adds	r0, r2, r1
 800e446:	4283      	cmp	r3, r0
 800e448:	6011      	str	r1, [r2, #0]
 800e44a:	d1e0      	bne.n	800e40e <_free_r+0x22>
 800e44c:	6818      	ldr	r0, [r3, #0]
 800e44e:	685b      	ldr	r3, [r3, #4]
 800e450:	6053      	str	r3, [r2, #4]
 800e452:	4408      	add	r0, r1
 800e454:	6010      	str	r0, [r2, #0]
 800e456:	e7da      	b.n	800e40e <_free_r+0x22>
 800e458:	d902      	bls.n	800e460 <_free_r+0x74>
 800e45a:	230c      	movs	r3, #12
 800e45c:	602b      	str	r3, [r5, #0]
 800e45e:	e7d6      	b.n	800e40e <_free_r+0x22>
 800e460:	6820      	ldr	r0, [r4, #0]
 800e462:	1821      	adds	r1, r4, r0
 800e464:	428b      	cmp	r3, r1
 800e466:	bf04      	itt	eq
 800e468:	6819      	ldreq	r1, [r3, #0]
 800e46a:	685b      	ldreq	r3, [r3, #4]
 800e46c:	6063      	str	r3, [r4, #4]
 800e46e:	bf04      	itt	eq
 800e470:	1809      	addeq	r1, r1, r0
 800e472:	6021      	streq	r1, [r4, #0]
 800e474:	6054      	str	r4, [r2, #4]
 800e476:	e7ca      	b.n	800e40e <_free_r+0x22>
 800e478:	bd38      	pop	{r3, r4, r5, pc}
 800e47a:	bf00      	nop
 800e47c:	20014770 	.word	0x20014770

0800e480 <_malloc_usable_size_r>:
 800e480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e484:	1f18      	subs	r0, r3, #4
 800e486:	2b00      	cmp	r3, #0
 800e488:	bfbc      	itt	lt
 800e48a:	580b      	ldrlt	r3, [r1, r0]
 800e48c:	18c0      	addlt	r0, r0, r3
 800e48e:	4770      	bx	lr

0800e490 <strchr>:
 800e490:	b2c9      	uxtb	r1, r1
 800e492:	4603      	mov	r3, r0
 800e494:	4618      	mov	r0, r3
 800e496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e49a:	b112      	cbz	r2, 800e4a2 <strchr+0x12>
 800e49c:	428a      	cmp	r2, r1
 800e49e:	d1f9      	bne.n	800e494 <strchr+0x4>
 800e4a0:	4770      	bx	lr
 800e4a2:	2900      	cmp	r1, #0
 800e4a4:	bf18      	it	ne
 800e4a6:	2000      	movne	r0, #0
 800e4a8:	4770      	bx	lr
	...

0800e4ac <_init>:
 800e4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ae:	bf00      	nop
 800e4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4b2:	bc08      	pop	{r3}
 800e4b4:	469e      	mov	lr, r3
 800e4b6:	4770      	bx	lr

0800e4b8 <_fini>:
 800e4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ba:	bf00      	nop
 800e4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4be:	bc08      	pop	{r3}
 800e4c0:	469e      	mov	lr, r3
 800e4c2:	4770      	bx	lr
